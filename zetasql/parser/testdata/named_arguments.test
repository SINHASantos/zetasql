# Parser tests for ZetaSQL named arguments as designed at
# (broken link).
#
# Valid function call with named arguments in the same order as they appear in
# the function signature.
select parse_date(format_string => "%x", date_string => "12/25/08")
--
QueryStatement [0-67] [select parse_date...12/25/08")]
  Query [0-67] [select parse_date...12/25/08")]
    Select [0-67] [select parse_date...12/25/08")]
      SelectList [7-67] [parse_date...12/25/08")]
        SelectColumn [7-67] [parse_date...12/25/08")]
          FunctionCall [7-67] [parse_date...12/25/08")]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            NamedArgument [18-39] [format_string => "%x"]
              Identifier(format_string) [18-31] [format_string]
              StringLiteral [35-39] ["%x"]
                StringLiteralComponent("%x") [35-39] ["%x"]
            NamedArgument [41-66] [date_string => "12/25/08"]
              Identifier(date_string) [41-52] [date_string]
              StringLiteral [56-66] ["12/25/08"]
                StringLiteralComponent("12/25/08") [56-66] ["12/25/08"]
--
SELECT
  parse_date(format_string  => "%x", date_string  => "12/25/08")
==

# Valid function call with named arguments in a different order that they appear
# in the function signature.
select parse_date(date_string => "12/25/08", format_string => "%x")
--
QueryStatement [0-67] [select parse_date...g => "%x")]
  Query [0-67] [select parse_date...g => "%x")]
    Select [0-67] [select parse_date...g => "%x")]
      SelectList [7-67] [parse_date...t_string => "%x")]
        SelectColumn [7-67] [parse_date...t_string => "%x")]
          FunctionCall [7-67] [parse_date...t_string => "%x")]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            NamedArgument [18-43] [date_string => "12/25/08"]
              Identifier(date_string) [18-29] [date_string]
              StringLiteral [33-43] ["12/25/08"]
                StringLiteralComponent("12/25/08") [33-43] ["12/25/08"]
            NamedArgument [45-66] [format_string => "%x"]
              Identifier(format_string) [45-58] [format_string]
              StringLiteral [62-66] ["%x"]
                StringLiteralComponent("%x") [62-66] ["%x"]
--
SELECT
  parse_date(date_string  => "12/25/08", format_string  => "%x")
==

# Valid function call with named arguments assigned to non-literal expressions.
select parse_date(
    format_string => concat("%", "x"),
    date_string => concat(cast(10 + 2 as string), "/25/08"))
--
QueryStatement [0-118] [select parse_date..."/25/08"))]
  Query [0-118] [select parse_date..."/25/08"))]
    Select [0-118] [select parse_date..."/25/08"))]
      SelectList [7-118] [parse_date..."/25/08"))]
        SelectColumn [7-118] [parse_date..."/25/08"))]
          FunctionCall [7-118] [parse_date..."/25/08"))]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            NamedArgument [23-56] [format_string...("%", "x")]
              Identifier(format_string) [23-36] [format_string]
              FunctionCall [40-56] [concat("%", "x")]
                PathExpression [40-46] [concat]
                  Identifier(concat) [40-46] [concat]
                StringLiteral [47-50] ["%"]
                  StringLiteralComponent("%") [47-50] ["%"]
                StringLiteral [52-55] ["x"]
                  StringLiteralComponent("x") [52-55] ["x"]
            NamedArgument [62-117] [date_string..."/25/08")]
              Identifier(date_string) [62-73] [date_string]
              FunctionCall [77-117] [concat(cast..."/25/08")]
                PathExpression [77-83] [concat]
                  Identifier(concat) [77-83] [concat]
                CastExpression [84-106] [cast(10 + 2 as string)]
                  BinaryExpression(+) [89-95] [10 + 2]
                    IntLiteral(10) [89-91] [10]
                    IntLiteral(2) [94-95] [2]
                  SimpleType [99-105] [string]
                    PathExpression [99-105] [string]
                      Identifier(string) [99-105] [string]
                StringLiteral [108-116] ["/25/08"]
                  StringLiteralComponent("/25/08") [108-116] ["/25/08"]
--
SELECT
  parse_date(format_string  => concat("%", "x"), date_string  => concat(CAST(10 + 2 AS string), "/25/08"))
==

# Valid function call with a positional argument followed by a named argument.
select parse_date("%x", date_string => "12/25/08")
--
QueryStatement [0-50] [select parse_date...12/25/08")]
  Query [0-50] [select parse_date...12/25/08")]
    Select [0-50] [select parse_date...12/25/08")]
      SelectList [7-50] [parse_date...12/25/08")]
        SelectColumn [7-50] [parse_date...12/25/08")]
          FunctionCall [7-50] [parse_date...12/25/08")]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            StringLiteral [18-22] ["%x"]
              StringLiteralComponent("%x") [18-22] ["%x"]
            NamedArgument [24-49] [date_string => "12/25/08"]
              Identifier(date_string) [24-35] [date_string]
              StringLiteral [39-49] ["12/25/08"]
                StringLiteralComponent("12/25/08") [39-49] ["12/25/08"]
--
SELECT
  parse_date("%x", date_string  => "12/25/08")
==

# Valid TVF call with expression named arguments.
select * from mytvf(date_string => "12/25/08", format_string => "%x")
--
QueryStatement [0-69] [select * from...tring => "%x")]
  Query [0-69] [select * from...tring => "%x")]
    Select [0-69] [select * from...tring => "%x")]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-69] [from mytvf...t_string => "%x")]
        TVF [14-69] [mytvf(date_string...g => "%x")]
          PathExpression [14-19] [mytvf]
            Identifier(mytvf) [14-19] [mytvf]
          TVFArgument [20-45] [date_string => "12/25/08"]
            NamedArgument [20-45] [date_string => "12/25/08"]
              Identifier(date_string) [20-31] [date_string]
              StringLiteral [35-45] ["12/25/08"]
                StringLiteralComponent("12/25/08") [35-45] ["12/25/08"]
          TVFArgument [47-68] [format_string => "%x"]
            NamedArgument [47-68] [format_string => "%x"]
              Identifier(format_string) [47-60] [format_string]
              StringLiteral [64-68] ["%x"]
                StringLiteralComponent("%x") [64-68] ["%x"]
--
SELECT
  *
FROM
  mytvf(date_string  => "12/25/08", format_string  => "%x")
==

# Valid TVF call with a combination of expression and relation named arguments.
select * from mytvf(
    date_string => '''
      field: value
    ''',
    format_string => (select * from keyvalue));
--
QueryStatement [0-118] [select * from...keyvalue))]
  Query [0-118] [select * from...keyvalue))]
    Select [0-118] [select * from...keyvalue))]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-118] [from mytvf...keyvalue))]
        TVF [14-118] [mytvf(...keyvalue))]
          PathExpression [14-19] [mytvf]
            Identifier(mytvf) [14-19] [mytvf]
          TVFArgument [25-70] [date_string...value     ''']
            NamedArgument [25-70] [date_string...value     ''']
              Identifier(date_string) [25-36] [date_string]
              StringLiteral [40-70] ['''       field: value     ''']
                StringLiteralComponent('''
      field: value
    ''') [40-70] ['''       field: value     ''']
          TVFArgument [76-117] [format_string...keyvalue)]
            NamedArgument [76-117] [format_string...keyvalue)]
              Identifier(format_string) [76-89] [format_string]
              ExpressionSubquery [93-117] [(select * from keyvalue)]
                Query [94-116] [select * from keyvalue]
                  Select [94-116] [select * from keyvalue]
                    SelectList [101-102] [*]
                      SelectColumn [101-102] [*]
                        Star(*) [101-102] [*]
                    FromClause [103-116] [from keyvalue]
                      TablePathExpression [108-116] [keyvalue]
                        PathExpression [108-116] [keyvalue]
                          Identifier(keyvalue) [108-116] [keyvalue]
--
SELECT
  *
FROM
  mytvf(date_string  => '''
      field: value
    ''', format_string  => (
    SELECT
      *
    FROM
      keyvalue
  ))
==

# Valid TVF call with a positional argument followed by a named argument.
select * from mytvf("%x", date_string => (select 'abc' as input))
--
QueryStatement [0-65] [select * from...as input))]
  Query [0-65] [select * from...as input))]
    Select [0-65] [select * from...as input))]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-65] [from mytvf...as input))]
        TVF [14-65] [mytvf("%x"...as input))]
          PathExpression [14-19] [mytvf]
            Identifier(mytvf) [14-19] [mytvf]
          TVFArgument [20-24] ["%x"]
            StringLiteral [20-24] ["%x"]
              StringLiteralComponent("%x") [20-24] ["%x"]
          TVFArgument [26-64] [date_string...as input)]
            NamedArgument [26-64] [date_string...as input)]
              Identifier(date_string) [26-37] [date_string]
              ExpressionSubquery [41-64] [(select 'abc' as input)]
                Query [42-63] [select 'abc' as input]
                  Select [42-63] [select 'abc' as input]
                    SelectList [49-63] ['abc' as input]
                      SelectColumn [49-63] ['abc' as input]
                        StringLiteral [49-54] ['abc']
                          StringLiteralComponent('abc') [49-54] ['abc']
                        Alias [55-63] [as input]
                          Identifier(input) [58-63] [input]
--
SELECT
  *
FROM
  mytvf("%x", date_string  => (
    SELECT
      'abc' AS input
  ))
==

# Valid TVF call with double parentheses in a named argument.
select * from mytvf(date_string => ((select 1)));
--
QueryStatement [0-48] [select * from...select 1)))]
  Query [0-48] [select * from...select 1)))]
    Select [0-48] [select * from...select 1)))]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-48] [from mytvf...select 1)))]
        TVF [14-48] [mytvf(date_string...elect 1)))]
          PathExpression [14-19] [mytvf]
            Identifier(mytvf) [14-19] [mytvf]
          TVFArgument [20-47] [date_string => ((select 1))]
            NamedArgument [20-47] [date_string => ((select 1))]
              Identifier(date_string) [20-31] [date_string]
              ExpressionSubquery [35-47] [((select 1))]
                Query [37-45] [select 1]
                  Select [37-45] [select 1]
                    SelectList [44-45] [1]
                      SelectColumn [44-45] [1]
                        IntLiteral(1) [44-45] [1]
--
SELECT
  *
FROM
  mytvf(date_string  => (
    SELECT
      1
  ))
==

# Invalid function call with a positional argument preceding a named argument.
select parse_date(format_string => "%x", "12/25/08")
--
QueryStatement [0-52] [select parse_date...12/25/08")]
  Query [0-52] [select parse_date...12/25/08")]
    Select [0-52] [select parse_date...12/25/08")]
      SelectList [7-52] [parse_date...12/25/08")]
        SelectColumn [7-52] [parse_date...12/25/08")]
          FunctionCall [7-52] [parse_date...12/25/08")]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            NamedArgument [18-39] [format_string => "%x"]
              Identifier(format_string) [18-31] [format_string]
              StringLiteral [35-39] ["%x"]
                StringLiteralComponent("%x") [35-39] ["%x"]
            StringLiteral [41-51] ["12/25/08"]
              StringLiteralComponent("12/25/08") [41-51] ["12/25/08"]
--
SELECT
  parse_date(format_string  => "%x", "12/25/08")
==

# Invalid function call missing a required argument.
select parse_date(format_string => "%x")
--
QueryStatement [0-40] [select parse_date...g => "%x")]
  Query [0-40] [select parse_date...g => "%x")]
    Select [0-40] [select parse_date...g => "%x")]
      SelectList [7-40] [parse_date...t_string => "%x")]
        SelectColumn [7-40] [parse_date...t_string => "%x")]
          FunctionCall [7-40] [parse_date...t_string => "%x")]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            NamedArgument [18-39] [format_string => "%x"]
              Identifier(format_string) [18-31] [format_string]
              StringLiteral [35-39] ["%x"]
                StringLiteralComponent("%x") [35-39] ["%x"]
--
SELECT
  parse_date(format_string  => "%x")
==

# Invalid function call missing the value of a required argument.
select parse_date("%x", date_string => "12/25/08")
--
QueryStatement [0-50] [select parse_date...12/25/08")]
  Query [0-50] [select parse_date...12/25/08")]
    Select [0-50] [select parse_date...12/25/08")]
      SelectList [7-50] [parse_date...12/25/08")]
        SelectColumn [7-50] [parse_date...12/25/08")]
          FunctionCall [7-50] [parse_date...12/25/08")]
            PathExpression [7-17] [parse_date]
              Identifier(parse_date) [7-17] [parse_date]
            StringLiteral [18-22] ["%x"]
              StringLiteralComponent("%x") [18-22] ["%x"]
            NamedArgument [24-49] [date_string => "12/25/08"]
              Identifier(date_string) [24-35] [date_string]
              StringLiteral [39-49] ["12/25/08"]
                StringLiteralComponent("12/25/08") [39-49] ["12/25/08"]
--
SELECT
  parse_date("%x", date_string  => "12/25/08")
==

# Invalid function call missing the name of a required argument.
select parse_date("%x", => "12/25/08")
--
ERROR: Syntax error: Unexpected "=>" [at 1:25]
select parse_date("%x", => "12/25/08")
                        ^
==

# Invalid function call missing the arrow symbol of a required argument.
select parse_date("%x", date_string "12/25/08")
--
ERROR: Syntax error: Expected ")" but got string literal "12/25/08" [at 1:37]
select parse_date("%x", date_string "12/25/08")
                                    ^
==

# Invalid TVF call with parentheses around the named argument.
select * from mytvf((date_string => "12/25/08"));
--
ERROR: Syntax error: Named arguments for table-valued function calls written as "name => value" must not be enclosed in parentheses. To fix this, replace (name => value) with name => value [at 1:21]
select * from mytvf((date_string => "12/25/08"));
                    ^
==

# Invalid TVF call with a named argument with the TABLE keyword.
select * from mytvf(date_string => table keyvalue);
--
ERROR: Syntax error: Expected ")" but got identifier "keyvalue" [at 1:42]
select * from mytvf(date_string => table keyvalue);
                                         ^
==

# Invalid TVF call with a named argument with the MODEL keyword.
select * from mytvf(date_string => model keyvalue);
--
ERROR: Syntax error: Expected ")" but got identifier "keyvalue" [at 1:42]
select * from mytvf(date_string => model keyvalue);
                                         ^
==

# The parser allows named lambdas for filter fields.
SELECT FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, RESET_CLEARED_REQUIRED_FIELDS => e -> e)
FROM TestTable
--
QueryStatement [0-117] [SELECT FILTER_FIE...TestTable]
  Query [0-117] [SELECT FILTER_FIE...TestTable]
    Select [0-117] [SELECT FILTER_FIE...TestTable]
      SelectList [7-102] [FILTER_FIELDS...=> e -> e)]
        SelectColumn [7-102] [FILTER_FIELDS...=> e -> e)]
          FunctionCall [7-102] [FILTER_FIELDS...=> e -> e)]
            PathExpression [7-20] [FILTER_FIELDS]
              Identifier(FILTER_FIELDS) [7-20] [FILTER_FIELDS]
            PathExpression [21-32] [KitchenSink]
              Identifier(KitchenSink) [21-32] [KitchenSink]
            UnaryExpression(+) [34-46] [+int64_key_1]
              PathExpression [35-46] [int64_key_1]
                Identifier(int64_key_1) [35-46] [int64_key_1]
            UnaryExpression(+) [48-60] [+int64_key_2]
              PathExpression [49-60] [int64_key_2]
                Identifier(int64_key_2) [49-60] [int64_key_2]
            NamedArgument [62-101] [RESET_CLEARED_REQ...=> e -> e]
              Identifier(RESET_CLEARED_REQUIRED_FIELDS) [62-91] [RESET_CLEARED_REQUIRED_FIELDS]
              Lambda [95-101] [e -> e]
                PathExpression [95-96] [e]
                  Identifier(e) [95-96] [e]
                PathExpression [100-101] [e]
                  Identifier(e) [100-101] [e]
      FromClause [103-117] [FROM TestTable]
        TablePathExpression [108-117] [TestTable]
          PathExpression [108-117] [TestTable]
            Identifier(TestTable) [108-117] [TestTable]
--
SELECT
  FILTER_FIELDS(KitchenSink, +int64_key_1, +int64_key_2, RESET_CLEARED_REQUIRED_FIELDS  => (e) -> e)
FROM
  TestTable
==

# The parser allows named lambdas for window functions.
select afn_named_lambda(distinct key, named_lambda => e -> e) over ()
from keyvalue
ORDER BY key
--
QueryStatement [0-96] [select afn_named_...DER BY key]
  Query [0-96] [select afn_named_...DER BY key]
    Select [0-83] [select afn_named_...m keyvalue]
      SelectList [7-69] [afn_named_lambda...e) over ()]
        SelectColumn [7-69] [afn_named_lambda...e) over ()]
          AnalyticFunctionCall [7-69] [afn_named_lambda...e) over ()]
            FunctionCall(distinct=true) [7-61] [afn_named_lambda...=> e -> e)]
              PathExpression [7-23] [afn_named_lambda]
                Identifier(afn_named_lambda) [7-23] [afn_named_lambda]
              PathExpression [33-36] [key]
                Identifier(key) [33-36] [key]
              NamedArgument [38-60] [named_lambda => e -> e]
                Identifier(named_lambda) [38-50] [named_lambda]
                Lambda [54-60] [e -> e]
                  PathExpression [54-55] [e]
                    Identifier(e) [54-55] [e]
                  PathExpression [59-60] [e]
                    Identifier(e) [59-60] [e]
            WindowSpecification [67-69] [()]
      FromClause [70-83] [from keyvalue]
        TablePathExpression [75-83] [keyvalue]
          PathExpression [75-83] [keyvalue]
            Identifier(keyvalue) [75-83] [keyvalue]
    OrderBy [84-96] [ORDER BY key]
      OrderingExpression(ASC) [93-96] [key]
        PathExpression [93-96] [key]
          Identifier(key) [93-96] [key]
--
SELECT
  afn_named_lambda(DISTINCT key, named_lambda  => (e) -> e) OVER ()
FROM
  keyvalue
ORDER BY key
==

# The parser allows named lambdas for scalar functions.
SELECT fn_named_lambda(1, named_lambda => e -> e)
--
QueryStatement [0-49] [SELECT fn_named_l...=> e -> e)]
  Query [0-49] [SELECT fn_named_l...=> e -> e)]
    Select [0-49] [SELECT fn_named_l...=> e -> e)]
      SelectList [7-49] [fn_named_lambda...=> e -> e)]
        SelectColumn [7-49] [fn_named_lambda...=> e -> e)]
          FunctionCall [7-49] [fn_named_lambda...=> e -> e)]
            PathExpression [7-22] [fn_named_lambda]
              Identifier(fn_named_lambda) [7-22] [fn_named_lambda]
            IntLiteral(1) [23-24] [1]
            NamedArgument [26-48] [named_lambda => e -> e]
              Identifier(named_lambda) [26-38] [named_lambda]
              Lambda [42-48] [e -> e]
                PathExpression [42-43] [e]
                  Identifier(e) [42-43] [e]
                PathExpression [47-48] [e]
                  Identifier(e) [47-48] [e]
--
SELECT
  fn_named_lambda(1, named_lambda  => (e) -> e)
==

# The parser allows named lambdas for aggregate functions.
SELECT fn_aggregate_named_lambda(key, named_lambda => e -> e)
FROM KeyValue
--
QueryStatement [0-75] [SELECT fn_aggrega...M KeyValue]
  Query [0-75] [SELECT fn_aggrega...M KeyValue]
    Select [0-75] [SELECT fn_aggrega...M KeyValue]
      SelectList [7-61] [fn_aggregate_name...=> e -> e)]
        SelectColumn [7-61] [fn_aggregate_name...=> e -> e)]
          FunctionCall [7-61] [fn_aggregate_name...=> e -> e)]
            PathExpression [7-32] [fn_aggregate_named_lambda]
              Identifier(fn_aggregate_named_lambda) [7-32] [fn_aggregate_named_lambda]
            PathExpression [33-36] [key]
              Identifier(key) [33-36] [key]
            NamedArgument [38-60] [named_lambda => e -> e]
              Identifier(named_lambda) [38-50] [named_lambda]
              Lambda [54-60] [e -> e]
                PathExpression [54-55] [e]
                  Identifier(e) [54-55] [e]
                PathExpression [59-60] [e]
                  Identifier(e) [59-60] [e]
      FromClause [62-75] [FROM KeyValue]
        TablePathExpression [67-75] [KeyValue]
          PathExpression [67-75] [KeyValue]
            Identifier(KeyValue) [67-75] [KeyValue]
--
SELECT
  fn_aggregate_named_lambda(key, named_lambda  => (e) -> e)
FROM
  KeyValue
==

# The parser allows named lambdas for UNNEST.
SELECT 1
FROM UNNEST([1], mode => e -> e)
--
QueryStatement [0-41] [SELECT 1 FROM...=> e -> e)]
  Query [0-41] [SELECT 1 FROM...=> e -> e)]
    Select [0-41] [SELECT 1 FROM...=> e -> e)]
      SelectList [7-8] [1]
        SelectColumn [7-8] [1]
          IntLiteral(1) [7-8] [1]
      FromClause [9-41] [FROM UNNEST...=> e -> e)]
        TablePathExpression [14-41] [UNNEST([1], mode => e -> e)]
          UnnestExpression [14-41] [UNNEST([1], mode => e -> e)]
            ExpressionWithOptAlias [21-24] [[1]]
              ArrayConstructor [21-24] [[1]]
                IntLiteral(1) [22-23] [1]
            NamedArgument [26-40] [mode => e -> e]
              Identifier(mode) [26-30] [mode]
              Lambda [34-40] [e -> e]
                PathExpression [34-35] [e]
                  Identifier(e) [34-35] [e]
                PathExpression [39-40] [e]
                  Identifier(e) [39-40] [e]
--
SELECT
  1
FROM
  UNNEST(ARRAY[1], mode  => (e) -> e)
==

# The parser allows named lambdas for tvfs.
SELECT * FROM tvf_relation_arg_scalar_arg_named_lambda(
    (SELECT 1 AS X), 1, named_lambda => e -> e)
--
QueryStatement [0-103] [SELECT * FROM...=> e -> e)]
  Query [0-103] [SELECT * FROM...=> e -> e)]
    Select [0-103] [SELECT * FROM...=> e -> e)]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-103] [FROM tvf_relation...=> e -> e)]
        TVF [14-103] [tvf_relation_arg_...=> e -> e)]
          PathExpression [14-54] [tvf_relation_arg_...med_lambda]
            Identifier(tvf_relation_arg_scalar_arg_named_lambda) [14-54] [tvf_relation_arg_...med_lambda]
          TVFArgument [60-75] [(SELECT 1 AS X)]
            ExpressionSubquery [60-75] [(SELECT 1 AS X)]
              Query [61-74] [SELECT 1 AS X]
                Select [61-74] [SELECT 1 AS X]
                  SelectList [68-74] [1 AS X]
                    SelectColumn [68-74] [1 AS X]
                      IntLiteral(1) [68-69] [1]
                      Alias [70-74] [AS X]
                        Identifier(X) [73-74] [X]
          TVFArgument [77-78] [1]
            IntLiteral(1) [77-78] [1]
          TVFArgument [80-102] [named_lambda => e -> e]
            NamedArgument [80-102] [named_lambda => e -> e]
              Identifier(named_lambda) [80-92] [named_lambda]
              Lambda [96-102] [e -> e]
                PathExpression [96-97] [e]
                  Identifier(e) [96-97] [e]
                PathExpression [101-102] [e]
                  Identifier(e) [101-102] [e]
--
SELECT
  *
FROM
  tvf_relation_arg_scalar_arg_named_lambda((
    SELECT
      1 AS X
  ), 1, named_lambda  => (e) -> e)
==

# The parser allows named lambdas for procedure calls.
CALL proc_on_named_lambda(1, named_lambda => e -> e)
--
CallStatement [0-52] [CALL proc_on_name...=> e -> e)]
  PathExpression [5-25] [proc_on_named_lambda]
    Identifier(proc_on_named_lambda) [5-25] [proc_on_named_lambda]
  TVFArgument [26-27] [1]
    IntLiteral(1) [26-27] [1]
  TVFArgument [29-51] [named_lambda => e -> e]
    NamedArgument [29-51] [named_lambda => e -> e]
      Identifier(named_lambda) [29-41] [named_lambda]
      Lambda [45-51] [e -> e]
        PathExpression [45-46] [e]
          Identifier(e) [45-46] [e]
        PathExpression [50-51] [e]
          Identifier(e) [50-51] [e]
--
CALL proc_on_named_lambda(1, named_lambda  => (e) -> e)
