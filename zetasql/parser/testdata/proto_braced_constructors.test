[default language_features=NONE,+BRACED_PROTO_CONSTRUCTORS]
[language_features=NONE]
# Braced constructors disabled
SELECT NEW x {}
--
ERROR: Braced constructors are not supported [at 2:14]
SELECT NEW x {}
             ^
==

# No field constructor.
SELECT NEW x {}
--
QueryStatement [0-15] [SELECT NEW x {}]
  Query [0-15] [SELECT NEW x {}]
    Select [0-15] [SELECT NEW x {}]
      SelectList [7-15] [NEW x {}]
        SelectColumn [7-15] [NEW x {}]
          BracedNewConstructor [7-15] [NEW x {}]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-15] [{}]
--
SELECT
  NEW x { }
==

# No type/field constructor.
SELECT {}
--
QueryStatement [0-9] [SELECT {}]
  Query [0-9] [SELECT {}]
    Select [0-9] [SELECT {}]
      SelectList [7-9] [{}]
        SelectColumn [7-9] [{}]
          BracedConstructor [7-9] [{}]
--
SELECT
  { }
==

# No type/field constructor with trailing comma.
SELECT {,}
--
ERROR: Syntax error: Unexpected "," [at 1:9]
SELECT {,}
        ^
==

# One field with trailing comma.
SELECT {bar:3,}
--
QueryStatement [0-15] [SELECT {bar:3,}]
  Query [0-15] [SELECT {bar:3,}]
    Select [0-15] [SELECT {bar:3,}]
      SelectList [7-15] [{bar:3,}]
        SelectColumn [7-15] [{bar:3,}]
          BracedConstructor [7-15] [{bar:3,}]
            BracedConstructorField [8-13] [bar:3]
              BracedConstructorLhs [8-11] [bar]
                PathExpression [8-11] [bar]
                  Identifier(bar) [8-11] [bar]
              BracedConstructorFieldValue [11-13] [:3]
                IntLiteral(3) [12-13] [3]
--
SELECT
  {
    bar : 3
  }
==

# One field with multiple trailing commas.
SELECT {bar:3,,}
--
ERROR: Syntax error: Unexpected "," [at 1:15]
SELECT {bar:3,,}
              ^
==

# Simple constructor.
SELECT NEW x { foo: "blah" bar: 3 }
--
QueryStatement [0-35] [SELECT NEW..." bar: 3 }]
  Query [0-35] [SELECT NEW..." bar: 3 }]
    Select [0-35] [SELECT NEW..." bar: 3 }]
      SelectList [7-35] [NEW x { foo: "blah" bar: 3 }]
        SelectColumn [7-35] [NEW x { foo: "blah" bar: 3 }]
          BracedNewConstructor [7-35] [NEW x { foo: "blah" bar: 3 }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-35] [{ foo: "blah" bar: 3 }]
              BracedConstructorField [15-26] [foo: "blah"]
                BracedConstructorLhs [15-18] [foo]
                  PathExpression [15-18] [foo]
                    Identifier(foo) [15-18] [foo]
                BracedConstructorFieldValue [18-26] [: "blah"]
                  StringLiteral [20-26] ["blah"]
                    StringLiteralComponent("blah") [20-26] ["blah"]
              BracedConstructorField [27-33] [bar: 3]
                BracedConstructorLhs [27-30] [bar]
                  PathExpression [27-30] [bar]
                    Identifier(bar) [27-30] [bar]
                BracedConstructorFieldValue [30-33] [: 3]
                  IntLiteral(3) [32-33] [3]
--
SELECT
  NEW x {
    foo : "blah"
    bar : 3
  }
==

# Simple constructor with trailing comma.
SELECT NEW x { foo: "blah" bar: 3, }
--
QueryStatement [0-36] [SELECT NEW...bar: 3, }]
  Query [0-36] [SELECT NEW...bar: 3, }]
    Select [0-36] [SELECT NEW...bar: 3, }]
      SelectList [7-36] [NEW x { foo: "blah" bar: 3, }]
        SelectColumn [7-36] [NEW x { foo: "blah" bar: 3, }]
          BracedNewConstructor [7-36] [NEW x { foo: "blah" bar: 3, }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-36] [{ foo: "blah" bar: 3, }]
              BracedConstructorField [15-26] [foo: "blah"]
                BracedConstructorLhs [15-18] [foo]
                  PathExpression [15-18] [foo]
                    Identifier(foo) [15-18] [foo]
                BracedConstructorFieldValue [18-26] [: "blah"]
                  StringLiteral [20-26] ["blah"]
                    StringLiteralComponent("blah") [20-26] ["blah"]
              BracedConstructorField [27-33] [bar: 3]
                BracedConstructorLhs [27-30] [bar]
                  PathExpression [27-30] [bar]
                    Identifier(bar) [27-30] [bar]
                BracedConstructorFieldValue [30-33] [: 3]
                  IntLiteral(3) [32-33] [3]
--
SELECT
  NEW x {
    foo : "blah"
    bar : 3
  }
==

# Simple constructor with multiple comma.
SELECT NEW x { foo: "blah" bar: 3,, }
--
ERROR: Syntax error: Unexpected "," [at 1:35]
SELECT NEW x { foo: "blah" bar: 3,, }
                                  ^
==

# Simple constructor with comma.
SELECT NEW x { foo: "blah", bar: 3 }
--
QueryStatement [0-36] [SELECT NEW..., bar: 3 }]
  Query [0-36] [SELECT NEW..., bar: 3 }]
    Select [0-36] [SELECT NEW..., bar: 3 }]
      SelectList [7-36] [NEW x { foo: "blah", bar: 3 }]
        SelectColumn [7-36] [NEW x { foo: "blah", bar: 3 }]
          BracedNewConstructor [7-36] [NEW x { foo: "blah", bar: 3 }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-36] [{ foo: "blah", bar: 3 }]
              BracedConstructorField [15-26] [foo: "blah"]
                BracedConstructorLhs [15-18] [foo]
                  PathExpression [15-18] [foo]
                    Identifier(foo) [15-18] [foo]
                BracedConstructorFieldValue [18-26] [: "blah"]
                  StringLiteral [20-26] ["blah"]
                    StringLiteralComponent("blah") [20-26] ["blah"]
              BracedConstructorField [28-34] [bar: 3]
                BracedConstructorLhs [28-31] [bar]
                  PathExpression [28-31] [bar]
                    Identifier(bar) [28-31] [bar]
                BracedConstructorFieldValue [31-34] [: 3]
                  IntLiteral(3) [33-34] [3]
--
SELECT
  NEW x {
    foo : "blah",
    bar : 3
  }
==

# Simple constructor with trailing comma.
SELECT NEW x { foo: "blah", bar: 3, }
--
QueryStatement [0-37] [SELECT NEW...bar: 3, }]
  Query [0-37] [SELECT NEW...bar: 3, }]
    Select [0-37] [SELECT NEW...bar: 3, }]
      SelectList [7-37] [NEW x { foo: "blah", bar: 3, }]
        SelectColumn [7-37] [NEW x { foo: "blah", bar: 3, }]
          BracedNewConstructor [7-37] [NEW x { foo: "blah", bar: 3, }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-37] [{ foo: "blah", bar: 3, }]
              BracedConstructorField [15-26] [foo: "blah"]
                BracedConstructorLhs [15-18] [foo]
                  PathExpression [15-18] [foo]
                    Identifier(foo) [15-18] [foo]
                BracedConstructorFieldValue [18-26] [: "blah"]
                  StringLiteral [20-26] ["blah"]
                    StringLiteralComponent("blah") [20-26] ["blah"]
              BracedConstructorField [28-34] [bar: 3]
                BracedConstructorLhs [28-31] [bar]
                  PathExpression [28-31] [bar]
                    Identifier(bar) [28-31] [bar]
                BracedConstructorFieldValue [31-34] [: 3]
                  IntLiteral(3) [33-34] [3]
--
SELECT
  NEW x {
    foo : "blah",
    bar : 3
  }
==

# Simple constructor with multiple commas.
SELECT NEW x { foo: "blah", bar: 3,, }
--
ERROR: Syntax error: Unexpected "," [at 1:36]
SELECT NEW x { foo: "blah", bar: 3,, }
                                   ^
==

# Leading comma is disallowed.
SELECT NEW x { , foo: "blah", bar: 3 }
--
ERROR: Syntax error: Unexpected "," [at 1:16]
SELECT NEW x { , foo: "blah", bar: 3 }
               ^
==

# Nested message and array field.
SELECT NEW x {
  foo {
    monkey: "blah"
  }
  bar: 3
  int_array: [1,2,3]
}
--
QueryStatement [0-77] [SELECT NEW...[1,2,3] }]
  Query [0-77] [SELECT NEW...[1,2,3] }]
    Select [0-77] [SELECT NEW...[1,2,3] }]
      SelectList [7-77] [NEW x {...[1,2,3] }]
        SelectColumn [7-77] [NEW x {...[1,2,3] }]
          BracedNewConstructor [7-77] [NEW x {...[1,2,3] }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-77] [{   foo {...[1,2,3] }]
              BracedConstructorField [17-45] [foo {     monkey: "blah"   }]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [21-45] [{     monkey: "blah"   }]
                  BracedConstructor [21-45] [{     monkey: "blah"   }]
                    BracedConstructorField [27-41] [monkey: "blah"]
                      BracedConstructorLhs [27-33] [monkey]
                        PathExpression [27-33] [monkey]
                          Identifier(monkey) [27-33] [monkey]
                      BracedConstructorFieldValue [33-41] [: "blah"]
                        StringLiteral [35-41] ["blah"]
                          StringLiteralComponent("blah") [35-41] ["blah"]
              BracedConstructorField [48-54] [bar: 3]
                BracedConstructorLhs [48-51] [bar]
                  PathExpression [48-51] [bar]
                    Identifier(bar) [48-51] [bar]
                BracedConstructorFieldValue [51-54] [: 3]
                  IntLiteral(3) [53-54] [3]
              BracedConstructorField [57-75] [int_array: [1,2,3]]
                BracedConstructorLhs [57-66] [int_array]
                  PathExpression [57-66] [int_array]
                    Identifier(int_array) [57-66] [int_array]
                BracedConstructorFieldValue [66-75] [: [1,2,3]]
                  ArrayConstructor [68-75] [[1,2,3]]
                    IntLiteral(1) [69-70] [1]
                    IntLiteral(2) [71-72] [2]
                    IntLiteral(3) [73-74] [3]
--
SELECT
  NEW x {
    foo  {
      monkey : "blah"
    }
    bar : 3
    int_array : ARRAY[1, 2, 3]
  }
==

# Nested message with trailing comma.
SELECT NEW x {
  foo {
    monkey: "blah",
  },
}
--
QueryStatement [0-49] [SELECT NEW...blah",   }, }]
  Query [0-49] [SELECT NEW...blah",   }, }]
    Select [0-49] [SELECT NEW...blah",   }, }]
      SelectList [7-49] [NEW x {...blah",   }, }]
        SelectColumn [7-49] [NEW x {...blah",   }, }]
          BracedNewConstructor [7-49] [NEW x {...blah",   }, }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-49] [{   foo {...blah",   }, }]
              BracedConstructorField [17-46] [foo {     monkey: "blah",   }]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [21-46] [{     monkey: "blah",   }]
                  BracedConstructor [21-46] [{     monkey: "blah",   }]
                    BracedConstructorField [27-41] [monkey: "blah"]
                      BracedConstructorLhs [27-33] [monkey]
                        PathExpression [27-33] [monkey]
                          Identifier(monkey) [27-33] [monkey]
                      BracedConstructorFieldValue [33-41] [: "blah"]
                        StringLiteral [35-41] ["blah"]
                          StringLiteralComponent("blah") [35-41] ["blah"]
--
SELECT
  NEW x {
    foo  {
      monkey : "blah"
    }
  }
==

# Nested message (with colon) and array field.
SELECT NEW x {
  foo: {
    monkey: "blah"
  }
  bar: 3
  int_array: [1,2,3]
}
--
QueryStatement [0-78] [SELECT NEW...[1,2,3] }]
  Query [0-78] [SELECT NEW...[1,2,3] }]
    Select [0-78] [SELECT NEW...[1,2,3] }]
      SelectList [7-78] [NEW x {...[1,2,3] }]
        SelectColumn [7-78] [NEW x {...[1,2,3] }]
          BracedNewConstructor [7-78] [NEW x {...[1,2,3] }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-78] [{   foo: {...[1,2,3] }]
              BracedConstructorField [17-46] [foo: {     monkey: "blah"   }]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-46] [: {     monkey: "blah"   }]
                  BracedConstructor [22-46] [{     monkey: "blah"   }]
                    BracedConstructorField [28-42] [monkey: "blah"]
                      BracedConstructorLhs [28-34] [monkey]
                        PathExpression [28-34] [monkey]
                          Identifier(monkey) [28-34] [monkey]
                      BracedConstructorFieldValue [34-42] [: "blah"]
                        StringLiteral [36-42] ["blah"]
                          StringLiteralComponent("blah") [36-42] ["blah"]
              BracedConstructorField [49-55] [bar: 3]
                BracedConstructorLhs [49-52] [bar]
                  PathExpression [49-52] [bar]
                    Identifier(bar) [49-52] [bar]
                BracedConstructorFieldValue [52-55] [: 3]
                  IntLiteral(3) [54-55] [3]
              BracedConstructorField [58-76] [int_array: [1,2,3]]
                BracedConstructorLhs [58-67] [int_array]
                  PathExpression [58-67] [int_array]
                    Identifier(int_array) [58-67] [int_array]
                BracedConstructorFieldValue [67-76] [: [1,2,3]]
                  ArrayConstructor [69-76] [[1,2,3]]
                    IntLiteral(1) [70-71] [1]
                    IntLiteral(2) [72-73] [2]
                    IntLiteral(3) [74-75] [3]
--
SELECT
  NEW x {
    foo : {
      monkey : "blah"
    }
    bar : 3
    int_array : ARRAY[1, 2, 3]
  }
==

# Sub-message array.
SELECT NEW x {
  int_field: 1
  submessage_array: [{
    monkey: "blah"
  }, {
    baz: "abc"
  }]
}
--
QueryStatement [0-100] [SELECT NEW...abc"   }] }]
  Query [0-100] [SELECT NEW...abc"   }] }]
    Select [0-100] [SELECT NEW...abc"   }] }]
      SelectList [7-100] [NEW x {...abc"   }] }]
        SelectColumn [7-100] [NEW x {...abc"   }] }]
          BracedNewConstructor [7-100] [NEW x {...abc"   }] }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-100] [{   int_field...abc"   }] }]
              BracedConstructorField [17-29] [int_field: 1]
                BracedConstructorLhs [17-26] [int_field]
                  PathExpression [17-26] [int_field]
                    Identifier(int_field) [17-26] [int_field]
                BracedConstructorFieldValue [26-29] [: 1]
                  IntLiteral(1) [28-29] [1]
              BracedConstructorField [32-98] [submessage_array..."abc"   }]]
                BracedConstructorLhs [32-48] [submessage_array]
                  PathExpression [32-48] [submessage_array]
                    Identifier(submessage_array) [32-48] [submessage_array]
                BracedConstructorFieldValue [48-98] [: [{     monkey..."abc"   }]]
                  ArrayConstructor [50-98] [[{     monkey..."abc"   }]]
                    BracedConstructor [51-75] [{     monkey: "blah"   }]
                      BracedConstructorField [57-71] [monkey: "blah"]
                        BracedConstructorLhs [57-63] [monkey]
                          PathExpression [57-63] [monkey]
                            Identifier(monkey) [57-63] [monkey]
                        BracedConstructorFieldValue [63-71] [: "blah"]
                          StringLiteral [65-71] ["blah"]
                            StringLiteralComponent("blah") [65-71] ["blah"]
                    BracedConstructor [77-97] [{     baz: "abc"   }]
                      BracedConstructorField [83-93] [baz: "abc"]
                        BracedConstructorLhs [83-86] [baz]
                          PathExpression [83-86] [baz]
                            Identifier(baz) [83-86] [baz]
                        BracedConstructorFieldValue [86-93] [: "abc"]
                          StringLiteral [88-93] ["abc"]
                            StringLiteralComponent("abc") [88-93] ["abc"]
--
SELECT
  NEW x {
    int_field : 1
    submessage_array : ARRAY[{
      monkey : "blah"
    }, {
      baz : "abc"
    }]
  }
==

# At parse-time map fields are just like repeated sub-message fields.
SELECT NEW x {
  int_field: 1
  map_field: [{
    key: "blah"
    value: 1
  }, {
    key: "abc"
    value: 2
  }]
}
--
QueryStatement [0-116] [SELECT NEW...: 2   }] }]
  Query [0-116] [SELECT NEW...: 2   }] }]
    Select [0-116] [SELECT NEW...: 2   }] }]
      SelectList [7-116] [NEW x {...: 2   }] }]
        SelectColumn [7-116] [NEW x {...: 2   }] }]
          BracedNewConstructor [7-116] [NEW x {...: 2   }] }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-116] [{   int_field...: 2   }] }]
              BracedConstructorField [17-29] [int_field: 1]
                BracedConstructorLhs [17-26] [int_field]
                  PathExpression [17-26] [int_field]
                    Identifier(int_field) [17-26] [int_field]
                BracedConstructorFieldValue [26-29] [: 1]
                  IntLiteral(1) [28-29] [1]
              BracedConstructorField [32-114] [map_field:...value: 2   }]]
                BracedConstructorLhs [32-41] [map_field]
                  PathExpression [32-41] [map_field]
                    Identifier(map_field) [32-41] [map_field]
                BracedConstructorFieldValue [41-114] [: [{     key...value: 2   }]]
                  ArrayConstructor [43-114] [[{     key...value: 2   }]]
                    BracedConstructor [44-78] [{     key:...value: 1   }]
                      BracedConstructorField [50-61] [key: "blah"]
                        BracedConstructorLhs [50-53] [key]
                          PathExpression [50-53] [key]
                            Identifier(key) [50-53] [key]
                        BracedConstructorFieldValue [53-61] [: "blah"]
                          StringLiteral [55-61] ["blah"]
                            StringLiteralComponent("blah") [55-61] ["blah"]
                      BracedConstructorField [66-74] [value: 1]
                        BracedConstructorLhs [66-71] [value]
                          PathExpression [66-71] [value]
                            Identifier(value) [66-71] [value]
                        BracedConstructorFieldValue [71-74] [: 1]
                          IntLiteral(1) [73-74] [1]
                    BracedConstructor [80-113] [{     key:...value: 2   }]
                      BracedConstructorField [86-96] [key: "abc"]
                        BracedConstructorLhs [86-89] [key]
                          PathExpression [86-89] [key]
                            Identifier(key) [86-89] [key]
                        BracedConstructorFieldValue [89-96] [: "abc"]
                          StringLiteral [91-96] ["abc"]
                            StringLiteralComponent("abc") [91-96] ["abc"]
                      BracedConstructorField [101-109] [value: 2]
                        BracedConstructorLhs [101-106] [value]
                          PathExpression [101-106] [value]
                            Identifier(value) [101-106] [value]
                        BracedConstructorFieldValue [106-109] [: 2]
                          IntLiteral(2) [108-109] [2]
--
SELECT
  NEW x {
    int_field : 1
    map_field : ARRAY[{
      key : "blah"
      value : 1
    }, {
      key : "abc"
      value : 2
    }]
  }
==

# Plain extension.
SELECT NEW x {
  (path.to.extension) {
    value: 1
  }
}
--
QueryStatement [0-57] [SELECT NEW...value: 1   } }]
  Query [0-57] [SELECT NEW...value: 1   } }]
    Select [0-57] [SELECT NEW...value: 1   } }]
      SelectList [7-57] [NEW x {...value: 1   } }]
        SelectColumn [7-57] [NEW x {...value: 1   } }]
          BracedNewConstructor [7-57] [NEW x {...value: 1   } }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-57] [{   (path....value: 1   } }]
              BracedConstructorField [17-55] [(path.to.extensio...lue: 1   }]
                BracedConstructorLhs [17-36] [(path.to.extension)]
                  PathExpression [18-35] [path.to.extension]
                    Identifier(path) [18-22] [path]
                    Identifier(`to`) [23-25] [to]
                    Identifier(extension) [26-35] [extension]
                BracedConstructorFieldValue [37-55] [{     value: 1   }]
                  BracedConstructor [37-55] [{     value: 1   }]
                    BracedConstructorField [43-51] [value: 1]
                      BracedConstructorLhs [43-48] [value]
                        PathExpression [43-48] [value]
                          Identifier(value) [43-48] [value]
                      BracedConstructorFieldValue [48-51] [: 1]
                        IntLiteral(1) [50-51] [1]
--
SELECT
  NEW x {
    (path.`to`.extension)  {
      value : 1
    }
  }
==

# Extension without parenthesis is not a parser error but an analyzer error.
SELECT NEW x { path.to.extension: 1 }
--
QueryStatement [0-37] [SELECT NEW...extension: 1 }]
  Query [0-37] [SELECT NEW...extension: 1 }]
    Select [0-37] [SELECT NEW...extension: 1 }]
      SelectList [7-37] [NEW x { path.to.extension: 1 }]
        SelectColumn [7-37] [NEW x { path.to.extension: 1 }]
          BracedNewConstructor [7-37] [NEW x { path.to.extension: 1 }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-37] [{ path.to.extension: 1 }]
              BracedConstructorField [15-35] [path.to.extension: 1]
                BracedConstructorLhs [15-32] [path.to.extension]
                  PathExpression [15-32] [path.to.extension]
                    Identifier(path) [15-19] [path]
                    Identifier(`to`) [20-22] [to]
                    Identifier(extension) [23-32] [extension]
                BracedConstructorFieldValue [32-35] [: 1]
                  IntLiteral(1) [34-35] [1]
--
SELECT
  NEW x {
    path.`to`.extension : 1
  }
==

# Extension with fields.
SELECT NEW x {
  foo: "bar",
  (path.to.extension) {
    value: 1
  }
  baz: 1
}
--
QueryStatement [0-80] [SELECT NEW...baz: 1 }]
  Query [0-80] [SELECT NEW...baz: 1 }]
    Select [0-80] [SELECT NEW...baz: 1 }]
      SelectList [7-80] [NEW x {...baz: 1 }]
        SelectColumn [7-80] [NEW x {...baz: 1 }]
          BracedNewConstructor [7-80] [NEW x {...baz: 1 }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-80] [{   foo: "...baz: 1 }]
              BracedConstructorField [17-27] [foo: "bar"]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-27] [: "bar"]
                  StringLiteral [22-27] ["bar"]
                    StringLiteralComponent("bar") [22-27] ["bar"]
              BracedConstructorField [31-69] [(path.to.extensio...lue: 1   }]
                BracedConstructorLhs [31-50] [(path.to.extension)]
                  PathExpression [32-49] [path.to.extension]
                    Identifier(path) [32-36] [path]
                    Identifier(`to`) [37-39] [to]
                    Identifier(extension) [40-49] [extension]
                BracedConstructorFieldValue [51-69] [{     value: 1   }]
                  BracedConstructor [51-69] [{     value: 1   }]
                    BracedConstructorField [57-65] [value: 1]
                      BracedConstructorLhs [57-62] [value]
                        PathExpression [57-62] [value]
                          Identifier(value) [57-62] [value]
                      BracedConstructorFieldValue [62-65] [: 1]
                        IntLiteral(1) [64-65] [1]
              BracedConstructorField [72-78] [baz: 1]
                BracedConstructorLhs [72-75] [baz]
                  PathExpression [72-75] [baz]
                    Identifier(baz) [72-75] [baz]
                BracedConstructorFieldValue [75-78] [: 1]
                  IntLiteral(1) [77-78] [1]
--
SELECT
  NEW x {
    foo : "bar",
    (path.`to`.extension)  {
      value : 1
    }
    baz : 1
  }
==

# If an extension (not the first field) does not have a preceding comma it
# is an error.
# TODO: Try to make this error message more intuitive.
SELECT NEW x {
  foo: "bar"
  (path.to.extension) {
    value: 1
  }
  baz: 1
}
--
ERROR: Syntax error: Function call cannot be applied to this expression. Function calls require a path, e.g. a.b.c() [at 3:3]
  (path.to.extension) {
  ^
==

# An expression that looks like a function call in the RHS, specifically the
# part "column(path.to.expression)" because a comma is missing after "column"
# which is required by the proto NEW braced constructor just before setting
# extension fields. This parses correct but we appropriately treat this as an
# error in the analyzer.
SELECT NEW x {
  foo: column
  (path.to.extension) {
    value: 1
  }
  baz: 1
}
--
QueryStatement [0-80] [SELECT NEW...baz: 1 }]
  Query [0-80] [SELECT NEW...baz: 1 }]
    Select [0-80] [SELECT NEW...baz: 1 }]
      SelectList [7-80] [NEW x {...baz: 1 }]
        SelectColumn [7-80] [NEW x {...baz: 1 }]
          BracedNewConstructor [7-80] [NEW x {...baz: 1 }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-80] [{   foo: column...baz: 1 }]
              BracedConstructorField [17-69] [foo: column...value: 1   }]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-69] [: column...value: 1   }]
                  UpdateConstructor [22-69] [column   (...value: 1   }]
                    FunctionCall [22-50] [column   (path.to.extension)]
                      PathExpression [22-28] [column]
                        Identifier(column) [22-28] [column]
                      PathExpression [32-49] [path.to.extension]
                        Identifier(path) [32-36] [path]
                        Identifier(`to`) [37-39] [to]
                        Identifier(extension) [40-49] [extension]
                    BracedConstructor [51-69] [{     value: 1   }]
                      BracedConstructorField [57-65] [value: 1]
                        BracedConstructorLhs [57-62] [value]
                          PathExpression [57-62] [value]
                            Identifier(value) [57-62] [value]
                        BracedConstructorFieldValue [62-65] [: 1]
                          IntLiteral(1) [64-65] [1]
              BracedConstructorField [72-78] [baz: 1]
                BracedConstructorLhs [72-75] [baz]
                  PathExpression [72-75] [baz]
                    Identifier(baz) [72-75] [baz]
                BracedConstructorFieldValue [75-78] [: 1]
                  IntLiteral(1) [77-78] [1]
--
SELECT
  NEW x {
    foo : column(path.`to`.extension) {
      value : 1
    }
    baz : 1
  }
==

# If a trailing comma is not specified, as the proto NEW braced constructor
# requires for expressions before an extension, will parse to an UPDATE
# constructor. Appropriate error handling will be done in the analyzer.
WITH cte AS (
  SELECT 3 AS UPDATE
)
SELECT NEW foo.TestExtraPB {
     int32_val1: UPDATE
     (foo.TestExtraPBExtensionHolder.test_extra_proto_extension) {
         ext_value: [1]
     }
}
--
QueryStatement [0-189] [WITH cte AS...]      } }]
  Query [0-189] [WITH cte AS...]      } }]
    WithClause [0-36] [WITH cte AS...AS UPDATE )]
      AliasedQuery [5-36] [cte AS (...AS UPDATE )]
        Identifier(cte) [5-8] [cte]
        Query [12-36] [(   SELECT 3 AS UPDATE )]
          Select [16-34] [SELECT 3 AS UPDATE]
            SelectList [23-34] [3 AS UPDATE]
              SelectColumn [23-34] [3 AS UPDATE]
                IntLiteral(3) [23-24] [3]
                Alias [25-34] [AS UPDATE]
                  Identifier(`UPDATE`) [28-34] [UPDATE]
    Select [37-189] [SELECT NEW...]      } }]
      SelectList [44-189] [NEW foo.TestExtra...]      } }]
        SelectColumn [44-189] [NEW foo.TestExtra...]      } }]
          BracedNewConstructor [44-189] [NEW foo.TestExtra...]      } }]
            SimpleType [48-63] [foo.TestExtraPB]
              PathExpression [48-63] [foo.TestExtraPB]
                Identifier(foo) [48-51] [foo]
                Identifier(TestExtraPB) [52-63] [TestExtraPB]
            BracedConstructor [64-189] [{      int32_val1...]      } }]
              BracedConstructorField [71-187] [int32_val1...[1]      }]
                BracedConstructorLhs [71-81] [int32_val1]
                  PathExpression [71-81] [int32_val1]
                    Identifier(int32_val1) [71-81] [int32_val1]
                BracedConstructorFieldValue [81-187] [: UPDATE...[1]      }]
                  UpdateConstructor [83-187] [UPDATE...[1]      }]
                    FunctionCall [83-154] [UPDATE...xtra_proto_extension)]
                      PathExpression [83-89] [UPDATE]
                        Identifier(`UPDATE`) [83-89] [UPDATE]
                      PathExpression [96-153] [foo.TestExtraPBEx..._extension]
                        Identifier(foo) [96-99] [foo]
                        Identifier(TestExtraPBExtensionHolder) [100-126] [TestExtraPBExtensionHolder]
                        Identifier(test_extra_proto_extension) [127-153] [test_extra_proto_extension]
                    BracedConstructor [155-187] [{...[1]      }]
                      BracedConstructorField [166-180] [ext_value: [1]]
                        BracedConstructorLhs [166-175] [ext_value]
                          PathExpression [166-175] [ext_value]
                            Identifier(ext_value) [166-175] [ext_value]
                        BracedConstructorFieldValue [175-180] [: [1]]
                          ArrayConstructor [177-180] [[1]]
                            IntLiteral(1) [178-179] [1]
--
WITH
  cte AS (
    SELECT
      3 AS `UPDATE`
  )
SELECT
  NEW foo.TestExtraPB {
    int32_val1 : `UPDATE`(foo.TestExtraPBExtensionHolder.test_extra_proto_extension) {
      ext_value : ARRAY[1]
    }
  }
==

# This is a weird case where a user is trying to build a proto but forgot the
# value for the extension. This parses out to be valid.
SELECT NEW x {
  foo: column
  (path.to.extension)
}
--
QueryStatement [0-52] [SELECT NEW...extension) }]
  Query [0-52] [SELECT NEW...extension) }]
    Select [0-52] [SELECT NEW...extension) }]
      SelectList [7-52] [NEW x {...extension) }]
        SelectColumn [7-52] [NEW x {...extension) }]
          BracedNewConstructor [7-52] [NEW x {...extension) }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-52] [{   foo: column...extension) }]
              BracedConstructorField [17-50] [foo: column...extension)]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-50] [: column   (path.to.extension)]
                  FunctionCall [22-50] [column   (path.to.extension)]
                    PathExpression [22-28] [column]
                      Identifier(column) [22-28] [column]
                    PathExpression [32-49] [path.to.extension]
                      Identifier(path) [32-36] [path]
                      Identifier(`to`) [37-39] [to]
                      Identifier(extension) [40-49] [extension]
--
SELECT
  NEW x {
    foo : column(path.`to`.extension)
  }
==

# Mixed constructor where the inner sub-message's constructor is typed.
SELECT NEW x {
  foo: NEW y {
    monkey: "blah"
  }
  bar: 3
}
--
QueryStatement [0-63] [SELECT NEW...bar: 3 }]
  Query [0-63] [SELECT NEW...bar: 3 }]
    Select [0-63] [SELECT NEW...bar: 3 }]
      SelectList [7-63] [NEW x {...bar: 3 }]
        SelectColumn [7-63] [NEW x {...bar: 3 }]
          BracedNewConstructor [7-63] [NEW x {...bar: 3 }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-63] [{   foo: NEW...bar: 3 }]
              BracedConstructorField [17-52] [foo: NEW y..."blah"   }]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-52] [: NEW y {..."blah"   }]
                  BracedNewConstructor [22-52] [NEW y {     monkey: "blah"   }]
                    SimpleType [26-27] [y]
                      PathExpression [26-27] [y]
                        Identifier(y) [26-27] [y]
                    BracedConstructor [28-52] [{     monkey: "blah"   }]
                      BracedConstructorField [34-48] [monkey: "blah"]
                        BracedConstructorLhs [34-40] [monkey]
                          PathExpression [34-40] [monkey]
                            Identifier(monkey) [34-40] [monkey]
                        BracedConstructorFieldValue [40-48] [: "blah"]
                          StringLiteral [42-48] ["blah"]
                            StringLiteralComponent("blah") [42-48] ["blah"]
              BracedConstructorField [55-61] [bar: 3]
                BracedConstructorLhs [55-58] [bar]
                  PathExpression [55-58] [bar]
                    Identifier(bar) [55-58] [bar]
                BracedConstructorFieldValue [58-61] [: 3]
                  IntLiteral(3) [60-61] [3]
--
SELECT
  NEW x {
    foo : NEW y {
      monkey : "blah"
    }
    bar : 3
  }
==

# Simple expressions
SELECT NEW x {
  foo: (3 + 5),
  (bar.baz) {
    monkey: "blah"
  }
}
--
QueryStatement [0-69] [SELECT NEW...blah"   } }]
  Query [0-69] [SELECT NEW...blah"   } }]
    Select [0-69] [SELECT NEW...blah"   } }]
      SelectList [7-69] [NEW x {...blah"   } }]
        SelectColumn [7-69] [NEW x {...blah"   } }]
          BracedNewConstructor [7-69] [NEW x {...blah"   } }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-69] [{   foo: (...blah"   } }]
              BracedConstructorField [17-29] [foo: (3 + 5)]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-29] [: (3 + 5)]
                  BinaryExpression(+) [23-28] [3 + 5]
                    IntLiteral(3) [23-24] [3]
                    IntLiteral(5) [27-28] [5]
              BracedConstructorField [33-67] [(bar.baz)..."blah"   }]
                BracedConstructorLhs [33-42] [(bar.baz)]
                  PathExpression [34-41] [bar.baz]
                    Identifier(bar) [34-37] [bar]
                    Identifier(baz) [38-41] [baz]
                BracedConstructorFieldValue [43-67] [{     monkey: "blah"   }]
                  BracedConstructor [43-67] [{     monkey: "blah"   }]
                    BracedConstructorField [49-63] [monkey: "blah"]
                      BracedConstructorLhs [49-55] [monkey]
                        PathExpression [49-55] [monkey]
                          Identifier(monkey) [49-55] [monkey]
                      BracedConstructorFieldValue [55-63] [: "blah"]
                        StringLiteral [57-63] ["blah"]
                          StringLiteralComponent("blah") [57-63] ["blah"]
--
SELECT
  NEW x {
    foo : (3 + 5),
    (bar.baz)  {
      monkey : "blah"
    }
  }
==

SELECT NEW x {
  foo: (SELECT t.* FROM t WHERE t.a = 1),
  (bar.baz) {
    monkey: "blah"
  }
}
--
QueryStatement [0-95] [SELECT NEW...blah"   } }]
  Query [0-95] [SELECT NEW...blah"   } }]
    Select [0-95] [SELECT NEW...blah"   } }]
      SelectList [7-95] [NEW x {...blah"   } }]
        SelectColumn [7-95] [NEW x {...blah"   } }]
          BracedNewConstructor [7-95] [NEW x {...blah"   } }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-95] [{   foo: (...blah"   } }]
              BracedConstructorField [17-55] [foo: (SELECT...WHERE t.a = 1)]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-55] [: (SELECT...WHERE t.a = 1)]
                  ExpressionSubquery [22-55] [(SELECT t....WHERE t.a = 1)]
                    Query [23-54] [SELECT t.*...WHERE t.a = 1]
                      Select [23-54] [SELECT t.*...WHERE t.a = 1]
                        SelectList [30-33] [t.*]
                          SelectColumn [30-33] [t.*]
                            DotStar [30-33] [t.*]
                              PathExpression [30-31] [t]
                                Identifier(t) [30-31] [t]
                        FromClause [34-40] [FROM t]
                          TablePathExpression [39-40] [t]
                            PathExpression [39-40] [t]
                              Identifier(t) [39-40] [t]
                        WhereClause [41-54] [WHERE t.a = 1]
                          BinaryExpression(=) [47-54] [t.a = 1]
                            PathExpression [47-50] [t.a]
                              Identifier(t) [47-48] [t]
                              Identifier(a) [49-50] [a]
                            IntLiteral(1) [53-54] [1]
              BracedConstructorField [59-93] [(bar.baz)..."blah"   }]
                BracedConstructorLhs [59-68] [(bar.baz)]
                  PathExpression [60-67] [bar.baz]
                    Identifier(bar) [60-63] [bar]
                    Identifier(baz) [64-67] [baz]
                BracedConstructorFieldValue [69-93] [{     monkey: "blah"   }]
                  BracedConstructor [69-93] [{     monkey: "blah"   }]
                    BracedConstructorField [75-89] [monkey: "blah"]
                      BracedConstructorLhs [75-81] [monkey]
                        PathExpression [75-81] [monkey]
                          Identifier(monkey) [75-81] [monkey]
                      BracedConstructorFieldValue [81-89] [: "blah"]
                        StringLiteral [83-89] ["blah"]
                          StringLiteralComponent("blah") [83-89] ["blah"]
--
SELECT
  NEW x {
    foo : (
      SELECT
        t.*
      FROM
        t
      WHERE
        t.a = 1
    ),
    (bar.baz)  {
      monkey : "blah"
    }
  }
==

SELECT NEW x {
  foo: 3 + 5,
  (bar.baz) {
    monkey: "blah"
  }
}
--
QueryStatement [0-67] [SELECT NEW...blah"   } }]
  Query [0-67] [SELECT NEW...blah"   } }]
    Select [0-67] [SELECT NEW...blah"   } }]
      SelectList [7-67] [NEW x {...blah"   } }]
        SelectColumn [7-67] [NEW x {...blah"   } }]
          BracedNewConstructor [7-67] [NEW x {...blah"   } }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-67] [{   foo: 3...blah"   } }]
              BracedConstructorField [17-27] [foo: 3 + 5]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-27] [: 3 + 5]
                  BinaryExpression(+) [22-27] [3 + 5]
                    IntLiteral(3) [22-23] [3]
                    IntLiteral(5) [26-27] [5]
              BracedConstructorField [31-65] [(bar.baz)..."blah"   }]
                BracedConstructorLhs [31-40] [(bar.baz)]
                  PathExpression [32-39] [bar.baz]
                    Identifier(bar) [32-35] [bar]
                    Identifier(baz) [36-39] [baz]
                BracedConstructorFieldValue [41-65] [{     monkey: "blah"   }]
                  BracedConstructor [41-65] [{     monkey: "blah"   }]
                    BracedConstructorField [47-61] [monkey: "blah"]
                      BracedConstructorLhs [47-53] [monkey]
                        PathExpression [47-53] [monkey]
                          Identifier(monkey) [47-53] [monkey]
                      BracedConstructorFieldValue [53-61] [: "blah"]
                        StringLiteral [55-61] ["blah"]
                          StringLiteralComponent("blah") [55-61] ["blah"]
--
SELECT
  NEW x {
    foo : 3 + 5,
    (bar.baz)  {
      monkey : "blah"
    }
  }
==

# Function expression.
SELECT NEW x {
  foo: CONCAT("foo", "bar"),
  (bar.baz) {
    monkey: "blah"
  }
}
--
QueryStatement [0-82] [SELECT NEW...blah"   } }]
  Query [0-82] [SELECT NEW...blah"   } }]
    Select [0-82] [SELECT NEW...blah"   } }]
      SelectList [7-82] [NEW x {...blah"   } }]
        SelectColumn [7-82] [NEW x {...blah"   } }]
          BracedNewConstructor [7-82] [NEW x {...blah"   } }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-82] [{   foo: CONCAT...blah"   } }]
              BracedConstructorField [17-42] [foo: CONCAT("foo", "bar")]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-42] [: CONCAT("foo", "bar")]
                  FunctionCall [22-42] [CONCAT("foo", "bar")]
                    PathExpression [22-28] [CONCAT]
                      Identifier(CONCAT) [22-28] [CONCAT]
                    StringLiteral [29-34] ["foo"]
                      StringLiteralComponent("foo") [29-34] ["foo"]
                    StringLiteral [36-41] ["bar"]
                      StringLiteralComponent("bar") [36-41] ["bar"]
              BracedConstructorField [46-80] [(bar.baz)..."blah"   }]
                BracedConstructorLhs [46-55] [(bar.baz)]
                  PathExpression [47-54] [bar.baz]
                    Identifier(bar) [47-50] [bar]
                    Identifier(baz) [51-54] [baz]
                BracedConstructorFieldValue [56-80] [{     monkey: "blah"   }]
                  BracedConstructor [56-80] [{     monkey: "blah"   }]
                    BracedConstructorField [62-76] [monkey: "blah"]
                      BracedConstructorLhs [62-68] [monkey]
                        PathExpression [62-68] [monkey]
                          Identifier(monkey) [62-68] [monkey]
                      BracedConstructorFieldValue [68-76] [: "blah"]
                        StringLiteral [70-76] ["blah"]
                          StringLiteralComponent("blah") [70-76] ["blah"]
--
SELECT
  NEW x {
    foo : CONCAT("foo", "bar"),
    (bar.baz)  {
      monkey : "blah"
    }
  }
==

# Aggregation expression.
SELECT NEW x {
  foo: (SELECT count(*) FROM table_foo)
}
--
QueryStatement [0-56] [SELECT NEW...table_foo) }]
  Query [0-56] [SELECT NEW...table_foo) }]
    Select [0-56] [SELECT NEW...table_foo) }]
      SelectList [7-56] [NEW x {...table_foo) }]
        SelectColumn [7-56] [NEW x {...table_foo) }]
          BracedNewConstructor [7-56] [NEW x {...table_foo) }]
            SimpleType [11-12] [x]
              PathExpression [11-12] [x]
                Identifier(x) [11-12] [x]
            BracedConstructor [13-56] [{   foo: (...table_foo) }]
              BracedConstructorField [17-54] [foo: (SELECT...table_foo)]
                BracedConstructorLhs [17-20] [foo]
                  PathExpression [17-20] [foo]
                    Identifier(foo) [17-20] [foo]
                BracedConstructorFieldValue [20-54] [: (SELECT...table_foo)]
                  ExpressionSubquery [22-54] [(SELECT count...table_foo)]
                    Query [23-53] [SELECT count(*) FROM table_foo]
                      Select [23-53] [SELECT count(*) FROM table_foo]
                        SelectList [30-38] [count(*)]
                          SelectColumn [30-38] [count(*)]
                            FunctionCall [30-38] [count(*)]
                              PathExpression [30-35] [count]
                                Identifier(count) [30-35] [count]
                              Star(*) [36-37] [*]
                        FromClause [39-53] [FROM table_foo]
                          TablePathExpression [44-53] [table_foo]
                            PathExpression [44-53] [table_foo]
                              Identifier(table_foo) [44-53] [table_foo]
--
SELECT
  NEW x {
    foo : (
      SELECT
        count(*)
      FROM
        table_foo
    )
  }
==

# Untyped constructor.
UPDATE t SET x = { foo: "blah" bar: 3 }
--
UpdateStatement [0-39] [UPDATE t SET..." bar: 3 }]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-39] [x = { foo: "blah" bar: 3 }]
    UpdateItem [13-39] [x = { foo: "blah" bar: 3 }]
      UpdateSetValue [13-39] [x = { foo: "blah" bar: 3 }]
        PathExpression [13-14] [x]
          Identifier(x) [13-14] [x]
        BracedConstructor [17-39] [{ foo: "blah" bar: 3 }]
          BracedConstructorField [19-30] [foo: "blah"]
            BracedConstructorLhs [19-22] [foo]
              PathExpression [19-22] [foo]
                Identifier(foo) [19-22] [foo]
            BracedConstructorFieldValue [22-30] [: "blah"]
              StringLiteral [24-30] ["blah"]
                StringLiteralComponent("blah") [24-30] ["blah"]
          BracedConstructorField [31-37] [bar: 3]
            BracedConstructorLhs [31-34] [bar]
              PathExpression [31-34] [bar]
                Identifier(bar) [31-34] [bar]
            BracedConstructorFieldValue [34-37] [: 3]
              IntLiteral(3) [36-37] [3]
--
UPDATE t
SET
  x = {
    foo : "blah"
    bar : 3
  }
==

# Array constructor.
UPDATE t SET arr = ARRAY<ProtoType>[{ value: "bar" }, { value: "baz" }]
--
UpdateStatement [0-71] [UPDATE t SET...: "baz" }]]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-71] [arr = ARRAY...: "baz" }]]
    UpdateItem [13-71] [arr = ARRAY...: "baz" }]]
      UpdateSetValue [13-71] [arr = ARRAY...: "baz" }]]
        PathExpression [13-16] [arr]
          Identifier(arr) [13-16] [arr]
        ArrayConstructor [19-71] [ARRAY<ProtoType...: "baz" }]]
          ArrayType [19-35] [ARRAY<ProtoType>]
            SimpleType [25-34] [ProtoType]
              PathExpression [25-34] [ProtoType]
                Identifier(ProtoType) [25-34] [ProtoType]
          BracedConstructor [36-52] [{ value: "bar" }]
            BracedConstructorField [38-50] [value: "bar"]
              BracedConstructorLhs [38-43] [value]
                PathExpression [38-43] [value]
                  Identifier(value) [38-43] [value]
              BracedConstructorFieldValue [43-50] [: "bar"]
                StringLiteral [45-50] ["bar"]
                  StringLiteralComponent("bar") [45-50] ["bar"]
          BracedConstructor [54-70] [{ value: "baz" }]
            BracedConstructorField [56-68] [value: "baz"]
              BracedConstructorLhs [56-61] [value]
                PathExpression [56-61] [value]
                  Identifier(value) [56-61] [value]
              BracedConstructorFieldValue [61-68] [: "baz"]
                StringLiteral [63-68] ["baz"]
                  StringLiteralComponent("baz") [63-68] ["baz"]
--
UPDATE t
SET
  arr = ARRAY< ProtoType >[{
    value : "bar"
  }, {
    value : "baz"
  }]
==

# Untyped array constructor.
UPDATE t SET arr = [{ value: "bar" }, { value: "baz" }]
--
UpdateStatement [0-55] [UPDATE t SET...: "baz" }]]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-55] [arr = [{ value...: "baz" }]]
    UpdateItem [13-55] [arr = [{ value...: "baz" }]]
      UpdateSetValue [13-55] [arr = [{ value...: "baz" }]]
        PathExpression [13-16] [arr]
          Identifier(arr) [13-16] [arr]
        ArrayConstructor [19-55] [[{ value:...: "baz" }]]
          BracedConstructor [20-36] [{ value: "bar" }]
            BracedConstructorField [22-34] [value: "bar"]
              BracedConstructorLhs [22-27] [value]
                PathExpression [22-27] [value]
                  Identifier(value) [22-27] [value]
              BracedConstructorFieldValue [27-34] [: "bar"]
                StringLiteral [29-34] ["bar"]
                  StringLiteralComponent("bar") [29-34] ["bar"]
          BracedConstructor [38-54] [{ value: "baz" }]
            BracedConstructorField [40-52] [value: "baz"]
              BracedConstructorLhs [40-45] [value]
                PathExpression [40-45] [value]
                  Identifier(value) [40-45] [value]
              BracedConstructorFieldValue [45-52] [: "baz"]
                StringLiteral [47-52] ["baz"]
                  StringLiteralComponent("baz") [47-52] ["baz"]
--
UPDATE t
SET
  arr = ARRAY[{
    value : "bar"
  }, {
    value : "baz"
  }]
==

# Struct constructor.
UPDATE t SET str = STRUCT<ProtoType, INT64>({ value: "bar" }, 1)
--
UpdateStatement [0-64] [UPDATE t SET...bar" }, 1)]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-64] [str = STRUCT...bar" }, 1)]
    UpdateItem [13-64] [str = STRUCT...bar" }, 1)]
      UpdateSetValue [13-64] [str = STRUCT...bar" }, 1)]
        PathExpression [13-16] [str]
          Identifier(str) [13-16] [str]
        StructConstructorWithKeyword [19-64] [STRUCT<ProtoType...bar" }, 1)]
          StructType [19-43] [STRUCT<ProtoType, INT64>]
            StructField [26-35] [ProtoType]
              SimpleType [26-35] [ProtoType]
                PathExpression [26-35] [ProtoType]
                  Identifier(ProtoType) [26-35] [ProtoType]
            StructField [37-42] [INT64]
              SimpleType [37-42] [INT64]
                PathExpression [37-42] [INT64]
                  Identifier(INT64) [37-42] [INT64]
          StructConstructorArg [44-60] [{ value: "bar" }]
            BracedConstructor [44-60] [{ value: "bar" }]
              BracedConstructorField [46-58] [value: "bar"]
                BracedConstructorLhs [46-51] [value]
                  PathExpression [46-51] [value]
                    Identifier(value) [46-51] [value]
                BracedConstructorFieldValue [51-58] [: "bar"]
                  StringLiteral [53-58] ["bar"]
                    StringLiteralComponent("bar") [53-58] ["bar"]
          StructConstructorArg [62-63] [1]
            IntLiteral(1) [62-63] [1]
--
UPDATE t
SET
  str = STRUCT< ProtoType, INT64 > ({
      value : "bar"
    }, 1)
==

# Untyped struct constructor.
UPDATE t SET str = ({ value: "bar" }, 1)
--
UpdateStatement [0-40] [UPDATE t SET...bar" }, 1)]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-40] [str = ({ value: "bar" }, 1)]
    UpdateItem [13-40] [str = ({ value: "bar" }, 1)]
      UpdateSetValue [13-40] [str = ({ value: "bar" }, 1)]
        PathExpression [13-16] [str]
          Identifier(str) [13-16] [str]
        StructConstructorWithParens [19-40] [({ value: "bar" }, 1)]
          BracedConstructor [20-36] [{ value: "bar" }]
            BracedConstructorField [22-34] [value: "bar"]
              BracedConstructorLhs [22-27] [value]
                PathExpression [22-27] [value]
                  Identifier(value) [22-27] [value]
              BracedConstructorFieldValue [27-34] [: "bar"]
                StringLiteral [29-34] ["bar"]
                  StringLiteralComponent("bar") [29-34] ["bar"]
          IntLiteral(1) [38-39] [1]
--
UPDATE t
SET
  str = ({
      value : "bar"
    }, 1)
==

# Nested struct constructor (inner is has keyword since it is a single
# expression.
UPDATE t SET str = STRUCT<ProtoType, STRUCT<ProtoType>>({ value: "bar" }, STRUCT({value: "foo"}))
--
UpdateStatement [0-97] [UPDATE t SET...: "foo"}))]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-97] [str = STRUCT...: "foo"}))]
    UpdateItem [13-97] [str = STRUCT...: "foo"}))]
      UpdateSetValue [13-97] [str = STRUCT...: "foo"}))]
        PathExpression [13-16] [str]
          Identifier(str) [13-16] [str]
        StructConstructorWithKeyword [19-97] [STRUCT<ProtoType...: "foo"}))]
          StructType [19-55] [STRUCT<ProtoType...ProtoType>>]
            StructField [26-35] [ProtoType]
              SimpleType [26-35] [ProtoType]
                PathExpression [26-35] [ProtoType]
                  Identifier(ProtoType) [26-35] [ProtoType]
            StructField [37-54] [STRUCT<ProtoType>]
              StructType [37-54] [STRUCT<ProtoType>]
                StructField [44-53] [ProtoType]
                  SimpleType [44-53] [ProtoType]
                    PathExpression [44-53] [ProtoType]
                      Identifier(ProtoType) [44-53] [ProtoType]
          StructConstructorArg [56-72] [{ value: "bar" }]
            BracedConstructor [56-72] [{ value: "bar" }]
              BracedConstructorField [58-70] [value: "bar"]
                BracedConstructorLhs [58-63] [value]
                  PathExpression [58-63] [value]
                    Identifier(value) [58-63] [value]
                BracedConstructorFieldValue [63-70] [: "bar"]
                  StringLiteral [65-70] ["bar"]
                    StringLiteralComponent("bar") [65-70] ["bar"]
          StructConstructorArg [74-96] [STRUCT({value: "foo"})]
            StructConstructorWithKeyword [74-96] [STRUCT({value: "foo"})]
              StructConstructorArg [81-95] [{value: "foo"}]
                BracedConstructor [81-95] [{value: "foo"}]
                  BracedConstructorField [82-94] [value: "foo"]
                    BracedConstructorLhs [82-87] [value]
                      PathExpression [82-87] [value]
                        Identifier(value) [82-87] [value]
                    BracedConstructorFieldValue [87-94] [: "foo"]
                      StringLiteral [89-94] ["foo"]
                        StringLiteralComponent("foo") [89-94] ["foo"]
--
UPDATE t
SET
  str = STRUCT< ProtoType, STRUCT< ProtoType > > ({
      value : "bar"
    }, STRUCT({
        value : "foo"
      }))

==

# Nested struct constructor (inner constructor is tuple syntax).
UPDATE t SET str = STRUCT<ProtoType, STRUCT<ProtoType, INT64>>({ value: "bar" }, ({value: "foo"}, 1))
--
UpdateStatement [0-101] [UPDATE t SET...foo"}, 1))]
  PathExpression [7-8] [t]
    Identifier(t) [7-8] [t]
  UpdateItemList [13-101] [str = STRUCT...foo"}, 1))]
    UpdateItem [13-101] [str = STRUCT...foo"}, 1))]
      UpdateSetValue [13-101] [str = STRUCT...foo"}, 1))]
        PathExpression [13-16] [str]
          Identifier(str) [13-16] [str]
        StructConstructorWithKeyword [19-101] [STRUCT<ProtoType...foo"}, 1))]
          StructType [19-62] [STRUCT<ProtoType...pe, INT64>>]
            StructField [26-35] [ProtoType]
              SimpleType [26-35] [ProtoType]
                PathExpression [26-35] [ProtoType]
                  Identifier(ProtoType) [26-35] [ProtoType]
            StructField [37-61] [STRUCT<ProtoType, INT64>]
              StructType [37-61] [STRUCT<ProtoType, INT64>]
                StructField [44-53] [ProtoType]
                  SimpleType [44-53] [ProtoType]
                    PathExpression [44-53] [ProtoType]
                      Identifier(ProtoType) [44-53] [ProtoType]
                StructField [55-60] [INT64]
                  SimpleType [55-60] [INT64]
                    PathExpression [55-60] [INT64]
                      Identifier(INT64) [55-60] [INT64]
          StructConstructorArg [63-79] [{ value: "bar" }]
            BracedConstructor [63-79] [{ value: "bar" }]
              BracedConstructorField [65-77] [value: "bar"]
                BracedConstructorLhs [65-70] [value]
                  PathExpression [65-70] [value]
                    Identifier(value) [65-70] [value]
                BracedConstructorFieldValue [70-77] [: "bar"]
                  StringLiteral [72-77] ["bar"]
                    StringLiteralComponent("bar") [72-77] ["bar"]
          StructConstructorArg [81-100] [({value: "foo"}, 1)]
            StructConstructorWithParens [81-100] [({value: "foo"}, 1)]
              BracedConstructor [82-96] [{value: "foo"}]
                BracedConstructorField [83-95] [value: "foo"]
                  BracedConstructorLhs [83-88] [value]
                    PathExpression [83-88] [value]
                      Identifier(value) [83-88] [value]
                  BracedConstructorFieldValue [88-95] [: "foo"]
                    StringLiteral [90-95] ["foo"]
                      StringLiteralComponent("foo") [90-95] ["foo"]
              IntLiteral(1) [98-99] [1]
--
UPDATE t
SET
  str = STRUCT< ProtoType, STRUCT< ProtoType, INT64 > > ({
      value : "bar"
    }, ({
        value : "foo"
      }, 1))

==

# No trailing "}".
SELECT NEW ProtoType {foobar: 5
--
ERROR: Syntax error: Unexpected end of statement [at 1:32]
SELECT NEW ProtoType {foobar: 5
                               ^
==

# ARRAY keyword not allowed.
SELECT NEW ARRAY<int32>{}
--
ERROR: Syntax error: Unexpected keyword ARRAY [at 1:12]
SELECT NEW ARRAY<int32>{}
           ^
==

# STRUCT keyword not allowed.
SELECT NEW struct {1, 2}
--
ERROR: Syntax error: Unexpected keyword STRUCT [at 1:12]
SELECT NEW struct {1, 2}
           ^
==

# No field name.
SELECT NEW ProtoType {1}
--
ERROR: Syntax error: Unexpected integer literal "1" [at 1:23]
SELECT NEW ProtoType {1}
                      ^
==

# No field value.
SELECT NEW ProtoType {foobar}
--
ERROR: Syntax error: Expected ":" or "{" but got "}" [at 1:29]
SELECT NEW ProtoType {foobar}
                            ^
==

# b/262795394 - Value starting with label token keyword 'FOR' parses correctly.
SELECT NEW package.Message { field: FORK() }
--
QueryStatement [0-44] [SELECT NEW...: FORK() }]
  Query [0-44] [SELECT NEW...: FORK() }]
    Select [0-44] [SELECT NEW...: FORK() }]
      SelectList [7-44] [NEW package...: FORK() }]
        SelectColumn [7-44] [NEW package...: FORK() }]
          BracedNewConstructor [7-44] [NEW package...: FORK() }]
            SimpleType [11-26] [package.Message]
              PathExpression [11-26] [package.Message]
                Identifier(package) [11-18] [package]
                Identifier(Message) [19-26] [Message]
            BracedConstructor [27-44] [{ field: FORK() }]
              BracedConstructorField [29-42] [field: FORK()]
                BracedConstructorLhs [29-34] [field]
                  PathExpression [29-34] [field]
                    Identifier(field) [29-34] [field]
                BracedConstructorFieldValue [34-42] [: FORK()]
                  FunctionCall [36-42] [FORK()]
                    PathExpression [36-40] [FORK]
                      Identifier(FORK) [36-40] [FORK]
--
SELECT
  NEW package.Message {
    field : FORK()
  }
