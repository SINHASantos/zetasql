[default reserve_graph_table]
[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]

# PGQ Edge pattern with cost
select * from graph_table(
  my.graph.name
  MATCH -[a IS A WHERE a.prop <-3 COST e.amount]->
  COLUMNS((a.array[0]-3) AS val)
)
--
QueryStatement [29-157] [select * from...AS val) )]
  Query [29-157] [select * from...AS val) )]
    Select [29-157] [select * from...AS val) )]
      SelectList [36-37] [*]
        SelectColumn [36-37] [*]
          Star(*) [36-37] [*]
      FromClause [38-157] [from graph_table...AS val) )]
        GraphTableQuery [43-157] [graph_table...AS val) )]
          PathExpression [58-71] [my.graph.name]
            Identifier(my) [58-60] [my]
            Identifier(graph) [61-66] [graph]
            Identifier(name) [67-71] [name]
          GqlMatch [74-122] [MATCH -[a....amount]->]
            GraphPattern [80-122] [-[a IS A WHERE....amount]->]
              GraphPathPattern [80-122] [-[a IS A WHERE....amount]->]
                GraphEdgePattern [80-122] [-[a IS A WHERE....amount]->]
                  GraphElementPatternFiller [82-119] [a IS A WHERE...COST e.amount]
                    Identifier(a) [82-83] [a]
                    GraphLabelFilter [84-88] [IS A]
                      GraphElementLabel [87-88] [A]
                        Identifier(A) [87-88] [A]
                    WhereClause [89-105] [WHERE a.prop <-3]
                      BinaryExpression(<) [95-105] [a.prop <-3]
                        PathExpression [95-101] [a.prop]
                          Identifier(a) [95-96] [a]
                          Identifier(prop) [97-101] [prop]
                        UnaryExpression(-) [103-105] [-3]
                          IntLiteral(3) [104-105] [3]
                    PathExpression [111-119] [e.amount]
                      Identifier(e) [111-112] [e]
                      Identifier(amount) [113-119] [amount]
          SelectList [133-154] [(a.array[0]-3) AS val]
            SelectColumn [133-154] [(a.array[0]-3) AS val]
              BinaryExpression(-) [134-146] [a.array[0]-3]
                ArrayElement [134-144] [a.array[0]]
                  PathExpression [134-141] [a.array]
                    Identifier(a) [134-135] [a]
                    Identifier(`array`) [136-141] [array]
                  Location [141-142] [[]
                  IntLiteral(0) [142-143] [0]
                IntLiteral(3) [145-146] [3]
              Alias [148-154] [AS val]
                Identifier(val) [151-154] [val]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      -[a
      IS A
      WHERE
        a.prop < -3 COST e.amount]->
    COLUMNS(
      (a.`array`[0] - 3) AS val
    )
  )
==

# PGQ Edge pattern with CHEAPEST
select * from graph_table(
  my.graph.name
  MATCH {{ANY CHEAPEST|CHEAPEST 2|CHEAPEST @param|ALL CHEAPEST}} -[a]->
  COLUMNS((a.array[0]-3) AS val)
)
--
ALTERNATION GROUP: ANY CHEAPEST
--
QueryStatement [0-105] [select * from...AS val) )]
  Query [0-105] [select * from...AS val) )]
    Select [0-105] [select * from...AS val) )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-105] [from graph_table...AS val) )]
        GraphTableQuery [14-105] [graph_table...AS val) )]
          PathExpression [29-42] [my.graph.name]
            Identifier(my) [29-31] [my]
            Identifier(graph) [32-37] [graph]
            Identifier(name) [38-42] [name]
          GqlMatch [45-70] [MATCH ANY CHEAPEST -[a]->]
            GraphPattern [51-70] [ANY CHEAPEST -[a]->]
              GraphPathPattern [51-70] [ANY CHEAPEST -[a]->]
                GraphPathSearchPrefix [51-63] [ANY CHEAPEST]
                GraphEdgePattern [64-70] [-[a]->]
                  GraphElementPatternFiller [66-67] [a]
                    Identifier(a) [66-67] [a]
          SelectList [81-102] [(a.array[0]-3) AS val]
            SelectColumn [81-102] [(a.array[0]-3) AS val]
              BinaryExpression(-) [82-94] [a.array[0]-3]
                ArrayElement [82-92] [a.array[0]]
                  PathExpression [82-89] [a.array]
                    Identifier(a) [82-83] [a]
                    Identifier(`array`) [84-89] [array]
                  Location [89-90] [[]
                  IntLiteral(0) [90-91] [0]
                IntLiteral(3) [93-94] [3]
              Alias [96-102] [AS val]
                Identifier(val) [99-102] [val]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      ANY CHEAPEST -[a]->
    COLUMNS(
      (a.`array`[0] - 3) AS val
    )
  )
--
ALTERNATION GROUP: CHEAPEST 2
--
QueryStatement [0-103] [select * from...AS val) )]
  Query [0-103] [select * from...AS val) )]
    Select [0-103] [select * from...AS val) )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-103] [from graph_table...AS val) )]
        GraphTableQuery [14-103] [graph_table...AS val) )]
          PathExpression [29-42] [my.graph.name]
            Identifier(my) [29-31] [my]
            Identifier(graph) [32-37] [graph]
            Identifier(name) [38-42] [name]
          GqlMatch [45-68] [MATCH CHEAPEST 2 -[a]->]
            GraphPattern [51-68] [CHEAPEST 2 -[a]->]
              GraphPathPattern [51-68] [CHEAPEST 2 -[a]->]
                GraphPathSearchPrefix [51-61] [CHEAPEST 2]
                  GraphPathSearchPrefixCount [51-61] [CHEAPEST 2]
                    IntLiteral(2) [60-61] [2]
                GraphEdgePattern [62-68] [-[a]->]
                  GraphElementPatternFiller [64-65] [a]
                    Identifier(a) [64-65] [a]
          SelectList [79-100] [(a.array[0]-3) AS val]
            SelectColumn [79-100] [(a.array[0]-3) AS val]
              BinaryExpression(-) [80-92] [a.array[0]-3]
                ArrayElement [80-90] [a.array[0]]
                  PathExpression [80-87] [a.array]
                    Identifier(a) [80-81] [a]
                    Identifier(`array`) [82-87] [array]
                  Location [87-88] [[]
                  IntLiteral(0) [88-89] [0]
                IntLiteral(3) [91-92] [3]
              Alias [94-100] [AS val]
                Identifier(val) [97-100] [val]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      CHEAPEST 2  -[a]->
    COLUMNS(
      (a.`array`[0] - 3) AS val
    )
  )
--
ALTERNATION GROUP: CHEAPEST @param
--
QueryStatement [0-108] [select * from...AS val) )]
  Query [0-108] [select * from...AS val) )]
    Select [0-108] [select * from...AS val) )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-108] [from graph_table...AS val) )]
        GraphTableQuery [14-108] [graph_table...AS val) )]
          PathExpression [29-42] [my.graph.name]
            Identifier(my) [29-31] [my]
            Identifier(graph) [32-37] [graph]
            Identifier(name) [38-42] [name]
          GqlMatch [45-73] [MATCH CHEAPEST @param -[a]->]
            GraphPattern [51-73] [CHEAPEST @param -[a]->]
              GraphPathPattern [51-73] [CHEAPEST @param -[a]->]
                GraphPathSearchPrefix [51-66] [CHEAPEST @param]
                  GraphPathSearchPrefixCount [51-66] [CHEAPEST @param]
                    ParameterExpr [60-66] [@param]
                      Identifier(param) [61-66] [param]
                GraphEdgePattern [67-73] [-[a]->]
                  GraphElementPatternFiller [69-70] [a]
                    Identifier(a) [69-70] [a]
          SelectList [84-105] [(a.array[0]-3) AS val]
            SelectColumn [84-105] [(a.array[0]-3) AS val]
              BinaryExpression(-) [85-97] [a.array[0]-3]
                ArrayElement [85-95] [a.array[0]]
                  PathExpression [85-92] [a.array]
                    Identifier(a) [85-86] [a]
                    Identifier(`array`) [87-92] [array]
                  Location [92-93] [[]
                  IntLiteral(0) [93-94] [0]
                IntLiteral(3) [96-97] [3]
              Alias [99-105] [AS val]
                Identifier(val) [102-105] [val]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      CHEAPEST @param  -[a]->
    COLUMNS(
      (a.`array`[0] - 3) AS val
    )
  )
--
ALTERNATION GROUP: ALL CHEAPEST
--
QueryStatement [0-105] [select * from...AS val) )]
  Query [0-105] [select * from...AS val) )]
    Select [0-105] [select * from...AS val) )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-105] [from graph_table...AS val) )]
        GraphTableQuery [14-105] [graph_table...AS val) )]
          PathExpression [29-42] [my.graph.name]
            Identifier(my) [29-31] [my]
            Identifier(graph) [32-37] [graph]
            Identifier(name) [38-42] [name]
          GqlMatch [45-70] [MATCH ALL CHEAPEST -[a]->]
            GraphPattern [51-70] [ALL CHEAPEST -[a]->]
              GraphPathPattern [51-70] [ALL CHEAPEST -[a]->]
                GraphPathSearchPrefix [51-63] [ALL CHEAPEST]
                GraphEdgePattern [64-70] [-[a]->]
                  GraphElementPatternFiller [66-67] [a]
                    Identifier(a) [66-67] [a]
          SelectList [81-102] [(a.array[0]-3) AS val]
            SelectColumn [81-102] [(a.array[0]-3) AS val]
              BinaryExpression(-) [82-94] [a.array[0]-3]
                ArrayElement [82-92] [a.array[0]]
                  PathExpression [82-89] [a.array]
                    Identifier(a) [82-83] [a]
                    Identifier(`array`) [84-89] [array]
                  Location [89-90] [[]
                  IntLiteral(0) [90-91] [0]
                IntLiteral(3) [93-94] [3]
              Alias [96-102] [AS val]
                Identifier(val) [99-102] [val]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      ALL CHEAPEST -[a]->
    COLUMNS(
      (a.`array`[0] - 3) AS val
    )
  )
==

# GQL Edge pattern with cost
GRAPH my.graph.name
MATCH -[a IS A WHERE a.prop <-3 COST e.amount]->
RETURN 1 as col
--
QueryStatement [0-84] [GRAPH my.graph...TURN 1 as col]
  Query [0-84] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-84] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-84] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-84] [MATCH -[a...RETURN 1 as col]
          GqlOperatorList [20-84] [MATCH -[a...RETURN 1 as col]
            GqlMatch [20-68] [MATCH -[a....amount]->]
              GraphPattern [26-68] [-[a IS A WHERE....amount]->]
                GraphPathPattern [26-68] [-[a IS A WHERE....amount]->]
                  GraphEdgePattern [26-68] [-[a IS A WHERE....amount]->]
                    GraphElementPatternFiller [28-65] [a IS A WHERE...COST e.amount]
                      Identifier(a) [28-29] [a]
                      GraphLabelFilter [30-34] [IS A]
                        GraphElementLabel [33-34] [A]
                          Identifier(A) [33-34] [A]
                      WhereClause [35-51] [WHERE a.prop <-3]
                        BinaryExpression(<) [41-51] [a.prop <-3]
                          PathExpression [41-47] [a.prop]
                            Identifier(a) [41-42] [a]
                            Identifier(prop) [43-47] [prop]
                          UnaryExpression(-) [49-51] [-3]
                            IntLiteral(3) [50-51] [3]
                      PathExpression [57-65] [e.amount]
                        Identifier(e) [57-58] [e]
                        Identifier(amount) [59-65] [amount]
            GqlReturn [69-84] [RETURN 1 as col]
              Select [76-84] [1 as col]
                SelectList [76-84] [1 as col]
                  SelectColumn [76-84] [1 as col]
                    IntLiteral(1) [76-77] [1]
                    Alias [78-84] [as col]
                      Identifier(col) [81-84] [col]
--
GRAPH my.graph.name
MATCH
  -[a
  IS A
  WHERE
    a.prop < -3 COST e.amount]->
RETURN
  1 AS col
==

# GQL Edge pattern with CHEAPEST
GRAPH my.graph.name
MATCH {{ANY CHEAPEST|CHEAPEST 2|CHEAPEST @param|ALL CHEAPEST}} -[a]->
RETURN 1 as col
--
ALTERNATION GROUP: ANY CHEAPEST
--
QueryStatement [0-61] [GRAPH my.graph...TURN 1 as col]
  Query [0-61] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-61] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-61] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-61] [MATCH ANY...RETURN 1 as col]
          GqlOperatorList [20-61] [MATCH ANY...RETURN 1 as col]
            GqlMatch [20-45] [MATCH ANY CHEAPEST -[a]->]
              GraphPattern [26-45] [ANY CHEAPEST -[a]->]
                GraphPathPattern [26-45] [ANY CHEAPEST -[a]->]
                  GraphPathSearchPrefix [26-38] [ANY CHEAPEST]
                  GraphEdgePattern [39-45] [-[a]->]
                    GraphElementPatternFiller [41-42] [a]
                      Identifier(a) [41-42] [a]
            GqlReturn [46-61] [RETURN 1 as col]
              Select [53-61] [1 as col]
                SelectList [53-61] [1 as col]
                  SelectColumn [53-61] [1 as col]
                    IntLiteral(1) [53-54] [1]
                    Alias [55-61] [as col]
                      Identifier(col) [58-61] [col]
--
GRAPH my.graph.name
MATCH
  ANY CHEAPEST -[a]->
RETURN
  1 AS col
--
ALTERNATION GROUP: CHEAPEST 2
--
QueryStatement [0-59] [GRAPH my.graph...TURN 1 as col]
  Query [0-59] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-59] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-59] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-59] [MATCH CHEAPEST...TURN 1 as col]
          GqlOperatorList [20-59] [MATCH CHEAPEST...TURN 1 as col]
            GqlMatch [20-43] [MATCH CHEAPEST 2 -[a]->]
              GraphPattern [26-43] [CHEAPEST 2 -[a]->]
                GraphPathPattern [26-43] [CHEAPEST 2 -[a]->]
                  GraphPathSearchPrefix [26-36] [CHEAPEST 2]
                    GraphPathSearchPrefixCount [26-36] [CHEAPEST 2]
                      IntLiteral(2) [35-36] [2]
                  GraphEdgePattern [37-43] [-[a]->]
                    GraphElementPatternFiller [39-40] [a]
                      Identifier(a) [39-40] [a]
            GqlReturn [44-59] [RETURN 1 as col]
              Select [51-59] [1 as col]
                SelectList [51-59] [1 as col]
                  SelectColumn [51-59] [1 as col]
                    IntLiteral(1) [51-52] [1]
                    Alias [53-59] [as col]
                      Identifier(col) [56-59] [col]
--
GRAPH my.graph.name
MATCH
  CHEAPEST 2  -[a]->
RETURN
  1 AS col
--
ALTERNATION GROUP: CHEAPEST @param
--
QueryStatement [0-64] [GRAPH my.graph...TURN 1 as col]
  Query [0-64] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-64] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-64] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-64] [MATCH CHEAPEST...TURN 1 as col]
          GqlOperatorList [20-64] [MATCH CHEAPEST...TURN 1 as col]
            GqlMatch [20-48] [MATCH CHEAPEST @param -[a]->]
              GraphPattern [26-48] [CHEAPEST @param -[a]->]
                GraphPathPattern [26-48] [CHEAPEST @param -[a]->]
                  GraphPathSearchPrefix [26-41] [CHEAPEST @param]
                    GraphPathSearchPrefixCount [26-41] [CHEAPEST @param]
                      ParameterExpr [35-41] [@param]
                        Identifier(param) [36-41] [param]
                  GraphEdgePattern [42-48] [-[a]->]
                    GraphElementPatternFiller [44-45] [a]
                      Identifier(a) [44-45] [a]
            GqlReturn [49-64] [RETURN 1 as col]
              Select [56-64] [1 as col]
                SelectList [56-64] [1 as col]
                  SelectColumn [56-64] [1 as col]
                    IntLiteral(1) [56-57] [1]
                    Alias [58-64] [as col]
                      Identifier(col) [61-64] [col]
--
GRAPH my.graph.name
MATCH
  CHEAPEST @param  -[a]->
RETURN
  1 AS col
--
ALTERNATION GROUP: ALL CHEAPEST
--
QueryStatement [0-61] [GRAPH my.graph...TURN 1 as col]
  Query [0-61] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-61] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-61] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-61] [MATCH ALL...RETURN 1 as col]
          GqlOperatorList [20-61] [MATCH ALL...RETURN 1 as col]
            GqlMatch [20-45] [MATCH ALL CHEAPEST -[a]->]
              GraphPattern [26-45] [ALL CHEAPEST -[a]->]
                GraphPathPattern [26-45] [ALL CHEAPEST -[a]->]
                  GraphPathSearchPrefix [26-38] [ALL CHEAPEST]
                  GraphEdgePattern [39-45] [-[a]->]
                    GraphElementPatternFiller [41-42] [a]
                      Identifier(a) [41-42] [a]
            GqlReturn [46-61] [RETURN 1 as col]
              Select [53-61] [1 as col]
                SelectList [53-61] [1 as col]
                  SelectColumn [53-61] [1 as col]
                    IntLiteral(1) [53-54] [1]
                    Alias [55-61] [as col]
                      Identifier(col) [58-61] [col]
--
GRAPH my.graph.name
MATCH
  ALL CHEAPEST -[a]->
RETURN
  1 AS col
==

# Mixed path pattern selectors
GRAPH my.graph.name
MATCH
  ANY CHEAPEST -[a]->,
  SHORTEST 2 -[b]->,
  ALL CHEAPEST -[c]->,
  ALL SHORTEST -[d]->
RETURN 1 as col
--
QueryStatement [0-130] [GRAPH my.graph...TURN 1 as col]
  Query [0-130] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-130] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-130] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-130] [MATCH   ANY...RETURN 1 as col]
          GqlOperatorList [20-130] [MATCH   ANY...RETURN 1 as col]
            GqlMatch [20-114] [MATCH   ANY...SHORTEST -[d]->]
              GraphPattern [28-114] [ANY CHEAPEST...SHORTEST -[d]->]
                GraphPathPattern [28-47] [ANY CHEAPEST -[a]->]
                  GraphPathSearchPrefix [28-40] [ANY CHEAPEST]
                  GraphEdgePattern [41-47] [-[a]->]
                    GraphElementPatternFiller [43-44] [a]
                      Identifier(a) [43-44] [a]
                GraphPathPattern [51-68] [SHORTEST 2 -[b]->]
                  GraphPathSearchPrefix [51-61] [SHORTEST 2]
                    GraphPathSearchPrefixCount [51-61] [SHORTEST 2]
                      IntLiteral(2) [60-61] [2]
                  GraphEdgePattern [62-68] [-[b]->]
                    GraphElementPatternFiller [64-65] [b]
                      Identifier(b) [64-65] [b]
                GraphPathPattern [72-91] [ALL CHEAPEST -[c]->]
                  GraphPathSearchPrefix [72-84] [ALL CHEAPEST]
                  GraphEdgePattern [85-91] [-[c]->]
                    GraphElementPatternFiller [87-88] [c]
                      Identifier(c) [87-88] [c]
                GraphPathPattern [95-114] [ALL SHORTEST -[d]->]
                  GraphPathSearchPrefix [95-107] [ALL SHORTEST]
                  GraphEdgePattern [108-114] [-[d]->]
                    GraphElementPatternFiller [110-111] [d]
                      Identifier(d) [110-111] [d]
            GqlReturn [115-130] [RETURN 1 as col]
              Select [122-130] [1 as col]
                SelectList [122-130] [1 as col]
                  SelectColumn [122-130] [1 as col]
                    IntLiteral(1) [122-123] [1]
                    Alias [124-130] [as col]
                      Identifier(col) [127-130] [col]
--
GRAPH my.graph.name
MATCH
  ANY CHEAPEST -[a]->,
  SHORTEST 2  -[b]->,
  ALL CHEAPEST -[c]->,
  ALL SHORTEST -[d]->
RETURN
  1 AS col
==

# CHEAPEST with cost and path variable assignment

GRAPH my.graph.name
MATCH
  p = ANY CHEAPEST -[a IS A WHERE a.prop <-3 COST e.amount]->,
  q = CHEAPEST @param -[b IS B WHERE b.prop <-4 COST f.amount]->
RETURN 1 as col
--
QueryStatement [0-169] [GRAPH my.graph...TURN 1 as col]
  Query [0-169] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-169] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-169] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-169] [MATCH   p...RETURN 1 as col]
          GqlOperatorList [20-169] [MATCH   p...RETURN 1 as col]
            GqlMatch [20-153] [MATCH   p....amount]->]
              GraphPattern [28-153] [p = ANY CHEAPEST....amount]->]
                GraphPathPattern [28-87] [p = ANY CHEAPEST....amount]->]
                  Identifier(p) [28-29] [p]
                  GraphPathSearchPrefix [32-44] [ANY CHEAPEST]
                  GraphEdgePattern [45-87] [-[a IS A WHERE....amount]->]
                    GraphElementPatternFiller [47-84] [a IS A WHERE...COST e.amount]
                      Identifier(a) [47-48] [a]
                      GraphLabelFilter [49-53] [IS A]
                        GraphElementLabel [52-53] [A]
                          Identifier(A) [52-53] [A]
                      WhereClause [54-70] [WHERE a.prop <-3]
                        BinaryExpression(<) [60-70] [a.prop <-3]
                          PathExpression [60-66] [a.prop]
                            Identifier(a) [60-61] [a]
                            Identifier(prop) [62-66] [prop]
                          UnaryExpression(-) [68-70] [-3]
                            IntLiteral(3) [69-70] [3]
                      PathExpression [76-84] [e.amount]
                        Identifier(e) [76-77] [e]
                        Identifier(amount) [78-84] [amount]
                GraphPathPattern [91-153] [q = CHEAPEST....amount]->]
                  Identifier(q) [91-92] [q]
                  GraphPathSearchPrefix [95-110] [CHEAPEST @param]
                    GraphPathSearchPrefixCount [95-110] [CHEAPEST @param]
                      ParameterExpr [104-110] [@param]
                        Identifier(param) [105-110] [param]
                  GraphEdgePattern [111-153] [-[b IS B WHERE....amount]->]
                    GraphElementPatternFiller [113-150] [b IS B WHERE...COST f.amount]
                      Identifier(b) [113-114] [b]
                      GraphLabelFilter [115-119] [IS B]
                        GraphElementLabel [118-119] [B]
                          Identifier(B) [118-119] [B]
                      WhereClause [120-136] [WHERE b.prop <-4]
                        BinaryExpression(<) [126-136] [b.prop <-4]
                          PathExpression [126-132] [b.prop]
                            Identifier(b) [126-127] [b]
                            Identifier(prop) [128-132] [prop]
                          UnaryExpression(-) [134-136] [-4]
                            IntLiteral(4) [135-136] [4]
                      PathExpression [142-150] [f.amount]
                        Identifier(f) [142-143] [f]
                        Identifier(amount) [144-150] [amount]
            GqlReturn [154-169] [RETURN 1 as col]
              Select [161-169] [1 as col]
                SelectList [161-169] [1 as col]
                  SelectColumn [161-169] [1 as col]
                    IntLiteral(1) [161-162] [1]
                    Alias [163-169] [as col]
                      Identifier(col) [166-169] [col]
--
GRAPH my.graph.name
MATCH
  p = ANY CHEAPEST -[a
  IS A
  WHERE
    a.prop < -3 COST e.amount]->,
  q = CHEAPEST @param  -[b
  IS B
  WHERE
    b.prop < -4 COST f.amount]->
RETURN
  1 AS col
==

# CHEAPEST on a quantified edge
GRAPH my.graph.name
MATCH
  p = ANY CHEAPEST -[a IS A WHERE a.prop <-3 COST e.amount]->{1,3}
RETURN 1 as col
--
QueryStatement [0-108] [GRAPH my.graph...TURN 1 as col]
  Query [0-108] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-108] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-108] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-108] [MATCH   p...RETURN 1 as col]
          GqlOperatorList [20-108] [MATCH   p...RETURN 1 as col]
            GqlMatch [20-92] [MATCH   p...amount]->{1,3}]
              GraphPattern [28-92] [p = ANY CHEAPEST...unt]->{1,3}]
                GraphPathPattern [28-92] [p = ANY CHEAPEST...unt]->{1,3}]
                  Identifier(p) [28-29] [p]
                  GraphPathSearchPrefix [32-44] [ANY CHEAPEST]
                  ParenthesizedGraphPathPattern [45-92] [-[a IS A WHERE...mount]->{1,3}]
                    BoundedQuantifier [87-92] [{1,3}]
                      QuantifierBound [88-89] [1]
                        IntLiteral(1) [88-89] [1]
                      QuantifierBound [90-91] [3]
                        IntLiteral(3) [90-91] [3]
                    GraphEdgePattern [45-87] [-[a IS A WHERE....amount]->]
                      GraphElementPatternFiller [47-84] [a IS A WHERE...COST e.amount]
                        Identifier(a) [47-48] [a]
                        GraphLabelFilter [49-53] [IS A]
                          GraphElementLabel [52-53] [A]
                            Identifier(A) [52-53] [A]
                        WhereClause [54-70] [WHERE a.prop <-3]
                          BinaryExpression(<) [60-70] [a.prop <-3]
                            PathExpression [60-66] [a.prop]
                              Identifier(a) [60-61] [a]
                              Identifier(prop) [62-66] [prop]
                            UnaryExpression(-) [68-70] [-3]
                              IntLiteral(3) [69-70] [3]
                        PathExpression [76-84] [e.amount]
                          Identifier(e) [76-77] [e]
                          Identifier(amount) [78-84] [amount]
            GqlReturn [93-108] [RETURN 1 as col]
              Select [100-108] [1 as col]
                SelectList [100-108] [1 as col]
                  SelectColumn [100-108] [1 as col]
                    IntLiteral(1) [100-101] [1]
                    Alias [102-108] [as col]
                      Identifier(col) [105-108] [col]
--
GRAPH my.graph.name
MATCH
  p = ANY CHEAPEST (
    -[a
    IS A
    WHERE
      a.prop < -3 COST e.amount]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# CHEAPEST on a quantified path with cost
GRAPH my.graph.name
MATCH
  p = ANY CHEAPEST ((a)-[a IS A WHERE a.prop <-3 COST e.amount]->(b)){1,3}
RETURN 1 as col
--
QueryStatement [0-116] [GRAPH my.graph...TURN 1 as col]
  Query [0-116] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-116] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-116] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-116] [MATCH   p...RETURN 1 as col]
          GqlOperatorList [20-116] [MATCH   p...RETURN 1 as col]
            GqlMatch [20-100] [MATCH   p...>(b)){1,3}]
              GraphPattern [28-100] [p = ANY CHEAPEST...>(b)){1,3}]
                GraphPathPattern [28-100] [p = ANY CHEAPEST...>(b)){1,3}]
                  Identifier(p) [28-29] [p]
                  GraphPathSearchPrefix [32-44] [ANY CHEAPEST]
                  ParenthesizedGraphPathPattern [45-100] [((a)-[a IS...>(b)){1,3}]
                    BoundedQuantifier [95-100] [{1,3}]
                      QuantifierBound [96-97] [1]
                        IntLiteral(1) [96-97] [1]
                      QuantifierBound [98-99] [3]
                        IntLiteral(3) [98-99] [3]
                    GraphNodePattern [46-49] [(a)]
                      GraphElementPatternFiller [47-48] [a]
                        Identifier(a) [47-48] [a]
                    GraphEdgePattern [49-91] [-[a IS A WHERE....amount]->]
                      GraphElementPatternFiller [51-88] [a IS A WHERE...COST e.amount]
                        Identifier(a) [51-52] [a]
                        GraphLabelFilter [53-57] [IS A]
                          GraphElementLabel [56-57] [A]
                            Identifier(A) [56-57] [A]
                        WhereClause [58-74] [WHERE a.prop <-3]
                          BinaryExpression(<) [64-74] [a.prop <-3]
                            PathExpression [64-70] [a.prop]
                              Identifier(a) [64-65] [a]
                              Identifier(prop) [66-70] [prop]
                            UnaryExpression(-) [72-74] [-3]
                              IntLiteral(3) [73-74] [3]
                        PathExpression [80-88] [e.amount]
                          Identifier(e) [80-81] [e]
                          Identifier(amount) [82-88] [amount]
                    GraphNodePattern [91-94] [(b)]
                      GraphElementPatternFiller [92-93] [b]
                        Identifier(b) [92-93] [b]
            GqlReturn [101-116] [RETURN 1 as col]
              Select [108-116] [1 as col]
                SelectList [108-116] [1 as col]
                  SelectColumn [108-116] [1 as col]
                    IntLiteral(1) [108-109] [1]
                    Alias [110-116] [as col]
                      Identifier(col) [113-116] [col]
--
GRAPH my.graph.name
MATCH
  p = ANY CHEAPEST (
    (a)
    -[a
    IS A
    WHERE
      a.prop < -3 COST e.amount]->
    (b)
  ) { 1, 3 }
RETURN
  1 AS col
==

# CHEAPEST on nested subpath, this should be rejected by the resolver.
GRAPH my.graph.name
MATCH
  (a) -(ANY CHEAPEST -[a IS A WHERE a.prop <-3 COST e.amount]->{1,3})->
RETURN 1 as col
--
QueryStatement [0-113] [GRAPH my.graph...TURN 1 as col]
  Query [0-113] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-113] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-113] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-113] [MATCH   (a...RETURN 1 as col]
          GqlOperatorList [20-113] [MATCH   (a...RETURN 1 as col]
            GqlMatch [20-97] [MATCH   (a...->{1,3})->]
              GraphPattern [28-97] [(a) -(ANY...->{1,3})->]
                GraphPathPattern [28-97] [(a) -(ANY...->{1,3})->]
                  GraphNodePattern [28-31] [(a)]
                    GraphElementPatternFiller [29-30] [a]
                      Identifier(a) [29-30] [a]
                  GraphEdgePattern [32-33] [-]
                  ParenthesizedGraphPathPattern [33-95] [(ANY CHEAPEST...mount]->{1,3})]
                    GraphPathSearchPrefix [34-46] [ANY CHEAPEST]
                    ParenthesizedGraphPathPattern [47-94] [-[a IS A WHERE...mount]->{1,3}]
                      BoundedQuantifier [89-94] [{1,3}]
                        QuantifierBound [90-91] [1]
                          IntLiteral(1) [90-91] [1]
                        QuantifierBound [92-93] [3]
                          IntLiteral(3) [92-93] [3]
                      GraphEdgePattern [47-89] [-[a IS A WHERE....amount]->]
                        GraphElementPatternFiller [49-86] [a IS A WHERE...COST e.amount]
                          Identifier(a) [49-50] [a]
                          GraphLabelFilter [51-55] [IS A]
                            GraphElementLabel [54-55] [A]
                              Identifier(A) [54-55] [A]
                          WhereClause [56-72] [WHERE a.prop <-3]
                            BinaryExpression(<) [62-72] [a.prop <-3]
                              PathExpression [62-68] [a.prop]
                                Identifier(a) [62-63] [a]
                                Identifier(prop) [64-68] [prop]
                              UnaryExpression(-) [70-72] [-3]
                                IntLiteral(3) [71-72] [3]
                          PathExpression [78-86] [e.amount]
                            Identifier(e) [78-79] [e]
                            Identifier(amount) [80-86] [amount]
                  GraphEdgePattern [95-97] [->]
            GqlReturn [98-113] [RETURN 1 as col]
              Select [105-113] [1 as col]
                SelectList [105-113] [1 as col]
                  SelectColumn [105-113] [1 as col]
                    IntLiteral(1) [105-106] [1]
                    Alias [107-113] [as col]
                      Identifier(col) [110-113] [col]
--
GRAPH my.graph.name
MATCH
  (a)
  -
  (
    ANY CHEAPEST (
      -[a
      IS A
      WHERE
        a.prop < -3 COST e.amount]->
    ) { 1, 3 }
  )
  ->
RETURN
  1 AS col
==

# Shift-reduce conflict with graph identifier resolvers in favor of graph identifier
GRAPH my.graph.name
MATCH -[cost 12]->
RETURN 1 as col
--
ERROR: Syntax error: Expected "]" but got integer literal "12" [at 2:14]
MATCH -[cost 12]->
             ^
==

# This example is truely ambiguous. "cost {a:b}" could be the element name
# followed by a property spec or it could be the COST keyword followed by a
# braced constructor. We choose the former interpretation.
GRAPH my.graph.name
MATCH -[cost {a:b}]->
RETURN 1 as col
--
QueryStatement [0-57] [GRAPH my.graph...TURN 1 as col]
  Query [0-57] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-57] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-57] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-57] [MATCH -[cost...RETURN 1 as col]
          GqlOperatorList [20-57] [MATCH -[cost...RETURN 1 as col]
            GqlMatch [20-41] [MATCH -[cost {a:b}]->]
              GraphPattern [26-41] [-[cost {a:b}]->]
                GraphPathPattern [26-41] [-[cost {a:b}]->]
                  GraphEdgePattern [26-41] [-[cost {a:b}]->]
                    GraphElementPatternFiller [28-38] [cost {a:b}]
                      Identifier(cost) [28-32] [cost]
                      GraphPropertySpecification [33-38] [{a:b}]
                        GraphPropertyNameAndValue [34-37] [a:b]
                          Identifier(a) [34-35] [a]
                          PathExpression [36-37] [b]
                            Identifier(b) [36-37] [b]
            GqlReturn [42-57] [RETURN 1 as col]
              Select [49-57] [1 as col]
                SelectList [49-57] [1 as col]
                  SelectColumn [49-57] [1 as col]
                    IntLiteral(1) [49-50] [1]
                    Alias [51-57] [as col]
                      Identifier(col) [54-57] [col]
--
GRAPH my.graph.name
MATCH
  -[cost { a : b }]->
RETURN
  1 AS col
==

[language_features=NONE,+BRACED_PROTO_CONSTRUCTORS]
GRAPH my.graph.name
MATCH -[cost cost {a:b}]->
RETURN 1 as col
--
QueryStatement [0-62] [GRAPH my.graph...TURN 1 as col]
  Query [0-62] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-62] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-62] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-62] [MATCH -[cost...RETURN 1 as col]
          GqlOperatorList [20-62] [MATCH -[cost...RETURN 1 as col]
            GqlMatch [20-46] [MATCH -[cost cost {a:b}]->]
              GraphPattern [26-46] [-[cost cost {a:b}]->]
                GraphPathPattern [26-46] [-[cost cost {a:b}]->]
                  GraphEdgePattern [26-46] [-[cost cost {a:b}]->]
                    GraphElementPatternFiller [28-43] [cost cost {a:b}]
                      Identifier(cost) [28-32] [cost]
                      BracedConstructor [38-43] [{a:b}]
                        BracedConstructorField [39-42] [a:b]
                          BracedConstructorLhs [39-40] [a]
                            PathExpression [39-40] [a]
                              Identifier(a) [39-40] [a]
                          BracedConstructorFieldValue [40-42] [:b]
                            PathExpression [41-42] [b]
                              Identifier(b) [41-42] [b]
            GqlReturn [47-62] [RETURN 1 as col]
              Select [54-62] [1 as col]
                SelectList [54-62] [1 as col]
                  SelectColumn [54-62] [1 as col]
                    IntLiteral(1) [54-55] [1]
                    Alias [56-62] [as col]
                      Identifier(col) [59-62] [col]
--
GRAPH my.graph.name
MATCH
  -[cost COST {
    a : b
  }]->
RETURN
  1 AS col
==

[language_features=NONE,+BRACED_PROTO_CONSTRUCTORS]
GRAPH my.graph.name
MATCH -[cost {a:b} COST {a:b}]->
RETURN 1 as col
--
QueryStatement [0-68] [GRAPH my.graph...TURN 1 as col]
  Query [0-68] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-68] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-68] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-68] [MATCH -[cost...RETURN 1 as col]
          GqlOperatorList [20-68] [MATCH -[cost...RETURN 1 as col]
            GqlMatch [20-52] [MATCH -[cost...COST {a:b}]->]
              GraphPattern [26-52] [-[cost {a:b} COST {a:b}]->]
                GraphPathPattern [26-52] [-[cost {a:b} COST {a:b}]->]
                  GraphEdgePattern [26-52] [-[cost {a:b} COST {a:b}]->]
                    GraphElementPatternFiller [28-49] [cost {a:b} COST {a:b}]
                      Identifier(cost) [28-32] [cost]
                      GraphPropertySpecification [33-38] [{a:b}]
                        GraphPropertyNameAndValue [34-37] [a:b]
                          Identifier(a) [34-35] [a]
                          PathExpression [36-37] [b]
                            Identifier(b) [36-37] [b]
                      BracedConstructor [44-49] [{a:b}]
                        BracedConstructorField [45-48] [a:b]
                          BracedConstructorLhs [45-46] [a]
                            PathExpression [45-46] [a]
                              Identifier(a) [45-46] [a]
                          BracedConstructorFieldValue [46-48] [:b]
                            PathExpression [47-48] [b]
                              Identifier(b) [47-48] [b]
            GqlReturn [53-68] [RETURN 1 as col]
              Select [60-68] [1 as col]
                SelectList [60-68] [1 as col]
                  SelectColumn [60-68] [1 as col]
                    IntLiteral(1) [60-61] [1]
                    Alias [62-68] [as col]
                      Identifier(col) [65-68] [col]
--
GRAPH my.graph.name
MATCH
  -[cost { a : b } COST {
    a : b
  }]->
RETURN
  1 AS col
==

GRAPH my.graph.name
MATCH -[cost cost 12]->
RETURN 1 as col
--
QueryStatement [0-59] [GRAPH my.graph...TURN 1 as col]
  Query [0-59] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-59] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-59] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-59] [MATCH -[cost...RETURN 1 as col]
          GqlOperatorList [20-59] [MATCH -[cost...RETURN 1 as col]
            GqlMatch [20-43] [MATCH -[cost cost 12]->]
              GraphPattern [26-43] [-[cost cost 12]->]
                GraphPathPattern [26-43] [-[cost cost 12]->]
                  GraphEdgePattern [26-43] [-[cost cost 12]->]
                    GraphElementPatternFiller [28-40] [cost cost 12]
                      Identifier(cost) [28-32] [cost]
                      IntLiteral(12) [38-40] [12]
            GqlReturn [44-59] [RETURN 1 as col]
              Select [51-59] [1 as col]
                SelectList [51-59] [1 as col]
                  SelectColumn [51-59] [1 as col]
                    IntLiteral(1) [51-52] [1]
                    Alias [53-59] [as col]
                      Identifier(col) [56-59] [col]
--
GRAPH my.graph.name
MATCH
  -[cost COST 12]->
RETURN
  1 AS col
==

# Shift reduce conflict with path variable assignment in graph subquery resolves in favor of path variable assignment
GRAPH my.graph.name
MATCH (n)
FILTER EXISTS {cost 12}
RETURN 1 as col
--
ERROR: Syntax error: Expected "=" but got integer literal "12" [at 3:21]
FILTER EXISTS {cost 12}
                    ^
==

GRAPH my.graph.name
MATCH (n)
FILTER EXISTS {cost = (n cost 12)}
RETURN 1 as col
--
QueryStatement [0-80] [GRAPH my.graph...TURN 1 as col]
  Query [0-80] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-80] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-80] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-80] [MATCH (n)...RETURN 1 as col]
          GqlOperatorList [20-80] [MATCH (n)...RETURN 1 as col]
            GqlMatch [20-29] [MATCH (n)]
              GraphPattern [26-29] [(n)]
                GraphPathPattern [26-29] [(n)]
                  GraphNodePattern [26-29] [(n)]
                    GraphElementPatternFiller [27-28] [n]
                      Identifier(n) [27-28] [n]
            GqlFilter [30-64] [FILTER EXISTS...cost 12)}]
              WhereClause [30-64] [FILTER EXISTS...cost 12)}]
                ExpressionSubquery(modifier=EXISTS) [37-64] [EXISTS {cost = (n cost 12)}]
                  Query [37-64] [EXISTS {cost = (n cost 12)}]
                    GqlGraphPatternQuery [37-64] [EXISTS {cost = (n cost 12)}]
                      GraphPattern [45-63] [cost = (n cost 12)]
                        GraphPathPattern [45-63] [cost = (n cost 12)]
                          Identifier(cost) [45-49] [cost]
                          GraphNodePattern [52-63] [(n cost 12)]
                            GraphElementPatternFiller [53-62] [n cost 12]
                              Identifier(n) [53-54] [n]
                              IntLiteral(12) [60-62] [12]
            GqlReturn [65-80] [RETURN 1 as col]
              Select [72-80] [1 as col]
                SelectList [72-80] [1 as col]
                  SelectColumn [72-80] [1 as col]
                    IntLiteral(1) [72-73] [1]
                    Alias [74-80] [as col]
                      Identifier(col) [77-80] [col]
--
GRAPH my.graph.name
MATCH
  (n)
FILTER
  WHERE
    EXISTS {
      cost = (n COST 12)
    }
RETURN
  1 AS col
==

# cost by itself should always bind to the rule for graph identifier
GRAPH my.graph.name
MATCH -[cost]-
OPTIONAL MATCH (cost)
RETURN 1 as col
--
QueryStatement [0-72] [GRAPH my.graph...TURN 1 as col]
  Query [0-72] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-72] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-72] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-72] [MATCH -[cost...RETURN 1 as col]
          GqlOperatorList [20-72] [MATCH -[cost...RETURN 1 as col]
            GqlMatch [20-34] [MATCH -[cost]-]
              GraphPattern [26-34] [-[cost]-]
                GraphPathPattern [26-34] [-[cost]-]
                  GraphEdgePattern [26-34] [-[cost]-]
                    GraphElementPatternFiller [28-32] [cost]
                      Identifier(cost) [28-32] [cost]
            GqlMatch (optional) [35-56] [OPTIONAL MATCH (cost)]
              GraphPattern [50-56] [(cost)]
                GraphPathPattern [50-56] [(cost)]
                  GraphNodePattern [50-56] [(cost)]
                    GraphElementPatternFiller [51-55] [cost]
                      Identifier(cost) [51-55] [cost]
            GqlReturn [57-72] [RETURN 1 as col]
              Select [64-72] [1 as col]
                SelectList [64-72] [1 as col]
                  SelectColumn [64-72] [1 as col]
                    IntLiteral(1) [64-65] [1]
                    Alias [66-72] [as col]
                      Identifier(col) [69-72] [col]
--
GRAPH my.graph.name
MATCH
  -[cost]-
OPTIONAL MATCH
  (cost)
RETURN
  1 AS col
==

# Complex test case with multiple top level paths, path assignment
# and subpaths containing selectors
GRAPH my.graph.name
MATCH p = CHEAPEST @q (a)(CHEAPEST 2 -[b]->{2,3}){5},
      q = ANY CHEAPEST -[e cost e.val]->{1,4},
      r = ANY CHEAPEST ((ALL CHEAPEST (a)-[b cost 10]->{1,2}))((ANY CHEAPEST(c)-[d cost 1.4]->{@p}))
RETURN 1 as col
--
QueryStatement [0-237] [GRAPH my.graph...TURN 1 as col]
  Query [0-237] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-237] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-237] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-237] [MATCH p =...RETURN 1 as col]
          GqlOperatorList [20-237] [MATCH p =...RETURN 1 as col]
            GqlMatch [20-221] [MATCH p =...4]->{@p}))]
              GraphPattern [26-221] [p = CHEAPEST...4]->{@p}))]
                GraphPathPattern [26-72] [p = CHEAPEST...>{2,3}){5}]
                  Identifier(p) [26-27] [p]
                  GraphPathSearchPrefix [30-41] [CHEAPEST @q]
                    GraphPathSearchPrefixCount [30-41] [CHEAPEST @q]
                      ParameterExpr [39-41] [@q]
                        Identifier(q) [40-41] [q]
                  GraphNodePattern [42-45] [(a)]
                    GraphElementPatternFiller [43-44] [a]
                      Identifier(a) [43-44] [a]
                  ParenthesizedGraphPathPattern [45-72] [(CHEAPEST 2 -[b]->{2,3}){5}]
                    FixedQuantifier [70-71] [5]
                      IntLiteral(5) [70-71] [5]
                    GraphPathSearchPrefix [46-56] [CHEAPEST 2]
                      GraphPathSearchPrefixCount [46-56] [CHEAPEST 2]
                        IntLiteral(2) [55-56] [2]
                    ParenthesizedGraphPathPattern [57-68] [-[b]->{2,3}]
                      BoundedQuantifier [63-68] [{2,3}]
                        QuantifierBound [64-65] [2]
                          IntLiteral(2) [64-65] [2]
                        QuantifierBound [66-67] [3]
                          IntLiteral(3) [66-67] [3]
                      GraphEdgePattern [57-63] [-[b]->]
                        GraphElementPatternFiller [59-60] [b]
                          Identifier(b) [59-60] [b]
                GraphPathPattern [80-119] [q = ANY CHEAPEST...val]->{1,4}]
                  Identifier(q) [80-81] [q]
                  GraphPathSearchPrefix [84-96] [ANY CHEAPEST]
                  ParenthesizedGraphPathPattern [97-119] [-[e cost e.val]->{1,4}]
                    BoundedQuantifier [114-119] [{1,4}]
                      QuantifierBound [115-116] [1]
                        IntLiteral(1) [115-116] [1]
                      QuantifierBound [117-118] [4]
                        IntLiteral(4) [117-118] [4]
                    GraphEdgePattern [97-114] [-[e cost e.val]->]
                      GraphElementPatternFiller [99-111] [e cost e.val]
                        Identifier(e) [99-100] [e]
                        PathExpression [106-111] [e.val]
                          Identifier(e) [106-107] [e]
                          Identifier(val) [108-111] [val]
                GraphPathPattern [127-221] [r = ANY CHEAPEST...4]->{@p}))]
                  Identifier(r) [127-128] [r]
                  GraphPathSearchPrefix [131-143] [ANY CHEAPEST]
                  ParenthesizedGraphPathPattern [144-183] [((ALL CHEAPEST...]->{1,2}))]
                    GraphPathSearchPrefix [146-158] [ALL CHEAPEST]
                    GraphNodePattern [159-162] [(a)]
                      GraphElementPatternFiller [160-161] [a]
                        Identifier(a) [160-161] [a]
                    ParenthesizedGraphPathPattern [162-181] [-[b cost 10]->{1,2}]
                      BoundedQuantifier [176-181] [{1,2}]
                        QuantifierBound [177-178] [1]
                          IntLiteral(1) [177-178] [1]
                        QuantifierBound [179-180] [2]
                          IntLiteral(2) [179-180] [2]
                      GraphEdgePattern [162-176] [-[b cost 10]->]
                        GraphElementPatternFiller [164-173] [b cost 10]
                          Identifier(b) [164-165] [b]
                          IntLiteral(10) [171-173] [10]
                  ParenthesizedGraphPathPattern [183-221] [((ANY CHEAPEST...4]->{@p}))]
                    GraphPathSearchPrefix [185-197] [ANY CHEAPEST]
                    GraphNodePattern [197-200] [(c)]
                      GraphElementPatternFiller [198-199] [c]
                        Identifier(c) [198-199] [c]
                    ParenthesizedGraphPathPattern [200-219] [-[d cost 1.4]->{@p}]
                      FixedQuantifier [216-218] [@p]
                        ParameterExpr [216-218] [@p]
                          Identifier(p) [217-218] [p]
                      GraphEdgePattern [200-215] [-[d cost 1.4]->]
                        GraphElementPatternFiller [202-212] [d cost 1.4]
                          Identifier(d) [202-203] [d]
                          FloatLiteral(1.4) [209-212] [1.4]
            GqlReturn [222-237] [RETURN 1 as col]
              Select [229-237] [1 as col]
                SelectList [229-237] [1 as col]
                  SelectColumn [229-237] [1 as col]
                    IntLiteral(1) [229-230] [1]
                    Alias [231-237] [as col]
                      Identifier(col) [234-237] [col]

--
GRAPH my.graph.name
MATCH
  p = CHEAPEST @q  (a)
  (
    CHEAPEST 2  (
      -[b]->
    ) { 2, 3 }
  ) { 5 },
  q = ANY CHEAPEST (
    -[e COST e.val]->
  ) { 1, 4 },
  r = ANY CHEAPEST (
    ALL CHEAPEST (a)
    (
      -[b COST 10]->
    ) { 1, 2 }
  )
  (
    ANY CHEAPEST (c)
    (
      -[d COST 1.4]->
    ) { @p }
  )
RETURN
  1 AS col
==

# cost by itself should always bind to the rule for graph identifier
GRAPH my.graph.name
MATCH (n)
FILTER EXISTS {-[cost]-}
RETURN 1 as col
--
QueryStatement [0-70] [GRAPH my.graph...TURN 1 as col]
  Query [0-70] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-70] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-70] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-70] [MATCH (n)...RETURN 1 as col]
          GqlOperatorList [20-70] [MATCH (n)...RETURN 1 as col]
            GqlMatch [20-29] [MATCH (n)]
              GraphPattern [26-29] [(n)]
                GraphPathPattern [26-29] [(n)]
                  GraphNodePattern [26-29] [(n)]
                    GraphElementPatternFiller [27-28] [n]
                      Identifier(n) [27-28] [n]
            GqlFilter [30-54] [FILTER EXISTS {-[cost]-}]
              WhereClause [30-54] [FILTER EXISTS {-[cost]-}]
                ExpressionSubquery(modifier=EXISTS) [37-54] [EXISTS {-[cost]-}]
                  Query [37-54] [EXISTS {-[cost]-}]
                    GqlGraphPatternQuery [37-54] [EXISTS {-[cost]-}]
                      GraphPattern [45-53] [-[cost]-]
                        GraphPathPattern [45-53] [-[cost]-]
                          GraphEdgePattern [45-53] [-[cost]-]
                            GraphElementPatternFiller [47-51] [cost]
                              Identifier(cost) [47-51] [cost]
            GqlReturn [55-70] [RETURN 1 as col]
              Select [62-70] [1 as col]
                SelectList [62-70] [1 as col]
                  SelectColumn [62-70] [1 as col]
                    IntLiteral(1) [62-63] [1]
                    Alias [64-70] [as col]
                      Identifier(col) [67-70] [col]
--
GRAPH my.graph.name
MATCH
  (n)
FILTER
  WHERE
    EXISTS {
      -[cost]-
    }
RETURN
  1 AS col
==

# COST is NULL literal
GRAPH my.graph.name
MATCH -[e cost NULL]->{1,3}
RETURN 1 as col
--
QueryStatement [0-63] [GRAPH my.graph...TURN 1 as col]
  Query [0-63] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-63] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-63] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-63] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-63] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-47] [MATCH -[e cost NULL]->{1,3}]
              GraphPattern [26-47] [-[e cost NULL]->{1,3}]
                ParenthesizedGraphPathPattern [26-47] [-[e cost NULL]->{1,3}]
                  BoundedQuantifier [42-47] [{1,3}]
                    QuantifierBound [43-44] [1]
                      IntLiteral(1) [43-44] [1]
                    QuantifierBound [45-46] [3]
                      IntLiteral(3) [45-46] [3]
                  GraphEdgePattern [26-42] [-[e cost NULL]->]
                    GraphElementPatternFiller [28-39] [e cost NULL]
                      Identifier(e) [28-29] [e]
                      NullLiteral(NULL) [35-39] [NULL]
            GqlReturn [48-63] [RETURN 1 as col]
              Select [55-63] [1 as col]
                SelectList [55-63] [1 as col]
                  SelectColumn [55-63] [1 as col]
                    IntLiteral(1) [55-56] [1]
                    Alias [57-63] [as col]
                      Identifier(col) [60-63] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST NULL]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is string literal
GRAPH my.graph.name
MATCH -[e cost 'abc']->{1,3}
RETURN 1 as col
--
QueryStatement [0-64] [GRAPH my.graph...TURN 1 as col]
  Query [0-64] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-64] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-64] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-64] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-64] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-48] [MATCH -[e cost 'abc']->{1,3}]
              GraphPattern [26-48] [-[e cost 'abc']->{1,3}]
                ParenthesizedGraphPathPattern [26-48] [-[e cost 'abc']->{1,3}]
                  BoundedQuantifier [43-48] [{1,3}]
                    QuantifierBound [44-45] [1]
                      IntLiteral(1) [44-45] [1]
                    QuantifierBound [46-47] [3]
                      IntLiteral(3) [46-47] [3]
                  GraphEdgePattern [26-43] [-[e cost 'abc']->]
                    GraphElementPatternFiller [28-40] [e cost 'abc']
                      Identifier(e) [28-29] [e]
                      StringLiteral [35-40] ['abc']
                        StringLiteralComponent('abc') [35-40] ['abc']
            GqlReturn [49-64] [RETURN 1 as col]
              Select [56-64] [1 as col]
                SelectList [56-64] [1 as col]
                  SelectColumn [56-64] [1 as col]
                    IntLiteral(1) [56-57] [1]
                    Alias [58-64] [as col]
                      Identifier(col) [61-64] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST 'abc']->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is path expression
GRAPH my.graph.name
MATCH -[e cost abc.xyz]->{1,3}
RETURN 1 as col
--
QueryStatement [0-66] [GRAPH my.graph...TURN 1 as col]
  Query [0-66] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-66] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-66] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-66] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-66] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-50] [MATCH -[e cost abc.xyz]->{1,3}]
              GraphPattern [26-50] [-[e cost abc.xyz]->{1,3}]
                ParenthesizedGraphPathPattern [26-50] [-[e cost abc.xyz]->{1,3}]
                  BoundedQuantifier [45-50] [{1,3}]
                    QuantifierBound [46-47] [1]
                      IntLiteral(1) [46-47] [1]
                    QuantifierBound [48-49] [3]
                      IntLiteral(3) [48-49] [3]
                  GraphEdgePattern [26-45] [-[e cost abc.xyz]->]
                    GraphElementPatternFiller [28-42] [e cost abc.xyz]
                      Identifier(e) [28-29] [e]
                      PathExpression [35-42] [abc.xyz]
                        Identifier(abc) [35-38] [abc]
                        Identifier(xyz) [39-42] [xyz]
            GqlReturn [51-66] [RETURN 1 as col]
              Select [58-66] [1 as col]
                SelectList [58-66] [1 as col]
                  SelectColumn [58-66] [1 as col]
                    IntLiteral(1) [58-59] [1]
                    Alias [60-66] [as col]
                      Identifier(col) [63-66] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST abc.xyz]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is parameter
GRAPH my.graph.name
MATCH -[e cost @cost_param]->{1,3}
RETURN 1 as col
--
QueryStatement [0-70] [GRAPH my.graph...TURN 1 as col]
  Query [0-70] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-70] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-70] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-70] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-70] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-54] [MATCH -[e...cost_param]->{1,3}]
              GraphPattern [26-54] [-[e cost @cost_param]->{1,3}]
                ParenthesizedGraphPathPattern [26-54] [-[e cost @cost_param]->{1,3}]
                  BoundedQuantifier [49-54] [{1,3}]
                    QuantifierBound [50-51] [1]
                      IntLiteral(1) [50-51] [1]
                    QuantifierBound [52-53] [3]
                      IntLiteral(3) [52-53] [3]
                  GraphEdgePattern [26-49] [-[e cost @cost_param]->]
                    GraphElementPatternFiller [28-46] [e cost @cost_param]
                      Identifier(e) [28-29] [e]
                      ParameterExpr [35-46] [@cost_param]
                        Identifier(cost_param) [36-46] [cost_param]
            GqlReturn [55-70] [RETURN 1 as col]
              Select [62-70] [1 as col]
                SelectList [62-70] [1 as col]
                  SelectColumn [62-70] [1 as col]
                    IntLiteral(1) [62-63] [1]
                    Alias [64-70] [as col]
                      Identifier(col) [67-70] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST @cost_param]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is positional parameter (?)
GRAPH my.graph.name
MATCH -[e cost ?]->{1,3}
RETURN 1 as col
--
QueryStatement [0-60] [GRAPH my.graph...TURN 1 as col]
  Query [0-60] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-60] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-60] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-60] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-60] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-44] [MATCH -[e cost ?]->{1,3}]
              GraphPattern [26-44] [-[e cost ?]->{1,3}]
                ParenthesizedGraphPathPattern [26-44] [-[e cost ?]->{1,3}]
                  BoundedQuantifier [39-44] [{1,3}]
                    QuantifierBound [40-41] [1]
                      IntLiteral(1) [40-41] [1]
                    QuantifierBound [42-43] [3]
                      IntLiteral(3) [42-43] [3]
                  GraphEdgePattern [26-39] [-[e cost ?]->]
                    GraphElementPatternFiller [28-36] [e cost ?]
                      Identifier(e) [28-29] [e]
                      ParameterExpr(1) [35-36] [?]
            GqlReturn [45-60] [RETURN 1 as col]
              Select [52-60] [1 as col]
                SelectList [52-60] [1 as col]
                  SelectColumn [52-60] [1 as col]
                    IntLiteral(1) [52-53] [1]
                    Alias [54-60] [as col]
                      Identifier(col) [57-60] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST ?]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is system var
GRAPH my.graph.name
MATCH -[e cost @@system_var]->{1,3}
RETURN 1 as col
--
QueryStatement [0-71] [GRAPH my.graph...TURN 1 as col]
  Query [0-71] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-71] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-71] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-71] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-71] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-55] [MATCH -[e...system_var]->{1,3}]
              GraphPattern [26-55] [-[e cost @@system_var]->{1,3}]
                ParenthesizedGraphPathPattern [26-55] [-[e cost @@system_var]->{1,3}]
                  BoundedQuantifier [50-55] [{1,3}]
                    QuantifierBound [51-52] [1]
                      IntLiteral(1) [51-52] [1]
                    QuantifierBound [53-54] [3]
                      IntLiteral(3) [53-54] [3]
                  GraphEdgePattern [26-50] [-[e cost @@system_var]->]
                    GraphElementPatternFiller [28-47] [e cost @@system_var]
                      Identifier(e) [28-29] [e]
                      SystemVariableExpr [35-47] [@@system_var]
                        PathExpression [37-47] [system_var]
                          Identifier(system_var) [37-47] [system_var]
            GqlReturn [56-71] [RETURN 1 as col]
              Select [63-71] [1 as col]
                SelectList [63-71] [1 as col]
                  SelectColumn [63-71] [1 as col]
                    IntLiteral(1) [63-64] [1]
                    Alias [65-71] [as col]
                      Identifier(col) [68-71] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST @@system_var]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is function call
GRAPH my.graph.name
MATCH -[e cost SUM(a, b)]->{1,3}
RETURN 1 as col
--
QueryStatement [0-68] [GRAPH my.graph...TURN 1 as col]
  Query [0-68] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-68] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-68] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-68] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-68] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-52] [MATCH -[e...b)]->{1,3}]
              GraphPattern [26-52] [-[e cost SUM(a, b)]->{1,3}]
                ParenthesizedGraphPathPattern [26-52] [-[e cost SUM(a, b)]->{1,3}]
                  BoundedQuantifier [47-52] [{1,3}]
                    QuantifierBound [48-49] [1]
                      IntLiteral(1) [48-49] [1]
                    QuantifierBound [50-51] [3]
                      IntLiteral(3) [50-51] [3]
                  GraphEdgePattern [26-47] [-[e cost SUM(a, b)]->]
                    GraphElementPatternFiller [28-44] [e cost SUM(a, b)]
                      Identifier(e) [28-29] [e]
                      FunctionCall [35-44] [SUM(a, b)]
                        PathExpression [35-38] [SUM]
                          Identifier(SUM) [35-38] [SUM]
                        PathExpression [39-40] [a]
                          Identifier(a) [39-40] [a]
                        PathExpression [42-43] [b]
                          Identifier(b) [42-43] [b]
            GqlReturn [53-68] [RETURN 1 as col]
              Select [60-68] [1 as col]
                SelectList [60-68] [1 as col]
                  SelectColumn [60-68] [1 as col]
                    IntLiteral(1) [60-61] [1]
                    Alias [62-68] [as col]
                      Identifier(col) [65-68] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST SUM(a, b)]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is complex expression including subquery expr
GRAPH my.graph.name
MATCH -[e cost (select a from table.x limit 1) + b]->{1,3}
RETURN 1 as col
--
QueryStatement [0-94] [GRAPH my.graph...TURN 1 as col]
  Query [0-94] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-94] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-94] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-94] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-94] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-78] [MATCH -[e...b]->{1,3}]
              GraphPattern [26-78] [-[e cost (...b]->{1,3}]
                ParenthesizedGraphPathPattern [26-78] [-[e cost (...b]->{1,3}]
                  BoundedQuantifier [73-78] [{1,3}]
                    QuantifierBound [74-75] [1]
                      IntLiteral(1) [74-75] [1]
                    QuantifierBound [76-77] [3]
                      IntLiteral(3) [76-77] [3]
                  GraphEdgePattern [26-73] [-[e cost (...1) + b]->]
                    GraphElementPatternFiller [28-70] [e cost (select...limit 1) + b]
                      Identifier(e) [28-29] [e]
                      BinaryExpression(+) [35-70] [(select a...limit 1) + b]
                        ExpressionSubquery [35-66] [(select a...x limit 1)]
                          Query [36-65] [select a from table.x limit 1]
                            Select [36-57] [select a from table.x]
                              SelectList [43-44] [a]
                                SelectColumn [43-44] [a]
                                  PathExpression [43-44] [a]
                                    Identifier(a) [43-44] [a]
                              FromClause [45-57] [from table.x]
                                TablePathExpression [50-57] [table.x]
                                  PathExpression [50-57] [table.x]
                                    Identifier(table) [50-55] [table]
                                    Identifier(x) [56-57] [x]
                            LimitOffset [58-65] [limit 1]
                              Limit [58-65] [limit 1]
                                IntLiteral(1) [64-65] [1]
                        PathExpression [69-70] [b]
                          Identifier(b) [69-70] [b]
            GqlReturn [79-94] [RETURN 1 as col]
              Select [86-94] [1 as col]
                SelectList [86-94] [1 as col]
                  SelectColumn [86-94] [1 as col]
                    IntLiteral(1) [86-87] [1]
                    Alias [88-94] [as col]
                      Identifier(col) [91-94] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST (
      SELECT
        a
      FROM
        table.x
      LIMIT 1) + b]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is (1)
GRAPH my.graph.name
MATCH -[e cost (1)]->{1,3}
RETURN 1 as col
--
QueryStatement [0-62] [GRAPH my.graph...TURN 1 as col]
  Query [0-62] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-62] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-62] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-62] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-62] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-46] [MATCH -[e cost (1)]->{1,3}]
              GraphPattern [26-46] [-[e cost (1)]->{1,3}]
                ParenthesizedGraphPathPattern [26-46] [-[e cost (1)]->{1,3}]
                  BoundedQuantifier [41-46] [{1,3}]
                    QuantifierBound [42-43] [1]
                      IntLiteral(1) [42-43] [1]
                    QuantifierBound [44-45] [3]
                      IntLiteral(3) [44-45] [3]
                  GraphEdgePattern [26-41] [-[e cost (1)]->]
                    GraphElementPatternFiller [28-38] [e cost (1)]
                      Identifier(e) [28-29] [e]
                      IntLiteral(1) [36-37] [1]
            GqlReturn [47-62] [RETURN 1 as col]
              Select [54-62] [1 as col]
                SelectList [54-62] [1 as col]
                  SelectColumn [54-62] [1 as col]
                    IntLiteral(1) [54-55] [1]
                    Alias [56-62] [as col]
                      Identifier(col) [59-62] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST 1]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is no-op cast
GRAPH my.graph.name
MATCH -[e cost CAST(1 AS INT64)]->{1,3}
RETURN 1 as col
--
QueryStatement [0-75] [GRAPH my.graph...TURN 1 as col]
  Query [0-75] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-75] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-75] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-75] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-75] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-59] [MATCH -[e...INT64)]->{1,3}]
              GraphPattern [26-59] [-[e cost CAST...INT64)]->{1,3}]
                ParenthesizedGraphPathPattern [26-59] [-[e cost CAST...INT64)]->{1,3}]
                  BoundedQuantifier [54-59] [{1,3}]
                    QuantifierBound [55-56] [1]
                      IntLiteral(1) [55-56] [1]
                    QuantifierBound [57-58] [3]
                      IntLiteral(3) [57-58] [3]
                  GraphEdgePattern [26-54] [-[e cost CAST(1 AS INT64)]->]
                    GraphElementPatternFiller [28-51] [e cost CAST(1 AS INT64)]
                      Identifier(e) [28-29] [e]
                      CastExpression [35-51] [CAST(1 AS INT64)]
                        IntLiteral(1) [40-41] [1]
                        SimpleType [45-50] [INT64]
                          PathExpression [45-50] [INT64]
                            Identifier(INT64) [45-50] [INT64]
            GqlReturn [60-75] [RETURN 1 as col]
              Select [67-75] [1 as col]
                SelectList [67-75] [1 as col]
                  SelectColumn [67-75] [1 as col]
                    IntLiteral(1) [67-68] [1]
                    Alias [69-75] [as col]
                      Identifier(col) [72-75] [col]
--
GRAPH my.graph.name
MATCH
  (
    -[e COST CAST(1 AS INT64)]->
  ) { 1, 3 }
RETURN
  1 AS col
==

# COST is node pattern; this will be rejected by the resolver
GRAPH my.graph.name
MATCH (n cost n.cost_prop)
RETURN 1 as col
--
QueryStatement [0-62] [GRAPH my.graph...TURN 1 as col]
  Query [0-62] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-62] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-62] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-62] [MATCH (n cost...ETURN 1 as col]
          GqlOperatorList [20-62] [MATCH (n cost...ETURN 1 as col]
            GqlMatch [20-46] [MATCH (n cost n.cost_prop)]
              GraphPattern [26-46] [(n cost n.cost_prop)]
                GraphPathPattern [26-46] [(n cost n.cost_prop)]
                  GraphNodePattern [26-46] [(n cost n.cost_prop)]
                    GraphElementPatternFiller [27-45] [n cost n.cost_prop]
                      Identifier(n) [27-28] [n]
                      PathExpression [34-45] [n.cost_prop]
                        Identifier(n) [34-35] [n]
                        Identifier(cost_prop) [36-45] [cost_prop]
            GqlReturn [47-62] [RETURN 1 as col]
              Select [54-62] [1 as col]
                SelectList [54-62] [1 as col]
                  SelectColumn [54-62] [1 as col]
                    IntLiteral(1) [54-55] [1]
                    Alias [56-62] [as col]
                      Identifier(col) [59-62] [col]
--
GRAPH my.graph.name
MATCH
  (n COST n.cost_prop)
RETURN
  1 AS col

==

# COST is a GQL value subquery
GRAPH my.graph.name
MATCH -[e cost VALUE {GRAPH AML match -[e2 {id: 1} cost e2.cost_prop]- RETURN 1 as col}]->
RETURN 1 as col
--
QueryStatement [0-126] [GRAPH my.graph...TURN 1 as col]
  Query [0-126] [GRAPH my.graph...TURN 1 as col]
    GqlQuery [0-126] [GRAPH my.graph...TURN 1 as col]
      GraphTableQuery [0-126] [GRAPH my.graph...TURN 1 as col]
        PathExpression [6-19] [my.graph.name]
          Identifier(my) [6-8] [my]
          Identifier(graph) [9-14] [graph]
          Identifier(name) [15-19] [name]
        GqlOperatorList [20-126] [MATCH -[e...RETURN 1 as col]
          GqlOperatorList [20-126] [MATCH -[e...RETURN 1 as col]
            GqlMatch [20-110] [MATCH -[e...as col}]->]
              GraphPattern [26-110] [-[e cost VALUE...as col}]->]
                GraphPathPattern [26-110] [-[e cost VALUE...as col}]->]
                  GraphEdgePattern [26-110] [-[e cost VALUE...as col}]->]
                    GraphElementPatternFiller [28-107] [e cost VALUE...1 as col}]
                      Identifier(e) [28-29] [e]
                      ExpressionSubquery(modifier=VALUE) [35-107] [VALUE {GRAPH...1 as col}]
                        Query [41-107] [{GRAPH AML...1 as col}]
                          GqlQuery [41-107] [{GRAPH AML...1 as col}]
                            GraphTableQuery [41-107] [{GRAPH AML...1 as col}]
                              PathExpression [48-51] [AML]
                                Identifier(AML) [48-51] [AML]
                              GqlOperatorList [52-106] [match -[e2...RETURN 1 as col]
                                GqlOperatorList [52-106] [match -[e2...RETURN 1 as col]
                                  GqlMatch [52-90] [match -[e2...cost_prop]-]
                                    GraphPattern [58-90] [-[e2 {id:...cost_prop]-]
                                      GraphPathPattern [58-90] [-[e2 {id:...cost_prop]-]
                                        GraphEdgePattern [58-90] [-[e2 {id:...cost_prop]-]
                                          GraphElementPatternFiller [60-88] [e2 {id: 1} cost e2.cost_prop]
                                            Identifier(e2) [60-62] [e2]
                                            GraphPropertySpecification [63-70] [{id: 1}]
                                              GraphPropertyNameAndValue [64-69] [id: 1]
                                                Identifier(id) [64-66] [id]
                                                IntLiteral(1) [68-69] [1]
                                            PathExpression [76-88] [e2.cost_prop]
                                              Identifier(e2) [76-78] [e2]
                                              Identifier(cost_prop) [79-88] [cost_prop]
                                  GqlReturn [91-106] [RETURN 1 as col]
                                    Select [98-106] [1 as col]
                                      SelectList [98-106] [1 as col]
                                        SelectColumn [98-106] [1 as col]
                                          IntLiteral(1) [98-99] [1]
                                          Alias [100-106] [as col]
                                            Identifier(col) [103-106] [col]
            GqlReturn [111-126] [RETURN 1 as col]
              Select [118-126] [1 as col]
                SelectList [118-126] [1 as col]
                  SelectColumn [118-126] [1 as col]
                    IntLiteral(1) [118-119] [1]
                    Alias [120-126] [as col]
                      Identifier(col) [123-126] [col]
--
GRAPH my.graph.name
MATCH
  -[e COST VALUE {
    GRAPH AML
    MATCH
      -[e2 { id : 1 } COST e2.cost_prop]-
    RETURN
      1 AS col
  }]->
RETURN
  1 AS col
