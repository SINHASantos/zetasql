[default reserve_graph_table]
[default language_features=NONE,+SQL_GRAPH]
# label cannot be a path expresison
select * from graph_table(my.graph.name
  MATCH (x IS A.B)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
ERROR: Syntax error: Expected ")" but got "." [at 3:16]
  MATCH (x IS A.B)
               ^
==

# label may be a quoted Identifier
select * from graph_table(my.graph.name
  MATCH (x IS `A.B`)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-99] [select * from...m k`) ) g1]
  Query [0-99] [select * from...m k`) ) g1]
    Select [0-99] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-99] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-99] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-60] [MATCH (x IS `A.B`)]
            GraphPattern [48-60] [(x IS `A.B`)]
              GraphPathPattern [48-60] [(x IS `A.B`)]
                GraphNodePattern [48-60] [(x IS `A.B`)]
                  GraphElementPatternFiller [49-59] [x IS `A.B`]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-59] [IS `A.B`]
                      GraphElementLabel [54-59] [`A.B`]
                        Identifier(`A.B`) [54-59] [`A.B`]
          SelectList [71-93] [1 AS one, x.a AS `m k`]
            SelectColumn [71-79] [1 AS one]
              IntLiteral(1) [71-72] [1]
              Alias [73-79] [AS one]
                Identifier(one) [76-79] [one]
            SelectColumn [81-93] [x.a AS `m k`]
              PathExpression [81-84] [x.a]
                Identifier(x) [81-82] [x]
                Identifier(a) [83-84] [a]
              Alias [85-93] [AS `m k`]
                Identifier(`m k`) [88-93] [`m k`]
          Alias [97-99] [g1]
            Identifier(g1) [97-99] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS `A.B`)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Simple label
select * from graph_table(my.graph.name
  MATCH (x IS A)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-95] [select * from...m k`) ) g1]
  Query [0-95] [select * from...m k`) ) g1]
    Select [0-95] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-95] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-95] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-56] [MATCH (x IS A)]
            GraphPattern [48-56] [(x IS A)]
              GraphPathPattern [48-56] [(x IS A)]
                GraphNodePattern [48-56] [(x IS A)]
                  GraphElementPatternFiller [49-55] [x IS A]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-55] [IS A]
                      GraphElementLabel [54-55] [A]
                        Identifier(A) [54-55] [A]
          SelectList [67-89] [1 AS one, x.a AS `m k`]
            SelectColumn [67-75] [1 AS one]
              IntLiteral(1) [67-68] [1]
              Alias [69-75] [AS one]
                Identifier(one) [72-75] [one]
            SelectColumn [77-89] [x.a AS `m k`]
              PathExpression [77-80] [x.a]
                Identifier(x) [77-78] [x]
                Identifier(a) [79-80] [a]
              Alias [81-89] [AS `m k`]
                Identifier(`m k`) [84-89] [`m k`]
          Alias [93-95] [g1]
            Identifier(g1) [93-95] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS A)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Negated simple label
select * from graph_table(my.graph.name
  MATCH (x IS !A)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-96] [select * from...m k`) ) g1]
  Query [0-96] [select * from...m k`) ) g1]
    Select [0-96] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-96] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-96] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-57] [MATCH (x IS !A)]
            GraphPattern [48-57] [(x IS !A)]
              GraphPathPattern [48-57] [(x IS !A)]
                GraphNodePattern [48-57] [(x IS !A)]
                  GraphElementPatternFiller [49-56] [x IS !A]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-56] [IS !A]
                      GraphLabelOperation(NOT) [54-56] [!A]
                        GraphElementLabel [55-56] [A]
                          Identifier(A) [55-56] [A]
          SelectList [68-90] [1 AS one, x.a AS `m k`]
            SelectColumn [68-76] [1 AS one]
              IntLiteral(1) [68-69] [1]
              Alias [70-76] [AS one]
                Identifier(one) [73-76] [one]
            SelectColumn [78-90] [x.a AS `m k`]
              PathExpression [78-81] [x.a]
                Identifier(x) [78-79] [x]
                Identifier(a) [80-81] [a]
              Alias [82-90] [AS `m k`]
                Identifier(`m k`) [85-90] [`m k`]
          Alias [94-96] [g1]
            Identifier(g1) [94-96] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS ! A)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# parenthesized simple label
select * from graph_table(my.graph.name
  MATCH (x IS (A))
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-97] [select * from...m k`) ) g1]
  Query [0-97] [select * from...m k`) ) g1]
    Select [0-97] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-97] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-97] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-58] [MATCH (x IS (A))]
            GraphPattern [48-58] [(x IS (A))]
              GraphPathPattern [48-58] [(x IS (A))]
                GraphNodePattern [48-58] [(x IS (A))]
                  GraphElementPatternFiller [49-57] [x IS (A)]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-57] [IS (A)]
                      GraphElementLabel [55-56] [A]
                        Identifier(A) [55-56] [A]
          SelectList [69-91] [1 AS one, x.a AS `m k`]
            SelectColumn [69-77] [1 AS one]
              IntLiteral(1) [69-70] [1]
              Alias [71-77] [AS one]
                Identifier(one) [74-77] [one]
            SelectColumn [79-91] [x.a AS `m k`]
              PathExpression [79-82] [x.a]
                Identifier(x) [79-80] [x]
                Identifier(a) [81-82] [a]
              Alias [83-91] [AS `m k`]
                Identifier(`m k`) [86-91] [`m k`]
          Alias [95-97] [g1]
            Identifier(g1) [95-97] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS A)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Negated parenthesized simple label
select * from graph_table(my.graph.name
  MATCH (x IS (!(A)))
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-100] [select * from...m k`) ) g1]
  Query [0-100] [select * from...m k`) ) g1]
    Select [0-100] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-100] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-100] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-61] [MATCH (x IS (!(A)))]
            GraphPattern [48-61] [(x IS (!(A)))]
              GraphPathPattern [48-61] [(x IS (!(A)))]
                GraphNodePattern [48-61] [(x IS (!(A)))]
                  GraphElementPatternFiller [49-60] [x IS (!(A))]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-60] [IS (!(A))]
                      GraphLabelOperation(NOT) [55-59] [!(A)]
                        GraphElementLabel [57-58] [A]
                          Identifier(A) [57-58] [A]
          SelectList [72-94] [1 AS one, x.a AS `m k`]
            SelectColumn [72-80] [1 AS one]
              IntLiteral(1) [72-73] [1]
              Alias [74-80] [AS one]
                Identifier(one) [77-80] [one]
            SelectColumn [82-94] [x.a AS `m k`]
              PathExpression [82-85] [x.a]
                Identifier(x) [82-83] [x]
                Identifier(a) [84-85] [a]
              Alias [86-94] [AS `m k`]
                Identifier(`m k`) [89-94] [`m k`]
          Alias [98-100] [g1]
            Identifier(g1) [98-100] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS (! A))
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Wildcard
select * from graph_table(my.graph.name
  MATCH (x IS %)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-95] [select * from...m k`) ) g1]
  Query [0-95] [select * from...m k`) ) g1]
    Select [0-95] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-95] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-95] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-56] [MATCH (x IS %)]
            GraphPattern [48-56] [(x IS %)]
              GraphPathPattern [48-56] [(x IS %)]
                GraphNodePattern [48-56] [(x IS %)]
                  GraphElementPatternFiller [49-55] [x IS %]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-55] [IS %]
                      GraphWildcardLabel [54-55] [%]
          SelectList [67-89] [1 AS one, x.a AS `m k`]
            SelectColumn [67-75] [1 AS one]
              IntLiteral(1) [67-68] [1]
              Alias [69-75] [AS one]
                Identifier(one) [72-75] [one]
            SelectColumn [77-89] [x.a AS `m k`]
              PathExpression [77-80] [x.a]
                Identifier(x) [77-78] [x]
                Identifier(a) [79-80] [a]
              Alias [81-89] [AS `m k`]
                Identifier(`m k`) [84-89] [`m k`]
          Alias [93-95] [g1]
            Identifier(g1) [93-95] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS %)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Negated wildcard
select * from graph_table(my.graph.name
  MATCH (x IS !%)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-96] [select * from...m k`) ) g1]
  Query [0-96] [select * from...m k`) ) g1]
    Select [0-96] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-96] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-96] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-57] [MATCH (x IS !%)]
            GraphPattern [48-57] [(x IS !%)]
              GraphPathPattern [48-57] [(x IS !%)]
                GraphNodePattern [48-57] [(x IS !%)]
                  GraphElementPatternFiller [49-56] [x IS !%]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-56] [IS !%]
                      GraphLabelOperation(NOT) [54-56] [!%]
                        GraphWildcardLabel [55-56] [%]
          SelectList [68-90] [1 AS one, x.a AS `m k`]
            SelectColumn [68-76] [1 AS one]
              IntLiteral(1) [68-69] [1]
              Alias [70-76] [AS one]
                Identifier(one) [73-76] [one]
            SelectColumn [78-90] [x.a AS `m k`]
              PathExpression [78-81] [x.a]
                Identifier(x) [78-79] [x]
                Identifier(a) [80-81] [a]
              Alias [82-90] [AS `m k`]
                Identifier(`m k`) [85-90] [`m k`]
          Alias [94-96] [g1]
            Identifier(g1) [94-96] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS ! %)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Parenthesized wildcard
select * from graph_table(my.graph.name
  MATCH (x IS (%))
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-97] [select * from...m k`) ) g1]
  Query [0-97] [select * from...m k`) ) g1]
    Select [0-97] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-97] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-97] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-58] [MATCH (x IS (%))]
            GraphPattern [48-58] [(x IS (%))]
              GraphPathPattern [48-58] [(x IS (%))]
                GraphNodePattern [48-58] [(x IS (%))]
                  GraphElementPatternFiller [49-57] [x IS (%)]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-57] [IS (%)]
                      GraphWildcardLabel [55-56] [%]
          SelectList [69-91] [1 AS one, x.a AS `m k`]
            SelectColumn [69-77] [1 AS one]
              IntLiteral(1) [69-70] [1]
              Alias [71-77] [AS one]
                Identifier(one) [74-77] [one]
            SelectColumn [79-91] [x.a AS `m k`]
              PathExpression [79-82] [x.a]
                Identifier(x) [79-80] [x]
                Identifier(a) [81-82] [a]
              Alias [83-91] [AS `m k`]
                Identifier(`m k`) [86-91] [`m k`]
          Alias [95-97] [g1]
            Identifier(g1) [95-97] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS %)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Negated parenthesized wildcard
select * from graph_table(my.graph.name
  MATCH (x IS !(%))
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-98] [select * from...m k`) ) g1]
  Query [0-98] [select * from...m k`) ) g1]
    Select [0-98] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-98] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-98] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-59] [MATCH (x IS !(%))]
            GraphPattern [48-59] [(x IS !(%))]
              GraphPathPattern [48-59] [(x IS !(%))]
                GraphNodePattern [48-59] [(x IS !(%))]
                  GraphElementPatternFiller [49-58] [x IS !(%)]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-58] [IS !(%)]
                      GraphLabelOperation(NOT) [54-58] [!(%)]
                        GraphWildcardLabel [56-57] [%]
          SelectList [70-92] [1 AS one, x.a AS `m k`]
            SelectColumn [70-78] [1 AS one]
              IntLiteral(1) [70-71] [1]
              Alias [72-78] [AS one]
                Identifier(one) [75-78] [one]
            SelectColumn [80-92] [x.a AS `m k`]
              PathExpression [80-83] [x.a]
                Identifier(x) [80-81] [x]
                Identifier(a) [82-83] [a]
              Alias [84-92] [AS `m k`]
                Identifier(`m k`) [87-92] [`m k`]
          Alias [96-98] [g1]
            Identifier(g1) [96-98] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS ! %)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# AND expression, NOT takes precedence
select * from graph_table(my.graph.name
  MATCH (x IS !A & !b)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-101] [select * from...m k`) ) g1]
  Query [0-101] [select * from...m k`) ) g1]
    Select [0-101] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-101] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-101] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-62] [MATCH (x IS !A & !b)]
            GraphPattern [48-62] [(x IS !A & !b)]
              GraphPathPattern [48-62] [(x IS !A & !b)]
                GraphNodePattern [48-62] [(x IS !A & !b)]
                  GraphElementPatternFiller [49-61] [x IS !A & !b]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-61] [IS !A & !b]
                      GraphLabelOperation(AND) [54-61] [!A & !b]
                        GraphLabelOperation(NOT) [54-56] [!A]
                          GraphElementLabel [55-56] [A]
                            Identifier(A) [55-56] [A]
                        GraphLabelOperation(NOT) [59-61] [!b]
                          GraphElementLabel [60-61] [b]
                            Identifier(b) [60-61] [b]
          SelectList [73-95] [1 AS one, x.a AS `m k`]
            SelectColumn [73-81] [1 AS one]
              IntLiteral(1) [73-74] [1]
              Alias [75-81] [AS one]
                Identifier(one) [78-81] [one]
            SelectColumn [83-95] [x.a AS `m k`]
              PathExpression [83-86] [x.a]
                Identifier(x) [83-84] [x]
                Identifier(a) [85-86] [a]
              Alias [87-95] [AS `m k`]
                Identifier(`m k`) [90-95] [`m k`]
          Alias [99-101] [g1]
            Identifier(g1) [99-101] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS ! A & ! b)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# OR expression - NOT takes precedence
select * from graph_table(my.graph.name
  MATCH (x IS !A | !b)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-101] [select * from...m k`) ) g1]
  Query [0-101] [select * from...m k`) ) g1]
    Select [0-101] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-101] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-101] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-62] [MATCH (x IS !A | !b)]
            GraphPattern [48-62] [(x IS !A | !b)]
              GraphPathPattern [48-62] [(x IS !A | !b)]
                GraphNodePattern [48-62] [(x IS !A | !b)]
                  GraphElementPatternFiller [49-61] [x IS !A | !b]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-61] [IS !A | !b]
                      GraphLabelOperation(OR) [54-61] [!A | !b]
                        GraphLabelOperation(NOT) [54-56] [!A]
                          GraphElementLabel [55-56] [A]
                            Identifier(A) [55-56] [A]
                        GraphLabelOperation(NOT) [59-61] [!b]
                          GraphElementLabel [60-61] [b]
                            Identifier(b) [60-61] [b]
          SelectList [73-95] [1 AS one, x.a AS `m k`]
            SelectColumn [73-81] [1 AS one]
              IntLiteral(1) [73-74] [1]
              Alias [75-81] [AS one]
                Identifier(one) [78-81] [one]
            SelectColumn [83-95] [x.a AS `m k`]
              PathExpression [83-86] [x.a]
                Identifier(x) [83-84] [x]
                Identifier(a) [85-86] [a]
              Alias [87-95] [AS `m k`]
                Identifier(`m k`) [90-95] [`m k`]
          Alias [99-101] [g1]
            Identifier(g1) [99-101] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS ! A | ! b)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Precedence: AND > OR
select * from graph_table(my.graph.name
  MATCH (x IS A & B | C & D)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-107] [select * from...m k`) ) g1]
  Query [0-107] [select * from...m k`) ) g1]
    Select [0-107] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-107] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-107] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-68] [MATCH (x IS A & B | C & D)]
            GraphPattern [48-68] [(x IS A & B | C & D)]
              GraphPathPattern [48-68] [(x IS A & B | C & D)]
                GraphNodePattern [48-68] [(x IS A & B | C & D)]
                  GraphElementPatternFiller [49-67] [x IS A & B | C & D]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-67] [IS A & B | C & D]
                      GraphLabelOperation(OR) [54-67] [A & B | C & D]
                        GraphLabelOperation(AND) [54-59] [A & B]
                          GraphElementLabel [54-55] [A]
                            Identifier(A) [54-55] [A]
                          GraphElementLabel [58-59] [B]
                            Identifier(B) [58-59] [B]
                        GraphLabelOperation(AND) [62-67] [C & D]
                          GraphElementLabel [62-63] [C]
                            Identifier(C) [62-63] [C]
                          GraphElementLabel [66-67] [D]
                            Identifier(D) [66-67] [D]
          SelectList [79-101] [1 AS one, x.a AS `m k`]
            SelectColumn [79-87] [1 AS one]
              IntLiteral(1) [79-80] [1]
              Alias [81-87] [AS one]
                Identifier(one) [84-87] [one]
            SelectColumn [89-101] [x.a AS `m k`]
              PathExpression [89-92] [x.a]
                Identifier(x) [89-90] [x]
                Identifier(a) [91-92] [a]
              Alias [93-101] [AS `m k`]
                Identifier(`m k`) [96-101] [`m k`]
          Alias [105-107] [g1]
            Identifier(g1) [105-107] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS A & B | C & D)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Precedence: NOT > AND > OR
select * from graph_table(my.graph.name
  MATCH (x IS !A | !B & !% | D)
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-110] [select * from...m k`) ) g1]
  Query [0-110] [select * from...m k`) ) g1]
    Select [0-110] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-110] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-110] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-71] [MATCH (x IS !A | !B & !% | D)]
            GraphPattern [48-71] [(x IS !A | !B & !% | D)]
              GraphPathPattern [48-71] [(x IS !A | !B & !% | D)]
                GraphNodePattern [48-71] [(x IS !A | !B & !% | D)]
                  GraphElementPatternFiller [49-70] [x IS !A | !B & !% | D]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-70] [IS !A | !B & !% | D]
                      GraphLabelOperation(OR) [54-70] [!A | !B & !% | D]
                        GraphLabelOperation(NOT) [54-56] [!A]
                          GraphElementLabel [55-56] [A]
                            Identifier(A) [55-56] [A]
                        GraphLabelOperation(AND) [59-66] [!B & !%]
                          GraphLabelOperation(NOT) [59-61] [!B]
                            GraphElementLabel [60-61] [B]
                              Identifier(B) [60-61] [B]
                          GraphLabelOperation(NOT) [64-66] [!%]
                            GraphWildcardLabel [65-66] [%]
                        GraphElementLabel [69-70] [D]
                          Identifier(D) [69-70] [D]
          SelectList [82-104] [1 AS one, x.a AS `m k`]
            SelectColumn [82-90] [1 AS one]
              IntLiteral(1) [82-83] [1]
              Alias [84-90] [AS one]
                Identifier(one) [87-90] [one]
            SelectColumn [92-104] [x.a AS `m k`]
              PathExpression [92-95] [x.a]
                Identifier(x) [92-93] [x]
                Identifier(a) [94-95] [a]
              Alias [96-104] [AS `m k`]
                Identifier(`m k`) [99-104] [`m k`]
          Alias [108-110] [g1]
            Identifier(g1) [108-110] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS ! A | ! B & ! % | D)
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
==

# Parens have highest precedence above all
select * from graph_table(my.graph.name
  MATCH (x IS !(A | B) & (C | !%))
  COLUMNS(1 AS one, x.a AS `m k`)
) g1
--
QueryStatement [0-113] [select * from...m k`) ) g1]
  Query [0-113] [select * from...m k`) ) g1]
    Select [0-113] [select * from...m k`) ) g1]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-113] [from graph_table...m k`) ) g1]
        GraphTableQuery [14-113] [graph_table...m k`) ) g1]
          PathExpression [26-39] [my.graph.name]
            Identifier(my) [26-28] [my]
            Identifier(graph) [29-34] [graph]
            Identifier(name) [35-39] [name]
          GqlMatch [42-74] [MATCH (x IS...(C | !%))]
            GraphPattern [48-74] [(x IS !(A | B) & (C | !%))]
              GraphPathPattern [48-74] [(x IS !(A | B) & (C | !%))]
                GraphNodePattern [48-74] [(x IS !(A | B) & (C | !%))]
                  GraphElementPatternFiller [49-73] [x IS !(A | B) & (C | !%)]
                    Identifier(x) [49-50] [x]
                    GraphLabelFilter [51-73] [IS !(A | B) & (C | !%)]
                      GraphLabelOperation(AND) [54-73] [!(A | B) & (C | !%)]
                        GraphLabelOperation(NOT) [54-62] [!(A | B)]
                          GraphLabelOperation(OR) [56-61] [A | B]
                            GraphElementLabel [56-57] [A]
                              Identifier(A) [56-57] [A]
                            GraphElementLabel [60-61] [B]
                              Identifier(B) [60-61] [B]
                        GraphLabelOperation(OR) [66-72] [C | !%]
                          GraphElementLabel [66-67] [C]
                            Identifier(C) [66-67] [C]
                          GraphLabelOperation(NOT) [70-72] [!%]
                            GraphWildcardLabel [71-72] [%]
          SelectList [85-107] [1 AS one, x.a AS `m k`]
            SelectColumn [85-93] [1 AS one]
              IntLiteral(1) [85-86] [1]
              Alias [87-93] [AS one]
                Identifier(one) [90-93] [one]
            SelectColumn [95-107] [x.a AS `m k`]
              PathExpression [95-98] [x.a]
                Identifier(x) [95-96] [x]
                Identifier(a) [97-98] [a]
              Alias [99-107] [AS `m k`]
                Identifier(`m k`) [102-107] [`m k`]
          Alias [111-113] [g1]
            Identifier(g1) [111-113] [g1]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    my.graph.name
    MATCH
      (x
      IS !(A | B) &(C | ! %))
    COLUMNS(
      1 AS one,
      x.a AS `m k`
    )
  ) AS g1
