[default language_features=NONE,+BRACED_PROTO_CONSTRUCTORS,+STRUCT_BRACED_CONSTRUCTORS]

# No field constructor, plain STRUCT.
SELECT STRUCT {}
--
QueryStatement [38-54] [SELECT STRUCT {}]
  Query [38-54] [SELECT STRUCT {}]
    Select [38-54] [SELECT STRUCT {}]
      SelectList [45-54] [STRUCT {}]
        SelectColumn [45-54] [STRUCT {}]
          StructBracedConstructor [45-54] [STRUCT {}]
            BracedConstructor [52-54] [{}]
--
SELECT
  STRUCT { }
==

# Simple constructor with comma.
SELECT STRUCT { foo: "blah", bar: 3 }
--
QueryStatement [0-37] [SELECT STRUCT..., bar: 3 }]
  Query [0-37] [SELECT STRUCT..., bar: 3 }]
    Select [0-37] [SELECT STRUCT..., bar: 3 }]
      SelectList [7-37] [STRUCT { foo: "blah", bar: 3 }]
        SelectColumn [7-37] [STRUCT { foo: "blah", bar: 3 }]
          StructBracedConstructor [7-37] [STRUCT { foo: "blah", bar: 3 }]
            BracedConstructor [14-37] [{ foo: "blah", bar: 3 }]
              BracedConstructorField [16-27] [foo: "blah"]
                BracedConstructorLhs [16-19] [foo]
                  PathExpression [16-19] [foo]
                    Identifier(foo) [16-19] [foo]
                BracedConstructorFieldValue [19-27] [: "blah"]
                  StringLiteral [21-27] ["blah"]
                    StringLiteralComponent("blah") [21-27] ["blah"]
              BracedConstructorField [29-35] [bar: 3]
                BracedConstructorLhs [29-32] [bar]
                  PathExpression [29-32] [bar]
                    Identifier(bar) [29-32] [bar]
                BracedConstructorFieldValue [32-35] [: 3]
                  IntLiteral(3) [34-35] [3]
--
SELECT
  STRUCT {
    foo : "blah",
    bar : 3
  }
==

# Leading comma is syntax error
SELECT STRUCT { , foo: "blah", bar: 3 }
--
ERROR: Syntax error: Unexpected "," [at 1:17]
SELECT STRUCT { , foo: "blah", bar: 3 }
                ^
==

# Trailing comma is fine
SELECT STRUCT {foo: "blah", bar: 3, }
--
QueryStatement [0-37] [SELECT STRUCT...bar: 3, }]
  Query [0-37] [SELECT STRUCT...bar: 3, }]
    Select [0-37] [SELECT STRUCT...bar: 3, }]
      SelectList [7-37] [STRUCT {foo: "blah", bar: 3, }]
        SelectColumn [7-37] [STRUCT {foo: "blah", bar: 3, }]
          StructBracedConstructor [7-37] [STRUCT {foo: "blah", bar: 3, }]
            BracedConstructor [14-37] [{foo: "blah", bar: 3, }]
              BracedConstructorField [15-26] [foo: "blah"]
                BracedConstructorLhs [15-18] [foo]
                  PathExpression [15-18] [foo]
                    Identifier(foo) [15-18] [foo]
                BracedConstructorFieldValue [18-26] [: "blah"]
                  StringLiteral [20-26] ["blah"]
                    StringLiteralComponent("blah") [20-26] ["blah"]
              BracedConstructorField [28-34] [bar: 3]
                BracedConstructorLhs [28-31] [bar]
                  PathExpression [28-31] [bar]
                    Identifier(bar) [28-31] [bar]
                BracedConstructorFieldValue [31-34] [: 3]
                  IntLiteral(3) [33-34] [3]
--
SELECT
  STRUCT {
    foo : "blah",
    bar : 3
  }
==

# Error syntax to use whitespace instead of comma to separate fields.
# Report error at the analyzer stage.
SELECT STRUCT {a:1 b:2}
--
QueryStatement [0-23] [SELECT STRUCT {a:1 b:2}]
  Query [0-23] [SELECT STRUCT {a:1 b:2}]
    Select [0-23] [SELECT STRUCT {a:1 b:2}]
      SelectList [7-23] [STRUCT {a:1 b:2}]
        SelectColumn [7-23] [STRUCT {a:1 b:2}]
          StructBracedConstructor [7-23] [STRUCT {a:1 b:2}]
            BracedConstructor [14-23] [{a:1 b:2}]
              BracedConstructorField [15-18] [a:1]
                BracedConstructorLhs [15-16] [a]
                  PathExpression [15-16] [a]
                    Identifier(a) [15-16] [a]
                BracedConstructorFieldValue [16-18] [:1]
                  IntLiteral(1) [17-18] [1]
              BracedConstructorField [19-22] [b:2]
                BracedConstructorLhs [19-20] [b]
                  PathExpression [19-20] [b]
                    Identifier(b) [19-20] [b]
                BracedConstructorFieldValue [20-22] [:2]
                  IntLiteral(2) [21-22] [2]
--
SELECT
  STRUCT {
    a : 1
    b : 2
  }
==

# Error syntax to use both whitespace and comma separate fields.
# Report error at the analyzer stage.
SELECT STRUCT {a:1 b:2, c:3}
--
QueryStatement [0-28] [SELECT STRUCT {a:1 b:2, c:3}]
  Query [0-28] [SELECT STRUCT {a:1 b:2, c:3}]
    Select [0-28] [SELECT STRUCT {a:1 b:2, c:3}]
      SelectList [7-28] [STRUCT {a:1 b:2, c:3}]
        SelectColumn [7-28] [STRUCT {a:1 b:2, c:3}]
          StructBracedConstructor [7-28] [STRUCT {a:1 b:2, c:3}]
            BracedConstructor [14-28] [{a:1 b:2, c:3}]
              BracedConstructorField [15-18] [a:1]
                BracedConstructorLhs [15-16] [a]
                  PathExpression [15-16] [a]
                    Identifier(a) [15-16] [a]
                BracedConstructorFieldValue [16-18] [:1]
                  IntLiteral(1) [17-18] [1]
              BracedConstructorField [19-22] [b:2]
                BracedConstructorLhs [19-20] [b]
                  PathExpression [19-20] [b]
                    Identifier(b) [19-20] [b]
                BracedConstructorFieldValue [20-22] [:2]
                  IntLiteral(2) [21-22] [2]
              BracedConstructorField [24-27] [c:3]
                BracedConstructorLhs [24-25] [c]
                  PathExpression [24-25] [c]
                    Identifier(c) [24-25] [c]
                BracedConstructorFieldValue [25-27] [:3]
                  IntLiteral(3) [26-27] [3]
--
SELECT
  STRUCT {
    a : 1
    b : 2,
    c : 3
  }
==

# Error syntax to use whitespace instead of colon to separate field and value for submessage.
# Report error at the analyzer stage.
SELECT STRUCT {
   a {
    b: 1 
  }
}
--
QueryStatement [0-38] [SELECT STRUCT...: 1    } }]
  Query [0-38] [SELECT STRUCT...: 1    } }]
    Select [0-38] [SELECT STRUCT...: 1    } }]
      SelectList [7-38] [STRUCT {...: 1    } }]
        SelectColumn [7-38] [STRUCT {...: 1    } }]
          StructBracedConstructor [7-38] [STRUCT {...: 1    } }]
            BracedConstructor [14-38] [{    a {     b: 1    } }]
              BracedConstructorField [19-36] [a {     b: 1    }]
                BracedConstructorLhs [19-20] [a]
                  PathExpression [19-20] [a]
                    Identifier(a) [19-20] [a]
                BracedConstructorFieldValue [21-36] [{     b: 1    }]
                  BracedConstructor [21-36] [{     b: 1    }]
                    BracedConstructorField [27-31] [b: 1]
                      BracedConstructorLhs [27-28] [b]
                        PathExpression [27-28] [b]
                          Identifier(b) [27-28] [b]
                      BracedConstructorFieldValue [28-31] [: 1]
                        IntLiteral(1) [30-31] [1]
--
SELECT
  STRUCT {
    a  {
      b : 1
    }
  }
==

# Error syntax to use both whitespace and colon to separate field and value for submessage.
# Report error at the analyzer stage.
SELECT STRUCT {
   a {
    b: 1 
  },
  c: {
   d: 1 
  }
}
--
QueryStatement [0-59] [SELECT STRUCT...: 1    } }]
  Query [0-59] [SELECT STRUCT...: 1    } }]
    Select [0-59] [SELECT STRUCT...: 1    } }]
      SelectList [7-59] [STRUCT {...: 1    } }]
        SelectColumn [7-59] [STRUCT {...: 1    } }]
          StructBracedConstructor [7-59] [STRUCT {...: 1    } }]
            BracedConstructor [14-59] [{    a {...: 1    } }]
              BracedConstructorField [19-36] [a {     b: 1    }]
                BracedConstructorLhs [19-20] [a]
                  PathExpression [19-20] [a]
                    Identifier(a) [19-20] [a]
                BracedConstructorFieldValue [21-36] [{     b: 1    }]
                  BracedConstructor [21-36] [{     b: 1    }]
                    BracedConstructorField [27-31] [b: 1]
                      BracedConstructorLhs [27-28] [b]
                        PathExpression [27-28] [b]
                          Identifier(b) [27-28] [b]
                      BracedConstructorFieldValue [28-31] [: 1]
                        IntLiteral(1) [30-31] [1]
              BracedConstructorField [40-57] [c: {    d: 1    }]
                BracedConstructorLhs [40-41] [c]
                  PathExpression [40-41] [c]
                    Identifier(c) [40-41] [c]
                BracedConstructorFieldValue [41-57] [: {    d: 1    }]
                  BracedConstructor [43-57] [{    d: 1    }]
                    BracedConstructorField [48-52] [d: 1]
                      BracedConstructorLhs [48-49] [d]
                        PathExpression [48-49] [d]
                          Identifier(d) [48-49] [d]
                      BracedConstructorFieldValue [49-52] [: 1]
                        IntLiteral(1) [51-52] [1]
--
SELECT
  STRUCT {
    a  {
      b : 1
    },
    c : {
      d : 1
    }
  }
==

# Nested message (with colon) and array field.
SELECT STRUCT {
  foo: {
    monkey: "blah"
  }
  bar: 3
  int_array: [1,2,3]
}
--
QueryStatement [0-79] [SELECT STRUCT...[1,2,3] }]
  Query [0-79] [SELECT STRUCT...[1,2,3] }]
    Select [0-79] [SELECT STRUCT...[1,2,3] }]
      SelectList [7-79] [STRUCT {...[1,2,3] }]
        SelectColumn [7-79] [STRUCT {...[1,2,3] }]
          StructBracedConstructor [7-79] [STRUCT {...[1,2,3] }]
            BracedConstructor [14-79] [{   foo: {...[1,2,3] }]
              BracedConstructorField [18-47] [foo: {     monkey: "blah"   }]
                BracedConstructorLhs [18-21] [foo]
                  PathExpression [18-21] [foo]
                    Identifier(foo) [18-21] [foo]
                BracedConstructorFieldValue [21-47] [: {     monkey: "blah"   }]
                  BracedConstructor [23-47] [{     monkey: "blah"   }]
                    BracedConstructorField [29-43] [monkey: "blah"]
                      BracedConstructorLhs [29-35] [monkey]
                        PathExpression [29-35] [monkey]
                          Identifier(monkey) [29-35] [monkey]
                      BracedConstructorFieldValue [35-43] [: "blah"]
                        StringLiteral [37-43] ["blah"]
                          StringLiteralComponent("blah") [37-43] ["blah"]
              BracedConstructorField [50-56] [bar: 3]
                BracedConstructorLhs [50-53] [bar]
                  PathExpression [50-53] [bar]
                    Identifier(bar) [50-53] [bar]
                BracedConstructorFieldValue [53-56] [: 3]
                  IntLiteral(3) [55-56] [3]
              BracedConstructorField [59-77] [int_array: [1,2,3]]
                BracedConstructorLhs [59-68] [int_array]
                  PathExpression [59-68] [int_array]
                    Identifier(int_array) [59-68] [int_array]
                BracedConstructorFieldValue [68-77] [: [1,2,3]]
                  ArrayConstructor [70-77] [[1,2,3]]
                    IntLiteral(1) [71-72] [1]
                    IntLiteral(2) [73-74] [2]
                    IntLiteral(3) [75-76] [3]
--
SELECT
  STRUCT {
    foo : {
      monkey : "blah"
    }
    bar : 3
    int_array : ARRAY[1, 2, 3]
  }
==

# Sub-message array.
SELECT STRUCT {
  int_field: 1
  submessage_array: [{
    monkey: "blah"
  }, {
    baz: "abc"
  }]
}
--
QueryStatement [0-101] [SELECT STRUCT...abc"   }] }]
  Query [0-101] [SELECT STRUCT...abc"   }] }]
    Select [0-101] [SELECT STRUCT...abc"   }] }]
      SelectList [7-101] [STRUCT {...abc"   }] }]
        SelectColumn [7-101] [STRUCT {...abc"   }] }]
          StructBracedConstructor [7-101] [STRUCT {...abc"   }] }]
            BracedConstructor [14-101] [{   int_field...abc"   }] }]
              BracedConstructorField [18-30] [int_field: 1]
                BracedConstructorLhs [18-27] [int_field]
                  PathExpression [18-27] [int_field]
                    Identifier(int_field) [18-27] [int_field]
                BracedConstructorFieldValue [27-30] [: 1]
                  IntLiteral(1) [29-30] [1]
              BracedConstructorField [33-99] [submessage_array..."abc"   }]]
                BracedConstructorLhs [33-49] [submessage_array]
                  PathExpression [33-49] [submessage_array]
                    Identifier(submessage_array) [33-49] [submessage_array]
                BracedConstructorFieldValue [49-99] [: [{     monkey..."abc"   }]]
                  ArrayConstructor [51-99] [[{     monkey..."abc"   }]]
                    BracedConstructor [52-76] [{     monkey: "blah"   }]
                      BracedConstructorField [58-72] [monkey: "blah"]
                        BracedConstructorLhs [58-64] [monkey]
                          PathExpression [58-64] [monkey]
                            Identifier(monkey) [58-64] [monkey]
                        BracedConstructorFieldValue [64-72] [: "blah"]
                          StringLiteral [66-72] ["blah"]
                            StringLiteralComponent("blah") [66-72] ["blah"]
                    BracedConstructor [78-98] [{     baz: "abc"   }]
                      BracedConstructorField [84-94] [baz: "abc"]
                        BracedConstructorLhs [84-87] [baz]
                          PathExpression [84-87] [baz]
                            Identifier(baz) [84-87] [baz]
                        BracedConstructorFieldValue [87-94] [: "abc"]
                          StringLiteral [89-94] ["abc"]
                            StringLiteralComponent("abc") [89-94] ["abc"]
--
SELECT
  STRUCT {
    int_field : 1
    submessage_array : ARRAY[{
      monkey : "blah"
    }, {
      baz : "abc"
    }]
  }
==

# At parse-time map fields are just like repeated sub-message fields.
SELECT STRUCT {
  int_field: 1
  map_field: [{
    key: "blah"
    value: 1
  }, {
    key: "abc"
    value: 2
  }]
}
--
QueryStatement [0-117] [SELECT STRUCT...: 2   }] }]
  Query [0-117] [SELECT STRUCT...: 2   }] }]
    Select [0-117] [SELECT STRUCT...: 2   }] }]
      SelectList [7-117] [STRUCT {...: 2   }] }]
        SelectColumn [7-117] [STRUCT {...: 2   }] }]
          StructBracedConstructor [7-117] [STRUCT {...: 2   }] }]
            BracedConstructor [14-117] [{   int_field...: 2   }] }]
              BracedConstructorField [18-30] [int_field: 1]
                BracedConstructorLhs [18-27] [int_field]
                  PathExpression [18-27] [int_field]
                    Identifier(int_field) [18-27] [int_field]
                BracedConstructorFieldValue [27-30] [: 1]
                  IntLiteral(1) [29-30] [1]
              BracedConstructorField [33-115] [map_field:...value: 2   }]]
                BracedConstructorLhs [33-42] [map_field]
                  PathExpression [33-42] [map_field]
                    Identifier(map_field) [33-42] [map_field]
                BracedConstructorFieldValue [42-115] [: [{     key...value: 2   }]]
                  ArrayConstructor [44-115] [[{     key...value: 2   }]]
                    BracedConstructor [45-79] [{     key:...value: 1   }]
                      BracedConstructorField [51-62] [key: "blah"]
                        BracedConstructorLhs [51-54] [key]
                          PathExpression [51-54] [key]
                            Identifier(key) [51-54] [key]
                        BracedConstructorFieldValue [54-62] [: "blah"]
                          StringLiteral [56-62] ["blah"]
                            StringLiteralComponent("blah") [56-62] ["blah"]
                      BracedConstructorField [67-75] [value: 1]
                        BracedConstructorLhs [67-72] [value]
                          PathExpression [67-72] [value]
                            Identifier(value) [67-72] [value]
                        BracedConstructorFieldValue [72-75] [: 1]
                          IntLiteral(1) [74-75] [1]
                    BracedConstructor [81-114] [{     key:...value: 2   }]
                      BracedConstructorField [87-97] [key: "abc"]
                        BracedConstructorLhs [87-90] [key]
                          PathExpression [87-90] [key]
                            Identifier(key) [87-90] [key]
                        BracedConstructorFieldValue [90-97] [: "abc"]
                          StringLiteral [92-97] ["abc"]
                            StringLiteralComponent("abc") [92-97] ["abc"]
                      BracedConstructorField [102-110] [value: 2]
                        BracedConstructorLhs [102-107] [value]
                          PathExpression [102-107] [value]
                            Identifier(value) [102-107] [value]
                        BracedConstructorFieldValue [107-110] [: 2]
                          IntLiteral(2) [109-110] [2]
--
SELECT
  STRUCT {
    int_field : 1
    map_field : ARRAY[{
      key : "blah"
      value : 1
    }, {
      key : "abc"
      value : 2
    }]
  }
==

# Nested STRUCT constructor
SELECT STRUCT {
  foo: STRUCT {
    monkey: "blah"
  }
  bar: 3
}
--
QueryStatement [0-65] [SELECT STRUCT...bar: 3 }]
  Query [0-65] [SELECT STRUCT...bar: 3 }]
    Select [0-65] [SELECT STRUCT...bar: 3 }]
      SelectList [7-65] [STRUCT {...bar: 3 }]
        SelectColumn [7-65] [STRUCT {...bar: 3 }]
          StructBracedConstructor [7-65] [STRUCT {...bar: 3 }]
            BracedConstructor [14-65] [{   foo: STRUCT...bar: 3 }]
              BracedConstructorField [18-54] [foo: STRUCT..."blah"   }]
                BracedConstructorLhs [18-21] [foo]
                  PathExpression [18-21] [foo]
                    Identifier(foo) [18-21] [foo]
                BracedConstructorFieldValue [21-54] [: STRUCT {..."blah"   }]
                  StructBracedConstructor [23-54] [STRUCT {..."blah"   }]
                    BracedConstructor [30-54] [{     monkey: "blah"   }]
                      BracedConstructorField [36-50] [monkey: "blah"]
                        BracedConstructorLhs [36-42] [monkey]
                          PathExpression [36-42] [monkey]
                            Identifier(monkey) [36-42] [monkey]
                        BracedConstructorFieldValue [42-50] [: "blah"]
                          StringLiteral [44-50] ["blah"]
                            StringLiteralComponent("blah") [44-50] ["blah"]
              BracedConstructorField [57-63] [bar: 3]
                BracedConstructorLhs [57-60] [bar]
                  PathExpression [57-60] [bar]
                    Identifier(bar) [57-60] [bar]
                BracedConstructorFieldValue [60-63] [: 3]
                  IntLiteral(3) [62-63] [3]
--
SELECT
  STRUCT {
    foo : STRUCT {
      monkey : "blah"
    }
    bar : 3
  }
==

SELECT STRUCT {
  foo: (SELECT t.* FROM t WHERE t.a = 1)
}
--
QueryStatement [0-58] [SELECT STRUCT...t.a = 1) }]
  Query [0-58] [SELECT STRUCT...t.a = 1) }]
    Select [0-58] [SELECT STRUCT...t.a = 1) }]
      SelectList [7-58] [STRUCT {...t.a = 1) }]
        SelectColumn [7-58] [STRUCT {...t.a = 1) }]
          StructBracedConstructor [7-58] [STRUCT {...t.a = 1) }]
            BracedConstructor [14-58] [{   foo: (...t.a = 1) }]
              BracedConstructorField [18-56] [foo: (SELECT...WHERE t.a = 1)]
                BracedConstructorLhs [18-21] [foo]
                  PathExpression [18-21] [foo]
                    Identifier(foo) [18-21] [foo]
                BracedConstructorFieldValue [21-56] [: (SELECT...WHERE t.a = 1)]
                  ExpressionSubquery [23-56] [(SELECT t....WHERE t.a = 1)]
                    Query [24-55] [SELECT t.*...WHERE t.a = 1]
                      Select [24-55] [SELECT t.*...WHERE t.a = 1]
                        SelectList [31-34] [t.*]
                          SelectColumn [31-34] [t.*]
                            DotStar [31-34] [t.*]
                              PathExpression [31-32] [t]
                                Identifier(t) [31-32] [t]
                        FromClause [35-41] [FROM t]
                          TablePathExpression [40-41] [t]
                            PathExpression [40-41] [t]
                              Identifier(t) [40-41] [t]
                        WhereClause [42-55] [WHERE t.a = 1]
                          BinaryExpression(=) [48-55] [t.a = 1]
                            PathExpression [48-51] [t.a]
                              Identifier(t) [48-49] [t]
                              Identifier(a) [50-51] [a]
                            IntLiteral(1) [54-55] [1]
--
SELECT
  STRUCT {
    foo : (
      SELECT
        t.*
      FROM
        t
      WHERE
        t.a = 1
    )
  }
==

SELECT STRUCT {
  foo: 3 + 5
}
--
QueryStatement [0-30] [SELECT STRUCT {   foo: 3 + 5 }]
  Query [0-30] [SELECT STRUCT {   foo: 3 + 5 }]
    Select [0-30] [SELECT STRUCT {   foo: 3 + 5 }]
      SelectList [7-30] [STRUCT {   foo: 3 + 5 }]
        SelectColumn [7-30] [STRUCT {   foo: 3 + 5 }]
          StructBracedConstructor [7-30] [STRUCT {   foo: 3 + 5 }]
            BracedConstructor [14-30] [{   foo: 3 + 5 }]
              BracedConstructorField [18-28] [foo: 3 + 5]
                BracedConstructorLhs [18-21] [foo]
                  PathExpression [18-21] [foo]
                    Identifier(foo) [18-21] [foo]
                BracedConstructorFieldValue [21-28] [: 3 + 5]
                  BinaryExpression(+) [23-28] [3 + 5]
                    IntLiteral(3) [23-24] [3]
                    IntLiteral(5) [27-28] [5]
--
SELECT
  STRUCT {
    foo : 3 + 5
  }
==

# Error syntax to use extension.
# Errors will be reported at the resolver stage.
SELECT STRUCT {
  (path.to.extension) {
    value: 1
  }
}
--
QueryStatement [0-58] [SELECT STRUCT...value: 1   } }]
  Query [0-58] [SELECT STRUCT...value: 1   } }]
    Select [0-58] [SELECT STRUCT...value: 1   } }]
      SelectList [7-58] [STRUCT {...value: 1   } }]
        SelectColumn [7-58] [STRUCT {...value: 1   } }]
          StructBracedConstructor [7-58] [STRUCT {...value: 1   } }]
            BracedConstructor [14-58] [{   (path....value: 1   } }]
              BracedConstructorField [18-56] [(path.to.extensio...lue: 1   }]
                BracedConstructorLhs [18-37] [(path.to.extension)]
                  PathExpression [19-36] [path.to.extension]
                    Identifier(path) [19-23] [path]
                    Identifier(`to`) [24-26] [to]
                    Identifier(extension) [27-36] [extension]
                BracedConstructorFieldValue [38-56] [{     value: 1   }]
                  BracedConstructor [38-56] [{     value: 1   }]
                    BracedConstructorField [44-52] [value: 1]
                      BracedConstructorLhs [44-49] [value]
                        PathExpression [44-49] [value]
                          Identifier(value) [44-49] [value]
                      BracedConstructorFieldValue [49-52] [: 1]
                        IntLiteral(1) [51-52] [1]
--
SELECT
  STRUCT {
    (path.`to`.extension)  {
      value : 1
    }
  }
==

# Function expression.
SELECT STRUCT {
  foo: CONCAT("foo", "bar"),
}
--
QueryStatement [0-46] [SELECT STRUCT..."bar"), }]
  Query [0-46] [SELECT STRUCT..."bar"), }]
    Select [0-46] [SELECT STRUCT..."bar"), }]
      SelectList [7-46] [STRUCT {..."bar"), }]
        SelectColumn [7-46] [STRUCT {..."bar"), }]
          StructBracedConstructor [7-46] [STRUCT {..."bar"), }]
            BracedConstructor [14-46] [{   foo: CONCAT..."bar"), }]
              BracedConstructorField [18-43] [foo: CONCAT("foo", "bar")]
                BracedConstructorLhs [18-21] [foo]
                  PathExpression [18-21] [foo]
                    Identifier(foo) [18-21] [foo]
                BracedConstructorFieldValue [21-43] [: CONCAT("foo", "bar")]
                  FunctionCall [23-43] [CONCAT("foo", "bar")]
                    PathExpression [23-29] [CONCAT]
                      Identifier(CONCAT) [23-29] [CONCAT]
                    StringLiteral [30-35] ["foo"]
                      StringLiteralComponent("foo") [30-35] ["foo"]
                    StringLiteral [37-42] ["bar"]
                      StringLiteralComponent("bar") [37-42] ["bar"]
--
SELECT
  STRUCT {
    foo : CONCAT("foo", "bar")
  }
==

# Aggregation expression.
SELECT STRUCT {
  foo: (SELECT count(*) FROM table_foo)
}
--
QueryStatement [0-57] [SELECT STRUCT...table_foo) }]
  Query [0-57] [SELECT STRUCT...table_foo) }]
    Select [0-57] [SELECT STRUCT...table_foo) }]
      SelectList [7-57] [STRUCT {...table_foo) }]
        SelectColumn [7-57] [STRUCT {...table_foo) }]
          StructBracedConstructor [7-57] [STRUCT {...table_foo) }]
            BracedConstructor [14-57] [{   foo: (...table_foo) }]
              BracedConstructorField [18-55] [foo: (SELECT...table_foo)]
                BracedConstructorLhs [18-21] [foo]
                  PathExpression [18-21] [foo]
                    Identifier(foo) [18-21] [foo]
                BracedConstructorFieldValue [21-55] [: (SELECT...table_foo)]
                  ExpressionSubquery [23-55] [(SELECT count...table_foo)]
                    Query [24-54] [SELECT count(*) FROM table_foo]
                      Select [24-54] [SELECT count(*) FROM table_foo]
                        SelectList [31-39] [count(*)]
                          SelectColumn [31-39] [count(*)]
                            FunctionCall [31-39] [count(*)]
                              PathExpression [31-36] [count]
                                Identifier(count) [31-36] [count]
                              Star(*) [37-38] [*]
                        FromClause [40-54] [FROM table_foo]
                          TablePathExpression [45-54] [table_foo]
                            PathExpression [45-54] [table_foo]
                              Identifier(table_foo) [45-54] [table_foo]
--
SELECT
  STRUCT {
    foo : (
      SELECT
        count(*)
      FROM
        table_foo
    )
  }
==

# No trailing "}".
SELECT STRUCT {foobar: 5
--
ERROR: Syntax error: Unexpected end of statement [at 1:25]
SELECT STRUCT {foobar: 5
                        ^
==

# ARRAY keyword not allowed.
SELECT STRUCT ARRAY<int32>{}
--
ERROR: Syntax error: Expected "<" but got keyword ARRAY [at 1:15]
SELECT STRUCT ARRAY<int32>{}
              ^
==

# NEW keyword not allowed.
SELECT NEW STRUCT {foo:1}
--
ERROR: Syntax error: Unexpected keyword STRUCT [at 1:12]
SELECT NEW STRUCT {foo:1}
           ^
==

# No field name.
SELECT STRUCT {1}
--
ERROR: Syntax error: Unexpected integer literal "1" [at 1:16]
SELECT STRUCT {1}
               ^
==

# No field value.
SELECT STRUCT {foobar}
--
ERROR: Syntax error: Expected ":" or "{" but got "}" [at 1:22]
SELECT STRUCT {foobar}
                     ^
==

# b/262795394 - Value starting with label token keyword 'FOR' parses correctly.
SELECT STRUCT { field: FORK() }
--
QueryStatement [0-31] [SELECT STRUCT...: FORK() }]
  Query [0-31] [SELECT STRUCT...: FORK() }]
    Select [0-31] [SELECT STRUCT...: FORK() }]
      SelectList [7-31] [STRUCT { field: FORK() }]
        SelectColumn [7-31] [STRUCT { field: FORK() }]
          StructBracedConstructor [7-31] [STRUCT { field: FORK() }]
            BracedConstructor [14-31] [{ field: FORK() }]
              BracedConstructorField [16-29] [field: FORK()]
                BracedConstructorLhs [16-21] [field]
                  PathExpression [16-21] [field]
                    Identifier(field) [16-21] [field]
                BracedConstructorFieldValue [21-29] [: FORK()]
                  FunctionCall [23-29] [FORK()]
                    PathExpression [23-27] [FORK]
                      Identifier(FORK) [23-27] [FORK]
--
SELECT
  STRUCT {
    field : FORK()
  }
==

# Explicit type
SELECT STRUCT<a INT64> {a: 1}
--
QueryStatement [0-29] [SELECT STRUCT<a INT64> {a: 1}]
  Query [0-29] [SELECT STRUCT<a INT64> {a: 1}]
    Select [0-29] [SELECT STRUCT<a INT64> {a: 1}]
      SelectList [7-29] [STRUCT<a INT64> {a: 1}]
        SelectColumn [7-29] [STRUCT<a INT64> {a: 1}]
          StructBracedConstructor [7-29] [STRUCT<a INT64> {a: 1}]
            StructType [7-22] [STRUCT<a INT64>]
              StructField [14-21] [a INT64]
                Identifier(a) [14-15] [a]
                SimpleType [16-21] [INT64]
                  PathExpression [16-21] [INT64]
                    Identifier(INT64) [16-21] [INT64]
            BracedConstructor [23-29] [{a: 1}]
              BracedConstructorField [24-28] [a: 1]
                BracedConstructorLhs [24-25] [a]
                  PathExpression [24-25] [a]
                    Identifier(a) [24-25] [a]
                BracedConstructorFieldValue [25-28] [: 1]
                  IntLiteral(1) [27-28] [1]
--
SELECT
  STRUCT< a INT64 > {
    a : 1
  }
