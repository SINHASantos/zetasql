[default reserve_graph_table]
[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+BRACED_PROTO_CONSTRUCTORS]

# GQL property specification: single property specifications.
select * from graph_table(aml
  MATCH (a IS Person { id: 10 })
  RETURN a.name
)
--
QueryStatement [62-142] [select * from...ETURN a.name )]
  Query [62-142] [select * from...ETURN a.name )]
    Select [62-142] [select * from...ETURN a.name )]
      SelectList [69-70] [*]
        SelectColumn [69-70] [*]
          Star(*) [69-70] [*]
      FromClause [71-142] [from graph_table...RN a.name )]
        GraphTableQuery [76-142] [graph_table...RETURN a.name )]
          PathExpression [88-91] [aml]
            Identifier(aml) [88-91] [aml]
          GqlOperatorList [94-140] [MATCH (a IS...RETURN a.name]
            GqlOperatorList [94-140] [MATCH (a IS...RETURN a.name]
              GqlMatch [94-124] [MATCH (a IS Person { id: 10 })]
                GraphPattern [100-124] [(a IS Person { id: 10 })]
                  GraphPathPattern [100-124] [(a IS Person { id: 10 })]
                    GraphNodePattern [100-124] [(a IS Person { id: 10 })]
                      GraphElementPatternFiller [101-123] [a IS Person { id: 10 }]
                        Identifier(a) [101-102] [a]
                        GraphLabelFilter [103-112] [IS Person]
                          GraphElementLabel [106-112] [Person]
                            Identifier(Person) [106-112] [Person]
                        GraphPropertySpecification [113-123] [{ id: 10 }]
                          GraphPropertyNameAndValue [115-121] [id: 10]
                            Identifier(id) [115-117] [id]
                            IntLiteral(10) [119-121] [10]
              GqlReturn [127-140] [RETURN a.name]
                Select [134-140] [a.name]
                  SelectList [134-140] [a.name]
                    SelectColumn [134-140] [a.name]
                      PathExpression [134-140] [a.name]
                        Identifier(a) [134-135] [a]
                        Identifier(name) [136-140] [name]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a
      IS Person { id : 10 })
    RETURN
      a.name
  )

==

# GQL property specification: multiple property specifications.
select * from graph_table(aml
  MATCH (a IS Person { id: 10, country: "USA" })
  RETURN a.name
)
--
QueryStatement [0-96] [select * from...ETURN a.name )]
  Query [0-96] [select * from...ETURN a.name )]
    Select [0-96] [select * from...ETURN a.name )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-96] [from graph_table...RN a.name )]
        GraphTableQuery [14-96] [graph_table...RETURN a.name )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-94] [MATCH (a IS...RETURN a.name]
            GqlOperatorList [32-94] [MATCH (a IS...RETURN a.name]
              GqlMatch [32-78] [MATCH (a IS...: "USA" })]
                GraphPattern [38-78] [(a IS Person...: "USA" })]
                  GraphPathPattern [38-78] [(a IS Person...: "USA" })]
                    GraphNodePattern [38-78] [(a IS Person...: "USA" })]
                      GraphElementPatternFiller [39-77] [a IS Person...country: "USA" }]
                        Identifier(a) [39-40] [a]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                        GraphPropertySpecification [51-77] [{ id: 10, country: "USA" }]
                          GraphPropertyNameAndValue [53-59] [id: 10]
                            Identifier(id) [53-55] [id]
                            IntLiteral(10) [57-59] [10]
                          GraphPropertyNameAndValue [61-75] [country: "USA"]
                            Identifier(country) [61-68] [country]
                            StringLiteral [70-75] ["USA"]
                              StringLiteralComponent("USA") [70-75] ["USA"]
              GqlReturn [81-94] [RETURN a.name]
                Select [88-94] [a.name]
                  SelectList [88-94] [a.name]
                    SelectColumn [88-94] [a.name]
                      PathExpression [88-94] [a.name]
                        Identifier(a) [88-89] [a]
                        Identifier(name) [90-94] [name]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a
      IS Person { id : 10, country : "USA" })
    RETURN
      a.name
  )

==

# GQL property specification: reference property in <value_expression>
select * from graph_table(aml
  MATCH (a IS Person {id: a.age + 10})
  RETURN a.name
)
--
QueryStatement [0-86] [select * from...ETURN a.name )]
  Query [0-86] [select * from...ETURN a.name )]
    Select [0-86] [select * from...ETURN a.name )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-86] [from graph_table...RN a.name )]
        GraphTableQuery [14-86] [graph_table...RETURN a.name )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-84] [MATCH (a IS...RETURN a.name]
            GqlOperatorList [32-84] [MATCH (a IS...RETURN a.name]
              GqlMatch [32-68] [MATCH (a IS...age + 10})]
                GraphPattern [38-68] [(a IS Person {id: a.age + 10})]
                  GraphPathPattern [38-68] [(a IS Person {id: a.age + 10})]
                    GraphNodePattern [38-68] [(a IS Person {id: a.age + 10})]
                      GraphElementPatternFiller [39-67] [a IS Person {id: a.age + 10}]
                        Identifier(a) [39-40] [a]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                        GraphPropertySpecification [51-67] [{id: a.age + 10}]
                          GraphPropertyNameAndValue [52-66] [id: a.age + 10]
                            Identifier(id) [52-54] [id]
                            BinaryExpression(+) [56-66] [a.age + 10]
                              PathExpression [56-61] [a.age]
                                Identifier(a) [56-57] [a]
                                Identifier(age) [58-61] [age]
                              IntLiteral(10) [64-66] [10]
              GqlReturn [71-84] [RETURN a.name]
                Select [78-84] [a.name]
                  SelectList [78-84] [a.name]
                    SelectColumn [78-84] [a.name]
                      PathExpression [78-84] [a.name]
                        Identifier(a) [78-79] [a]
                        Identifier(name) [80-84] [name]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a
      IS Person { id : a.age + 10 })
    RETURN
      a.name
  )
==

# GQL property specification: BinaryExpression(+) in <value_expression>
select * from graph_table(aml
  MATCH (a IS Person {id: 10 + 20})
  RETURN a.name
)
--
QueryStatement [0-83] [select * from...ETURN a.name )]
  Query [0-83] [select * from...ETURN a.name )]
    Select [0-83] [select * from...ETURN a.name )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-83] [from graph_table...RN a.name )]
        GraphTableQuery [14-83] [graph_table...RETURN a.name )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-81] [MATCH (a IS...RETURN a.name]
            GqlOperatorList [32-81] [MATCH (a IS...RETURN a.name]
              GqlMatch [32-65] [MATCH (a IS...10 + 20})]
                GraphPattern [38-65] [(a IS Person {id: 10 + 20})]
                  GraphPathPattern [38-65] [(a IS Person {id: 10 + 20})]
                    GraphNodePattern [38-65] [(a IS Person {id: 10 + 20})]
                      GraphElementPatternFiller [39-64] [a IS Person {id: 10 + 20}]
                        Identifier(a) [39-40] [a]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                        GraphPropertySpecification [51-64] [{id: 10 + 20}]
                          GraphPropertyNameAndValue [52-63] [id: 10 + 20]
                            Identifier(id) [52-54] [id]
                            BinaryExpression(+) [56-63] [10 + 20]
                              IntLiteral(10) [56-58] [10]
                              IntLiteral(20) [61-63] [20]
              GqlReturn [68-81] [RETURN a.name]
                Select [75-81] [a.name]
                  SelectList [75-81] [a.name]
                    SelectColumn [75-81] [a.name]
                      PathExpression [75-81] [a.name]
                        Identifier(a) [75-76] [a]
                        Identifier(name) [77-81] [name]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a
      IS Person { id : 10 + 20 })
    RETURN
      a.name
  )

==

# GQL property specification: single edge property specifications.
select * from graph_table(aml
  MATCH (p IS Person) -[o:Owns { since: 2023 }]-> (a IS Account)
  RETURN p.name, a.balance
)

--
QueryStatement [0-123] [select * from....balance )]
  Query [0-123] [select * from....balance )]
    Select [0-123] [select * from....balance )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-123] [from graph_table....balance )]
        GraphTableQuery [14-123] [graph_table....balance )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-121] [MATCH (p IS...a.balance]
            GqlOperatorList [32-121] [MATCH (p IS...a.balance]
              GqlMatch [32-94] [MATCH (p IS...IS Account)]
                GraphPattern [38-94] [(p IS Person...IS Account)]
                  GraphPathPattern [38-94] [(p IS Person...IS Account)]
                    GraphNodePattern [38-51] [(p IS Person)]
                      GraphElementPatternFiller [39-50] [p IS Person]
                        Identifier(p) [39-40] [p]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                    GraphEdgePattern [52-79] [-[o:Owns { since: 2023 }]->]
                      GraphElementPatternFiller [54-76] [o:Owns { since: 2023 }]
                        Identifier(o) [54-55] [o]
                        GraphLabelFilter [55-60] [:Owns]
                          GraphElementLabel [56-60] [Owns]
                            Identifier(Owns) [56-60] [Owns]
                        GraphPropertySpecification [61-76] [{ since: 2023 }]
                          GraphPropertyNameAndValue [63-74] [since: 2023]
                            Identifier(since) [63-68] [since]
                            IntLiteral(2023) [70-74] [2023]
                    GraphNodePattern [80-94] [(a IS Account)]
                      GraphElementPatternFiller [81-93] [a IS Account]
                        Identifier(a) [81-82] [a]
                        GraphLabelFilter [83-93] [IS Account]
                          GraphElementLabel [86-93] [Account]
                            Identifier(Account) [86-93] [Account]
              GqlReturn [97-121] [RETURN p.name, a.balance]
                Select [104-121] [p.name, a.balance]
                  SelectList [104-121] [p.name, a.balance]
                    SelectColumn [104-110] [p.name]
                      PathExpression [104-110] [p.name]
                        Identifier(p) [104-105] [p]
                        Identifier(name) [106-110] [name]
                    SelectColumn [112-121] [a.balance]
                      PathExpression [112-121] [a.balance]
                        Identifier(a) [112-113] [a]
                        Identifier(balance) [114-121] [balance]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (p
      IS Person)
      -[o
      IS Owns { since : 2023 }]->
      (a
      IS Account)
    RETURN
      p.name,
      a.balance
  )

==

# # GQL property specification: node and edge property specifications.
select * from graph_table(aml
  MATCH (p IS Person {id: 10, country: "USA"}) -[o:Owns { since: 2023, location: "MTV" }]-> (a IS Account)
  RETURN p.name, a.balance
)

--
QueryStatement [0-165] [select * from....balance )]
  Query [0-165] [select * from....balance )]
    Select [0-165] [select * from....balance )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-165] [from graph_table....balance )]
        GraphTableQuery [14-165] [graph_table....balance )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-163] [MATCH (p IS...a.balance]
            GqlOperatorList [32-163] [MATCH (p IS...a.balance]
              GqlMatch [32-136] [MATCH (p IS...IS Account)]
                GraphPattern [38-136] [(p IS Person...IS Account)]
                  GraphPathPattern [38-136] [(p IS Person...IS Account)]
                    GraphNodePattern [38-76] [(p IS Person...ountry: "USA"})]
                      GraphElementPatternFiller [39-75] [p IS Person...country: "USA"}]
                        Identifier(p) [39-40] [p]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                        GraphPropertySpecification [51-75] [{id: 10, country: "USA"}]
                          GraphPropertyNameAndValue [52-58] [id: 10]
                            Identifier(id) [52-54] [id]
                            IntLiteral(10) [56-58] [10]
                          GraphPropertyNameAndValue [60-74] [country: "USA"]
                            Identifier(country) [60-67] [country]
                            StringLiteral [69-74] ["USA"]
                              StringLiteralComponent("USA") [69-74] ["USA"]
                    GraphEdgePattern [77-121] [-[o:Owns {..."MTV" }]->]
                      GraphElementPatternFiller [79-118] [o:Owns { since...tion: "MTV" }]
                        Identifier(o) [79-80] [o]
                        GraphLabelFilter [80-85] [:Owns]
                          GraphElementLabel [81-85] [Owns]
                            Identifier(Owns) [81-85] [Owns]
                        GraphPropertySpecification [86-118] [{ since: 2023...ation: "MTV" }]
                          GraphPropertyNameAndValue [88-99] [since: 2023]
                            Identifier(since) [88-93] [since]
                            IntLiteral(2023) [95-99] [2023]
                          GraphPropertyNameAndValue [101-116] [location: "MTV"]
                            Identifier(location) [101-109] [location]
                            StringLiteral [111-116] ["MTV"]
                              StringLiteralComponent("MTV") [111-116] ["MTV"]
                    GraphNodePattern [122-136] [(a IS Account)]
                      GraphElementPatternFiller [123-135] [a IS Account]
                        Identifier(a) [123-124] [a]
                        GraphLabelFilter [125-135] [IS Account]
                          GraphElementLabel [128-135] [Account]
                            Identifier(Account) [128-135] [Account]
              GqlReturn [139-163] [RETURN p.name, a.balance]
                Select [146-163] [p.name, a.balance]
                  SelectList [146-163] [p.name, a.balance]
                    SelectColumn [146-152] [p.name]
                      PathExpression [146-152] [p.name]
                        Identifier(p) [146-147] [p]
                        Identifier(name) [148-152] [name]
                    SelectColumn [154-163] [a.balance]
                      PathExpression [154-163] [a.balance]
                        Identifier(a) [154-155] [a]
                        Identifier(balance) [156-163] [balance]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (p
      IS Person { id : 10, country : "USA" })
      -[o
      IS Owns { since : 2023, location : "MTV" }]->
      (a
      IS Account)
    RETURN
      p.name,
      a.balance
  )

==

# GQL property specification: property with proto type.
SELECT * FROM graph_table(aml
  MATCH (a IS Person { proto_property: NEW x { foo: "blah", bar: 3 }})
  RETURN a.name
)
--
QueryStatement [0-118] [SELECT * FROM...ETURN a.name )]
  Query [0-118] [SELECT * FROM...ETURN a.name )]
    Select [0-118] [SELECT * FROM...ETURN a.name )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-118] [FROM graph_table...RN a.name )]
        GraphTableQuery [14-118] [graph_table...RETURN a.name )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-116] [MATCH (a IS...RETURN a.name]
            GqlOperatorList [32-116] [MATCH (a IS...RETURN a.name]
              GqlMatch [32-100] [MATCH (a IS...bar: 3 }})]
                GraphPattern [38-100] [(a IS Person...bar: 3 }})]
                  GraphPathPattern [38-100] [(a IS Person...bar: 3 }})]
                    GraphNodePattern [38-100] [(a IS Person...bar: 3 }})]
                      GraphElementPatternFiller [39-99] [a IS Person...bar: 3 }}]
                        Identifier(a) [39-40] [a]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                        GraphPropertySpecification [51-99] [{ proto_property...bar: 3 }}]
                          GraphPropertyNameAndValue [53-98] [proto_property..., bar: 3 }]
                            Identifier(proto_property) [53-67] [proto_property]
                            BracedNewConstructor [69-98] [NEW x { foo: "blah", bar: 3 }]
                              SimpleType [73-74] [x]
                                PathExpression [73-74] [x]
                                  Identifier(x) [73-74] [x]
                              BracedConstructor [75-98] [{ foo: "blah", bar: 3 }]
                                BracedConstructorField [77-88] [foo: "blah"]
                                  BracedConstructorLhs [77-80] [foo]
                                    PathExpression [77-80] [foo]
                                      Identifier(foo) [77-80] [foo]
                                  BracedConstructorFieldValue [80-88] [: "blah"]
                                    StringLiteral [82-88] ["blah"]
                                      StringLiteralComponent("blah") [82-88] ["blah"]
                                BracedConstructorField [90-96] [bar: 3]
                                  BracedConstructorLhs [90-93] [bar]
                                    PathExpression [90-93] [bar]
                                      Identifier(bar) [90-93] [bar]
                                  BracedConstructorFieldValue [93-96] [: 3]
                                    IntLiteral(3) [95-96] [3]
              GqlReturn [103-116] [RETURN a.name]
                Select [110-116] [a.name]
                  SelectList [110-116] [a.name]
                    SelectColumn [110-116] [a.name]
                      PathExpression [110-116] [a.name]
                        Identifier(a) [110-111] [a]
                        Identifier(name) [112-116] [name]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a
      IS Person { proto_property : NEW x {
        foo : "blah",
        bar : 3
      } })
    RETURN
      a.name
  )

==

# GQL property specification: backticked and dollar sign identifiers.
SELECT * from graph_table(aml
  MATCH (a IS Person { `$col1` : "property_value"  })
  RETURN a.name
)

--
QueryStatement [0-101] [SELECT * from...ETURN a.name )]
  Query [0-101] [SELECT * from...ETURN a.name )]
    Select [0-101] [SELECT * from...ETURN a.name )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-101] [from graph_table...RN a.name )]
        GraphTableQuery [14-101] [graph_table...RETURN a.name )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-99] [MATCH (a IS...RETURN a.name]
            GqlOperatorList [32-99] [MATCH (a IS...RETURN a.name]
              GqlMatch [32-83] [MATCH (a IS...perty_value"  })]
                GraphPattern [38-83] [(a IS Person...erty_value"  })]
                  GraphPathPattern [38-83] [(a IS Person...erty_value"  })]
                    GraphNodePattern [38-83] [(a IS Person...erty_value"  })]
                      GraphElementPatternFiller [39-82] [a IS Person...operty_value"  }]
                        Identifier(a) [39-40] [a]
                        GraphLabelFilter [41-50] [IS Person]
                          GraphElementLabel [44-50] [Person]
                            Identifier(Person) [44-50] [Person]
                        GraphPropertySpecification [51-82] [{ `$col1`...property_value"  }]
                          GraphPropertyNameAndValue [53-79] [`$col1` : "property_value"]
                            Identifier(`$col1`) [53-60] [`$col1`]
                            StringLiteral [63-79] ["property_value"]
                              StringLiteralComponent("property_value") [63-79] ["property_value"]
              GqlReturn [86-99] [RETURN a.name]
                Select [93-99] [a.name]
                  SelectList [93-99] [a.name]
                    SelectColumn [93-99] [a.name]
                      PathExpression [93-99] [a.name]
                        Identifier(a) [93-94] [a]
                        Identifier(name) [95-99] [name]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a
      IS Person { `$col1` : "property_value" })
    RETURN
      a.name
  )

==

# GQL property specification: empty property specification.
select * from graph_table(aml
  MATCH (a IS Person {})
  RETURN a.name
)
--
ERROR: Syntax error: Unexpected "}" [at 2:23]
  MATCH (a IS Person {})
                      ^
==

# GQL property specification: property specification and where cannot co-exist.
select * from graph_table(aml
  MATCH (a IS Person {id: 10} WHERE a.id=20)
  RETURN a.name
)
--
ERROR: WHERE clause cannot be used together with property specification [at 2:31]
  MATCH (a IS Person {id: 10} WHERE a.id=20)
                              ^

==

# GQL property specification: where (put first) and property specification
# cannot co-exist.
select * from graph_table(aml
  MATCH (a IS Person WHERE a.id=20 {id: 10})
  RETURN a.name
)
--
ERROR: Syntax error: Expected ")" but got "{" [at 2:36]
  MATCH (a IS Person WHERE a.id=20 {id: 10})
                                   ^

==

# GQL property specification: property specification (put first) and where
# cannot co-exist.
select * from graph_table(aml
  MATCH (a IS Person {id: 10} WHERE a.id=20)
  RETURN a.name
)
--
ERROR: WHERE clause cannot be used together with property specification [at 2:31]
  MATCH (a IS Person {id: 10} WHERE a.id=20)
                              ^

==

# GQL property specification: invalid sum of properties.
select * from graph_table(aml
  MATCH (a IS Person { id + id: 10 })
  RETURN a.name
)
--
ERROR: Syntax error: Expected ":" but got "+" [at 2:27]
  MATCH (a IS Person { id + id: 10 })
                          ^
==

# GQL property specification: invalid double-quoted property.
select * from graph_table(aml
  MATCH (a IS Person { "id": 10 })
  RETURN a.name
)
--
ERROR: Syntax error: Unexpected string literal "id" [at 2:24]
  MATCH (a IS Person { "id": 10 })
                       ^
==

# GQL property specification: invalid single-quoted property.
select * from graph_table(aml
  MATCH (a IS Person { 'id': 10 })
  RETURN a.name
)
--
ERROR: Syntax error: Unexpected string literal 'id' [at 2:24]
  MATCH (a IS Person { 'id': 10 })
                       ^
==

# GQL property specification: single edge property specifications with hints.
select * from graph_table(aml
  MATCH (p) -[o]-> (@{FORCE_INDEX=_BASE_TABLE} a :Person {prop: @prop})
  RETURN p.name, a.balance
)
--
QueryStatement [0-130] [select * from....balance )]
  Query [0-130] [select * from....balance )]
    Select [0-130] [select * from....balance )]
      SelectList [7-8] [*]
        SelectColumn [7-8] [*]
          Star(*) [7-8] [*]
      FromClause [9-130] [from graph_table....balance )]
        GraphTableQuery [14-130] [graph_table....balance )]
          PathExpression [26-29] [aml]
            Identifier(aml) [26-29] [aml]
          GqlOperatorList [32-128] [MATCH (p)...a.balance]
            GqlOperatorList [32-128] [MATCH (p)...a.balance]
              GqlMatch [32-101] [MATCH (p)...prop: @prop})]
                GraphPattern [38-101] [(p) -[o]->...prop: @prop})]
                  GraphPathPattern [38-101] [(p) -[o]->...prop: @prop})]
                    GraphNodePattern [38-41] [(p)]
                      GraphElementPatternFiller [39-40] [p]
                        Identifier(p) [39-40] [p]
                    GraphEdgePattern [42-48] [-[o]->]
                      GraphElementPatternFiller [44-45] [o]
                        Identifier(o) [44-45] [o]
                    GraphNodePattern [49-101] [(@{FORCE_INDEX...prop: @prop})]
                      GraphElementPatternFiller [50-100] [@{FORCE_INDEX...prop: @prop}]
                        Identifier(a) [77-78] [a]
                        GraphLabelFilter [79-86] [:Person]
                          GraphElementLabel [80-86] [Person]
                            Identifier(Person) [80-86] [Person]
                        GraphPropertySpecification [87-100] [{prop: @prop}]
                          GraphPropertyNameAndValue [88-99] [prop: @prop]
                            Identifier(prop) [88-92] [prop]
                            ParameterExpr [94-99] [@prop]
                              Identifier(prop) [95-99] [prop]
                        Hint [50-76] [@{FORCE_INDEX=_BASE_TABLE}]
                          HintEntry [52-75] [FORCE_INDEX=_BASE_TABLE]
                            Identifier(FORCE_INDEX) [52-63] [FORCE_INDEX]
                            PathExpression [64-75] [_BASE_TABLE]
                              Identifier(_BASE_TABLE) [64-75] [_BASE_TABLE]
              GqlReturn [104-128] [RETURN p.name, a.balance]
                Select [111-128] [p.name, a.balance]
                  SelectList [111-128] [p.name, a.balance]
                    SelectColumn [111-117] [p.name]
                      PathExpression [111-117] [p.name]
                        Identifier(p) [111-112] [p]
                        Identifier(name) [113-117] [name]
                    SelectColumn [119-128] [a.balance]
                      PathExpression [119-128] [a.balance]
                        Identifier(a) [119-120] [a]
                        Identifier(balance) [121-128] [balance]
--
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (p)
      -[o]->
      (@{ FORCE_INDEX = _BASE_TABLE } a
      IS Person { prop : @prop })
    RETURN
      p.name,
      a.balance
  )
