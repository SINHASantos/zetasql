[default language_features=MAXIMUM,+PIVOT,+NUMERIC_TYPE,+BIGNUMERIC_TYPE,+CIVIL_TIME,+GROUP_BY_ARRAY,+GROUP_BY_STRUCT,+TABLESAMPLE,+IS_DISTINCT,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE]

# ERROR: Pivot on value table via UNNEST
SELECT * FROM UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN (0, 1));
--
ERROR: PIVOT is not allowed with array scans [at 2:38]
SELECT * FROM UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN (0, 1));
                                     ^
==

[language_features=NONE,+PIVOT{{|,+DISALLOW_PIVOT_AND_UNPIVOT_ON_ARRAY_SCANS}}]
# 2 UNNESTs
SELECT * FROM UNNEST(['a', 'b']) AS k, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN (0, 1));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$array.k#1 AS k [STRING]
| +-$array.Value#2 AS Value [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[k#1, Value#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[k#1, Value#2]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.k#1]
        |   +-array_expr_list=
        |   | +-Literal(type=ARRAY<STRING>, value=["a", "b"])
        |   +-element_column_list=[$array.k#1]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.Value#2]


DEPRECATION WARNING:
PIVOT is not allowed with array scans. This will become an error [at 2:63]
...UNNEST(['a', 'b']) AS k, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key...
                                                   ^
[zetasql.DeprecationWarning] { kind: PIVOT_OR_UNPIVOT_ON_ARRAY_SCAN }
--
ALTERNATION GROUP: ,+DISALLOW_PIVOT_AND_UNPIVOT_ON_ARRAY_SCANS
--
ERROR: PIVOT is not allowed with array scans [at 2:63]
...UNNEST(['a', 'b']) AS k, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key...
                                                   ^
==

[language_features=NONE,+PIVOT{{|,+DISALLOW_PIVOT_AND_UNPIVOT_ON_ARRAY_SCANS}}]
# Table with UNNEST
SELECT * FROM KeyValue, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN (0, 1));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$array.Value#3 AS Value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $array.Value#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $array.Value#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.Value#3]


DEPRECATION WARNING:
PIVOT is not allowed with array scans. This will become an error [at 2:48]
SELECT * FROM KeyValue, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN ...
                                               ^
[zetasql.DeprecationWarning] { kind: PIVOT_OR_UNPIVOT_ON_ARRAY_SCAN }
--
ALTERNATION GROUP: ,+DISALLOW_PIVOT_AND_UNPIVOT_ON_ARRAY_SCANS
--
ERROR: PIVOT is not allowed with array scans [at 2:48]
SELECT * FROM KeyValue, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN ...
                                               ^
==

[language_features=NONE,+PIVOT{{|,+DISALLOW_PIVOT_AND_UNPIVOT_ON_ARRAY_SCANS}}]
# Table with 2 UNNESTs
SELECT * FROM KeyValue, UNNEST(['a', 'b']) AS k, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key IN (0, 1));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$array.k#3 AS k [STRING]
| +-$array.Value#4 AS Value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $array.k#3, $array.Value#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $array.k#3, $array.Value#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $array.k#3]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-array_expr_list=
        |   | +-Literal(type=ARRAY<STRING>, value=["a", "b"])
        |   +-element_column_list=[$array.k#3]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.Value#4]


DEPRECATION WARNING:
PIVOT is not allowed with array scans. This will become an error [at 2:73]
...UNNEST(['a', 'b']) AS k, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key...
                                                   ^
[zetasql.DeprecationWarning] { kind: PIVOT_OR_UNPIVOT_ON_ARRAY_SCAN }
--
ALTERNATION GROUP: ,+DISALLOW_PIVOT_AND_UNPIVOT_ON_ARRAY_SCANS
--
ERROR: PIVOT is not allowed with array scans [at 2:73]
...UNNEST(['a', 'b']) AS k, UNNEST([1,2]) AS Value PIVOT(COUNT(Value) FOR Key...
                                                   ^
==

[language_features=NONE,{{|+PIVOT,+IS_DISTINCT|+PIVOT,+IS_DISTINCT,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
ERROR: PIVOT is not supported [at 1:24]
SELECT * FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
                       ^
--
ALTERNATION GROUP: +PIVOT,+IS_DISTINCT
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=29-41
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
        |   +-expr_list=
        |   | +-$pivot_value#6 := ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-zero#4 :=
          | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
          |   +-SubqueryExpr
          |     +-type=STRING
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
          |     | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#11]
          |         +-expr_list=
          |         | +-$col1#11 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#9)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#10)
          |         |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#8)
          |         |     +-Literal(type=STRING, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#8, pivot_column#9, pivot_value#10]
          |             +-expr_list=
          |             | +-orig_arg#8 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
          |             | +-pivot_column#9 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
          |             | +-pivot_value#10 := Literal(type=INT64, value=0)
          |             +-input_scan=
          |               +-SingleRowScan
          +-one#5 :=
            +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              +-SubqueryExpr
                +-type=STRING
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#15]
                    +-expr_list=
                    | +-$col1#15 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                    |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#13)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#14)
                    |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#12)
                    |     +-Literal(type=STRING, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#12, pivot_column#13, pivot_value#14]
                        +-expr_list=
                        | +-orig_arg#12 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                        | +-pivot_column#13 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                        | +-pivot_value#14 := Literal(type=INT64, value=1)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUP: +PIVOT,+IS_DISTINCT,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=29-41
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
        |   +-expr_list=
        |   | +-$pivot_value#6 := ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-zero#4 :=
          | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
          |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
          |     | +-Literal(type=INT64, value=0)
          |     +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
          |     +-Literal(type=STRING, value=NULL)
          +-one#5 :=
            +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                | +-Literal(type=INT64, value=1)
                +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                +-Literal(type=STRING, value=NULL)
==

[language_features=NONE,{{|+PIVOT}}]
SELECT * FROM (SELECT Key, Value FROM KeyValue) PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
ERROR: PIVOT is not supported [at 1:49]
SELECT * FROM (SELECT Key, Value FROM KeyValue) PIVOT(COUNT(Value) FOR Key IN...
                                                ^
--
ALTERNATION GROUP: +PIVOT
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#6 AS zero [INT64]
| +-$pivot.one#7 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#6, one#7]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#6, one#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[Key#3, Value#4]
        |   +-expr_list=
        |   | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=54-66
        |   +-ColumnRef(type=STRING, column=$subquery1.Value#4)
        +-for_expr=
        | +-ColumnRef(parse_location=71-74, type=INT64, column=$subquery1.Key#3)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#6, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#7, pivot_expr_index=0, pivot_value_index=1)
==

[language_features=NONE,{{+TABLE_VALUED_FUNCTIONS|+TABLE_VALUED_FUNCTIONS,+PIVOT}}]
select 1 from tvf_no_args() PIVOT(COUNT(column_bytes) FOR column_bool IN (TRUE AS t, FALSE AS f));
--
ALTERNATION GROUP: +TABLE_VALUED_FUNCTIONS
--
ERROR: PIVOT is not supported [at 1:29]
select 1 from tvf_no_args() PIVOT(COUNT(column_bytes) FOR column_bool IN (TRU...
                            ^
--
ALTERNATION GROUP: +TABLE_VALUED_FUNCTIONS,+PIVOT
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 := Literal(type=INT64, value=1)
    +-input_scan=
      +-PivotScan
        +-input_scan=
        | +-TVFScan(column_list=tvf_no_args.[column_bool#1, column_bytes#2], tvf=tvf_no_args(() -> TABLE<column_bool BOOL, column_bytes BYTES>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>, column_index_list=[0, 1], function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(BYTES) -> INT64)
        |   +-parse_location=34-53
        |   +-ColumnRef(type=BYTES, column=tvf_no_args.column_bytes#2)
        +-for_expr=
        | +-ColumnRef(parse_location=58-69, type=BOOL, column=tvf_no_args.column_bool#1)
        +-pivot_value_list=
          +-Literal(type=BOOL, value=true)
          +-Literal(type=BOOL, value=false)
==

[language_features=NONE,{{+TABLE_VALUED_FUNCTIONS|+TABLE_VALUED_FUNCTIONS,+PIVOT}}]
select * from tvf_one_relation_arg_with_fixed_output(
    (SELECT * FROM (SELECT Key, Value FROM KeyValue) PIVOT(COUNT(Value)
    FOR Key IN (0 AS zero, 1 AS one))));
--
ALTERNATION GROUP: +TABLE_VALUED_FUNCTIONS
--
ERROR: PIVOT is not supported [at 2:54]
    (SELECT * FROM (SELECT Key, Value FROM KeyValue) PIVOT(COUNT(Value)
                                                     ^
--
ALTERNATION GROUP: +TABLE_VALUED_FUNCTIONS,+PIVOT
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_arg_with_fixed_output.column_bool#8 AS column_bool [BOOL]
| +-tvf_one_relation_arg_with_fixed_output.column_bytes#9 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_one_relation_arg_with_fixed_output.[column_bool#8, column_bytes#9]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_one_relation_arg_with_fixed_output.[column_bool#8, column_bytes#9]
        +-tvf=tvf_one_relation_arg_with_fixed_output((ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(TABLE<zero INT64, one INT64>) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        |   +-scan=
        |   | +-ProjectScan
        |   |   +-column_list=$pivot.[zero#6, one#7]
        |   |   +-input_scan=
        |   |     +-PivotScan
        |   |       +-column_list=$pivot.[zero#6, one#7]
        |   |       +-input_scan=
        |   |       | +-ProjectScan
        |   |       |   +-column_list=$subquery2.[Key#3, Value#4]
        |   |       |   +-expr_list=
        |   |       |   | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |       |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |       |   +-input_scan=
        |   |       |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   |       +-pivot_expr_list=
        |   |       | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   |       |   +-parse_location=113-125
        |   |       |   +-ColumnRef(type=STRING, column=$subquery2.Value#4)
        |   |       +-for_expr=
        |   |       | +-ColumnRef(parse_location=134-137, type=INT64, column=$subquery2.Key#3)
        |   |       +-pivot_value_list=
        |   |       | +-Literal(type=INT64, value=0)
        |   |       | +-Literal(type=INT64, value=1)
        |   |       +-pivot_column_list=
        |   |         +-PivotColumn(column=$pivot.zero#6, pivot_expr_index=0, pivot_value_index=0)
        |   |         +-PivotColumn(column=$pivot.one#7, pivot_expr_index=0, pivot_value_index=1)
        |   +-argument_column_list=$pivot.[zero#6, one#7]
        +-column_index_list=[0, 1]
        +-function_call_signature=(ANY TABLE) -> TABLE<column_bool BOOL, column_bytes BYTES>
==

[language_features=NONE,{{+TABLE_VALUED_FUNCTIONS|+TABLE_VALUED_FUNCTIONS,+PIVOT}}]
SELECT * FROM KeyValue, KeyValue
PIVOT(COUNT(Key) FOR Value IN ('Value_1' AS v1, 'Value_2' AS v2));
--
ALTERNATION GROUP: +TABLE_VALUED_FUNCTIONS
--
ERROR: PIVOT is not supported [at 2:1]
PIVOT(COUNT(Key) FOR Value IN ('Value_1' AS v1, 'Value_2' AS v2));
^
--
ALTERNATION GROUP: +TABLE_VALUED_FUNCTIONS,+PIVOT
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pivot.v1#6 AS v1 [INT64]
| +-$pivot.v2#7 AS v2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.v1#6, $pivot.v2#7]
    +-input_scan=
      +-JoinScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.v1#6, $pivot.v2#7]
        +-left_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-right_scan=
          +-PivotScan
            +-column_list=$pivot.[v1#6, v2#7]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
            |   +-parse_location=39-49
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#3)
            +-for_expr=
            | +-ColumnRef(parse_location=54-59, type=STRING, column=KeyValue.Value#4)
            +-pivot_value_list=
            | +-Literal(type=STRING, value="Value_1")
            | +-Literal(type=STRING, value="Value_2")
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.v1#6, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.v2#7, pivot_expr_index=0, pivot_value_index=1)
==

# ERROR: Pivot on value-table is disallowed
SELECT * FROM KitchenSinkWithUidValueTable AS Value
PIVOT(COUNT(Value) FOR Key IN (0, 1))
--
ERROR: PIVOT is not allowed on value tables [at 2:1]
PIVOT(COUNT(Value) FOR Key IN (0, 1))
^
==

# PIVOT combined with FOR SYSTEM TIME AS OF
SELECT * FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0, 1))
    FOR SYSTEM TIME AS OF '2013-01-15';
--
ERROR: Syntax error: PIVOT and FOR SYSTEM TIME AS OF may not be combined [at 2:5]
    FOR SYSTEM TIME AS OF '2013-01-15';
    ^
==

# PIVOT combined with TABLESAMPLE
SELECT * FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one))
    TABLESAMPLE SYSTEM (1 ROWS) REPEATABLE(10);
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-SampleScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-PivotScan
        |   +-column_list=$pivot.[zero#4, one#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-pivot_expr_list=
        |   | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   |   +-parse_location=29-41
        |   |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-for_expr=
        |   | +-ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        |   +-pivot_value_list=
        |   | +-Literal(type=INT64, value=0)
        |   | +-Literal(type=INT64, value=1)
        |   +-pivot_column_list=
        |     +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
        |     +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)
        +-method="system"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-repeatable_argument=
          +-Literal(type=INT64, value=10)
==

# ERROR: PIVOT input table alias referenced in WHERE clause outside of PIVOT
SELECT * FROM KeyValue AS kv PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one))
WHERE kv.Key < 5;
--
ERROR: Unrecognized name: kv [at 2:7]
WHERE kv.Key < 5;
      ^
==

# ERROR: SELECT AS STRUCT subquery as pivot input.
SELECT
  *
  FROM
  (SELECT AS STRUCT 1 AS x, 2 AS y)
  PIVOT(SUM(x) FOR y IN (1, 2));
--
ERROR: PIVOT is not allowed on value tables [at 5:3]
  PIVOT(SUM(x) FOR y IN (1, 2));
  ^
==

# ERROR: PIVOT using constant value as pivot expression
SELECT * FROM KeyValue PIVOT(3 FOR Key IN (0, 1));
--
ERROR: PIVOT expression must be an aggregate function call [at 1:30]
SELECT * FROM KeyValue PIVOT(3 FOR Key IN (0, 1));
                             ^
==

# ERROR: PIVOT using column ref as pivot expression
SELECT * FROM KeyValue PIVOT(Key FOR Key IN (0, 1));
--
ERROR: PIVOT expression must be an aggregate function call [at 1:30]
SELECT * FROM KeyValue PIVOT(Key FOR Key IN (0, 1));
                             ^
==

# ERROR: PIVOT using scalar function as pivot expression
SELECT * FROM KeyValue PIVOT(SIGN(Key) FOR Key IN (0, 1));
--
ERROR: PIVOT expression must be an aggregate function call [at 1:30]
SELECT * FROM KeyValue PIVOT(SIGN(Key) FOR Key IN (0, 1));
                             ^
==

# ERROR: PIVOT using post-aggregation logic in pivot expression
SELECT * FROM KeyValue PIVOT(1 + SUM(Key) FOR Key IN (0, 1));
--
ERROR: PIVOT expression must be an aggregate function call [at 1:30]
SELECT * FROM KeyValue PIVOT(1 + SUM(Key) FOR Key IN (0, 1));
                             ^
==

# Zero-argument aggregate function in pivot expr
[language_features=NONE,+PIVOT,+IS_DISTINCT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(COUNT(*) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)(parse_location=29-37)
        +-for_expr=
        | +-ColumnRef(parse_location=42-45, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#7]
        |   +-expr_list=
        |   | +-$pivot_value#7 := ColumnRef(parse_location=42-45, type=INT64, column=KeyValue.Key#1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-zero#5 :=
          | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
          |   +-SubqueryExpr
          |     +-type=BOOL
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#10]
          |         +-expr_list=
          |         | +-$col1#10 :=
          |         |   +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.pivot_column#8)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.pivot_value#9)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[pivot_column#8, pivot_value#9]
          |             +-expr_list=
          |             | +-pivot_column#8 := ColumnRef(type=INT64, column=$pivot.$pivot_value#7, is_correlated=TRUE)
          |             | +-pivot_value#9 := Literal(type=INT64, value=0)
          |             +-input_scan=
          |               +-SingleRowScan
          +-one#6 :=
            +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
              +-SubqueryExpr
                +-type=BOOL
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#13]
                    +-expr_list=
                    | +-$col1#13 :=
                    |   +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    |     +-ColumnRef(type=INT64, column=$subquery1.pivot_column#11)
                    |     +-ColumnRef(type=INT64, column=$subquery1.pivot_value#12)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[pivot_column#11, pivot_value#12]
                        +-expr_list=
                        | +-pivot_column#11 := ColumnRef(type=INT64, column=$pivot.$pivot_value#7, is_correlated=TRUE)
                        | +-pivot_value#12 := Literal(type=INT64, value=1)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)(parse_location=29-37)
        +-for_expr=
        | +-ColumnRef(parse_location=42-45, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#7]
        |   +-expr_list=
        |   | +-$pivot_value#7 := ColumnRef(parse_location=42-45, type=INT64, column=KeyValue.Key#1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-zero#5 :=
          | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
          |   +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
          |     +-Literal(type=INT64, value=0)
          +-one#6 :=
            +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
              +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
                +-Literal(type=INT64, value=1)
==

# Two-argument aggregate function in pivot expr
[language_features=NONE,+PIVOT,+IS_DISTINCT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(CORR(Key, Key + 1) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [DOUBLE]
| +-$pivot.one#6 AS one [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
        |   +-parse_location=29-47
        |   +-Cast(INT64 -> DOUBLE)
        |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-Cast(INT64 -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=52-55, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [DOUBLE]
| +-$pivot.one#6 AS one [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#7, $pivot.$pivot_expr_arg#8, $pivot.$pivot_expr_arg#9]
        |   +-expr_list=
        |   | +-$pivot_value#7 := ColumnRef(parse_location=52-55, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#8 :=
        |   | | +-Cast(INT64 -> DOUBLE)
        |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#9 :=
        |   |   +-Cast(INT64 -> DOUBLE)
        |   |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |       +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-zero#5 :=
          | +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
          |   +-SubqueryExpr
          |   | +-type=DOUBLE
          |   | +-subquery_type=SCALAR
          |   | +-parameter_list=
          |   | | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
          |   | | +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#8)
          |   | +-subquery=
          |   |   +-ProjectScan
          |   |     +-column_list=[$expr_subquery.$col1#13]
          |   |     +-expr_list=
          |   |     | +-$col1#13 :=
          |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
          |   |     |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |   |     |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#11)
          |   |     |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#12)
          |   |     |     +-ColumnRef(type=DOUBLE, column=$subquery1.orig_arg#10)
          |   |     |     +-Literal(type=DOUBLE, value=NULL)
          |   |     +-input_scan=
          |   |       +-ProjectScan
          |   |         +-column_list=$subquery1.[orig_arg#10, pivot_column#11, pivot_value#12]
          |   |         +-expr_list=
          |   |         | +-orig_arg#10 := ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#8, is_correlated=TRUE)
          |   |         | +-pivot_column#11 := ColumnRef(type=INT64, column=$pivot.$pivot_value#7, is_correlated=TRUE)
          |   |         | +-pivot_value#12 := Literal(type=INT64, value=0)
          |   |         +-input_scan=
          |   |           +-SingleRowScan
          |   +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#9)
          +-one#6 :=
            +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
              +-SubqueryExpr
              | +-type=DOUBLE
              | +-subquery_type=SCALAR
              | +-parameter_list=
              | | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
              | | +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#8)
              | +-subquery=
              |   +-ProjectScan
              |     +-column_list=[$expr_subquery.$col1#17]
              |     +-expr_list=
              |     | +-$col1#17 :=
              |     |   +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
              |     |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |     |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#15)
              |     |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#16)
              |     |     +-ColumnRef(type=DOUBLE, column=$subquery1.orig_arg#14)
              |     |     +-Literal(type=DOUBLE, value=NULL)
              |     +-input_scan=
              |       +-ProjectScan
              |         +-column_list=$subquery1.[orig_arg#14, pivot_column#15, pivot_value#16]
              |         +-expr_list=
              |         | +-orig_arg#14 := ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#8, is_correlated=TRUE)
              |         | +-pivot_column#15 := ColumnRef(type=INT64, column=$pivot.$pivot_value#7, is_correlated=TRUE)
              |         | +-pivot_value#16 := Literal(type=INT64, value=1)
              |         +-input_scan=
              |           +-SingleRowScan
              +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#9)
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [DOUBLE]
| +-$pivot.one#6 AS one [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
        |   +-parse_location=29-47
        |   +-Cast(INT64 -> DOUBLE)
        |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-Cast(INT64 -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=52-55, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [DOUBLE]
| +-$pivot.one#6 AS one [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#7, $pivot.$pivot_expr_arg#8, $pivot.$pivot_expr_arg#9]
        |   +-expr_list=
        |   | +-$pivot_value#7 := ColumnRef(parse_location=52-55, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#8 :=
        |   | | +-Cast(INT64 -> DOUBLE)
        |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#9 :=
        |   |   +-Cast(INT64 -> DOUBLE)
        |   |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |       +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-zero#5 :=
          | +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
          |   +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
          |   | +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |   | | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
          |   | | +-Literal(type=INT64, value=0)
          |   | +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#8)
          |   | +-Literal(type=DOUBLE, value=NULL)
          |   +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#9)
          +-one#6 :=
            +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
              +-FunctionCall(ZetaSQL:if(BOOL, DOUBLE, DOUBLE) -> DOUBLE)
              | +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              | | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
              | | +-Literal(type=INT64, value=1)
              | +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#8)
              | +-Literal(type=DOUBLE, value=NULL)
              +-ColumnRef(type=DOUBLE, column=$pivot.$pivot_expr_arg#9)
==

# ERROR: Name resolution error within pivot expr
SELECT * FROM KeyValue PIVOT(SUM(invalid_column) FOR Key IN (0, 1));
--
ERROR: Unrecognized name: invalid_column [at 1:34]
SELECT * FROM KeyValue PIVOT(SUM(invalid_column) FOR Key IN (0, 1));
                                 ^
==

# ERROR: When a resolver error occurs in a pivot expr that has an unsupported
# tree shape (e.g. not an aggregate function call), the error message should
# still be visible
SELECT * FROM KeyValue PIVOT({{invalid_column|invalid_column + COUNT(*)}}
FOR Key IN (0, 1));
--
ALTERNATION GROUP: invalid_column
--
ERROR: Unrecognized name: invalid_column [at 1:30]
SELECT * FROM KeyValue PIVOT(invalid_column
                             ^
--
ALTERNATION GROUP: invalid_column + COUNT(*)
--
ERROR: Unrecognized name: invalid_column [at 1:30]
SELECT * FROM KeyValue PIVOT(invalid_column + COUNT(*)
                             ^
==

# ERROR: Using original table in pivot expr when given an explicit alias
SELECT * FROM KeyValue AS kv PIVOT(SUM(KeyValue.Key) FOR Key IN (0, 1));
--
ERROR: Unrecognized name: KeyValue; Did you mean Value? [at 1:40]
SELECT * FROM KeyValue AS kv PIVOT(SUM(KeyValue.Key) FOR Key IN (0, 1));
                                       ^
==

# ERROR: FOR expr with name resolution error
SELECT * FROM KeyValue PIVOT(SUM(Key) FOR invalid_column IN (0, 1));
--
ERROR: Unrecognized name: invalid_column [at 1:43]
SELECT * FROM KeyValue PIVOT(SUM(Key) FOR invalid_column IN (0, 1));
                                          ^
==

# ERROR: IN expr attempting to use input table column
SELECT * FROM KeyValue PIVOT(SUM(Key) FOR Key IN (Key + 1, Key + 2));
--
ERROR: IN expression in PIVOT clause must be constant [at 1:51]
SELECT * FROM KeyValue PIVOT(SUM(Key) FOR Key IN (Key + 1, Key + 2));
                                                  ^
==

# ERROR: IN expr not constant
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (1, volatile_function(1)));
--
ERROR: IN expression in PIVOT clause must be constant [at 2:31]
PIVOT(SUM(Key) FOR Key IN (1, volatile_function(1)));
                              ^
==

# ERROR: IN value wrong type (note: column 'Key' is type INT64).
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (1, 'test'));
--
ERROR: PIVOT IN list item must be type INT64 to match the PIVOT FOR expression; found STRING [at 2:31]
PIVOT(SUM(Key) FOR Key IN (1, 'test'));
                              ^
==

# Complex IN exprs, which are still constant.
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (1 + 3 AS v1, ARRAY_LENGTH([1, 2, 3]) AS v2));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.v1#5 AS v1 [INT64]
| +-$pivot.v2#6 AS v2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.v1#5, $pivot.v2#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.v1#5, $pivot.v2#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=29-37
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=42-45, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | | +-Literal(type=INT64, value=1)
        | | +-Literal(type=INT64, value=3)
        | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.v1#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.v2#6, pivot_expr_index=0, pivot_value_index=1)
==

[language_features=NONE,{{+ANALYSIS_CONSTANT_PIVOT_COLUMN,|}}+PIVOT]
# IN exprs with named constant, query parameter and system variable.
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (TestConstantInt64, @@int64_system_variable,
                           @test_param_int32));
--
ALTERNATION GROUP: +ANALYSIS_CONSTANT_PIVOT_COLUMN,
--
ERROR: Generating an implicit alias for this PIVOT value is not supported; please provide an explicit alias [at 3:47]
PIVOT(SUM(Key) FOR Key IN (TestConstantInt64, @@int64_system_variable,
                                              ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Generating an implicit alias for this PIVOT value is not supported; please provide an explicit alias [at 3:28]
PIVOT(SUM(Key) FOR Key IN (TestConstantInt64, @@int64_system_variable,
                           ^
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT TEST_DATE = CAST('2024-01-01' AS DATE);
--
CreateConstantStmt
+-name_path=TEST_DATE
+-expr=
  +-Literal(type=DATE, value=2024-01-01, has_explicit_type=TRUE)
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT TEST_TIME = CAST('12:34:56' AS TIME);
--
CreateConstantStmt
+-name_path=TEST_TIME
+-expr=
  +-Literal(type=TIME, value=12:34:56, has_explicit_type=TRUE)
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT SQLCONSTANT = 1;
--
CreateConstantStmt
+-name_path=SQLCONSTANT
+-expr=
  +-Literal(type=INT64, value=1)
==

[language_features=NONE,{{+ANALYSIS_CONSTANT_PIVOT_COLUMN,|}}+PIVOT]
[use_database=db1]
# IN exprs with sql constants.
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (SQLCONSTANT));
--
ALTERNATION GROUP: +ANALYSIS_CONSTANT_PIVOT_COLUMN,
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot._1#5 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot._1#5]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot._1#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=60-68
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=73-76, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Constant(SQLCONSTANT, type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._1#5, pivot_expr_index=0, pivot_value_index=0)
--
ALTERNATION GROUP: <empty>
--
ERROR: Generating an implicit alias for this PIVOT value is not supported; please provide an explicit alias [at 3:28]
PIVOT(SUM(Key) FOR Key IN (SQLCONSTANT));
                           ^
==

[language_features=NONE,{{+ANALYSIS_CONSTANT_PIVOT_COLUMN,|}}+PIVOT]
[enabled_ast_rewrites=DEFAULTS]

# IN exprs with named constants.
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (TestConstantInt64));
--
ALTERNATION GROUP: +ANALYSIS_CONSTANT_PIVOT_COLUMN,
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot._1#5 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot._1#5]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot._1#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=62-70
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=75-78, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Constant(TestConstantInt64, type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._1#5, pivot_expr_index=0, pivot_value_index=0)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot._1#5 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot._1#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#4, $pivot._1#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
        |   +-expr_list=
        |   | +-$pivot_value#6 := ColumnRef(parse_location=75-78, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#7 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-_1#5 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-SubqueryExpr
                +-type=INT64
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#7)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#14]
                    +-expr_list=
                    | +-$col1#14 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                    |     +-SubqueryExpr
                    |     | +-type=BOOL
                    |     | +-subquery_type=EXISTS
                    |     | +-parameter_list=
                    |     | | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#9)
                    |     | | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#10)
                    |     | +-subquery=
                    |     |   +-SetOperationScan
                    |     |     +-column_list=[$intersect_all.pivot_column#13]
                    |     |     +-op_type=INTERSECT_ALL
                    |     |     +-input_item_list=
                    |     |       +-SetOperationItem
                    |     |       | +-scan=
                    |     |       | | +-ProjectScan
                    |     |       | |   +-column_list=[$intersect_all1.pivot_column#11]
                    |     |       | |   +-expr_list=
                    |     |       | |   | +-pivot_column#11 := ColumnRef(type=INT64, column=$subquery1.pivot_column#9, is_correlated=TRUE)
                    |     |       | |   +-input_scan=
                    |     |       | |     +-SingleRowScan
                    |     |       | +-output_column_list=[$intersect_all1.pivot_column#11]
                    |     |       +-SetOperationItem
                    |     |         +-scan=
                    |     |         | +-ProjectScan
                    |     |         |   +-column_list=[$intersect_all2.pivot_value#12]
                    |     |         |   +-expr_list=
                    |     |         |   | +-pivot_value#12 := ColumnRef(type=INT64, column=$subquery1.pivot_value#10, is_correlated=TRUE)
                    |     |         |   +-input_scan=
                    |     |         |     +-SingleRowScan
                    |     |         +-output_column_list=[$intersect_all2.pivot_value#12]
                    |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#8)
                    |     +-Literal(type=INT64, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#8, pivot_column#9, pivot_value#10]
                        +-expr_list=
                        | +-orig_arg#8 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                        | +-pivot_column#9 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                        | +-pivot_value#10 := Constant(TestConstantInt64, type=INT64, value=1)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: Generating an implicit alias for this PIVOT value is not supported; please provide an explicit alias [at 3:28]
PIVOT(SUM(Key) FOR Key IN (TestConstantInt64));
                           ^
==

# OK: Use of qualified column names names in pivot expr/for expr,
# using explicit alias.
SELECT * FROM KeyValue kv
PIVOT(SUM(kv.Key) FOR kv.Key IN (1 AS one, 2 AS two));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot.two#6 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=32-43
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=48-54, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.two#6, pivot_expr_index=0, pivot_value_index=1)
==

# OK: Use of qualified column names names in pivot expr/for expr,
# using original table name.
SELECT * FROM KeyValue
PIVOT(SUM(KeyValue.Key) FOR KeyValue.Key IN (1 AS one, 2 AS two));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot.two#6 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=29-46
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=51-63, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.two#6, pivot_expr_index=0, pivot_value_index=1)
==

# OK: Use of qualified column names names in pivot expr/for expr,
# using explicit alias.
SELECT * FROM KeyValue kv
PIVOT(SUM(kv.Key) FOR kv.Key IN (1 AS one, 2 AS two));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot.two#6 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=32-43
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=48-54, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.two#6, pivot_expr_index=0, pivot_value_index=1)
==

# OK: Use of qualified column names names in pivot expr/for expr,
# using original table name.
SELECT * FROM KeyValue
PIVOT(SUM(KeyValue.Key) FOR KeyValue.Key IN (1 AS one, 2 AS two));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot.two#6 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=29-46
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=51-63, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.two#6, pivot_expr_index=0, pivot_value_index=1)
==

# Complex expr in input to aggregate function
SELECT * FROM KeyValue
PIVOT(SUM(Key + 1) FOR Key IN (1 AS one, 2 AS two));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot.two#6 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.one#5, $pivot.two#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=29-41
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.two#6, pivot_expr_index=0, pivot_value_index=1)
==

# Multiple pivot exprs, with and without aliases
[language_features=NONE,+PIVOT,+IS_DISTINCT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue
PIVOT(
  SUM(Key + 1){{ AS sum_key_plus_1|}},
  AVG(Key + 1){{ AS avg_key_plus_1|}}
  FOR Key IN (1 {{AS one|}}, 2 AS two)
);
--
ALTERNATION GROUP:  AS sum_key_plus_1, AS avg_key_plus_1,AS one
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_one#6 AS sum_key_plus_1_one [INT64]
| +-$pivot.avg_key_plus_1_one#7 AS avg_key_plus_1_one [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | | +-parse_location=32-62
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | |   +-Literal(type=INT64, value=1)
        | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |   +-parse_location=66-96
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_key_plus_1_one#6, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.avg_key_plus_1_one#7, pivot_expr_index=1, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_key_plus_1_two#8, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.avg_key_plus_1_two#9, pivot_expr_index=1, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_one#6 AS sum_key_plus_1_one [INT64]
| +-$pivot.avg_key_plus_1_one#7 AS avg_key_plus_1_one [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11, $pivot.$pivot_expr_arg#12]
        |   +-expr_list=
        |   | +-$pivot_value#10 := ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#11 :=
        |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | |   +-Literal(type=INT64, value=1)
        |   | +-$pivot_expr_arg#12 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-sum_key_plus_1_one#6 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#16]
          |         +-expr_list=
          |         | +-$col1#16 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#14)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#15)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#13)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#13, pivot_column#14, pivot_value#15]
          |             +-expr_list=
          |             | +-orig_arg#13 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
          |             | +-pivot_column#14 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#15 := Literal(type=INT64, value=1)
          |             +-input_scan=
          |               +-SingleRowScan
          +-avg_key_plus_1_one#7 :=
          | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#20]
          |         +-expr_list=
          |         | +-$col1#20 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#18)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#19)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#17)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#17, pivot_column#18, pivot_value#19]
          |             +-expr_list=
          |             | +-orig_arg#17 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12, is_correlated=TRUE)
          |             | +-pivot_column#18 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#19 := Literal(type=INT64, value=1)
          |             +-input_scan=
          |               +-SingleRowScan
          +-sum_key_plus_1_two#8 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#24]
          |         +-expr_list=
          |         | +-$col1#24 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#22)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#23)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#21)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#21, pivot_column#22, pivot_value#23]
          |             +-expr_list=
          |             | +-orig_arg#21 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
          |             | +-pivot_column#22 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#23 := Literal(type=INT64, value=2)
          |             +-input_scan=
          |               +-SingleRowScan
          +-avg_key_plus_1_two#9 :=
            +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              +-SubqueryExpr
                +-type=INT64
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#28]
                    +-expr_list=
                    | +-$col1#28 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                    |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#26)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#27)
                    |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#25)
                    |     +-Literal(type=INT64, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#25, pivot_column#26, pivot_value#27]
                        +-expr_list=
                        | +-orig_arg#25 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12, is_correlated=TRUE)
                        | +-pivot_column#26 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
                        | +-pivot_value#27 := Literal(type=INT64, value=2)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUP:  AS sum_key_plus_1, AS avg_key_plus_1,
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_1#6 AS sum_key_plus_1_1 [INT64]
| +-$pivot.avg_key_plus_1_1#7 AS avg_key_plus_1_1 [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | | +-parse_location=32-62
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | |   +-Literal(type=INT64, value=1)
        | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |   +-parse_location=66-96
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_key_plus_1_1#6, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.avg_key_plus_1_1#7, pivot_expr_index=1, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_key_plus_1_two#8, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.avg_key_plus_1_two#9, pivot_expr_index=1, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_1#6 AS sum_key_plus_1_1 [INT64]
| +-$pivot.avg_key_plus_1_1#7 AS avg_key_plus_1_1 [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11, $pivot.$pivot_expr_arg#12]
        |   +-expr_list=
        |   | +-$pivot_value#10 := ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#11 :=
        |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | |   +-Literal(type=INT64, value=1)
        |   | +-$pivot_expr_arg#12 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-sum_key_plus_1_1#6 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#16]
          |         +-expr_list=
          |         | +-$col1#16 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#14)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#15)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#13)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#13, pivot_column#14, pivot_value#15]
          |             +-expr_list=
          |             | +-orig_arg#13 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
          |             | +-pivot_column#14 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#15 := Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
          |             +-input_scan=
          |               +-SingleRowScan
          +-avg_key_plus_1_1#7 :=
          | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#20]
          |         +-expr_list=
          |         | +-$col1#20 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#18)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#19)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#17)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#17, pivot_column#18, pivot_value#19]
          |             +-expr_list=
          |             | +-orig_arg#17 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12, is_correlated=TRUE)
          |             | +-pivot_column#18 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#19 := Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
          |             +-input_scan=
          |               +-SingleRowScan
          +-sum_key_plus_1_two#8 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#24]
          |         +-expr_list=
          |         | +-$col1#24 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#22)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#23)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#21)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#21, pivot_column#22, pivot_value#23]
          |             +-expr_list=
          |             | +-orig_arg#21 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
          |             | +-pivot_column#22 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#23 := Literal(type=INT64, value=2)
          |             +-input_scan=
          |               +-SingleRowScan
          +-avg_key_plus_1_two#9 :=
            +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              +-SubqueryExpr
                +-type=INT64
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#28]
                    +-expr_list=
                    | +-$col1#28 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                    |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#26)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#27)
                    |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#25)
                    |     +-Literal(type=INT64, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#25, pivot_column#26, pivot_value#27]
                        +-expr_list=
                        | +-orig_arg#25 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12, is_correlated=TRUE)
                        | +-pivot_column#26 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
                        | +-pivot_value#27 := Literal(type=INT64, value=2)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUPS:
     AS sum_key_plus_1,,AS one
     AS sum_key_plus_1,,
    ,+SIMPLIFY_PIVOT_REWRITE, AS sum_key_plus_1,,AS one
    ,+SIMPLIFY_PIVOT_REWRITE, AS sum_key_plus_1,,
--
ERROR: PIVOT expression must specify an alias unless it is the only pivot expression in the PIVOT clause [at 4:3]
  AVG(Key + 1)
  ^
--
ALTERNATION GROUPS:
     AS avg_key_plus_1,AS one
     AS avg_key_plus_1,
    AS one
    <empty>
    ,+SIMPLIFY_PIVOT_REWRITE,, AS avg_key_plus_1,AS one
    ,+SIMPLIFY_PIVOT_REWRITE,, AS avg_key_plus_1,
    ,+SIMPLIFY_PIVOT_REWRITE,,,AS one
    ,+SIMPLIFY_PIVOT_REWRITE,,,
--
ERROR: PIVOT expression must specify an alias unless it is the only pivot expression in the PIVOT clause [at 3:3]
  SUM(Key + 1),
  ^
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE, AS sum_key_plus_1, AS avg_key_plus_1,AS one
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_one#6 AS sum_key_plus_1_one [INT64]
| +-$pivot.avg_key_plus_1_one#7 AS avg_key_plus_1_one [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | | +-parse_location=32-62
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | |   +-Literal(type=INT64, value=1)
        | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |   +-parse_location=66-96
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_key_plus_1_one#6, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.avg_key_plus_1_one#7, pivot_expr_index=1, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_key_plus_1_two#8, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.avg_key_plus_1_two#9, pivot_expr_index=1, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_one#6 AS sum_key_plus_1_one [INT64]
| +-$pivot.avg_key_plus_1_one#7 AS avg_key_plus_1_one [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_one#6, $pivot.avg_key_plus_1_one#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11, $pivot.$pivot_expr_arg#12]
        |   +-expr_list=
        |   | +-$pivot_value#10 := ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#11 :=
        |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | |   +-Literal(type=INT64, value=1)
        |   | +-$pivot_expr_arg#12 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-sum_key_plus_1_one#6 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=1)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-Literal(type=INT64, value=NULL)
          +-avg_key_plus_1_one#7 :=
          | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=1)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
          |     +-Literal(type=INT64, value=NULL)
          +-sum_key_plus_1_two#8 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=2)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-Literal(type=INT64, value=NULL)
          +-avg_key_plus_1_two#9 :=
            +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                | +-Literal(type=INT64, value=2)
                +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
                +-Literal(type=INT64, value=NULL)
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE, AS sum_key_plus_1, AS avg_key_plus_1,
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_1#6 AS sum_key_plus_1_1 [INT64]
| +-$pivot.avg_key_plus_1_1#7 AS avg_key_plus_1_1 [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | | +-parse_location=32-62
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | |   +-Literal(type=INT64, value=1)
        | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |   +-parse_location=66-96
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_key_plus_1_1#6, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.avg_key_plus_1_1#7, pivot_expr_index=1, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_key_plus_1_two#8, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.avg_key_plus_1_two#9, pivot_expr_index=1, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value#5 AS Value [STRING]
| +-$pivot.sum_key_plus_1_1#6 AS sum_key_plus_1_1 [INT64]
| +-$pivot.avg_key_plus_1_1#7 AS avg_key_plus_1_1 [DOUBLE]
| +-$pivot.sum_key_plus_1_two#8 AS sum_key_plus_1_two [INT64]
| +-$pivot.avg_key_plus_1_two#9 AS avg_key_plus_1_two [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value#5, $pivot.sum_key_plus_1_1#6, $pivot.avg_key_plus_1_1#7, $pivot.sum_key_plus_1_two#8, $pivot.avg_key_plus_1_two#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11, $pivot.$pivot_expr_arg#12]
        |   +-expr_list=
        |   | +-$pivot_value#10 := ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#11 :=
        |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | |   +-Literal(type=INT64, value=1)
        |   | +-$pivot_expr_arg#12 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#5 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-aggregate_list=
          +-sum_key_plus_1_1#6 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-Literal(type=INT64, value=NULL)
          +-avg_key_plus_1_1#7 :=
          | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
          |     +-Literal(type=INT64, value=NULL)
          +-sum_key_plus_1_two#8 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=2)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-Literal(type=INT64, value=NULL)
          +-avg_key_plus_1_two#9 :=
            +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                | +-Literal(type=INT64, value=2)
                +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#12)
                +-Literal(type=INT64, value=NULL)
==

# Integer PIVOT values of various numeric types.
SELECT * FROM (SELECT CAST(3 AS {{INT32|INT64|FLOAT64|NUMERIC|BIGNUMERIC}}) x) t
PIVOT(
  SUM(x) {{sum_x|}}
  FOR x IN (0, 1, -2, NULL)
);
--
ALTERNATION GROUP: INT32,sum_x
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_x_0#3 AS sum_x_0 [INT64]
| +-$pivot.sum_x_1#4 AS sum_x_1 [INT64]
| +-$pivot.sum_x_minus_2#5 AS sum_x_minus_2 [INT64]
| +-$pivot.sum_x_NULL#6 AS sum_x_NULL [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT32, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=53-65
        |   +-Cast(INT32 -> INT64)
        |     +-ColumnRef(type=INT32, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=72-73, type=INT32, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=INT32, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT32, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT32, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT32, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_x_0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_x_1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.sum_x_minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.sum_x_NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUP: INT32,
--
QueryStmt
+-output_column_list=
| +-$pivot._0#3 AS _0 [INT64]
| +-$pivot._1#4 AS _1 [INT64]
| +-$pivot.minus_2#5 AS minus_2 [INT64]
| +-$pivot.NULL#6 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT32, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=53-59
        |   +-Cast(INT32 -> INT64)
        |     +-ColumnRef(type=INT32, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=67-68, type=INT32, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=INT32, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT32, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT32, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT32, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUP: INT64,sum_x
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_x_0#3 AS sum_x_0 [INT64]
| +-$pivot.sum_x_1#4 AS sum_x_1 [INT64]
| +-$pivot.sum_x_minus_2#5 AS sum_x_minus_2 [INT64]
| +-$pivot.sum_x_NULL#6 AS sum_x_NULL [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=53-65
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=72-73, type=INT64, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_x_0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_x_1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.sum_x_minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.sum_x_NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUP: INT64,
--
QueryStmt
+-output_column_list=
| +-$pivot._0#3 AS _0 [INT64]
| +-$pivot._1#4 AS _1 [INT64]
| +-$pivot.minus_2#5 AS minus_2 [INT64]
| +-$pivot.NULL#6 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=53-59
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=67-68, type=INT64, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUPS:
    FLOAT64,sum_x
    FLOAT64,
--
ERROR: PIVOT values of type DOUBLE must specify an alias [at 4:13]
  FOR x IN (0, 1, -2, NULL)
            ^
--
ALTERNATION GROUP: NUMERIC,sum_x
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_x_0#3 AS sum_x_0 [NUMERIC]
| +-$pivot.sum_x_1#4 AS sum_x_1 [NUMERIC]
| +-$pivot.sum_x_minus_2#5 AS sum_x_minus_2 [NUMERIC]
| +-$pivot.sum_x_NULL#6 AS sum_x_NULL [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=NUMERIC, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(NUMERIC) -> NUMERIC)
        |   +-parse_location=55-67
        |   +-ColumnRef(type=NUMERIC, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=74-75, type=NUMERIC, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=NUMERIC, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=NUMERIC, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=NUMERIC, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=NUMERIC, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_x_0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_x_1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.sum_x_minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.sum_x_NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUP: NUMERIC,
--
QueryStmt
+-output_column_list=
| +-$pivot._0#3 AS _0 [NUMERIC]
| +-$pivot._1#4 AS _1 [NUMERIC]
| +-$pivot.minus_2#5 AS minus_2 [NUMERIC]
| +-$pivot.NULL#6 AS `NULL` [NUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=NUMERIC, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(NUMERIC) -> NUMERIC)
        |   +-parse_location=55-61
        |   +-ColumnRef(type=NUMERIC, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=69-70, type=NUMERIC, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=NUMERIC, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=NUMERIC, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=NUMERIC, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=NUMERIC, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUP: BIGNUMERIC,sum_x
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_x_0#3 AS sum_x_0 [BIGNUMERIC]
| +-$pivot.sum_x_1#4 AS sum_x_1 [BIGNUMERIC]
| +-$pivot.sum_x_minus_2#5 AS sum_x_minus_2 [BIGNUMERIC]
| +-$pivot.sum_x_NULL#6 AS sum_x_NULL [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[sum_x_0#3, sum_x_1#4, sum_x_minus_2#5, sum_x_NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=BIGNUMERIC, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(BIGNUMERIC) -> BIGNUMERIC)
        |   +-parse_location=58-70
        |   +-ColumnRef(type=BIGNUMERIC, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=77-78, type=BIGNUMERIC, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=BIGNUMERIC, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BIGNUMERIC, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BIGNUMERIC, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BIGNUMERIC, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_x_0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_x_1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.sum_x_minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.sum_x_NULL#6, pivot_expr_index=0, pivot_value_index=3)
--
ALTERNATION GROUP: BIGNUMERIC,
--
QueryStmt
+-output_column_list=
| +-$pivot._0#3 AS _0 [BIGNUMERIC]
| +-$pivot._1#4 AS _1 [BIGNUMERIC]
| +-$pivot.minus_2#5 AS minus_2 [BIGNUMERIC]
| +-$pivot.NULL#6 AS `NULL` [BIGNUMERIC]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[_0#3, _1#4, minus_2#5, NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[t.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=BIGNUMERIC, value=3, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(BIGNUMERIC) -> BIGNUMERIC)
        |   +-parse_location=58-64
        |   +-ColumnRef(type=BIGNUMERIC, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=72-73, type=BIGNUMERIC, column=t.x#1)
        +-pivot_value_list=
        | +-Literal(type=BIGNUMERIC, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BIGNUMERIC, value=1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BIGNUMERIC, value=-2, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BIGNUMERIC, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._0#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._1#4, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.minus_2#5, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.NULL#6, pivot_expr_index=0, pivot_value_index=3)
==

# Floating-point PIVOT values of various numeric types.
SELECT * FROM (SELECT CAST(3.4 AS {{FLOAT64|NUMERIC|BIGNUMERIC}}) x) t
PIVOT(
  SUM(x) {{sum_x|}}
  FOR x IN (1.2, -5.6, 5.67e26, -8.9e-18, IEEE_DIVIDE(1,0), NULL)
);
--
ALTERNATION GROUPS:
    FLOAT64,sum_x
    FLOAT64,
--
ERROR: PIVOT values of type DOUBLE must specify an alias [at 4:13]
  FOR x IN (1.2, -5.6, 5.67e26, -8.9e-18, IEEE_DIVIDE(1,0), NULL)
            ^
--
ALTERNATION GROUPS:
    NUMERIC,sum_x
    NUMERIC,
--
ERROR: PIVOT IN list item must be type NUMERIC to match the PIVOT FOR expression; found DOUBLE [at 4:43]
  FOR x IN (1.2, -5.6, 5.67e26, -8.9e-18, IEEE_DIVIDE(1,0), NULL)
                                          ^
--
ALTERNATION GROUPS:
    BIGNUMERIC,sum_x
    BIGNUMERIC,
--
ERROR: PIVOT IN list item must be type BIGNUMERIC to match the PIVOT FOR expression; found DOUBLE [at 4:43]
  FOR x IN (1.2, -5.6, 5.67e26, -8.9e-18, IEEE_DIVIDE(1,0), NULL)
                                          ^
==

# PIVOT values of type STRING
SELECT * FROM (SELECT 1 x, 'test' y) t
PIVOT(
  SUM(x) {{sum_x|}}
  FOR y IN ('test', '', NULL)
);
--
ALTERNATION GROUP: sum_x
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_x_test#4 AS sum_x_test [INT64]
| +-$pivot.sum_x__empty_string_value#5 AS sum_x__empty_string_value [INT64]
| +-$pivot.sum_x_NULL#6 AS sum_x_NULL [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[sum_x_test#4, sum_x__empty_string_value#5, sum_x_NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[sum_x_test#4, sum_x__empty_string_value#5, sum_x_NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=STRING, value="test")
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=48-60
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=67-68, type=STRING, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=STRING, value="test", preserve_in_literal_remover=TRUE)
        | +-Literal(type=STRING, value="", preserve_in_literal_remover=TRUE)
        | +-Literal(type=STRING, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_x_test#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_x__empty_string_value#5, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.sum_x_NULL#6, pivot_expr_index=0, pivot_value_index=2)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$pivot.test#4 AS test [INT64]
| +-$pivot.empty_string_value#5 AS empty_string_value [INT64]
| +-$pivot.NULL#6 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[test#4, empty_string_value#5, NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[test#4, empty_string_value#5, NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=STRING, value="test")
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=48-54
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=62-63, type=STRING, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=STRING, value="test", preserve_in_literal_remover=TRUE)
        | +-Literal(type=STRING, value="", preserve_in_literal_remover=TRUE)
        | +-Literal(type=STRING, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.test#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.empty_string_value#5, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.NULL#6, pivot_expr_index=0, pivot_value_index=2)
==

# PIVOT values of type DATE (with implicit coercion from literal strings and
# NULL).
SELECT * FROM (SELECT 1 x, CAST('2015-06-23' AS DATE) y) t
PIVOT(
  SUM(x) {{sum_x|}}
  FOR y IN ('2018-01-01', '2019-01-01', NULL)
);
--
ALTERNATION GROUP: sum_x
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_x_2018_01_01#4 AS sum_x_2018_01_01 [INT64]
| +-$pivot.sum_x_2019_01_01#5 AS sum_x_2019_01_01 [INT64]
| +-$pivot.sum_x_NULL#6 AS sum_x_NULL [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[sum_x_2018_01_01#4, sum_x_2019_01_01#5, sum_x_NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[sum_x_2018_01_01#4, sum_x_2019_01_01#5, sum_x_NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=DATE, value=2015-06-23, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=68-80
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=87-88, type=DATE, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=DATE, value=2018-01-01, preserve_in_literal_remover=TRUE)
        | +-Literal(type=DATE, value=2019-01-01, preserve_in_literal_remover=TRUE)
        | +-Literal(type=DATE, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.sum_x_2018_01_01#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.sum_x_2019_01_01#5, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.sum_x_NULL#6, pivot_expr_index=0, pivot_value_index=2)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$pivot._2018_01_01#4 AS _2018_01_01 [INT64]
| +-$pivot._2019_01_01#5 AS _2019_01_01 [INT64]
| +-$pivot.NULL#6 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[_2018_01_01#4, _2019_01_01#5, NULL#6]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[_2018_01_01#4, _2019_01_01#5, NULL#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=DATE, value=2015-06-23, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=68-74
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=82-83, type=DATE, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=DATE, value=2018-01-01, preserve_in_literal_remover=TRUE)
        | +-Literal(type=DATE, value=2019-01-01, preserve_in_literal_remover=TRUE)
        | +-Literal(type=DATE, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._2018_01_01#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._2019_01_01#5, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.NULL#6, pivot_expr_index=0, pivot_value_index=2)
==

# PIVOT values of type TIME
SELECT * FROM (SELECT 1 x, CAST('2:34:56' AS TIME) y) t
PIVOT(
  SUM(x)
  FOR y IN ('2:34:56'{{ AS mytime|}}, NULL)
);
--
ALTERNATION GROUP:  AS mytime
--
QueryStmt
+-output_column_list=
| +-$pivot.mytime#4 AS mytime [INT64]
| +-$pivot.NULL#5 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[mytime#4, NULL#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[mytime#4, NULL#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=TIME, value=02:34:56, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=65-71
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=78-79, type=TIME, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=TIME, value=02:34:56)
        | +-Literal(type=TIME, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.mytime#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.NULL#5, pivot_expr_index=0, pivot_value_index=1)
--
ALTERNATION GROUP: <empty>
--
ERROR: PIVOT values of type TIME must specify an alias [at 4:13]
  FOR y IN ('2:34:56', NULL)
            ^
==

# PIVOT values of type TIMESTAMP/DATETIME
SELECT * FROM (SELECT 1 x, CAST('2017-03-31' AS {{TIMESTAMP|DATETIME}}) y) t
PIVOT(
  SUM(x)
  FOR y IN ('2017-03-31' {{|AS mytime}}, NULL)
);
--
ALTERNATION GROUP: TIMESTAMP,
--
ERROR: PIVOT values of type TIMESTAMP must specify an alias [at 4:13]
  FOR y IN ('2017-03-31' , NULL)
            ^
--
ALTERNATION GROUP: TIMESTAMP,AS mytime
--
QueryStmt
+-output_column_list=
| +-$pivot.mytime#4 AS mytime [INT64]
| +-$pivot.NULL#5 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[mytime#4, NULL#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[mytime#4, NULL#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=TIMESTAMP, value=2017-03-31 07:00:00+00, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=73-79
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=86-87, type=TIMESTAMP, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=TIMESTAMP, value=2017-03-31 07:00:00+00)
        | +-Literal(type=TIMESTAMP, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.mytime#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.NULL#5, pivot_expr_index=0, pivot_value_index=1)
--
ALTERNATION GROUP: DATETIME,
--
ERROR: PIVOT values of type DATETIME must specify an alias [at 4:13]
  FOR y IN ('2017-03-31' , NULL)
            ^
--
ALTERNATION GROUP: DATETIME,AS mytime
--
QueryStmt
+-output_column_list=
| +-$pivot.mytime#4 AS mytime [INT64]
| +-$pivot.NULL#5 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[mytime#4, NULL#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[mytime#4, NULL#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=DATETIME, value=2017-03-31 00:00:00, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=72-78
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=85-86, type=DATETIME, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=DATETIME, value=2017-03-31 00:00:00)
        | +-Literal(type=DATETIME, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.mytime#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.NULL#5, pivot_expr_index=0, pivot_value_index=1)
==

# PIVOT value with failed literal string->date coercion.
SELECT * FROM (SELECT 1 x, CAST('2015-06-23' AS DATE) y) t
PIVOT(
  SUM(x) {{sum_x|}}
  FOR y IN ('Not a valid date')
);
--
ERROR: Could not cast literal "Not a valid date" to type DATE [at 4:13]
  FOR y IN ('Not a valid date')
            ^
==

# PIVOT values of array type, with explicit and implicit naming.
SELECT * FROM (SELECT 1 x, [1, 2, 3] y) t
PIVOT(
  SUM(x)
  FOR y IN ([1, 2, 3] {{|arr123}}, NULL AS n)
);
--
ALTERNATION GROUP: <empty>
--
ERROR: PIVOT values of type ARRAY<INT64> must specify an alias [at 4:13]
  FOR y IN ([1, 2, 3] , NULL AS n)
            ^
--
ALTERNATION GROUP: arr123
--
QueryStmt
+-output_column_list=
| +-$pivot.arr123#4 AS arr123 [INT64]
| +-$pivot.n#5 AS n [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[arr123#4, n#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[arr123#4, n#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=51-57
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=64-65, type=ARRAY<INT64>, column=t.y#2)
        +-pivot_value_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-Literal(type=ARRAY<INT64>, value=NULL)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.arr123#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.n#5, pivot_expr_index=0, pivot_value_index=1)
==

# Use columns produced by the PIVOT clause outside of the PIVOT clause.
SELECT ANY_VALUE(_1), _2, z
FROM (SELECT 1 AS x, 2 AS y, 3 AS z) kv
PIVOT(
  SUM(x) FOR y IN (1, 2)
)
WHERE _1 > _2 AND _1 > z
GROUP BY _2, z
HAVING _2 > z;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#8 AS `$col1` [INT64]
| +-$groupby._2#9 AS _2 [INT64]
| +-$groupby.z#10 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#8, $groupby._2#9, $groupby.z#10]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby._2#9, $groupby.z#10, $aggregate.$agg1#8]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby._2#9, $groupby.z#10, $aggregate.$agg1#8]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[$groupby.z#5, $pivot._1#6, $pivot._2#7]
        |   |   +-input_scan=
        |   |   | +-PivotScan
        |   |   |   +-column_list=[$groupby.z#5, $pivot._1#6, $pivot._2#7]
        |   |   |   +-input_scan=
        |   |   |   | +-ProjectScan
        |   |   |   |   +-column_list=kv.[x#1, y#2, z#3]
        |   |   |   |   +-expr_list=
        |   |   |   |   | +-x#1 := Literal(type=INT64, value=1)
        |   |   |   |   | +-y#2 := Literal(type=INT64, value=2)
        |   |   |   |   | +-z#3 := Literal(type=INT64, value=3)
        |   |   |   |   +-input_scan=
        |   |   |   |     +-SingleRowScan
        |   |   |   +-group_by_list=
        |   |   |   | +-z#5 := ColumnRef(type=INT64, column=kv.z#3)
        |   |   |   +-pivot_expr_list=
        |   |   |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   |   |   +-parse_location=77-83
        |   |   |   |   +-ColumnRef(type=INT64, column=kv.x#1)
        |   |   |   +-for_expr=
        |   |   |   | +-ColumnRef(parse_location=88-89, type=INT64, column=kv.y#2)
        |   |   |   +-pivot_value_list=
        |   |   |   | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        |   |   |   | +-Literal(type=INT64, value=2, preserve_in_literal_remover=TRUE)
        |   |   |   +-pivot_column_list=
        |   |   |     +-PivotColumn(column=$pivot._1#6, pivot_expr_index=0, pivot_value_index=0)
        |   |   |     +-PivotColumn(column=$pivot._2#7, pivot_expr_index=0, pivot_value_index=1)
        |   |   +-filter_expr=
        |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |       | +-ColumnRef(type=INT64, column=$pivot._1#6)
        |   |       | +-ColumnRef(type=INT64, column=$pivot._2#7)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |         +-ColumnRef(type=INT64, column=$pivot._1#6)
        |   |         +-ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-group_by_list=
        |   | +-_2#9 := ColumnRef(type=INT64, column=$pivot._2#7)
        |   | +-z#10 := ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-aggregate_list=
        |     +-$agg1#8 :=
        |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=$pivot._1#6)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby._2#9)
            +-ColumnRef(type=INT64, column=$groupby.z#10)
==

# Similar to above, except pivot columns have explicit names
SELECT ANY_VALUE(one), two, z
FROM (SELECT 1 AS x, 2 AS y, 3 AS z) kv
PIVOT(
  SUM(x) FOR y IN (1 AS one, 2 AS two)
)
WHERE one > two AND one > z
GROUP BY two, z
HAVING two > z;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#8 AS `$col1` [INT64]
| +-$groupby.two#9 AS two [INT64]
| +-$groupby.z#10 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#8, $groupby.two#9, $groupby.z#10]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.two#9, $groupby.z#10, $aggregate.$agg1#8]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.two#9, $groupby.z#10, $aggregate.$agg1#8]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[$groupby.z#5, $pivot.one#6, $pivot.two#7]
        |   |   +-input_scan=
        |   |   | +-PivotScan
        |   |   |   +-column_list=[$groupby.z#5, $pivot.one#6, $pivot.two#7]
        |   |   |   +-input_scan=
        |   |   |   | +-ProjectScan
        |   |   |   |   +-column_list=kv.[x#1, y#2, z#3]
        |   |   |   |   +-expr_list=
        |   |   |   |   | +-x#1 := Literal(type=INT64, value=1)
        |   |   |   |   | +-y#2 := Literal(type=INT64, value=2)
        |   |   |   |   | +-z#3 := Literal(type=INT64, value=3)
        |   |   |   |   +-input_scan=
        |   |   |   |     +-SingleRowScan
        |   |   |   +-group_by_list=
        |   |   |   | +-z#5 := ColumnRef(type=INT64, column=kv.z#3)
        |   |   |   +-pivot_expr_list=
        |   |   |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   |   |   +-parse_location=79-85
        |   |   |   |   +-ColumnRef(type=INT64, column=kv.x#1)
        |   |   |   +-for_expr=
        |   |   |   | +-ColumnRef(parse_location=90-91, type=INT64, column=kv.y#2)
        |   |   |   +-pivot_value_list=
        |   |   |   | +-Literal(type=INT64, value=1)
        |   |   |   | +-Literal(type=INT64, value=2)
        |   |   |   +-pivot_column_list=
        |   |   |     +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=0)
        |   |   |     +-PivotColumn(column=$pivot.two#7, pivot_expr_index=0, pivot_value_index=1)
        |   |   +-filter_expr=
        |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |       | +-ColumnRef(type=INT64, column=$pivot.one#6)
        |   |       | +-ColumnRef(type=INT64, column=$pivot.two#7)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |         +-ColumnRef(type=INT64, column=$pivot.one#6)
        |   |         +-ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-group_by_list=
        |   | +-two#9 := ColumnRef(type=INT64, column=$pivot.two#7)
        |   | +-z#10 := ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-aggregate_list=
        |     +-$agg1#8 :=
        |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=$pivot.one#6)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.two#9)
            +-ColumnRef(type=INT64, column=$groupby.z#10)
==

# Similar to above, except pivot columns have explicit names
SELECT ANY_VALUE(one), two, z
FROM (SELECT 1 AS x, 2 AS y, 3 AS z) kv
PIVOT(
  SUM(x) FOR y IN (1 AS one, 2 AS two)
)
WHERE one > two AND one > z
GROUP BY two, z
HAVING two > z;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#8 AS `$col1` [INT64]
| +-$groupby.two#9 AS two [INT64]
| +-$groupby.z#10 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#8, $groupby.two#9, $groupby.z#10]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.two#9, $groupby.z#10, $aggregate.$agg1#8]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.two#9, $groupby.z#10, $aggregate.$agg1#8]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[$groupby.z#5, $pivot.one#6, $pivot.two#7]
        |   |   +-input_scan=
        |   |   | +-PivotScan
        |   |   |   +-column_list=[$groupby.z#5, $pivot.one#6, $pivot.two#7]
        |   |   |   +-input_scan=
        |   |   |   | +-ProjectScan
        |   |   |   |   +-column_list=kv.[x#1, y#2, z#3]
        |   |   |   |   +-expr_list=
        |   |   |   |   | +-x#1 := Literal(type=INT64, value=1)
        |   |   |   |   | +-y#2 := Literal(type=INT64, value=2)
        |   |   |   |   | +-z#3 := Literal(type=INT64, value=3)
        |   |   |   |   +-input_scan=
        |   |   |   |     +-SingleRowScan
        |   |   |   +-group_by_list=
        |   |   |   | +-z#5 := ColumnRef(type=INT64, column=kv.z#3)
        |   |   |   +-pivot_expr_list=
        |   |   |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   |   |   +-parse_location=79-85
        |   |   |   |   +-ColumnRef(type=INT64, column=kv.x#1)
        |   |   |   +-for_expr=
        |   |   |   | +-ColumnRef(parse_location=90-91, type=INT64, column=kv.y#2)
        |   |   |   +-pivot_value_list=
        |   |   |   | +-Literal(type=INT64, value=1)
        |   |   |   | +-Literal(type=INT64, value=2)
        |   |   |   +-pivot_column_list=
        |   |   |     +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=0)
        |   |   |     +-PivotColumn(column=$pivot.two#7, pivot_expr_index=0, pivot_value_index=1)
        |   |   +-filter_expr=
        |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |       | +-ColumnRef(type=INT64, column=$pivot.one#6)
        |   |       | +-ColumnRef(type=INT64, column=$pivot.two#7)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |         +-ColumnRef(type=INT64, column=$pivot.one#6)
        |   |         +-ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-group_by_list=
        |   | +-two#9 := ColumnRef(type=INT64, column=$pivot.two#7)
        |   | +-z#10 := ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-aggregate_list=
        |     +-$agg1#8 :=
        |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=$pivot.one#6)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby.two#9)
            +-ColumnRef(type=INT64, column=$groupby.z#10)
==


# Similar to the above test case, except the pivot output now has an explicit
# alias, which is used to qualify all the column references to the pivot table.
# Should still work.
SELECT ANY_VALUE(PivotOutput._1), PivotOutput._2, PivotOutput.z
FROM (SELECT 1 AS x, 2 AS y, 3 AS z) kv
PIVOT(
  SUM(x) FOR y IN (1 {{|AS _1}}, 2 AS _2)
) AS PivotOutput
WHERE PivotOutput._1 > PivotOutput._2 AND PivotOutput._1 > z
GROUP BY PivotOutput._2, PivotOutput.z
HAVING PivotOutput._2 > PivotOutput.z;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#8 AS `$col1` [INT64]
| +-$groupby._2#9 AS _2 [INT64]
| +-$groupby.z#10 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#8, $groupby._2#9, $groupby.z#10]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby._2#9, $groupby.z#10, $aggregate.$agg1#8]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby._2#9, $groupby.z#10, $aggregate.$agg1#8]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[$groupby.z#5, $pivot._1#6, $pivot._2#7]
        |   |   +-input_scan=
        |   |   | +-PivotScan
        |   |   |   +-column_list=[$groupby.z#5, $pivot._1#6, $pivot._2#7]
        |   |   |   +-input_scan=
        |   |   |   | +-ProjectScan
        |   |   |   |   +-column_list=kv.[x#1, y#2, z#3]
        |   |   |   |   +-expr_list=
        |   |   |   |   | +-x#1 := Literal(type=INT64, value=1)
        |   |   |   |   | +-y#2 := Literal(type=INT64, value=2)
        |   |   |   |   | +-z#3 := Literal(type=INT64, value=3)
        |   |   |   |   +-input_scan=
        |   |   |   |     +-SingleRowScan
        |   |   |   +-group_by_list=
        |   |   |   | +-z#5 := ColumnRef(type=INT64, column=kv.z#3)
        |   |   |   +-pivot_expr_list=
        |   |   |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   |   |   +-parse_location=113-119
        |   |   |   |   +-ColumnRef(type=INT64, column=kv.x#1)
        |   |   |   +-for_expr=
        |   |   |   | +-ColumnRef(parse_location=124-125, type=INT64, column=kv.y#2)
        |   |   |   +-pivot_value_list=
        |   |   |   | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        |   |   |   | +-Literal(type=INT64, value=2)
        |   |   |   +-pivot_column_list=
        |   |   |     +-PivotColumn(column=$pivot._1#6, pivot_expr_index=0, pivot_value_index=0)
        |   |   |     +-PivotColumn(column=$pivot._2#7, pivot_expr_index=0, pivot_value_index=1)
        |   |   +-filter_expr=
        |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |       | +-ColumnRef(type=INT64, column=$pivot._1#6)
        |   |       | +-ColumnRef(type=INT64, column=$pivot._2#7)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |         +-ColumnRef(type=INT64, column=$pivot._1#6)
        |   |         +-ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-group_by_list=
        |   | +-_2#9 := ColumnRef(type=INT64, column=$pivot._2#7)
        |   | +-z#10 := ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-aggregate_list=
        |     +-$agg1#8 :=
        |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=$pivot._1#6)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby._2#9)
            +-ColumnRef(type=INT64, column=$groupby.z#10)
--
ALTERNATION GROUP: AS _1
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#8 AS `$col1` [INT64]
| +-$groupby._2#9 AS _2 [INT64]
| +-$groupby.z#10 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#8, $groupby._2#9, $groupby.z#10]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby._2#9, $groupby.z#10, $aggregate.$agg1#8]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby._2#9, $groupby.z#10, $aggregate.$agg1#8]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[$groupby.z#5, $pivot._1#6, $pivot._2#7]
        |   |   +-input_scan=
        |   |   | +-PivotScan
        |   |   |   +-column_list=[$groupby.z#5, $pivot._1#6, $pivot._2#7]
        |   |   |   +-input_scan=
        |   |   |   | +-ProjectScan
        |   |   |   |   +-column_list=kv.[x#1, y#2, z#3]
        |   |   |   |   +-expr_list=
        |   |   |   |   | +-x#1 := Literal(type=INT64, value=1)
        |   |   |   |   | +-y#2 := Literal(type=INT64, value=2)
        |   |   |   |   | +-z#3 := Literal(type=INT64, value=3)
        |   |   |   |   +-input_scan=
        |   |   |   |     +-SingleRowScan
        |   |   |   +-group_by_list=
        |   |   |   | +-z#5 := ColumnRef(type=INT64, column=kv.z#3)
        |   |   |   +-pivot_expr_list=
        |   |   |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   |   |   +-parse_location=113-119
        |   |   |   |   +-ColumnRef(type=INT64, column=kv.x#1)
        |   |   |   +-for_expr=
        |   |   |   | +-ColumnRef(parse_location=124-125, type=INT64, column=kv.y#2)
        |   |   |   +-pivot_value_list=
        |   |   |   | +-Literal(type=INT64, value=1)
        |   |   |   | +-Literal(type=INT64, value=2)
        |   |   |   +-pivot_column_list=
        |   |   |     +-PivotColumn(column=$pivot._1#6, pivot_expr_index=0, pivot_value_index=0)
        |   |   |     +-PivotColumn(column=$pivot._2#7, pivot_expr_index=0, pivot_value_index=1)
        |   |   +-filter_expr=
        |   |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |       | +-ColumnRef(type=INT64, column=$pivot._1#6)
        |   |       | +-ColumnRef(type=INT64, column=$pivot._2#7)
        |   |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |         +-ColumnRef(type=INT64, column=$pivot._1#6)
        |   |         +-ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-group_by_list=
        |   | +-_2#9 := ColumnRef(type=INT64, column=$pivot._2#7)
        |   | +-z#10 := ColumnRef(type=INT64, column=$groupby.z#5)
        |   +-aggregate_list=
        |     +-$agg1#8 :=
        |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=$pivot._1#6)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$groupby._2#9)
            +-ColumnRef(type=INT64, column=$groupby.z#10)
==

# Use of pivot input alias output the pivot clause is not allowed.
SELECT kv.z
FROM (SELECT 1 AS x, 2 AS y, 3 AS z) kv
PIVOT(
  SUM(x) FOR y IN (1 AS one, 2 AS two)
) AS PivotOutput;
--
ERROR: Unrecognized name: kv [at 1:8]
SELECT kv.z
       ^
==

# Should not be able to directly reference columns from the pivot input that
# are not group-by columns outside the pivot clause.
SELECT *
FROM (SELECT 1 AS x, 2 AS y, 3 AS z) kv
PIVOT(
  SUM(x) FOR y IN (1 AS one, 2 AS two)
) AS PivotOutput
WHERE {{x|y}} = 1;
--
ALTERNATION GROUP: x
--
ERROR: Unrecognized name: x [at 6:7]
WHERE x = 1;
      ^
--
ALTERNATION GROUP: y
--
ERROR: Unrecognized name: y [at 6:7]
WHERE y = 1;
      ^
==

# Default column names for pivot values of type BOOL
SELECT * FROM (SELECT TRUE AS x) PIVOT(ANY_VALUE(x) FOR x IN (TRUE, FALSE));
--
QueryStmt
+-output_column_list=
| +-$pivot.true#3 AS `true` [BOOL]
| +-$pivot.false#4 AS `false` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[true#3, false#4]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[true#3, false#4]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=BOOL, value=true)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(BOOL) -> BOOL)
        |   +-parse_location=39-51
        |   +-ColumnRef(type=BOOL, column=$subquery1.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=56-57, type=BOOL, column=$subquery1.x#1)
        +-pivot_value_list=
        | +-Literal(type=BOOL, value=true, preserve_in_literal_remover=TRUE)
        | +-Literal(type=BOOL, value=false, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.true#3, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.false#4, pivot_expr_index=0, pivot_value_index=1)
==

# Subquery from proto table used as pivot input
SELECT * FROM (
  SELECT int64_key_1, int64_key_2 FROM KitchenSinkValueTable)
  PIVOT(SUM(int64_key_1) FOR int64_key_2 IN (0 AS zero, 1 AS one, 2 AS two));
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.one#6 AS one [INT64]
| +-$pivot.two#7 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#5, one#6, two#7]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#5, one#6, two#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[int64_key_1#2, int64_key_2#3]
        |   +-expr_list=
        |   | +-int64_key_1#2 :=
        |   | | +-GetProtoField
        |   | |   +-type=INT64
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        |   | |   +-field_descriptor=int64_key_1
        |   | +-int64_key_2#3 :=
        |   |   +-GetProtoField
        |   |     +-type=INT64
        |   |     +-expr=
        |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        |   |     +-field_descriptor=int64_key_2
        |   +-input_scan=
        |     +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=86-102
        |   +-ColumnRef(type=INT64, column=$subquery1.int64_key_1#2)
        +-for_expr=
        | +-ColumnRef(parse_location=107-118, type=INT64, column=$subquery1.int64_key_2#3)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=2)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.two#7, pivot_expr_index=0, pivot_value_index=2)
==

# PIVOT expressions using struct fields from table columns
WITH t AS (
  SELECT STRUCT(
    1 AS x,
    'test' AS y,
    TRUE,  -- Unnamed column
    BIGNUMERIC '3.14159265358979' AS pi
  ) AS s
) SELECT * FROM t PIVOT(SUM(s.x) FOR s.y IN ('test1', 'test2'));
--
QueryStmt
+-output_column_list=
| +-$pivot.test1#4 AS test1 [INT64]
| +-$pivot.test2#5 AS test2 [INT64]
+-query=
  +-WithScan
    +-column_list=$pivot.[test1#4, test2#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.s#1]
    |       +-expr_list=
    |       | +-s#1 :=
    |       |   +-MakeStruct
    |       |     +-type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>
    |       |     +-field_list=
    |       |       +-Literal(type=INT64, value=1)
    |       |       +-Literal(type=STRING, value="test")
    |       |       +-Literal(type=BOOL, value=true)
    |       |       +-Literal(type=BIGNUMERIC, value=3.14159265358979, has_explicit_type=TRUE)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=$pivot.[test1#4, test2#5]
        +-input_scan=
          +-PivotScan
            +-column_list=$pivot.[test1#4, test2#5]
            +-input_scan=
            | +-WithRefScan(column_list=[t.s#2], with_query_name="t")
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=160-168
            |   +-GetStructField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>, column=t.s#2)
            |     +-field_idx=0
            +-for_expr=
            | +-GetStructField
            |   +-parse_location=173-176
            |   +-type=STRING
            |   +-expr=
            |   | +-ColumnRef(type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>, column=t.s#2)
            |   +-field_idx=1
            +-pivot_value_list=
            | +-Literal(type=STRING, value="test1", preserve_in_literal_remover=TRUE)
            | +-Literal(type=STRING, value="test2", preserve_in_literal_remover=TRUE)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.test1#4, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.test2#5, pivot_expr_index=0, pivot_value_index=1)
==

# Default column names for pivot values of type STRUCT of primitives
WITH t AS (
  SELECT STRUCT(
    1 AS x,
    'test' AS y,
    TRUE,  -- Unnamed column
    BIGNUMERIC '3.14159265358979' AS pi
  ) AS s
) SELECT
    x_1_y_test_true_pi_3_point_14159265358979,
    x_2_y_test_true_pi_3_point_14159265358979
FROM t
  PIVOT(SUM(s.x) FOR s IN (
    STRUCT(1, 'test', TRUE, BIGNUMERIC '3.14159265358979'),
    STRUCT(2, 'test', TRUE, BIGNUMERIC '3.14159265358979'),
    NULL
));
--
QueryStmt
+-output_column_list=
| +-$pivot.x_1_y_test_true_pi_3_point_14159265358979#4 AS x_1_y_test_true_pi_3_point_14159265358979 [INT64]
| +-$pivot.x_2_y_test_true_pi_3_point_14159265358979#5 AS x_2_y_test_true_pi_3_point_14159265358979 [INT64]
+-query=
  +-WithScan
    +-column_list=$pivot.[x_1_y_test_true_pi_3_point_14159265358979#4, x_2_y_test_true_pi_3_point_14159265358979#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.s#1]
    |       +-expr_list=
    |       | +-s#1 :=
    |       |   +-MakeStruct
    |       |     +-type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>
    |       |     +-field_list=
    |       |       +-Literal(type=INT64, value=1)
    |       |       +-Literal(type=STRING, value="test")
    |       |       +-Literal(type=BOOL, value=true)
    |       |       +-Literal(type=BIGNUMERIC, value=3.14159265358979, has_explicit_type=TRUE)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=$pivot.[x_1_y_test_true_pi_3_point_14159265358979#4, x_2_y_test_true_pi_3_point_14159265358979#5]
        +-input_scan=
          +-PivotScan
            +-column_list=$pivot.[x_1_y_test_true_pi_3_point_14159265358979#4, x_2_y_test_true_pi_3_point_14159265358979#5]
            +-input_scan=
            | +-WithRefScan(column_list=[t.s#2], with_query_name="t")
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=253-261
            |   +-GetStructField
            |     +-type=INT64
            |     +-expr=
            |     | +-ColumnRef(type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>, column=t.s#2)
            |     +-field_idx=0
            +-for_expr=
            | +-ColumnRef(parse_location=266-267, type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>, column=t.s#2)
            +-pivot_value_list=
            | +-MakeStruct
            | | +-type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>
            | | +-field_list=
            | |   +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=STRING, value="test", preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=BOOL, value=true, preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=BIGNUMERIC, value=3.14159265358979, has_explicit_type=TRUE, preserve_in_literal_remover=TRUE)
            | +-MakeStruct
            | | +-type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>
            | | +-field_list=
            | |   +-Literal(type=INT64, value=2, preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=STRING, value="test", preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=BOOL, value=true, preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=BIGNUMERIC, value=3.14159265358979, has_explicit_type=TRUE, preserve_in_literal_remover=TRUE)
            | +-Literal(type=STRUCT<x INT64, y STRING, BOOL, pi BIGNUMERIC>, value=NULL, preserve_in_literal_remover=TRUE)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.x_1_y_test_true_pi_3_point_14159265358979#4, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.x_2_y_test_true_pi_3_point_14159265358979#5, pivot_expr_index=0, pivot_value_index=1)
==

# Default column names when PIVOT value is enum type
SELECT
  TESTENUM0,
  TESTENUM1,
  TESTENUMNEGATIVE,
  `NULL`
  FROM (
  SELECT int64_key_1, test_enum FROM KitchenSinkValueTable)
  PIVOT(SUM(int64_key_1)
        FOR test_enum IN (
          'TESTENUM0',
          'TESTENUM1',
          'TESTENUMNEGATIVE',
          NULL));
--
QueryStmt
+-output_column_list=
| +-$pivot.TESTENUM0#5 AS TESTENUM0 [INT64]
| +-$pivot.TESTENUM1#6 AS TESTENUM1 [INT64]
| +-$pivot.TESTENUMNEGATIVE#7 AS TESTENUMNEGATIVE [INT64]
| +-$pivot.NULL#8 AS `NULL` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[TESTENUM0#5, TESTENUM1#6, TESTENUMNEGATIVE#7, NULL#8]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[TESTENUM0#5, TESTENUM1#6, TESTENUMNEGATIVE#7, NULL#8]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[int64_key_1#2, test_enum#3]
        |   +-expr_list=
        |   | +-int64_key_1#2 :=
        |   | | +-GetProtoField
        |   | |   +-type=INT64
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        |   | |   +-field_descriptor=int64_key_1
        |   | +-test_enum#3 :=
        |   |   +-GetProtoField
        |   |     +-type=ENUM<zetasql_test__.TestEnum>
        |   |     +-expr=
        |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        |   |     +-field_descriptor=test_enum
        |   |     +-default_value=TESTENUM0
        |   +-input_scan=
        |     +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=139-155
        |   +-ColumnRef(type=INT64, column=$subquery1.int64_key_1#2)
        +-for_expr=
        | +-ColumnRef(parse_location=168-177, type=ENUM<zetasql_test__.TestEnum>, column=$subquery1.test_enum#3)
        +-pivot_value_list=
        | +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUM1, preserve_in_literal_remover=TRUE)
        | +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=TESTENUMNEGATIVE, preserve_in_literal_remover=TRUE)
        | +-Literal(type=ENUM<zetasql_test__.TestEnum>, value=NULL, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.TESTENUM0#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.TESTENUM1#6, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.TESTENUMNEGATIVE#7, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.NULL#8, pivot_expr_index=0, pivot_value_index=3)
==

# Proto values are not groupable.
SELECT
  *
  FROM (
  SELECT int64_key_1, nested_value FROM KitchenSinkValueTable)
  PIVOT(SUM(int64_key_1)
        FOR nested_value IN (
          new zetasql_test__.KitchenSinkPB.Nested(
              100 AS nested_int64) {{|proto_val}},
          NULL));
--
ERROR: Type PROTO cannot be used as a FOR expression because it is not groupable [at 6:13]
        FOR nested_value IN (
            ^
==

# Default column names for STRUCT values with nested structs
WITH t AS (
  SELECT STRUCT(
    STRUCT(1 AS x, 2 AS y) AS xy,
    STRUCT('test_a' AS a, TRUE AS b) AS ab
  ) AS s
) SELECT
    xy_x_1_y_2_ab_a_test_a_b_false,
    xy_x_minus_1_y_minus_2_ab_a_NULL_b_false,
    xy_x_minus_1_y_NULL_ab_NULL,
    `NULL`
FROM t
  PIVOT(ANY_VALUE(s) FOR s IN (
    STRUCT(STRUCT(1, 2), STRUCT('test_a', FALSE)),
    STRUCT(STRUCT(-1, -2), STRUCT(NULL, FALSE)),
    STRUCT(STRUCT(-1, NULL), NULL),
    NULL
));
--
QueryStmt
+-output_column_list=
| +-$pivot.xy_x_1_y_2_ab_a_test_a_b_false#4 AS xy_x_1_y_2_ab_a_test_a_b_false [STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>]
| +-$pivot.xy_x_minus_1_y_minus_2_ab_a_NULL_b_false#5 AS xy_x_minus_1_y_minus_2_ab_a_NULL_b_false [STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>]
| +-$pivot.xy_x_minus_1_y_NULL_ab_NULL#6 AS xy_x_minus_1_y_NULL_ab_NULL [STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>]
| +-$pivot.NULL#7 AS `NULL` [STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>]
+-query=
  +-WithScan
    +-column_list=$pivot.[xy_x_1_y_2_ab_a_test_a_b_false#4, xy_x_minus_1_y_minus_2_ab_a_NULL_b_false#5, xy_x_minus_1_y_NULL_ab_NULL#6, NULL#7]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.s#1]
    |       +-expr_list=
    |       | +-s#1 := Literal(type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>, value={xy:{x:1, y:2}, ab:{a:"test_a", b:true}})
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=$pivot.[xy_x_1_y_2_ab_a_test_a_b_false#4, xy_x_minus_1_y_minus_2_ab_a_NULL_b_false#5, xy_x_minus_1_y_NULL_ab_NULL#6, NULL#7]
        +-input_scan=
          +-PivotScan
            +-column_list=$pivot.[xy_x_1_y_2_ab_a_test_a_b_false#4, xy_x_minus_1_y_minus_2_ab_a_NULL_b_false#5, xy_x_minus_1_y_NULL_ab_NULL#6, NULL#7]
            +-input_scan=
            | +-WithRefScan(column_list=[t.s#2], with_query_name="t")
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:any_value(STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>) -> STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>)
            |   +-parse_location=265-277
            |   +-ColumnRef(type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>, column=t.s#2)
            +-for_expr=
            | +-ColumnRef(parse_location=282-283, type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>, column=t.s#2)
            +-pivot_value_list=
            | +-Literal(type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>, value={xy:{x:1, y:2}, ab:{a:"test_a", b:false}}, preserve_in_literal_remover=TRUE)
            | +-MakeStruct
            | | +-type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>
            | | +-field_list=
            | |   +-Literal(type=STRUCT<x INT64, y INT64>, value={x:-1, y:-2}, preserve_in_literal_remover=TRUE)
            | |   +-MakeStruct
            | |     +-type=STRUCT<a STRING, b BOOL>
            | |     +-field_list=
            | |       +-Literal(type=STRING, value=NULL, preserve_in_literal_remover=TRUE)
            | |       +-Literal(type=BOOL, value=false, preserve_in_literal_remover=TRUE)
            | +-MakeStruct
            | | +-type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>
            | | +-field_list=
            | |   +-MakeStruct
            | |   | +-type=STRUCT<x INT64, y INT64>
            | |   | +-field_list=
            | |   |   +-Literal(type=INT64, value=-1, preserve_in_literal_remover=TRUE)
            | |   |   +-Literal(type=INT64, value=NULL, preserve_in_literal_remover=TRUE)
            | |   +-Literal(type=STRUCT<a STRING, b BOOL>, value=NULL, preserve_in_literal_remover=TRUE)
            | +-Literal(type=STRUCT<xy STRUCT<x INT64, y INT64>, ab STRUCT<a STRING, b BOOL>>, value=NULL, preserve_in_literal_remover=TRUE)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.xy_x_1_y_2_ab_a_test_a_b_false#4, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.xy_x_minus_1_y_minus_2_ab_a_NULL_b_false#5, pivot_expr_index=0, pivot_value_index=1)
              +-PivotColumn(column=$pivot.xy_x_minus_1_y_NULL_ab_NULL#6, pivot_expr_index=0, pivot_value_index=2)
              +-PivotColumn(column=$pivot.NULL#7, pivot_expr_index=0, pivot_value_index=3)
==

# Correlated column references from PIVOT expressions (unqualified)
WITH
  t1 AS (SELECT 1 AS a, 2 AS b),
  t2 AS (SELECT 3 AS c, 4 AS d)
SELECT (SELECT AS STRUCT * FROM t1
         PIVOT(
           COUNTIF(a + c > b + d) count,
           SUM(a + b + c + d) sum
           FOR a + b IN (1 AS one, 2 AS two, 3 AS three, 4 AS four)))
FROM t2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#20]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=t1.[a#1, b#2]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     | +-b#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t2.[c#3, d#4]
    |       +-expr_list=
    |       | +-c#3 := Literal(type=INT64, value=3)
    |       | +-d#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#20]
        +-expr_list=
        | +-$col1#20 :=
        |   +-SubqueryExpr
        |     +-type=STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t2.c#5)
        |     | +-ColumnRef(type=INT64, column=t2.d#6)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#19]
        |         +-expr_list=
        |         | +-$struct#19 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_one#11)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_one#12)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_two#13)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_two#14)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_three#15)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_three#16)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_four#17)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_four#18)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$pivot.[count_one#11, sum_one#12, count_two#13, sum_two#14, count_three#15, sum_three#16, count_four#17, sum_four#18]
        |             +-input_scan=
        |               +-PivotScan
        |                 +-column_list=$pivot.[count_one#11, sum_one#12, count_two#13, sum_two#14, count_three#15, sum_three#16, count_four#17, sum_four#18]
        |                 +-input_scan=
        |                 | +-WithRefScan(column_list=t1.[a#7, b#8], with_query_name="t1")
        |                 +-pivot_expr_list=
        |                 | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
        |                 | | +-parse_location=132-160
        |                 | | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |   | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 | |   | +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |     +-ColumnRef(type=INT64, column=t1.b#8)
        |                 | |     +-ColumnRef(type=INT64, column=t2.d#6, is_correlated=TRUE)
        |                 | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                 |   +-parse_location=173-195
        |                 |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |     | +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 |     +-ColumnRef(type=INT64, column=t2.d#6, is_correlated=TRUE)
        |                 +-for_expr=
        |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   +-parse_location=211-216
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   +-ColumnRef(type=INT64, column=t1.b#8)
        |                 +-pivot_value_list=
        |                 | +-Literal(type=INT64, value=1)
        |                 | +-Literal(type=INT64, value=2)
        |                 | +-Literal(type=INT64, value=3)
        |                 | +-Literal(type=INT64, value=4)
        |                 +-pivot_column_list=
        |                   +-PivotColumn(column=$pivot.count_one#11, pivot_expr_index=0, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.sum_one#12, pivot_expr_index=1, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.count_two#13, pivot_expr_index=0, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.sum_two#14, pivot_expr_index=1, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.count_three#15, pivot_expr_index=0, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.sum_three#16, pivot_expr_index=1, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.count_four#17, pivot_expr_index=0, pivot_value_index=3)
        |                   +-PivotColumn(column=$pivot.sum_four#18, pivot_expr_index=1, pivot_value_index=3)
        +-input_scan=
          +-WithRefScan(column_list=t2.[c#5, d#6], with_query_name="t2")
==

# Correlated column references from PIVOT expressions (qualified)
WITH
  t1 AS (SELECT 1 AS a, 2 AS b),
  t2 AS (SELECT 3 AS c, 4 AS d)
SELECT (SELECT AS STRUCT * FROM t1
         PIVOT(
           COUNTIF(t1.a + t2.c > t1.b + t2.d) count,
           SUM(t1.a + t1.b + t2.c + t2.d) sum
           FOR a + b IN (1 AS one, 2 AS two, 3 AS three, 4 AS four)))
FROM t2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#20]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=t1.[a#1, b#2]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     | +-b#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t2.[c#3, d#4]
    |       +-expr_list=
    |       | +-c#3 := Literal(type=INT64, value=3)
    |       | +-d#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#20]
        +-expr_list=
        | +-$col1#20 :=
        |   +-SubqueryExpr
        |     +-type=STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t2.c#5)
        |     | +-ColumnRef(type=INT64, column=t2.d#6)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#19]
        |         +-expr_list=
        |         | +-$struct#19 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_one#11)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_one#12)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_two#13)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_two#14)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_three#15)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_three#16)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_four#17)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_four#18)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$pivot.[count_one#11, sum_one#12, count_two#13, sum_two#14, count_three#15, sum_three#16, count_four#17, sum_four#18]
        |             +-input_scan=
        |               +-PivotScan
        |                 +-column_list=$pivot.[count_one#11, sum_one#12, count_two#13, sum_two#14, count_three#15, sum_three#16, count_four#17, sum_four#18]
        |                 +-input_scan=
        |                 | +-WithRefScan(column_list=t1.[a#7, b#8], with_query_name="t1")
        |                 +-pivot_expr_list=
        |                 | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
        |                 | | +-parse_location=132-172
        |                 | | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |   | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 | |   | +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |     +-ColumnRef(type=INT64, column=t1.b#8)
        |                 | |     +-ColumnRef(type=INT64, column=t2.d#6, is_correlated=TRUE)
        |                 | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                 |   +-parse_location=185-219
        |                 |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |     | +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 |     +-ColumnRef(type=INT64, column=t2.d#6, is_correlated=TRUE)
        |                 +-for_expr=
        |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   +-parse_location=235-240
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   +-ColumnRef(type=INT64, column=t1.b#8)
        |                 +-pivot_value_list=
        |                 | +-Literal(type=INT64, value=1)
        |                 | +-Literal(type=INT64, value=2)
        |                 | +-Literal(type=INT64, value=3)
        |                 | +-Literal(type=INT64, value=4)
        |                 +-pivot_column_list=
        |                   +-PivotColumn(column=$pivot.count_one#11, pivot_expr_index=0, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.sum_one#12, pivot_expr_index=1, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.count_two#13, pivot_expr_index=0, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.sum_two#14, pivot_expr_index=1, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.count_three#15, pivot_expr_index=0, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.sum_three#16, pivot_expr_index=1, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.count_four#17, pivot_expr_index=0, pivot_value_index=3)
        |                   +-PivotColumn(column=$pivot.sum_four#18, pivot_expr_index=1, pivot_value_index=3)
        +-input_scan=
          +-WithRefScan(column_list=t2.[c#5, d#6], with_query_name="t2")
==

# Correlated column references from PIVOT expressions (name collision)
WITH
  t1 AS (SELECT 1 AS a, 2 AS b),
  t2 AS (SELECT 3 AS a, 4 AS b)
SELECT (SELECT AS STRUCT * FROM t1
         PIVOT(
           COUNTIF(a + t1.a + t2.a > b + t1.b + t2.b) count,
           LOGICAL_AND(a + t1.a + t2.a > b + t1.b + t2.b) sum
           FOR (a + t1.a + t2.a > b + t1.b + t2.b)
           IN (TRUE AS t, FALSE AS f, NULL AS n)))
FROM t2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS `$col1` [STRUCT<count_t INT64, sum_t BOOL, count_f INT64, sum_f BOOL, count_n INT64, sum_n BOOL>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#18]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=t1.[a#1, b#2]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     | +-b#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t2.[a#3, b#4]
    |       +-expr_list=
    |       | +-a#3 := Literal(type=INT64, value=3)
    |       | +-b#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#18]
        +-expr_list=
        | +-$col1#18 :=
        |   +-SubqueryExpr
        |     +-type=STRUCT<count_t INT64, sum_t BOOL, count_f INT64, sum_f BOOL, count_n INT64, sum_n BOOL>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t2.a#5)
        |     | +-ColumnRef(type=INT64, column=t2.b#6)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#17]
        |         +-expr_list=
        |         | +-$struct#17 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<count_t INT64, sum_t BOOL, count_f INT64, sum_f BOOL, count_n INT64, sum_n BOOL>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_t#11)
        |         |       +-ColumnRef(type=BOOL, column=$pivot.sum_t#12)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_f#13)
        |         |       +-ColumnRef(type=BOOL, column=$pivot.sum_f#14)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_n#15)
        |         |       +-ColumnRef(type=BOOL, column=$pivot.sum_n#16)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$pivot.[count_t#11, sum_t#12, count_f#13, sum_f#14, count_n#15, sum_n#16]
        |             +-input_scan=
        |               +-PivotScan
        |                 +-column_list=$pivot.[count_t#11, sum_t#12, count_f#13, sum_f#14, count_n#15, sum_n#16]
        |                 +-input_scan=
        |                 | +-WithRefScan(column_list=t1.[a#7, b#8], with_query_name="t1")
        |                 +-pivot_expr_list=
        |                 | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
        |                 | | +-parse_location=132-180
        |                 | | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |   | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |   | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 | |   | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 | |   | +-ColumnRef(type=INT64, column=t2.a#5, is_correlated=TRUE)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |     | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 | |     | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 | |     +-ColumnRef(type=INT64, column=t2.b#6, is_correlated=TRUE)
        |                 | +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
        |                 |   +-parse_location=193-243
        |                 |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |                 |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |     | +-ColumnRef(type=INT64, column=t2.a#5, is_correlated=TRUE)
        |                 |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |       | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |       | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |       +-ColumnRef(type=INT64, column=t2.b#6, is_correlated=TRUE)
        |                 +-for_expr=
        |                 | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |                 |   +-parse_location=260-293
        |                 |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   | +-ColumnRef(type=INT64, column=t2.a#5, is_correlated=TRUE)
        |                 |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |     | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |     +-ColumnRef(type=INT64, column=t2.b#6, is_correlated=TRUE)
        |                 +-pivot_value_list=
        |                 | +-Literal(type=BOOL, value=true)
        |                 | +-Literal(type=BOOL, value=false)
        |                 | +-Literal(type=BOOL, value=NULL)
        |                 +-pivot_column_list=
        |                   +-PivotColumn(column=$pivot.count_t#11, pivot_expr_index=0, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.sum_t#12, pivot_expr_index=1, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.count_f#13, pivot_expr_index=0, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.sum_f#14, pivot_expr_index=1, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.count_n#15, pivot_expr_index=0, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.sum_n#16, pivot_expr_index=1, pivot_value_index=2)
        +-input_scan=
          +-WithRefScan(column_list=t2.[a#5, b#6], with_query_name="t2")
==


# Correlated column references from PIVOT expressions (qualified)
WITH
  t1 AS (SELECT 1 AS a, 2 AS b),
  t2 AS (SELECT 3 AS c, 4 AS d)
SELECT (SELECT AS STRUCT * FROM t1
         PIVOT(
           COUNTIF(t1.a + t2.c > t1.b + t2.d) count,
           SUM(t1.a + t1.b + t2.c + t2.d) sum
           FOR a + b IN (1 AS one, 2 AS two, 3 AS three, 4 AS four)))
FROM t2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#20]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=t1.[a#1, b#2]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     | +-b#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t2.[c#3, d#4]
    |       +-expr_list=
    |       | +-c#3 := Literal(type=INT64, value=3)
    |       | +-d#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#20]
        +-expr_list=
        | +-$col1#20 :=
        |   +-SubqueryExpr
        |     +-type=STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t2.c#5)
        |     | +-ColumnRef(type=INT64, column=t2.d#6)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#19]
        |         +-expr_list=
        |         | +-$struct#19 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<count_one INT64, sum_one INT64, count_two INT64, sum_two INT64, count_three INT64, sum_three INT64, count_four INT64, sum_four INT64>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_one#11)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_one#12)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_two#13)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_two#14)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_three#15)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_three#16)
        |         |       +-ColumnRef(type=INT64, column=$pivot.count_four#17)
        |         |       +-ColumnRef(type=INT64, column=$pivot.sum_four#18)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$pivot.[count_one#11, sum_one#12, count_two#13, sum_two#14, count_three#15, sum_three#16, count_four#17, sum_four#18]
        |             +-input_scan=
        |               +-PivotScan
        |                 +-column_list=$pivot.[count_one#11, sum_one#12, count_two#13, sum_two#14, count_three#15, sum_three#16, count_four#17, sum_four#18]
        |                 +-input_scan=
        |                 | +-WithRefScan(column_list=t1.[a#7, b#8], with_query_name="t1")
        |                 +-pivot_expr_list=
        |                 | +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
        |                 | | +-parse_location=132-172
        |                 | | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |   | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 | |   | +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 | |     +-ColumnRef(type=INT64, column=t1.b#8)
        |                 | |     +-ColumnRef(type=INT64, column=t2.d#6, is_correlated=TRUE)
        |                 | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                 |   +-parse_location=185-219
        |                 |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |     | | +-ColumnRef(type=INT64, column=t1.b#8)
        |                 |     | +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 |     +-ColumnRef(type=INT64, column=t2.d#6, is_correlated=TRUE)
        |                 +-for_expr=
        |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   +-parse_location=235-240
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   +-ColumnRef(type=INT64, column=t1.b#8)
        |                 +-pivot_value_list=
        |                 | +-Literal(type=INT64, value=1)
        |                 | +-Literal(type=INT64, value=2)
        |                 | +-Literal(type=INT64, value=3)
        |                 | +-Literal(type=INT64, value=4)
        |                 +-pivot_column_list=
        |                   +-PivotColumn(column=$pivot.count_one#11, pivot_expr_index=0, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.sum_one#12, pivot_expr_index=1, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.count_two#13, pivot_expr_index=0, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.sum_two#14, pivot_expr_index=1, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.count_three#15, pivot_expr_index=0, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.sum_three#16, pivot_expr_index=1, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.count_four#17, pivot_expr_index=0, pivot_value_index=3)
        |                   +-PivotColumn(column=$pivot.sum_four#18, pivot_expr_index=1, pivot_value_index=3)
        +-input_scan=
          +-WithRefScan(column_list=t2.[c#5, d#6], with_query_name="t2")
==

# Correlated column references for FOR expression (qualified and unqualified)
WITH
  t1 AS (SELECT 1 AS a, 2 AS b),
  t2 AS (SELECT 3 AS c, 4 AS d)
SELECT (SELECT AS STRUCT * FROM t1
         PIVOT(SUM(t1.a)
         FOR a + {{c|t2.c}} IN (1 AS one, 2 AS two, 3 AS three, 4 AS four)))
FROM t2;
--
ALTERNATION GROUP: c
--
QueryStmt
+-output_column_list=
| +-$query.$col1#16 AS `$col1` [STRUCT<b INT64, one INT64, two INT64, three INT64, four INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#16]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=t1.[a#1, b#2]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     | +-b#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t2.[c#3, d#4]
    |       +-expr_list=
    |       | +-c#3 := Literal(type=INT64, value=3)
    |       | +-d#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#16]
        +-expr_list=
        | +-$col1#16 :=
        |   +-SubqueryExpr
        |     +-type=STRUCT<b INT64, one INT64, two INT64, three INT64, four INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t2.c#5)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#15]
        |         +-expr_list=
        |         | +-$struct#15 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<b INT64, one INT64, two INT64, three INT64, four INT64>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=INT64, column=$groupby.b#10)
        |         |       +-ColumnRef(type=INT64, column=$pivot.one#11)
        |         |       +-ColumnRef(type=INT64, column=$pivot.two#12)
        |         |       +-ColumnRef(type=INT64, column=$pivot.three#13)
        |         |       +-ColumnRef(type=INT64, column=$pivot.four#14)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$groupby.b#10, $pivot.one#11, $pivot.two#12, $pivot.three#13, $pivot.four#14]
        |             +-input_scan=
        |               +-PivotScan
        |                 +-column_list=[$groupby.b#10, $pivot.one#11, $pivot.two#12, $pivot.three#13, $pivot.four#14]
        |                 +-input_scan=
        |                 | +-WithRefScan(column_list=t1.[a#7, b#8], with_query_name="t1")
        |                 +-group_by_list=
        |                 | +-b#10 := ColumnRef(type=INT64, column=t1.b#8)
        |                 +-pivot_expr_list=
        |                 | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                 |   +-parse_location=120-129
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 +-for_expr=
        |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   +-parse_location=143-148
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 +-pivot_value_list=
        |                 | +-Literal(type=INT64, value=1)
        |                 | +-Literal(type=INT64, value=2)
        |                 | +-Literal(type=INT64, value=3)
        |                 | +-Literal(type=INT64, value=4)
        |                 +-pivot_column_list=
        |                   +-PivotColumn(column=$pivot.one#11, pivot_expr_index=0, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.two#12, pivot_expr_index=0, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.three#13, pivot_expr_index=0, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.four#14, pivot_expr_index=0, pivot_value_index=3)
        +-input_scan=
          +-WithRefScan(column_list=t2.[c#5, d#6], with_query_name="t2")
--
ALTERNATION GROUP: t2.c
--
QueryStmt
+-output_column_list=
| +-$query.$col1#16 AS `$col1` [STRUCT<b INT64, one INT64, two INT64, three INT64, four INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#16]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=t1.[a#1, b#2]
    | |     +-expr_list=
    | |     | +-a#1 := Literal(type=INT64, value=1)
    | |     | +-b#2 := Literal(type=INT64, value=2)
    | |     +-input_scan=
    | |       +-SingleRowScan
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t2.[c#3, d#4]
    |       +-expr_list=
    |       | +-c#3 := Literal(type=INT64, value=3)
    |       | +-d#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#16]
        +-expr_list=
        | +-$col1#16 :=
        |   +-SubqueryExpr
        |     +-type=STRUCT<b INT64, one INT64, two INT64, three INT64, four INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t2.c#5)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$make_struct.$struct#15]
        |         +-expr_list=
        |         | +-$struct#15 :=
        |         |   +-MakeStruct
        |         |     +-type=STRUCT<b INT64, one INT64, two INT64, three INT64, four INT64>
        |         |     +-field_list=
        |         |       +-ColumnRef(type=INT64, column=$groupby.b#10)
        |         |       +-ColumnRef(type=INT64, column=$pivot.one#11)
        |         |       +-ColumnRef(type=INT64, column=$pivot.two#12)
        |         |       +-ColumnRef(type=INT64, column=$pivot.three#13)
        |         |       +-ColumnRef(type=INT64, column=$pivot.four#14)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$groupby.b#10, $pivot.one#11, $pivot.two#12, $pivot.three#13, $pivot.four#14]
        |             +-input_scan=
        |               +-PivotScan
        |                 +-column_list=[$groupby.b#10, $pivot.one#11, $pivot.two#12, $pivot.three#13, $pivot.four#14]
        |                 +-input_scan=
        |                 | +-WithRefScan(column_list=t1.[a#7, b#8], with_query_name="t1")
        |                 +-group_by_list=
        |                 | +-b#10 := ColumnRef(type=INT64, column=t1.b#8)
        |                 +-pivot_expr_list=
        |                 | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                 |   +-parse_location=120-129
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 +-for_expr=
        |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   +-parse_location=143-151
        |                 |   +-ColumnRef(type=INT64, column=t1.a#7)
        |                 |   +-ColumnRef(type=INT64, column=t2.c#5, is_correlated=TRUE)
        |                 +-pivot_value_list=
        |                 | +-Literal(type=INT64, value=1)
        |                 | +-Literal(type=INT64, value=2)
        |                 | +-Literal(type=INT64, value=3)
        |                 | +-Literal(type=INT64, value=4)
        |                 +-pivot_column_list=
        |                   +-PivotColumn(column=$pivot.one#11, pivot_expr_index=0, pivot_value_index=0)
        |                   +-PivotColumn(column=$pivot.two#12, pivot_expr_index=0, pivot_value_index=1)
        |                   +-PivotColumn(column=$pivot.three#13, pivot_expr_index=0, pivot_value_index=2)
        |                   +-PivotColumn(column=$pivot.four#14, pivot_expr_index=0, pivot_value_index=3)
        +-input_scan=
          +-WithRefScan(column_list=t2.[c#5, d#6], with_query_name="t2")
==

# Correlated column references in PIVOT value expressions.
# These are errors, since pivot values must be constants.
WITH
  t1 AS (SELECT 1 AS a, 2 AS b),
  t2 AS (SELECT 3 AS c, 4 AS d)
SELECT (SELECT AS STRUCT * FROM t1
         PIVOT(SUM(t1.a)
         FOR a IN ({{c|t2.c}}, 2, 3, 4)))
FROM t2;
--
ALTERNATION GROUP: c
--
ERROR: IN expression in PIVOT clause must be constant [at 6:20]
         FOR a IN (c, 2, 3, 4)))
                   ^
--
ALTERNATION GROUP: t2.c
--
ERROR: IN expression in PIVOT clause must be constant [at 6:20]
         FOR a IN (t2.c, 2, 3, 4)))
                   ^
==

# Identical pivot values (same and different aliases)
SELECT * FROM KeyValue PIVOT(SUM(Key) FOR Key IN (0 AS zero, 0 AS zero, 1 AS one_a, 1 AS one_b));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.zero#6 AS zero [INT64]
| +-$pivot.one_a#7 AS one_a [INT64]
| +-$pivot.one_b#8 AS one_b [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.zero#6, $pivot.one_a#7, $pivot.one_b#8]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.zero#6, $pivot.one_a#7, $pivot.one_b#8]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=29-37
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=42-45, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.zero#6, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.one_a#7, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.one_b#8, pivot_expr_index=0, pivot_value_index=3)
==

# Non-groupable type for FOR expr
SELECT * FROM GeographyTable PIVOT(SUM(Key) FOR geo1 IN (NULL));
--
ERROR: Type GEOGRAPHY cannot be used as a FOR expression because it is not groupable [at 1:49]
SELECT * FROM GeographyTable PIVOT(SUM(Key) FOR geo1 IN (NULL));
                                                ^
==

# Constant in FOR expression
SELECT * FROM KeyValue PIVOT(SUM(Key) FOR 0 IN (0 AS zero, 1 AS one));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.zero#5 AS zero [INT64]
| +-$pivot.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.zero#5, $pivot.one#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=29-37
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-Literal(parse_location=42-43, type=INT64, value=0)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#6, pivot_expr_index=0, pivot_value_index=1)
==

# PIVOT query with some of the pivot columns pruned, all groupby columns present
WITH t AS (
  SELECT 1 AS w, 2 AS x, 3 AS y, 4 AS z
) SELECT w, z, one FROM t PIVOT(SUM(x) FOR y IN (0 AS zero, 1 AS one));
--
QueryStmt
+-output_column_list=
| +-$groupby.w#10 AS w [INT64]
| +-$groupby.z#11 AS z [INT64]
| +-$pivot.one#13 AS one [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.w#10, $groupby.z#11, $pivot.one#13]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[w#1, x#2, y#3, z#4]
    |       +-expr_list=
    |       | +-w#1 := Literal(type=INT64, value=1)
    |       | +-x#2 := Literal(type=INT64, value=2)
    |       | +-y#3 := Literal(type=INT64, value=3)
    |       | +-z#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.w#10, $groupby.z#11, $pivot.one#13]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.w#10, $groupby.z#11, $pivot.one#13]
            +-input_scan=
            | +-WithRefScan(column_list=t.[w#5, x#6, y#7, z#8], with_query_name="t")
            +-group_by_list=
            | +-w#10 := ColumnRef(type=INT64, column=t.w#5)
            | +-z#11 := ColumnRef(type=INT64, column=t.z#8)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=84-90
            |   +-ColumnRef(type=INT64, column=t.x#6)
            +-for_expr=
            | +-ColumnRef(parse_location=95-96, type=INT64, column=t.y#7)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=0)
            | +-Literal(type=INT64, value=1)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.one#13, pivot_expr_index=0, pivot_value_index=1)
==

# PIVOT query with some groupby columns pruned, all pivot columns present
WITH t AS (
  SELECT 1 AS w, 2 AS x, 3 AS y, 4 AS z
) SELECT w, s1_one, s2_one, s1_zero, s2_zero
  FROM t PIVOT(SUM(x) AS s1, SUM(x) AS s2 FOR y IN (0 AS zero, 1 AS one));
--
QueryStmt
+-output_column_list=
| +-$groupby.w#11 AS w [INT64]
| +-$pivot.s1_one#15 AS s1_one [INT64]
| +-$pivot.s2_one#16 AS s2_one [INT64]
| +-$pivot.s1_zero#13 AS s1_zero [INT64]
| +-$pivot.s2_zero#14 AS s2_zero [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.w#11, $pivot.s1_one#15, $pivot.s2_one#16, $pivot.s1_zero#13, $pivot.s2_zero#14]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[w#1, x#2, y#3, z#4]
    |       +-expr_list=
    |       | +-w#1 := Literal(type=INT64, value=1)
    |       | +-x#2 := Literal(type=INT64, value=2)
    |       | +-y#3 := Literal(type=INT64, value=3)
    |       | +-z#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.w#11, $pivot.s1_one#15, $pivot.s2_one#16, $pivot.s1_zero#13, $pivot.s2_zero#14]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.w#11, $pivot.s1_zero#13, $pivot.s2_zero#14, $pivot.s1_one#15, $pivot.s2_one#16]
            +-input_scan=
            | +-WithRefScan(column_list=t.[w#5, x#6, y#7, z#8], with_query_name="t")
            +-group_by_list=
            | +-w#11 := ColumnRef(type=INT64, column=t.w#5)
            | +-z#12 := ColumnRef(type=INT64, column=t.z#8)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            | | +-parse_location=112-124
            | | +-ColumnRef(type=INT64, column=t.x#6)
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=126-138
            |   +-ColumnRef(type=INT64, column=t.x#6)
            +-for_expr=
            | +-ColumnRef(parse_location=143-144, type=INT64, column=t.y#7)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=0)
            | +-Literal(type=INT64, value=1)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.s1_zero#13, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.s2_zero#14, pivot_expr_index=1, pivot_value_index=0)
              +-PivotColumn(column=$pivot.s1_one#15, pivot_expr_index=0, pivot_value_index=1)
              +-PivotColumn(column=$pivot.s2_one#16, pivot_expr_index=1, pivot_value_index=1)
==

# PIVOT query with all columns pruned
WITH t AS (
  SELECT 1 AS w, 2 AS x, 3 AS y, 4 AS z
) SELECT 0 FROM t PIVOT(SUM(x) AS s1, SUM(x) AS s2
                                   FOR y IN (0 AS zero, 1 AS one));
--
QueryStmt
+-output_column_list=
| +-$query.$col1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[w#1, x#2, y#3, z#4]
    |       +-expr_list=
    |       | +-w#1 := Literal(type=INT64, value=1)
    |       | +-x#2 := Literal(type=INT64, value=2)
    |       | +-y#3 := Literal(type=INT64, value=3)
    |       | +-z#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#17]
        +-expr_list=
        | +-$col1#17 := Literal(type=INT64, value=0)
        +-input_scan=
          +-PivotScan
            +-input_scan=
            | +-WithRefScan(column_list=t.[w#5, x#6, y#7, z#8], with_query_name="t")
            +-group_by_list=
            | +-w#11 := ColumnRef(type=INT64, column=t.w#5)
            | +-z#12 := ColumnRef(type=INT64, column=t.z#8)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            | | +-parse_location=76-88
            | | +-ColumnRef(type=INT64, column=t.x#6)
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=90-102
            |   +-ColumnRef(type=INT64, column=t.x#6)
            +-for_expr=
            | +-ColumnRef(parse_location=142-143, type=INT64, column=t.y#7)
            +-pivot_value_list=
              +-Literal(type=INT64, value=0)
              +-Literal(type=INT64, value=1)
==

# PIVOT input with unnamed columns.
WITH t AS (
  SELECT 1, 2, 3 AS y, 4 AS z
) SELECT * FROM t PIVOT(
    SUM(y) AS s FOR z IN (0 AS zero, 1 AS one));
--
QueryStmt
+-output_column_list=
| +-$groupby.$col1#10 AS `$col1` [INT64]
| +-$groupby.$col2#11 AS `$col2` [INT64]
| +-$pivot.s_zero#12 AS s_zero [INT64]
| +-$pivot.s_one#13 AS s_one [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.$col1#10, $groupby.$col2#11, $pivot.s_zero#12, $pivot.s_one#13]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[$col1#1, $col2#2, y#3, z#4]
    |       +-expr_list=
    |       | +-$col1#1 := Literal(type=INT64, value=1)
    |       | +-$col2#2 := Literal(type=INT64, value=2)
    |       | +-y#3 := Literal(type=INT64, value=3)
    |       | +-z#4 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.$col1#10, $groupby.$col2#11, $pivot.s_zero#12, $pivot.s_one#13]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.$col1#10, $groupby.$col2#11, $pivot.s_zero#12, $pivot.s_one#13]
            +-input_scan=
            | +-WithRefScan(column_list=t.[$col1#5, $col2#6, y#7, z#8], with_query_name="t")
            +-group_by_list=
            | +-$col1#10 := ColumnRef(type=INT64, column=t.$col1#5)
            | +-$col2#11 := ColumnRef(type=INT64, column=t.$col2#6)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=71-82
            |   +-ColumnRef(type=INT64, column=t.y#7)
            +-for_expr=
            | +-ColumnRef(parse_location=87-88, type=INT64, column=t.z#8)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=0)
            | +-Literal(type=INT64, value=1)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.s_zero#12, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.s_one#13, pivot_expr_index=0, pivot_value_index=1)
==

# Aggregate function not on allowlist, but supports null handling modifiers
[language_features=NONE,+PIVOT,+IS_DISTINCT,+NULL_HANDLING_MODIFIER_IN_AGGREGATE{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(ARRAY_AGG(Value {{|IGNORE NULLS|RESPECT NULLS}})
FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUPS:
    <empty>
    ,+SIMPLIFY_PIVOT_REWRITE,
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
        |   +-parse_location=29-46
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=51-54, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

Rewrite ERROR: generic::unimplemented: Use of aggregate function ARRAY_AGG as PIVOT expression is not supported unless IGNORE NULLS is specified [at 1:30]
SELECT * FROM KeyValue PIVOT(ARRAY_AGG(Value )
                             ^
--
ALTERNATION GROUP: IGNORE NULLS
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
        |   +-parse_location=29-58
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-null_handling_modifier=IGNORE_NULLS
        +-for_expr=
        | +-ColumnRef(parse_location=63-66, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
        |   +-expr_list=
        |   | +-$pivot_value#6 := ColumnRef(parse_location=63-66, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-zero#4 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
          |   +-SubqueryExpr
          |     +-type=STRING
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
          |     | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#11]
          |         +-expr_list=
          |         | +-$col1#11 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#9)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#10)
          |         |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#8)
          |         |     +-Literal(type=STRING, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#8, pivot_column#9, pivot_value#10]
          |             +-expr_list=
          |             | +-orig_arg#8 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
          |             | +-pivot_column#9 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
          |             | +-pivot_value#10 := Literal(type=INT64, value=0)
          |             +-input_scan=
          |               +-SingleRowScan
          |   +-null_handling_modifier=IGNORE_NULLS
          +-one#5 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              +-SubqueryExpr
                +-type=STRING
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#15]
                    +-expr_list=
                    | +-$col1#15 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                    |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#13)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#14)
                    |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#12)
                    |     +-Literal(type=STRING, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#12, pivot_column#13, pivot_value#14]
                        +-expr_list=
                        | +-orig_arg#12 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                        | +-pivot_column#13 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                        | +-pivot_value#14 := Literal(type=INT64, value=1)
                        +-input_scan=
                          +-SingleRowScan
              +-null_handling_modifier=IGNORE_NULLS
--
ALTERNATION GROUPS:
    RESPECT NULLS
    ,+SIMPLIFY_PIVOT_REWRITE,RESPECT NULLS
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
        |   +-parse_location=29-59
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-null_handling_modifier=RESPECT_NULLS
        +-for_expr=
        | +-ColumnRef(parse_location=64-67, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

Rewrite ERROR: generic::unimplemented: Use of RESPECT NULLS in aggregate function used as a PIVOT expression is not supported [at 1:30]
SELECT * FROM KeyValue PIVOT(ARRAY_AGG(Value RESPECT NULLS)
                             ^
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE,IGNORE NULLS
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
        |   +-parse_location=29-58
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-null_handling_modifier=IGNORE_NULLS
        +-for_expr=
        | +-ColumnRef(parse_location=63-66, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
        |   +-expr_list=
        |   | +-$pivot_value#6 := ColumnRef(parse_location=63-66, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-zero#4 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
          |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
          |     | +-Literal(type=INT64, value=0)
          |     +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
          |     +-Literal(type=STRING, value=NULL)
          |   +-null_handling_modifier=IGNORE_NULLS
          +-one#5 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                | +-Literal(type=INT64, value=1)
                +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                +-Literal(type=STRING, value=NULL)
              +-null_handling_modifier=IGNORE_NULLS
==

# Aggregate function not on allowlist and doesn't supports null handling
# modifiers
[enabled_ast_rewrites=DEFAULTS]
[language_features=NONE,+PIVOT,+IS_DISTINCT,+NULL_HANDLING_MODIFIER_IN_AGGREGATE{{|,+SIMPLIFY_PIVOT_REWRITE}}]
SELECT * FROM KeyValue PIVOT(
  APPROX_TOP_COUNT(Value, 1)FOR Key IN (0 AS zero, 1 AS one));
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRUCT<value STRING, count INT64>>]
| +-$pivot.one#5 AS one [ARRAY<STRUCT<value STRING, count INT64>>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:approx_top_count(STRING, INT64) -> ARRAY<STRUCT<value STRING, count INT64>>)
        |   +-parse_location=32-58
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-Literal(type=INT64, value=1)
        +-for_expr=
        | +-ColumnRef(parse_location=62-65, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

Rewrite ERROR: generic::unimplemented: Use of aggregate function APPROX_TOP_COUNT as PIVOT expression is not supported [at 2:3]
  APPROX_TOP_COUNT(Value, 1)FOR Key IN (0 AS zero, 1 AS one));
  ^
==

# While ANY_VALUE() is a null-respecting function, it is special-cased in the
# PIVOT rewriter to work.
[language_features=NONE,+PIVOT,+IS_DISTINCT,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(ANY_VALUE(Value) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [STRING]
| +-$pivot.one#5 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
        |   +-parse_location=29-45
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=50-53, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [STRING]
| +-$pivot.one#5 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-expr_list=
        | +-zero#4 :=
        | | +-SubqueryExpr
        | |   +-type=STRING
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#12)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$expr_subquery.$col1#19]
        | |       +-expr_list=
        | |       | +-$col1#19 :=
        | |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        | |       |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#18)
        | |       |     +-Literal(type=INT64, value=0)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$subquery1.agg_result#18]
        | |           +-expr_list=
        | |           | +-agg_result#18 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#12, is_correlated=TRUE)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-one#5 :=
        |   +-SubqueryExpr
        |     +-type=STRING
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#17)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#21]
        |         +-expr_list=
        |         | +-$col1#21 :=
        |         |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#20)
        |         |     +-Literal(type=INT64, value=0)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$subquery1.agg_result#20]
        |             +-expr_list=
        |             | +-agg_result#20 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#17, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$pivot.[$pivot_agg_result#12, $pivot_agg_result#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
            |   +-expr_list=
            |   | +-$pivot_value#6 := ColumnRef(parse_location=50-53, type=INT64, column=KeyValue.Key#1)
            |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-aggregate_list=
              +-$pivot_agg_result#12 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              |   +-SubqueryExpr
              |     +-type=STRING
              |     +-subquery_type=SCALAR
              |     +-parameter_list=
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
              |     | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
              |     +-subquery=
              |       +-ProjectScan
              |         +-column_list=[$expr_subquery.$col1#11]
              |         +-expr_list=
              |         | +-$col1#11 :=
              |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
              |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#9)
              |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#10)
              |         |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#8)
              |         |     +-Literal(type=STRING, value=NULL)
              |         +-input_scan=
              |           +-ProjectScan
              |             +-column_list=$subquery1.[orig_arg#8, pivot_column#9, pivot_value#10]
              |             +-expr_list=
              |             | +-orig_arg#8 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
              |             | +-pivot_column#9 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
              |             | +-pivot_value#10 := Literal(type=INT64, value=0)
              |             +-input_scan=
              |               +-SingleRowScan
              |   +-null_handling_modifier=IGNORE_NULLS
              |   +-limit=
              |     +-Literal(type=INT64, value=1)
              +-$pivot_agg_result#17 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
                  +-SubqueryExpr
                    +-type=STRING
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                    | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$expr_subquery.$col1#16]
                        +-expr_list=
                        | +-$col1#16 :=
                        |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                        |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                        |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#14)
                        |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#15)
                        |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#13)
                        |     +-Literal(type=STRING, value=NULL)
                        +-input_scan=
                          +-ProjectScan
                            +-column_list=$subquery1.[orig_arg#13, pivot_column#14, pivot_value#15]
                            +-expr_list=
                            | +-orig_arg#13 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                            | +-pivot_column#14 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                            | +-pivot_value#15 := Literal(type=INT64, value=1)
                            +-input_scan=
                              +-SingleRowScan
                  +-null_handling_modifier=IGNORE_NULLS
                  +-limit=
                    +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [STRING]
| +-$pivot.one#5 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
        |   +-parse_location=29-45
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=50-53, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [STRING]
| +-$pivot.one#5 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-expr_list=
        | +-zero#4 :=
        | | +-SubqueryExpr
        | |   +-type=STRING
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#8)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$expr_subquery.$col1#11]
        | |       +-expr_list=
        | |       | +-$col1#11 :=
        | |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        | |       |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#10)
        | |       |     +-Literal(type=INT64, value=0)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$subquery1.agg_result#10]
        | |           +-expr_list=
        | |           | +-agg_result#10 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#8, is_correlated=TRUE)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-one#5 :=
        |   +-SubqueryExpr
        |     +-type=STRING
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#9)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#13]
        |         +-expr_list=
        |         | +-$col1#13 :=
        |         |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#12)
        |         |     +-Literal(type=INT64, value=0)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$subquery1.agg_result#12]
        |             +-expr_list=
        |             | +-agg_result#12 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#9, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$pivot.[$pivot_agg_result#8, $pivot_agg_result#9]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
            |   +-expr_list=
            |   | +-$pivot_value#6 := ColumnRef(parse_location=50-53, type=INT64, column=KeyValue.Key#1)
            |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-aggregate_list=
              +-$pivot_agg_result#8 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
              |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
              |     | +-Literal(type=INT64, value=0)
              |     +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
              |     +-Literal(type=STRING, value=NULL)
              |   +-null_handling_modifier=IGNORE_NULLS
              |   +-limit=
              |     +-Literal(type=INT64, value=1)
              +-$pivot_agg_result#9 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
                  +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                    +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                    | +-Literal(type=INT64, value=1)
                    +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                    +-Literal(type=STRING, value=NULL)
                  +-null_handling_modifier=IGNORE_NULLS
                  +-limit=
                    +-Literal(type=INT64, value=1)
==

# ANY_VALUE() for array types has special rewriter implementation
# to avoid arrays of arrays
[language_features=NONE,+PIVOT,+IS_DISTINCT,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(
  ANY_VALUE([Value]) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<STRING>) -> ARRAY<STRING>)
        |   +-parse_location=32-50
        |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
        |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=55-58, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-expr_list=
        | +-zero#4 :=
        | | +-GetStructField
        | |   +-type=ARRAY<STRING>
        | |   +-expr=
        | |   | +-SubqueryExpr
        | |   |   +-type=STRUCT<arg ARRAY<STRING>>
        | |   |   +-subquery_type=SCALAR
        | |   |   +-parameter_list=
        | |   |   | +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#14)
        | |   |   +-subquery=
        | |   |     +-ProjectScan
        | |   |       +-column_list=[$expr_subquery.$col1#23]
        | |   |       +-expr_list=
        | |   |       | +-$col1#23 :=
        | |   |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<arg ARRAY<STRING>>>, INT64) -> STRUCT<arg ARRAY<STRING>>)
        | |   |       |     +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$subquery1.agg_result#22)
        | |   |       |     +-Literal(type=INT64, value=0)
        | |   |       +-input_scan=
        | |   |         +-ProjectScan
        | |   |           +-column_list=[$subquery1.agg_result#22]
        | |   |           +-expr_list=
        | |   |           | +-agg_result#22 := ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#14, is_correlated=TRUE)
        | |   |           +-input_scan=
        | |   |             +-SingleRowScan
        | |   +-field_idx=0
        | +-one#5 :=
        |   +-GetStructField
        |     +-type=ARRAY<STRING>
        |     +-expr=
        |     | +-SubqueryExpr
        |     |   +-type=STRUCT<arg ARRAY<STRING>>
        |     |   +-subquery_type=SCALAR
        |     |   +-parameter_list=
        |     |   | +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#21)
        |     |   +-subquery=
        |     |     +-ProjectScan
        |     |       +-column_list=[$expr_subquery.$col1#25]
        |     |       +-expr_list=
        |     |       | +-$col1#25 :=
        |     |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<arg ARRAY<STRING>>>, INT64) -> STRUCT<arg ARRAY<STRING>>)
        |     |       |     +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$subquery1.agg_result#24)
        |     |       |     +-Literal(type=INT64, value=0)
        |     |       +-input_scan=
        |     |         +-ProjectScan
        |     |           +-column_list=[$subquery1.agg_result#24]
        |     |           +-expr_list=
        |     |           | +-agg_result#24 := ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#21, is_correlated=TRUE)
        |     |           +-input_scan=
        |     |             +-SingleRowScan
        |     +-field_idx=0
        +-input_scan=
          +-AggregateScan
            +-column_list=$pivot.[$pivot_agg_result#14, $pivot_agg_result#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
            |   +-expr_list=
            |   | +-$pivot_value#6 := ColumnRef(parse_location=55-58, type=INT64, column=KeyValue.Key#1)
            |   | +-$pivot_expr_arg#7 :=
            |   |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
            |   |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-aggregate_list=
              +-$pivot_agg_result#14 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<arg ARRAY<STRING>>) -> ARRAY<STRUCT<arg ARRAY<STRING>>>)
              |   +-SubqueryExpr
              |     +-type=STRUCT<arg ARRAY<STRING>>
              |     +-subquery_type=SCALAR
              |     +-parameter_list=
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
              |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7)
              |     +-subquery=
              |       +-ProjectScan
              |         +-column_list=[$expr_subquery.$col1#13]
              |         +-expr_list=
              |         | +-$col1#13 :=
              |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRUCT<arg ARRAY<STRING>>, STRUCT<arg ARRAY<STRING>>) -> STRUCT<arg ARRAY<STRING>>)
              |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
              |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#12)
              |         |     +-Literal(type=STRUCT<arg ARRAY<STRING>>, value=NULL)
              |         |     +-MakeStruct
              |         |       +-type=STRUCT<arg ARRAY<STRING>>
              |         |       +-field_list=
              |         |         +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#12)
              |         +-input_scan=
              |           +-ProjectScan
              |             +-column_list=[$subquery1.arg#12]
              |             +-expr_list=
              |             | +-arg#12 :=
              |             |   +-SubqueryExpr
              |             |     +-type=ARRAY<STRING>
              |             |     +-subquery_type=SCALAR
              |             |     +-parameter_list=
              |             |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
              |             |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
              |             |     +-subquery=
              |             |       +-ProjectScan
              |             |         +-column_list=[$expr_subquery.$col1#11]
              |             |         +-expr_list=
              |             |         | +-$col1#11 :=
              |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
              |             |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |             |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#9)
              |             |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#10)
              |             |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.orig_arg#8)
              |             |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
              |             |         +-input_scan=
              |             |           +-ProjectScan
              |             |             +-column_list=$subquery1.[orig_arg#8, pivot_column#9, pivot_value#10]
              |             |             +-expr_list=
              |             |             | +-orig_arg#8 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
              |             |             | +-pivot_column#9 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
              |             |             | +-pivot_value#10 := Literal(type=INT64, value=0)
              |             |             +-input_scan=
              |             |               +-SingleRowScan
              |             +-input_scan=
              |               +-SingleRowScan
              |   +-null_handling_modifier=IGNORE_NULLS
              |   +-limit=
              |     +-Literal(type=INT64, value=1)
              +-$pivot_agg_result#21 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<arg ARRAY<STRING>>) -> ARRAY<STRUCT<arg ARRAY<STRING>>>)
                  +-SubqueryExpr
                    +-type=STRUCT<arg ARRAY<STRING>>
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                    | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$expr_subquery.$col1#20]
                        +-expr_list=
                        | +-$col1#20 :=
                        |   +-FunctionCall(ZetaSQL:if(BOOL, STRUCT<arg ARRAY<STRING>>, STRUCT<arg ARRAY<STRING>>) -> STRUCT<arg ARRAY<STRING>>)
                        |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
                        |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#19)
                        |     +-Literal(type=STRUCT<arg ARRAY<STRING>>, value=NULL)
                        |     +-MakeStruct
                        |       +-type=STRUCT<arg ARRAY<STRING>>
                        |       +-field_list=
                        |         +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#19)
                        +-input_scan=
                          +-ProjectScan
                            +-column_list=[$subquery1.arg#19]
                            +-expr_list=
                            | +-arg#19 :=
                            |   +-SubqueryExpr
                            |     +-type=ARRAY<STRING>
                            |     +-subquery_type=SCALAR
                            |     +-parameter_list=
                            |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                            |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                            |     +-subquery=
                            |       +-ProjectScan
                            |         +-column_list=[$expr_subquery.$col1#18]
                            |         +-expr_list=
                            |         | +-$col1#18 :=
                            |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
                            |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                            |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#16)
                            |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#17)
                            |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.orig_arg#15)
                            |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
                            |         +-input_scan=
                            |           +-ProjectScan
                            |             +-column_list=$subquery1.[orig_arg#15, pivot_column#16, pivot_value#17]
                            |             +-expr_list=
                            |             | +-orig_arg#15 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                            |             | +-pivot_column#16 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                            |             | +-pivot_value#17 := Literal(type=INT64, value=1)
                            |             +-input_scan=
                            |               +-SingleRowScan
                            +-input_scan=
                              +-SingleRowScan
                  +-null_handling_modifier=IGNORE_NULLS
                  +-limit=
                    +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<STRING>) -> ARRAY<STRING>)
        |   +-parse_location=32-50
        |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
        |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=55-58, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-expr_list=
        | +-zero#4 :=
        | | +-GetStructField
        | |   +-type=ARRAY<STRING>
        | |   +-expr=
        | |   | +-SubqueryExpr
        | |   |   +-type=STRUCT<arg ARRAY<STRING>>
        | |   |   +-subquery_type=SCALAR
        | |   |   +-parameter_list=
        | |   |   | +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#10)
        | |   |   +-subquery=
        | |   |     +-ProjectScan
        | |   |       +-column_list=[$expr_subquery.$col1#15]
        | |   |       +-expr_list=
        | |   |       | +-$col1#15 :=
        | |   |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<arg ARRAY<STRING>>>, INT64) -> STRUCT<arg ARRAY<STRING>>)
        | |   |       |     +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$subquery1.agg_result#14)
        | |   |       |     +-Literal(type=INT64, value=0)
        | |   |       +-input_scan=
        | |   |         +-ProjectScan
        | |   |           +-column_list=[$subquery1.agg_result#14]
        | |   |           +-expr_list=
        | |   |           | +-agg_result#14 := ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#10, is_correlated=TRUE)
        | |   |           +-input_scan=
        | |   |             +-SingleRowScan
        | |   +-field_idx=0
        | +-one#5 :=
        |   +-GetStructField
        |     +-type=ARRAY<STRING>
        |     +-expr=
        |     | +-SubqueryExpr
        |     |   +-type=STRUCT<arg ARRAY<STRING>>
        |     |   +-subquery_type=SCALAR
        |     |   +-parameter_list=
        |     |   | +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#13)
        |     |   +-subquery=
        |     |     +-ProjectScan
        |     |       +-column_list=[$expr_subquery.$col1#17]
        |     |       +-expr_list=
        |     |       | +-$col1#17 :=
        |     |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRUCT<arg ARRAY<STRING>>>, INT64) -> STRUCT<arg ARRAY<STRING>>)
        |     |       |     +-ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$subquery1.agg_result#16)
        |     |       |     +-Literal(type=INT64, value=0)
        |     |       +-input_scan=
        |     |         +-ProjectScan
        |     |           +-column_list=[$subquery1.agg_result#16]
        |     |           +-expr_list=
        |     |           | +-agg_result#16 := ColumnRef(type=ARRAY<STRUCT<arg ARRAY<STRING>>>, column=$pivot.$pivot_agg_result#13, is_correlated=TRUE)
        |     |           +-input_scan=
        |     |             +-SingleRowScan
        |     +-field_idx=0
        +-input_scan=
          +-AggregateScan
            +-column_list=$pivot.[$pivot_agg_result#10, $pivot_agg_result#13]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
            |   +-expr_list=
            |   | +-$pivot_value#6 := ColumnRef(parse_location=55-58, type=INT64, column=KeyValue.Key#1)
            |   | +-$pivot_expr_arg#7 :=
            |   |   +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
            |   |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-aggregate_list=
              +-$pivot_agg_result#10 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<arg ARRAY<STRING>>) -> ARRAY<STRUCT<arg ARRAY<STRING>>>)
              |   +-SubqueryExpr
              |     +-type=STRUCT<arg ARRAY<STRING>>
              |     +-subquery_type=SCALAR
              |     +-parameter_list=
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
              |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7)
              |     +-subquery=
              |       +-ProjectScan
              |         +-column_list=[$expr_subquery.$col1#9]
              |         +-expr_list=
              |         | +-$col1#9 :=
              |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRUCT<arg ARRAY<STRING>>, STRUCT<arg ARRAY<STRING>>) -> STRUCT<arg ARRAY<STRING>>)
              |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
              |         |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#8)
              |         |     +-Literal(type=STRUCT<arg ARRAY<STRING>>, value=NULL)
              |         |     +-MakeStruct
              |         |       +-type=STRUCT<arg ARRAY<STRING>>
              |         |       +-field_list=
              |         |         +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#8)
              |         +-input_scan=
              |           +-ProjectScan
              |             +-column_list=[$subquery1.arg#8]
              |             +-expr_list=
              |             | +-arg#8 :=
              |             |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
              |             |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |             |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
              |             |     | +-Literal(type=INT64, value=0)
              |             |     +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
              |             |     +-Literal(type=ARRAY<STRING>, value=NULL)
              |             +-input_scan=
              |               +-SingleRowScan
              |   +-null_handling_modifier=IGNORE_NULLS
              |   +-limit=
              |     +-Literal(type=INT64, value=1)
              +-$pivot_agg_result#13 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<arg ARRAY<STRING>>) -> ARRAY<STRUCT<arg ARRAY<STRING>>>)
                  +-SubqueryExpr
                    +-type=STRUCT<arg ARRAY<STRING>>
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                    | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$expr_subquery.$col1#12]
                        +-expr_list=
                        | +-$col1#12 :=
                        |   +-FunctionCall(ZetaSQL:if(BOOL, STRUCT<arg ARRAY<STRING>>, STRUCT<arg ARRAY<STRING>>) -> STRUCT<arg ARRAY<STRING>>)
                        |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
                        |     | +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#11)
                        |     +-Literal(type=STRUCT<arg ARRAY<STRING>>, value=NULL)
                        |     +-MakeStruct
                        |       +-type=STRUCT<arg ARRAY<STRING>>
                        |       +-field_list=
                        |         +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.arg#11)
                        +-input_scan=
                          +-ProjectScan
                            +-column_list=[$subquery1.arg#11]
                            +-expr_list=
                            | +-arg#11 :=
                            |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
                            |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                            |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                            |     | +-Literal(type=INT64, value=1)
                            |     +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                            |     +-Literal(type=ARRAY<STRING>, value=NULL)
                            +-input_scan=
                              +-SingleRowScan
                  +-null_handling_modifier=IGNORE_NULLS
                  +-limit=
                    +-Literal(type=INT64, value=1)
==

# Make sure the rewritten version of ANY_VALUE() handles groupby columns
[language_features=NONE,+PIVOT,+IS_DISTINCT,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM (SELECT Key, Value, Key + 1 AS kp1 FROM KeyValue)
PIVOT(ANY_VALUE(Value) FOR Key IN (0 AS zero, 1 AS one));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.kp1#7 AS kp1 [INT64]
| +-$pivot.zero#8 AS zero [STRING]
| +-$pivot.one#9 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[Key#3, Value#4, kp1#5]
        |   +-expr_list=
        |   | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   | +-kp1#5 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-kp1#7 := ColumnRef(type=INT64, column=$subquery1.kp1#5)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
        |   +-parse_location=70-86
        |   +-ColumnRef(type=STRING, column=$subquery1.Value#4)
        +-for_expr=
        | +-ColumnRef(parse_location=91-94, type=INT64, column=$subquery1.Key#3)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#8, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#9, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.kp1#7 AS kp1 [INT64]
| +-$pivot.zero#8 AS zero [STRING]
| +-$pivot.one#9 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
        +-expr_list=
        | +-zero#8 :=
        | | +-SubqueryExpr
        | |   +-type=STRING
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#16)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$expr_subquery.$col1#23]
        | |       +-expr_list=
        | |       | +-$col1#23 :=
        | |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        | |       |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#22)
        | |       |     +-Literal(type=INT64, value=0)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$subquery1.agg_result#22]
        | |           +-expr_list=
        | |           | +-agg_result#22 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#16, is_correlated=TRUE)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-one#9 :=
        |   +-SubqueryExpr
        |     +-type=STRING
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#21)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#25]
        |         +-expr_list=
        |         | +-$col1#25 :=
        |         |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#24)
        |         |     +-Literal(type=INT64, value=0)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$subquery1.agg_result#24]
        |             +-expr_list=
        |             | +-agg_result#24 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#21, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.kp1#7, $pivot.$pivot_agg_result#16, $pivot.$pivot_agg_result#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[$subquery1.Key#3, $subquery1.Value#4, $subquery1.kp1#5, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11]
            |   +-expr_list=
            |   | +-$pivot_value#10 := ColumnRef(parse_location=91-94, type=INT64, column=$subquery1.Key#3)
            |   | +-$pivot_expr_arg#11 := ColumnRef(type=STRING, column=$subquery1.Value#4)
            |   +-input_scan=
            |     +-ProjectScan
            |       +-column_list=$subquery1.[Key#3, Value#4, kp1#5]
            |       +-expr_list=
            |       | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
            |       | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |       | +-kp1#5 :=
            |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |       |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |       |     +-Literal(type=INT64, value=1)
            |       +-input_scan=
            |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-group_by_list=
            | +-kp1#7 := ColumnRef(type=INT64, column=$subquery1.kp1#5)
            +-aggregate_list=
              +-$pivot_agg_result#16 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              |   +-SubqueryExpr
              |     +-type=STRING
              |     +-subquery_type=SCALAR
              |     +-parameter_list=
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
              |     | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#11)
              |     +-subquery=
              |       +-ProjectScan
              |         +-column_list=[$expr_subquery.$col1#15]
              |         +-expr_list=
              |         | +-$col1#15 :=
              |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
              |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#13)
              |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#14)
              |         |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#12)
              |         |     +-Literal(type=STRING, value=NULL)
              |         +-input_scan=
              |           +-ProjectScan
              |             +-column_list=$subquery1.[orig_arg#12, pivot_column#13, pivot_value#14]
              |             +-expr_list=
              |             | +-orig_arg#12 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
              |             | +-pivot_column#13 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
              |             | +-pivot_value#14 := Literal(type=INT64, value=0)
              |             +-input_scan=
              |               +-SingleRowScan
              |   +-null_handling_modifier=IGNORE_NULLS
              |   +-limit=
              |     +-Literal(type=INT64, value=1)
              +-$pivot_agg_result#21 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
                  +-SubqueryExpr
                    +-type=STRING
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                    | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#11)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$expr_subquery.$col1#20]
                        +-expr_list=
                        | +-$col1#20 :=
                        |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                        |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                        |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#18)
                        |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#19)
                        |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#17)
                        |     +-Literal(type=STRING, value=NULL)
                        +-input_scan=
                          +-ProjectScan
                            +-column_list=$subquery1.[orig_arg#17, pivot_column#18, pivot_value#19]
                            +-expr_list=
                            | +-orig_arg#17 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
                            | +-pivot_column#18 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
                            | +-pivot_value#19 := Literal(type=INT64, value=1)
                            +-input_scan=
                              +-SingleRowScan
                  +-null_handling_modifier=IGNORE_NULLS
                  +-limit=
                    +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$groupby.kp1#7 AS kp1 [INT64]
| +-$pivot.zero#8 AS zero [STRING]
| +-$pivot.one#9 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[Key#3, Value#4, kp1#5]
        |   +-expr_list=
        |   | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   | +-kp1#5 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-kp1#7 := ColumnRef(type=INT64, column=$subquery1.kp1#5)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
        |   +-parse_location=70-86
        |   +-ColumnRef(type=STRING, column=$subquery1.Value#4)
        +-for_expr=
        | +-ColumnRef(parse_location=91-94, type=INT64, column=$subquery1.Key#3)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#8, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#9, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.kp1#7 AS kp1 [INT64]
| +-$pivot.zero#8 AS zero [STRING]
| +-$pivot.one#9 AS one [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.kp1#7, $pivot.zero#8, $pivot.one#9]
        +-expr_list=
        | +-zero#8 :=
        | | +-SubqueryExpr
        | |   +-type=STRING
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#12)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$expr_subquery.$col1#15]
        | |       +-expr_list=
        | |       | +-$col1#15 :=
        | |       |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        | |       |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#14)
        | |       |     +-Literal(type=INT64, value=0)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$subquery1.agg_result#14]
        | |           +-expr_list=
        | |           | +-agg_result#14 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#12, is_correlated=TRUE)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-one#9 :=
        |   +-SubqueryExpr
        |     +-type=STRING
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#13)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#17]
        |         +-expr_list=
        |         | +-$col1#17 :=
        |         |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
        |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.agg_result#16)
        |         |     +-Literal(type=INT64, value=0)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$subquery1.agg_result#16]
        |             +-expr_list=
        |             | +-agg_result#16 := ColumnRef(type=ARRAY<STRING>, column=$pivot.$pivot_agg_result#13, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.kp1#7, $pivot.$pivot_agg_result#12, $pivot.$pivot_agg_result#13]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[$subquery1.Key#3, $subquery1.Value#4, $subquery1.kp1#5, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11]
            |   +-expr_list=
            |   | +-$pivot_value#10 := ColumnRef(parse_location=91-94, type=INT64, column=$subquery1.Key#3)
            |   | +-$pivot_expr_arg#11 := ColumnRef(type=STRING, column=$subquery1.Value#4)
            |   +-input_scan=
            |     +-ProjectScan
            |       +-column_list=$subquery1.[Key#3, Value#4, kp1#5]
            |       +-expr_list=
            |       | +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
            |       | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |       | +-kp1#5 :=
            |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |       |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |       |     +-Literal(type=INT64, value=1)
            |       +-input_scan=
            |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-group_by_list=
            | +-kp1#7 := ColumnRef(type=INT64, column=$subquery1.kp1#5)
            +-aggregate_list=
              +-$pivot_agg_result#12 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
              |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
              |     | +-Literal(type=INT64, value=0)
              |     +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#11)
              |     +-Literal(type=STRING, value=NULL)
              |   +-null_handling_modifier=IGNORE_NULLS
              |   +-limit=
              |     +-Literal(type=INT64, value=1)
              +-$pivot_agg_result#13 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
                  +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                    +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                    | +-Literal(type=INT64, value=1)
                    +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#11)
                    +-Literal(type=STRING, value=NULL)
                  +-null_handling_modifier=IGNORE_NULLS
                  +-limit=
                    +-Literal(type=INT64, value=1)
==

# Analyzer not on allowlist and function supports null-handling modifiers,
# but this time, the language option to enable null-handling modifiers is not
# enabled.
[language_features=NONE,+PIVOT,+IS_DISTINCT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(ARRAY_AGG(Value) FOR Key IN (0 AS zero, 1 AS one));
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [ARRAY<STRING>]
| +-$pivot.one#5 AS one [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
        |   +-parse_location=29-45
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=50-53, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

Rewrite ERROR: generic::unimplemented: Use of aggregate function ARRAY_AGG as PIVOT expression is not supported [at 1:30]
SELECT * FROM KeyValue PIVOT(ARRAY_AGG(Value) FOR Key IN (0 AS zero, 1 AS one));
                             ^
==

# Rewriter still works when PIVOT is enabled without IS DISTINCT FROM feature
# (which the pivot rewriter makes use of internally)
[language_features=NONE,+PIVOT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one));
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=29-41
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#6, $pivot.$pivot_expr_arg#7]
        |   +-expr_list=
        |   | +-$pivot_value#6 := ColumnRef(parse_location=46-49, type=INT64, column=KeyValue.Key#1)
        |   | +-$pivot_expr_arg#7 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-zero#4 :=
          | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
          |   +-SubqueryExpr
          |     +-type=STRING
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
          |     | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#14]
          |         +-expr_list=
          |         | +-$col1#14 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
          |         |     +-SubqueryExpr
          |         |     | +-type=BOOL
          |         |     | +-subquery_type=EXISTS
          |         |     | +-parameter_list=
          |         |     | | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#9)
          |         |     | | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#10)
          |         |     | +-subquery=
          |         |     |   +-SetOperationScan
          |         |     |     +-column_list=[$intersect_all.pivot_column#13]
          |         |     |     +-op_type=INTERSECT_ALL
          |         |     |     +-input_item_list=
          |         |     |       +-SetOperationItem
          |         |     |       | +-scan=
          |         |     |       | | +-ProjectScan
          |         |     |       | |   +-column_list=[$intersect_all1.pivot_column#11]
          |         |     |       | |   +-expr_list=
          |         |     |       | |   | +-pivot_column#11 := ColumnRef(type=INT64, column=$subquery1.pivot_column#9, is_correlated=TRUE)
          |         |     |       | |   +-input_scan=
          |         |     |       | |     +-SingleRowScan
          |         |     |       | +-output_column_list=[$intersect_all1.pivot_column#11]
          |         |     |       +-SetOperationItem
          |         |     |         +-scan=
          |         |     |         | +-ProjectScan
          |         |     |         |   +-column_list=[$intersect_all2.pivot_value#12]
          |         |     |         |   +-expr_list=
          |         |     |         |   | +-pivot_value#12 := ColumnRef(type=INT64, column=$subquery1.pivot_value#10, is_correlated=TRUE)
          |         |     |         |   +-input_scan=
          |         |     |         |     +-SingleRowScan
          |         |     |         +-output_column_list=[$intersect_all2.pivot_value#12]
          |         |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#8)
          |         |     +-Literal(type=STRING, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#8, pivot_column#9, pivot_value#10]
          |             +-expr_list=
          |             | +-orig_arg#8 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
          |             | +-pivot_column#9 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
          |             | +-pivot_value#10 := Literal(type=INT64, value=0)
          |             +-input_scan=
          |               +-SingleRowScan
          +-one#5 :=
            +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              +-SubqueryExpr
                +-type=STRING
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#6)
                | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#21]
                    +-expr_list=
                    | +-$col1#21 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                    |     +-SubqueryExpr
                    |     | +-type=BOOL
                    |     | +-subquery_type=EXISTS
                    |     | +-parameter_list=
                    |     | | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#16)
                    |     | | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#17)
                    |     | +-subquery=
                    |     |   +-SetOperationScan
                    |     |     +-column_list=[$intersect_all.pivot_column#20]
                    |     |     +-op_type=INTERSECT_ALL
                    |     |     +-input_item_list=
                    |     |       +-SetOperationItem
                    |     |       | +-scan=
                    |     |       | | +-ProjectScan
                    |     |       | |   +-column_list=[$intersect_all1.pivot_column#18]
                    |     |       | |   +-expr_list=
                    |     |       | |   | +-pivot_column#18 := ColumnRef(type=INT64, column=$subquery1.pivot_column#16, is_correlated=TRUE)
                    |     |       | |   +-input_scan=
                    |     |       | |     +-SingleRowScan
                    |     |       | +-output_column_list=[$intersect_all1.pivot_column#18]
                    |     |       +-SetOperationItem
                    |     |         +-scan=
                    |     |         | +-ProjectScan
                    |     |         |   +-column_list=[$intersect_all2.pivot_value#19]
                    |     |         |   +-expr_list=
                    |     |         |   | +-pivot_value#19 := ColumnRef(type=INT64, column=$subquery1.pivot_value#17, is_correlated=TRUE)
                    |     |         |   +-input_scan=
                    |     |         |     +-SingleRowScan
                    |     |         +-output_column_list=[$intersect_all2.pivot_value#19]
                    |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#15)
                    |     +-Literal(type=STRING, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#15, pivot_column#16, pivot_value#17]
                        +-expr_list=
                        | +-orig_arg#15 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#7, is_correlated=TRUE)
                        | +-pivot_column#16 := ColumnRef(type=INT64, column=$pivot.$pivot_value#6, is_correlated=TRUE)
                        | +-pivot_value#17 := Literal(type=INT64, value=1)
                        +-input_scan=
                          +-SingleRowScan
==

# Use groupby column in outer query that has an explicit alias in the input.
# Test both qualified and unqualified name references. Also test incorrectly
# qualifying the name with the input table, which should be an error.
#
# Also test using the original column name, overridden by the alias, and confirm
# that that name does not exist either.
SELECT {{a_2|PivotResult.a_2|KeyValue.a_2|PivotInput.a_2|Value|PivotInput.Value|KeyValue.Value}} FROM (
  SELECT Key AS a_1, Value AS a_2 FROM KeyValue) PivotInput
  PIVOT(COUNT(*) AS a_4 FOR a_1 IN (0 AS a_5, 1 AS a_6)) PivotResult
--
ALTERNATION GROUP: a_2
--
QueryStmt
+-output_column_list=
| +-$groupby.a_2#6 AS a_2 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.a_2#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.a_2#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=PivotInput.[a_1#3, a_2#4]
        |   +-expr_list=
        |   | +-a_1#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-a_2#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-a_2#6 := ColumnRef(type=STRING, column=PivotInput.a_2#4)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)(parse_location=86-101)
        +-for_expr=
        | +-ColumnRef(parse_location=106-109, type=INT64, column=PivotInput.a_1#3)
        +-pivot_value_list=
          +-Literal(type=INT64, value=0)
          +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: PivotResult.a_2
--
QueryStmt
+-output_column_list=
| +-$groupby.a_2#6 AS a_2 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.a_2#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.a_2#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=PivotInput.[a_1#3, a_2#4]
        |   +-expr_list=
        |   | +-a_1#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   | +-a_2#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-a_2#6 := ColumnRef(type=STRING, column=PivotInput.a_2#4)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)(parse_location=98-113)
        +-for_expr=
        | +-ColumnRef(parse_location=118-121, type=INT64, column=PivotInput.a_1#3)
        +-pivot_value_list=
          +-Literal(type=INT64, value=0)
          +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: KeyValue.a_2
--
ERROR: Unrecognized name: KeyValue [at 1:8]
SELECT KeyValue.a_2 FROM (
       ^
--
ALTERNATION GROUP: PivotInput.a_2
--
ERROR: Unrecognized name: PivotInput; Did you mean PivotResult? [at 1:8]
SELECT PivotInput.a_2 FROM (
       ^
--
ALTERNATION GROUP: Value
--
ERROR: Unrecognized name: Value [at 1:8]
SELECT Value FROM (
       ^
--
ALTERNATION GROUP: PivotInput.Value
--
ERROR: Unrecognized name: PivotInput; Did you mean PivotResult? [at 1:8]
SELECT PivotInput.Value FROM (
       ^
--
ALTERNATION GROUP: KeyValue.Value
--
ERROR: Unrecognized name: KeyValue [at 1:8]
SELECT KeyValue.Value FROM (
       ^
==

# PIVOT used on both operands of join. Also makes sure that pivot result columns
# can be used in ON or USING clause.
SELECT * FROM
  KeyValue PIVOT(SUM(Key) AS sum_key FOR Key IN (0 AS z,1 AS o)) JoinLhs
INNER JOIN
  KeyValue PIVOT(SUM(Key) AS sum_key FOR Key IN (0 AS z,1 AS o)) JoinRhs
{{ON (JoinLhs.sum_key_z = JoinRhs.sum_key_z)|USING(sum_key_z)}}
--
ALTERNATION GROUP: ON (JoinLhs.sum_key_z = JoinRhs.sum_key_z)
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.sum_key_z#5 AS sum_key_z [INT64]
| +-$pivot.sum_key_o#6 AS sum_key_o [INT64]
| +-$groupby.Value#10 AS Value [STRING]
| +-$pivot.sum_key_z#11 AS sum_key_z [INT64]
| +-$pivot.sum_key_o#12 AS sum_key_o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.sum_key_z#5, $pivot.sum_key_o#6, $groupby.Value#10, $pivot.sum_key_z#11, $pivot.sum_key_o#12]
    +-input_scan=
      +-JoinScan
        +-column_list=[$groupby.Value#4, $pivot.sum_key_z#5, $pivot.sum_key_o#6, $groupby.Value#10, $pivot.sum_key_z#11, $pivot.sum_key_o#12]
        +-left_scan=
        | +-PivotScan
        |   +-column_list=[$groupby.Value#4, $pivot.sum_key_z#5, $pivot.sum_key_o#6]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-pivot_expr_list=
        |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   +-parse_location=31-50
        |   |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-for_expr=
        |   | +-ColumnRef(parse_location=55-58, type=INT64, column=KeyValue.Key#1)
        |   +-pivot_value_list=
        |   | +-Literal(type=INT64, value=0)
        |   | +-Literal(type=INT64, value=1)
        |   +-pivot_column_list=
        |     +-PivotColumn(column=$pivot.sum_key_z#5, pivot_expr_index=0, pivot_value_index=0)
        |     +-PivotColumn(column=$pivot.sum_key_o#6, pivot_expr_index=0, pivot_value_index=1)
        +-right_scan=
        | +-PivotScan
        |   +-column_list=[$groupby.Value#10, $pivot.sum_key_z#11, $pivot.sum_key_o#12]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#7, Value#8], table=KeyValue, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-Value#10 := ColumnRef(type=STRING, column=KeyValue.Value#8)
        |   +-pivot_expr_list=
        |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   +-parse_location=115-134
        |   |   +-ColumnRef(type=INT64, column=KeyValue.Key#7)
        |   +-for_expr=
        |   | +-ColumnRef(parse_location=139-142, type=INT64, column=KeyValue.Key#7)
        |   +-pivot_value_list=
        |   | +-Literal(type=INT64, value=0)
        |   | +-Literal(type=INT64, value=1)
        |   +-pivot_column_list=
        |     +-PivotColumn(column=$pivot.sum_key_z#11, pivot_expr_index=0, pivot_value_index=0)
        |     +-PivotColumn(column=$pivot.sum_key_o#12, pivot_expr_index=0, pivot_value_index=1)
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=$pivot.sum_key_z#5)
            +-ColumnRef(type=INT64, column=$pivot.sum_key_z#11)
--
ALTERNATION GROUP: USING(sum_key_z)
--
QueryStmt
+-output_column_list=
| +-$pivot.sum_key_z#5 AS sum_key_z [INT64]
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.sum_key_o#6 AS sum_key_o [INT64]
| +-$groupby.Value#10 AS Value [STRING]
| +-$pivot.sum_key_o#12 AS sum_key_o [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pivot.sum_key_z#5, $groupby.Value#4, $pivot.sum_key_o#6, $groupby.Value#10, $pivot.sum_key_o#12]
    +-input_scan=
      +-JoinScan
        +-column_list=[$groupby.Value#4, $pivot.sum_key_z#5, $pivot.sum_key_o#6, $groupby.Value#10, $pivot.sum_key_z#11, $pivot.sum_key_o#12]
        +-left_scan=
        | +-PivotScan
        |   +-column_list=[$groupby.Value#4, $pivot.sum_key_z#5, $pivot.sum_key_o#6]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   +-pivot_expr_list=
        |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   +-parse_location=31-50
        |   |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-for_expr=
        |   | +-ColumnRef(parse_location=55-58, type=INT64, column=KeyValue.Key#1)
        |   +-pivot_value_list=
        |   | +-Literal(type=INT64, value=0)
        |   | +-Literal(type=INT64, value=1)
        |   +-pivot_column_list=
        |     +-PivotColumn(column=$pivot.sum_key_z#5, pivot_expr_index=0, pivot_value_index=0)
        |     +-PivotColumn(column=$pivot.sum_key_o#6, pivot_expr_index=0, pivot_value_index=1)
        +-right_scan=
        | +-PivotScan
        |   +-column_list=[$groupby.Value#10, $pivot.sum_key_z#11, $pivot.sum_key_o#12]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#7, Value#8], table=KeyValue, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-Value#10 := ColumnRef(type=STRING, column=KeyValue.Value#8)
        |   +-pivot_expr_list=
        |   | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |   +-parse_location=115-134
        |   |   +-ColumnRef(type=INT64, column=KeyValue.Key#7)
        |   +-for_expr=
        |   | +-ColumnRef(parse_location=139-142, type=INT64, column=KeyValue.Key#7)
        |   +-pivot_value_list=
        |   | +-Literal(type=INT64, value=0)
        |   | +-Literal(type=INT64, value=1)
        |   +-pivot_column_list=
        |     +-PivotColumn(column=$pivot.sum_key_z#11, pivot_expr_index=0, pivot_value_index=0)
        |     +-PivotColumn(column=$pivot.sum_key_o#12, pivot_expr_index=0, pivot_value_index=1)
        +-join_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$pivot.sum_key_z#5)
        |   +-ColumnRef(type=INT64, column=$pivot.sum_key_z#11)
        +-has_using=TRUE
==

# DISTINCT modifier in aggregate function used in PIVOT.
SELECT * FROM (SELECT 1 AS x, 2 AS y, 3 AS z)
  PIVOT(
    COUNT(DISTINCT z) AS count_distinct_z,
    COUNT(DISTINCT z + 1) AS count_distinct_z_plus_1
  FOR y IN (100, 101 AS y_101, 103, NULL AS y_null));
--
QueryStmt
+-output_column_list=
| +-$groupby.x#6 AS x [INT64]
| +-$pivot.count_distinct_z_100#7 AS count_distinct_z_100 [INT64]
| +-$pivot.count_distinct_z_plus_1_100#8 AS count_distinct_z_plus_1_100 [INT64]
| +-$pivot.count_distinct_z_y_101#9 AS count_distinct_z_y_101 [INT64]
| +-$pivot.count_distinct_z_plus_1_y_101#10 AS count_distinct_z_plus_1_y_101 [INT64]
| +-$pivot.count_distinct_z_103#11 AS count_distinct_z_103 [INT64]
| +-$pivot.count_distinct_z_plus_1_103#12 AS count_distinct_z_plus_1_103 [INT64]
| +-$pivot.count_distinct_z_y_null#13 AS count_distinct_z_y_null [INT64]
| +-$pivot.count_distinct_z_plus_1_y_null#14 AS count_distinct_z_plus_1_y_null [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#6, $pivot.count_distinct_z_100#7, $pivot.count_distinct_z_plus_1_100#8, $pivot.count_distinct_z_y_101#9, $pivot.count_distinct_z_plus_1_y_101#10, $pivot.count_distinct_z_103#11, $pivot.count_distinct_z_plus_1_103#12, $pivot.count_distinct_z_y_null#13, $pivot.count_distinct_z_plus_1_y_null#14]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.x#6, $pivot.count_distinct_z_100#7, $pivot.count_distinct_z_plus_1_100#8, $pivot.count_distinct_z_y_101#9, $pivot.count_distinct_z_plus_1_y_101#10, $pivot.count_distinct_z_103#11, $pivot.count_distinct_z_plus_1_103#12, $pivot.count_distinct_z_y_null#13, $pivot.count_distinct_z_plus_1_y_null#14]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[x#1, y#2, z#3]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=INT64, value=2)
        |   | +-z#3 := Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-SingleRowScan
        +-group_by_list=
        | +-x#6 := ColumnRef(type=INT64, column=$subquery1.x#1)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        | | +-parse_location=59-96
        | | +-ColumnRef(type=INT64, column=$subquery1.z#3)
        | | +-distinct=TRUE
        | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |   +-parse_location=102-150
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$subquery1.z#3)
        |     +-Literal(type=INT64, value=1)
        |   +-distinct=TRUE
        +-for_expr=
        | +-ColumnRef(parse_location=157-158, type=INT64, column=$subquery1.y#2)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=100, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=101)
        | +-Literal(type=INT64, value=103, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=NULL)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.count_distinct_z_100#7, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.count_distinct_z_plus_1_100#8, pivot_expr_index=1, pivot_value_index=0)
          +-PivotColumn(column=$pivot.count_distinct_z_y_101#9, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.count_distinct_z_plus_1_y_101#10, pivot_expr_index=1, pivot_value_index=1)
          +-PivotColumn(column=$pivot.count_distinct_z_103#11, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.count_distinct_z_plus_1_103#12, pivot_expr_index=1, pivot_value_index=2)
          +-PivotColumn(column=$pivot.count_distinct_z_y_null#13, pivot_expr_index=0, pivot_value_index=3)
          +-PivotColumn(column=$pivot.count_distinct_z_plus_1_y_null#14, pivot_expr_index=1, pivot_value_index=3)
==

# ORDER BY clause in aggregate function used in PIVOT.
SELECT * FROM (SELECT 1 AS x, 2 AS y, 3 AS z)
  PIVOT(ARRAY_AGG(z IGNORE NULLS ORDER BY MOD(z, 3) ASC, z DESC)
  FOR y IN (100, 101 AS y_101, 103, NULL AS y_null));
--
QueryStmt
+-output_column_list=
| +-$groupby.x#6 AS x [INT64]
| +-$pivot._100#7 AS _100 [ARRAY<INT64>]
| +-$pivot.y_101#8 AS y_101 [ARRAY<INT64>]
| +-$pivot._103#9 AS _103 [ARRAY<INT64>]
| +-$pivot.y_null#10 AS y_null [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#6, $pivot._100#7, $pivot.y_101#8, $pivot._103#9, $pivot.y_null#10]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.x#6, $pivot._100#7, $pivot.y_101#8, $pivot._103#9, $pivot.y_null#10]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.x#1, $subquery1.y#2, $subquery1.z#3, $orderby.$orderbycol1#4]
        |   +-expr_list=
        |   | +-$orderbycol1#4 :=
        |   |   +-FunctionCall(ZetaSQL:mod(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=$subquery1.z#3)
        |   |     +-Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=$subquery1.[x#1, y#2, z#3]
        |       +-expr_list=
        |       | +-x#1 := Literal(type=INT64, value=1)
        |       | +-y#2 := Literal(type=INT64, value=2)
        |       | +-z#3 := Literal(type=INT64, value=3)
        |       +-input_scan=
        |         +-SingleRowScan
        +-group_by_list=
        | +-x#6 := ColumnRef(type=INT64, column=$subquery1.x#1)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
        |   +-parse_location=54-110
        |   +-ColumnRef(type=INT64, column=$subquery1.z#3)
        |   +-null_handling_modifier=IGNORE_NULLS
        |   +-order_by_item_list=
        |     +-OrderByItem
        |     | +-column_ref=
        |     |   +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
        |     +-OrderByItem
        |       +-column_ref=
        |       | +-ColumnRef(type=INT64, column=$subquery1.z#3)
        |       +-is_descending=TRUE
        +-for_expr=
        | +-ColumnRef(parse_location=117-118, type=INT64, column=$subquery1.y#2)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=100, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=101)
        | +-Literal(type=INT64, value=103, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=NULL)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._100#7, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.y_101#8, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot._103#9, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.y_null#10, pivot_expr_index=0, pivot_value_index=3)
==

# LIMIT clause in aggregate function used by PIVOT
SELECT * FROM (SELECT 1 AS x, 2 AS y, 3 AS z)
  PIVOT(ARRAY_AGG(z LIMIT 50)
  FOR y IN (100, 101 AS y_101, 103, NULL AS y_null));
--
QueryStmt
+-output_column_list=
| +-$groupby.x#5 AS x [INT64]
| +-$pivot._100#6 AS _100 [ARRAY<INT64>]
| +-$pivot.y_101#7 AS y_101 [ARRAY<INT64>]
| +-$pivot._103#8 AS _103 [ARRAY<INT64>]
| +-$pivot.y_null#9 AS y_null [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.x#5, $pivot._100#6, $pivot.y_101#7, $pivot._103#8, $pivot.y_null#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.x#5, $pivot._100#6, $pivot.y_101#7, $pivot._103#8, $pivot.y_null#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$subquery1.[x#1, y#2, z#3]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=INT64, value=2)
        |   | +-z#3 := Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-SingleRowScan
        +-group_by_list=
        | +-x#5 := ColumnRef(type=INT64, column=$subquery1.x#1)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
        |   +-parse_location=54-75
        |   +-ColumnRef(type=INT64, column=$subquery1.z#3)
        |   +-limit=
        |     +-Literal(type=INT64, value=50)
        +-for_expr=
        | +-ColumnRef(parse_location=82-83, type=INT64, column=$subquery1.y#2)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=100, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=101)
        | +-Literal(type=INT64, value=103, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=NULL)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._100#6, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.y_101#7, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot._103#8, pivot_expr_index=0, pivot_value_index=2)
          +-PivotColumn(column=$pivot.y_null#9, pivot_expr_index=0, pivot_value_index=3)
==

# PIVOT expr with HAVING modifier in aggregate function call
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue
PIVOT(MAX(Key HAVING MAX Value) AS m1, MAX(Key HAVING MAX CONCAT(Value, '_a')) AS m2
  FOR Key IN (0,1));
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$pivot.m1_0#5 AS m1_0 [INT64]
| +-$pivot.m2_0#6 AS m2_0 [INT64]
| +-$pivot.m1_1#7 AS m1_1 [INT64]
| +-$pivot.m2_1#8 AS m2_1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[m1_0#5, m2_0#6, m1_1#7, m2_1#8]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[m1_0#5, m2_0#6, m1_1#7, m2_1#8]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        | | +-parse_location=29-60
        | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | | +-having_modifier=
        | |   +-AggregateHavingModifier
        | |     +-kind=MAX
        | |     +-having_expr=
        | |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        | +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        |   +-parse_location=62-107
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-having_modifier=
        |     +-AggregateHavingModifier
        |       +-kind=MAX
        |       +-having_expr=
        |         +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |           +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |           +-Literal(type=STRING, value="_a")
        +-for_expr=
        | +-ColumnRef(parse_location=114-117, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.m1_0#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.m2_0#6, pivot_expr_index=1, pivot_value_index=0)
          +-PivotColumn(column=$pivot.m1_1#7, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot.m2_1#8, pivot_expr_index=1, pivot_value_index=1)

Rewrite ERROR: generic::unimplemented: Use of HAVING inside an aggregate function used as a PIVOT expression is not supported [at 2:7]
PIVOT(MAX(Key HAVING MAX Value) AS m1, MAX(Key HAVING MAX CONCAT(Value, '_a')...
      ^
==

# Regression test for b/191772920:
# PIVOT expr with HAVING modifier in COUNT(*) aggregate expression
[enabled_ast_rewrites=DEFAULTS]
SELECT * FROM KeyValue
PIVOT(COUNT(* HAVING MAX Value) AS m1
  FOR Key IN (0,1));
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$pivot.m1_0#4 AS m1_0 [INT64]
| +-$pivot.m1_1#5 AS m1_1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[m1_0#4, m1_1#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[m1_0#4, m1_1#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-parse_location=29-60
        |   +-having_modifier=
        |     +-AggregateHavingModifier
        |       +-kind=MAX
        |       +-having_expr=
        |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=67-70, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.m1_0#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.m1_1#5, pivot_expr_index=0, pivot_value_index=1)

Rewrite ERROR: generic::unimplemented: Use of HAVING inside an aggregate function used as a PIVOT expression is not supported [at 2:7]
PIVOT(COUNT(* HAVING MAX Value) AS m1
      ^
==

# PIVOT with different PIVOT exprs referencing different columns
# Only columns unreferenced in any of the pivot exprs should be groupby columns.
WITH t AS (SELECT 0 AS v, 1 AS w, 2 AS x, 3 AS y, 4 AS z)
SELECT * FROM t PIVOT(
  SUM(x) AS sum_x,
  AVG(y) AS avg_y,
  MAX(z) AS max_z
  FOR w IN (0, 1)
);
--
QueryStmt
+-output_column_list=
| +-$groupby.v#14 AS v [INT64]
| +-$pivot.sum_x_0#15 AS sum_x_0 [INT64]
| +-$pivot.avg_y_0#16 AS avg_y_0 [DOUBLE]
| +-$pivot.max_z_0#17 AS max_z_0 [INT64]
| +-$pivot.sum_x_1#18 AS sum_x_1 [INT64]
| +-$pivot.avg_y_1#19 AS avg_y_1 [DOUBLE]
| +-$pivot.max_z_1#20 AS max_z_1 [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.v#14, $pivot.sum_x_0#15, $pivot.avg_y_0#16, $pivot.max_z_0#17, $pivot.sum_x_1#18, $pivot.avg_y_1#19, $pivot.max_z_1#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[v#1, w#2, x#3, y#4, z#5]
    |       +-expr_list=
    |       | +-v#1 := Literal(type=INT64, value=0)
    |       | +-w#2 := Literal(type=INT64, value=1)
    |       | +-x#3 := Literal(type=INT64, value=2)
    |       | +-y#4 := Literal(type=INT64, value=3)
    |       | +-z#5 := Literal(type=INT64, value=4)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.v#14, $pivot.sum_x_0#15, $pivot.avg_y_0#16, $pivot.max_z_0#17, $pivot.sum_x_1#18, $pivot.avg_y_1#19, $pivot.max_z_1#20]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.v#14, $pivot.sum_x_0#15, $pivot.avg_y_0#16, $pivot.max_z_0#17, $pivot.sum_x_1#18, $pivot.avg_y_1#19, $pivot.max_z_1#20]
            +-input_scan=
            | +-WithRefScan(column_list=t.[v#6, w#7, x#8, y#9, z#10], with_query_name="t")
            +-group_by_list=
            | +-v#14 := ColumnRef(type=INT64, column=t.v#6)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            | | +-parse_location=83-98
            | | +-ColumnRef(type=INT64, column=t.x#8)
            | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
            | | +-parse_location=102-117
            | | +-ColumnRef(type=INT64, column=t.y#9)
            | +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
            |   +-parse_location=121-136
            |   +-ColumnRef(type=INT64, column=t.z#10)
            +-for_expr=
            | +-ColumnRef(parse_location=143-144, type=INT64, column=t.w#7)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
            | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.sum_x_0#15, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.avg_y_0#16, pivot_expr_index=1, pivot_value_index=0)
              +-PivotColumn(column=$pivot.max_z_0#17, pivot_expr_index=2, pivot_value_index=0)
              +-PivotColumn(column=$pivot.sum_x_1#18, pivot_expr_index=0, pivot_value_index=1)
              +-PivotColumn(column=$pivot.avg_y_1#19, pivot_expr_index=1, pivot_value_index=1)
              +-PivotColumn(column=$pivot.max_z_1#20, pivot_expr_index=2, pivot_value_index=1)
==

# Subquery in PIVOT expr (not supported by rewriter)
[language_features=NONE,+PIVOT,+IS_DISTINCT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=DEFAULTS]
SELECT * From KeyValue2
  PIVOT(
    SUM(1 + (SELECT SUM(Key) From KeyValue))
    FOR Key IN (0,1));
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$groupby.Value2#7 AS Value2 [STRING]
| +-$pivot._0#8 AS _0 [INT64]
| +-$pivot._1#9 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
        +-input_scan=
        | +-TableScan(column_list=KeyValue2.[Key#1, Value2#2], table=KeyValue2, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value2#7 := ColumnRef(type=STRING, column=KeyValue2.Value2#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=37-77
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-SubqueryExpr
        |       +-type=INT64
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$aggregate.$agg1#5]
        |           +-input_scan=
        |             +-AggregateScan
        |               +-column_list=[$aggregate.$agg1#5]
        |               +-input_scan=
        |               | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
        |               +-aggregate_list=
        |                 +-$agg1#5 :=
        |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                     +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        +-for_expr=
        | +-ColumnRef(parse_location=86-89, type=INT64, column=KeyValue2.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._0#8, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._1#9, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value2#7 AS Value2 [STRING]
| +-$pivot._0#8 AS _0 [INT64]
| +-$pivot._1#9 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue2.Key#1, KeyValue2.Value2#2, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11]
        |   +-expr_list=
        |   | +-$pivot_value#10 := ColumnRef(parse_location=86-89, type=INT64, column=KeyValue2.Key#1)
        |   | +-$pivot_expr_arg#11 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-Literal(type=INT64, value=1)
        |   |     +-SubqueryExpr
        |   |       +-type=INT64
        |   |       +-subquery_type=SCALAR
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=[$aggregate.$agg1#5]
        |   |           +-input_scan=
        |   |             +-AggregateScan
        |   |               +-column_list=[$aggregate.$agg1#5]
        |   |               +-input_scan=
        |   |               | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
        |   |               +-aggregate_list=
        |   |                 +-$agg1#5 :=
        |   |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |                     +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue2.[Key#1, Value2#2], table=KeyValue2, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value2#7 := ColumnRef(type=STRING, column=KeyValue2.Value2#2)
        +-aggregate_list=
          +-_0#8 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-SubqueryExpr
          |     +-type=INT64
          |     +-subquery_type=SCALAR
          |     +-parameter_list=
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-subquery=
          |       +-ProjectScan
          |         +-column_list=[$expr_subquery.$col1#15]
          |         +-expr_list=
          |         | +-$col1#15 :=
          |         |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#13)
          |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#14)
          |         |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#12)
          |         |     +-Literal(type=INT64, value=NULL)
          |         +-input_scan=
          |           +-ProjectScan
          |             +-column_list=$subquery1.[orig_arg#12, pivot_column#13, pivot_value#14]
          |             +-expr_list=
          |             | +-orig_arg#12 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
          |             | +-pivot_column#13 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
          |             | +-pivot_value#14 := Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
          |             +-input_scan=
          |               +-SingleRowScan
          +-_1#9 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-SubqueryExpr
                +-type=INT64
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$expr_subquery.$col1#19]
                    +-expr_list=
                    | +-$col1#19 :=
                    |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                    |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#17)
                    |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#18)
                    |     +-ColumnRef(type=INT64, column=$subquery1.orig_arg#16)
                    |     +-Literal(type=INT64, value=NULL)
                    +-input_scan=
                      +-ProjectScan
                        +-column_list=$subquery1.[orig_arg#16, pivot_column#17, pivot_value#18]
                        +-expr_list=
                        | +-orig_arg#16 := ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11, is_correlated=TRUE)
                        | +-pivot_column#17 := ColumnRef(type=INT64, column=$pivot.$pivot_value#10, is_correlated=TRUE)
                        | +-pivot_value#18 := Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
                        +-input_scan=
                          +-SingleRowScan
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
QueryStmt
+-output_column_list=
| +-$groupby.Value2#7 AS Value2 [STRING]
| +-$pivot._0#8 AS _0 [INT64]
| +-$pivot._1#9 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
        +-input_scan=
        | +-TableScan(column_list=KeyValue2.[Key#1, Value2#2], table=KeyValue2, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value2#7 := ColumnRef(type=STRING, column=KeyValue2.Value2#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=37-77
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-SubqueryExpr
        |       +-type=INT64
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$aggregate.$agg1#5]
        |           +-input_scan=
        |             +-AggregateScan
        |               +-column_list=[$aggregate.$agg1#5]
        |               +-input_scan=
        |               | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
        |               +-aggregate_list=
        |                 +-$agg1#5 :=
        |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                     +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        +-for_expr=
        | +-ColumnRef(parse_location=86-89, type=INT64, column=KeyValue2.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
        | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot._0#8, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot._1#9, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Value2#7 AS Value2 [STRING]
| +-$pivot._0#8 AS _0 [INT64]
| +-$pivot._1#9 AS _1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Value2#7, $pivot._0#8, $pivot._1#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue2.Key#1, KeyValue2.Value2#2, $pivot.$pivot_value#10, $pivot.$pivot_expr_arg#11]
        |   +-expr_list=
        |   | +-$pivot_value#10 := ColumnRef(parse_location=86-89, type=INT64, column=KeyValue2.Key#1)
        |   | +-$pivot_expr_arg#11 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-Literal(type=INT64, value=1)
        |   |     +-SubqueryExpr
        |   |       +-type=INT64
        |   |       +-subquery_type=SCALAR
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=[$aggregate.$agg1#5]
        |   |           +-input_scan=
        |   |             +-AggregateScan
        |   |               +-column_list=[$aggregate.$agg1#5]
        |   |               +-input_scan=
        |   |               | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
        |   |               +-aggregate_list=
        |   |                 +-$agg1#5 :=
        |   |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |                     +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue2.[Key#1, Value2#2], table=KeyValue2, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value2#7 := ColumnRef(type=STRING, column=KeyValue2.Value2#2)
        +-aggregate_list=
          +-_0#8 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
          |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
          |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
          |     | +-Literal(type=INT64, value=0, preserve_in_literal_remover=TRUE)
          |     +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
          |     +-Literal(type=INT64, value=NULL)
          +-_1#9 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#10)
                | +-Literal(type=INT64, value=1, preserve_in_literal_remover=TRUE)
                +-ColumnRef(type=INT64, column=$pivot.$pivot_expr_arg#11)
                +-Literal(type=INT64, value=NULL)
==

# Regression test for b/189447204:
# PIVOT clause contains implicit groupby column of type which does not support
# GROUPBY in the language options.
#
# (Overriding feature options, as FEATURE_GROUP_BY_STRUCT must be off for
#  this test).
[language_features=NONE,+PIVOT]
select * from (
    select struct(1,2), 100 AS y union all
    select struct(1,2), 101 AS y union all
    select struct(1,2), 102 AS y union all
    select struct(1,2), 103 AS y
)
PIVOT(SUM(y) FOR true in (true));
--
ERROR: Column 1 of type STRUCT cannot be used as an implicit grouping column of a PIVOT clause [at 7:1]
PIVOT(SUM(y) FOR true in (true));
^
==

# Similar to the above, but the implicit groupby column is named. This is also
# not allowed, but affects the error message.
#
# (Overriding feature options, as FEATURE_GROUP_BY_STRUCT must be off for
#  this test).
[language_features=NONE,+PIVOT]
select * from (
    select struct(1,2) AS x, 100 AS y union all
    select struct(1,2) AS x, 101 AS y union all
    select struct(1,2) AS x, 102 AS y union all
    select struct(1,2) AS x, 103 AS y
)
PIVOT(SUM(y) FOR true in (true));
--
ERROR: Column x of type STRUCT cannot be used as an implicit grouping column of a PIVOT clause [at 7:1]
PIVOT(SUM(y) FOR true in (true));
^
==

[mode=expression]
[language_features=NONE,+PIVOT,+IS_DISTINCT{{|,+SIMPLIFY_PIVOT_REWRITE}}]
[enabled_ast_rewrites=ALL]
ARRAY(
  SELECT AS STRUCT * FROM KeyValue PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one))
)
--
ALTERNATION GROUP: <empty>
--
SubqueryExpr
+-type=ARRAY<STRUCT<zero INT64, one INT64>>
+-subquery_type=ARRAY
+-subquery=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#6]
    +-expr_list=
    | +-$struct#6 :=
    |   +-MakeStruct
    |     +-type=STRUCT<zero INT64, one INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$pivot.zero#4)
    |       +-ColumnRef(type=INT64, column=$pivot.one#5)
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
          +-PivotScan
            +-column_list=$pivot.[zero#4, one#5]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
            |   +-parse_location=48-60
            |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-for_expr=
            | +-ColumnRef(parse_location=65-68, type=INT64, column=KeyValue.Key#1)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=0)
            | +-Literal(type=INT64, value=1)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
SubqueryExpr
+-type=ARRAY<STRUCT<zero INT64, one INT64>>
+-subquery_type=ARRAY
+-subquery=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#6]
    +-expr_list=
    | +-$struct#6 :=
    |   +-MakeStruct
    |     +-type=STRUCT<zero INT64, one INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$pivot.zero#4)
    |       +-ColumnRef(type=INT64, column=$pivot.one#5)
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
          +-AggregateScan
            +-column_list=$pivot.[zero#4, one#5]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#7, $pivot.$pivot_expr_arg#8]
            |   +-expr_list=
            |   | +-$pivot_value#7 := ColumnRef(parse_location=65-68, type=INT64, column=KeyValue.Key#1)
            |   | +-$pivot_expr_arg#8 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-aggregate_list=
              +-zero#4 :=
              | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              |   +-SubqueryExpr
              |     +-type=STRING
              |     +-subquery_type=SCALAR
              |     +-parameter_list=
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
              |     | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#8)
              |     +-subquery=
              |       +-ProjectScan
              |         +-column_list=[$expr_subquery.$col1#12]
              |         +-expr_list=
              |         | +-$col1#12 :=
              |         |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
              |         |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#10)
              |         |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#11)
              |         |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#9)
              |         |     +-Literal(type=STRING, value=NULL)
              |         +-input_scan=
              |           +-ProjectScan
              |             +-column_list=$subquery1.[orig_arg#9, pivot_column#10, pivot_value#11]
              |             +-expr_list=
              |             | +-orig_arg#9 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#8, is_correlated=TRUE)
              |             | +-pivot_column#10 := ColumnRef(type=INT64, column=$pivot.$pivot_value#7, is_correlated=TRUE)
              |             | +-pivot_value#11 := Literal(type=INT64, value=0)
              |             +-input_scan=
              |               +-SingleRowScan
              +-one#5 :=
                +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
                  +-SubqueryExpr
                    +-type=STRING
                    +-subquery_type=SCALAR
                    +-parameter_list=
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
                    | +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#8)
                    +-subquery=
                      +-ProjectScan
                        +-column_list=[$expr_subquery.$col1#16]
                        +-expr_list=
                        | +-$col1#16 :=
                        |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                        |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                        |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_column#14)
                        |     | +-ColumnRef(type=INT64, column=$subquery1.pivot_value#15)
                        |     +-ColumnRef(type=STRING, column=$subquery1.orig_arg#13)
                        |     +-Literal(type=STRING, value=NULL)
                        +-input_scan=
                          +-ProjectScan
                            +-column_list=$subquery1.[orig_arg#13, pivot_column#14, pivot_value#15]
                            +-expr_list=
                            | +-orig_arg#13 := ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#8, is_correlated=TRUE)
                            | +-pivot_column#14 := ColumnRef(type=INT64, column=$pivot.$pivot_value#7, is_correlated=TRUE)
                            | +-pivot_value#15 := Literal(type=INT64, value=1)
                            +-input_scan=
                              +-SingleRowScan
--
ALTERNATION GROUP: ,+SIMPLIFY_PIVOT_REWRITE
--
SubqueryExpr
+-type=ARRAY<STRUCT<zero INT64, one INT64>>
+-subquery_type=ARRAY
+-subquery=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#6]
    +-expr_list=
    | +-$struct#6 :=
    |   +-MakeStruct
    |     +-type=STRUCT<zero INT64, one INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$pivot.zero#4)
    |       +-ColumnRef(type=INT64, column=$pivot.one#5)
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
          +-PivotScan
            +-column_list=$pivot.[zero#4, one#5]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
            |   +-parse_location=48-60
            |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-for_expr=
            | +-ColumnRef(parse_location=65-68, type=INT64, column=KeyValue.Key#1)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=0)
            | +-Literal(type=INT64, value=1)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
              +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)

[REWRITTEN AST]
SubqueryExpr
+-type=ARRAY<STRUCT<zero INT64, one INT64>>
+-subquery_type=ARRAY
+-subquery=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#6]
    +-expr_list=
    | +-$struct#6 :=
    |   +-MakeStruct
    |     +-type=STRUCT<zero INT64, one INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$pivot.zero#4)
    |       +-ColumnRef(type=INT64, column=$pivot.one#5)
    +-input_scan=
      +-ProjectScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
          +-AggregateScan
            +-column_list=$pivot.[zero#4, one#5]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pivot.$pivot_value#7, $pivot.$pivot_expr_arg#8]
            |   +-expr_list=
            |   | +-$pivot_value#7 := ColumnRef(parse_location=65-68, type=INT64, column=KeyValue.Key#1)
            |   | +-$pivot_expr_arg#8 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-aggregate_list=
              +-zero#4 :=
              | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              |   +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
              |     +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
              |     | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
              |     | +-Literal(type=INT64, value=0)
              |     +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#8)
              |     +-Literal(type=STRING, value=NULL)
              +-one#5 :=
                +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
                  +-FunctionCall(ZetaSQL:if(BOOL, STRING, STRING) -> STRING)
                    +-FunctionCall(ZetaSQL:$is_not_distinct_from(INT64, INT64) -> BOOL)
                    | +-ColumnRef(type=INT64, column=$pivot.$pivot_value#7)
                    | +-Literal(type=INT64, value=1)
                    +-ColumnRef(type=STRING, column=$pivot.$pivot_expr_arg#8)
                    +-Literal(type=STRING, value=NULL)
==

# Regression test for b/250862965
# (Disabling SQLBuilder due to b/254913718).
# TODO: Enable SQLBuilder when fixed.
[no_run_sqlbuilder]
WITH t AS (
  SELECT *, 1 AS a, 2 AS b, c AS d
  FROM ( SELECT 3 AS c)
)
SELECT * FROM t PIVOT(MAX(a) FOR b IN (2))
--
QueryStmt
+-output_column_list=
| +-$groupby.c#9 AS c [INT64]
| +-$groupby.d#10 AS d [INT64]
| +-$pivot._2#11 AS _2 [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.c#9, $groupby.d#10, $pivot._2#11]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$subquery1.c#1, t.a#2, t.b#3, $subquery1.c#1]
    |       +-expr_list=
    |       | +-a#2 := Literal(type=INT64, value=1)
    |       | +-b#3 := Literal(type=INT64, value=2)
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=[$subquery1.c#1]
    |           +-expr_list=
    |           | +-c#1 := Literal(type=INT64, value=3)
    |           +-input_scan=
    |             +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.c#9, $groupby.d#10, $pivot._2#11]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.c#9, $groupby.d#10, $pivot._2#11]
            +-input_scan=
            | +-WithRefScan(column_list=t.[c#4, a#5, b#6, c#7], with_query_name="t")
            +-group_by_list=
            | +-c#9 := ColumnRef(type=INT64, column=t.c#7)
            | +-d#10 := ColumnRef(type=INT64, column=t.c#7)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
            |   +-parse_location=95-101
            |   +-ColumnRef(type=INT64, column=t.a#5)
            +-for_expr=
            | +-ColumnRef(parse_location=106-107, type=INT64, column=t.b#6)
            +-pivot_value_list=
            | +-Literal(type=INT64, value=2, preserve_in_literal_remover=TRUE)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot._2#11, pivot_expr_index=0, pivot_value_index=0)
==

# Regression test for b/309024915
WITH Produce AS (
  SELECT 'Kale' as product, 51 as sales, 'Q1' as quarter, 2020 as year UNION ALL
  SELECT 'Kale', 3, 'Q1', 2020 UNION ALL
  SELECT 'Kale', NULL, 'Q1', 2020 UNION ALL
  SELECT 'Kale', 23, 'Q2', 2020 UNION ALL
  SELECT 'Kale', 45, 'Q3', 2020 UNION ALL
  SELECT 'Kale', 3, 'Q4', 2020 UNION ALL
  SELECT 'Kale', 70, 'Q1', 2021 UNION ALL
  SELECT 'Kale', 85, 'Q2', 2021 UNION ALL
  SELECT 'Apple', 77, 'Q1', 2020 UNION ALL
  SELECT 'Apple', 0, 'Q2', 2020 UNION ALL
  SELECT 'Apple', 1, 'Q1', 2021),
  T AS (SELECT 1 AS a)
SELECT * FROM
  Produce, T
  PIVOT(STRING_AGG(product, "," ORDER BY sales) FOR quarter IN ('Q1', 'Q2', 'Q3', 'Q4'))

--
ERROR: Unrecognized name: product [at 16:20]
  PIVOT(STRING_AGG(product, "," ORDER BY sales) FOR quarter IN ('Q1', 'Q2', '...
                   ^
==

[language_features=NONE,+PIVOT,+UNNEST_AND_FLATTEN_ARRAYS]
# Regression test for b/330921238: IN expr used with constant FLATTEN expression
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (
  1 AS v1,
  FLATTEN(STRUCT([STRUCT(1 AS quantity), STRUCT(2 AS quantity)] AS sales).sales.quantity)[OFFSET(0)] AS v2
));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#4 AS Value [STRING]
| +-$pivot.v1#5 AS v1 [INT64]
| +-$pivot.v2#6 AS v2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Value#4, $pivot.v1#5, $pivot.v2#6]
    +-input_scan=
      +-PivotScan
        +-column_list=[$groupby.Value#4, $pivot.v1#5, $pivot.v2#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-group_by_list=
        | +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=110-118
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-for_expr=
        | +-ColumnRef(parse_location=123-126, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=1)
        | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
        |   +-Flatten
        |   | +-type=ARRAY<INT64>
        |   | +-expr=
        |   | | +-GetStructField
        |   | |   +-type=ARRAY<STRUCT<quantity INT64>>
        |   | |   +-expr=
        |   | |   | +-Literal(type=STRUCT<sales ARRAY<STRUCT<quantity INT64>>>, value={sales:[{quantity:1}, {quantity:2}]})
        |   | |   +-field_idx=0
        |   | +-get_field_list=
        |   |   +-GetStructField
        |   |     +-type=INT64
        |   |     +-expr=
        |   |     | +-FlattenedArg(type=STRUCT<quantity INT64>)
        |   |     +-field_idx=0
        |   +-Literal(type=INT64, value=0)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.v1#5, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.v2#6, pivot_expr_index=0, pivot_value_index=1)
==

[language_features=NONE,+PIVOT,+UNNEST_AND_FLATTEN_ARRAYS,+GROUP_BY_STRUCT,+GROUP_BY_ARRAY]
# Regression test for b/330921238: IN expr used with constant FLATTEN expression
WITH T AS (
  SELECT 'hello' AS x, STRUCT([STRUCT(1 AS quantity), STRUCT(2 AS quantity)] AS sales) AS y, 100 AS z, 1 AS quantity
)
SELECT * FROM T
PIVOT(SUM(z) FOR quantity IN (
  1 AS v1,
  FLATTEN(y.sales.quantity)[OFFSET(1)] AS v2
));
--
ERROR: IN expression in PIVOT clause must be constant [at 8:3]
  FLATTEN(y.sales.quantity)[OFFSET(1)] AS v2
  ^
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT QUARTER1 = 'Q1';
--
CreateConstantStmt
+-name_path=QUARTER1
+-expr=
  +-Literal(type=STRING, value="Q1")
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT INT_CATEGORY_A = 10;
--
CreateConstantStmt
+-name_path=INT_CATEGORY_A
+-expr=
  +-Literal(type=INT64, value=10)
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT ITEM1 = STRUCT< value INT64, value2 INT64 > (1, 2);
--
CreateConstantStmt
+-name_path=ITEM1
+-expr=
  +-Literal(type=STRUCT<value INT64, value2 INT64>, value={value:1, value2:2}, has_explicit_type=TRUE)
==

[use_database=db1]
[language_features=NONE,+PIVOT,+ANALYSIS_CONSTANT_PIVOT_COLUMN]
WITH PRODUCE AS (
  SELECT 'Kale' as product, 51 as sales, 'Q1' as quarter, 2020 as year UNION ALL
  SELECT 'Kale', 3, 'Q1', 2020 UNION ALL
  SELECT 'Kale', NULL, 'Q1', 2020 UNION ALL
  SELECT 'Kale', 23, 'Q2', 2020 UNION ALL
  SELECT 'Kale', 45, 'Q3', 2020 UNION ALL
  SELECT 'Kale', 3, 'Q4', 2020
)
SELECT *
FROM
  Produce
    PIVOT(
      SUM(sales)
        FOR
          quarter IN (QUARTER1)
    );
--
QueryStmt
+-output_column_list=
| +-$groupby.product#34 AS product [STRING]
| +-$groupby.year#35 AS year [INT64]
| +-$pivot.Q1#36 AS Q1 [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.product#34, $groupby.year#35, $pivot.Q1#36]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="PRODUCE"
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=$union_all.[product#25, sales#26, quarter#27, year#28]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all1.[product#1, sales#2, quarter#3, year#4]
    |         | |   +-expr_list=
    |         | |   | +-product#1 := Literal(type=STRING, value="Kale")
    |         | |   | +-sales#2 := Literal(type=INT64, value=51)
    |         | |   | +-quarter#3 := Literal(type=STRING, value="Q1")
    |         | |   | +-year#4 := Literal(type=INT64, value=2020)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all1.[product#1, sales#2, quarter#3, year#4]
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all2.[$col1#5, $col2#6, $col3#7, $col4#8]
    |         | |   +-expr_list=
    |         | |   | +-$col1#5 := Literal(type=STRING, value="Kale")
    |         | |   | +-$col2#6 := Literal(type=INT64, value=3)
    |         | |   | +-$col3#7 := Literal(type=STRING, value="Q1")
    |         | |   | +-$col4#8 := Literal(type=INT64, value=2020)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all2.[$col1#5, $col2#6, $col3#7, $col4#8]
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all3.[$col1#9, $col2#10, $col3#11, $col4#12]
    |         | |   +-expr_list=
    |         | |   | +-$col1#9 := Literal(type=STRING, value="Kale")
    |         | |   | +-$col2#10 := Literal(type=INT64, value=NULL)
    |         | |   | +-$col3#11 := Literal(type=STRING, value="Q1")
    |         | |   | +-$col4#12 := Literal(type=INT64, value=2020)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all3.[$col1#9, $col2#10, $col3#11, $col4#12]
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all4.[$col1#13, $col2#14, $col3#15, $col4#16]
    |         | |   +-expr_list=
    |         | |   | +-$col1#13 := Literal(type=STRING, value="Kale")
    |         | |   | +-$col2#14 := Literal(type=INT64, value=23)
    |         | |   | +-$col3#15 := Literal(type=STRING, value="Q2")
    |         | |   | +-$col4#16 := Literal(type=INT64, value=2020)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all4.[$col1#13, $col2#14, $col3#15, $col4#16]
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all5.[$col1#17, $col2#18, $col3#19, $col4#20]
    |         | |   +-expr_list=
    |         | |   | +-$col1#17 := Literal(type=STRING, value="Kale")
    |         | |   | +-$col2#18 := Literal(type=INT64, value=45)
    |         | |   | +-$col3#19 := Literal(type=STRING, value="Q3")
    |         | |   | +-$col4#20 := Literal(type=INT64, value=2020)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all5.[$col1#17, $col2#18, $col3#19, $col4#20]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=$union_all6.[$col1#21, $col2#22, $col3#23, $col4#24]
    |           |   +-expr_list=
    |           |   | +-$col1#21 := Literal(type=STRING, value="Kale")
    |           |   | +-$col2#22 := Literal(type=INT64, value=3)
    |           |   | +-$col3#23 := Literal(type=STRING, value="Q4")
    |           |   | +-$col4#24 := Literal(type=INT64, value=2020)
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-output_column_list=$union_all6.[$col1#21, $col2#22, $col3#23, $col4#24]
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.product#34, $groupby.year#35, $pivot.Q1#36]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.product#34, $groupby.year#35, $pivot.Q1#36]
            +-input_scan=
            | +-WithRefScan(column_list=PRODUCE.[product#29, sales#30, quarter#31, year#32], with_query_name="PRODUCE")
            +-group_by_list=
            | +-product#34 := ColumnRef(type=STRING, column=PRODUCE.product#29)
            | +-year#35 := ColumnRef(type=INT64, column=PRODUCE.year#32)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=342-352
            |   +-ColumnRef(type=INT64, column=PRODUCE.sales#30)
            +-for_expr=
            | +-ColumnRef(parse_location=375-382, type=STRING, column=PRODUCE.quarter#31)
            +-pivot_value_list=
            | +-Constant(QUARTER1, type=STRING, value="Q1")
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.Q1#36, pivot_expr_index=0, pivot_value_index=0)
==

[use_database=db1]
[language_features=NONE,+PIVOT,+ANALYSIS_CONSTANT_PIVOT_COLUMN]
WITH KeyValue AS (
  SELECT 10 AS Key, 'ValueA' AS Value UNION ALL
  SELECT 20 AS Key, 'ValueB' AS Value
)
SELECT * FROM KeyValue
PIVOT(SUM(Key) FOR Key IN (
  INT_CATEGORY_A
));
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#10 AS Value [STRING]
| +-$pivot._10#11 AS _10 [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.Value#10, $pivot._10#11]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="KeyValue"
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=$union_all.[Key#5, Value#6]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all1.[Key#1, Value#2]
    |         | |   +-expr_list=
    |         | |   | +-Key#1 := Literal(type=INT64, value=10)
    |         | |   | +-Value#2 := Literal(type=STRING, value="ValueA")
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all1.[Key#1, Value#2]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=$union_all2.[Key#3, Value#4]
    |           |   +-expr_list=
    |           |   | +-Key#3 := Literal(type=INT64, value=20)
    |           |   | +-Value#4 := Literal(type=STRING, value="ValueB")
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-output_column_list=$union_all2.[Key#3, Value#4]
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.Value#10, $pivot._10#11]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.Value#10, $pivot._10#11]
            +-input_scan=
            | +-WithRefScan(column_list=KeyValue.[Key#7, Value#8], with_query_name="KeyValue")
            +-group_by_list=
            | +-Value#10 := ColumnRef(type=STRING, column=KeyValue.Value#8)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   +-parse_location=136-144
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#7)
            +-for_expr=
            | +-ColumnRef(parse_location=149-152, type=INT64, column=KeyValue.Key#7)
            +-pivot_value_list=
            | +-Constant(INT_CATEGORY_A, type=INT64, value=10)
            +-pivot_column_list=
              +-PivotColumn(column=$pivot._10#11, pivot_expr_index=0, pivot_value_index=0)
==

[use_database=db1]
[language_features=NONE,{{+ANALYSIS_CONSTANT_PIVOT_COLUMN,|}}+PIVOT,+GROUP_BY_STRUCT]
WITH KeyValue AS (
  SELECT STRUCT< value INT64, value2 INT64 > (10, 20) AS Key, 'ItemType1' AS Value UNION ALL
  SELECT STRUCT< value INT64, value2 INT64 > (5, 15) AS Key, 'ItemType2' AS Value
)
SELECT * FROM KeyValue
PIVOT(COUNT(Key) FOR Key IN (
  ITEM1
));
--
ALTERNATION GROUP: +ANALYSIS_CONSTANT_PIVOT_COLUMN,
--
QueryStmt
+-output_column_list=
| +-$groupby.Value#10 AS Value [STRING]
| +-$pivot.value_1_value2_2#11 AS value_1_value2_2 [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.Value#10, $pivot.value_1_value2_2#11]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="KeyValue"
    |   +-with_subquery=
    |     +-SetOperationScan
    |       +-column_list=$union_all.[Key#5, Value#6]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=$union_all1.[Key#1, Value#2]
    |         | |   +-expr_list=
    |         | |   | +-Key#1 := Literal(type=STRUCT<value INT64, value2 INT64>, value={value:10, value2:20}, has_explicit_type=TRUE)
    |         | |   | +-Value#2 := Literal(type=STRING, value="ItemType1")
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=$union_all1.[Key#1, Value#2]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=$union_all2.[Key#3, Value#4]
    |           |   +-expr_list=
    |           |   | +-Key#3 := Literal(type=STRUCT<value INT64, value2 INT64>, value={value:5, value2:15}, has_explicit_type=TRUE)
    |           |   | +-Value#4 := Literal(type=STRING, value="ItemType2")
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-output_column_list=$union_all2.[Key#3, Value#4]
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.Value#10, $pivot.value_1_value2_2#11]
        +-input_scan=
          +-PivotScan
            +-column_list=[$groupby.Value#10, $pivot.value_1_value2_2#11]
            +-input_scan=
            | +-WithRefScan(column_list=KeyValue.[Key#7, Value#8], with_query_name="KeyValue")
            +-group_by_list=
            | +-Value#10 := ColumnRef(type=STRING, column=KeyValue.Value#8)
            +-pivot_expr_list=
            | +-AggregateFunctionCall(ZetaSQL:count(STRUCT<value INT64, value2 INT64>) -> INT64)
            |   +-parse_location=225-235
            |   +-ColumnRef(type=STRUCT<value INT64, value2 INT64>, column=KeyValue.Key#7)
            +-for_expr=
            | +-ColumnRef(parse_location=240-243, type=STRUCT<value INT64, value2 INT64>, column=KeyValue.Key#7)
            +-pivot_value_list=
            | +-Constant(ITEM1, type=STRUCT<value INT64, value2 INT64>, value={value:1, value2:2})
            +-pivot_column_list=
              +-PivotColumn(column=$pivot.value_1_value2_2#11, pivot_expr_index=0, pivot_value_index=0)
--
ALTERNATION GROUP: <empty>
--
ERROR: Generating an implicit alias for this PIVOT value is not supported; please provide an explicit alias [at 7:3]
  ITEM1
  ^
==

[use_database=db1]
SELECT * FROM (SELECT 1 x, CAST('2015-06-23' AS DATE) y) t
PIVOT(
  SUM(x)
  FOR y IN (TEST_DATE as Date)
);
--
QueryStmt
+-output_column_list=
| +-$pivot.Date#4 AS Date [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pivot.Date#4]
    +-input_scan=
      +-PivotScan
        +-column_list=[$pivot.Date#4]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=t.[x#1, y#2]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   | +-y#2 := Literal(type=DATE, value=2015-06-23, has_explicit_type=TRUE)
        |   +-input_scan=
        |     +-SingleRowScan
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=68-74
        |   +-ColumnRef(type=INT64, column=t.x#1)
        +-for_expr=
        | +-ColumnRef(parse_location=81-82, type=DATE, column=t.y#2)
        +-pivot_value_list=
        | +-Constant(TEST_DATE, type=DATE, value=2024-01-01)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.Date#4, pivot_expr_index=0, pivot_value_index=0)
==

# Example of a PIVOT value that is not supported by AppendPivotColumnName function
# because it's a TIME value and does not have an explicit alias.
[use_database=db1]
[language_features=NONE,+PIVOT,+ANALYSIS_CONSTANT_PIVOT_COLUMN]
WITH PRODUCE AS (
  SELECT 'Kale' as product, 51 as sales, test_time as quarter_val, 2020 as year UNION ALL
  SELECT 'Kale', 3, test_time, 2020
)
SELECT *
FROM
  Produce
    PIVOT(
      SUM(sales)
        FOR
          quarter_val IN (test_time)
    );

--
ERROR: PIVOT values of type TIME must specify an alias [at 11:27]
          quarter_val IN (test_time)
                          ^
==

SELECT
  *
FROM
  UNNEST(ARRAY[1, 2, 3]) {{WITH OFFSET|WITH OFFSET x|WITH OFFSET AS x}}
  UNPIVOT(a FOR b IN ((c))) AS x
--
ERROR: UNPIVOT is not allowed with array scans [at 5:3]
  UNPIVOT(a FOR b IN ((c))) AS x
  ^
