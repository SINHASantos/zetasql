[default language_features=NONE,+SQL_GRAPH]
[default no_test_extract_table_names]
[default show_sqlbuilder_output]

# Full edge pattern without label expr.
select * from
graph_table(
  aml
  match -[e WHERE e.PersonId = 1]->
  columns(e.AccountId)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.AccountId#4 AS AccountId [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.AccountId#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.AccountId#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-filter_expr=
        |       | | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       | | |   +-GraphGetElementProperty
        |       | | |   | +-type=INT64
        |       | | |   | +-expr=
        |       | | |   | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
        |       | | |   | +-property=personId(INT64)
        |       | | |   +-Literal(type=INT64, value=1)
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element2#3
        +-shape_expr_list=
          +-AccountId#4 :=
            +-GraphGetElementProperty
              +-type=INT64
              +-expr=
              | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
              +-property=accountId(INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS AccountId
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)
      WHERE
        (a_3.personId) = 1]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.accountId AS a_5
    )
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)
      WHERE
        (a_3.personId) = 1]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.accountId AS a_5
    )
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS AccountId;
==

# Full edge pattern.
select * from
graph_table(
  aml
  match -[e IS PersonOwnAccount WHERE e.PersonId = 1]->
  columns(e.AccountId)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.AccountId#4 AS AccountId [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.AccountId#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.AccountId#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-filter_expr=
        |       | | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       | | |   +-GraphGetElementProperty
        |       | | |   | +-type=INT64
        |       | | |   | +-expr=
        |       | | |   | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.e#2)
        |       | | |   | +-property=personId(INT64)
        |       | | |   +-Literal(type=INT64, value=1)
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=48-64, label=aml.PersonOwnAccount)
        |       | | +-target_element_table_list=[aml.PersonOwnAccount]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element2#3
        +-shape_expr_list=
          +-AccountId#4 :=
            +-GraphGetElementProperty
              +-type=INT64
              +-expr=
              | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.e#2)
              +-property=accountId(INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS AccountId
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS PersonOwnAccount
      WHERE
        (a_3.personId) = 1]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.accountId AS a_5
    )
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS PersonOwnAccount
      WHERE
        (a_3.personId) = 1]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.accountId AS a_5
    )
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS AccountId;
==

# Empty edge pattern.
select * from
graph_table(
  aml
  match -[]-
  columns(1 AS one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=ANY
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS one;
==

# Abbreviated edge pattern.
select * from
graph_table(
  aml
  match <-
  columns(1 AS one)
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=LEFT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      <-[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      <-[a_3
      IS (% | ! %)]-
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS one;
==

# Cannot access node properties in edge pattern.
select * from
graph_table(
  aml
  match -[e]->
  columns(e.Name)
)
--
ERROR: Property Name is not exposed by element type GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64> [at 5:13]
  columns(e.Name)
            ^

==

select * from
graph_table(
  aml_multi
  match -[e WHERE e.value = ""]->
  columns(e.value)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.value#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.value#4]
        +-property_graph=aml_multi
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml_multi.Entity]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-filter_expr=
        |       | | | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       | | |   +-GraphGetElementProperty
        |       | | |   | +-type=STRING
        |       | | |   | +-expr=
        |       | | |   | | +-ColumnRef(type=GRAPH_EDGE(aml_multi)<value STRING>, column=$element_table.e#2)
        |       | | |   | +-property=value(STRING)
        |       | | |   +-Literal(type=STRING, value="")
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml_multi.Relation]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml_multi.Entity]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element2#3
        +-shape_expr_list=
          +-value#4 :=
            +-GraphGetElementProperty
              +-type=STRING
              +-expr=
              | +-ColumnRef(type=GRAPH_EDGE(aml_multi)<value STRING>, column=$element_table.e#2)
              +-property=value(STRING)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_multi_1.a_5 AS value
FROM
  GRAPH_TABLE(
    aml_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)
      WHERE
        (a_3.value) = ""]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.value AS a_5
    )
  ) AS aml_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)
      WHERE
        (a_3.value) = ""]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.value AS a_5
    )
  ) AS aml_multi_1
|> SELECT
     aml_multi_1.a_5 AS value;
==

select * from
graph_table(
  aml_composite_key
  match -[e IS RelatesTo]->
  columns(e.value)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.value#4 AS value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.value#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.value#4]
        +-property_graph=aml_composite_key
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, e#2, $element2#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml_composite_key.CompositeKeyEntity]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=62-71, label=aml_composite_key.RelatesTo)
        |       | | +-target_element_table_list=[aml_composite_key.CompositeKeyRelation]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element2#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml_composite_key.CompositeKeyEntity]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element2#3
        +-shape_expr_list=
          +-value#4 :=
            +-GraphGetElementProperty
              +-type=STRING
              +-expr=
              | +-ColumnRef(type=GRAPH_EDGE(aml_composite_key)<value STRING>, column=$element_table.e#2)
              +-property=value(STRING)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_composite_key_1.a_5 AS value
FROM
  GRAPH_TABLE(
    aml_composite_key
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS RelatesTo]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.value AS a_5
    )
  ) AS aml_composite_key_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_composite_key
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS RelatesTo]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      a_3.value AS a_5
    )
  ) AS aml_composite_key_1
|> SELECT
     aml_composite_key_1.a_5 AS value;
==

select * from
graph_table(
  aml_composite_key
  match -[IS RelatesByValue]->
  columns(1 as one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_composite_key
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element1#1, $element2#2, $element3#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element1#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml_composite_key.CompositeKeyEntity]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element2#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=60-74, label=aml_composite_key.RelatesByValue)
        |       | | +-target_element_table_list=[aml_composite_key.RelatesByValue]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element3#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml_composite_key.CompositeKeyEntity]
        |       +-head=$element_table.$element1#1
        |       +-tail=$element_table.$element3#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_composite_key_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_composite_key
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS RelatesByValue]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_composite_key_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_composite_key
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS RelatesByValue]->
      (a_4
      IS (% | ! %))
    COLUMNS(
      1 AS a_5
    )
  ) AS aml_composite_key_1
|> SELECT
     aml_composite_key_1.a_5 AS one;
