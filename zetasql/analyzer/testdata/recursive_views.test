# View using RECURSIVE keyword, but not actually recursive.
[default language_features=MAXIMUM,+WITH_RECURSIVE,+WITH_ON_SUBQUERY,+PIPES]
create {{materialized|}} recursive view tt
as select 1 a, 2 b
--
ALTERNATION GROUP: materialized
--
CreateMaterializedViewStmt
+-name_path=tt
+-output_column_list=
| +-$view.a#1 AS a [INT64]
| +-$view.b#2 AS b [INT64]
+-query=
| +-ProjectScan
|   +-column_list=$view.[a#1, b#2]
|   +-expr_list=
|   | +-a#1 := Literal(type=INT64, value=1)
|   | +-b#2 := Literal(type=INT64, value=2)
|   +-input_scan=
|     +-SingleRowScan
+-sql="select 1 a, 2 b"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="a", type=INT64, column=tt.a#3)
  +-ColumnDefinition(name="b", type=INT64, column=tt.b#4)
--
ALTERNATION GROUP: <empty>
--
CreateViewStmt
+-name_path=tt
+-output_column_list=
| +-$view.a#1 AS a [INT64]
| +-$view.b#2 AS b [INT64]
+-query=
| +-ProjectScan
|   +-column_list=$view.[a#1, b#2]
|   +-expr_list=
|   | +-a#1 := Literal(type=INT64, value=1)
|   | +-b#2 := Literal(type=INT64, value=2)
|   +-input_scan=
|     +-SingleRowScan
+-sql="select 1 a, 2 b"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="a", type=INT64, column=tt.a#3)
  +-ColumnDefinition(name="b", type=INT64, column=tt.b#4)
==

# Actually-recursive view.
CREATE {{MATERIALIZED|}} RECURSIVE VIEW t
AS (
  SELECT 1 AS n UNION ALL SELECT n + 1 FROM t
);
--
ALTERNATION GROUP: MATERIALIZED
--
CreateMaterializedViewStmt
+-name_path=t
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-ProjectScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-expr_list=
|   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   +-input_scan=
|   |   |     +-SingleRowScan
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-ProjectScan
|       |   +-column_list=[$union_all2.$col1#4]
|       |   +-expr_list=
|       |   | +-$col1#4 :=
|       |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |     +-ColumnRef(type=INT64, column=$view.n#3)
|       |   |     +-Literal(type=INT64, value=1)
|       |   +-input_scan=
|       |     +-RecursiveRefScan(column_list=[$view.n#3])
|       +-output_column_list=[$union_all2.$col1#4]
+-sql="SELECT 1 AS n UNION ALL SELECT n + 1 FROM t"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=t.n#5)
--
ALTERNATION GROUP: <empty>
--
CreateViewStmt
+-name_path=t
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-ProjectScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-expr_list=
|   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   +-input_scan=
|   |   |     +-SingleRowScan
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-ProjectScan
|       |   +-column_list=[$union_all2.$col1#4]
|       |   +-expr_list=
|       |   | +-$col1#4 :=
|       |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |     +-ColumnRef(type=INT64, column=$view.n#3)
|       |   |     +-Literal(type=INT64, value=1)
|       |   +-input_scan=
|       |     +-RecursiveRefScan(column_list=[$view.n#3])
|       +-output_column_list=[$union_all2.$col1#4]
+-sql="SELECT 1 AS n UNION ALL SELECT n + 1 FROM t"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=t.n#5)
==

# Not-recursive view, but uses RECURSIVE keyword and has multi-part name.
create {{materialized|}} recursive view a.b.c
as select 1 x, 2 y;
--
ALTERNATION GROUP: materialized
--
CreateMaterializedViewStmt
+-name_path=a.b.c
+-output_column_list=
| +-$view.x#1 AS x [INT64]
| +-$view.y#2 AS y [INT64]
+-query=
| +-ProjectScan
|   +-column_list=$view.[x#1, y#2]
|   +-expr_list=
|   | +-x#1 := Literal(type=INT64, value=1)
|   | +-y#2 := Literal(type=INT64, value=2)
|   +-input_scan=
|     +-SingleRowScan
+-sql="select 1 x, 2 y"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="x", type=INT64, column=a.b.c.x#3)
  +-ColumnDefinition(name="y", type=INT64, column=a.b.c.y#4)
--
ALTERNATION GROUP: <empty>
--
CreateViewStmt
+-name_path=a.b.c
+-output_column_list=
| +-$view.x#1 AS x [INT64]
| +-$view.y#2 AS y [INT64]
+-query=
| +-ProjectScan
|   +-column_list=$view.[x#1, y#2]
|   +-expr_list=
|   | +-x#1 := Literal(type=INT64, value=1)
|   | +-y#2 := Literal(type=INT64, value=2)
|   +-input_scan=
|     +-SingleRowScan
+-sql="select 1 x, 2 y"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="x", type=INT64, column=a.b.c.x#3)
  +-ColumnDefinition(name="y", type=INT64, column=a.b.c.y#4)
==

# Actually-recursive view with multi-part name
CREATE {{MATERIALIZED|}} RECURSIVE VIEW a.b.c
AS (
  -- Throw in some inner WITH aliases matching parts of the outer query name to
  -- make sure they don't affect the result.
  WITH
    a AS (SELECT 1),
    b AS (SELECT 2),
    c AS (SELECT 3)
  SELECT 1 AS n UNION ALL SELECT n + 1 FROM a.b.c
);
--
ALTERNATION GROUP: MATERIALIZED
--
CreateMaterializedViewStmt
+-name_path=a.b.c
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-ProjectScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-expr_list=
|   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   +-input_scan=
|   |   |     +-SingleRowScan
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-ProjectScan
|       |   +-column_list=[$union_all2.$col1#4]
|       |   +-expr_list=
|       |   | +-$col1#4 :=
|       |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |     +-ColumnRef(type=INT64, column=$view.n#3)
|       |   |     +-Literal(type=INT64, value=1)
|       |   +-input_scan=
|       |     +-RecursiveRefScan(column_list=[$view.n#3])
|       +-output_column_list=[$union_all2.$col1#4]
+-sql="WITH\n    a AS (SELECT 1),\n    b AS (SELECT 2),\n    c AS (SELECT 3)\n  SELECT 1 AS n UNION ALL SELECT n + 1 FROM a.b.c"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=a.b.c.n#5)
--
ALTERNATION GROUP: <empty>
--
CreateViewStmt
+-name_path=a.b.c
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-ProjectScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-expr_list=
|   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   +-input_scan=
|   |   |     +-SingleRowScan
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-ProjectScan
|       |   +-column_list=[$union_all2.$col1#4]
|       |   +-expr_list=
|       |   | +-$col1#4 :=
|       |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |     +-ColumnRef(type=INT64, column=$view.n#3)
|       |   |     +-Literal(type=INT64, value=1)
|       |   +-input_scan=
|       |     +-RecursiveRefScan(column_list=[$view.n#3])
|       +-output_column_list=[$union_all2.$col1#4]
+-sql="WITH\n    a AS (SELECT 1),\n    b AS (SELECT 2),\n    c AS (SELECT 3)\n  SELECT 1 AS n UNION ALL SELECT n + 1 FROM a.b.c"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=a.b.c.n#5)
==

# View is not, itself, recursive, but has an inner subquery of the same name,
# which is recursive.
create {{materialized|}} recursive view a
AS (
  WITH RECURSIVE a AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM a)
  SELECT n AS view_n FROM a
);
--
ALTERNATION GROUP: materialized
--
CreateMaterializedViewStmt
+-name_path=a
+-output_column_list=
| +-a.n#5 AS view_n [INT64]
+-query=
| +-WithScan
|   +-column_list=[a.n#5]
|   +-with_entry_list=
|   | +-WithEntry
|   |   +-with_query_name="a"
|   |   +-with_subquery=
|   |     +-RecursiveScan
|   |       +-column_list=[$union_all.n#2]
|   |       +-op_type=UNION_ALL
|   |       +-non_recursive_term=
|   |       | +-SetOperationItem
|   |       |   +-scan=
|   |       |   | +-ProjectScan
|   |       |   |   +-column_list=[$union_all1.n#1]
|   |       |   |   +-expr_list=
|   |       |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |       |   |   +-input_scan=
|   |       |   |     +-SingleRowScan
|   |       |   +-output_column_list=[$union_all1.n#1]
|   |       +-recursive_term=
|   |         +-SetOperationItem
|   |           +-scan=
|   |           | +-ProjectScan
|   |           |   +-column_list=[$union_all2.$col1#4]
|   |           |   +-expr_list=
|   |           |   | +-$col1#4 :=
|   |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|   |           |   |     +-ColumnRef(type=INT64, column=a.n#3)
|   |           |   |     +-Literal(type=INT64, value=1)
|   |           |   +-input_scan=
|   |           |     +-RecursiveRefScan(column_list=[a.n#3])
|   |           +-output_column_list=[$union_all2.$col1#4]
|   +-query=
|   | +-ProjectScan
|   |   +-column_list=[a.n#5]
|   |   +-input_scan=
|   |     +-WithRefScan(column_list=[a.n#5], with_query_name="a")
|   +-recursive=TRUE
+-sql="WITH RECURSIVE a AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM a)\n  SELECT n AS view_n FROM a"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="view_n", type=INT64, column=a.view_n#6)
--
ALTERNATION GROUP: <empty>
--
CreateViewStmt
+-name_path=a
+-output_column_list=
| +-a.n#5 AS view_n [INT64]
+-query=
| +-WithScan
|   +-column_list=[a.n#5]
|   +-with_entry_list=
|   | +-WithEntry
|   |   +-with_query_name="a"
|   |   +-with_subquery=
|   |     +-RecursiveScan
|   |       +-column_list=[$union_all.n#2]
|   |       +-op_type=UNION_ALL
|   |       +-non_recursive_term=
|   |       | +-SetOperationItem
|   |       |   +-scan=
|   |       |   | +-ProjectScan
|   |       |   |   +-column_list=[$union_all1.n#1]
|   |       |   |   +-expr_list=
|   |       |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |       |   |   +-input_scan=
|   |       |   |     +-SingleRowScan
|   |       |   +-output_column_list=[$union_all1.n#1]
|   |       +-recursive_term=
|   |         +-SetOperationItem
|   |           +-scan=
|   |           | +-ProjectScan
|   |           |   +-column_list=[$union_all2.$col1#4]
|   |           |   +-expr_list=
|   |           |   | +-$col1#4 :=
|   |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|   |           |   |     +-ColumnRef(type=INT64, column=a.n#3)
|   |           |   |     +-Literal(type=INT64, value=1)
|   |           |   +-input_scan=
|   |           |     +-RecursiveRefScan(column_list=[a.n#3])
|   |           +-output_column_list=[$union_all2.$col1#4]
|   +-query=
|   | +-ProjectScan
|   |   +-column_list=[a.n#5]
|   |   +-input_scan=
|   |     +-WithRefScan(column_list=[a.n#5], with_query_name="a")
|   +-recursive=TRUE
+-sql="WITH RECURSIVE a AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM a)\n  SELECT n AS view_n FROM a"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="view_n", type=INT64, column=a.view_n#6)
==

# ERROR: Recursive view is actually recursive, but not a UNION
CREATE RECURSIVE VIEW a.b AS (
  SELECT * FROM a.b
);
--
ERROR: Recursive query does not have the form <non-recursive-term> UNION [ALL|DISTINCT] <recursive-term> or the pipe form <non-recursive-term> |> UNION [ALL|DISTINCT] <recursive-term> [at 2:3]
  SELECT * FROM a.b
  ^
==

# ERROR: Recursive reference to recursive view from RECURSIVE WITH inside of it
CREATE RECURSIVE VIEW a.b AS (
  SELECT 1 AS n UNION ALL (
    -- Error: Recursive term of 'r' cannot reference 'a.b'.
    WITH RECURSIVE r AS (SELECT 2 UNION ALL SELECT 3 FROM a.b CROSS JOIN r)
    SELECT 4
  )
);
--
ERROR: Table 'a.b' must not be recursively referenced from inside an inner recursive query [at 4:59]
    WITH RECURSIVE r AS (SELECT 2 UNION ALL SELECT 3 FROM a.b CROSS JOIN r)
                                                          ^
==

# Recursive view with recursive WITH inside of it. Also, choose names for both
# tables which require backticks.
CREATE MATERIALIZED RECURSIVE VIEW `a-b.c`.d AS (
  SELECT 1 AS n
  UNION ALL (
    WITH RECURSIVE `x-y.z` AS (
       SELECT 1 AS n
       UNION ALL
       SELECT n + 1 FROM `x-y.z`
    ) SELECT * FROM `x-y.z` INNER JOIN `a-b.c`.d USING (n)
  )
);
--
CreateMaterializedViewStmt
+-name_path=`a-b.c`.d
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-ProjectScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-expr_list=
|   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   +-input_scan=
|   |   |     +-SingleRowScan
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-WithScan
|       |   +-column_list=[x-y.z.n#7]
|       |   +-with_entry_list=
|       |   | +-WithEntry
|       |   |   +-with_query_name="x-y.z"
|       |   |   +-with_subquery=
|       |   |     +-RecursiveScan
|       |   |       +-column_list=[$union_all.n#4]
|       |   |       +-op_type=UNION_ALL
|       |   |       +-non_recursive_term=
|       |   |       | +-SetOperationItem
|       |   |       |   +-scan=
|       |   |       |   | +-ProjectScan
|       |   |       |   |   +-column_list=[$union_all1.n#3]
|       |   |       |   |   +-expr_list=
|       |   |       |   |   | +-n#3 := Literal(type=INT64, value=1)
|       |   |       |   |   +-input_scan=
|       |   |       |   |     +-SingleRowScan
|       |   |       |   +-output_column_list=[$union_all1.n#3]
|       |   |       +-recursive_term=
|       |   |         +-SetOperationItem
|       |   |           +-scan=
|       |   |           | +-ProjectScan
|       |   |           |   +-column_list=[$union_all2.$col1#6]
|       |   |           |   +-expr_list=
|       |   |           |   | +-$col1#6 :=
|       |   |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |           |   |     +-ColumnRef(type=INT64, column=x-y.z.n#5)
|       |   |           |   |     +-Literal(type=INT64, value=1)
|       |   |           |   +-input_scan=
|       |   |           |     +-RecursiveRefScan(column_list=[x-y.z.n#5])
|       |   |           +-output_column_list=[$union_all2.$col1#6]
|       |   +-query=
|       |   | +-ProjectScan
|       |   |   +-column_list=[x-y.z.n#7]
|       |   |   +-input_scan=
|       |   |     +-JoinScan
|       |   |       +-column_list=[x-y.z.n#7, $view.n#8]
|       |   |       +-left_scan=
|       |   |       | +-WithRefScan(column_list=[x-y.z.n#7], with_query_name="x-y.z")
|       |   |       +-right_scan=
|       |   |       | +-RecursiveRefScan(column_list=[$view.n#8])
|       |   |       +-join_expr=
|       |   |       | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
|       |   |       |   +-ColumnRef(type=INT64, column=x-y.z.n#7)
|       |   |       |   +-ColumnRef(type=INT64, column=$view.n#8)
|       |   |       +-has_using=TRUE
|       |   +-recursive=TRUE
|       +-output_column_list=[x-y.z.n#7]
+-sql="SELECT 1 AS n\n  UNION ALL (\n    WITH RECURSIVE `x-y.z` AS (\n       SELECT 1 AS n\n       UNION ALL\n       SELECT n + 1 FROM `x-y.z`\n    ) SELECT * FROM `x-y.z` INNER JOIN `a-b.c`.d USING (n)\n  )"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=`a-b.c`.d.n#9)
==

create recursive view a.b.c as (
  select 1 as n
  |> union all (select n + 1 from a.b.c)
);
--
CreateViewStmt
+-name_path=a.b.c
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-ProjectScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-expr_list=
|   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   +-input_scan=
|   |   |     +-SingleRowScan
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-ProjectScan
|       |   +-column_list=[$union_all1.$col1#4]
|       |   +-expr_list=
|       |   | +-$col1#4 :=
|       |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |     +-ColumnRef(type=INT64, column=$view.n#3)
|       |   |     +-Literal(type=INT64, value=1)
|       |   +-input_scan=
|       |     +-RecursiveRefScan(column_list=[$view.n#3])
|       +-output_column_list=[$union_all1.$col1#4]
+-sql="select 1 as n\n  |> union all (select n + 1 from a.b.c)"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=a.b.c.n#5)
==

# Complex non-recursive term.
create recursive view a.b.c as (
  select 1 as n
  |> where n > 10
  |> order by n
  |> union all (select n + 1 from a.b.c)
);
--
CreateViewStmt
+-name_path=a.b.c
+-output_column_list=
| +-$union_all.n#2 AS n [INT64]
+-query=
| +-RecursiveScan
|   +-column_list=[$union_all.n#2]
|   +-op_type=UNION_ALL
|   +-non_recursive_term=
|   | +-SetOperationItem
|   |   +-scan=
|   |   | +-OrderByScan
|   |   |   +-column_list=[$union_all1.n#1]
|   |   |   +-is_ordered=TRUE
|   |   |   +-input_scan=
|   |   |   | +-FilterScan
|   |   |   |   +-column_list=[$union_all1.n#1]
|   |   |   |   +-input_scan=
|   |   |   |   | +-ProjectScan
|   |   |   |   |   +-column_list=[$union_all1.n#1]
|   |   |   |   |   +-expr_list=
|   |   |   |   |   | +-n#1 := Literal(type=INT64, value=1)
|   |   |   |   |   +-input_scan=
|   |   |   |   |     +-SingleRowScan
|   |   |   |   +-filter_expr=
|   |   |   |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
|   |   |   |       +-ColumnRef(type=INT64, column=$union_all1.n#1)
|   |   |   |       +-Literal(type=INT64, value=10)
|   |   |   +-order_by_item_list=
|   |   |     +-OrderByItem
|   |   |       +-column_ref=
|   |   |         +-ColumnRef(type=INT64, column=$union_all1.n#1)
|   |   +-output_column_list=[$union_all1.n#1]
|   +-recursive_term=
|     +-SetOperationItem
|       +-scan=
|       | +-ProjectScan
|       |   +-column_list=[$union_all1.$col1#4]
|       |   +-expr_list=
|       |   | +-$col1#4 :=
|       |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   |     +-ColumnRef(type=INT64, column=$view.n#3)
|       |   |     +-Literal(type=INT64, value=1)
|       |   +-input_scan=
|       |     +-RecursiveRefScan(column_list=[$view.n#3])
|       +-output_column_list=[$union_all1.$col1#4]
+-sql="select 1 as n\n  |> where n > 10\n  |> order by n\n  |> union all (select n + 1 from a.b.c)"
+-recursive=TRUE
+-column_definition_list=
  +-ColumnDefinition(name="n", type=INT64, column=a.b.c.n#5)
==

# The last pipe operator must be union all or union distinct
create recursive view a.b.c as (
  select 1 as n
  |> union all (select 2)
  |> {{intersect|except}} {{all|distinct}} (select n + 1 from a.b.c)
);
--
ERROR: Recursive query does not have the form <non-recursive-term> UNION [ALL|DISTINCT] <recursive-term> or the pipe form <non-recursive-term> |> UNION [ALL|DISTINCT] <recursive-term> [at 2:3]
  select 1 as n
  ^
==

# There must be exactly one input to the last union all or union distinct operator.
create recursive view a.b.c as (
  select 1 as n
  |> union {{all|distinct}} (select n + 1 from a.b.c), (select n + 1 from a.b.c)
);
--
ALTERNATION GROUP: all
--
ERROR: The final UNION in a recursive query is the recursive term and must have only one query argument [at 3:44]
  |> union all (select n + 1 from a.b.c), (select n + 1 from a.b.c)
                                           ^
--
ALTERNATION GROUP: distinct
--
ERROR: The final UNION in a recursive query is the recursive term and must have only one query argument [at 3:49]
  |> union distinct (select n + 1 from a.b.c), (select n + 1 from a.b.c)
                                                ^
