[default language_features=NONE,+MULTILEVEL_AGGREGATION,+WITH_GROUP_ROWS,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ANALYTIC_FUNCTIONS,+QUALIFY,+GROUPING_BUILTIN,+GROUP_BY_STRUCT,+ENFORCE_CONDITIONAL_EVALUATION,+GROUPING_SETS,+GROUP_BY_ROLLUP,+FORMAT_IN_CAST,+INLINE_LAMBDA_ARGUMENT,+ARRAY_FIND_FUNCTIONS,+CHAINED_FUNCTION_CALLS]
[default show_sqlbuilder_output]

# Basic test case
# It also shows chained call syntax is not allowed.
SELECT
  {{SUM(ANY_VALUE(int64) GROUP BY int32)|(int64).ANY_VALUE().SUM(GROUP BY int32)}}
FROM SimpleTypes;
--
ALTERNATION GROUP: SUM(ANY_VALUE(int64) GROUP BY int32)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(ANY_VALUE(simpletypes_3.a_2)
    GROUP BY simpletypes_3.a_1) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> AGGREGATE
     SUM(ANY_VALUE(simpletypes_3.a_2)
       GROUP BY simpletypes_3.a_1) AS a_4;
--
ALTERNATION GROUP: (int64).ANY_VALUE().SUM(GROUP BY int32)
--
ERROR: Chained function call cannot use multi-level aggregation [at 4:23]
  (int64).ANY_VALUE().SUM(GROUP BY int32)
                      ^
==

SELECT
  SUM(double + int32 + ANY_VALUE(int64) GROUP BY int32)
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#24 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#24]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#24]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#24 :=
            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#21)
                | +-Cast(INT32 -> DOUBLE)
                |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
                +-Cast(INT64 -> DOUBLE)
                  +-ColumnRef(type=INT64, column=$aggregate.$agg1#23)
              +-group_by_list=
              | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#23 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_4.a_3) + CAST(simpletypes_4.a_1 AS DOUBLE)) + CAST(ANY_VALUE(simpletypes_4.a_2) AS DOUBLE)
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_5
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_4.a_3) + CAST(simpletypes_4.a_1 AS DOUBLE)) + CAST(ANY_VALUE(simpletypes_4.a_2) AS DOUBLE)
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_5
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.double AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_3
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5;
==

# Multi-level aggregates with COUNT(*)
SELECT
  SUM(int64 GROUP BY int64),
  COUNT(* GROUP BY int64),
  SUM(COUNT(*) + int32 + COUNT(* GROUP BY int64) GROUP BY int32),
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#23 AS `$col1` [INT64]
| +-$aggregate.$agg2#26 AS `$col2` [INT64]
| +-$aggregate.$agg3#34 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#23, $agg2#26, $agg3#34]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#23, $agg2#26, $agg3#34]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#23 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22)
          |   +-group_by_list=
          |     +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |     +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          +-$agg2#26 :=
          | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
          |   +-group_by_list=
          |     +-$groupbymod#24 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |     +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          +-$agg3#34 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | +-ColumnRef(type=INT64, column=$aggregate.$agg1#29)
                | +-Cast(INT32 -> INT64)
                |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#28)
                +-ColumnRef(type=INT64, column=$aggregate.$agg2#33)
              +-group_by_list=
              | +-$groupbymod#27 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#28 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#29 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                +-$agg2#33 :=
                  +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                    +-group_by_list=
                      +-$groupbymod#30 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                      +-$groupbymod#31 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                      +-$groupbymod#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(simpletypes_4.a_2
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_5,
  COUNT(*
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_6,
  SUM(((COUNT(*)) + CAST(simpletypes_4.a_1 AS INT64)) + (COUNT(*
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_7
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(simpletypes_4.a_2
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_5,
  COUNT(*
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_6,
  SUM(((COUNT(*)) + CAST(simpletypes_4.a_1 AS INT64)) + (COUNT(*
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_7
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.double AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_3
|> AS aggregatescan_8
|> SELECT
     aggregatescan_8.a_5 AS a_5,
     aggregatescan_8.a_6 AS a_6,
     aggregatescan_8.a_7 AS a_7;
==

# Repeated equivalent grouping expressions across multi-level aggregates and the
# GROUP BY clause.
SELECT
  SUM(int32 + COUNT(string GROUP BY int32, double, string) GROUP BY int32, double),
  MIN(COUNT(string GROUP BY int32, int32, string, double, string) GROUP BY int32, double, double),
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$aggregate.$agg2#34 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#27, $agg2#34]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#27, $agg2#34]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, string#5, double#9], table=SimpleTypes, column_index_list=[0, 4, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#27 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |     +-Cast(INT32 -> INT64)
          |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
          |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#26)
          |   +-group_by_list=
          |   | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |   | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |   +-group_by_aggregate_list=
          |     +-$agg1#26 :=
          |       +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
          |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#25)
          |         +-group_by_list=
          |           +-$groupbymod#23 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |           +-$groupbymod#24 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |           +-$groupbymod#25 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
          +-$agg2#34 :=
            +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#33)
              +-group_by_list=
              | +-$groupbymod#28 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#29 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#33 :=
                  +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
                    +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#32)
                    +-group_by_list=
                      +-$groupbymod#30 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                      +-$groupbymod#31 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                      +-$groupbymod#32 := ColumnRef(type=STRING, column=SimpleTypes.string#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(simpletypes_4.a_1 AS INT64) + (COUNT(simpletypes_4.a_2
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_5,
  MIN(COUNT(simpletypes_4.a_2
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2)
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_6
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.string AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(simpletypes_4.a_1 AS INT64) + (COUNT(simpletypes_4.a_2
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_5,
  MIN(COUNT(simpletypes_4.a_2
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2)
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_6
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.string AS a_2,
         SimpleTypes.double AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_3
|> AS aggregatescan_7
|> SELECT
     aggregatescan_7.a_5 AS a_5,
     aggregatescan_7.a_6 AS a_6;
==

# Test grouping constness for path expression suffixes.
SELECT
  SUM(doubly_nested_struct.f.c + doubly_nested_struct.f.d.a + key GROUP BY doubly_nested_struct.f.d, key)
FROM DoublyNestedStructTable
GROUP BY doubly_nested_struct.f;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#7]
        +-input_scan=
        | +-TableScan(column_list=DoublyNestedStructTable.[key#1, doubly_nested_struct#2], table=DoublyNestedStructTable, column_index_list=[0, 1])
        +-group_by_list=
        | +-f#3 :=
        |   +-GetStructField
        |     +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#7 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | +-Cast(INT32 -> INT64)
                | | +-GetStructField
                | |   +-type=INT32
                | |   +-expr=
                | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$group_by_list.$groupbymod#4)
                | |   +-field_idx=0
                | +-Cast(INT32 -> INT64)
                |   +-GetStructField
                |     +-type=INT32
                |     +-expr=
                |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$group_by_list.$groupbymod#5)
                |     +-field_idx=0
                +-Cast(INT32 -> INT64)
                  +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#6)
              +-group_by_list=
                +-$groupbymod#4 :=
                | +-GetStructField
                |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
                |   +-expr=
                |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                |   +-field_idx=1
                +-$groupbymod#5 :=
                | +-GetStructField
                |   +-type=STRUCT<a INT32, b STRING>
                |   +-expr=
                |   | +-GetStructField
                |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                |   |   +-field_idx=1
                |   +-field_idx=1
                +-$groupbymod#6 := ColumnRef(type=INT32, column=DoublyNestedStructTable.key#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM((CAST(doublynestedstructtable_3.a_2.f.c AS INT64) + CAST(doublynestedstructtable_3.a_2.f.d.a AS INT64)) +
    CAST(doublynestedstructtable_3.a_1 AS INT64)
    GROUP BY doublynestedstructtable_3.a_2.f, doublynestedstructtable_3.a_2.f.d, doublynestedstructtable_3.a_1) AS a_4
FROM
  (
    SELECT
      DoublyNestedStructTable.key AS a_1,
      DoublyNestedStructTable.doubly_nested_struct AS a_2
    FROM
      DoublyNestedStructTable
  ) AS doublynestedstructtable_3
GROUP BY doublynestedstructtable_3.a_2.f;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM((CAST(doublynestedstructtable_3.a_2.f.c AS INT64) + CAST(doublynestedstructtable_3.a_2.f.d.a AS INT64)) +
    CAST(doublynestedstructtable_3.a_1 AS INT64)
    GROUP BY doublynestedstructtable_3.a_2.f, doublynestedstructtable_3.a_2.f.d, doublynestedstructtable_3.a_1) AS a_4
FROM
  (
    FROM
      DoublyNestedStructTable
    |> SELECT
         DoublyNestedStructTable.key AS a_1,
         DoublyNestedStructTable.doubly_nested_struct AS a_2
    |> AS doublynestedstructtable_3
  )
GROUP BY doublynestedstructtable_3.a_2.f
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4;
==

# Test grouping constness for path expression suffixes.
SELECT
  SUM(doubly_nested_struct.e + doubly_nested_struct.f.d.a GROUP BY doubly_nested_struct),
  SUM(doubly_nested_struct.f.c + doubly_nested_struct.f.d.a GROUP BY doubly_nested_struct.f.c)
FROM DoublyNestedStructTable
GROUP BY doubly_nested_struct.f.d;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [INT64]
| +-$aggregate.$agg2#9 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#6, $agg2#9]
        +-input_scan=
        | +-TableScan(column_list=[DoublyNestedStructTable.doubly_nested_struct#2], table=DoublyNestedStructTable, column_index_list=[1])
        +-group_by_list=
        | +-d#3 :=
        |   +-GetStructField
        |     +-type=STRUCT<a INT32, b STRING>
        |     +-expr=
        |     | +-GetStructField
        |     |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |     |   +-expr=
        |     |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
        |     |   +-field_idx=1
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#6 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |     +-Cast(INT32 -> INT64)
          |     | +-GetStructField
          |     |   +-type=INT32
          |     |   +-expr=
          |     |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=$group_by_list.$groupbymod#5)
          |     |   +-field_idx=0
          |     +-Cast(INT32 -> INT64)
          |       +-GetStructField
          |         +-type=INT32
          |         +-expr=
          |         | +-GetStructField
          |         |   +-type=STRUCT<a INT32, b STRING>
          |         |   +-expr=
          |         |   | +-GetStructField
          |         |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
          |         |   |   +-expr=
          |         |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=$group_by_list.$groupbymod#5)
          |         |   |   +-field_idx=1
          |         |   +-field_idx=1
          |         +-field_idx=0
          |   +-group_by_list=
          |     +-$groupbymod#4 :=
          |     | +-GetStructField
          |     |   +-type=STRUCT<a INT32, b STRING>
          |     |   +-expr=
          |     |   | +-GetStructField
          |     |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
          |     |   |   +-expr=
          |     |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
          |     |   |   +-field_idx=1
          |     |   +-field_idx=1
          |     +-$groupbymod#5 := ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
          +-$agg2#9 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-Cast(INT32 -> INT64)
                | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#8)
                +-Cast(INT32 -> INT64)
                  +-GetStructField
                    +-type=INT32
                    +-expr=
                    | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$group_by_list.$groupbymod#7)
                    +-field_idx=0
              +-group_by_list=
                +-$groupbymod#7 :=
                | +-GetStructField
                |   +-type=STRUCT<a INT32, b STRING>
                |   +-expr=
                |   | +-GetStructField
                |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
                |   |   +-expr=
                |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                |   |   +-field_idx=1
                |   +-field_idx=1
                +-$groupbymod#8 :=
                  +-GetStructField
                    +-type=INT32
                    +-expr=
                    | +-GetStructField
                    |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
                    |   +-expr=
                    |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                    |   +-field_idx=1
                    +-field_idx=0

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(doublynestedstructtable_2.a_1.e AS INT64) + CAST(doublynestedstructtable_2.a_1.f.d.a AS INT64)
    GROUP BY doublynestedstructtable_2.a_1.f.d, doublynestedstructtable_2.a_1) AS a_3,
  SUM(CAST(doublynestedstructtable_2.a_1.f.c AS INT64) + CAST(doublynestedstructtable_2.a_1.f.d.a AS INT64)
    GROUP BY doublynestedstructtable_2.a_1.f.d, doublynestedstructtable_2.a_1.f.c) AS a_4
FROM
  (
    SELECT
      DoublyNestedStructTable.doubly_nested_struct AS a_1
    FROM
      DoublyNestedStructTable
  ) AS doublynestedstructtable_2
GROUP BY doublynestedstructtable_2.a_1.f.d;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(doublynestedstructtable_2.a_1.e AS INT64) + CAST(doublynestedstructtable_2.a_1.f.d.a AS INT64)
    GROUP BY doublynestedstructtable_2.a_1.f.d, doublynestedstructtable_2.a_1) AS a_3,
  SUM(CAST(doublynestedstructtable_2.a_1.f.c AS INT64) + CAST(doublynestedstructtable_2.a_1.f.d.a AS INT64)
    GROUP BY doublynestedstructtable_2.a_1.f.d, doublynestedstructtable_2.a_1.f.c) AS a_4
FROM
  (
    FROM
      DoublyNestedStructTable
    |> SELECT
         DoublyNestedStructTable.doubly_nested_struct AS a_1
    |> AS doublynestedstructtable_2
  )
GROUP BY doublynestedstructtable_2.a_1.f.d
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_3 AS a_3,
     aggregatescan_5.a_4 AS a_4;
==

# ORDER BY clause can reference post-grouping scalar columns.
SELECT
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY int32)
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#20)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(ANY_VALUE(simpletypes_3.a_2)
    GROUP BY simpletypes_3.a_1
    ORDER BY simpletypes_3.a_1) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> AGGREGATE
     ARRAY_AGG(ANY_VALUE(simpletypes_3.a_2)
       GROUP BY simpletypes_3.a_1
       ORDER BY simpletypes_3.a_1) AS a_4;
==

# ORDER BY clause uses aggregation, but multi-level aggregate arguments don't.
SELECT
  ARRAY_AGG(int32 GROUP BY int32 ORDER BY SUM(int64))
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT32) -> ARRAY<INT32>)
              +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#20)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(simpletypes_3.a_1
    GROUP BY simpletypes_3.a_1
    ORDER BY SUM(simpletypes_3.a_2)) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> AGGREGATE
     ARRAY_AGG(simpletypes_3.a_1
       GROUP BY simpletypes_3.a_1
       ORDER BY SUM(simpletypes_3.a_2)) AS a_4;
==

# ORDER BY clause can reference post-grouping aggregate columns.
SELECT
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY ANY_VALUE(int64))
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#23 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#23]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#23]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#23 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$aggregate.$agg2#22)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                +-$agg2#22 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(ANY_VALUE(simpletypes_3.a_2)
    GROUP BY simpletypes_3.a_1
    ORDER BY ANY_VALUE(simpletypes_3.a_2)) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> AGGREGATE
     ARRAY_AGG(ANY_VALUE(simpletypes_3.a_2)
       GROUP BY simpletypes_3.a_1
       ORDER BY ANY_VALUE(simpletypes_3.a_2)) AS a_4;
==

# LIMIT clause test
SELECT
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 LIMIT 5)
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-limit=
              | +-Literal(type=INT64, value=5)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(ANY_VALUE(simpletypes_3.a_2)
    GROUP BY simpletypes_3.a_1
    LIMIT 5) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> AGGREGATE
     ARRAY_AGG(ANY_VALUE(simpletypes_3.a_2)
       GROUP BY simpletypes_3.a_1
       LIMIT 5) AS a_4;
==

# Conditional evaluation test.
SELECT
  IFERROR(SUM(ANY_VALUE(int32) GROUP BY bool), SUM(AVG(int64) GROUP BY string))
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#33 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#33]
    +-expr_list=
    | +-$col1#33 :=
    |   +-FunctionCall(ZetaSQL:iferror(DOUBLE, DOUBLE) -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |     | +-FunctionCall(ZetaSQL:$with_side_effects(INT64, BYTES) -> INT64)
    |     |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#25)
    |     |   +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#26)
    |     +-FunctionCall(ZetaSQL:$with_side_effects(DOUBLE, BYTES) -> DOUBLE)
    |       +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#31)
    |       +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#32)
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#25, $side_effects#26, $agg2#31, $side_effects#32]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, bool#7, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 6, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#25 [side_effect_column=$side_effects#26] :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-Cast(INT32 -> INT64)
          |     +-FunctionCall(ZetaSQL:$with_side_effects(INT32, BYTES) -> INT32)
          |       +-ColumnRef(type=INT32, column=$aggregate.$agg1#23)
          |       +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#24)
          |   +-group_by_list=
          |   | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |   | +-$groupbymod#22 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
          |   +-group_by_aggregate_list=
          |     +-$agg1#23 [side_effect_column=$side_effects#24] :=
          |       +-AggregateFunctionCall(ZetaSQL:any_value(INT32) -> INT32)
          |         +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          +-$agg2#31 [side_effect_column=$side_effects#32] :=
            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              +-FunctionCall(ZetaSQL:$with_side_effects(DOUBLE, BYTES) -> DOUBLE)
                +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#29)
                +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#30)
              +-group_by_list=
              | +-$groupbymod#27 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#28 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#29 [side_effect_column=$side_effects#30] :=
                  +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  IFERROR(CAST(SUM(CAST(ANY_VALUE(simpletypes_6.a_1) AS INT64)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_4) AS DOUBLE), SUM(AVG(simpletypes_6.a_2)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_3)) AS a_7
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.string AS a_3,
      SimpleTypes.bool AS a_4,
      SimpleTypes.double AS a_5
    FROM
      SimpleTypes
  ) AS simpletypes_6
GROUP BY simpletypes_6.a_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  IFERROR(CAST(SUM(CAST(ANY_VALUE(simpletypes_6.a_1) AS INT64)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_4) AS DOUBLE), SUM(AVG(simpletypes_6.a_2)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_3)) AS a_7
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.string AS a_3,
         SimpleTypes.bool AS a_4,
         SimpleTypes.double AS a_5
    |> AS simpletypes_6
  )
GROUP BY simpletypes_6.a_5;
==

# Conditional evaluation test.
SELECT
  MIN(IFERROR(AVG(double), MAX(double)) GROUP BY bool),
  ARRAY_AGG(
    string
    GROUP BY string
    ORDER BY MIN(IFERROR(AVG(double), MAX(double)) GROUP BY int64)
  )
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [DOUBLE]
| +-$aggregate.$agg2#38 AS `$col2` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#27, $agg2#38]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#27, $agg2#38]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int64#2, string#5, bool#7, double#9], table=SimpleTypes, column_index_list=[1, 4, 6, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#27 :=
          | +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
          |   +-FunctionCall(ZetaSQL:iferror(DOUBLE, DOUBLE) -> DOUBLE)
          |     +-FunctionCall(ZetaSQL:$with_side_effects(DOUBLE, BYTES) -> DOUBLE)
          |     | +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#23)
          |     | +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#24)
          |     +-FunctionCall(ZetaSQL:$with_side_effects(DOUBLE, BYTES) -> DOUBLE)
          |       +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#25)
          |       +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#26)
          |   +-group_by_list=
          |   | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |   | +-$groupbymod#22 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
          |   +-group_by_aggregate_list=
          |     +-$agg1#23 [side_effect_column=$side_effects#24] :=
          |     | +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
          |     |   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |     +-$agg2#25 [side_effect_column=$side_effects#26] :=
          |       +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
          |         +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          +-$agg2#38 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#29)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#37)
              +-group_by_list=
              | +-$groupbymod#28 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#29 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#37 :=
                  +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
                    +-FunctionCall(ZetaSQL:iferror(DOUBLE, DOUBLE) -> DOUBLE)
                      +-FunctionCall(ZetaSQL:$with_side_effects(DOUBLE, BYTES) -> DOUBLE)
                      | +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#33)
                      | +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#34)
                      +-FunctionCall(ZetaSQL:$with_side_effects(DOUBLE, BYTES) -> DOUBLE)
                        +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#35)
                        +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#36)
                    +-group_by_list=
                    | +-$groupbymod#30 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                    | +-$groupbymod#31 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
                    | +-$groupbymod#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                    +-group_by_aggregate_list=
                      +-$agg1#33 [side_effect_column=$side_effects#34] :=
                      | +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
                      |   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                      +-$agg2#35 [side_effect_column=$side_effects#36] :=
                        +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
                          +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  MIN(IFERROR(AVG(simpletypes_5.a_4), MAX(simpletypes_5.a_4))
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_3) AS a_6,
  ARRAY_AGG(simpletypes_5.a_2
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_2
    ORDER BY MIN(IFERROR(AVG(simpletypes_5.a_4), MAX(simpletypes_5.a_4))
      GROUP BY simpletypes_5.a_4, simpletypes_5.a_2, simpletypes_5.a_1)) AS a_7
FROM
  (
    SELECT
      SimpleTypes.int64 AS a_1,
      SimpleTypes.string AS a_2,
      SimpleTypes.bool AS a_3,
      SimpleTypes.double AS a_4
    FROM
      SimpleTypes
  ) AS simpletypes_5
GROUP BY simpletypes_5.a_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  MIN(IFERROR(AVG(simpletypes_5.a_4), MAX(simpletypes_5.a_4))
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_3) AS a_6,
  ARRAY_AGG(simpletypes_5.a_2
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_2
    ORDER BY MIN(IFERROR(AVG(simpletypes_5.a_4), MAX(simpletypes_5.a_4))
      GROUP BY simpletypes_5.a_4, simpletypes_5.a_2, simpletypes_5.a_1)) AS a_7
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int64 AS a_1,
         SimpleTypes.string AS a_2,
         SimpleTypes.bool AS a_3,
         SimpleTypes.double AS a_4
    |> AS simpletypes_5
  )
GROUP BY simpletypes_5.a_4;
==

# Conditional evaluation for aggregate function in ORDER BY modifier
SELECT
  ARRAY_AGG(
    string
    GROUP BY string
    ORDER BY SUM(IFERROR(MAX(int32), MIN(int32)) GROUP BY bool)
  )
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#28 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#28]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#28]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, string#5, bool#7], table=SimpleTypes, column_index_list=[0, 4, 6])
        +-aggregate_list=
          +-$agg1#28 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#20)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#27)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#27 :=
                  +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                    +-Cast(INT32 -> INT64)
                      +-FunctionCall(ZetaSQL:iferror(INT32, INT32) -> INT32)
                        +-FunctionCall(ZetaSQL:$with_side_effects(INT32, BYTES) -> INT32)
                        | +-ColumnRef(type=INT32, column=$aggregate.$agg1#23)
                        | +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#24)
                        +-FunctionCall(ZetaSQL:$with_side_effects(INT32, BYTES) -> INT32)
                          +-ColumnRef(type=INT32, column=$aggregate.$agg2#25)
                          +-ColumnRef(type=BYTES, column=$aggregate.$side_effects#26)
                    +-group_by_list=
                    | +-$groupbymod#21 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
                    | +-$groupbymod#22 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
                    +-group_by_aggregate_list=
                      +-$agg1#23 [side_effect_column=$side_effects#24] :=
                      | +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
                      |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                      +-$agg2#25 [side_effect_column=$side_effects#26] :=
                        +-AggregateFunctionCall(ZetaSQL:min(INT32) -> INT32)
                          +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(simpletypes_4.a_2
    GROUP BY simpletypes_4.a_2
    ORDER BY SUM(CAST(IFERROR(MAX(simpletypes_4.a_1), MIN(simpletypes_4.a_1)) AS INT64)
      GROUP BY simpletypes_4.a_2, simpletypes_4.a_3)) AS a_5
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.string AS a_2,
      SimpleTypes.bool AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.string AS a_2,
     SimpleTypes.bool AS a_3
|> AS simpletypes_4
|> AGGREGATE
     ARRAY_AGG(simpletypes_4.a_2
       GROUP BY simpletypes_4.a_2
       ORDER BY SUM(CAST(IFERROR(MAX(simpletypes_4.a_1), MIN(simpletypes_4.a_1)) AS INT64)
         GROUP BY simpletypes_4.a_2, simpletypes_4.a_3)) AS a_5;
==

# Multi-level aggregates in the HAVING clause.
SELECT
  int64
FROM SimpleTypes
GROUP BY int64
HAVING SUM(double GROUP BY int32) > 10;
--
ERROR: multi-level aggregate expression references column double which is neither grouped nor aggregated [at 5:12]
HAVING SUM(double GROUP BY int32) > 10;
           ^
==

# Multi-level aggregates in the HAVING clause.
SELECT
  int64
FROM SimpleTypes
GROUP BY int64
HAVING SUM(int32 + int64 + AVG(int64) GROUP BY int32) > 10;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#20 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#20]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.int64#20, $aggregate.$agg1#24]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.int64#20, $aggregate.$agg1#24]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        |   +-group_by_list=
        |   | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-aggregate_list=
        |     +-$agg1#24 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
        |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |           +-Cast(INT64 -> DOUBLE)
        |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |           |   +-Cast(INT32 -> INT64)
        |           |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#21)
        |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#23)
        |         +-group_by_list=
        |         | +-$groupbymod#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |         | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |         +-group_by_aggregate_list=
        |           +-$agg1#23 :=
        |             +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |               +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
            +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#24)
            +-Literal(type=DOUBLE, value=10)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_6.a_4 AS int64
FROM
  (
    SELECT
      simpletypes_3.a_2 AS a_4,
      SUM(CAST(CAST(simpletypes_3.a_1 AS INT64) + (simpletypes_3.a_2) AS DOUBLE) + (AVG(simpletypes_3.a_2))
        GROUP BY simpletypes_3.a_2, simpletypes_3.a_1) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
    GROUP BY 1
  ) AS aggregatescan_6
WHERE
  (aggregatescan_6.a_5) > 10.0;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> EXTEND
     simpletypes_3.a_2 AS a_4
|> AGGREGATE
     SUM(CAST(CAST(simpletypes_3.a_1 AS INT64) + (simpletypes_3.a_2) AS DOUBLE) + (AVG(simpletypes_3.a_2))
       GROUP BY simpletypes_3.a_2, simpletypes_3.a_1) AS a_5
   GROUP BY a_4
|> AS aggregatescan_6
|> WHERE
     (aggregatescan_6.a_5) > 10.0
|> SELECT
     aggregatescan_6.a_4 AS int64;
==

# Multi-level aggregates in the HAVING clause.
SELECT
  SUM(ANY_VALUE(int64) GROUP BY bool) AS multi_level_agg
FROM SimpleTypes
GROUP BY string
HAVING multi_level_agg > 0 AND SUM(int32 + AVG(int64) GROUP BY int32) > 10;
--
QueryStmt
+-output_column_list=
| +-$aggregate.multi_level_agg#24 AS multi_level_agg [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.multi_level_agg#24]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[multi_level_agg#24, $agg2#28]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[multi_level_agg#24, $agg2#28]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, bool#7], table=SimpleTypes, column_index_list=[0, 1, 4, 6])
        |   +-group_by_list=
        |   | +-string#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   +-aggregate_list=
        |     +-multi_level_agg#24 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#23)
        |     |   +-group_by_list=
        |     |   | +-$groupbymod#21 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |     |   | +-$groupbymod#22 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        |     |   +-group_by_aggregate_list=
        |     |     +-$agg1#23 :=
        |     |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |     |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-$agg2#28 :=
        |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
        |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |           +-Cast(INT32 -> DOUBLE)
        |           | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#26)
        |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
        |         +-group_by_list=
        |         | +-$groupbymod#25 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |         | +-$groupbymod#26 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |         +-group_by_aggregate_list=
        |           +-$agg1#27 :=
        |             +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |               +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=$aggregate.multi_level_agg#24)
            | +-Literal(type=INT64, value=0)
            +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
              +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#28)
              +-Literal(type=DOUBLE, value=10)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_8.a_6 AS multi_level_agg
FROM
  (
    SELECT
      SUM(ANY_VALUE(simpletypes_5.a_2)
        GROUP BY simpletypes_5.a_3, simpletypes_5.a_4) AS a_6,
      SUM(CAST(simpletypes_5.a_1 AS DOUBLE) + (AVG(simpletypes_5.a_2))
        GROUP BY simpletypes_5.a_3, simpletypes_5.a_1) AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3,
          SimpleTypes.bool AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
    GROUP BY simpletypes_5.a_3
  ) AS aggregatescan_8
WHERE
  ((aggregatescan_8.a_6) > 0) AND ((aggregatescan_8.a_7) > 10.0);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(ANY_VALUE(simpletypes_5.a_2)
    GROUP BY simpletypes_5.a_3, simpletypes_5.a_4) AS a_6,
  SUM(CAST(simpletypes_5.a_1 AS DOUBLE) + (AVG(simpletypes_5.a_2))
    GROUP BY simpletypes_5.a_3, simpletypes_5.a_1) AS a_7
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.string AS a_3,
         SimpleTypes.bool AS a_4
    |> AS simpletypes_5
  )
GROUP BY simpletypes_5.a_3
|> AS aggregatescan_8
|> WHERE
     ((aggregatescan_8.a_6) > 0) AND ((aggregatescan_8.a_7) > 10.0)
|> SELECT
     aggregatescan_8.a_6 AS multi_level_agg;
==

# Multi-level aggregates in the QUALIFY clause.
SELECT
  SUM(int64) OVER () AS window_result
FROM SimpleTypes
GROUP BY int64
QUALIFY
  window_result <
  AVG(int64) OVER (
    PARTITION BY SUM(int64 + MAX(int32) GROUP BY double)
    ORDER BY MAX(double + int64 + MIN(int32) GROUP BY double)
  );
--
QueryStmt
+-output_column_list=
| +-$analytic.window_result#22 AS window_result [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.window_result#22]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.int64#21, $aggregate.$agg1#26, $aggregate.$agg2#30, $analytic.window_result#22, $analytic.$analytic2#31]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.int64#21, $aggregate.$agg1#26, $aggregate.$agg2#30, $analytic.window_result#22, $analytic.$analytic2#31]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.int64#21, $aggregate.$agg1#26, $aggregate.$agg2#30]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
        |   |   +-group_by_list=
        |   |   | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |   +-aggregate_list=
        |   |     +-$agg1#26 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     |     +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        |   |     |     +-Cast(INT32 -> INT64)
        |   |     |       +-ColumnRef(type=INT32, column=$aggregate.$agg1#25)
        |   |     |   +-group_by_list=
        |   |     |   | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |     |   | +-$groupbymod#24 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |     |   +-group_by_aggregate_list=
        |   |     |     +-$agg1#25 :=
        |   |     |       +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
        |   |     |         +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   |     +-$agg2#30 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
        |   |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |   |           +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |   |           | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#28)
        |   |           | +-Cast(INT64 -> DOUBLE)
        |   |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#27)
        |   |           +-Cast(INT32 -> DOUBLE)
        |   |             +-ColumnRef(type=INT32, column=$aggregate.$agg1#29)
        |   |         +-group_by_list=
        |   |         | +-$groupbymod#27 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |         | +-$groupbymod#28 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |         +-group_by_aggregate_list=
        |   |           +-$agg1#29 :=
        |   |             +-AggregateFunctionCall(ZetaSQL:min(INT32) -> INT32)
        |   |               +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |     | +-analytic_function_list=
        |     |   +-window_result#22 :=
        |     |     +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |       +-ColumnRef(type=INT64, column=$groupby.int64#21)
        |     |       +-window_frame=
        |     |         +-WindowFrame(frame_unit=ROWS)
        |     |           +-start_expr=
        |     |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |     |           +-end_expr=
        |     |             +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        |     +-AnalyticFunctionGroup
        |       +-partition_by=
        |       | +-WindowPartitioning
        |       |   +-partition_by_list=
        |       |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#26)
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#30)
        |       +-analytic_function_list=
        |         +-$analytic2#31 :=
        |           +-AnalyticFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |             +-ColumnRef(type=INT64, column=$groupby.int64#21)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=RANGE)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(DOUBLE, DOUBLE) -> BOOL)
            +-Cast(INT64 -> DOUBLE)
            | +-ColumnRef(type=INT64, column=$analytic.window_result#22)
            +-ColumnRef(type=DOUBLE, column=$analytic.$analytic2#31)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  analyticscan_11.a_9 AS window_result
FROM
  (
    SELECT
      aggregatescan_8.a_5 AS a_5,
      aggregatescan_8.a_6 AS a_6,
      aggregatescan_8.a_7 AS a_7,
      SUM(aggregatescan_8.a_5) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_9,
      AVG(aggregatescan_8.a_5) OVER (PARTITION BY aggregatescan_8.a_6
        ORDER BY aggregatescan_8.a_7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_10
    FROM
      (
        SELECT
          simpletypes_4.a_2 AS a_5,
          SUM((simpletypes_4.a_2) + CAST(MAX(simpletypes_4.a_1) AS INT64)
            GROUP BY simpletypes_4.a_2, simpletypes_4.a_3) AS a_6,
          MAX(((simpletypes_4.a_3) + CAST(simpletypes_4.a_2 AS DOUBLE)) + CAST(MIN(simpletypes_4.a_1) AS DOUBLE)
            GROUP BY simpletypes_4.a_2, simpletypes_4.a_3) AS a_7
        FROM
          (
            SELECT
              SimpleTypes.int32 AS a_1,
              SimpleTypes.int64 AS a_2,
              SimpleTypes.double AS a_3
            FROM
              SimpleTypes
          ) AS simpletypes_4
        GROUP BY 1
      ) AS aggregatescan_8
  ) AS analyticscan_11
WHERE
  CAST(analyticscan_11.a_9 AS DOUBLE) < (analyticscan_11.a_10);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.double AS a_3
|> AS simpletypes_4
|> EXTEND
     simpletypes_4.a_2 AS a_5
|> AGGREGATE
     SUM((simpletypes_4.a_2) + CAST(MAX(simpletypes_4.a_1) AS INT64)
       GROUP BY simpletypes_4.a_2, simpletypes_4.a_3) AS a_6,
     MAX(((simpletypes_4.a_3) + CAST(simpletypes_4.a_2 AS DOUBLE)) + CAST(MIN(simpletypes_4.a_1) AS DOUBLE)
       GROUP BY simpletypes_4.a_2, simpletypes_4.a_3) AS a_7
   GROUP BY a_5
|> AS aggregatescan_8
|> SELECT
     aggregatescan_8.a_5 AS a_5,
     aggregatescan_8.a_6 AS a_6,
     aggregatescan_8.a_7 AS a_7,
     SUM(aggregatescan_8.a_5) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_9,
     AVG(aggregatescan_8.a_5) OVER (PARTITION BY aggregatescan_8.a_6
       ORDER BY aggregatescan_8.a_7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_10
|> AS analyticscan_11
|> WHERE
     CAST(analyticscan_11.a_9 AS DOUBLE) < (analyticscan_11.a_10)
|> SELECT
     analyticscan_11.a_9 AS window_result;
==

# Multi-level aggregates in the ORDER BY clause.
SELECT
  SUM(int64)
FROM SimpleTypes
GROUP BY int64
ORDER BY
  SUM(int64 + double + MAX(int32) GROUP BY double),
  MIN(int64 + MAX(COUNT(*) GROUP BY double) GROUP BY string)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$aggregate.$agg1#20]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AggregateScan
    |   +-column_list=$aggregate.[$agg1#20, $agg2#25, $agg3#33]
    |   +-input_scan=
    |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
    |   +-group_by_list=
    |   | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |   +-aggregate_list=
    |     +-$agg1#20 :=
    |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |     |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-$agg2#25 :=
    |     | +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
    |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |     |     +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |     |     | +-Cast(INT64 -> DOUBLE)
    |     |     | | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22)
    |     |     | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#23)
    |     |     +-Cast(INT32 -> DOUBLE)
    |     |       +-ColumnRef(type=INT32, column=$aggregate.$agg1#24)
    |     |   +-group_by_list=
    |     |   | +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     |   | +-$groupbymod#23 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    |     |   +-group_by_aggregate_list=
    |     |     +-$agg1#24 :=
    |     |       +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
    |     |         +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     +-$agg3#33 :=
    |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
    |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#26)
    |           +-ColumnRef(type=INT64, column=$aggregate.$agg1#32)
    |         +-group_by_list=
    |         | +-$groupbymod#26 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |         | +-$groupbymod#27 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |         +-group_by_aggregate_list=
    |           +-$agg1#32 :=
    |             +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
    |               +-ColumnRef(type=INT64, column=$aggregate.$agg1#31)
    |               +-group_by_list=
    |               | +-$groupbymod#28 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |               | +-$groupbymod#29 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |               | +-$groupbymod#30 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    |               +-group_by_aggregate_list=
    |                 +-$agg1#31 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-order_by_item_list=
      +-OrderByItem
      | +-column_ref=
      |   +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#25)
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$aggregate.$agg3#33)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_6 AS a_6
FROM
  (
    SELECT
      SUM(simpletypes_5.a_2) AS a_6,
      SUM((CAST(simpletypes_5.a_2 AS DOUBLE) + (simpletypes_5.a_4)) + CAST(MAX(simpletypes_5.a_1) AS DOUBLE)
        GROUP BY simpletypes_5.a_2, simpletypes_5.a_4) AS a_7,
      MIN((simpletypes_5.a_2) + (MAX(COUNT(*)
          GROUP BY simpletypes_5.a_2, simpletypes_5.a_3, simpletypes_5.a_4))
        GROUP BY simpletypes_5.a_2, simpletypes_5.a_3) AS a_8
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3,
          SimpleTypes.double AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
    GROUP BY simpletypes_5.a_2
  ) AS aggregatescan_9
ORDER BY aggregatescan_9.a_7, aggregatescan_9.a_8;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(simpletypes_5.a_2) AS a_6,
  SUM((CAST(simpletypes_5.a_2 AS DOUBLE) + (simpletypes_5.a_4)) + CAST(MAX(simpletypes_5.a_1) AS DOUBLE)
    GROUP BY simpletypes_5.a_2, simpletypes_5.a_4) AS a_7,
  MIN((simpletypes_5.a_2) + (MAX(COUNT(*)
      GROUP BY simpletypes_5.a_2, simpletypes_5.a_3, simpletypes_5.a_4))
    GROUP BY simpletypes_5.a_2, simpletypes_5.a_3) AS a_8
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.string AS a_3,
         SimpleTypes.double AS a_4
    |> AS simpletypes_5
  )
GROUP BY simpletypes_5.a_2
|> AS aggregatescan_9
|> ORDER BY aggregatescan_9.a_7, aggregatescan_9.a_8
|> SELECT
     aggregatescan_9.a_6 AS a_6;
==

# DISTINCT and ORDER by on a GROUP BY modifier.
SELECT
  ARRAY_AGG(DISTINCT int32 GROUP BY int32 ORDER BY int32)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#21 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#21]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#21]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
        +-aggregate_list=
          +-$agg1#21 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT32) -> ARRAY<INT32>)
              +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#20)
              +-distinct=TRUE
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#20)
              +-group_by_list=
                +-$groupbymod#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(DISTINCT simpletypes_2.a_1
    GROUP BY simpletypes_2.a_1
    ORDER BY simpletypes_2.a_1) AS a_3
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1
    FROM
      SimpleTypes
  ) AS simpletypes_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1
|> AS simpletypes_2
|> AGGREGATE
     ARRAY_AGG(DISTINCT simpletypes_2.a_1
       GROUP BY simpletypes_2.a_1
       ORDER BY simpletypes_2.a_1) AS a_3;
==

# ORDER BY a grouping key that is a struct field access.
SELECT
  ARRAY_AGG(
    D1.doubly_nested_struct.e + D1.doubly_nested_struct.f.d.a
    GROUP BY D1.doubly_nested_struct.f.d.a
    ORDER BY D1.doubly_nested_struct.f.d.a
  )
FROM DoublyNestedStructTable AS D1
GROUP BY D1.doubly_nested_struct.e, D1.doubly_nested_struct.f;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#8 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#8]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#8]
        +-input_scan=
        | +-TableScan(column_list=[DoublyNestedStructTable.doubly_nested_struct#2], table=DoublyNestedStructTable, column_index_list=[1], alias="D1")
        +-group_by_list=
        | +-e#3 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
        | |   +-field_idx=0
        | +-f#4 :=
        |   +-GetStructField
        |     +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#8 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-Cast(INT32 -> INT64)
                | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#5)
                +-Cast(INT32 -> INT64)
                  +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#7)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#7)
              +-group_by_list=
                +-$groupbymod#5 :=
                | +-GetStructField
                |   +-type=INT32
                |   +-expr=
                |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                |   +-field_idx=0
                +-$groupbymod#6 :=
                | +-GetStructField
                |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
                |   +-expr=
                |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                |   +-field_idx=1
                +-$groupbymod#7 :=
                  +-GetStructField
                    +-type=INT32
                    +-expr=
                    | +-GetStructField
                    |   +-type=STRUCT<a INT32, b STRING>
                    |   +-expr=
                    |   | +-GetStructField
                    |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
                    |   |   +-expr=
                    |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
                    |   |   +-field_idx=1
                    |   +-field_idx=1
                    +-field_idx=0

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(CAST(doublynestedstructtable_2.a_1.e AS INT64) + CAST(doublynestedstructtable_2.a_1.f.d.a AS INT64)
    GROUP BY doublynestedstructtable_2.a_1.e, doublynestedstructtable_2.a_1.f, doublynestedstructtable_2.a_1.f.d.a
    ORDER BY doublynestedstructtable_2.a_1.f.d.a) AS a_3
FROM
  (
    SELECT
      DoublyNestedStructTable.doubly_nested_struct AS a_1
    FROM
      DoublyNestedStructTable
  ) AS doublynestedstructtable_2
GROUP BY doublynestedstructtable_2.a_1.e, doublynestedstructtable_2.a_1.f;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(CAST(doublynestedstructtable_2.a_1.e AS INT64) + CAST(doublynestedstructtable_2.a_1.f.d.a AS INT64)
    GROUP BY doublynestedstructtable_2.a_1.e, doublynestedstructtable_2.a_1.f, doublynestedstructtable_2.a_1.f.d.a
    ORDER BY doublynestedstructtable_2.a_1.f.d.a) AS a_3
FROM
  (
    FROM
      DoublyNestedStructTable
    |> SELECT
         DoublyNestedStructTable.doubly_nested_struct AS a_1
    |> AS doublynestedstructtable_2
  )
GROUP BY doublynestedstructtable_2.a_1.e, doublynestedstructtable_2.a_1.f
|> AS aggregatescan_4
|> SELECT
     aggregatescan_4.a_3 AS a_3;
==

# Multi-level aggregation over PROTO fields
SELECT
  SUM(ANY_VALUE(T.Kitchensink.int64_val) GROUP BY T.Kitchensink.int64_key_1),
  SUM(repeated_int64),
FROM TestTable AS T
LEFT JOIN T.Kitchensink.repeated_int64_val AS repeated_int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg2#8 AS `$col1` [INT64]
| +-$aggregate.$agg1#5 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg2#8, $agg1#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#8]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.repeated_int64#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int64_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.repeated_int64#4]
        |   +-is_outer=TRUE
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=$array.repeated_int64#4)
          +-$agg2#8 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
              +-group_by_list=
              | +-$groupbymod#6 :=
              |   +-GetProtoField
              |     +-type=INT64
              |     +-expr=
              |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              |     +-field_descriptor=int64_key_1
              +-group_by_aggregate_list=
                +-$agg1#7 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-GetProtoField
                      +-type=INT64
                      +-expr=
                      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-field_descriptor=int64_val
                      +-default_value=0

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_6.a_5 AS a_5,
  aggregatescan_6.a_4 AS a_4
FROM
  (
    SELECT
      SUM(a_3) AS a_4,
      SUM(ANY_VALUE(testtable_2.a_1.int64_val)
        GROUP BY testtable_2.a_1.int64_key_1) AS a_5
    FROM
      (
        SELECT
          TestTable.KitchenSink AS a_1
        FROM
          TestTable
      ) AS testtable_2
      LEFT JOIN
      UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
  ) AS aggregatescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> LEFT JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> AGGREGATE
     SUM(a_3) AS a_4,
     SUM(ANY_VALUE(testtable_2.a_1.int64_val)
       GROUP BY testtable_2.a_1.int64_key_1) AS a_5
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5,
     aggregatescan_6.a_4 AS a_4;
==

# Multi-level aggregation over an UNNESTed array
SELECT
  SUM(ANY_VALUE(T.Kitchensink.int64_val) GROUP BY T.Kitchensink.int64_key_1),
  SUM(numbers),
FROM TestTable AS T
LEFT JOIN UNNEST ([10,20,30,40,50]) AS numbers;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg2#8 AS `$col1` [INT64]
| +-$aggregate.$agg1#5 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg2#8, $agg1#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#8]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.numbers#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2], alias="T")
        |   +-array_expr_list=
        |   | +-Literal(type=ARRAY<INT64>, value=[10, 20, 30, 40, 50])
        |   +-element_column_list=[$array.numbers#4]
        |   +-is_outer=TRUE
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=$array.numbers#4)
          +-$agg2#8 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
              +-group_by_list=
              | +-$groupbymod#6 :=
              |   +-GetProtoField
              |     +-type=INT64
              |     +-expr=
              |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              |     +-field_descriptor=int64_key_1
              +-group_by_aggregate_list=
                +-$agg1#7 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-GetProtoField
                      +-type=INT64
                      +-expr=
                      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-field_descriptor=int64_val
                      +-default_value=0

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_6.a_5 AS a_5,
  aggregatescan_6.a_4 AS a_4
FROM
  (
    SELECT
      SUM(a_3) AS a_4,
      SUM(ANY_VALUE(testtable_2.a_1.int64_val)
        GROUP BY testtable_2.a_1.int64_key_1) AS a_5
    FROM
      (
        SELECT
          TestTable.KitchenSink AS a_1
        FROM
          TestTable
      ) AS testtable_2
      LEFT JOIN
      UNNEST(ARRAY< INT64 >[10, 20, 30, 40, 50]) AS a_3
  ) AS aggregatescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> LEFT JOIN
   UNNEST(ARRAY< INT64 >[10, 20, 30, 40, 50]) AS a_3
|> AGGREGATE
     SUM(a_3) AS a_4,
     SUM(ANY_VALUE(testtable_2.a_1.int64_val)
       GROUP BY testtable_2.a_1.int64_key_1) AS a_5
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5,
     aggregatescan_6.a_4 AS a_4;
==

# GROUP BY () in the query's GROUP BY clause.
SELECT
  SUM(AVG(int64) GROUP BY string)
FROM SimpleTypes
GROUP BY ();
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#21)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(AVG(simpletypes_3.a_1)
    GROUP BY simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int64 AS a_1,
      SimpleTypes.string AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.string AS a_2
|> AS simpletypes_3
|> AGGREGATE
     SUM(AVG(simpletypes_3.a_1)
       GROUP BY simpletypes_3.a_2) AS a_4;
==

# Ensure 'grouping-constness' works correctly with CUBE, ROLLUP and GROUPING
# SETS. For this query, it means references to int64 and int32 are not
# grouping-constants when ROLLUP / CUBE / GROUPING SETS are used.
SELECT
  SUM(int64 + CAST(int32 AS INT64) + MAX(int64) GROUP BY string)
FROM SimpleTypes
GROUP BY {{int32, int64|ROLLUP(int32, int64)|CUBE(int32, int64)|GROUPING SETS(int32, int64)}}
--
ALTERNATION GROUP: int32, int64
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#26 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#26]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#26]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5], table=SimpleTypes, column_index_list=[0, 1, 4])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
          +-$agg1#26 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
                | +-Cast(INT32 -> INT64)
                |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
                +-ColumnRef(type=INT64, column=$aggregate.$agg1#25)
              +-group_by_list=
              | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
              | +-$groupbymod#24 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#25 :=
                  +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_4.a_2) + CAST(simpletypes_4.a_1 AS INT64)) + (MAX(simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_1, simpletypes_4.a_2, simpletypes_4.a_3) AS a_5
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.string AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_1, simpletypes_4.a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_4.a_2) + CAST(simpletypes_4.a_1 AS INT64)) + (MAX(simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_1, simpletypes_4.a_2, simpletypes_4.a_3) AS a_5
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.string AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_1, simpletypes_4.a_2
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5;
--
ALTERNATION GROUPS:
    ROLLUP(int32, int64)
    CUBE(int32, int64)
    GROUPING SETS(int32, int64)
--
ERROR: multi-level aggregate expression references column int64 which is neither grouped nor aggregated [at 2:7]
  SUM(int64 + CAST(int32 AS INT64) + MAX(int64) GROUP BY string)
      ^
==

# Ensure 'grouping-constness' works correctly with CUBE, ROLLUP and GROUPING
# SETS. For this query, it means references to int64 and int32 are
# grouping-constants when ROLLUP / CUBE / GROUPING SETS are used (because
# the GROUP BY modifier list contains them).
SELECT
  SUM(int64 + CAST(int32 AS INT64) + MAX(int64) GROUP BY int32, int64)
FROM SimpleTypes
GROUP BY {{int32, int64|ROLLUP(int32, int64)|CUBE(int32, int64)|GROUPING SETS(int32, int64)}}
--
ALTERNATION GROUP: int32, int64
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
                | +-Cast(INT32 -> INT64)
                |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
                +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
              +-group_by_list=
              | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
              +-group_by_aggregate_list=
                +-$agg1#24 :=
                  +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3
GROUP BY simpletypes_3.a_1, simpletypes_3.a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2
    |> AS simpletypes_3
  )
GROUP BY simpletypes_3.a_1, simpletypes_3.a_2
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4;
--
ALTERNATION GROUP: ROLLUP(int32, int64)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
        | +-$agg1#25 :=
        |   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        |       | +-Cast(INT32 -> INT64)
        |       |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        |       +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        |     +-group_by_list=
        |     | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-group_by_aggregate_list=
        |       +-$agg1#24 :=
        |         +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-grouping_set_list=
          +-Rollup
            +-rollup_column_list=
              +-GroupingSetMultiColumn
              | +-column_list=
              |   +-ColumnRef(type=INT32, column=$groupby.int32#20)
              +-GroupingSetMultiColumn
                +-column_list=
                  +-ColumnRef(type=INT64, column=$groupby.int64#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3
GROUP BY ROLLUP(simpletypes_3.a_1, simpletypes_3.a_2);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2
    |> AS simpletypes_3
  )
GROUP BY ROLLUP(simpletypes_3.a_1, simpletypes_3.a_2)
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4;
--
ALTERNATION GROUP: CUBE(int32, int64)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
        | +-$agg1#25 :=
        |   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        |       | +-Cast(INT32 -> INT64)
        |       |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        |       +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        |     +-group_by_list=
        |     | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-group_by_aggregate_list=
        |       +-$agg1#24 :=
        |         +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-grouping_set_list=
          +-Cube
            +-cube_column_list=
              +-GroupingSetMultiColumn
              | +-column_list=
              |   +-ColumnRef(type=INT32, column=$groupby.int32#20)
              +-GroupingSetMultiColumn
                +-column_list=
                  +-ColumnRef(type=INT64, column=$groupby.int64#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3
GROUP BY CUBE(simpletypes_3.a_1, simpletypes_3.a_2);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2
    |> AS simpletypes_3
  )
GROUP BY CUBE(simpletypes_3.a_1, simpletypes_3.a_2)
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4;
--
ALTERNATION GROUP: GROUPING SETS(int32, int64)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
        | +-$agg1#25 :=
        |   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        |       | +-Cast(INT32 -> INT64)
        |       |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        |       +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        |     +-group_by_list=
        |     | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-group_by_aggregate_list=
        |       +-$agg1#24 :=
        |         +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        |           +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-grouping_set_list=
          +-GroupingSet
          | +-group_by_column_list=
          |   +-ColumnRef(type=INT32, column=$groupby.int32#20)
          +-GroupingSet
            +-group_by_column_list=
              +-ColumnRef(type=INT64, column=$groupby.int64#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3
GROUP BY GROUPING SETS(simpletypes_3.a_1, simpletypes_3.a_2);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_3.a_2) + CAST(simpletypes_3.a_1 AS INT64)) + (MAX(simpletypes_3.a_2))
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2
    |> AS simpletypes_3
  )
GROUP BY GROUPING SETS(simpletypes_3.a_1, simpletypes_3.a_2)
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4;
==

# Ensure 'grouping-constness' works correctly with CUBE, ROLLUP and GROUPING
# SETS.
SELECT
  SUM(int64 + CAST(int32 AS INT64) + MAX(int64) GROUP BY int32, int64),
  AVG(MIN(uint32) + int64 GROUP BY int64)
FROM SimpleTypes
GROUP BY {{ROLLUP(string, bool)|CUBE(string, bool)|GROUPING SETS(string, bool)}}
--
ALTERNATION GROUP: ROLLUP(string, bool)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#25, $agg2#28]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#25, $agg2#28]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, string#5, bool#7], table=SimpleTypes, column_index_list=[0, 1, 2, 4, 6])
        +-group_by_list=
        | +-string#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        | +-bool#21 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |     | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        | |     | +-Cast(INT32 -> INT64)
        | |     |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        | |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        | |   +-group_by_list=
        | |   | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | |   | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | |   +-group_by_aggregate_list=
        | |     +-$agg1#24 :=
        | |       +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        | |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | +-$agg2#28 :=
        |   +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-Cast(UINT32 -> INT64)
        |       | +-ColumnRef(type=UINT32, column=$aggregate.$agg1#27)
        |       +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#26)
        |     +-group_by_list=
        |     | +-$groupbymod#26 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-group_by_aggregate_list=
        |       +-$agg1#27 :=
        |         +-AggregateFunctionCall(ZetaSQL:min(UINT32) -> UINT32)
        |           +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
        +-grouping_set_list=
          +-Rollup
            +-rollup_column_list=
              +-GroupingSetMultiColumn
              | +-column_list=
              |   +-ColumnRef(type=STRING, column=$groupby.string#20)
              +-GroupingSetMultiColumn
                +-column_list=
                  +-ColumnRef(type=BOOL, column=$groupby.bool#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) + (MAX(simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_1, simpletypes_6.a_2) AS a_7,
  AVG(CAST(MIN(simpletypes_6.a_3) AS INT64) + (simpletypes_6.a_2)
    GROUP BY simpletypes_6.a_2) AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.uint32 AS a_3,
      SimpleTypes.string AS a_4,
      SimpleTypes.bool AS a_5
    FROM
      SimpleTypes
  ) AS simpletypes_6
GROUP BY ROLLUP(simpletypes_6.a_4, simpletypes_6.a_5);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) + (MAX(simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_1, simpletypes_6.a_2) AS a_7,
  AVG(CAST(MIN(simpletypes_6.a_3) AS INT64) + (simpletypes_6.a_2)
    GROUP BY simpletypes_6.a_2) AS a_8
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.uint32 AS a_3,
         SimpleTypes.string AS a_4,
         SimpleTypes.bool AS a_5
    |> AS simpletypes_6
  )
GROUP BY ROLLUP(simpletypes_6.a_4, simpletypes_6.a_5)
|> AS aggregatescan_9
|> SELECT
     aggregatescan_9.a_7 AS a_7,
     aggregatescan_9.a_8 AS a_8;
--
ALTERNATION GROUP: CUBE(string, bool)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#25, $agg2#28]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#25, $agg2#28]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, string#5, bool#7], table=SimpleTypes, column_index_list=[0, 1, 2, 4, 6])
        +-group_by_list=
        | +-string#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        | +-bool#21 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |     | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        | |     | +-Cast(INT32 -> INT64)
        | |     |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        | |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        | |   +-group_by_list=
        | |   | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | |   | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | |   +-group_by_aggregate_list=
        | |     +-$agg1#24 :=
        | |       +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        | |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | +-$agg2#28 :=
        |   +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-Cast(UINT32 -> INT64)
        |       | +-ColumnRef(type=UINT32, column=$aggregate.$agg1#27)
        |       +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#26)
        |     +-group_by_list=
        |     | +-$groupbymod#26 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-group_by_aggregate_list=
        |       +-$agg1#27 :=
        |         +-AggregateFunctionCall(ZetaSQL:min(UINT32) -> UINT32)
        |           +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
        +-grouping_set_list=
          +-Cube
            +-cube_column_list=
              +-GroupingSetMultiColumn
              | +-column_list=
              |   +-ColumnRef(type=STRING, column=$groupby.string#20)
              +-GroupingSetMultiColumn
                +-column_list=
                  +-ColumnRef(type=BOOL, column=$groupby.bool#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) + (MAX(simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_1, simpletypes_6.a_2) AS a_7,
  AVG(CAST(MIN(simpletypes_6.a_3) AS INT64) + (simpletypes_6.a_2)
    GROUP BY simpletypes_6.a_2) AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.uint32 AS a_3,
      SimpleTypes.string AS a_4,
      SimpleTypes.bool AS a_5
    FROM
      SimpleTypes
  ) AS simpletypes_6
GROUP BY CUBE(simpletypes_6.a_4, simpletypes_6.a_5);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) + (MAX(simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_1, simpletypes_6.a_2) AS a_7,
  AVG(CAST(MIN(simpletypes_6.a_3) AS INT64) + (simpletypes_6.a_2)
    GROUP BY simpletypes_6.a_2) AS a_8
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.uint32 AS a_3,
         SimpleTypes.string AS a_4,
         SimpleTypes.bool AS a_5
    |> AS simpletypes_6
  )
GROUP BY CUBE(simpletypes_6.a_4, simpletypes_6.a_5)
|> AS aggregatescan_9
|> SELECT
     aggregatescan_9.a_7 AS a_7,
     aggregatescan_9.a_8 AS a_8;
--
ALTERNATION GROUP: GROUPING SETS(string, bool)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#25, $agg2#28]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#25, $agg2#28]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, string#5, bool#7], table=SimpleTypes, column_index_list=[0, 1, 2, 4, 6])
        +-group_by_list=
        | +-string#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        | +-bool#21 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        +-aggregate_list=
        | +-$agg1#25 :=
        | | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |     | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#23)
        | |     | +-Cast(INT32 -> INT64)
        | |     |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
        | |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        | |   +-group_by_list=
        | |   | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        | |   | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | |   +-group_by_aggregate_list=
        | |     +-$agg1#24 :=
        | |       +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
        | |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | +-$agg2#28 :=
        |   +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       +-Cast(UINT32 -> INT64)
        |       | +-ColumnRef(type=UINT32, column=$aggregate.$agg1#27)
        |       +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#26)
        |     +-group_by_list=
        |     | +-$groupbymod#26 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     +-group_by_aggregate_list=
        |       +-$agg1#27 :=
        |         +-AggregateFunctionCall(ZetaSQL:min(UINT32) -> UINT32)
        |           +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
        +-grouping_set_list=
          +-GroupingSet
          | +-group_by_column_list=
          |   +-ColumnRef(type=STRING, column=$groupby.string#20)
          +-GroupingSet
            +-group_by_column_list=
              +-ColumnRef(type=BOOL, column=$groupby.bool#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) + (MAX(simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_1, simpletypes_6.a_2) AS a_7,
  AVG(CAST(MIN(simpletypes_6.a_3) AS INT64) + (simpletypes_6.a_2)
    GROUP BY simpletypes_6.a_2) AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.uint32 AS a_3,
      SimpleTypes.string AS a_4,
      SimpleTypes.bool AS a_5
    FROM
      SimpleTypes
  ) AS simpletypes_6
GROUP BY GROUPING SETS(simpletypes_6.a_4, simpletypes_6.a_5);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) + (MAX(simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_1, simpletypes_6.a_2) AS a_7,
  AVG(CAST(MIN(simpletypes_6.a_3) AS INT64) + (simpletypes_6.a_2)
    GROUP BY simpletypes_6.a_2) AS a_8
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.uint32 AS a_3,
         SimpleTypes.string AS a_4,
         SimpleTypes.bool AS a_5
    |> AS simpletypes_6
  )
GROUP BY GROUPING SETS(simpletypes_6.a_4, simpletypes_6.a_5)
|> AS aggregatescan_9
|> SELECT
     aggregatescan_9.a_7 AS a_7,
     aggregatescan_9.a_8 AS a_8;
==

# Test value table with multilevel aggregation.
SELECT
  MAX(MIN(int64_val) GROUP BY int64_key_1)
FROM KitchenSinkValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
        +-aggregate_list=
          +-$agg1#4 :=
            +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#3)
              +-group_by_list=
              | +-$groupbymod#2 :=
              |   +-GetProtoField
              |     +-type=INT64
              |     +-expr=
              |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
              |     +-field_descriptor=int64_key_1
              +-group_by_aggregate_list=
                +-$agg1#3 :=
                  +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
                    +-GetProtoField
                      +-type=INT64
                      +-expr=
                      | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
                      +-field_descriptor=int64_val
                      +-default_value=0

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  MAX(MIN(kitchensinkvaluetable_2.a_1.int64_val)
    GROUP BY kitchensinkvaluetable_2.a_1.int64_key_1) AS a_3
FROM
  (
    SELECT
      KitchenSinkValueTable AS a_1
    FROM
      KitchenSinkValueTable
  ) AS kitchensinkvaluetable_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KitchenSinkValueTable
|> SELECT
     KitchenSinkValueTable AS a_1
|> AS kitchensinkvaluetable_2
|> AGGREGATE
     MAX(MIN(kitchensinkvaluetable_2.a_1.int64_val)
       GROUP BY kitchensinkvaluetable_2.a_1.int64_key_1) AS a_3;
==

# CTE with multi-level aggregation.
WITH T AS (
  SELECT
    MIN(int64 + MAX(double) GROUP BY int64)
  FROM SimpleTypes
  GROUP BY int32
) SELECT * FROM T;
--
QueryStmt
+-output_column_list=
| +-T.$col1#25 AS `$col1` [DOUBLE]
+-query=
  +-WithScan
    +-column_list=[T.$col1#25]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$aggregate.$agg1#24]
    |       +-input_scan=
    |         +-AggregateScan
    |           +-column_list=[$aggregate.$agg1#24]
    |           +-input_scan=
    |           | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
    |           +-group_by_list=
    |           | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |           +-aggregate_list=
    |             +-$agg1#24 :=
    |               +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
    |                 +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |                   +-Cast(INT64 -> DOUBLE)
    |                   | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22)
    |                   +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#23)
    |                 +-group_by_list=
    |                 | +-$groupbymod#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |                 | +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |                 +-group_by_aggregate_list=
    |                   +-$agg1#23 :=
    |                     +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
    |                       +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
    +-query=
      +-ProjectScan
        +-column_list=[T.$col1#25]
        +-input_scan=
          +-WithRefScan(column_list=[T.$col1#25], with_query_name="T")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  T AS (
    SELECT
      MIN(CAST(simpletypes_4.a_2 AS DOUBLE) + (MAX(simpletypes_4.a_3))
        GROUP BY simpletypes_4.a_1, simpletypes_4.a_2) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.double AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
    GROUP BY simpletypes_4.a_1
  )
SELECT
  withrefscan_6.a_5 AS a_5
FROM
  T AS withrefscan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  T AS (
    SELECT
      MIN(CAST(simpletypes_4.a_2 AS DOUBLE) + (MAX(simpletypes_4.a_3))
        GROUP BY simpletypes_4.a_1, simpletypes_4.a_2) AS a_5
    FROM
      (
        FROM
          SimpleTypes
        |> SELECT
             SimpleTypes.int32 AS a_1,
             SimpleTypes.int64 AS a_2,
             SimpleTypes.double AS a_3
        |> AS simpletypes_4
      )
    GROUP BY simpletypes_4.a_1
    |> AS aggregatescan_6
    |> SELECT
         aggregatescan_6.a_5 AS a_5
  )
FROM
  T AS withrefscan_7
|> SELECT
     withrefscan_7.a_5 AS a_5;
==

# Test various aggregate function modifiers with multi-level aggregation.
SELECT
  ARRAY_AGG(DISTINCT string IGNORE NULLS GROUP BY string ORDER BY string LIMIT 10)
FROM SimpleTypes
GROUP BY int32;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#23 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#23]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#23]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, string#5], table=SimpleTypes, column_index_list=[0, 4])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        +-aggregate_list=
          +-$agg1#23 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#22)
              +-distinct=TRUE
              +-null_handling_modifier=IGNORE_NULLS
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#22)
              +-limit=
              | +-Literal(type=INT64, value=10)
              +-group_by_list=
                +-$groupbymod#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                +-$groupbymod#22 := ColumnRef(type=STRING, column=SimpleTypes.string#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(DISTINCT simpletypes_3.a_2 IGNORE NULLS
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2
    ORDER BY simpletypes_3.a_2
    LIMIT 10) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.string AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3
GROUP BY simpletypes_3.a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(DISTINCT simpletypes_3.a_2 IGNORE NULLS
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2
    ORDER BY simpletypes_3.a_2
    LIMIT 10) AS a_4
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.string AS a_2
    |> AS simpletypes_3
  )
GROUP BY simpletypes_3.a_1
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4;
==

# Regression test for b/379931737
# Disable literal replacement because the group by expr must match, and literal
# replacement will put a different parameter.
[no_enable_literal_replacement]
SELECT STRING_AGG(CAST(b"HJ:ESN" AS STRING FORMAT "base64")
                  GROUP BY a,
                           CAST(b"HJ:ESN" AS STRING FORMAT "base64")
                  ORDER BY a)
FROM UNNEST([1,2,3]) AS a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.a#1]
        |   +-array_expr_list=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column_list=[$array.a#1]
        +-aggregate_list=
          +-$agg1#4 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#3)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#2)
              +-group_by_list=
                +-$groupbymod#2 := ColumnRef(type=INT64, column=$array.a#1)
                +-$groupbymod#3 :=
                  +-Cast(BYTES -> STRING)
                    +-Literal(type=BYTES, value=b"HJ:ESN")
                    +-format=
                      +-Literal(type=STRING, value="base64")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  STRING_AGG(CAST(b"HJ:ESN" AS STRING FORMAT "base64")
    GROUP BY a_1, CAST(b"HJ:ESN" AS STRING FORMAT "base64")
    ORDER BY a_1) AS a_2
FROM
  UNNEST(ARRAY< INT64 >[1, 2, 3]) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(ARRAY< INT64 >[1, 2, 3]) AS a_1
|> AGGREGATE
     STRING_AGG(CAST(b"HJ:ESN" AS STRING FORMAT "base64")
       GROUP BY a_1, CAST(b"HJ:ESN" AS STRING FORMAT "base64")
       ORDER BY a_1) AS a_2;
==

# Regression test for b/379931737
# Disable literal replacement because the group by expr must match, and literal
# replacement will put a different parameter.
[no_enable_literal_replacement]
SELECT STRING_AGG(CAST(ARRAY_FIND([1], e -> e > 5) AS STRING)
                  GROUP BY a,
                           CAST(ARRAY_FIND([1], e -> e > 5) AS STRING)
                  ORDER BY a)
FROM UNNEST([1,2,3]) AS a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#6]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.a#1]
        |   +-array_expr_list=
        |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |   +-element_column_list=[$array.a#1]
        +-aggregate_list=
          +-$agg1#6 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
              +-Cast(INT64 -> STRING)
                +-FunctionCall(ZetaSQL:array_find(ARRAY<INT64> input_array, FUNCTION<INT64->BOOL> condition, optional(1) ENUM<ARRAY_FIND_MODE> find_mode) -> INT64)
                  +-FunctionArgument
                  | +-expr=
                  |   +-Literal(type=ARRAY<INT64>, value=[1])
                  +-FunctionArgument
                  | +-inline_lambda=
                  |   +-InlineLambda
                  |     +-argument_list=[$lambda_arg.e#5]
                  |     +-body=
                  |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |         +-ColumnRef(type=INT64, column=$lambda_arg.e#5)
                  |         +-Literal(type=INT64, value=5)
                  +-FunctionArgument
                    +-expr=
                      +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#2)
              +-group_by_list=
                +-$groupbymod#2 := ColumnRef(type=INT64, column=$array.a#1)
                +-$groupbymod#4 :=
                  +-Cast(INT64 -> STRING)
                    +-FunctionCall(ZetaSQL:array_find(ARRAY<INT64> input_array, FUNCTION<INT64->BOOL> condition, optional(1) ENUM<ARRAY_FIND_MODE> find_mode) -> INT64)
                      +-FunctionArgument
                      | +-expr=
                      |   +-Literal(type=ARRAY<INT64>, value=[1])
                      +-FunctionArgument
                      | +-inline_lambda=
                      |   +-InlineLambda
                      |     +-argument_list=[$lambda_arg.e#3]
                      |     +-body=
                      |       +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                      |         +-ColumnRef(type=INT64, column=$lambda_arg.e#3)
                      |         +-Literal(type=INT64, value=5)
                      +-FunctionArgument
                        +-expr=
                          +-Literal(type=ENUM<ARRAY_FIND_MODE>, value=FIRST)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  STRING_AGG(CAST(ARRAY_FIND(ARRAY< INT64 >[1], (a_3) -> a_3 > 5, CAST("FIRST" AS ARRAY_FIND_MODE)) AS STRING)
    GROUP BY a_1, CAST(ARRAY_FIND(ARRAY< INT64 >[1], (a_2) -> a_2 > 5, CAST("FIRST" AS ARRAY_FIND_MODE)) AS STRING)
    ORDER BY a_1) AS a_4
FROM
  UNNEST(ARRAY< INT64 >[1, 2, 3]) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(ARRAY< INT64 >[1, 2, 3]) AS a_1
|> AGGREGATE
     STRING_AGG(CAST(ARRAY_FIND(ARRAY< INT64 >[1], (a_3) -> a_3 > 5, CAST("FIRST" AS ARRAY_FIND_MODE)) AS STRING)
       GROUP BY a_1, CAST(ARRAY_FIND(ARRAY< INT64 >[1], (a_2) -> a_2 > 5, CAST("FIRST" AS ARRAY_FIND_MODE)) AS STRING)
       ORDER BY a_1) AS a_4;
==

# GROUP BY modifier can contain hints
SELECT
  SUM(AVG(int64) GROUP @{abc=1} BY bool)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#21)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
              +-group_by_hint_list=
              | +-abc := Literal(type=INT64, value=1)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(AVG(simpletypes_3.a_1)
    GROUP @{ abc = 1 } BY simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int64 AS a_1,
      SimpleTypes.bool AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.bool AS a_2
|> AS simpletypes_3
|> AGGREGATE
     SUM(AVG(simpletypes_3.a_1)
       GROUP @{ abc = 1 } BY simpletypes_3.a_2) AS a_4;
==

# GROUP BY modifier can contain hints
SELECT
  SUM(SUM(int64 GROUP @{abc=2} BY int64) GROUP @{abc=1} BY bool)
FROM SimpleTypes
HAVING AVG(AVG(int64) GROUP @{abc=3} BY  bool) > 0;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#24 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#24]
    +-input_scan=
      +-FilterScan
        +-column_list=$aggregate.[$agg1#24, $agg2#27]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=$aggregate.[$agg1#24, $agg2#27]
        |   +-input_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
        |   +-aggregate_list=
        |     +-$agg1#24 :=
        |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#23)
        |     |   +-group_by_list=
        |     |   | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        |     |   +-group_by_hint_list=
        |     |   | +-abc := Literal(type=INT64, value=1)
        |     |   +-group_by_aggregate_list=
        |     |     +-$agg1#23 :=
        |     |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |     |         +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22)
        |     |         +-group_by_list=
        |     |         | +-$groupbymod#21 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        |     |         | +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |     |         +-group_by_hint_list=
        |     |           +-abc := Literal(type=INT64, value=2)
        |     +-$agg2#27 :=
        |       +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
        |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#26)
        |         +-group_by_list=
        |         | +-$groupbymod#25 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
        |         +-group_by_hint_list=
        |         | +-abc := Literal(type=INT64, value=3)
        |         +-group_by_aggregate_list=
        |           +-$agg1#26 :=
        |             +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
        |               +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
            +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#27)
            +-Literal(type=DOUBLE, value=0)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_6.a_4 AS a_4
FROM
  (
    SELECT
      SUM(SUM(simpletypes_3.a_1
          GROUP @{ abc = 2 } BY simpletypes_3.a_2, simpletypes_3.a_1)
        GROUP @{ abc = 1 } BY simpletypes_3.a_2) AS a_4,
      AVG(AVG(simpletypes_3.a_1)
        GROUP @{ abc = 3 } BY simpletypes_3.a_2) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_1,
          SimpleTypes.bool AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
  ) AS aggregatescan_6
WHERE
  (aggregatescan_6.a_5) > 0.0;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.bool AS a_2
|> AS simpletypes_3
|> AGGREGATE
     SUM(SUM(simpletypes_3.a_1
         GROUP @{ abc = 2 } BY simpletypes_3.a_2, simpletypes_3.a_1)
       GROUP @{ abc = 1 } BY simpletypes_3.a_2) AS a_4,
     AVG(AVG(simpletypes_3.a_1)
       GROUP @{ abc = 3 } BY simpletypes_3.a_2) AS a_5
|> AS aggregatescan_6
|> WHERE
     (aggregatescan_6.a_5) > 0.0
|> SELECT
     aggregatescan_6.a_4 AS a_4;

==

[no_enable_literal_replacement]
# Similar to b/435003883
with t as (select 1 as x)
select array_agg(struct(array_agg(distinct x+1 order by x+1)) group by x+1),
       array_agg(struct(array_agg(distinct x+1 order by x+1)) group by x+1)
 from t
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [ARRAY<STRUCT<ARRAY<INT64>>>]
| +-$aggregate.$agg2#10 AS `$col2` [ARRAY<STRUCT<ARRAY<INT64>>>]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#6, $agg2#10]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.x#1]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#6, $agg2#10]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#6, $agg2#10]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[t.x#2, $orderby.$orderbycol1#4, $orderby.$orderbycol1#8]
            |   +-expr_list=
            |   | +-$orderbycol1#4 :=
            |   | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   | |   +-ColumnRef(type=INT64, column=t.x#2)
            |   | |   +-Literal(type=INT64, value=1)
            |   | +-$orderbycol1#8 :=
            |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   |     +-ColumnRef(type=INT64, column=t.x#2)
            |   |     +-Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-WithRefScan(column_list=[t.x#2], with_query_name="t")
            +-aggregate_list=
              +-$agg1#6 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<ARRAY<INT64>>) -> ARRAY<STRUCT<ARRAY<INT64>>>)
              |   +-MakeStruct
              |     +-type=STRUCT<ARRAY<INT64>>
              |     +-field_list=
              |       +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#5)
              |   +-group_by_list=
              |   | +-$groupbymod#3 :=
              |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |   |     +-ColumnRef(type=INT64, column=t.x#2)
              |   |     +-Literal(type=INT64, value=1)
              |   +-group_by_aggregate_list=
              |     +-$agg1#5 :=
              |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              |         +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
              |         +-distinct=TRUE
              |         +-order_by_item_list=
              |           +-OrderByItem
              |             +-column_ref=
              |               +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
              +-$agg2#10 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<ARRAY<INT64>>) -> ARRAY<STRUCT<ARRAY<INT64>>>)
                  +-MakeStruct
                    +-type=STRUCT<ARRAY<INT64>>
                    +-field_list=
                      +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#9)
                  +-group_by_list=
                  | +-$groupbymod#7 :=
                  |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  |     +-ColumnRef(type=INT64, column=t.x#2)
                  |     +-Literal(type=INT64, value=1)
                  +-group_by_aggregate_list=
                    +-$agg1#9 :=
                      +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                        +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#8)
                        +-distinct=TRUE
                        +-order_by_item_list=
                          +-OrderByItem
                            +-column_ref=
                              +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#8)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1
  )
SELECT
  ARRAY_AGG(STRUCT< ARRAY< INT64 > > (ARRAY_AGG(DISTINCT projectscan_5.a_3
        ORDER BY projectscan_5.a_3))
    GROUP BY (projectscan_5.a_1) + 1) AS a_6,
  ARRAY_AGG(STRUCT< ARRAY< INT64 > > (ARRAY_AGG(DISTINCT projectscan_5.a_4
        ORDER BY projectscan_5.a_4))
    GROUP BY (projectscan_5.a_1) + 1) AS a_7
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1,
      (withrefscan_2.a_1) + 1 AS a_3,
      (withrefscan_2.a_1) + 1 AS a_4
    FROM
      t AS withrefscan_2
  ) AS projectscan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1
  )
FROM
  t AS withrefscan_2
|> SELECT
     withrefscan_2.a_1 AS a_1,
     (withrefscan_2.a_1) + 1 AS a_3,
     (withrefscan_2.a_1) + 1 AS a_4
|> AS projectscan_5
|> AGGREGATE
     ARRAY_AGG(STRUCT< ARRAY< INT64 > > (ARRAY_AGG(DISTINCT projectscan_5.a_3
           ORDER BY projectscan_5.a_3))
       GROUP BY (projectscan_5.a_1) + 1) AS a_6,
     ARRAY_AGG(STRUCT< ARRAY< INT64 > > (ARRAY_AGG(DISTINCT projectscan_5.a_4
           ORDER BY projectscan_5.a_4))
       GROUP BY (projectscan_5.a_1) + 1) AS a_7;
