[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY]
[default no_test_extract_table_names]

# top level graph query statement resolves to query statement with
# GraphTableScan as query input which is semantically equivalent to
# `SELECT * FROM GRAPH_TABLE()`

graph aml
match (n)
return n.name, 1 AS number, CONCAT("str", "_suffix") AS concat_str
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
| +-$graph_table.number#3 AS number [INT64]
| +-$graph_table.concat_str#4 AS concat_str [STRING]
+-query=
  +-GraphTableScan
    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=$graph_table.[name#2, number#3, concat_str#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#2, number#3, concat_str#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                +-expr_list=
                | +-name#2 :=
                | | +-GraphGetElementProperty
                | |   +-type=STRING
                | |   +-expr=
                | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                | |   +-property=name(STRING)
                | +-number#3 := Literal(type=INT64, value=1)
                | +-concat_str#4 :=
                |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                |     +-Literal(type=STRING, value="str")
                |     +-Literal(type=STRING, value="_suffix")
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])

==

# return graph-typed columns as final output is not supported

graph aml match (n) return n

--

ERROR: Returning graph-typed column is not supported [at 1:28]
graph aml match (n) return n
                           ^
==

# Regression test on non-existing property `score` of a static element.
GRAPH aml
MATCH (n:Person)
RETURN n.score as s
--
ERROR: Property score is not exposed by element type GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> [at 3:10]
RETURN n.score as s
         ^
