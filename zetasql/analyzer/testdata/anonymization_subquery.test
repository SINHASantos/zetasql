# Specify WITH ANONYMIZATION with an EXISTS subquery.
[default language_features=MAXIMUM,+ANONYMIZATION,+NUMERIC_TYPE]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]

SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM SimpleTypesWithAnonymizationUid)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#25 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-159
    +-column_list=[$aggregate.aggregation_count#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#25]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=111-158
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=111-158
        |           +-column_list=[SimpleTypesWithAnonymizationUid.uid#23]
        |           +-input_scan=
        |             +-TableScan(parse_location=127-158, column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        +-aggregate_list=
          +-aggregation_count#25 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM SimpleTypesWithAnonymizationUid)

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 3:30]
WHERE EXISTS(SELECT uid FROM SimpleTypesWithAnonymizationUid)
                             ^
==

# Specify WITH ANONYMIZATION with an EXISTS subquery.
[language_features=NONE,+ANONYMIZATION,+NUMERIC_TYPE,+TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM tvf_no_args_with_anonymization_uid())
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#25 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-164
    +-column_list=[$aggregate.aggregation_count#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#25]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11]
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=111-163
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-parameter_list=
        |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=111-163
        |           +-column_list=[$expr_subquery.uid#24]
        |           +-expr_list=
        |           | +-uid#24 := ColumnRef(parse_location=118-121, type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11, is_correlated=TRUE)
        |           +-input_scan=
        |             +-TVFScan(parse_location=127-161, tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>, function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>)
        +-aggregate_list=
          +-aggregation_count#25 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT uid FROM tvf_no_args_with_anonymization_uid())

Rewrite ERROR: Reading the TVF tvf_no_args_with_anonymization_uid containing user data in expression subqueries is not allowed [at 3:30]
WHERE EXISTS(SELECT uid FROM tvf_no_args_with_anonymization_uid())
                             ^
==

# Specify WITH ANONYMIZATION with an EXISTS subquery.
[language_features=NONE,+ANONYMIZATION,+NUMERIC_TYPE,+TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT 1
FROM SimpleTypes
WHERE EXISTS(SELECT WITH ANONYMIZATION ANON_COUNT(*)
             FROM tvf_no_args_with_anonymization_uid())
--
QueryStmt
+-output_column_list=
| +-$query.$col1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-134
    +-column_list=[$query.$col1#32]
    +-expr_list=
    | +-$col1#32 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-133
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-133
                +-column_list=[$aggregate.$agg1#31]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.$agg1#31]
                    +-input_scan=
                    | +-TVFScan(parse_location=97-131, tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>, function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>)
                    +-aggregate_list=
                      +-$agg1#31 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=65-75)
[REPLACED_LITERALS]
SELECT @_p0_INT64
FROM SimpleTypes
WHERE EXISTS(SELECT WITH ANONYMIZATION ANON_COUNT(*)
             FROM tvf_no_args_with_anonymization_uid())

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-134
    +-column_list=[$query.$col1#32]
    +-expr_list=
    | +-$col1#32 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-133
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-133
                +-column_list=[$aggregate.$agg1#31]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.$agg1#31]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.$agg1_partial#35, $group_by.$uid#36]
                    |   +-input_scan=
                    |   | +-TVFScan(parse_location=97-131, column_list=[tvf_no_args_with_anonymization_uid.column_int64#33], tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>, column_index_list=[6], function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>)
                    |   +-group_by_list=
                    |   | +-$uid#36 := ColumnRef(type=INT64, column=tvf_no_args_with_anonymization_uid.column_int64#33)
                    |   +-aggregate_list=
                    |     +-$agg1_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                    +-aggregate_list=
                    | +-$agg1#31 :=
                    | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#35)
                    | +-$k_threshold_col#39 :=
                    |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=INT64, value=0)
                    |     +-Literal(type=INT64, value=1)
                    +-k_threshold_expr=
                      +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#39)
==

# Read from a table containing a 'uid' in an expression subquery, without WITH
# ANONYMIZATION.
# This query pattern is out of scope: the rewriter does nothing because there's
# no DP entry point.
[language_features=NONE,+ANONYMIZATION,+NUMERIC_TYPE,+TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT 1
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM SimpleTypesWithAnonymizationUid)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-85
    +-column_list=[$query.$col1#32]
    +-expr_list=
    | +-$col1#32 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-84
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-84
                +-column_list=SimpleTypesWithAnonymizationUid.[int32#20, int64#21, uint32#22, uint64#23, string#24, bytes#25, bool#26, float#27, double#28, date#29, uid#30, numeric#31]
                +-input_scan=
                  +-TableScan(parse_location=53-84, column_list=SimpleTypesWithAnonymizationUid.[int32#20, int64#21, uint32#22, uint64#23, string#24, bytes#25, bool#26, float#27, double#28, date#29, uid#30, numeric#31], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
[REPLACED_LITERALS]
SELECT @_p0_INT64
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM SimpleTypesWithAnonymizationUid)
==

# Read from a TVF containing a 'uid' in an expression subquery, without WITH
# ANONYMIZATION.
# This query pattern is out of scope: the rewriter does nothing because there's
# no DP entry point.
[language_features=NONE,+ANONYMIZATION,+NUMERIC_TYPE,+TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT 1
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM tvf_no_args_with_anonymization_uid())
--
QueryStmt
+-output_column_list=
| +-$query.$col1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-90
    +-column_list=[$query.$col1#31]
    +-expr_list=
    | +-$col1#31 := Literal(parse_location=7-8, type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(parse_location=14-25, table=SimpleTypes)
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=39-89
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-ProjectScan
                +-parse_location=39-89
                +-column_list=tvf_no_args_with_anonymization_uid.[column_bool#20, column_bytes#21, column_date#22, column_double#23, column_float#24, column_int32#25, column_int64#26, column_string#27, column_time#28, column_uint32#29, column_uint64#30]
                +-input_scan=
                  +-TVFScan(parse_location=53-87, column_list=tvf_no_args_with_anonymization_uid.[column_bool#20, column_bytes#21, column_date#22, column_double#23, column_float#24, column_int32#25, column_int64#26, column_string#27, column_time#28, column_uint32#29, column_uint64#30], tvf=tvf_no_args_with_anonymization_uid(() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES, column_date DATE, column_double DOUBLE, column_float FLOAT, column_int32 INT32, column_int64 INT64, column_string STRING, column_time TIME, column_uint32 UINT32, column_uint64 UINT64>)
[REPLACED_LITERALS]
SELECT @_p0_INT64
FROM SimpleTypes
WHERE EXISTS(SELECT * FROM tvf_no_args_with_anonymization_uid())
==

# Specify WITH ANONYMIZATION with an EXISTS subquery, and there is no 'uid' in
# the subquery.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT int64 FROM SimpleTypes)
--
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#32 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#32]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#32]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[SimpleTypes.int64#14]
        |           +-input_scan=
        |             +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
          +-aggregation_count#32 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#32 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#32]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#32]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.aggregation_count_partial#35, $group_by.$uid#36]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#33]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#33], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-filter_expr=
        |   |     +-SubqueryExpr
        |   |       +-type=BOOL
        |   |       +-subquery_type=EXISTS
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=[SimpleTypes.int64#14]
        |   |           +-input_scan=
        |   |             +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   +-group_by_list=
        |   | +-$uid#36 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#33)
        |   +-aggregate_list=
        |     +-aggregation_count_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-aggregation_count#32 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.aggregation_count_partial#35)
        | +-$k_threshold_col#39 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#39)
==

# Specify WITH ANONYMIZATION with an EXISTS subquery, and there is no 'uid' in
# the subquery.
[language_features=NONE,+ANONYMIZATION,+NUMERIC_TYPE,+TABLE_VALUED_FUNCTIONS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT * FROM tvf_no_args())
--
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#15 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#15]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=tvf_no_args.[column_bool#13, column_bytes#14]
        |           +-input_scan=
        |             +-TVFScan(column_list=tvf_no_args.[column_bool#13, column_bytes#14], tvf=tvf_no_args(() -> TABLE<column_bool BOOL, column_bytes BYTES>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>, column_index_list=[0, 1], function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-aggregate_list=
          +-aggregation_count#15 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#15 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.aggregation_count#15]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#15]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.aggregation_count_partial#18, $group_by.$uid#19]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#16]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#16], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-filter_expr=
        |   |     +-SubqueryExpr
        |   |       +-type=BOOL
        |   |       +-subquery_type=EXISTS
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-column_list=tvf_no_args.[column_bool#13, column_bytes#14]
        |   |           +-input_scan=
        |   |             +-TVFScan(column_list=tvf_no_args.[column_bool#13, column_bytes#14], tvf=tvf_no_args(() -> TABLE<column_bool BOOL, column_bytes BYTES>), signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>, column_index_list=[0, 1], function_call_signature=() -> TABLE<column_bool BOOL, column_bytes BYTES>)
        |   +-group_by_list=
        |   | +-$uid#19 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#16)
        |   +-aggregate_list=
        |     +-aggregation_count_partial#18 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-aggregation_count#15 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.aggregation_count_partial#18)
        | +-$k_threshold_col#22 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#22)
==

# One query pattern encountered by an F1 user is (see b/180509852 for more
# details).
# We can't run the unparser because the rewrite generates TABLESAMPLE and the
# TABLESAMPLE feature is not turned on.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_run_sqlbuilder]
SELECT WITH ANONYMIZATION OPTIONS (epsilon=0.02, delta=0.0000002, kappa=100)
  t.uid,
  ANON_COUNT(* CLAMPED BETWEEN 0 and 1) weight
FROM ArrayWithAnonymizationUid t
WHERE
  (SELECT
     ANY_VALUE(e)
   FROM UNNEST(ARRAY<INT32>[24, 31]) e
   WHERE e IN UNNEST(t.int64_array)
  ) IS NOT NULL
GROUP BY uid ORDER BY weight DESC;
--
QueryStmt
+-output_column_list=
| +-$groupby.uid#7 AS uid [INT64]
| +-$aggregate.weight#6 AS weight [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AnonymizedAggregateScan
    |   +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3], table=ArrayWithAnonymizationUid, column_index_list=[0, 2], alias="t")
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |       +-FunctionCall(ZetaSQL:$is_null(INT32) -> BOOL)
    |   |         +-SubqueryExpr
    |   |           +-type=INT32
    |   |           +-subquery_type=SCALAR
    |   |           +-parameter_list=
    |   |           | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
    |   |           +-subquery=
    |   |             +-ProjectScan
    |   |               +-column_list=[$aggregate.$agg1#5]
    |   |               +-input_scan=
    |   |                 +-AggregateScan
    |   |                   +-column_list=[$aggregate.$agg1#5]
    |   |                   +-input_scan=
    |   |                   | +-FilterScan
    |   |                   |   +-column_list=[$array.e#4]
    |   |                   |   +-input_scan=
    |   |                   |   | +-ArrayScan
    |   |                   |   |   +-column_list=[$array.e#4]
    |   |                   |   |   +-array_expr_list=
    |   |                   |   |   | +-Literal(type=ARRAY<INT32>, value=[24, 31], has_explicit_type=TRUE)
    |   |                   |   |   +-element_column_list=[$array.e#4]
    |   |                   |   +-filter_expr=
    |   |                   |     +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |   |                   |       +-Cast(INT32 -> INT64)
    |   |                   |       | +-ColumnRef(type=INT32, column=$array.e#4)
    |   |                   |       +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1, is_correlated=TRUE)
    |   |                   +-aggregate_list=
    |   |                     +-$agg1#5 :=
    |   |                       +-AggregateFunctionCall(ZetaSQL:any_value(INT32) -> INT32)
    |   |                         +-ColumnRef(type=INT32, column=$array.e#4)
    |   +-group_by_list=
    |   | +-uid#7 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#3)
    |   +-aggregate_list=
    |   | +-weight#6 :=
    |   |   +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
    |   |     +-Literal(type=INT64, value=0)
    |   |     +-Literal(type=INT64, value=1)
    |   +-anonymization_option_list=
    |     +-epsilon := Literal(type=DOUBLE, value=0.02, float_literal_id=1)
    |     +-delta := Literal(type=DOUBLE, value=2e-07, float_literal_id=2)
    |     +-kappa := Literal(type=INT64, value=100)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.weight#6)
        +-is_descending=TRUE


DEPRECATION WARNING:
Anonymization option kappa is deprecated, instead use max_groups_contributed [at 1:35]
SELECT WITH ANONYMIZATION OPTIONS (epsilon=0.02, delta=0.0000002, kappa=100)
                                  ^
[zetasql.DeprecationWarning] { kind: DEPRECATED_ANONYMIZATION_OPTION_KAPPA }

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.uid#7 AS uid [INT64]
| +-$aggregate.weight#6 AS weight [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    +-is_ordered=TRUE
    +-input_scan=
    | +-AnonymizedAggregateScan
    |   +-column_list=[$groupby.uid#7, $aggregate.weight#6]
    |   +-input_scan=
    |   | +-SampleScan
    |   |   +-column_list=[$aggregate.weight_partial#9, $groupby.uid_partial#10, $group_by.$uid#11]
    |   |   +-input_scan=
    |   |   | +-AggregateScan
    |   |   |   +-column_list=[$aggregate.weight_partial#9, $groupby.uid_partial#10, $group_by.$uid#11]
    |   |   |   +-input_scan=
    |   |   |   | +-FilterScan
    |   |   |   |   +-column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3]
    |   |   |   |   +-input_scan=
    |   |   |   |   | +-TableScan(column_list=ArrayWithAnonymizationUid.[int64_array#1, uid#3], table=ArrayWithAnonymizationUid, column_index_list=[0, 2], alias="t")
    |   |   |   |   +-filter_expr=
    |   |   |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |   |   |       +-FunctionCall(ZetaSQL:$is_null(INT32) -> BOOL)
    |   |   |   |         +-SubqueryExpr
    |   |   |   |           +-type=INT32
    |   |   |   |           +-subquery_type=SCALAR
    |   |   |   |           +-parameter_list=
    |   |   |   |           | +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1)
    |   |   |   |           +-subquery=
    |   |   |   |             +-ProjectScan
    |   |   |   |               +-column_list=[$aggregate.$agg1#5]
    |   |   |   |               +-input_scan=
    |   |   |   |                 +-AggregateScan
    |   |   |   |                   +-column_list=[$aggregate.$agg1#5]
    |   |   |   |                   +-input_scan=
    |   |   |   |                   | +-FilterScan
    |   |   |   |                   |   +-column_list=[$array.e#4]
    |   |   |   |                   |   +-input_scan=
    |   |   |   |                   |   | +-ArrayScan
    |   |   |   |                   |   |   +-column_list=[$array.e#4]
    |   |   |   |                   |   |   +-array_expr_list=
    |   |   |   |                   |   |   | +-Literal(type=ARRAY<INT32>, value=[24, 31], has_explicit_type=TRUE)
    |   |   |   |                   |   |   +-element_column_list=[$array.e#4]
    |   |   |   |                   |   +-filter_expr=
    |   |   |   |                   |     +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |   |   |   |                   |       +-Cast(INT32 -> INT64)
    |   |   |   |                   |       | +-ColumnRef(type=INT32, column=$array.e#4)
    |   |   |   |                   |       +-ColumnRef(type=ARRAY<INT64>, column=ArrayWithAnonymizationUid.int64_array#1, is_correlated=TRUE)
    |   |   |   |                   +-aggregate_list=
    |   |   |   |                     +-$agg1#5 :=
    |   |   |   |                       +-AggregateFunctionCall(ZetaSQL:any_value(INT32) -> INT32)
    |   |   |   |                         +-ColumnRef(type=INT32, column=$array.e#4)
    |   |   |   +-group_by_list=
    |   |   |   | +-uid_partial#10 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#3)
    |   |   |   | +-$uid#11 := ColumnRef(type=INT64, column=ArrayWithAnonymizationUid.uid#3)
    |   |   |   +-aggregate_list=
    |   |   |     +-weight_partial#9 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |   |   +-method="RESERVOIR"
    |   |   +-size=
    |   |   | +-Literal(type=INT64, value=100)
    |   |   +-unit=ROWS
    |   |   +-partition_by_list=
    |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#11)
    |   +-group_by_list=
    |   | +-uid#7 := ColumnRef(type=INT64, column=$groupby.uid_partial#10)
    |   +-aggregate_list=
    |   | +-weight#6 :=
    |   | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
    |   | |   +-ColumnRef(type=INT64, column=$aggregate.weight_partial#9)
    |   | |   +-Literal(type=INT64, value=0)
    |   | |   +-Literal(type=INT64, value=1)
    |   | +-$k_threshold_col#14 :=
    |   |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
    |   |     +-Literal(type=INT64, value=1)
    |   |     +-Literal(type=INT64, value=0)
    |   |     +-Literal(type=INT64, value=1)
    |   +-k_threshold_expr=
    |   | +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#14)
    |   +-anonymization_option_list=
    |     +-epsilon := Literal(type=DOUBLE, value=0.02, float_literal_id=1)
    |     +-delta := Literal(type=DOUBLE, value=2e-07, float_literal_id=2)
    |     +-kappa := Literal(type=INT64, value=100)
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
        | +-ColumnRef(type=INT64, column=$aggregate.weight#6)
        +-is_descending=TRUE
==

# Specify WITH ANONYMIZATION with an EXISTS subquery, and there is no 'uid'
# selected in the subquery.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT int64 FROM SimpleTypesWithAnonymizationUid)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#25 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-161
    +-column_list=[$aggregate.aggregation_count#25]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#25]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=111-160
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=111-160
        |           +-column_list=[SimpleTypesWithAnonymizationUid.int64#14]
        |           +-input_scan=
        |             +-TableScan(parse_location=129-160, column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-aggregation_count#25 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(SELECT int64 FROM SimpleTypesWithAnonymizationUid)

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 3:32]
WHERE EXISTS(SELECT int64 FROM SimpleTypesWithAnonymizationUid)
                               ^
==

# A simple select statement on a table with user id is allowed.
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT int64 FROM SimpleTypesWithAnonymizationUid
--
QueryStmt
+-output_column_list=
| +-SimpleTypesWithAnonymizationUid.int64#2 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[SimpleTypesWithAnonymizationUid.int64#2]
    +-input_scan=
      +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
==

# Nested expression subqueries. uid -> no_uid -> uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE 123 IN (
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#35 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-219
    +-column_list=[$aggregate.aggregation_count#35]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#35]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=117-218
        |       +-type=BOOL
        |       +-subquery_type=IN
        |       +-in_expr=
        |       | +-Literal(parse_location=104-107, type=INT64, value=123)
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=117-218
        |           +-column_list=[SimpleTypes.int64#14]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypes.int64#14]
        |               +-input_scan=
        |               | +-TableScan(parse_location=139-150, column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=168-217
        |                   +-type=BOOL
        |                   +-subquery_type=EXISTS
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=168-217
        |                       +-column_list=[ArrayWithAnonymizationUid.int64_array#32]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=192-217, column_list=[ArrayWithAnonymizationUid.int64_array#32], table=ArrayWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
          +-aggregation_count#35 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE @_p0_INT64 IN (
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))

Rewrite ERROR: Reading the table ArrayWithAnonymizationUid containing user data in expression subqueries is not allowed [at 6:42]
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))
                                         ^
==

# Nested expression subqueries. uid -> uid -> no_uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64_array
    FROM ArrayWithAnonymizationUid
    WHERE 123 IN (SELECT int64 FROM SimpleTypes))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#35 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-219
    +-column_list=[$aggregate.aggregation_count#35]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#35]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=116-218
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=116-218
        |           +-column_list=[ArrayWithAnonymizationUid.int64_array#13]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[ArrayWithAnonymizationUid.int64_array#13]
        |               +-input_scan=
        |               | +-TableScan(parse_location=144-169, column_list=[ArrayWithAnonymizationUid.int64_array#13], table=ArrayWithAnonymizationUid, column_index_list=[0])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=188-217
        |                   +-type=BOOL
        |                   +-subquery_type=IN
        |                   +-in_expr=
        |                   | +-Literal(parse_location=180-183, type=INT64, value=123)
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=188-217
        |                       +-column_list=[SimpleTypes.int64#17]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=206-217, column_list=[SimpleTypes.int64#17], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
          +-aggregation_count#35 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64_array
    FROM ArrayWithAnonymizationUid
    WHERE @_p0_INT64 IN (SELECT int64 FROM SimpleTypes))

Rewrite ERROR: Reading the table ArrayWithAnonymizationUid containing user data in expression subqueries is not allowed [at 5:10]
    FROM ArrayWithAnonymizationUid
         ^
==

# Nested expression subqueries. uid -> no_uid -> no_uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int32 FROM SimpleTypes))
--
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#51 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-198
    +-column_list=[$aggregate.aggregation_count#51]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#51]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=116-197
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=116-197
        |           +-column_list=[SimpleTypes.int64#14]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypes.int64#14]
        |               +-input_scan=
        |               | +-TableScan(parse_location=138-149, column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=167-196
        |                   +-type=BOOL
        |                   +-subquery_type=EXISTS
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=167-196
        |                       +-column_list=[SimpleTypes.int32#32]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=185-196, column_list=[SimpleTypes.int32#32], table=SimpleTypes, column_index_list=[0])
        +-aggregate_list=
          +-aggregation_count#51 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE EXISTS(SELECT int32 FROM SimpleTypes))

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#51 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-198
    +-column_list=[$aggregate.aggregation_count#51]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#51]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.aggregation_count_partial#54, $group_by.$uid#55]
        |   +-input_scan=
        |   | +-FilterScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#52]
        |   |   +-input_scan=
        |   |   | +-TableScan(parse_location=66-97, column_list=[SimpleTypesWithAnonymizationUid.uid#52], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-filter_expr=
        |   |     +-SubqueryExpr
        |   |       +-parse_location=116-197
        |   |       +-type=BOOL
        |   |       +-subquery_type=EXISTS
        |   |       +-subquery=
        |   |         +-ProjectScan
        |   |           +-parse_location=116-197
        |   |           +-column_list=[SimpleTypes.int64#14]
        |   |           +-input_scan=
        |   |             +-FilterScan
        |   |               +-column_list=[SimpleTypes.int64#14]
        |   |               +-input_scan=
        |   |               | +-TableScan(parse_location=138-149, column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |               +-filter_expr=
        |   |                 +-SubqueryExpr
        |   |                   +-parse_location=167-196
        |   |                   +-type=BOOL
        |   |                   +-subquery_type=EXISTS
        |   |                   +-subquery=
        |   |                     +-ProjectScan
        |   |                       +-parse_location=167-196
        |   |                       +-column_list=[SimpleTypes.int32#32]
        |   |                       +-input_scan=
        |   |                         +-TableScan(parse_location=185-196, column_list=[SimpleTypes.int32#32], table=SimpleTypes, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#55 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#52)
        |   +-aggregate_list=
        |     +-aggregation_count_partial#54 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-aggregation_count#51 :=
        | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.aggregation_count_partial#54)
        | +-$k_threshold_col#58 :=
        |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=INT64, value=0)
        |     +-Literal(type=INT64, value=1)
        +-k_threshold_expr=
          +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#58)
==

# Nested expression subqueries. uid -> uid -> uid
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE 123 IN (
    SELECT int64
    FROM SimpleTypesWithAnonymizationUid
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#28 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-239
    +-column_list=[$aggregate.aggregation_count#28]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#28]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-97, table=SimpleTypesWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=117-238
        |       +-type=BOOL
        |       +-subquery_type=IN
        |       +-in_expr=
        |       | +-Literal(parse_location=104-107, type=INT64, value=123)
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=117-238
        |           +-column_list=[SimpleTypesWithAnonymizationUid.int64#14]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypesWithAnonymizationUid.int64#14]
        |               +-input_scan=
        |               | +-TableScan(parse_location=139-170, column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=188-237
        |                   +-type=BOOL
        |                   +-subquery_type=EXISTS
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=188-237
        |                       +-column_list=[ArrayWithAnonymizationUid.int64_array#25]
        |                       +-input_scan=
        |                         +-TableScan(parse_location=212-237, column_list=[ArrayWithAnonymizationUid.int64_array#25], table=ArrayWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
          +-aggregation_count#28 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM SimpleTypesWithAnonymizationUid
WHERE @_p0_INT64 IN (
    SELECT int64
    FROM SimpleTypesWithAnonymizationUid
    WHERE EXISTS(SELECT int64_array FROM ArrayWithAnonymizationUid))

Rewrite ERROR: Reading the table SimpleTypesWithAnonymizationUid containing user data in expression subqueries is not allowed [at 5:10]
    FROM SimpleTypesWithAnonymizationUid
         ^
==

# Anonymization node in an expression subquery
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT int64
FROM SimpleTypes
WHERE 123 IN (
    SELECT WITH ANONYMIZATION ANON_SUM(int64)
    FROM SimpleTypesWithAnonymizationUid)
--
QueryStmt
+-output_column_list=
| +-SimpleTypes.int64#2 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-132
    +-column_list=[SimpleTypes.int64#2]
    +-input_scan=
      +-FilterScan
        +-column_list=[SimpleTypes.int64#2]
        +-input_scan=
        | +-TableScan(parse_location=18-29, column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=49-131
            +-type=BOOL
            +-subquery_type=IN
            +-in_expr=
            | +-Literal(parse_location=36-39, type=INT64, value=123)
            +-subquery=
              +-ProjectScan
                +-parse_location=49-131
                +-column_list=[$aggregate.$agg1#32]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.$agg1#32]
                    +-input_scan=
                    | +-TableScan(parse_location=100-131, column_list=[SimpleTypesWithAnonymizationUid.int64#21], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
                    +-aggregate_list=
                      +-$agg1#32 :=
                        +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
                          +-parse_location=75-83
                          +-ColumnRef(parse_location=84-89, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
[REPLACED_LITERALS]
SELECT int64
FROM SimpleTypes
WHERE @_p0_INT64 IN (
    SELECT WITH ANONYMIZATION ANON_SUM(int64)
    FROM SimpleTypesWithAnonymizationUid)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-SimpleTypes.int64#2 AS int64 [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-132
    +-column_list=[SimpleTypes.int64#2]
    +-input_scan=
      +-FilterScan
        +-column_list=[SimpleTypes.int64#2]
        +-input_scan=
        | +-TableScan(parse_location=18-29, column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-filter_expr=
          +-SubqueryExpr
            +-parse_location=49-131
            +-type=BOOL
            +-subquery_type=IN
            +-in_expr=
            | +-Literal(parse_location=36-39, type=INT64, value=123)
            +-subquery=
              +-ProjectScan
                +-parse_location=49-131
                +-column_list=[$aggregate.$agg1#32]
                +-input_scan=
                  +-AnonymizedAggregateScan
                    +-column_list=[$aggregate.$agg1#32]
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$aggregate.$agg1_partial#35, $group_by.$uid#36]
                    |   +-input_scan=
                    |   | +-TableScan(parse_location=100-131, column_list=SimpleTypesWithAnonymizationUid.[int64#21, uid#33], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
                    |   +-group_by_list=
                    |   | +-$uid#36 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#33)
                    |   +-aggregate_list=
                    |     +-$agg1_partial#35 :=
                    |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                    |         +-ColumnRef(parse_location=84-89, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
                    +-aggregate_list=
                    | +-$agg1#32 :=
                    | | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
                    | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#35)
                    | +-$k_threshold_col#39 :=
                    |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=INT64, value=0)
                    |     +-Literal(type=INT64, value=1)
                    +-k_threshold_expr=
                      +-ColumnRef(type=INT64, column=$anon.$k_threshold_col#39)
==

# Anonymization node in an expression subquery of another anonymization node
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(SELECT WITH ANONYMIZATION ANON_SUM(int64)
             FROM SimpleTypesWithAnonymizationUid)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#17 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-197
    +-column_list=[$aggregate.aggregation_count#17]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#17]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-91, table=ArrayWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=105-196
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=105-196
        |           +-column_list=[$aggregate.$agg1#16]
        |           +-input_scan=
        |             +-AnonymizedAggregateScan
        |               +-column_list=[$aggregate.$agg1#16]
        |               +-input_scan=
        |               | +-TableScan(parse_location=165-196, column_list=[SimpleTypesWithAnonymizationUid.int64#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |               +-aggregate_list=
        |                 +-$agg1#16 :=
        |                   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |                     +-parse_location=131-139
        |                     +-ColumnRef(parse_location=140-145, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#5)
        +-aggregate_list=
          +-aggregation_count#17 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(SELECT WITH ANONYMIZATION ANON_SUM(int64)
             FROM SimpleTypesWithAnonymizationUid)

Rewrite ERROR: Nested anonymization query is not implemented yet [at 3:14]
WHERE EXISTS(SELECT WITH ANONYMIZATION ANON_SUM(int64)
             ^
==

# Anonymization query -> simple query -> anonymization query
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE 123 IN (
        SELECT WITH ANONYMIZATION ANON_SUM(int64)
        FROM SimpleTypesWithAnonymizationUid))
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.aggregation_count#36 AS aggregation_count [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-259
    +-column_list=[$aggregate.aggregation_count#36]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.aggregation_count#36]
        +-input_scan=
        | +-FilterScan
        |   +-input_scan=
        |   | +-TableScan(parse_location=66-91, table=ArrayWithAnonymizationUid)
        |   +-filter_expr=
        |     +-SubqueryExpr
        |       +-parse_location=110-258
        |       +-type=BOOL
        |       +-subquery_type=EXISTS
        |       +-subquery=
        |         +-ProjectScan
        |           +-parse_location=110-258
        |           +-column_list=[SimpleTypes.int64#5]
        |           +-input_scan=
        |             +-FilterScan
        |               +-column_list=[SimpleTypes.int64#5]
        |               +-input_scan=
        |               | +-TableScan(parse_location=132-143, column_list=[SimpleTypes.int64#5], table=SimpleTypes, column_index_list=[1])
        |               +-filter_expr=
        |                 +-SubqueryExpr
        |                   +-parse_location=171-257
        |                   +-type=BOOL
        |                   +-subquery_type=IN
        |                   +-in_expr=
        |                   | +-Literal(parse_location=154-157, type=INT64, value=123)
        |                   +-subquery=
        |                     +-ProjectScan
        |                       +-parse_location=171-257
        |                       +-column_list=[$aggregate.$agg1#35]
        |                       +-input_scan=
        |                         +-AnonymizedAggregateScan
        |                           +-column_list=[$aggregate.$agg1#35]
        |                           +-input_scan=
        |                           | +-TableScan(parse_location=226-257, column_list=[SimpleTypesWithAnonymizationUid.int64#24], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |                           +-aggregate_list=
        |                             +-$agg1#35 :=
        |                               +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
        |                                 +-parse_location=197-205
        |                                 +-ColumnRef(parse_location=206-211, type=INT64, column=SimpleTypesWithAnonymizationUid.int64#24)
        +-aggregate_list=
          +-aggregation_count#36 := AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(0) INT64, optional(0) INT64) -> INT64)(parse_location=26-36)
[REPLACED_LITERALS]
SELECT WITH ANONYMIZATION ANON_COUNT(*) as aggregation_count
FROM ArrayWithAnonymizationUid
WHERE EXISTS(
    SELECT int64
    FROM SimpleTypes
    WHERE @_p0_INT64 IN (
        SELECT WITH ANONYMIZATION ANON_SUM(int64)
        FROM SimpleTypesWithAnonymizationUid))

Rewrite ERROR: Nested anonymization query is not implemented yet [at 7:9]
        SELECT WITH ANONYMIZATION ANON_SUM(int64)
        ^
==

# Count star counting unique users.
# We should use this count for k_threshold.
[language_features=NONE,+ANONYMIZATION,+TABLE_VALUED_FUNCTIONS,+TEMPLATE_FUNCTIONS,+CREATE_TABLE_FUNCTION,+ANONYMIZATION_THRESHOLDING]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select  1
from SimpleTypesWithAnonymizationUid where (
select with anonymization
anon_count(* CLAMPED BETWEEN 0 AND 1) as count1
from SimpleTypesWithAnonymizationUid) > 0;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#26 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#26]
    +-expr_list=
    | +-$col1#26 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-SubqueryExpr
            | +-type=INT64
            | +-subquery_type=SCALAR
            | +-subquery=
            |   +-ProjectScan
            |     +-column_list=[$aggregate.count1#25]
            |     +-input_scan=
            |       +-AnonymizedAggregateScan
            |         +-column_list=[$aggregate.count1#25]
            |         +-input_scan=
            |         | +-TableScan(table=SimpleTypesWithAnonymizationUid)
            |         +-aggregate_list=
            |           +-count1#25 :=
            |             +-AggregateFunctionCall(ZetaSQL:$anon_count_star(optional(1) INT64, optional(1) INT64) -> INT64)
            |               +-Literal(type=INT64, value=0)
            |               +-Literal(type=INT64, value=1)
            +-Literal(type=INT64, value=0)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#26 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#26]
    +-expr_list=
    | +-$col1#26 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            +-SubqueryExpr
            | +-type=INT64
            | +-subquery_type=SCALAR
            | +-subquery=
            |   +-ProjectScan
            |     +-column_list=[$aggregate.count1#25]
            |     +-input_scan=
            |       +-AnonymizedAggregateScan
            |         +-column_list=[$aggregate.count1#25]
            |         +-input_scan=
            |         | +-AggregateScan
            |         |   +-column_list=[$aggregate.count1_partial#29, $group_by.$uid#30]
            |         |   +-input_scan=
            |         |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#27], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
            |         |   +-group_by_list=
            |         |   | +-$uid#30 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#27)
            |         |   +-aggregate_list=
            |         |     +-count1_partial#29 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |         +-aggregate_list=
            |         | +-count1#25 :=
            |         |   +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(1) INT64, optional(1) INT64) -> INT64)
            |         |     +-ColumnRef(type=INT64, column=$aggregate.count1_partial#29)
            |         |     +-Literal(type=INT64, value=0)
            |         |     +-Literal(type=INT64, value=1)
            |         +-k_threshold_expr=
            |           +-ColumnRef(type=INT64, column=$aggregate.count1#25)
            +-Literal(type=INT64, value=0)
