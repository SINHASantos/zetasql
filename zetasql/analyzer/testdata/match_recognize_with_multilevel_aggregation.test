[default language_features=MAXIMUM,+MATCH_RECOGNIZE,+MULTILEVEL_AGGREGATION,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ANALYTIC_FUNCTIONS,+QUALIFY,+GROUPING_BUILTIN,+GROUP_BY_STRUCT]
[default show_sqlbuilder_output]

SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  {{PARTITION BY int64, int32|}}
  ORDER BY string
  MEASURES
    MAX(int32 + SUM(int32 + int64 + MIN(double) GROUP BY int64) GROUP BY int32) AS max_agg,
    ARRAY_AGG(string GROUP BY string ORDER BY MIN(double)) AS array_agg
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--

ALTERNATION GROUP: PARTITION BY int64, int32
--
QueryStmt
+-output_column_list=
| +-$partitionby.int64#20 AS int64 [INT64]
| +-$partitionby.int32#21 AS int32 [INT32]
| +-$match_recognize.max_agg#35 AS max_agg [DOUBLE]
| +-$match_recognize.array_agg#41 AS array_agg [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$partitionby.int64#20, $partitionby.int32#21, $match_recognize.max_agg#35, $match_recognize.array_agg#41]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$partitionby.int64#20, $partitionby.int32#21, $match_recognize.max_agg#35, $match_recognize.array_agg#41]
        +-expr_list=
        | +-max_agg#35 := ColumnRef(type=DOUBLE, column=$aggregate.$agg1#34)
        | +-array_agg#41 := ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg2#40)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$partitionby.int64#20, $partitionby.int32#21, $aggregate.$agg1#34, $aggregate.$agg2#40]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, SimpleTypes.double#9, $partitionby.int64#20, $partitionby.int32#21]
            |   +-expr_list=
            |   | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |   | +-int32#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |   +-input_scan=
            |     +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-partition_by=
            |   | +-WindowPartitioning
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$partitionby.int64#20)
            |   |     +-ColumnRef(type=INT32, column=$partitionby.int32#21)
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=$partitionby.int64#20)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=$partitionby.int32#21)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#34 :=
            |     | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |     +-Cast(INT32 -> DOUBLE)
            |     |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#27)
            |     |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#33)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |     |   | +-$groupbymod#26 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     |   | +-$groupbymod#27 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#33 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |     |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |           +-Cast(INT64 -> DOUBLE)
            |     |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |     |           |   +-Cast(INT32 -> INT64)
            |     |           |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#30)
            |     |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#31)
            |     |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#32)
            |     |         +-group_by_list=
            |     |         | +-$groupbymod#28 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |     |         | +-$groupbymod#29 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     |         | +-$groupbymod#30 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            |     |         | +-$groupbymod#31 := ColumnRef(type=INT64, column=$partitionby.int64#20)
            |     |         +-group_by_aggregate_list=
            |     |           +-$agg1#32 :=
            |     |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |     |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |     +-$agg2#40 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
            |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#38)
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#39)
            |         +-group_by_list=
            |         | +-$groupbymod#36 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |         | +-$groupbymod#37 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |         | +-$groupbymod#38 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
            |         +-group_by_aggregate_list=
            |           +-$agg1#39 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#22
            +-match_row_number_column=$match_recognize.$match_row_number#23
            +-classifier_column=$match_recognize.$classifier#24

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_12.a_6 AS int64,
  matchrecognizescan_12.a_7 AS int32,
  matchrecognizescan_12.a_9 AS max_agg,
  matchrecognizescan_12.a_10 AS array_agg
FROM
  (
    SELECT
      simpletypes_5.a_1 AS a_1,
      simpletypes_5.a_2 AS a_2,
      simpletypes_5.a_3 AS a_3,
      simpletypes_5.a_4 AS a_4,
      simpletypes_5.a_2 AS a_6,
      simpletypes_5.a_1 AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3,
          SimpleTypes.double AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
  ) AS projectscan_8 MATCH_RECOGNIZE(
    PARTITION BY projectscan_8.a_6, projectscan_8.a_7
    ORDER BY projectscan_8.a_3
    MEASURES
      MAX(CAST(projectscan_8.a_7 AS DOUBLE) + (SUM(CAST(CAST(projectscan_8.a_7 AS INT64) + (projectscan_8.a_6) AS DOUBLE) +
          (MIN(projectscan_8.a_4))
          GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7, projectscan_8.a_6))
        GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7) AS a_9,
      ARRAY_AGG(projectscan_8.a_3
        GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_3
        ORDER BY MIN(projectscan_8.a_4)) AS a_10,
      MATCH_NUMBER() AS a_11
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(projectscan_8.a_6) < 10,
      B AS(projectscan_8.a_7) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_12;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> SELECT
     simpletypes_5.a_1 AS a_1,
     simpletypes_5.a_2 AS a_2,
     simpletypes_5.a_3 AS a_3,
     simpletypes_5.a_4 AS a_4,
     simpletypes_5.a_2 AS a_6,
     simpletypes_5.a_1 AS a_7
|> AS projectscan_8
|> MATCH_RECOGNIZE(
     PARTITION BY projectscan_8.a_6, projectscan_8.a_7
     ORDER BY projectscan_8.a_3
     MEASURES
       MAX(CAST(projectscan_8.a_7 AS DOUBLE) + (SUM(CAST(CAST(projectscan_8.a_7 AS INT64) + (projectscan_8.a_6) AS DOUBLE) +
           (MIN(projectscan_8.a_4))
           GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7, projectscan_8.a_6))
         GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7) AS a_9,
       ARRAY_AGG(projectscan_8.a_3
         GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_3
         ORDER BY MIN(projectscan_8.a_4)) AS a_10,
       MATCH_NUMBER() AS a_11
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(projectscan_8.a_6) < 10,
       B AS(projectscan_8.a_7) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_12
|> SELECT
     matchrecognizescan_12.a_6 AS int64,
     matchrecognizescan_12.a_7 AS int32,
     matchrecognizescan_12.a_9 AS max_agg,
     matchrecognizescan_12.a_10 AS array_agg;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$match_recognize.max_agg#29 AS max_agg [DOUBLE]
| +-$match_recognize.array_agg#33 AS array_agg [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[max_agg#29, array_agg#33]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[max_agg#29, array_agg#33]
        +-expr_list=
        | +-max_agg#29 := ColumnRef(type=DOUBLE, column=$aggregate.$agg1#28)
        | +-array_agg#33 := ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg2#32)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=$aggregate.[$agg1#28, $agg2#32]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#28 :=
            |     | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |     +-Cast(INT32 -> DOUBLE)
            |     |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#23)
            |     |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#23 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#27 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |     |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |           +-Cast(INT64 -> DOUBLE)
            |     |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |     |           |   +-Cast(INT32 -> INT64)
            |     |           |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#24)
            |     |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#25)
            |     |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#26)
            |     |         +-group_by_list=
            |     |         | +-$groupbymod#24 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     |         | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |     |         +-group_by_aggregate_list=
            |     |           +-$agg1#26 :=
            |     |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |     |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |     +-$agg2#32 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
            |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#30)
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#31)
            |         +-group_by_list=
            |         | +-$groupbymod#30 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
            |         +-group_by_aggregate_list=
            |           +-$agg1#31 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_9.a_6 AS max_agg,
  matchrecognizescan_9.a_7 AS array_agg
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.string AS a_3,
      SimpleTypes.double AS a_4
    FROM
      SimpleTypes
  ) AS simpletypes_5 MATCH_RECOGNIZE(
    ORDER BY simpletypes_5.a_3
    MEASURES
      MAX(CAST(simpletypes_5.a_1 AS DOUBLE) + (SUM(CAST(CAST(simpletypes_5.a_1 AS INT64) + (simpletypes_5.a_2) AS DOUBLE) +
          (MIN(simpletypes_5.a_4))
          GROUP BY simpletypes_5.a_1, simpletypes_5.a_2))
        GROUP BY simpletypes_5.a_1) AS a_6,
      ARRAY_AGG(simpletypes_5.a_3
        GROUP BY simpletypes_5.a_3
        ORDER BY MIN(simpletypes_5.a_4)) AS a_7,
      MATCH_NUMBER() AS a_8
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(simpletypes_5.a_2) < 10,
      B AS(simpletypes_5.a_1) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_9;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_5.a_3
     MEASURES
       MAX(CAST(simpletypes_5.a_1 AS DOUBLE) + (SUM(CAST(CAST(simpletypes_5.a_1 AS INT64) + (simpletypes_5.a_2) AS DOUBLE) +
           (MIN(simpletypes_5.a_4))
           GROUP BY simpletypes_5.a_1, simpletypes_5.a_2))
         GROUP BY simpletypes_5.a_1) AS a_6,
       ARRAY_AGG(simpletypes_5.a_3
         GROUP BY simpletypes_5.a_3
         ORDER BY MIN(simpletypes_5.a_4)) AS a_7,
       MATCH_NUMBER() AS a_8
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(simpletypes_5.a_2) < 10,
       B AS(simpletypes_5.a_1) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_9
|> SELECT
     matchrecognizescan_9.a_6 AS max_agg,
     matchrecognizescan_9.a_7 AS array_agg;
==

# Adds pattern variables
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  {{PARTITION BY int64, int32|}}
  ORDER BY string
  MEASURES
    MAX(A.int32 + SUM(A.int32 + A.int64 + MIN(A.double) GROUP BY A.int64) GROUP BY A.int32) +
    MAX(B.int32 + SUM(B.int32 + B.int64 + MIN(B.double) GROUP BY B.int64) GROUP BY B.int32) +
    MAX(int32 + SUM(int32 + int64 + MIN(double) GROUP BY int64) GROUP BY int32) AS m
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
ALTERNATION GROUP: PARTITION BY int64, int32
--
QueryStmt
+-output_column_list=
| +-$partitionby.int64#20 AS int64 [INT64]
| +-$partitionby.int32#21 AS int32 [INT32]
| +-$match_recognize.m#55 AS m [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$partitionby.int64#20, $partitionby.int32#21, $match_recognize.m#55]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$partitionby.int64#20, $partitionby.int32#21, $match_recognize.m#55]
        +-expr_list=
        | +-m#55 :=
        |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |     | +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#34)
        |     | +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#44)
        |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg3#54)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$partitionby.int64#20, $partitionby.int32#21, $aggregate.$agg3#54, $aggregate.$agg1#34, $aggregate.$agg2#44]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, SimpleTypes.double#9, $partitionby.int64#20, $partitionby.int32#21]
            |   +-expr_list=
            |   | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |   | +-int32#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |   +-input_scan=
            |     +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-partition_by=
            |   | +-WindowPartitioning
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$partitionby.int64#20)
            |   |     +-ColumnRef(type=INT32, column=$partitionby.int32#21)
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=$partitionby.int64#20)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=$partitionby.int32#21)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            | | +-aggregate_list=
            | |   +-$agg3#54 :=
            | |     +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            | |       +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |         +-Cast(INT32 -> DOUBLE)
            | |         | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#47)
            | |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#53)
            | |       +-group_by_list=
            | |       | +-$groupbymod#45 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |       | +-$groupbymod#46 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |       | +-$groupbymod#47 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            | |       +-group_by_aggregate_list=
            | |         +-$agg1#53 :=
            | |           +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            | |             +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |               +-Cast(INT64 -> DOUBLE)
            | |               | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | |               |   +-Cast(INT32 -> INT64)
            | |               |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#50)
            | |               |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#51)
            | |               +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#52)
            | |             +-group_by_list=
            | |             | +-$groupbymod#48 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |             | +-$groupbymod#49 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |             | +-$groupbymod#50 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            | |             | +-$groupbymod#51 := ColumnRef(type=INT64, column=$partitionby.int64#20)
            | |             +-group_by_aggregate_list=
            | |               +-$agg1#52 :=
            | |                 +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            | |                   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            | +-MeasureGroup
            | | +-pattern_variable_ref=
            | | | +-MatchRecognizePatternVariableRef(name="A")
            | | +-aggregate_list=
            | |   +-$agg1#34 :=
            | |     +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            | |       +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |         +-Cast(INT32 -> DOUBLE)
            | |         | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#27)
            | |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#33)
            | |       +-group_by_list=
            | |       | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |       | +-$groupbymod#26 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |       | +-$groupbymod#27 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            | |       +-group_by_aggregate_list=
            | |         +-$agg1#33 :=
            | |           +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            | |             +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |               +-Cast(INT64 -> DOUBLE)
            | |               | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | |               |   +-Cast(INT32 -> INT64)
            | |               |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#30)
            | |               |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#31)
            | |               +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#32)
            | |             +-group_by_list=
            | |             | +-$groupbymod#28 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |             | +-$groupbymod#29 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |             | +-$groupbymod#30 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            | |             | +-$groupbymod#31 := ColumnRef(type=INT64, column=$partitionby.int64#20)
            | |             +-group_by_aggregate_list=
            | |               +-$agg1#32 :=
            | |                 +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            | |                   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="B")
            |   +-aggregate_list=
            |     +-$agg2#44 :=
            |       +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |           +-Cast(INT32 -> DOUBLE)
            |           | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#37)
            |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#43)
            |         +-group_by_list=
            |         | +-$groupbymod#35 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |         | +-$groupbymod#36 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |         | +-$groupbymod#37 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            |         +-group_by_aggregate_list=
            |           +-$agg1#43 :=
            |             +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |               +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |                 +-Cast(INT64 -> DOUBLE)
            |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |                 |   +-Cast(INT32 -> INT64)
            |                 |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#40)
            |                 |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#41)
            |                 +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#42)
            |               +-group_by_list=
            |               | +-$groupbymod#38 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |               | +-$groupbymod#39 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |               | +-$groupbymod#40 := ColumnRef(type=INT32, column=$partitionby.int32#21)
            |               | +-$groupbymod#41 := ColumnRef(type=INT64, column=$partitionby.int64#20)
            |               +-group_by_aggregate_list=
            |                 +-$agg1#42 :=
            |                   +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |                     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#22
            +-match_row_number_column=$match_recognize.$match_row_number#23
            +-classifier_column=$match_recognize.$classifier#24

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_13.a_6 AS int64,
  matchrecognizescan_13.a_7 AS int32,
  ((matchrecognizescan_13.a_10) + (matchrecognizescan_13.a_11)) + (matchrecognizescan_13.a_9) AS m
FROM
  (
    SELECT
      simpletypes_5.a_1 AS a_1,
      simpletypes_5.a_2 AS a_2,
      simpletypes_5.a_3 AS a_3,
      simpletypes_5.a_4 AS a_4,
      simpletypes_5.a_2 AS a_6,
      simpletypes_5.a_1 AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3,
          SimpleTypes.double AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
  ) AS projectscan_8 MATCH_RECOGNIZE(
    PARTITION BY projectscan_8.a_6, projectscan_8.a_7
    ORDER BY projectscan_8.a_3
    MEASURES
      MAX(CAST(projectscan_8.a_7 AS DOUBLE) + (SUM(CAST(CAST(projectscan_8.a_7 AS INT64) + (projectscan_8.a_6) AS DOUBLE) +
          (MIN(projectscan_8.a_4))
          GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7, projectscan_8.a_6))
        GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7) AS a_9,
      MAX(CAST(A.a_7 AS DOUBLE) + (SUM(CAST(CAST(A.a_7 AS INT64) + (A.a_6) AS DOUBLE) + (MIN(A.a_4))
          GROUP BY A.a_2, A.a_1, A.a_7, A.a_6))
        GROUP BY A.a_2, A.a_1, A.a_7) AS a_10,
      MAX(CAST(B.a_7 AS DOUBLE) + (SUM(CAST(CAST(B.a_7 AS INT64) + (B.a_6) AS DOUBLE) + (MIN(B.a_4))
          GROUP BY B.a_2, B.a_1, B.a_7, B.a_6))
        GROUP BY B.a_2, B.a_1, B.a_7) AS a_11,
      MATCH_NUMBER() AS a_12
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(projectscan_8.a_6) < 10,
      B AS(projectscan_8.a_7) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_13;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> SELECT
     simpletypes_5.a_1 AS a_1,
     simpletypes_5.a_2 AS a_2,
     simpletypes_5.a_3 AS a_3,
     simpletypes_5.a_4 AS a_4,
     simpletypes_5.a_2 AS a_6,
     simpletypes_5.a_1 AS a_7
|> AS projectscan_8
|> MATCH_RECOGNIZE(
     PARTITION BY projectscan_8.a_6, projectscan_8.a_7
     ORDER BY projectscan_8.a_3
     MEASURES
       MAX(CAST(projectscan_8.a_7 AS DOUBLE) + (SUM(CAST(CAST(projectscan_8.a_7 AS INT64) + (projectscan_8.a_6) AS DOUBLE) +
           (MIN(projectscan_8.a_4))
           GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7, projectscan_8.a_6))
         GROUP BY projectscan_8.a_2, projectscan_8.a_1, projectscan_8.a_7) AS a_9,
       MAX(CAST(A.a_7 AS DOUBLE) + (SUM(CAST(CAST(A.a_7 AS INT64) + (A.a_6) AS DOUBLE) + (MIN(A.a_4))
           GROUP BY A.a_2, A.a_1, A.a_7, A.a_6))
         GROUP BY A.a_2, A.a_1, A.a_7) AS a_10,
       MAX(CAST(B.a_7 AS DOUBLE) + (SUM(CAST(CAST(B.a_7 AS INT64) + (B.a_6) AS DOUBLE) + (MIN(B.a_4))
           GROUP BY B.a_2, B.a_1, B.a_7, B.a_6))
         GROUP BY B.a_2, B.a_1, B.a_7) AS a_11,
       MATCH_NUMBER() AS a_12
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(projectscan_8.a_6) < 10,
       B AS(projectscan_8.a_7) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_13
|> SELECT
     matchrecognizescan_13.a_6 AS int64,
     matchrecognizescan_13.a_7 AS int32,
     ((matchrecognizescan_13.a_10) + (matchrecognizescan_13.a_11)) + (matchrecognizescan_13.a_9) AS m;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m#41 AS m [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m#41]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m#41]
        +-expr_list=
        | +-m#41 :=
        |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |     | +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#28)
        |     | +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#34)
        |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg3#40)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=$aggregate.[$agg3#40, $agg1#28, $agg2#34]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            | | +-aggregate_list=
            | |   +-$agg3#40 :=
            | |     +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            | |       +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |         +-Cast(INT32 -> DOUBLE)
            | |         | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#35)
            | |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#39)
            | |       +-group_by_list=
            | |       | +-$groupbymod#35 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |       +-group_by_aggregate_list=
            | |         +-$agg1#39 :=
            | |           +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            | |             +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |               +-Cast(INT64 -> DOUBLE)
            | |               | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | |               |   +-Cast(INT32 -> INT64)
            | |               |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#36)
            | |               |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#37)
            | |               +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#38)
            | |             +-group_by_list=
            | |             | +-$groupbymod#36 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |             | +-$groupbymod#37 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |             +-group_by_aggregate_list=
            | |               +-$agg1#38 :=
            | |                 +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            | |                   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            | +-MeasureGroup
            | | +-pattern_variable_ref=
            | | | +-MatchRecognizePatternVariableRef(name="A")
            | | +-aggregate_list=
            | |   +-$agg1#28 :=
            | |     +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            | |       +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |         +-Cast(INT32 -> DOUBLE)
            | |         | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#23)
            | |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
            | |       +-group_by_list=
            | |       | +-$groupbymod#23 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |       +-group_by_aggregate_list=
            | |         +-$agg1#27 :=
            | |           +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            | |             +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |               +-Cast(INT64 -> DOUBLE)
            | |               | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | |               |   +-Cast(INT32 -> INT64)
            | |               |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#24)
            | |               |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#25)
            | |               +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#26)
            | |             +-group_by_list=
            | |             | +-$groupbymod#24 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            | |             | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |             +-group_by_aggregate_list=
            | |               +-$agg1#26 :=
            | |                 +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            | |                   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="B")
            |   +-aggregate_list=
            |     +-$agg2#34 :=
            |       +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |           +-Cast(INT32 -> DOUBLE)
            |           | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#29)
            |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#33)
            |         +-group_by_list=
            |         | +-$groupbymod#29 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |         +-group_by_aggregate_list=
            |           +-$agg1#33 :=
            |             +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |               +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |                 +-Cast(INT64 -> DOUBLE)
            |                 | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |                 |   +-Cast(INT32 -> INT64)
            |                 |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#30)
            |                 |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#31)
            |                 +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#32)
            |               +-group_by_list=
            |               | +-$groupbymod#30 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |               | +-$groupbymod#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |               +-group_by_aggregate_list=
            |                 +-$agg1#32 :=
            |                   +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |                     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ((matchrecognizescan_10.a_7) + (matchrecognizescan_10.a_8)) + (matchrecognizescan_10.a_6) AS m
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.string AS a_3,
      SimpleTypes.double AS a_4
    FROM
      SimpleTypes
  ) AS simpletypes_5 MATCH_RECOGNIZE(
    ORDER BY simpletypes_5.a_3
    MEASURES
      MAX(CAST(simpletypes_5.a_1 AS DOUBLE) + (SUM(CAST(CAST(simpletypes_5.a_1 AS INT64) + (simpletypes_5.a_2) AS DOUBLE) +
          (MIN(simpletypes_5.a_4))
          GROUP BY simpletypes_5.a_1, simpletypes_5.a_2))
        GROUP BY simpletypes_5.a_1) AS a_6,
      MAX(CAST(A.a_1 AS DOUBLE) + (SUM(CAST(CAST(A.a_1 AS INT64) + (A.a_2) AS DOUBLE) + (MIN(A.a_4))
          GROUP BY A.a_1, A.a_2))
        GROUP BY A.a_1) AS a_7,
      MAX(CAST(B.a_1 AS DOUBLE) + (SUM(CAST(CAST(B.a_1 AS INT64) + (B.a_2) AS DOUBLE) + (MIN(B.a_4))
          GROUP BY B.a_1, B.a_2))
        GROUP BY B.a_1) AS a_8,
      MATCH_NUMBER() AS a_9
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(simpletypes_5.a_2) < 10,
      B AS(simpletypes_5.a_1) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_10;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_5.a_3
     MEASURES
       MAX(CAST(simpletypes_5.a_1 AS DOUBLE) + (SUM(CAST(CAST(simpletypes_5.a_1 AS INT64) + (simpletypes_5.a_2) AS DOUBLE) +
           (MIN(simpletypes_5.a_4))
           GROUP BY simpletypes_5.a_1, simpletypes_5.a_2))
         GROUP BY simpletypes_5.a_1) AS a_6,
       MAX(CAST(A.a_1 AS DOUBLE) + (SUM(CAST(CAST(A.a_1 AS INT64) + (A.a_2) AS DOUBLE) + (MIN(A.a_4))
           GROUP BY A.a_1, A.a_2))
         GROUP BY A.a_1) AS a_7,
       MAX(CAST(B.a_1 AS DOUBLE) + (SUM(CAST(CAST(B.a_1 AS INT64) + (B.a_2) AS DOUBLE) + (MIN(B.a_4))
           GROUP BY B.a_1, B.a_2))
         GROUP BY B.a_1) AS a_8,
       MATCH_NUMBER() AS a_9
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(simpletypes_5.a_2) < 10,
       B AS(simpletypes_5.a_1) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_10
|> SELECT
     ((matchrecognizescan_10.a_7) + (matchrecognizescan_10.a_8)) + (matchrecognizescan_10.a_6) AS m;
==

# Multilevel aggs with pattern variable references detects conflicting vars,
# including in arguments
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
    MAX(double + SUM(double + int64 + MIN(A.int32) GROUP BY int64) GROUP BY double) AS max_agg
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:43]
    MAX(double + SUM(double + int64 + MIN(A.int32) GROUP BY int64) GROUP BY d...
                                          ^
==

# Multilevel aggs with pattern variable references detects conflicting vars,
# including in ORDER BY, even when the args are constants and do not tell the
# scope.
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
      {{ANY_VALUE(ARRAY_AGG(1 ORDER BY double) GROUP BY A.int64) AS m,|}}
      ANY_VALUE(ARRAY_AGG(1 ORDER BY A.double) GROUP BY int64) AS m2
  PATTERN (A)
  DEFINE
    A AS int64 < 10
)
--
ALTERNATION GROUP: ANY_VALUE(ARRAY_AGG(1 ORDER BY double) GROUP BY A.int64) AS m,
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:38]
      ANY_VALUE(ARRAY_AGG(1 ORDER BY double) GROUP BY A.int64) AS m,
                                     ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 6:38]
      ANY_VALUE(ARRAY_AGG(1 ORDER BY A.double) GROUP BY int64) AS m2
                                     ^
==

# Modifiers also detects conflict with args
SELECT * FROM SimpleTypes t
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
      ANY_VALUE(ARRAY_AGG({{A.|t.|}}double ORDER BY {{A.|t.|}}double) GROUP BY {{A.|t.|}}int64) AS m
  PATTERN (A)
  DEFINE
    A AS int64 < 10
)
--
ALTERNATION GROUP: A.,A.,A.
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m#26 AS m [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m#26]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m#26]
        +-expr_list=
        | +-m#26 := ColumnRef(type=ARRAY<DOUBLE>, column=$aggregate.$agg1#25)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#25]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[1, 4, 8], alias="t")
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |       +-Literal(type=INT64, value=10)
            +-pattern=
            | +-MatchRecognizePatternVariableRef(name="A")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-aggregate_list=
            |     +-$agg1#25 :=
            |       +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<DOUBLE>) -> ARRAY<DOUBLE>)
            |         +-ColumnRef(type=ARRAY<DOUBLE>, column=$aggregate.$agg1#24)
            |         +-group_by_list=
            |         | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |         +-group_by_aggregate_list=
            |           +-$agg1#24 :=
            |             +-AggregateFunctionCall(ZetaSQL:array_agg(DOUBLE) -> ARRAY<DOUBLE>)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_7.a_5 AS m
FROM
  (
    SELECT
      SimpleTypes.int64 AS a_1,
      SimpleTypes.string AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4 MATCH_RECOGNIZE(
    ORDER BY simpletypes_4.a_2
    MEASURES
      ANY_VALUE(ARRAY_AGG(A.a_3
          ORDER BY A.a_3)
        GROUP BY A.a_1) AS a_5,
      MATCH_NUMBER() AS a_6
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN (A)
    DEFINE
      A AS(simpletypes_4.a_1) < 10
  )
  AS matchrecognizescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.string AS a_2,
     SimpleTypes.double AS a_3
|> AS simpletypes_4
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_4.a_2
     MEASURES
       ANY_VALUE(ARRAY_AGG(A.a_3
           ORDER BY A.a_3)
         GROUP BY A.a_1) AS a_5,
       MATCH_NUMBER() AS a_6
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (A)
     DEFINE
       A AS(simpletypes_4.a_1) < 10
   )
   AS matchrecognizescan_7
|> SELECT
     matchrecognizescan_7.a_5 AS m;
--
ALTERNATION GROUP: A.,A.,t.
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:27]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY A.double) GROUP BY t.int64) AS m
                          ^
--
ALTERNATION GROUP: A.,A.,
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:27]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY A.double) GROUP BY int64) AS m
                          ^
--
ALTERNATION GROUP: A.,t.,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:45]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY t.double) GROUP BY A.int64) AS m
                                            ^
--
ALTERNATION GROUP: A.,t.,t.
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:27]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY t.double) GROUP BY t.int64) AS m
                          ^
--
ALTERNATION GROUP: A.,t.,
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:27]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY t.double) GROUP BY int64) AS m
                          ^
--
ALTERNATION GROUP: A.,,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:45]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY double) GROUP BY A.int64) AS m
                                            ^
--
ALTERNATION GROUP: A.,,t.
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:27]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY double) GROUP BY t.int64) AS m
                          ^
--
ALTERNATION GROUP: A.,,
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:27]
      ANY_VALUE(ARRAY_AGG(A.double ORDER BY double) GROUP BY int64) AS m
                          ^
--
ALTERNATION GROUP: t.,A.,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:27]
      ANY_VALUE(ARRAY_AGG(t.double ORDER BY A.double) GROUP BY A.int64) AS m
                          ^
--
ALTERNATION GROUP: t.,A.,t.
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:45]
      ANY_VALUE(ARRAY_AGG(t.double ORDER BY A.double) GROUP BY t.int64) AS m
                                            ^
--
ALTERNATION GROUP: t.,A.,
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:45]
      ANY_VALUE(ARRAY_AGG(t.double ORDER BY A.double) GROUP BY int64) AS m
                                            ^
--
ALTERNATION GROUP: t.,t.,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:27]
      ANY_VALUE(ARRAY_AGG(t.double ORDER BY t.double) GROUP BY A.int64) AS m
                          ^
--
ALTERNATION GROUPS:
    t.,t.,t.
    t.,t.,
    t.,,t.
    t.,,
    t.,t.
    t.,
    t.
    <empty>
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m#26 AS m [ARRAY<DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m#26]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m#26]
        +-expr_list=
        | +-m#26 := ColumnRef(type=ARRAY<DOUBLE>, column=$aggregate.$agg1#25)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#25]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[1, 4, 8], alias="t")
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |       +-Literal(type=INT64, value=10)
            +-pattern=
            | +-MatchRecognizePatternVariableRef(name="A")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#25 :=
            |       +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<DOUBLE>) -> ARRAY<DOUBLE>)
            |         +-ColumnRef(type=ARRAY<DOUBLE>, column=$aggregate.$agg1#24)
            |         +-group_by_list=
            |         | +-$groupbymod#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |         +-group_by_aggregate_list=
            |           +-$agg1#24 :=
            |             +-AggregateFunctionCall(ZetaSQL:array_agg(DOUBLE) -> ARRAY<DOUBLE>)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_7.a_5 AS m
FROM
  (
    SELECT
      SimpleTypes.int64 AS a_1,
      SimpleTypes.string AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4 MATCH_RECOGNIZE(
    ORDER BY simpletypes_4.a_2
    MEASURES
      ANY_VALUE(ARRAY_AGG(simpletypes_4.a_3
          ORDER BY simpletypes_4.a_3)
        GROUP BY simpletypes_4.a_1) AS a_5,
      MATCH_NUMBER() AS a_6
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN (A)
    DEFINE
      A AS(simpletypes_4.a_1) < 10
  )
  AS matchrecognizescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.string AS a_2,
     SimpleTypes.double AS a_3
|> AS simpletypes_4
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_4.a_2
     MEASURES
       ANY_VALUE(ARRAY_AGG(simpletypes_4.a_3
           ORDER BY simpletypes_4.a_3)
         GROUP BY simpletypes_4.a_1) AS a_5,
       MATCH_NUMBER() AS a_6
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (A)
     DEFINE
       A AS(simpletypes_4.a_1) < 10
   )
   AS matchrecognizescan_7
|> SELECT
     matchrecognizescan_7.a_5 AS m;
--
ALTERNATION GROUP: t.,,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:27]
      ANY_VALUE(ARRAY_AGG(t.double ORDER BY double) GROUP BY A.int64) AS m
                          ^
--
ALTERNATION GROUP: A.,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:27]
      ANY_VALUE(ARRAY_AGG(double ORDER BY A.double) GROUP BY A.int64) AS m
                          ^
--
ALTERNATION GROUP: A.,t.
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:43]
      ANY_VALUE(ARRAY_AGG(double ORDER BY A.double) GROUP BY t.int64) AS m
                                          ^
--
ALTERNATION GROUP: A.,
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:43]
      ANY_VALUE(ARRAY_AGG(double ORDER BY A.double) GROUP BY int64) AS m
                                          ^
--
ALTERNATION GROUP: t.,A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:27]
      ANY_VALUE(ARRAY_AGG(double ORDER BY t.double) GROUP BY A.int64) AS m
                          ^
--
ALTERNATION GROUP: A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:27]
      ANY_VALUE(ARRAY_AGG(double ORDER BY double) GROUP BY A.int64) AS m
                          ^
==

# Pattern variables mixed on separate nested aggregations
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
    MAX(MIN({{A.|}}int64) + MIN(B.double) GROUP BY {{A.|}}int32) AS m1
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
ALTERNATION GROUP: A.,A.
--
ERROR: Column access ranges over pattern variable B in an expression that already ranges over a pattern variable A [at 5:28]
    MAX(MIN(A.int64) + MIN(B.double) GROUP BY A.int32) AS m1
                           ^
--
ALTERNATION GROUP: A.,
--
ERROR: Column access ranges over pattern variable A in an expression that already ranges over a all input rows [at 5:13]
    MAX(MIN(A.int64) + MIN(B.double) GROUP BY int32) AS m1
            ^
--
ALTERNATION GROUP: A.
--
ERROR: Column access ranges over all input rows in an expression that already ranges over a pattern variable A [at 5:13]
    MAX(MIN(int64) + MIN(B.double) GROUP BY A.int32) AS m1
            ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Column access ranges over pattern variable B in an expression that already ranges over a all input rows [at 5:26]
    MAX(MIN(int64) + MIN(B.double) GROUP BY int32) AS m1
                         ^
==

# Partition by with a subquery
WITH t AS (SELECT 1 AS x, 2 AS y)
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  PARTITION BY int32 IN (SELECT x + int32 FROM t LIMIT 1)
  ORDER BY string
  MEASURES
    MAX(int32 + SUM(int32 + int64 + MIN(double) GROUP BY int64) GROUP BY int32) AS max_agg,
    ARRAY_AGG(string GROUP BY string ORDER BY MIN(double)) AS array_agg
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
QueryStmt
+-output_column_list=
| +-$partitionby.$partitionbycol1#25 AS `$partition_by_col1` [BOOL]
| +-$match_recognize.max_agg#35 AS max_agg [DOUBLE]
| +-$match_recognize.array_agg#39 AS array_agg [ARRAY<STRING>]
+-query=
  +-WithScan
    +-column_list=[$partitionby.$partitionbycol1#25, $match_recognize.max_agg#35, $match_recognize.array_agg#39]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[x#1, y#2]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       | +-y#2 := Literal(type=INT64, value=2)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$partitionby.$partitionbycol1#25, $match_recognize.max_agg#35, $match_recognize.array_agg#39]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$partitionby.$partitionbycol1#25, $match_recognize.max_agg#35, $match_recognize.array_agg#39]
            +-expr_list=
            | +-max_agg#35 := ColumnRef(type=DOUBLE, column=$aggregate.$agg1#34)
            | +-array_agg#39 := ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg2#38)
            +-input_scan=
              +-MatchRecognizeScan
                +-column_list=[$partitionby.$partitionbycol1#25, $aggregate.$agg1#34, $aggregate.$agg2#38]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=[SimpleTypes.int32#3, SimpleTypes.int64#4, SimpleTypes.string#7, SimpleTypes.double#11, $partitionby.$partitionbycol1#25]
                |   +-expr_list=
                |   | +-$partitionbycol1#25 :=
                |   |   +-SubqueryExpr
                |   |     +-type=BOOL
                |   |     +-subquery_type=IN
                |   |     +-parameter_list=
                |   |     | +-ColumnRef(type=INT32, column=SimpleTypes.int32#3)
                |   |     +-in_expr=
                |   |     | +-Cast(INT32 -> INT64)
                |   |     |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#3)
                |   |     +-subquery=
                |   |       +-LimitOffsetScan
                |   |         +-column_list=[$expr_subquery.$col1#24]
                |   |         +-input_scan=
                |   |         | +-ProjectScan
                |   |         |   +-column_list=[$expr_subquery.$col1#24]
                |   |         |   +-expr_list=
                |   |         |   | +-$col1#24 :=
                |   |         |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                |   |         |   |     +-ColumnRef(type=INT64, column=t.x#22)
                |   |         |   |     +-Cast(INT32 -> INT64)
                |   |         |   |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#3, is_correlated=TRUE)
                |   |         |   +-input_scan=
                |   |         |     +-WithRefScan(column_list=t.[x#22, y#23], with_query_name="t")
                |   |         +-limit=
                |   |           +-Literal(type=INT64, value=1)
                |   +-input_scan=
                |     +-TableScan(column_list=SimpleTypes.[int32#3, int64#4, string#7, double#11], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
                +-analytic_function_group_list=
                | +-AnalyticFunctionGroup
                |   +-partition_by=
                |   | +-WindowPartitioning
                |   |   +-partition_by_list=
                |   |     +-ColumnRef(type=BOOL, column=$partitionby.$partitionbycol1#25)
                |   +-order_by=
                |     +-WindowOrdering
                |       +-order_by_item_list=
                |         +-OrderByItem
                |           +-column_ref=
                |             +-ColumnRef(type=STRING, column=SimpleTypes.string#7)
                +-pattern_variable_definition_list=
                | +-MatchRecognizeVariableDefinition
                | | +-name="A"
                | | +-predicate=
                | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
                | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#4)
                | |     +-Literal(type=INT64, value=10)
                | +-MatchRecognizeVariableDefinition
                |   +-name="B"
                |   +-predicate=
                |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
                |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#3)
                |       +-Literal(type=INT32, value=10)
                +-pattern=
                | +-MatchRecognizePatternOperation
                |   +-op_type=CONCAT
                |   +-operand_list=
                |     +-MatchRecognizePatternVariableRef(name="A")
                |     +-MatchRecognizePatternVariableRef(name="B")
                +-after_match_skip_mode=END_OF_MATCH
                +-measure_group_list=
                | +-MeasureGroup
                |   +-aggregate_list=
                |     +-$agg1#34 :=
                |     | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
                |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                |     |     +-Cast(INT32 -> DOUBLE)
                |     |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#29)
                |     |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#33)
                |     |   +-group_by_list=
                |     |   | +-$groupbymod#29 := ColumnRef(type=INT32, column=SimpleTypes.int32#3)
                |     |   +-group_by_aggregate_list=
                |     |     +-$agg1#33 :=
                |     |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
                |     |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                |     |           +-Cast(INT64 -> DOUBLE)
                |     |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                |     |           |   +-Cast(INT32 -> INT64)
                |     |           |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#30)
                |     |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#31)
                |     |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#32)
                |     |         +-group_by_list=
                |     |         | +-$groupbymod#30 := ColumnRef(type=INT32, column=SimpleTypes.int32#3)
                |     |         | +-$groupbymod#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#4)
                |     |         +-group_by_aggregate_list=
                |     |           +-$agg1#32 :=
                |     |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
                |     |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#11)
                |     +-$agg2#38 :=
                |       +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
                |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#36)
                |         +-order_by_item_list=
                |         | +-OrderByItem
                |         |   +-column_ref=
                |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#37)
                |         +-group_by_list=
                |         | +-$groupbymod#36 := ColumnRef(type=STRING, column=SimpleTypes.string#7)
                |         +-group_by_aggregate_list=
                |           +-$agg1#37 :=
                |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
                |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#11)
                +-match_number_column=$match_recognize.$match_number#26
                +-match_row_number_column=$match_recognize.$match_row_number#27
                +-classifier_column=$match_recognize.$classifier#28

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1,
      2 AS a_2
  )
SELECT
  matchrecognizescan_15.a_8 AS a_8,
  matchrecognizescan_15.a_12 AS max_agg,
  matchrecognizescan_15.a_13 AS array_agg
FROM
  (
    SELECT
      simpletypes_7.a_3 AS a_3,
      simpletypes_7.a_4 AS a_4,
      simpletypes_7.a_5 AS a_5,
      simpletypes_7.a_6 AS a_6,
      (CAST(simpletypes_7.a_3 AS INT64) IN (
        SELECT
          (withrefscan_9.a_1) + CAST(simpletypes_7.a_3 AS INT64) AS a_10
        FROM
          t AS withrefscan_9
        LIMIT 1)) AS a_8
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_3,
          SimpleTypes.int64 AS a_4,
          SimpleTypes.string AS a_5,
          SimpleTypes.double AS a_6
        FROM
          SimpleTypes
      ) AS simpletypes_7
  ) AS projectscan_11 MATCH_RECOGNIZE(
    PARTITION BY projectscan_11.a_8
    ORDER BY projectscan_11.a_5
    MEASURES
      MAX(CAST(projectscan_11.a_3 AS DOUBLE) + (SUM(CAST(CAST(projectscan_11.a_3 AS INT64) + (projectscan_11.a_4) AS DOUBLE) +
          (MIN(projectscan_11.a_6))
          GROUP BY projectscan_11.a_3, projectscan_11.a_4))
        GROUP BY projectscan_11.a_3) AS a_12,
      ARRAY_AGG(projectscan_11.a_5
        GROUP BY projectscan_11.a_5
        ORDER BY MIN(projectscan_11.a_6)) AS a_13,
      MATCH_NUMBER() AS a_14
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(projectscan_11.a_4) < 10,
      B AS(projectscan_11.a_3) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_15;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1,
      2 AS a_2
  )
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_3,
     SimpleTypes.int64 AS a_4,
     SimpleTypes.string AS a_5,
     SimpleTypes.double AS a_6
|> AS simpletypes_7
|> SELECT
     simpletypes_7.a_3 AS a_3,
     simpletypes_7.a_4 AS a_4,
     simpletypes_7.a_5 AS a_5,
     simpletypes_7.a_6 AS a_6,
     (CAST(simpletypes_7.a_3 AS INT64) IN (
       FROM
         t AS withrefscan_9
       |> SELECT
            (withrefscan_9.a_1) + CAST(simpletypes_7.a_3 AS INT64) AS a_10
       |> LIMIT 1)) AS a_8
|> AS projectscan_11
|> MATCH_RECOGNIZE(
     PARTITION BY projectscan_11.a_8
     ORDER BY projectscan_11.a_5
     MEASURES
       MAX(CAST(projectscan_11.a_3 AS DOUBLE) + (SUM(CAST(CAST(projectscan_11.a_3 AS INT64) + (projectscan_11.a_4) AS DOUBLE) +
           (MIN(projectscan_11.a_6))
           GROUP BY projectscan_11.a_3, projectscan_11.a_4))
         GROUP BY projectscan_11.a_3) AS a_12,
       ARRAY_AGG(projectscan_11.a_5
         GROUP BY projectscan_11.a_5
         ORDER BY MIN(projectscan_11.a_6)) AS a_13,
       MATCH_NUMBER() AS a_14
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(projectscan_11.a_4) < 10,
       B AS(projectscan_11.a_3) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_15
|> SELECT
     matchrecognizescan_15.a_8 AS a_8,
     matchrecognizescan_15.a_12 AS max_agg,
     matchrecognizescan_15.a_13 AS array_agg;
==

# Accessing a field on a partitioning column when the partitioning expr is
# itself a field access.
SELECT * FROM (SimpleTypes CROSS JOIN ComplexTypes)
MATCH_RECOGNIZE(
  PARTITION BY teststruct.d
  ORDER BY string
  MEASURES {{A.|}}teststruct.d.b AS m
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
ALTERNATION GROUP: A.
--
ERROR: Cannot access columns through pattern variables. [at 5:12]
  MEASURES A.teststruct.d.b AS m
           ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$partitionby.d#26 AS d [STRUCT<a INT32, b STRING>]
| +-$match_recognize.m#30 AS m [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$partitionby.d#26, $match_recognize.m#30]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$partitionby.d#26, $match_recognize.m#30]
        +-expr_list=
        | +-m#30 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$partitionby.d#26)
        |     +-field_idx=1
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$partitionby.d#26]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, ComplexTypes.TestStruct#24, $partitionby.d#26]
            |   +-expr_list=
            |   | +-d#26 :=
            |   |   +-GetStructField
            |   |     +-type=STRUCT<a INT32, b STRING>
            |   |     +-expr=
            |   |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |   |     +-field_idx=1
            |   +-input_scan=
            |     +-JoinScan
            |       +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, ComplexTypes.TestStruct#24]
            |       +-left_scan=
            |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5], table=SimpleTypes, column_index_list=[0, 1, 4])
            |       +-right_scan=
            |         +-TableScan(column_list=[ComplexTypes.TestStruct#24], table=ComplexTypes, column_index_list=[4])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-partition_by=
            |   | +-WindowPartitioning
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$partitionby.d#26)
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-match_number_column=$match_recognize.$match_number#27
            +-match_row_number_column=$match_recognize.$match_row_number#28
            +-classifier_column=$match_recognize.$classifier#29

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_10.a_7 AS d,
  matchrecognizescan_10.a_7.b AS m
FROM
  (
    SELECT
      simpletypes_4.a_1 AS a_1,
      simpletypes_4.a_2 AS a_2,
      simpletypes_4.a_3 AS a_3,
      complextypes_6.a_5 AS a_5,
      complextypes_6.a_5.d AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
      CROSS JOIN
      (
        SELECT
          ComplexTypes.TestStruct AS a_5
        FROM
          ComplexTypes
      ) AS complextypes_6
  ) AS projectscan_8 MATCH_RECOGNIZE(
    PARTITION BY projectscan_8.a_7
    ORDER BY projectscan_8.a_3
    MEASURES
      MATCH_NUMBER() AS a_9
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(projectscan_8.a_2) < 10,
      B AS(projectscan_8.a_1) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_10;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3
|> AS simpletypes_4
|> CROSS JOIN
   (
     FROM
       ComplexTypes
     |> SELECT
          ComplexTypes.TestStruct AS a_5
     |> AS complextypes_6
   )
|> SELECT
     simpletypes_4.a_1 AS a_1,
     simpletypes_4.a_2 AS a_2,
     simpletypes_4.a_3 AS a_3,
     complextypes_6.a_5 AS a_5,
     complextypes_6.a_5.d AS a_7
|> AS projectscan_8
|> MATCH_RECOGNIZE(
     PARTITION BY projectscan_8.a_7
     ORDER BY projectscan_8.a_3
     MEASURES
       MATCH_NUMBER() AS a_9
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(projectscan_8.a_2) < 10,
       B AS(projectscan_8.a_1) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_10
|> SELECT
     matchrecognizescan_10.a_7 AS d,
     matchrecognizescan_10.a_7.b AS m;
==

# Accessing a field on a partitioning column
SELECT * FROM (SimpleTypes CROSS JOIN ComplexTypes)
MATCH_RECOGNIZE(
  PARTITION BY teststruct.d
  ORDER BY string
  MEASURES
    teststruct.d.a + MAX(teststruct.d.a + SUM(teststruct.d.a + int64 + MIN(double) GROUP BY int64) GROUP BY {{int32|teststruct.d.a}}) AS max_agg,
    ARRAY_AGG(string GROUP BY string ORDER BY MIN(double)) AS array_agg
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
ALTERNATION GROUP: int32
--
QueryStmt
+-output_column_list=
| +-$partitionby.d#26 AS d [STRUCT<a INT32, b STRING>]
| +-$match_recognize.max_agg#38 AS max_agg [DOUBLE]
| +-$match_recognize.array_agg#43 AS array_agg [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$partitionby.d#26, $match_recognize.max_agg#38, $match_recognize.array_agg#43]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$partitionby.d#26, $match_recognize.max_agg#38, $match_recognize.array_agg#43]
        +-expr_list=
        | +-max_agg#38 :=
        | | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        | |   +-Cast(INT32 -> DOUBLE)
        | |   | +-GetStructField
        | |   |   +-type=INT32
        | |   |   +-expr=
        | |   |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$partitionby.d#26)
        | |   |   +-field_idx=0
        | |   +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#37)
        | +-array_agg#43 := ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg2#42)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$partitionby.d#26, $aggregate.$agg1#37, $aggregate.$agg2#42]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, SimpleTypes.double#9, ComplexTypes.TestStruct#24, $partitionby.d#26]
            |   +-expr_list=
            |   | +-d#26 :=
            |   |   +-GetStructField
            |   |     +-type=STRUCT<a INT32, b STRING>
            |   |     +-expr=
            |   |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |   |     +-field_idx=1
            |   +-input_scan=
            |     +-JoinScan
            |       +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, SimpleTypes.double#9, ComplexTypes.TestStruct#24]
            |       +-left_scan=
            |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            |       +-right_scan=
            |         +-TableScan(column_list=[ComplexTypes.TestStruct#24], table=ComplexTypes, column_index_list=[4])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-partition_by=
            |   | +-WindowPartitioning
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$partitionby.d#26)
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#37 :=
            |     | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |     +-Cast(INT32 -> DOUBLE)
            |     |     | +-GetStructField
            |     |     |   +-type=INT32
            |     |     |   +-expr=
            |     |     |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$group_by_list.$groupbymod#30)
            |     |     |   +-field_idx=0
            |     |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#36)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#30 :=
            |     |   | | +-GetStructField
            |     |   | |   +-type=STRUCT<a INT32, b STRING>
            |     |   | |   +-expr=
            |     |   | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |     |   | |   +-field_idx=1
            |     |   | +-$groupbymod#31 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#36 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |     |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |           +-Cast(INT64 -> DOUBLE)
            |     |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |     |           |   +-Cast(INT32 -> INT64)
            |     |           |   | +-GetStructField
            |     |           |   |   +-type=INT32
            |     |           |   |   +-expr=
            |     |           |   |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$group_by_list.$groupbymod#32)
            |     |           |   |   +-field_idx=0
            |     |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#34)
            |     |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#35)
            |     |         +-group_by_list=
            |     |         | +-$groupbymod#32 :=
            |     |         | | +-GetStructField
            |     |         | |   +-type=STRUCT<a INT32, b STRING>
            |     |         | |   +-expr=
            |     |         | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |     |         | |   +-field_idx=1
            |     |         | +-$groupbymod#33 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     |         | +-$groupbymod#34 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |     |         +-group_by_aggregate_list=
            |     |           +-$agg1#35 :=
            |     |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |     |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |     +-$agg2#42 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
            |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#40)
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#41)
            |         +-group_by_list=
            |         | +-$groupbymod#39 :=
            |         | | +-GetStructField
            |         | |   +-type=STRUCT<a INT32, b STRING>
            |         | |   +-expr=
            |         | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |         | |   +-field_idx=1
            |         | +-$groupbymod#40 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
            |         +-group_by_aggregate_list=
            |           +-$agg1#41 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#27
            +-match_row_number_column=$match_recognize.$match_row_number#28
            +-classifier_column=$match_recognize.$classifier#29

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_13.a_8 AS d,
  CAST(matchrecognizescan_13.a_8.a AS DOUBLE) + (matchrecognizescan_13.a_10) AS max_agg,
  matchrecognizescan_13.a_11 AS array_agg
FROM
  (
    SELECT
      simpletypes_5.a_1 AS a_1,
      simpletypes_5.a_2 AS a_2,
      simpletypes_5.a_3 AS a_3,
      simpletypes_5.a_4 AS a_4,
      complextypes_7.a_6 AS a_6,
      complextypes_7.a_6.d AS a_8
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3,
          SimpleTypes.double AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
      CROSS JOIN
      (
        SELECT
          ComplexTypes.TestStruct AS a_6
        FROM
          ComplexTypes
      ) AS complextypes_7
  ) AS projectscan_9 MATCH_RECOGNIZE(
    PARTITION BY projectscan_9.a_8
    ORDER BY projectscan_9.a_3
    MEASURES
      MAX(CAST(projectscan_9.a_6.d.a AS DOUBLE) + (SUM(CAST(CAST(projectscan_9.a_6.d.a AS INT64) + (projectscan_9.a_2) AS DOUBLE) +
          (MIN(projectscan_9.a_4))
          GROUP BY projectscan_9.a_6.d, projectscan_9.a_1, projectscan_9.a_2))
        GROUP BY projectscan_9.a_6.d, projectscan_9.a_1) AS a_10,
      ARRAY_AGG(projectscan_9.a_3
        GROUP BY projectscan_9.a_6.d, projectscan_9.a_3
        ORDER BY MIN(projectscan_9.a_4)) AS a_11,
      MATCH_NUMBER() AS a_12
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(projectscan_9.a_2) < 10,
      B AS(projectscan_9.a_1) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_13;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> CROSS JOIN
   (
     FROM
       ComplexTypes
     |> SELECT
          ComplexTypes.TestStruct AS a_6
     |> AS complextypes_7
   )
|> SELECT
     simpletypes_5.a_1 AS a_1,
     simpletypes_5.a_2 AS a_2,
     simpletypes_5.a_3 AS a_3,
     simpletypes_5.a_4 AS a_4,
     complextypes_7.a_6 AS a_6,
     complextypes_7.a_6.d AS a_8
|> AS projectscan_9
|> MATCH_RECOGNIZE(
     PARTITION BY projectscan_9.a_8
     ORDER BY projectscan_9.a_3
     MEASURES
       MAX(CAST(projectscan_9.a_6.d.a AS DOUBLE) + (SUM(CAST(CAST(projectscan_9.a_6.d.a AS INT64) + (projectscan_9.a_2) AS DOUBLE) +
           (MIN(projectscan_9.a_4))
           GROUP BY projectscan_9.a_6.d, projectscan_9.a_1, projectscan_9.a_2))
         GROUP BY projectscan_9.a_6.d, projectscan_9.a_1) AS a_10,
       ARRAY_AGG(projectscan_9.a_3
         GROUP BY projectscan_9.a_6.d, projectscan_9.a_3
         ORDER BY MIN(projectscan_9.a_4)) AS a_11,
       MATCH_NUMBER() AS a_12
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(projectscan_9.a_2) < 10,
       B AS(projectscan_9.a_1) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_13
|> SELECT
     matchrecognizescan_13.a_8 AS d,
     CAST(matchrecognizescan_13.a_8.a AS DOUBLE) + (matchrecognizescan_13.a_10) AS max_agg,
     matchrecognizescan_13.a_11 AS array_agg;
--
ALTERNATION GROUP: teststruct.d.a
--
QueryStmt
+-output_column_list=
| +-$partitionby.d#26 AS d [STRUCT<a INT32, b STRING>]
| +-$match_recognize.max_agg#38 AS max_agg [DOUBLE]
| +-$match_recognize.array_agg#43 AS array_agg [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$partitionby.d#26, $match_recognize.max_agg#38, $match_recognize.array_agg#43]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$partitionby.d#26, $match_recognize.max_agg#38, $match_recognize.array_agg#43]
        +-expr_list=
        | +-max_agg#38 :=
        | | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        | |   +-Cast(INT32 -> DOUBLE)
        | |   | +-GetStructField
        | |   |   +-type=INT32
        | |   |   +-expr=
        | |   |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$partitionby.d#26)
        | |   |   +-field_idx=0
        | |   +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#37)
        | +-array_agg#43 := ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg2#42)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$partitionby.d#26, $aggregate.$agg1#37, $aggregate.$agg2#42]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, SimpleTypes.double#9, ComplexTypes.TestStruct#24, $partitionby.d#26]
            |   +-expr_list=
            |   | +-d#26 :=
            |   |   +-GetStructField
            |   |     +-type=STRUCT<a INT32, b STRING>
            |   |     +-expr=
            |   |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |   |     +-field_idx=1
            |   +-input_scan=
            |     +-JoinScan
            |       +-column_list=[SimpleTypes.int32#1, SimpleTypes.int64#2, SimpleTypes.string#5, SimpleTypes.double#9, ComplexTypes.TestStruct#24]
            |       +-left_scan=
            |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            |       +-right_scan=
            |         +-TableScan(column_list=[ComplexTypes.TestStruct#24], table=ComplexTypes, column_index_list=[4])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-partition_by=
            |   | +-WindowPartitioning
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$partitionby.d#26)
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#37 :=
            |     | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |     +-Cast(INT32 -> DOUBLE)
            |     |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#31)
            |     |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#36)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#30 :=
            |     |   | | +-GetStructField
            |     |   | |   +-type=STRUCT<a INT32, b STRING>
            |     |   | |   +-expr=
            |     |   | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |     |   | |   +-field_idx=1
            |     |   | +-$groupbymod#31 :=
            |     |   |   +-GetStructField
            |     |   |     +-type=INT32
            |     |   |     +-expr=
            |     |   |     | +-GetStructField
            |     |   |     |   +-type=STRUCT<a INT32, b STRING>
            |     |   |     |   +-expr=
            |     |   |     |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |     |   |     |   +-field_idx=1
            |     |   |     +-field_idx=0
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#36 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |     |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |           +-Cast(INT64 -> DOUBLE)
            |     |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |     |           |   +-Cast(INT32 -> INT64)
            |     |           |   | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#33)
            |     |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#34)
            |     |           +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#35)
            |     |         +-group_by_list=
            |     |         | +-$groupbymod#32 :=
            |     |         | | +-GetStructField
            |     |         | |   +-type=STRUCT<a INT32, b STRING>
            |     |         | |   +-expr=
            |     |         | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |     |         | |   +-field_idx=1
            |     |         | +-$groupbymod#33 :=
            |     |         | | +-GetStructField
            |     |         | |   +-type=INT32
            |     |         | |   +-expr=
            |     |         | |   | +-GetStructField
            |     |         | |   |   +-type=STRUCT<a INT32, b STRING>
            |     |         | |   |   +-expr=
            |     |         | |   |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |     |         | |   |   +-field_idx=1
            |     |         | |   +-field_idx=0
            |     |         | +-$groupbymod#34 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |     |         +-group_by_aggregate_list=
            |     |           +-$agg1#35 :=
            |     |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |     |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |     +-$agg2#42 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
            |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#40)
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#41)
            |         +-group_by_list=
            |         | +-$groupbymod#39 :=
            |         | | +-GetStructField
            |         | |   +-type=STRUCT<a INT32, b STRING>
            |         | |   +-expr=
            |         | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#24)
            |         | |   +-field_idx=1
            |         | +-$groupbymod#40 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
            |         +-group_by_aggregate_list=
            |           +-$agg1#41 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#27
            +-match_row_number_column=$match_recognize.$match_row_number#28
            +-classifier_column=$match_recognize.$classifier#29

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_13.a_8 AS d,
  CAST(matchrecognizescan_13.a_8.a AS DOUBLE) + (matchrecognizescan_13.a_10) AS max_agg,
  matchrecognizescan_13.a_11 AS array_agg
FROM
  (
    SELECT
      simpletypes_5.a_1 AS a_1,
      simpletypes_5.a_2 AS a_2,
      simpletypes_5.a_3 AS a_3,
      simpletypes_5.a_4 AS a_4,
      complextypes_7.a_6 AS a_6,
      complextypes_7.a_6.d AS a_8
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.string AS a_3,
          SimpleTypes.double AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
      CROSS JOIN
      (
        SELECT
          ComplexTypes.TestStruct AS a_6
        FROM
          ComplexTypes
      ) AS complextypes_7
  ) AS projectscan_9 MATCH_RECOGNIZE(
    PARTITION BY projectscan_9.a_8
    ORDER BY projectscan_9.a_3
    MEASURES
      MAX(CAST(projectscan_9.a_6.d.a AS DOUBLE) + (SUM(CAST(CAST(projectscan_9.a_6.d.a AS INT64) + (projectscan_9.a_2) AS DOUBLE) +
          (MIN(projectscan_9.a_4))
          GROUP BY projectscan_9.a_6.d, projectscan_9.a_6.d.a, projectscan_9.a_2))
        GROUP BY projectscan_9.a_6.d, projectscan_9.a_6.d.a) AS a_10,
      ARRAY_AGG(projectscan_9.a_3
        GROUP BY projectscan_9.a_6.d, projectscan_9.a_3
        ORDER BY MIN(projectscan_9.a_4)) AS a_11,
      MATCH_NUMBER() AS a_12
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(projectscan_9.a_2) < 10,
      B AS(projectscan_9.a_1) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_13;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> CROSS JOIN
   (
     FROM
       ComplexTypes
     |> SELECT
          ComplexTypes.TestStruct AS a_6
     |> AS complextypes_7
   )
|> SELECT
     simpletypes_5.a_1 AS a_1,
     simpletypes_5.a_2 AS a_2,
     simpletypes_5.a_3 AS a_3,
     simpletypes_5.a_4 AS a_4,
     complextypes_7.a_6 AS a_6,
     complextypes_7.a_6.d AS a_8
|> AS projectscan_9
|> MATCH_RECOGNIZE(
     PARTITION BY projectscan_9.a_8
     ORDER BY projectscan_9.a_3
     MEASURES
       MAX(CAST(projectscan_9.a_6.d.a AS DOUBLE) + (SUM(CAST(CAST(projectscan_9.a_6.d.a AS INT64) + (projectscan_9.a_2) AS DOUBLE) +
           (MIN(projectscan_9.a_4))
           GROUP BY projectscan_9.a_6.d, projectscan_9.a_6.d.a, projectscan_9.a_2))
         GROUP BY projectscan_9.a_6.d, projectscan_9.a_6.d.a) AS a_10,
       ARRAY_AGG(projectscan_9.a_3
         GROUP BY projectscan_9.a_6.d, projectscan_9.a_3
         ORDER BY MIN(projectscan_9.a_4)) AS a_11,
       MATCH_NUMBER() AS a_12
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(projectscan_9.a_2) < 10,
       B AS(projectscan_9.a_1) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_13
|> SELECT
     matchrecognizescan_13.a_8 AS d,
     CAST(matchrecognizescan_13.a_8.a AS DOUBLE) + (matchrecognizescan_13.a_10) AS max_agg,
     matchrecognizescan_13.a_11 AS array_agg;
==

# Regression test for b/380313644
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
    string_agg('a' GROUP BY 'a'||'a' ORDER BY avg(2), string_agg('b' ORDER BY a.int32)) AS m
  PATTERN (a)
  DEFINE
    a AS true
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m#27 AS m [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m#27]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m#27]
        +-expr_list=
        | +-m#27 := ColumnRef(type=STRING, column=$aggregate.$agg1#26)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#26]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int32#1, string#5], table=SimpleTypes, column_index_list=[0, 4])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="a"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternVariableRef(name="a")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="a")
            |   +-aggregate_list=
            |     +-$agg1#26 :=
            |       +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
            |         +-Literal(type=STRING, value="a")
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         | | +-column_ref=
            |         | |   +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#24)
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=STRING, column=$aggregate.$agg2#25)
            |         +-group_by_list=
            |         | +-$groupbymod#23 :=
            |         |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
            |         |     +-Literal(type=STRING, value="a")
            |         |     +-Literal(type=STRING, value="a")
            |         +-group_by_aggregate_list=
            |           +-$agg1#24 :=
            |           | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
            |           |   +-Literal(type=INT64, value=2)
            |           +-$agg2#25 :=
            |             +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
            |               +-Literal(type=STRING, value="b")
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_6.a_4 AS m
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.string AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3 MATCH_RECOGNIZE(
    ORDER BY simpletypes_3.a_2
    MEASURES
      STRING_AGG("a"
        GROUP BY CONCAT("a", "a")
        ORDER BY AVG(2), STRING_AGG("b"
          ORDER BY a.a_1)) AS a_4,
      MATCH_NUMBER() AS a_5
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN (a)
    DEFINE
      a AS true
  )
  AS matchrecognizescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.string AS a_2
|> AS simpletypes_3
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_3.a_2
     MEASURES
       STRING_AGG("a"
         GROUP BY CONCAT("a", "a")
         ORDER BY AVG(2), STRING_AGG("b"
           ORDER BY a.a_1)) AS a_4,
       MATCH_NUMBER() AS a_5
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (a)
     DEFINE
       a AS true
   )
   AS matchrecognizescan_6
|> SELECT
     matchrecognizescan_6.a_4 AS m;
==

# Regression test for b/380313644
# Using COUNT(*) instead of avg(2) because it's not constant but can still be
# applied directly to the restricted range.
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
    string_agg('a' GROUP BY 'a'||'a' ORDER BY count(*), string_agg('b' ORDER BY a.int32)) AS m
  PATTERN (a)
  DEFINE
    a AS true
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m#27 AS m [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m#27]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m#27]
        +-expr_list=
        | +-m#27 := ColumnRef(type=STRING, column=$aggregate.$agg1#26)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#26]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int32#1, string#5], table=SimpleTypes, column_index_list=[0, 4])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="a"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternVariableRef(name="a")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="a")
            |   +-aggregate_list=
            |     +-$agg1#26 :=
            |       +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
            |         +-Literal(type=STRING, value="a")
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         | | +-column_ref=
            |         | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=STRING, column=$aggregate.$agg2#25)
            |         +-group_by_list=
            |         | +-$groupbymod#23 :=
            |         |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
            |         |     +-Literal(type=STRING, value="a")
            |         |     +-Literal(type=STRING, value="a")
            |         +-group_by_aggregate_list=
            |           +-$agg1#24 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |           +-$agg2#25 :=
            |             +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
            |               +-Literal(type=STRING, value="b")
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_6.a_4 AS m
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.string AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3 MATCH_RECOGNIZE(
    ORDER BY simpletypes_3.a_2
    MEASURES
      STRING_AGG("a"
        GROUP BY CONCAT("a", "a")
        ORDER BY COUNT(*), STRING_AGG("b"
          ORDER BY a.a_1)) AS a_4,
      MATCH_NUMBER() AS a_5
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN (a)
    DEFINE
      a AS true
  )
  AS matchrecognizescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.string AS a_2
|> AS simpletypes_3
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_3.a_2
     MEASURES
       STRING_AGG("a"
         GROUP BY CONCAT("a", "a")
         ORDER BY COUNT(*), STRING_AGG("b"
           ORDER BY a.a_1)) AS a_4,
       MATCH_NUMBER() AS a_5
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (a)
     DEFINE
       a AS true
   )
   AS matchrecognizescan_6
|> SELECT
     matchrecognizescan_6.a_4 AS m;
