[default language_features=MAXIMUM,+SQL_GRAPH]
[default no_test_extract_table_names]
[default show_sqlbuilder_output]

# Deep nested subquery with multiple possible table chains or no possible table
# chain.
select 1 from graph_table(
  aml
  match (n is {{!%|%}})
  columns (
    (
      select (select 1 from graph_table(
        aml
        match (m is {{!%|%}})
        columns (key,
                 property_exists(n, name) as n_has_name,
                 (select property_exists(m, name)) as m_has_name,
                 (select same(m, m)) as same_m_m,
                 same(m, m) as same_m_m_2,
                 same(n, n) as same_n_n)
      ) limit 1)
      from KeyValue limit 1
    ) AS sub_query,
    (select property_exists(n, name)) as n_has_name,
    (select same(n, n)) as same_n_n,
    same(n, n) as same_n_n_2
  )
)
--
# Nested subquery: both outer layer and inner layer has no matching table chain.
ALTERNATION GROUP: !%,!%
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[sub_query#15, n_has_name#17, same_n_n#19, same_n_n_2#20]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-parse_location=136-138
        |       |   |   +-op=NOT
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel(parse_location=137-138)
        |       |   +-target_element_table_list=[]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-sub_query#15 :=
          | +-SubqueryExpr
          |   +-type=INT64
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          |   +-subquery=
          |     +-LimitOffsetScan
          |       +-column_list=[$expr_subquery.$col1#14]
          |       +-input_scan=
          |       | +-ProjectScan
          |       |   +-column_list=[$expr_subquery.$col1#14]
          |       |   +-expr_list=
          |       |   | +-$col1#14 :=
          |       |   |   +-SubqueryExpr
          |       |   |     +-type=INT64
          |       |   |     +-subquery_type=SCALAR
          |       |   |     +-parameter_list=
          |       |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |     | +-ColumnRef(type=INT64, column=KeyValue.Key#2)
          |       |   |     +-subquery=
          |       |   |       +-LimitOffsetScan
          |       |   |         +-column_list=[$expr_subquery.$col1#13]
          |       |   |         +-input_scan=
          |       |   |         | +-ProjectScan
          |       |   |         |   +-column_list=[$expr_subquery.$col1#13]
          |       |   |         |   +-expr_list=
          |       |   |         |   | +-$col1#13 := Literal(type=INT64, value=1)
          |       |   |         |   +-input_scan=
          |       |   |         |     +-GraphTableScan
          |       |   |         |       +-column_list=$graph_table.[key#5, n_has_name#6, m_has_name#8, same_m_m#10, same_m_m_2#11, same_n_n#12]
          |       |   |         |       +-property_graph=aml
          |       |   |         |       +-input_scan=
          |       |   |         |       | +-GraphScan
          |       |   |         |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |   +-input_scan_list=
          |       |   |         |       |     +-GraphPathScan
          |       |   |         |       |       +-column_list=[$element_table.m#4]
          |       |   |         |       |       +-input_scan_list=
          |       |   |         |       |       | +-GraphNodeScan
          |       |   |         |       |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |       |   +-label_expr=
          |       |   |         |       |       |   | +-GraphLabelNaryExpr
          |       |   |         |       |       |   |   +-parse_location=231-233
          |       |   |         |       |       |   |   +-op=NOT
          |       |   |         |       |       |   |   +-operand_list=
          |       |   |         |       |       |   |     +-GraphWildCardLabel(parse_location=232-233)
          |       |   |         |       |       |   +-target_element_table_list=[]
          |       |   |         |       |       +-head=$element_table.m#4
          |       |   |         |       |       +-tail=$element_table.m#4
          |       |   |         |       +-shape_expr_list=
          |       |   |         |         +-key#5 := ColumnRef(type=INT64, column=KeyValue.Key#2, is_correlated=TRUE)
          |       |   |         |         +-n_has_name#6 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |         |   +-Literal(type=STRING, value="name")
          |       |   |         |         +-m_has_name#8 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#7]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#7 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-Literal(type=STRING, value="name")
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m#10 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#9]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#9 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m_2#11 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         +-same_n_n#12 :=
          |       |   |         |           +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         +-limit=
          |       |   |           +-Literal(type=INT64, value=1)
          |       |   +-input_scan=
          |       |     +-TableScan(column_list=[KeyValue.Key#2], table=KeyValue, column_index_list=[0])
          |       +-limit=
          |         +-Literal(type=INT64, value=1)
          +-n_has_name#17 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#16]
          |       +-expr_list=
          |       | +-$col1#16 :=
          |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-Literal(type=STRING, value="name")
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n#19 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#18]
          |       +-expr_list=
          |       | +-$col1#18 :=
          |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n_2#20 :=
            +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
              +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_25
FROM
  (
    SELECT
      aml_1.a_3 AS a_3,
      aml_1.a_19 AS a_19,
      aml_1.a_21 AS a_21,
      aml_1.a_23 AS a_23
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS ! %)
        COLUMNS(
          (
            SELECT
              (
                SELECT
                  1 AS a_18
                FROM
                  (
                    SELECT
                      aml_7.a_9 AS a_9,
                      aml_7.a_10 AS a_10,
                      aml_7.a_11 AS a_11,
                      aml_7.a_13 AS a_13,
                      aml_7.a_15 AS a_15,
                      aml_7.a_16 AS a_16
                    FROM
                      GRAPH_TABLE(
                        aml
                        MATCH
                          (a_8
                          IS ! %)
                        COLUMNS(
                          keyvalue_5.a_4 AS a_9,
                          PROPERTY_EXISTS(a_2, name) AS a_10,
                          (
                            SELECT
                              PROPERTY_EXISTS(a_8, name) AS a_12
                          ) AS a_11,
                          (
                            SELECT
                              SAME(a_8, a_8) AS a_14
                          ) AS a_13,
                          SAME(a_8, a_8) AS a_15,
                          SAME(a_2, a_2) AS a_16
                        )
                      ) AS aml_7
                  ) AS graphtablescan_17
                LIMIT 1) AS a_6
            FROM
              (
                SELECT
                  KeyValue.Key AS a_4
                FROM
                  KeyValue
              ) AS keyvalue_5
            LIMIT 1) AS a_3,
          (
            SELECT
              PROPERTY_EXISTS(a_2, name) AS a_20
          ) AS a_19,
          (
            SELECT
              SAME(a_2, a_2) AS a_22
          ) AS a_21,
          SAME(a_2, a_2) AS a_23
        )
      ) AS aml_1
  ) AS graphtablescan_24;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS ! %)
    COLUMNS(
      (
        FROM
          KeyValue
        |> SELECT
             KeyValue.Key AS a_4
        |> AS keyvalue_5
        |> SELECT
             (
               FROM
                 GRAPH_TABLE(
                   aml
                   MATCH
                     (a_8
                     IS ! %)
                   COLUMNS(
                     keyvalue_5.a_4 AS a_9,
                     PROPERTY_EXISTS(a_2, name) AS a_10,
                     (
                       SELECT
                         PROPERTY_EXISTS(a_8, name) AS a_12
                     ) AS a_11,
                     (
                       SELECT
                         SAME(a_8, a_8) AS a_14
                     ) AS a_13,
                     SAME(a_8, a_8) AS a_15,
                     SAME(a_2, a_2) AS a_16
                   )
                 ) AS aml_7
               |> SELECT
                    aml_7.a_9 AS a_9,
                    aml_7.a_10 AS a_10,
                    aml_7.a_11 AS a_11,
                    aml_7.a_13 AS a_13,
                    aml_7.a_15 AS a_15,
                    aml_7.a_16 AS a_16
               |> AS graphtablescan_17
               |> SELECT
                    1 AS a_18
               |> LIMIT 1) AS a_6
        |> LIMIT 1) AS a_3,
      (
        SELECT
          PROPERTY_EXISTS(a_2, name) AS a_20
      ) AS a_19,
      (
        SELECT
          SAME(a_2, a_2) AS a_22
      ) AS a_21,
      SAME(a_2, a_2) AS a_23
    )
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS a_3,
     aml_1.a_19 AS a_19,
     aml_1.a_21 AS a_21,
     aml_1.a_23 AS a_23
|> AS graphtablescan_24
|> SELECT
     1 AS a_25;
--
# Nested subquery: outer layer has no matching table chain but inner layer has
# multiple matching table chains.
ALTERNATION GROUP: !%,%
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[sub_query#15, n_has_name#17, same_n_n#19, same_n_n_2#20]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-parse_location=136-138
        |       |   |   +-op=NOT
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel(parse_location=137-138)
        |       |   +-target_element_table_list=[]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-sub_query#15 :=
          | +-SubqueryExpr
          |   +-type=INT64
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          |   +-subquery=
          |     +-LimitOffsetScan
          |       +-column_list=[$expr_subquery.$col1#14]
          |       +-input_scan=
          |       | +-ProjectScan
          |       |   +-column_list=[$expr_subquery.$col1#14]
          |       |   +-expr_list=
          |       |   | +-$col1#14 :=
          |       |   |   +-SubqueryExpr
          |       |   |     +-type=INT64
          |       |   |     +-subquery_type=SCALAR
          |       |   |     +-parameter_list=
          |       |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |     | +-ColumnRef(type=INT64, column=KeyValue.Key#2)
          |       |   |     +-subquery=
          |       |   |       +-LimitOffsetScan
          |       |   |         +-column_list=[$expr_subquery.$col1#13]
          |       |   |         +-input_scan=
          |       |   |         | +-ProjectScan
          |       |   |         |   +-column_list=[$expr_subquery.$col1#13]
          |       |   |         |   +-expr_list=
          |       |   |         |   | +-$col1#13 := Literal(type=INT64, value=1)
          |       |   |         |   +-input_scan=
          |       |   |         |     +-GraphTableScan
          |       |   |         |       +-column_list=$graph_table.[key#5, n_has_name#6, m_has_name#8, same_m_m#10, same_m_m_2#11, same_n_n#12]
          |       |   |         |       +-property_graph=aml
          |       |   |         |       +-input_scan=
          |       |   |         |       | +-GraphScan
          |       |   |         |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |   +-input_scan_list=
          |       |   |         |       |     +-GraphPathScan
          |       |   |         |       |       +-column_list=[$element_table.m#4]
          |       |   |         |       |       +-input_scan_list=
          |       |   |         |       |       | +-GraphNodeScan
          |       |   |         |       |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |       |   +-label_expr=
          |       |   |         |       |       |   | +-GraphWildCardLabel(parse_location=231-232)
          |       |   |         |       |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
          |       |   |         |       |       +-head=$element_table.m#4
          |       |   |         |       |       +-tail=$element_table.m#4
          |       |   |         |       +-shape_expr_list=
          |       |   |         |         +-key#5 := ColumnRef(type=INT64, column=KeyValue.Key#2, is_correlated=TRUE)
          |       |   |         |         +-n_has_name#6 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |         |   +-Literal(type=STRING, value="name")
          |       |   |         |         +-m_has_name#8 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#7]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#7 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-Literal(type=STRING, value="name")
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m#10 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#9]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#9 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m_2#11 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         +-same_n_n#12 :=
          |       |   |         |           +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         +-limit=
          |       |   |           +-Literal(type=INT64, value=1)
          |       |   +-input_scan=
          |       |     +-TableScan(column_list=[KeyValue.Key#2], table=KeyValue, column_index_list=[0])
          |       +-limit=
          |         +-Literal(type=INT64, value=1)
          +-n_has_name#17 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#16]
          |       +-expr_list=
          |       | +-$col1#16 :=
          |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-Literal(type=STRING, value="name")
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n#19 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#18]
          |       +-expr_list=
          |       | +-$col1#18 :=
          |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1, is_correlated=TRUE)
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n_2#20 :=
            +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)
              +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.n#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_25
FROM
  (
    SELECT
      aml_1.a_3 AS a_3,
      aml_1.a_19 AS a_19,
      aml_1.a_21 AS a_21,
      aml_1.a_23 AS a_23
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS ! %)
        COLUMNS(
          (
            SELECT
              (
                SELECT
                  1 AS a_18
                FROM
                  (
                    SELECT
                      aml_7.a_9 AS a_9,
                      aml_7.a_10 AS a_10,
                      aml_7.a_11 AS a_11,
                      aml_7.a_13 AS a_13,
                      aml_7.a_15 AS a_15,
                      aml_7.a_16 AS a_16
                    FROM
                      GRAPH_TABLE(
                        aml
                        MATCH
                          (a_8
                          IS %)
                        COLUMNS(
                          keyvalue_5.a_4 AS a_9,
                          PROPERTY_EXISTS(a_2, name) AS a_10,
                          (
                            SELECT
                              PROPERTY_EXISTS(a_8, name) AS a_12
                          ) AS a_11,
                          (
                            SELECT
                              SAME(a_8, a_8) AS a_14
                          ) AS a_13,
                          SAME(a_8, a_8) AS a_15,
                          SAME(a_2, a_2) AS a_16
                        )
                      ) AS aml_7
                  ) AS graphtablescan_17
                LIMIT 1) AS a_6
            FROM
              (
                SELECT
                  KeyValue.Key AS a_4
                FROM
                  KeyValue
              ) AS keyvalue_5
            LIMIT 1) AS a_3,
          (
            SELECT
              PROPERTY_EXISTS(a_2, name) AS a_20
          ) AS a_19,
          (
            SELECT
              SAME(a_2, a_2) AS a_22
          ) AS a_21,
          SAME(a_2, a_2) AS a_23
        )
      ) AS aml_1
  ) AS graphtablescan_24;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS ! %)
    COLUMNS(
      (
        FROM
          KeyValue
        |> SELECT
             KeyValue.Key AS a_4
        |> AS keyvalue_5
        |> SELECT
             (
               FROM
                 GRAPH_TABLE(
                   aml
                   MATCH
                     (a_8
                     IS %)
                   COLUMNS(
                     keyvalue_5.a_4 AS a_9,
                     PROPERTY_EXISTS(a_2, name) AS a_10,
                     (
                       SELECT
                         PROPERTY_EXISTS(a_8, name) AS a_12
                     ) AS a_11,
                     (
                       SELECT
                         SAME(a_8, a_8) AS a_14
                     ) AS a_13,
                     SAME(a_8, a_8) AS a_15,
                     SAME(a_2, a_2) AS a_16
                   )
                 ) AS aml_7
               |> SELECT
                    aml_7.a_9 AS a_9,
                    aml_7.a_10 AS a_10,
                    aml_7.a_11 AS a_11,
                    aml_7.a_13 AS a_13,
                    aml_7.a_15 AS a_15,
                    aml_7.a_16 AS a_16
               |> AS graphtablescan_17
               |> SELECT
                    1 AS a_18
               |> LIMIT 1) AS a_6
        |> LIMIT 1) AS a_3,
      (
        SELECT
          PROPERTY_EXISTS(a_2, name) AS a_20
      ) AS a_19,
      (
        SELECT
          SAME(a_2, a_2) AS a_22
      ) AS a_21,
      SAME(a_2, a_2) AS a_23
    )
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS a_3,
     aml_1.a_19 AS a_19,
     aml_1.a_21 AS a_21,
     aml_1.a_23 AS a_23
|> AS graphtablescan_24
|> SELECT
     1 AS a_25;
--
# Nested subquery: outer layer has multiple matching table chains but inner
# layer has no matching table chain.
ALTERNATION GROUP: %,!%
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[sub_query#15, n_has_name#17, same_n_n#19, same_n_n_2#20]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphWildCardLabel(parse_location=136-137)
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-sub_query#15 :=
          | +-SubqueryExpr
          |   +-type=INT64
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-subquery=
          |     +-LimitOffsetScan
          |       +-column_list=[$expr_subquery.$col1#14]
          |       +-input_scan=
          |       | +-ProjectScan
          |       |   +-column_list=[$expr_subquery.$col1#14]
          |       |   +-expr_list=
          |       |   | +-$col1#14 :=
          |       |   |   +-SubqueryExpr
          |       |   |     +-type=INT64
          |       |   |     +-subquery_type=SCALAR
          |       |   |     +-parameter_list=
          |       |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |     | +-ColumnRef(type=INT64, column=KeyValue.Key#2)
          |       |   |     +-subquery=
          |       |   |       +-LimitOffsetScan
          |       |   |         +-column_list=[$expr_subquery.$col1#13]
          |       |   |         +-input_scan=
          |       |   |         | +-ProjectScan
          |       |   |         |   +-column_list=[$expr_subquery.$col1#13]
          |       |   |         |   +-expr_list=
          |       |   |         |   | +-$col1#13 := Literal(type=INT64, value=1)
          |       |   |         |   +-input_scan=
          |       |   |         |     +-GraphTableScan
          |       |   |         |       +-column_list=$graph_table.[key#5, n_has_name#6, m_has_name#8, same_m_m#10, same_m_m_2#11, same_n_n#12]
          |       |   |         |       +-property_graph=aml
          |       |   |         |       +-input_scan=
          |       |   |         |       | +-GraphScan
          |       |   |         |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |   +-input_scan_list=
          |       |   |         |       |     +-GraphPathScan
          |       |   |         |       |       +-column_list=[$element_table.m#4]
          |       |   |         |       |       +-input_scan_list=
          |       |   |         |       |       | +-GraphNodeScan
          |       |   |         |       |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |       |   +-label_expr=
          |       |   |         |       |       |   | +-GraphLabelNaryExpr
          |       |   |         |       |       |   |   +-parse_location=230-232
          |       |   |         |       |       |   |   +-op=NOT
          |       |   |         |       |       |   |   +-operand_list=
          |       |   |         |       |       |   |     +-GraphWildCardLabel(parse_location=231-232)
          |       |   |         |       |       |   +-target_element_table_list=[]
          |       |   |         |       |       +-head=$element_table.m#4
          |       |   |         |       |       +-tail=$element_table.m#4
          |       |   |         |       +-shape_expr_list=
          |       |   |         |         +-key#5 := ColumnRef(type=INT64, column=KeyValue.Key#2, is_correlated=TRUE)
          |       |   |         |         +-n_has_name#6 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |         |   +-Literal(type=STRING, value="name")
          |       |   |         |         +-m_has_name#8 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#7]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#7 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<>, STRING) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-Literal(type=STRING, value="name")
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m#10 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#9]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#9 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m_2#11 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<>) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<>, column=$element_table.m#4)
          |       |   |         |         +-same_n_n#12 :=
          |       |   |         |           +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         +-limit=
          |       |   |           +-Literal(type=INT64, value=1)
          |       |   +-input_scan=
          |       |     +-TableScan(column_list=[KeyValue.Key#2], table=KeyValue, column_index_list=[0])
          |       +-limit=
          |         +-Literal(type=INT64, value=1)
          +-n_has_name#17 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#16]
          |       +-expr_list=
          |       | +-$col1#16 :=
          |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-Literal(type=STRING, value="name")
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n#19 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#18]
          |       +-expr_list=
          |       | +-$col1#18 :=
          |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n_2#20 :=
            +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_25
FROM
  (
    SELECT
      aml_1.a_3 AS a_3,
      aml_1.a_19 AS a_19,
      aml_1.a_21 AS a_21,
      aml_1.a_23 AS a_23
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS %)
        COLUMNS(
          (
            SELECT
              (
                SELECT
                  1 AS a_18
                FROM
                  (
                    SELECT
                      aml_7.a_9 AS a_9,
                      aml_7.a_10 AS a_10,
                      aml_7.a_11 AS a_11,
                      aml_7.a_13 AS a_13,
                      aml_7.a_15 AS a_15,
                      aml_7.a_16 AS a_16
                    FROM
                      GRAPH_TABLE(
                        aml
                        MATCH
                          (a_8
                          IS ! %)
                        COLUMNS(
                          keyvalue_5.a_4 AS a_9,
                          PROPERTY_EXISTS(a_2, name) AS a_10,
                          (
                            SELECT
                              PROPERTY_EXISTS(a_8, name) AS a_12
                          ) AS a_11,
                          (
                            SELECT
                              SAME(a_8, a_8) AS a_14
                          ) AS a_13,
                          SAME(a_8, a_8) AS a_15,
                          SAME(a_2, a_2) AS a_16
                        )
                      ) AS aml_7
                  ) AS graphtablescan_17
                LIMIT 1) AS a_6
            FROM
              (
                SELECT
                  KeyValue.Key AS a_4
                FROM
                  KeyValue
              ) AS keyvalue_5
            LIMIT 1) AS a_3,
          (
            SELECT
              PROPERTY_EXISTS(a_2, name) AS a_20
          ) AS a_19,
          (
            SELECT
              SAME(a_2, a_2) AS a_22
          ) AS a_21,
          SAME(a_2, a_2) AS a_23
        )
      ) AS aml_1
  ) AS graphtablescan_24;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS %)
    COLUMNS(
      (
        FROM
          KeyValue
        |> SELECT
             KeyValue.Key AS a_4
        |> AS keyvalue_5
        |> SELECT
             (
               FROM
                 GRAPH_TABLE(
                   aml
                   MATCH
                     (a_8
                     IS ! %)
                   COLUMNS(
                     keyvalue_5.a_4 AS a_9,
                     PROPERTY_EXISTS(a_2, name) AS a_10,
                     (
                       SELECT
                         PROPERTY_EXISTS(a_8, name) AS a_12
                     ) AS a_11,
                     (
                       SELECT
                         SAME(a_8, a_8) AS a_14
                     ) AS a_13,
                     SAME(a_8, a_8) AS a_15,
                     SAME(a_2, a_2) AS a_16
                   )
                 ) AS aml_7
               |> SELECT
                    aml_7.a_9 AS a_9,
                    aml_7.a_10 AS a_10,
                    aml_7.a_11 AS a_11,
                    aml_7.a_13 AS a_13,
                    aml_7.a_15 AS a_15,
                    aml_7.a_16 AS a_16
               |> AS graphtablescan_17
               |> SELECT
                    1 AS a_18
               |> LIMIT 1) AS a_6
        |> LIMIT 1) AS a_3,
      (
        SELECT
          PROPERTY_EXISTS(a_2, name) AS a_20
      ) AS a_19,
      (
        SELECT
          SAME(a_2, a_2) AS a_22
      ) AS a_21,
      SAME(a_2, a_2) AS a_23
    )
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS a_3,
     aml_1.a_19 AS a_19,
     aml_1.a_21 AS a_21,
     aml_1.a_23 AS a_23
|> AS graphtablescan_24
|> SELECT
     1 AS a_25;
--
# Nested subquery: both outer layer and inner layer has multiple matching table
# chains.
ALTERNATION GROUP: %,%
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[sub_query#15, n_has_name#17, same_n_n#19, same_n_n_2#20]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphWildCardLabel(parse_location=136-137)
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-sub_query#15 :=
          | +-SubqueryExpr
          |   +-type=INT64
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-subquery=
          |     +-LimitOffsetScan
          |       +-column_list=[$expr_subquery.$col1#14]
          |       +-input_scan=
          |       | +-ProjectScan
          |       |   +-column_list=[$expr_subquery.$col1#14]
          |       |   +-expr_list=
          |       |   | +-$col1#14 :=
          |       |   |   +-SubqueryExpr
          |       |   |     +-type=INT64
          |       |   |     +-subquery_type=SCALAR
          |       |   |     +-parameter_list=
          |       |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |     | +-ColumnRef(type=INT64, column=KeyValue.Key#2)
          |       |   |     +-subquery=
          |       |   |       +-LimitOffsetScan
          |       |   |         +-column_list=[$expr_subquery.$col1#13]
          |       |   |         +-input_scan=
          |       |   |         | +-ProjectScan
          |       |   |         |   +-column_list=[$expr_subquery.$col1#13]
          |       |   |         |   +-expr_list=
          |       |   |         |   | +-$col1#13 := Literal(type=INT64, value=1)
          |       |   |         |   +-input_scan=
          |       |   |         |     +-GraphTableScan
          |       |   |         |       +-column_list=$graph_table.[key#5, n_has_name#6, m_has_name#8, same_m_m#10, same_m_m_2#11, same_n_n#12]
          |       |   |         |       +-property_graph=aml
          |       |   |         |       +-input_scan=
          |       |   |         |       | +-GraphScan
          |       |   |         |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |   +-input_scan_list=
          |       |   |         |       |     +-GraphPathScan
          |       |   |         |       |       +-column_list=[$element_table.m#4]
          |       |   |         |       |       +-input_scan_list=
          |       |   |         |       |       | +-GraphNodeScan
          |       |   |         |       |       |   +-column_list=[$element_table.m#4]
          |       |   |         |       |       |   +-label_expr=
          |       |   |         |       |       |   | +-GraphWildCardLabel(parse_location=230-231)
          |       |   |         |       |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
          |       |   |         |       |       +-head=$element_table.m#4
          |       |   |         |       |       +-tail=$element_table.m#4
          |       |   |         |       +-shape_expr_list=
          |       |   |         |         +-key#5 := ColumnRef(type=INT64, column=KeyValue.Key#2, is_correlated=TRUE)
          |       |   |         |         +-n_has_name#6 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |         |   +-Literal(type=STRING, value="name")
          |       |   |         |         +-m_has_name#8 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#7]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#7 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-Literal(type=STRING, value="name")
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m#10 :=
          |       |   |         |         | +-SubqueryExpr
          |       |   |         |         |   +-type=BOOL
          |       |   |         |         |   +-subquery_type=SCALAR
          |       |   |         |         |   +-parameter_list=
          |       |   |         |         |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         |   +-subquery=
          |       |   |         |         |     +-ProjectScan
          |       |   |         |         |       +-column_list=[$expr_subquery.$col1#9]
          |       |   |         |         |       +-expr_list=
          |       |   |         |         |       | +-$col1#9 :=
          |       |   |         |         |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
          |       |   |         |         |       +-input_scan=
          |       |   |         |         |         +-SingleRowScan
          |       |   |         |         +-same_m_m_2#11 :=
          |       |   |         |         | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
          |       |   |         |         +-same_n_n#12 :=
          |       |   |         |           +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         |             +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |   |         +-limit=
          |       |   |           +-Literal(type=INT64, value=1)
          |       |   +-input_scan=
          |       |     +-TableScan(column_list=[KeyValue.Key#2], table=KeyValue, column_index_list=[0])
          |       +-limit=
          |         +-Literal(type=INT64, value=1)
          +-n_has_name#17 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#16]
          |       +-expr_list=
          |       | +-$col1#16 :=
          |       |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-Literal(type=STRING, value="name")
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n#19 :=
          | +-SubqueryExpr
          |   +-type=BOOL
          |   +-subquery_type=SCALAR
          |   +-parameter_list=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
          |   +-subquery=
          |     +-ProjectScan
          |       +-column_list=[$expr_subquery.$col1#18]
          |       +-expr_list=
          |       | +-$col1#18 :=
          |       |   +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
          |       +-input_scan=
          |         +-SingleRowScan
          +-same_n_n_2#20 :=
            +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_25
FROM
  (
    SELECT
      aml_1.a_3 AS a_3,
      aml_1.a_19 AS a_19,
      aml_1.a_21 AS a_21,
      aml_1.a_23 AS a_23
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS %)
        COLUMNS(
          (
            SELECT
              (
                SELECT
                  1 AS a_18
                FROM
                  (
                    SELECT
                      aml_7.a_9 AS a_9,
                      aml_7.a_10 AS a_10,
                      aml_7.a_11 AS a_11,
                      aml_7.a_13 AS a_13,
                      aml_7.a_15 AS a_15,
                      aml_7.a_16 AS a_16
                    FROM
                      GRAPH_TABLE(
                        aml
                        MATCH
                          (a_8
                          IS %)
                        COLUMNS(
                          keyvalue_5.a_4 AS a_9,
                          PROPERTY_EXISTS(a_2, name) AS a_10,
                          (
                            SELECT
                              PROPERTY_EXISTS(a_8, name) AS a_12
                          ) AS a_11,
                          (
                            SELECT
                              SAME(a_8, a_8) AS a_14
                          ) AS a_13,
                          SAME(a_8, a_8) AS a_15,
                          SAME(a_2, a_2) AS a_16
                        )
                      ) AS aml_7
                  ) AS graphtablescan_17
                LIMIT 1) AS a_6
            FROM
              (
                SELECT
                  KeyValue.Key AS a_4
                FROM
                  KeyValue
              ) AS keyvalue_5
            LIMIT 1) AS a_3,
          (
            SELECT
              PROPERTY_EXISTS(a_2, name) AS a_20
          ) AS a_19,
          (
            SELECT
              SAME(a_2, a_2) AS a_22
          ) AS a_21,
          SAME(a_2, a_2) AS a_23
        )
      ) AS aml_1
  ) AS graphtablescan_24;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS %)
    COLUMNS(
      (
        FROM
          KeyValue
        |> SELECT
             KeyValue.Key AS a_4
        |> AS keyvalue_5
        |> SELECT
             (
               FROM
                 GRAPH_TABLE(
                   aml
                   MATCH
                     (a_8
                     IS %)
                   COLUMNS(
                     keyvalue_5.a_4 AS a_9,
                     PROPERTY_EXISTS(a_2, name) AS a_10,
                     (
                       SELECT
                         PROPERTY_EXISTS(a_8, name) AS a_12
                     ) AS a_11,
                     (
                       SELECT
                         SAME(a_8, a_8) AS a_14
                     ) AS a_13,
                     SAME(a_8, a_8) AS a_15,
                     SAME(a_2, a_2) AS a_16
                   )
                 ) AS aml_7
               |> SELECT
                    aml_7.a_9 AS a_9,
                    aml_7.a_10 AS a_10,
                    aml_7.a_11 AS a_11,
                    aml_7.a_13 AS a_13,
                    aml_7.a_15 AS a_15,
                    aml_7.a_16 AS a_16
               |> AS graphtablescan_17
               |> SELECT
                    1 AS a_18
               |> LIMIT 1) AS a_6
        |> LIMIT 1) AS a_3,
      (
        SELECT
          PROPERTY_EXISTS(a_2, name) AS a_20
      ) AS a_19,
      (
        SELECT
          SAME(a_2, a_2) AS a_22
      ) AS a_21,
      SAME(a_2, a_2) AS a_23
    )
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS a_3,
     aml_1.a_19 AS a_19,
     aml_1.a_21 AS a_21,
     aml_1.a_23 AS a_23
|> AS graphtablescan_24
|> SELECT
     1 AS a_25;
