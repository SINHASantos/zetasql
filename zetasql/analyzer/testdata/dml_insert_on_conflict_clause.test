# Tests for ON CONFLICT clause in INSERT DML

[default language_features=MAXIMUM]
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT DO NOTHING;
--
ERROR: ON CONFLICT is not supported [at 1:37]
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT DO NOTHING;
                                    ^
==

INSERT OR REPLACE INTO KeyValue(Key) VALUES(1) ON CONFLICT DO UPDATE SET Key = 2;
--
ERROR: ON CONFLICT is not supported [at 1:48]
INSERT OR REPLACE INTO KeyValue(Key) VALUES(1) ON CONFLICT DO UPDATE SET Key ...
                                               ^
==

[default language_features=MAXIMUM,+INSERT_ON_CONFLICT_CLAUSE,+DML_RETURNING]

INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT {{|(Key)|(Key, value)|(Key, Key)|(`Key`, `Key`)}}
DO NOTHING;
--
ALTERNATION GROUP: <empty>
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=WRITE
+-on_conflict_clause=
  +-OnConflictClause(conflict_action=NOTHING)
--
ALTERNATION GROUPS:
    (Key)
    (Key, Key)
    (`Key`, `Key`)
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE
+-on_conflict_clause=
  +-OnConflictClause(conflict_action=NOTHING, conflict_target_column_list=[KeyValue.Key#1])
--
ALTERNATION GROUP: (Key, value)
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE,READ
+-on_conflict_clause=
  +-OnConflictClause(conflict_action=NOTHING, conflict_target_column_list=KeyValue.[Key#1, Value#2])
==

INSERT OR {{REPLACE|IGNORE|UPDATE}} INTO KeyValue(Key) VALUES(1) ON CONFLICT DO NOTHING;
--
ALTERNATION GROUP: REPLACE
--
ERROR: ON CONFLICT is not allowed with insert mode: OR REPLACE [at 1:48]
INSERT OR REPLACE INTO KeyValue(Key) VALUES(1) ON CONFLICT DO NOTHING;
                                               ^
--
ALTERNATION GROUP: IGNORE
--
ERROR: ON CONFLICT is not allowed with insert mode: OR IGNORE [at 1:47]
INSERT OR IGNORE INTO KeyValue(Key) VALUES(1) ON CONFLICT DO NOTHING;
                                              ^
--
ALTERNATION GROUP: UPDATE
--
ERROR: ON CONFLICT is not allowed with insert mode: OR UPDATE [at 1:47]
INSERT OR UPDATE INTO KeyValue(Key) VALUES(1) ON CONFLICT DO NOTHING;
                                              ^
==

# DO UPDATE: Conflict target is mandatory
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT
DO UPDATE SET Key = 1 + Key;
--
ERROR: ON CONFLICT DO UPDATE requires a constraint inference or unique constraint name [at 1:37]
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT
                                    ^
==

# Alias is mandatory in SET and WHERE clause expressions.
# Ambiguous column error is returned.
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key)
DO UPDATE SET Key = 1 + Key
WHERE Keyvalue.Key > 10;
--
ERROR: Column name Key is ambiguous [at 2:25]
DO UPDATE SET Key = 1 + Key
                        ^
==

# Alias is mandatory in SET and WHERE clause expressions.
# Ambiguous column error is returned.
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key)
DO UPDATE SET Key = 1
WHERE Key > 10;
--
ERROR: Column name Key is ambiguous [at 3:7]
WHERE Key > 10;
      ^
==

# Cannot access insert row values in THEN RETURN. Returns unknown column error.
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key)
DO UPDATE SET Key = 1 + Key
THEN RETURN excluded.Key;
--
ERROR: Unrecognized name: excluded [at 3:13]
THEN RETURN excluded.Key;
            ^
==

# Unrecognized column error in conflict target.
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key, badcol)
DO UPDATE SET Key = 1 + excluded.Key;
--
ERROR: Column badcol is not present in table KeyValue [at 1:54]
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key, badcol)
                                                     ^
==

# ON CONFLICT clause is not allowed in nested DML.
UPDATE ComplexTypes SET (INSERT INTO kitchensink.repeated_int32_val VALUES (1)
                         ON CONFLICT DO NOTHING)
WHERE TRUE
--
ERROR: Nested INSERTs cannot have ON CONFLICT clause [at 2:26]
                         ON CONFLICT DO NOTHING)
                         ^
==

# DO UPDATE on non-writable Column
INSERT INTO AllNonKeysNonWritable(Key) Values (1)
ON CONFLICT(Key) DO UPDATE SET Value = '1';
--
ERROR: Cannot UPDATE value on non-writable column: Value [at 2:32]
ON CONFLICT(Key) DO UPDATE SET Value = '1';
                               ^
==

# Unique constraint name is not validated
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT ON UNIQUE CONSTRAINT {{UniqCol|`UniqCol`}}
DO UPDATE SET Key = 1 + excluded.Key;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=WRITE
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-unique_constraint_name="UniqCol"
    +-insert_row_scan=
    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0], alias="excluded")
    +-update_item_list=
      +-UpdateItem
        +-target=
        | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-set_value=
          +-DMLValue
            +-value=
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-Literal(type=INT64, value=1)
                +-ColumnRef(type=INT64, column=KeyValue.Key#3)
==

# DO UPDATE updates with constant value only, reads insert row only,
# reads table row only.
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key)
DO UPDATE SET Key = {{1|excluded.Key|KeyValue.Key}}
WHERE Keyvalue.Key > 10;
--
ALTERNATION GROUP: 1
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-conflict_target_column_list=[KeyValue.Key#1]
    +-update_item_list=
    | +-UpdateItem
    |   +-target=
    |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-set_value=
    |     +-DMLValue
    |       +-value=
    |         +-Literal(type=INT64, value=1)
    +-update_where_expression=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-Literal(type=INT64, value=10)
--
ALTERNATION GROUP: excluded.Key
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-conflict_target_column_list=[KeyValue.Key#1]
    +-insert_row_scan=
    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0], alias="excluded")
    +-update_item_list=
    | +-UpdateItem
    |   +-target=
    |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-set_value=
    |     +-DMLValue
    |       +-value=
    |         +-ColumnRef(type=INT64, column=KeyValue.Key#3)
    +-update_where_expression=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-Literal(type=INT64, value=10)
--
ALTERNATION GROUP: KeyValue.Key
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-conflict_target_column_list=[KeyValue.Key#1]
    +-update_item_list=
    | +-UpdateItem
    |   +-target=
    |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-set_value=
    |     +-DMLValue
    |       +-value=
    |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-update_where_expression=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-Literal(type=INT64, value=10)
==

# DO UPDATE writes column not in insert column list
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key)
DO UPDATE SET Key = 1 + excluded.Key,
              Value = CONCAT(CAST(KeyValue.Key AS STRING), "hello")
WHERE Keyvalue.Key > 10;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE,WRITE
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-conflict_target_column_list=[KeyValue.Key#1]
    +-insert_row_scan=
    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0], alias="excluded")
    +-update_item_list=
    | +-UpdateItem
    | | +-target=
    | | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | | +-set_value=
    | |   +-DMLValue
    | |     +-value=
    | |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |         +-Literal(type=INT64, value=1)
    | |         +-ColumnRef(type=INT64, column=KeyValue.Key#3)
    | +-UpdateItem
    |   +-target=
    |   | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   +-set_value=
    |     +-DMLValue
    |       +-value=
    |         +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |           +-Cast(INT64 -> STRING)
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |           +-Literal(type=STRING, value="hello")
    +-update_where_expression=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-Literal(type=INT64, value=10)
==

# DO UPDATE expression reads column not in insert column list
INSERT INTO KeyValue(Key) VALUES(1) ON CONFLICT(Key)
DO UPDATE SET Key = 1 + excluded.Key
WHERE {{excluded.Value|KeyValue.Value}} IS NOT NULL;
--
ALTERNATION GROUP: excluded.Value
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-conflict_target_column_list=[KeyValue.Key#1]
    +-insert_row_scan=
    | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="excluded")
    +-update_item_list=
    | +-UpdateItem
    |   +-target=
    |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-set_value=
    |     +-DMLValue
    |       +-value=
    |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           +-Literal(type=INT64, value=1)
    |           +-ColumnRef(type=INT64, column=KeyValue.Key#3)
    +-update_where_expression=
      +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
          +-ColumnRef(type=STRING, column=KeyValue.Value#4)
--
ALTERNATION GROUP: KeyValue.Value
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=[KeyValue.Key#1]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=1)
+-column_access_list=READ_WRITE,READ
+-on_conflict_clause=
  +-OnConflictClause
    +-conflict_action=UPDATE
    +-conflict_target_column_list=[KeyValue.Key#1]
    +-insert_row_scan=
    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0], alias="excluded")
    +-update_item_list=
    | +-UpdateItem
    |   +-target=
    |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-set_value=
    |     +-DMLValue
    |       +-value=
    |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           +-Literal(type=INT64, value=1)
    |           +-ColumnRef(type=INT64, column=KeyValue.Key#3)
    +-update_where_expression=
      +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
          +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

# TODO: Add java support for generated expressions.
[no_java]
# DO UPDATE updates a dependency column of generated column(s)
# All generated columns are re-computed.
INSERT INTO TableWithGeneratedColumn(C) VALUES(10)
ON CONFLICT(C) DO UPDATE SET C = 1;
--
InsertStmt
+-table_scan=
| +-TableScan(column_list=TableWithGeneratedColumn.[A#1, B#2, C#3], table=TableWithGeneratedColumn, column_index_list=[0, 1, 2])
+-insert_column_list=[TableWithGeneratedColumn.C#3]
+-row_list=
| +-InsertRow
|   +-value_list=
|     +-DMLValue
|       +-value=
|         +-Literal(type=INT64, value=10)
+-column_access_list=READ,READ,READ_WRITE
+-on_conflict_clause=
| +-OnConflictClause
|   +-conflict_action=UPDATE
|   +-conflict_target_column_list=[TableWithGeneratedColumn.C#3]
|   +-update_item_list=
|     +-UpdateItem
|       +-target=
|       | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#3)
|       +-set_value=
|         +-DMLValue
|           +-value=
|             +-Literal(type=INT64, value=1)
+-topologically_sorted_generated_column_id_list=[2, 1, 4]
+-generated_column_expr_list=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
  | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#3)
  | +-Literal(type=INT64, value=1)
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
  | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.B#2)
  | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#3)
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.A#1)
    | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.B#2)
    +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#3)
==
