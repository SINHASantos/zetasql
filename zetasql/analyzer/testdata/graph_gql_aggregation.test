[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_RETURN_EXTENSIONS]
[default no_test_extract_table_names]
[default no_run_sqlbuilder]
# No unparser due to SQLBuilder visitor not implemented for GraphMakeElement

# RETURN items, including aggregating expressions
# must have inferred or explicit names.
select gt.* from graph_table(aml match (n) return COUNT(n.id)) as gt
--
ERROR: A name must be explicitly defined for this column [at 5:51]
select gt.* from graph_table(aml match (n) return COUNT(n.id)) as gt
                                                  ^
==

# Ambiguous column names are an error
select gt.* from graph_table(aml match (n)
  return COUNT(n.id) as col1, SUM(n.id) as col1) as gt
--
ERROR: Ambiguous name: col1 [at 2:10]
  return COUNT(n.id) as col1, SUM(n.id) as col1) as gt
         ^
==

# Dotstar expansion on graph element is not supported in RETURN
select gt.* from graph_table(aml match (n)
  return n.*)
--
ERROR: Syntax error: Unexpected "*" [at 2:12]
  return n.*)
           ^
==

# GROUP BY ordinal is an error
select gt.* from
graph_table(aml
  match (n)
  return n.id, COUNT(*) as count
    GROUP BY 1
) gt
--
ERROR: GROUP BY ordinal is not allowed in RETURN [at 5:14]
    GROUP BY 1
             ^
==

# GROUP BY () is an error
select gt.* from
graph_table(aml
  match (n)
  return n.id, COUNT(*) as count
    GROUP BY ()
) gt
--
ERROR: GROUP BY () is not supported [at 5:14]
    GROUP BY ()
             ^
==

# GROUPING builtin function is not allowed even in the absence of
# other GROUPING SETS features
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+GROUPING_BUILTIN]
select gt.* from
graph_table(aml
  match (n)
  return SUM(n.id) as col1, GROUPING(n.id) as n_id_group
    GROUP BY n.id
) gt
--
ERROR: GROUPING function is not allowed in RETURN [at 4:29]
  return SUM(n.id) as col1, GROUPING(n.id) as n_id_group
                            ^
==

# GROUPING SETS, ROLLUP, CUBE are not allowed
select gt.* from
graph_table(aml
  match (n)
  return SUM(n.id) as col1
    GROUP BY ROLLUP(n.id)
) gt
--
ERROR: RETURN does not support ROLLUP, CUBE, or GROUPING SETS [at 5:5]
    GROUP BY ROLLUP(n.id)
    ^
==

# Non aggregating expression produces error if not in GROUP BY
select gt.* from
graph_table(aml
  match (n)
  return n.name, n.id, SUM(n.id) as col1
    GROUP BY n.id
) gt
--
ERROR: Graph RETURN operator expression references n.name which is neither grouped nor aggregated [at 4:10]
  return n.name, n.id, SUM(n.id) as col1
         ^
==

# Fails at name resolution (same as regular SQL query)
# (select list item can not see alias produced by other items)
select gt.* from
graph_table(aml
  match (n)
  return 1 AS x, SUM(x) as col1
    GROUP BY x
) gt
--
ERROR: Unrecognized name: x [at 4:22]
  return 1 AS x, SUM(x) as col1
                     ^
==

select gt.* from
graph_table(aml
  match (n)
  return n.id, SUM(n.id) as col1
    GROUP BY n.id
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#3 AS id [INT64]
| +-$graph_table.col1#2 AS col1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#3, col1#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#3, col1#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#3, col1#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#3, col1#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[id#3, col1#2]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[id#3, col1#2]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1])
                        +-group_by_list=
                        | +-id#3 :=
                        |   +-GraphGetElementProperty
                        |     +-type=INT64
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |     +-property=id(INT64)
                        +-aggregate_list=
                          +-col1#2 :=
                            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                                +-property=id(INT64)
==

# Aggregate function call without GROUP BY
select gt.* from
graph_table(aml
  match (n)
  return SUM(n.id) as col1
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.col1#2 AS col1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col1#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col1#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.col1#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.col1#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.col1#2]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$graph_table.col1#2]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1])
                        +-aggregate_list=
                          +-col1#2 :=
                            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                                +-property=id(INT64)
==

# GROUP BY without aggregating expression
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.birthday AS col1, a.balance as col2
    GROUP BY col1, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.col1#4 AS col1 [DATE]
| +-$graph_table.balance#5 AS col2 [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[col1#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[col1#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[col1#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[col1#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[col1#4, balance#5]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[col1#4, balance#5]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                        +-group_by_list=
                          +-col1#4 :=
                          | +-GraphGetElementProperty
                          |   +-type=DATE
                          |   +-expr=
                          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                          |   +-property=birthday(DATE)
                          +-balance#5 :=
                            +-GraphGetElementProperty
                              +-type=UINT64
                              +-expr=
                              | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                              +-property=balance(UINT64)
==

# Simple aggregating expression
# Match SELECT item with GROUP BY item using
# 1. explicit alias
# 2. implicit alias
# 3. property access
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.birthday AS col1, p.name, a.balance as col2, COUNT(*) as count
    GROUP BY col1, name, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.col1#5 AS col1 [DATE]
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.balance#7 AS col2 [UINT64]
| +-$graph_table.count#4 AS count [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                        +-group_by_list=
                        | +-col1#5 :=
                        | | +-GraphGetElementProperty
                        | |   +-type=DATE
                        | |   +-expr=
                        | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                        | |   +-property=birthday(DATE)
                        | +-name#6 :=
                        | | +-GraphGetElementProperty
                        | |   +-type=STRING
                        | |   +-expr=
                        | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                        | |   +-property=name(STRING)
                        | +-balance#7 :=
                        |   +-GraphGetElementProperty
                        |     +-type=UINT64
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                        |     +-property=balance(UINT64)
                        +-aggregate_list=
                          +-count#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+GROUP_BY_ALL]
# GROUP BY ALL in RETURN
# Note the volatile expression RAND is excluded from `group_by_list`
select gt.* from
graph_table(aml
  match (n)
  return n.name, SUM(n.id) as col1, RAND() as random
    GROUP BY ALL
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.col1#2 AS col1 [INT64]
| +-$graph_table.random#4 AS random [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, col1#2, random#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, col1#2, random#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, col1#2, random#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, col1#2, random#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, col1#2, random#4]
                    +-expr_list=
                    | +-random#4 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[name#3, col1#2]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1])
                        +-group_by_list=
                        | +-name#3 :=
                        |   +-GraphGetElementProperty
                        |     +-type=STRING
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |     +-property=name(STRING)
                        +-aggregate_list=
                          +-col1#2 :=
                            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                                +-property=id(INT64)
==

# Complex aggregating expression
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN p.birthday as x, SUM(a.balance)/COUNT(a.balance) + 10 AS avg_balance
    GROUP BY x
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#6 AS x [DATE]
| +-$graph_table.avg_balance#7 AS avg_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#6, avg_balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#6, avg_balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#6, avg_balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#6, avg_balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[x#6, avg_balance#7]
                    +-expr_list=
                    | +-avg_balance#7 :=
                    |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                    |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                    |     | +-Cast(UINT64 -> DOUBLE)
                    |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                    |     | +-Cast(INT64 -> DOUBLE)
                    |     |   +-ColumnRef(type=INT64, column=$graph_table.$agg2#5)
                    |     +-Literal(type=DOUBLE, value=10)
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                        +-group_by_list=
                        | +-x#6 :=
                        |   +-GraphGetElementProperty
                        |     +-type=DATE
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                        |     +-property=birthday(DATE)
                        +-aggregate_list=
                          +-$agg1#4 :=
                          | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                          |   +-GraphGetElementProperty
                          |     +-type=UINT64
                          |     +-expr=
                          |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                          |     +-property=balance(UINT64)
                          +-$agg2#5 :=
                            +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=UINT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                                +-property=balance(UINT64)
==

# Aggregations with post-aggregation expressions
select gt.* from
graph_table(aml
  match (a:Account)
  RETURN ARRAY_AGG(a.id)[OFFSET(0)] AS first_acc_id
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.first_acc_id#3 AS first_acc_id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.first_acc_id#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.first_acc_id#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.first_acc_id#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.first_acc_id#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-51, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.a#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.first_acc_id#3]
                    +-expr_list=
                    | +-first_acc_id#3 :=
                    |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
                    |     +-ColumnRef(type=ARRAY<INT64>, column=$graph_table.$agg1#2)
                    |     +-Literal(type=INT64, value=0)
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$graph_table.$agg1#2]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.a#1])
                        +-aggregate_list=
                          +-$agg1#2 :=
                            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
                                +-property=id(INT64)
==

# DISTINCT
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN DISTINCT p.birthday, a.balance
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.birthday#4, $graph_table.balance#5]
                    |   +-expr_list=
                    |   | +-birthday#4 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=DATE
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=birthday(DATE)
                    |   | +-balance#5 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-group_by_list=
                      +-birthday#6 := ColumnRef(type=DATE, column=$graph_table.birthday#4)
                      +-balance#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)
==

# DISTINCT with aggregation
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN DISTINCT p.birthday as x, SUM(a.balance)/COUNT(a.balance) + 10 AS avg_balance
    GROUP BY x
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#8 AS x [DATE]
| +-$graph_table.avg_balance#9 AS avg_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#8, avg_balance#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#8, avg_balance#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#8, avg_balance#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#8, avg_balance#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                    +-column_list=$graph_table.[x#8, avg_balance#9]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5, avg_balance#7]
                    |   +-expr_list=
                    |   | +-avg_balance#7 :=
                    |   |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                    |   |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                    |   |     | +-Cast(UINT64 -> DOUBLE)
                    |   |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                    |   |     | +-Cast(INT64 -> DOUBLE)
                    |   |     |   +-ColumnRef(type=INT64, column=$graph_table.$agg2#5)
                    |   |     +-Literal(type=DOUBLE, value=10)
                    |   +-input_scan=
                    |     +-AggregateScan
                    |       +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5]
                    |       +-input_scan=
                    |       | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    |       +-group_by_list=
                    |       | +-x#6 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=DATE
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       |     +-property=birthday(DATE)
                    |       +-aggregate_list=
                    |         +-$agg1#4 :=
                    |         | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                    |         |   +-GraphGetElementProperty
                    |         |     +-type=UINT64
                    |         |     +-expr=
                    |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |         |     +-property=balance(UINT64)
                    |         +-$agg2#5 :=
                    |           +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
                    |             +-GraphGetElementProperty
                    |               +-type=UINT64
                    |               +-expr=
                    |               | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |               +-property=balance(UINT64)
                    +-group_by_list=
                      +-x#8 := ColumnRef(type=DATE, column=$graph_table.x#6)
                      +-avg_balance#9 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#7)
==

# Correlated column in aggregate expression in RETURN
select 1 from KeyValue kv where exists (
  select 1 from graph_table (
    aml match (n)
    return n.birthday as col1, SUM(1 + kv.Key) AS new_key
      GROUP BY col1
  )
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#6]
                +-expr_list=
                | +-$col1#6 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=$graph_table.[col1#5, new_key#4]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=$graph_table.[col1#5, new_key#4]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=$graph_table.[col1#5, new_key#4]
                            +-scan_list=
                              +-GraphScan
                              | +-column_list=[$element_table.n#3]
                              | +-input_scan_list=
                              | | +-GraphPathScan
                              | |   +-column_list=[$element_table.n#3]
                              | |   +-input_scan_list=
                              | |   | +-GraphNodeScan
                              | |   |   +-column_list=[$element_table.n#3]
                              | |   |   +-label_expr=
                              | |   |   | +-GraphLabelNaryExpr
                              | |   |   |   +-op=OR
                              | |   |   |   +-operand_list=
                              | |   |   |     +-GraphWildCardLabel
                              | |   |   |     +-GraphLabelNaryExpr
                              | |   |   |       +-op=NOT
                              | |   |   |       +-operand_list=
                              | |   |   |         +-GraphWildCardLabel
                              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                              | |   +-head=$element_table.n#3
                              | |   +-tail=$element_table.n#3
                              | +-input_scan=
                              |   +-SingleRowScan
                              +-ProjectScan
                                +-column_list=$graph_table.[col1#5, new_key#4]
                                +-input_scan=
                                  +-AggregateScan
                                    +-column_list=$graph_table.[col1#5, new_key#4]
                                    +-input_scan=
                                    | +-GraphRefScan(column_list=[$element_table.n#3])
                                    +-group_by_list=
                                    | +-col1#5 :=
                                    |   +-GraphGetElementProperty
                                    |     +-type=DATE
                                    |     +-expr=
                                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#3)
                                    |     +-property=birthday(DATE)
                                    +-aggregate_list=
                                      +-new_key#4 :=
                                        +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                                          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                                            +-Literal(type=INT64, value=1)
                                            +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
==

# Correlated column in GROUP BY item
select 1 from KeyValue kv where exists (
  select 1 from graph_table (
    aml match (n)
    return kv.Key as col1, SUM(1 + kv.Key) AS new_key
      GROUP BY kv.Key
  )
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#8 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#8]
    +-expr_list=
    | +-$col1#8 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#7]
                +-expr_list=
                | +-$col1#7 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=$graph_table.[col1#6, new_key#4]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=$graph_table.[col1#6, new_key#4]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=$graph_table.[col1#6, new_key#4]
                            +-scan_list=
                              +-GraphScan
                              | +-column_list=[$element_table.n#3]
                              | +-input_scan_list=
                              | | +-GraphPathScan
                              | |   +-column_list=[$element_table.n#3]
                              | |   +-input_scan_list=
                              | |   | +-GraphNodeScan
                              | |   |   +-column_list=[$element_table.n#3]
                              | |   |   +-label_expr=
                              | |   |   | +-GraphLabelNaryExpr
                              | |   |   |   +-op=OR
                              | |   |   |   +-operand_list=
                              | |   |   |     +-GraphWildCardLabel
                              | |   |   |     +-GraphLabelNaryExpr
                              | |   |   |       +-op=NOT
                              | |   |   |       +-operand_list=
                              | |   |   |         +-GraphWildCardLabel
                              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                              | |   +-head=$element_table.n#3
                              | |   +-tail=$element_table.n#3
                              | +-input_scan=
                              |   +-SingleRowScan
                              +-ProjectScan
                                +-column_list=$graph_table.[col1#6, new_key#4]
                                +-expr_list=
                                | +-col1#6 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                                +-input_scan=
                                  +-AggregateScan
                                    +-column_list=[$graph_table.new_key#4]
                                    +-input_scan=
                                    | +-GraphRefScan(column_list=[$element_table.n#3])
                                    +-group_by_list=
                                    | +-Key#5 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                                    +-aggregate_list=
                                      +-new_key#4 :=
                                        +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                                          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                                            +-Literal(type=INT64, value=1)
                                            +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
==

# Correlated subquery in RETURN as aggregate function argument
select gt.c_value from graph_table(
  aml match (n)
  return
    COUNT((select kv.value from KeyValue kv where kv.Key = n.id limit 1)) AS c_value
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.c_value#4 AS c_value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.c_value#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.c_value#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.c_value#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.c_value#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.c_value#4]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$graph_table.c_value#4]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1])
                        +-aggregate_list=
                          +-c_value#4 :=
                            +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
                              +-SubqueryExpr
                                +-type=STRING
                                +-subquery_type=SCALAR
                                +-parameter_list=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                                +-subquery=
                                  +-LimitOffsetScan
                                    +-column_list=[KeyValue.Value#3]
                                    +-input_scan=
                                    | +-ProjectScan
                                    |   +-column_list=[KeyValue.Value#3]
                                    |   +-input_scan=
                                    |     +-FilterScan
                                    |       +-column_list=KeyValue.[Key#2, Value#3]
                                    |       +-input_scan=
                                    |       | +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1], alias="kv")
                                    |       +-filter_expr=
                                    |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                                    |           +-ColumnRef(type=INT64, column=KeyValue.Key#2)
                                    |           +-GraphGetElementProperty
                                    |             +-type=INT64
                                    |             +-expr=
                                    |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
                                    |             +-property=id(INT64)
                                    +-limit=
                                      +-Literal(type=INT64, value=1)
==

# Intermediate RETURN clauses with aggregating expressions
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN DISTINCT p.birthday as x, SUM(a.balance)/COUNT(a.balance) + 10 AS avg_balance
    GROUP BY x
  NEXT
  MATCH (n)
  MATCH (p:Person)
  LET age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  FILTER WHERE 2 > 1
  RETURN n.id, COUNT(p.id) as person_count, avg_balance
    GROUP BY n.id, avg_balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#14 AS id [INT64]
| +-$graph_table.person_count#13 AS person_count [INT64]
| +-$graph_table.avg_balance#15 AS avg_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#14, person_count#13, avg_balance#15]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#14, person_count#13, avg_balance#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#14, person_count#13, avg_balance#15]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[x#8, avg_balance#9]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[p#1, $element1#2, a#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.p#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.$element1#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.a#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
              |   | |   |   +-target_element_table_list=[aml.Account]
              |   | |   +-head=$element_table.p#1
              |   | |   +-tail=$element_table.a#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-AggregateScan
              |     +-column_list=$graph_table.[x#8, avg_balance#9]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5, avg_balance#7]
              |     |   +-expr_list=
              |     |   | +-avg_balance#7 :=
              |     |   |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
              |     |   |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
              |     |   |     | +-Cast(UINT64 -> DOUBLE)
              |     |   |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
              |     |   |     | +-Cast(INT64 -> DOUBLE)
              |     |   |     |   +-ColumnRef(type=INT64, column=$graph_table.$agg2#5)
              |     |   |     +-Literal(type=DOUBLE, value=10)
              |     |   +-input_scan=
              |     |     +-AggregateScan
              |     |       +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5]
              |     |       +-input_scan=
              |     |       | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
              |     |       +-group_by_list=
              |     |       | +-x#6 :=
              |     |       |   +-GraphGetElementProperty
              |     |       |     +-type=DATE
              |     |       |     +-expr=
              |     |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
              |     |       |     +-property=birthday(DATE)
              |     |       +-aggregate_list=
              |     |         +-$agg1#4 :=
              |     |         | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
              |     |         |   +-GraphGetElementProperty
              |     |         |     +-type=UINT64
              |     |         |     +-expr=
              |     |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
              |     |         |     +-property=balance(UINT64)
              |     |         +-$agg2#5 :=
              |     |           +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
              |     |             +-GraphGetElementProperty
              |     |               +-type=UINT64
              |     |               +-expr=
              |     |               | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
              |     |               +-property=balance(UINT64)
              |     +-group_by_list=
              |       +-x#8 := ColumnRef(type=DATE, column=$graph_table.x#6)
              |       +-avg_balance#9 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#7)
              +-GraphLinearScan
                +-column_list=$graph_table.[id#14, person_count#13, avg_balance#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#10
                  | |   +-tail=$element_table.n#10
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[x#8, avg_balance#9])
                  +-GraphScan
                  | +-column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10, $element_table.p#11]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#11]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#11]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=200-206, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#11
                  | |   +-tail=$element_table.p#11
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10])
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10, $element_table.p#11]
                  | +-expr_list=
                  | | +-age#12 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#10)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10, $element_table.p#11])
                  +-FilterScan
                  | +-column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10, $element_table.p#11]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10, $element_table.p#11])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-Literal(type=INT64, value=2)
                  |     +-Literal(type=INT64, value=1)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#14, person_count#13, avg_balance#15]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[id#14, avg_balance#15, person_count#13]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$graph_table.x#8, $graph_table.avg_balance#9, $element_table.n#10, $element_table.p#11])
                        +-group_by_list=
                        | +-id#14 :=
                        | | +-GraphGetElementProperty
                        | |   +-type=INT64
                        | |   +-expr=
                        | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#10)
                        | |   +-property=id(INT64)
                        | +-avg_balance#15 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#9)
                        +-aggregate_list=
                          +-person_count#13 :=
                            +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#11)
                                +-property=id(INT64)
==

# Count star in RETURN
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN COUNT(*) as count
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.count#4 AS count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.count#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.count#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.count#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.count#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.count#4]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$graph_table.count#4]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                        +-aggregate_list=
                          +-count#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN p.birthday AS birthday, p.name as name, MAX(a.balance) as max_balance
    GROUP BY birthday, name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#5 AS birthday [DATE]
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.max_balance#4 AS max_balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                        +-group_by_list=
                        | +-birthday#5 :=
                        | | +-GraphGetElementProperty
                        | |   +-type=DATE
                        | |   +-expr=
                        | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                        | |   +-property=birthday(DATE)
                        | +-name#6 :=
                        |   +-GraphGetElementProperty
                        |     +-type=STRING
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                        |     +-property=name(STRING)
                        +-aggregate_list=
                          +-max_balance#4 :=
                            +-AggregateFunctionCall(ZetaSQL:max(UINT64) -> UINT64)
                              +-GraphGetElementProperty
                                +-type=UINT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                                +-property=balance(UINT64)
==

# GROUP BY graph elements across multiple MATCH
select gt.* from
graph_table(aml
  MATCH (p1:Person)-[e1]->(a)
  MATCH (p2:Person)-[e2]->(a:Account)
  RETURN COUNT(*) as count, ANY_VALUE(p1.id) as id, SUM(a.balance)/MAX(a.balance) + 2 as norm_balance
    GROUP BY p1,p2,e1,e2,a
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.count#7 AS count [INT64]
| +-$graph_table.id#8 AS id [INT64]
| +-$graph_table.norm_balance#16 AS norm_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[count#7, id#8, norm_balance#16]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[count#7, id#8, norm_balance#16]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[count#7, id#8, norm_balance#16]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[count#7, id#8, norm_balance#16]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p1#1, e1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p1#1, e1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=45-51, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.p1#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[p1#1, e1#2, a#3, p2#4, e2#5, a#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p2#4, e2#5, a#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p2#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=75-81, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e2#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=92-99, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p2#4
                  | |   +-tail=$element_table.a#6
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[p1#1, e1#2, a#3])
                  +-ProjectScan
                    +-column_list=$graph_table.[count#7, id#8, norm_balance#16]
                    +-expr_list=
                    | +-norm_balance#16 :=
                    |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                    |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                    |     | +-Cast(UINT64 -> DOUBLE)
                    |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg3#9)
                    |     | +-Cast(UINT64 -> DOUBLE)
                    |     |   +-ColumnRef(type=UINT64, column=$graph_table.$agg4#10)
                    |     +-Literal(type=DOUBLE, value=2)
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[count#7, id#8, $agg3#9, $agg4#10]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p1#1, e1#2, p2#4, e2#5, a#6])
                        +-group_by_list=
                        | +-p1#11 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p1#1)
                        | +-p2#12 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p2#4)
                        | +-e1#13 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e1#2)
                        | +-e2#14 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e2#5)
                        | +-a#15 := ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                        +-aggregate_list=
                          +-count#7 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                          +-id#8 :=
                          | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                          |   +-GraphGetElementProperty
                          |     +-type=INT64
                          |     +-expr=
                          |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p1#1)
                          |     +-property=id(INT64)
                          +-$agg3#9 :=
                          | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                          |   +-GraphGetElementProperty
                          |     +-type=UINT64
                          |     +-expr=
                          |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                          |     +-property=balance(UINT64)
                          +-$agg4#10 :=
                            +-AggregateFunctionCall(ZetaSQL:max(UINT64) -> UINT64)
                              +-GraphGetElementProperty
                                +-type=UINT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                                +-property=balance(UINT64)
==

# SQLBuilder test: aggregate expression with GROUP BY
[run_sqlbuilder]
[show_sqlbuilder_output]
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN p.name as name, COUNT(DISTINCT p.id) as distinct_ids
    GROUP BY name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#5 AS name [STRING]
| +-$graph_table.distinct_ids#4 AS distinct_ids [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#5, distinct_ids#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#5, distinct_ids#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#5, distinct_ids#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#5, distinct_ids#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[name#5, distinct_ids#4]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[name#5, distinct_ids#4]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                        +-group_by_list=
                        | +-name#5 :=
                        |   +-GraphGetElementProperty
                        |     +-type=STRING
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                        |     +-property=name(STRING)
                        +-aggregate_list=
                          +-distinct_ids#4 :=
                            +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                                +-property=id(INT64)
                              +-distinct=TRUE

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_7.a_5 AS name,
  projectscan_7.a_6 AS distinct_ids
FROM
  (
    SELECT
      aml_1.a_6 AS a_6,
      aml_1.a_5 AS a_5
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS Person)
          -[a_3
          IS (% | ! %)]->
          (a_4
          IS Account)
        RETURN
          a_2.name AS a_5,
          COUNT(DISTINCT a_2.id) AS a_6
        GROUP BY a_5
      ) AS aml_1
  ) AS projectscan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      COUNT(DISTINCT a_2.id) AS a_6
    GROUP BY a_5
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS a_6,
     aml_1.a_5 AS a_5
|> AS projectscan_7
|> SELECT
     projectscan_7.a_5 AS name,
     projectscan_7.a_6 AS distinct_ids;
==

# SQLBuilder test: more complex example
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+HAVING_IN_AGGREGATE]
[run_sqlbuilder]
[show_sqlbuilder_output]
select gt.* from
graph_table(aml
MATCH (p:Person)-[e]->(a:Account)
RETURN *
NEXT
  MATCH (p:Person)-[e]->(a:Account)
  RETURN distinct p.name as name, COUNT(DISTINCT p.id having max p.id+1) as distinct_ids, ARRAY_AGG(a.id)[OFFSET(0)] AS first_acc_id
    GROUP BY name
  NEXT
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#17 AS name [STRING]
| +-$graph_table.distinct_ids#18 AS distinct_ids [INT64]
| +-$graph_table.first_acc_id#19 AS first_acc_id [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[p#4, e#5, a#6]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[p#1, e#2, a#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[p#1, e#2, a#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.p#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=42-48, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.e#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.a#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=58-65, label=aml.Account)
              |   | |   |   +-target_element_table_list=[aml.Account]
              |   | |   +-head=$element_table.p#1
              |   | |   +-tail=$element_table.a#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=$graph_table.[p#4, e#5, a#6]
              |     +-expr_list=
              |     | +-p#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
              |     | +-e#5 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
              |     | +-a#6 := ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$element_table.[p#1, e#2, a#3])
              +-GraphLinearScan
              | +-column_list=$graph_table.[name#14, distinct_ids#15, first_acc_id#16]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$graph_table.p#4, $graph_table.e#5, $graph_table.a#6, $element_table.p#7, $element_table.e#8, $element_table.a#9]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[p#7, e#8, a#9]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.p#7]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=92-98, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.e#8]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.a#9]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=108-115, label=aml.Account)
              |   | |   |   +-target_element_table_list=[aml.Account]
              |   | |   +-head=$element_table.p#7
              |   | |   +-tail=$element_table.a#9
              |   | +-filter_expr=
              |   | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
              |   | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<balance UINT64, id INT64>, GRAPH_NODE(aml)<balance UINT64, id INT64>) -> BOOL)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#9)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$graph_table.a#6)
              |   | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
              |   | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#8)
              |   | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$graph_table.e#5)
              |   | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
              |   | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
              |   | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.p#4)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=$graph_table.[p#4, e#5, a#6])
              |   +-AggregateScan
              |     +-column_list=$graph_table.[name#14, distinct_ids#15, first_acc_id#16]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=$graph_table.[name#12, distinct_ids#10, $agg2#11, first_acc_id#13]
              |     |   +-expr_list=
              |     |   | +-first_acc_id#13 :=
              |     |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
              |     |   |     +-ColumnRef(type=ARRAY<INT64>, column=$graph_table.$agg2#11)
              |     |   |     +-Literal(type=INT64, value=0)
              |     |   +-input_scan=
              |     |     +-AggregateScan
              |     |       +-column_list=$graph_table.[name#12, distinct_ids#10, $agg2#11]
              |     |       +-input_scan=
              |     |       | +-GraphRefScan(column_list=$element_table.[p#7, e#8, a#9])
              |     |       +-group_by_list=
              |     |       | +-name#12 :=
              |     |       |   +-GraphGetElementProperty
              |     |       |     +-type=STRING
              |     |       |     +-expr=
              |     |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
              |     |       |     +-property=name(STRING)
              |     |       +-aggregate_list=
              |     |         +-distinct_ids#10 :=
              |     |         | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
              |     |         |   +-GraphGetElementProperty
              |     |         |     +-type=INT64
              |     |         |     +-expr=
              |     |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
              |     |         |     +-property=id(INT64)
              |     |         |   +-distinct=TRUE
              |     |         |   +-having_modifier=
              |     |         |     +-AggregateHavingModifier
              |     |         |       +-kind=MAX
              |     |         |       +-having_expr=
              |     |         |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |     |         |           +-GraphGetElementProperty
              |     |         |           | +-type=INT64
              |     |         |           | +-expr=
              |     |         |           | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
              |     |         |           | +-property=id(INT64)
              |     |         |           +-Literal(type=INT64, value=1)
              |     |         +-$agg2#11 :=
              |     |           +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              |     |             +-GraphGetElementProperty
              |     |               +-type=INT64
              |     |               +-expr=
              |     |               | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#9)
              |     |               +-property=id(INT64)
              |     +-group_by_list=
              |       +-name#14 := ColumnRef(type=STRING, column=$graph_table.name#12)
              |       +-distinct_ids#15 := ColumnRef(type=INT64, column=$graph_table.distinct_ids#10)
              |       +-first_acc_id#16 := ColumnRef(type=INT64, column=$graph_table.first_acc_id#13)
              +-GraphLinearScan
                +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
                    +-expr_list=
                    | +-name#17 := ColumnRef(type=STRING, column=$graph_table.name#14)
                    | +-distinct_ids#18 := ColumnRef(type=INT64, column=$graph_table.distinct_ids#15)
                    | +-first_acc_id#19 := ColumnRef(type=INT64, column=$graph_table.first_acc_id#16)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[name#14, distinct_ids#15, first_acc_id#16])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_14 AS name,
  aml_1.a_15 AS distinct_ids,
  aml_1.a_16 AS first_acc_id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    RETURN
      a_2 AS a_5,
      a_3 AS a_6,
      a_4 AS a_7
    NEXT
    MATCH
      (a_8
      IS Person)
      -[a_9
      IS (% | ! %)]->
      (a_10
      IS Account)
      WHERE
        (a_10 = a_7) AND (a_9 = a_6) AND (a_8 = a_5)
    RETURN DISTINCT
      a_8.name AS a_11,
      COUNT(DISTINCT a_8.id
        HAVING MAX(a_8.id) + 1) AS a_12,
      ARRAY_AGG(a_10.id)[OFFSET(0)] AS a_13
    GROUP BY a_8.name
    NEXT
    RETURN
      a_11 AS a_14,
      a_12 AS a_15,
      a_13 AS a_16
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    RETURN
      a_2 AS a_5,
      a_3 AS a_6,
      a_4 AS a_7
    NEXT
    MATCH
      (a_8
      IS Person)
      -[a_9
      IS (% | ! %)]->
      (a_10
      IS Account)
      WHERE
        (a_10 = a_7) AND (a_9 = a_6) AND (a_8 = a_5)
    RETURN DISTINCT
      a_8.name AS a_11,
      COUNT(DISTINCT a_8.id
        HAVING MAX(a_8.id) + 1) AS a_12,
      ARRAY_AGG(a_10.id)[OFFSET(0)] AS a_13
    GROUP BY a_8.name
    NEXT
    RETURN
      a_11 AS a_14,
      a_12 AS a_15,
      a_13 AS a_16
  ) AS aml_1
|> SELECT
     aml_1.a_14 AS name,
     aml_1.a_15 AS distinct_ids,
     aml_1.a_16 AS first_acc_id;
==

# Subquery with struct.*
select * from graph_table(aml
  MATCH (a) -> (b)
  RETURN (SELECT as STRUCT STRUCT(a, 2 AS b).*
FROM (
  SELECT 1 AS a
) LIMIT 1) as subquery
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.subquery#9 AS subquery [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.subquery#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.subquery#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.subquery#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.subquery#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.subquery#9]
                    +-expr_list=
                    | +-subquery#9 :=
                    |   +-SubqueryExpr
                    |     +-type=STRUCT<a INT64, b INT64>
                    |     +-subquery_type=SCALAR
                    |     +-subquery=
                    |       +-ProjectScan
                    |         +-column_list=[$make_struct.$struct#8]
                    |         +-expr_list=
                    |         | +-$struct#8 :=
                    |         |   +-MakeStruct
                    |         |     +-type=STRUCT<a INT64, b INT64>
                    |         |     +-field_list=
                    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.a#6)
                    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.b#7)
                    |         +-input_scan=
                    |           +-LimitOffsetScan
                    |             +-column_list=$expr_subquery.[a#6, b#7]
                    |             +-input_scan=
                    |             | +-ProjectScan
                    |             |   +-column_list=$expr_subquery.[a#6, b#7]
                    |             |   +-expr_list=
                    |             |   | +-a#6 :=
                    |             |   | | +-GetStructField
                    |             |   | |   +-type=INT64
                    |             |   | |   +-expr=
                    |             |   | |   | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=$preproject.$struct#5)
                    |             |   | |   +-field_idx=0
                    |             |   | +-b#7 :=
                    |             |   |   +-GetStructField
                    |             |   |     +-type=INT64
                    |             |   |     +-expr=
                    |             |   |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=$preproject.$struct#5)
                    |             |   |     +-field_idx=1
                    |             |   +-input_scan=
                    |             |     +-ProjectScan
                    |             |       +-column_list=[$subquery1.a#4, $preproject.$struct#5]
                    |             |       +-expr_list=
                    |             |       | +-$struct#5 :=
                    |             |       |   +-MakeStruct
                    |             |       |     +-type=STRUCT<a INT64, b INT64>
                    |             |       |     +-field_list=
                    |             |       |       +-ColumnRef(type=INT64, column=$subquery1.a#4)
                    |             |       |       +-Literal(type=INT64, value=2)
                    |             |       +-input_scan=
                    |             |         +-ProjectScan
                    |             |           +-column_list=[$subquery1.a#4]
                    |             |           +-expr_list=
                    |             |           | +-a#4 := Literal(type=INT64, value=1)
                    |             |           +-input_scan=
                    |             |             +-SingleRowScan
                    |             +-limit=
                    |               +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
==

[run_sqlbuilder]
[show_sqlbuilder_output]
# Regression test for b/328320839
# Check that implicit element patterns are unparsed without an alias
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  RETURN DISTINCT p.birthday, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=147-153, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=162-169, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.birthday#4, $graph_table.balance#5]
                    |   +-expr_list=
                    |   | +-birthday#4 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=DATE
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=birthday(DATE)
                    |   | +-balance#5 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-group_by_list=
                      +-birthday#6 := ColumnRef(type=DATE, column=$graph_table.birthday#4)
                      +-balance#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS birthday,
  aml_1.a_6 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    RETURN DISTINCT
      a_2.birthday AS a_5,
      a_4.balance AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    RETURN DISTINCT
      a_2.birthday AS a_5,
      a_4.balance AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS birthday,
     aml_1.a_6 AS balance;
==

# Explicit group by
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  RETURN *, count(*) as id GROUP BY n, e, m, x
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#6 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                    +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5])
                        +-group_by_list=
                        | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                        | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                        | +-x#10 := ColumnRef(type=INT64, column=$graph_table.x#5)
                        +-aggregate_list=
                          +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Explicit group by all
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+GROUP_BY_ALL,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  RETURN *, count(*) as id GROUP BY ALL
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#6 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                    +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5])
                        +-group_by_list=
                        | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                        | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                        | +-x#10 := ColumnRef(type=INT64, column=$graph_table.x#5)
                        +-aggregate_list=
                          +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Implicit aggregation requires SQL_GRAPH_RETURN_EXTENSIONS
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  RETURN n, e, m, COUNT(*) as id
) gt
--
ERROR: Graph RETURN operator expression references column n which is neither grouped nor aggregated [at 6:10]
  RETURN n, e, m, COUNT(*) as id
         ^
==

# Implicit group by all with *, <extra expr>
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  RETURN *, COUNT(*) as id
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#6 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                    +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                        +-input_scan=
                        | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5])
                        +-group_by_list=
                        | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                        | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                        | +-x#10 := ColumnRef(type=INT64, column=$graph_table.x#5)
                        +-aggregate_list=
                          +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Implicit group by all
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  RETURN n.id, e.amount, COUNT(m.id) as col
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#7 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#7, amount#8, col#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#7, amount#8, col#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#7, amount#8, col#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=$element_table.[n#1, e#2, m#4]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                    +-column_list=$graph_table.[id#7, amount#8, col#6]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[id#7, amount#8, col#6]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                        +-group_by_list=
                        | +-id#7 :=
                        | | +-GraphGetElementProperty
                        | |   +-type=INT64
                        | |   +-expr=
                        | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        | |   +-property=id(INT64)
                        | +-amount#8 :=
                        |   +-GraphGetElementProperty
                        |     +-type=UINT64
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                        |     +-property=amount(UINT64)
                        +-aggregate_list=
                          +-col#6 :=
                            +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                                +-property=id(INT64)
==

# Implicit group by all with volatile expressions excluded
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_RETURN_EXTENSIONS]
select agg_expr from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  RETURN RAND() as non_grouping_key1, n.id, e.amount, COUNT(m.id)/SUM(m.id) as agg_expr, CURRENT_DATE() as non_grouping_key2
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.agg_expr#11 AS agg_expr [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.agg_expr#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[non_grouping_key1#10, id#8, amount#9, agg_expr#11, non_grouping_key2#12]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[non_grouping_key1#10, id#8, amount#9, agg_expr#11, non_grouping_key2#12]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[non_grouping_key1#10, id#8, amount#9, agg_expr#11, non_grouping_key2#12]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=53-61, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=80-86, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=$element_table.[n#1, e#2, m#4]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                    +-column_list=$graph_table.[non_grouping_key1#10, id#8, amount#9, agg_expr#11, non_grouping_key2#12]
                    +-expr_list=
                    | +-non_grouping_key1#10 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
                    | +-agg_expr#11 :=
                    | | +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                    | |   +-Cast(INT64 -> DOUBLE)
                    | |   | +-ColumnRef(type=INT64, column=$graph_table.$agg1#6)
                    | |   +-Cast(INT64 -> DOUBLE)
                    | |     +-ColumnRef(type=INT64, column=$graph_table.$agg2#7)
                    | +-non_grouping_key2#12 := FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=$graph_table.[id#8, amount#9, $agg1#6, $agg2#7]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                        +-group_by_list=
                        | +-id#8 :=
                        | | +-GraphGetElementProperty
                        | |   +-type=INT64
                        | |   +-expr=
                        | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        | |   +-property=id(INT64)
                        | +-amount#9 :=
                        |   +-GraphGetElementProperty
                        |     +-type=UINT64
                        |     +-expr=
                        |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                        |     +-property=amount(UINT64)
                        +-aggregate_list=
                          +-$agg1#6 :=
                          | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                          |   +-GraphGetElementProperty
                          |     +-type=INT64
                          |     +-expr=
                          |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                          |     +-property=id(INT64)
                          +-$agg2#7 :=
                            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                              +-GraphGetElementProperty
                                +-type=INT64
                                +-expr=
                                | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                                +-property=id(INT64)
==

# BEGIN TESTS for WITH
select gt.* from graph_table(aml match (n) with COUNT(n.id) return *) as gt
--
ERROR: A name must be explicitly defined for this column [at 1:49]
select gt.* from graph_table(aml match (n) with COUNT(n.id) return *) as gt
                                                ^
==

# Ambiguous column names are an error
select gt.* from graph_table(aml match (n)
  with COUNT(n.id) as col1, SUM(n.id) as col1 return *) as gt
--
ERROR: Ambiguous name: col1 [at 2:54]
  with COUNT(n.id) as col1, SUM(n.id) as col1 return *) as gt
                                                     ^
==

# Dotstar expansion on graph element is not supported in WITH
select gt.* from graph_table(aml match (n)
  with n.* return *)
--
ERROR: Syntax error: Unexpected "*" [at 2:10]
  with n.* return *)
         ^
==

# GROUP BY ordinal is an error
select gt.* from
graph_table(aml
  match (n)
  with n.id, COUNT(*) as count
    GROUP BY 1
  return *
) gt
--
ERROR: GROUP BY ordinal is not allowed in WITH [at 5:14]
    GROUP BY 1
             ^
==

# GROUP BY () is an error
select gt.* from
graph_table(aml
  match (n)
  with n.id, COUNT(*) as count
    GROUP BY ()
  return *
) gt
--
ERROR: GROUP BY () is not supported [at 5:14]
    GROUP BY ()
             ^
==

# GROUPING builtin function is not allowed even in the absence of
# other GROUPING SETS features
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+GROUPING_BUILTIN,+SQL_GRAPH_RETURN_EXTENSIONS]
select gt.* from
graph_table(aml
  match (n)
  with SUM(n.id) as col1, GROUPING(n.id) as n_id_group
    GROUP BY n.id
  return *
) gt
--
ERROR: GROUPING must have an argument that exists within the group-by expression list. [at 4:27]
  with SUM(n.id) as col1, GROUPING(n.id) as n_id_group
                          ^
==

# GROUPING SETS, ROLLUP, CUBE are not allowed
select gt.* from
graph_table(aml
  match (n)
  with SUM(n.id) as col1
    GROUP BY ROLLUP(n.id)
  return *
) gt
--
ERROR: WITH does not support ROLLUP, CUBE, or GROUPING SETS [at 5:5]
    GROUP BY ROLLUP(n.id)
    ^
==

# Non aggregating expression produces error if not in GROUP BY
select gt.* from
graph_table(aml
  match (n)
  with n.name, n.id, SUM(n.id) as col1
    GROUP BY n.id
  return *
) gt
--
ERROR: Graph WITH operator expression references n.name which is neither grouped nor aggregated [at 4:8]
  with n.name, n.id, SUM(n.id) as col1
       ^
==

# Fails at name resolution (same as regular SQL query)
# (select list item can not see alias produced by other items)
select gt.* from
graph_table(aml
  match (n)
  with 1 AS x, SUM(x) as col1
    GROUP BY x
  return *
) gt
--
ERROR: Unrecognized name: x [at 4:20]
  with 1 AS x, SUM(x) as col1
                   ^
==

select gt.* from
graph_table(aml
  match (n)
  with n.id, SUM(n.id) as col1
    GROUP BY n.id
  return *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#4 AS id [INT64]
| +-$graph_table.col1#5 AS col1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#4, col1#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#4, col1#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#4, col1#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#4, col1#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[id#3, col1#2]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[id#3, col1#2]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1])
                  |     +-group_by_list=
                  |     | +-id#3 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=INT64
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |     +-property=id(INT64)
                  |     +-aggregate_list=
                  |       +-col1#2 :=
                  |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#4, col1#5]
                    +-expr_list=
                    | +-id#4 := ColumnRef(type=INT64, column=$graph_table.id#3)
                    | +-col1#5 := ColumnRef(type=INT64, column=$graph_table.col1#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[id#3, col1#2])
==

# Aggregate function call without GROUP BY
select gt.* from
graph_table(aml
  match (n)
  with SUM(n.id) as col1
  return *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.col1#3 AS col1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col1#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col1#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.col1#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.col1#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.col1#2]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=[$graph_table.col1#2]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1])
                  |     +-aggregate_list=
                  |       +-col1#2 :=
                  |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=[$graph_table.col1#3]
                    +-expr_list=
                    | +-col1#3 := ColumnRef(type=INT64, column=$graph_table.col1#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.col1#2])
==

# GROUP BY without aggregating expression
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  with p.birthday AS col1, a.balance as col2
    GROUP BY col1, a.balance
  return *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.col1#6 AS col1 [DATE]
| +-$graph_table.col2#7 AS col2 [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[col1#6, col2#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[col1#6, col2#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[col1#6, col2#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[col1#6, col2#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[col1#4, balance#5]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[col1#4, balance#5]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  |     +-group_by_list=
                  |       +-col1#4 :=
                  |       | +-GraphGetElementProperty
                  |       |   +-type=DATE
                  |       |   +-expr=
                  |       |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |       |   +-property=birthday(DATE)
                  |       +-balance#5 :=
                  |         +-GraphGetElementProperty
                  |           +-type=UINT64
                  |           +-expr=
                  |           | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  |           +-property=balance(UINT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[col1#6, col2#7]
                    +-expr_list=
                    | +-col1#6 := ColumnRef(type=DATE, column=$graph_table.col1#4)
                    | +-col2#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[col1#4, balance#5])
==

# Simple aggregating expression
# Match SELECT item with GROUP BY item using
# 1. explicit alias
# 2. implicit alias
# 3. property access
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  WITH p.birthday AS col1, p.name, a.balance as col2, COUNT(*) as count
    GROUP BY col1, name, a.balance
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.col1#8 AS col1 [DATE]
| +-$graph_table.name#9 AS name [STRING]
| +-$graph_table.col2#10 AS col2 [UINT64]
| +-$graph_table.count#11 AS count [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[col1#8, name#9, col2#10, count#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[col1#8, name#9, col2#10, count#11]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[col1#8, name#9, col2#10, count#11]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[col1#8, name#9, col2#10, count#11]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[col1#5, name#6, balance#7, count#4]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  |     +-group_by_list=
                  |     | +-col1#5 :=
                  |     | | +-GraphGetElementProperty
                  |     | |   +-type=DATE
                  |     | |   +-expr=
                  |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |     | |   +-property=birthday(DATE)
                  |     | +-name#6 :=
                  |     | | +-GraphGetElementProperty
                  |     | |   +-type=STRING
                  |     | |   +-expr=
                  |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |     | |   +-property=name(STRING)
                  |     | +-balance#7 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=UINT64
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  |     |     +-property=balance(UINT64)
                  |     +-aggregate_list=
                  |       +-count#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[col1#8, name#9, col2#10, count#11]
                    +-expr_list=
                    | +-col1#8 := ColumnRef(type=DATE, column=$graph_table.col1#5)
                    | +-name#9 := ColumnRef(type=STRING, column=$graph_table.name#6)
                    | +-col2#10 := ColumnRef(type=UINT64, column=$graph_table.balance#7)
                    | +-count#11 := ColumnRef(type=INT64, column=$graph_table.count#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[col1#5, name#6, balance#7, count#4])
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+GROUP_BY_ALL,+SQL_GRAPH_RETURN_EXTENSIONS]
# GROUP BY ALL in WITH
# Note the volatile expression RAND is excluded from `group_by_list`
select gt.* from
graph_table(aml
  match (n)
  with n.name, SUM(n.id) as col1, RAND() as random
    GROUP BY ALL
  return *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#5 AS name [STRING]
| +-$graph_table.col1#6 AS col1 [INT64]
| +-$graph_table.random#7 AS random [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#5, col1#6, random#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#5, col1#6, random#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#5, col1#6, random#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#5, col1#6, random#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[name#3, col1#2, random#4]
                  | +-expr_list=
                  | | +-random#4 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[name#3, col1#2]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1])
                  |     +-group_by_list=
                  |     | +-name#3 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=STRING
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |     +-property=name(STRING)
                  |     +-aggregate_list=
                  |       +-col1#2 :=
                  |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#5, col1#6, random#7]
                    +-expr_list=
                    | +-name#5 := ColumnRef(type=STRING, column=$graph_table.name#3)
                    | +-col1#6 := ColumnRef(type=INT64, column=$graph_table.col1#2)
                    | +-random#7 := ColumnRef(type=DOUBLE, column=$graph_table.random#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[name#3, col1#2, random#4])
==

# Complex aggregating expression
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH p.birthday as x, SUM(a.balance)/COUNT(a.balance) + 10 AS avg_balance
    GROUP BY x
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#8 AS x [DATE]
| +-$graph_table.avg_balance#9 AS avg_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#8, avg_balance#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#8, avg_balance#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#8, avg_balance#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#8, avg_balance#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#6, avg_balance#7]
                  | +-expr_list=
                  | | +-avg_balance#7 :=
                  | |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                  | |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                  | |     | +-Cast(UINT64 -> DOUBLE)
                  | |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                  | |     | +-Cast(INT64 -> DOUBLE)
                  | |     |   +-ColumnRef(type=INT64, column=$graph_table.$agg2#5)
                  | |     +-Literal(type=DOUBLE, value=10)
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  |     +-group_by_list=
                  |     | +-x#6 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=DATE
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |     |     +-property=birthday(DATE)
                  |     +-aggregate_list=
                  |       +-$agg1#4 :=
                  |       | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  |       |   +-GraphGetElementProperty
                  |       |     +-type=UINT64
                  |       |     +-expr=
                  |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  |       |     +-property=balance(UINT64)
                  |       +-$agg2#5 :=
                  |         +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=UINT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  |             +-property=balance(UINT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[x#8, avg_balance#9]
                    +-expr_list=
                    | +-x#8 := ColumnRef(type=DATE, column=$graph_table.x#6)
                    | +-avg_balance#9 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#7)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[x#6, avg_balance#7])
==

# Aggregations with post-aggregation expressions
select gt.* from
graph_table(aml
  match (a:Account)
  with ARRAY_AGG(a.id)[OFFSET(0)] AS first_acc_id
  return *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.first_acc_id#4 AS first_acc_id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.first_acc_id#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.first_acc_id#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.first_acc_id#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.first_acc_id#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-51, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.a#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.first_acc_id#3]
                  | +-expr_list=
                  | | +-first_acc_id#3 :=
                  | |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
                  | |     +-ColumnRef(type=ARRAY<INT64>, column=$graph_table.$agg1#2)
                  | |     +-Literal(type=INT64, value=0)
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=[$graph_table.$agg1#2]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.a#1])
                  |     +-aggregate_list=
                  |       +-$agg1#2 :=
                  |         +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=[$graph_table.first_acc_id#4]
                    +-expr_list=
                    | +-first_acc_id#4 := ColumnRef(type=INT64, column=$graph_table.first_acc_id#3)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.first_acc_id#3])
==

# DISTINCT
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH DISTINCT p.birthday, a.balance
  RETURN *
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.birthday#8 AS birthday [DATE]
| +-$graph_table.balance#9 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#8, balance#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#8, balance#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#8, balance#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#8, balance#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                  | +-column_list=$distinct.[birthday#6, balance#7]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.birthday#4, $graph_table.balance#5]
                  | |   +-expr_list=
                  | |   | +-birthday#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=DATE
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=birthday(DATE)
                  | |   | +-balance#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-group_by_list=
                  |   +-birthday#6 := ColumnRef(type=DATE, column=$graph_table.birthday#4)
                  |   +-balance#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#8, balance#9]
                    +-expr_list=
                    | +-birthday#8 := ColumnRef(type=DATE, column=$distinct.birthday#6)
                    | +-balance#9 := ColumnRef(type=UINT64, column=$distinct.balance#7)
                    +-input_scan=
                      +-GraphRefScan(column_list=$distinct.[birthday#6, balance#7])
==

# DISTINCT with aggregation
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH DISTINCT p.birthday as x, SUM(a.balance)/COUNT(a.balance) + 10 AS avg_balance
    GROUP BY x
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#10 AS x [DATE]
| +-$graph_table.avg_balance#11 AS avg_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#10, avg_balance#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#10, avg_balance#11]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#10, avg_balance#11]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#10, avg_balance#11]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                  | +-column_list=$distinct.[x#8, avg_balance#9]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5, avg_balance#7]
                  | |   +-expr_list=
                  | |   | +-avg_balance#7 :=
                  | |   |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                  | |   |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                  | |   |     | +-Cast(UINT64 -> DOUBLE)
                  | |   |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                  | |   |     | +-Cast(INT64 -> DOUBLE)
                  | |   |     |   +-ColumnRef(type=INT64, column=$graph_table.$agg2#5)
                  | |   |     +-Literal(type=DOUBLE, value=10)
                  | |   +-input_scan=
                  | |     +-AggregateScan
                  | |       +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5]
                  | |       +-input_scan=
                  | |       | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | |       +-group_by_list=
                  | |       | +-x#6 :=
                  | |       |   +-GraphGetElementProperty
                  | |       |     +-type=DATE
                  | |       |     +-expr=
                  | |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |       |     +-property=birthday(DATE)
                  | |       +-aggregate_list=
                  | |         +-$agg1#4 :=
                  | |         | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  | |         |   +-GraphGetElementProperty
                  | |         |     +-type=UINT64
                  | |         |     +-expr=
                  | |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |         |     +-property=balance(UINT64)
                  | |         +-$agg2#5 :=
                  | |           +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
                  | |             +-GraphGetElementProperty
                  | |               +-type=UINT64
                  | |               +-expr=
                  | |               | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |               +-property=balance(UINT64)
                  | +-group_by_list=
                  |   +-x#8 := ColumnRef(type=DATE, column=$graph_table.x#6)
                  |   +-avg_balance#9 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#7)
                  +-ProjectScan
                    +-column_list=$graph_table.[x#10, avg_balance#11]
                    +-expr_list=
                    | +-x#10 := ColumnRef(type=DATE, column=$distinct.x#8)
                    | +-avg_balance#11 := ColumnRef(type=DOUBLE, column=$distinct.avg_balance#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=$distinct.[x#8, avg_balance#9])
==

# Correlated column in aggregate expression in WITH
select 1 from KeyValue kv where exists (
  select 1 from graph_table (
    aml match (n)
    with n.birthday as col1, SUM(1 + kv.Key) AS new_key
      GROUP BY col1
    return *
  )
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#9 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#9]
    +-expr_list=
    | +-$col1#9 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#8]
                +-expr_list=
                | +-$col1#8 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=$graph_table.[col1#6, new_key#7]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=$graph_table.[col1#6, new_key#7]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=$graph_table.[col1#6, new_key#7]
                            +-scan_list=
                              +-GraphScan
                              | +-column_list=[$element_table.n#3]
                              | +-input_scan_list=
                              | | +-GraphPathScan
                              | |   +-column_list=[$element_table.n#3]
                              | |   +-input_scan_list=
                              | |   | +-GraphNodeScan
                              | |   |   +-column_list=[$element_table.n#3]
                              | |   |   +-label_expr=
                              | |   |   | +-GraphLabelNaryExpr
                              | |   |   |   +-op=OR
                              | |   |   |   +-operand_list=
                              | |   |   |     +-GraphWildCardLabel
                              | |   |   |     +-GraphLabelNaryExpr
                              | |   |   |       +-op=NOT
                              | |   |   |       +-operand_list=
                              | |   |   |         +-GraphWildCardLabel
                              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                              | |   +-head=$element_table.n#3
                              | |   +-tail=$element_table.n#3
                              | +-input_scan=
                              |   +-SingleRowScan
                              +-ProjectScan
                              | +-column_list=$graph_table.[col1#5, new_key#4]
                              | +-input_scan=
                              |   +-AggregateScan
                              |     +-column_list=$graph_table.[col1#5, new_key#4]
                              |     +-input_scan=
                              |     | +-GraphRefScan(column_list=[$element_table.n#3])
                              |     +-group_by_list=
                              |     | +-col1#5 :=
                              |     |   +-GraphGetElementProperty
                              |     |     +-type=DATE
                              |     |     +-expr=
                              |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#3)
                              |     |     +-property=birthday(DATE)
                              |     +-aggregate_list=
                              |       +-new_key#4 :=
                              |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                              |           +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                              |             +-Literal(type=INT64, value=1)
                              |             +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              +-ProjectScan
                                +-column_list=$graph_table.[col1#6, new_key#7]
                                +-expr_list=
                                | +-col1#6 := ColumnRef(type=DATE, column=$graph_table.col1#5)
                                | +-new_key#7 := ColumnRef(type=INT64, column=$graph_table.new_key#4)
                                +-input_scan=
                                  +-GraphRefScan(column_list=$graph_table.[col1#5, new_key#4])
==

# Correlated column in GROUP BY item
select 1 from KeyValue kv where exists (
  select 1 from graph_table (
    aml match (n)
    with kv.Key as col1, SUM(1 + kv.Key) AS new_key
      GROUP BY kv.Key
    return *
  )
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#10 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#10]
    +-expr_list=
    | +-$col1#10 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#9]
                +-expr_list=
                | +-$col1#9 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=$graph_table.[col1#7, new_key#8]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=$graph_table.[col1#7, new_key#8]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=$graph_table.[col1#7, new_key#8]
                            +-scan_list=
                              +-GraphScan
                              | +-column_list=[$element_table.n#3]
                              | +-input_scan_list=
                              | | +-GraphPathScan
                              | |   +-column_list=[$element_table.n#3]
                              | |   +-input_scan_list=
                              | |   | +-GraphNodeScan
                              | |   |   +-column_list=[$element_table.n#3]
                              | |   |   +-label_expr=
                              | |   |   | +-GraphLabelNaryExpr
                              | |   |   |   +-op=OR
                              | |   |   |   +-operand_list=
                              | |   |   |     +-GraphWildCardLabel
                              | |   |   |     +-GraphLabelNaryExpr
                              | |   |   |       +-op=NOT
                              | |   |   |       +-operand_list=
                              | |   |   |         +-GraphWildCardLabel
                              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                              | |   +-head=$element_table.n#3
                              | |   +-tail=$element_table.n#3
                              | +-input_scan=
                              |   +-SingleRowScan
                              +-ProjectScan
                              | +-column_list=$graph_table.[col1#6, new_key#4]
                              | +-expr_list=
                              | | +-col1#6 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              | +-input_scan=
                              |   +-AggregateScan
                              |     +-column_list=[$graph_table.new_key#4]
                              |     +-input_scan=
                              |     | +-GraphRefScan(column_list=[$element_table.n#3])
                              |     +-group_by_list=
                              |     | +-Key#5 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              |     +-aggregate_list=
                              |       +-new_key#4 :=
                              |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                              |           +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                              |             +-Literal(type=INT64, value=1)
                              |             +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              +-ProjectScan
                                +-column_list=$graph_table.[col1#7, new_key#8]
                                +-expr_list=
                                | +-col1#7 := ColumnRef(type=INT64, column=$graph_table.col1#6)
                                | +-new_key#8 := ColumnRef(type=INT64, column=$graph_table.new_key#4)
                                +-input_scan=
                                  +-GraphRefScan(column_list=$graph_table.[col1#6, new_key#4])
==

# Correlated subquery in RETURN as aggregate function argument
select gt.c_value from graph_table(
  aml match (n)
  with
    COUNT((select kv.value from KeyValue kv where kv.Key = n.id limit 1)) AS c_value
  return *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.c_value#5 AS c_value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.c_value#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.c_value#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.c_value#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.c_value#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.c_value#4]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=[$graph_table.c_value#4]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1])
                  |     +-aggregate_list=
                  |       +-c_value#4 :=
                  |         +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
                  |           +-SubqueryExpr
                  |             +-type=STRING
                  |             +-subquery_type=SCALAR
                  |             +-parameter_list=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-subquery=
                  |               +-LimitOffsetScan
                  |                 +-column_list=[KeyValue.Value#3]
                  |                 +-input_scan=
                  |                 | +-ProjectScan
                  |                 |   +-column_list=[KeyValue.Value#3]
                  |                 |   +-input_scan=
                  |                 |     +-FilterScan
                  |                 |       +-column_list=KeyValue.[Key#2, Value#3]
                  |                 |       +-input_scan=
                  |                 |       | +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1], alias="kv")
                  |                 |       +-filter_expr=
                  |                 |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  |                 |           +-ColumnRef(type=INT64, column=KeyValue.Key#2)
                  |                 |           +-GraphGetElementProperty
                  |                 |             +-type=INT64
                  |                 |             +-expr=
                  |                 |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
                  |                 |             +-property=id(INT64)
                  |                 +-limit=
                  |                   +-Literal(type=INT64, value=1)
                  +-ProjectScan
                    +-column_list=[$graph_table.c_value#5]
                    +-expr_list=
                    | +-c_value#5 := ColumnRef(type=INT64, column=$graph_table.c_value#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.c_value#4])
==

# Intermediate WITH clauses with aggregating expressions
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH DISTINCT p.birthday as x, SUM(a.balance)/COUNT(a.balance) + 10 AS avg_balance
    GROUP BY x
  MATCH (n)
  MATCH (p:Person)
  LET age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  FILTER WHERE 2 > 1
  WITH n.id, COUNT(p.id) as person_count, avg_balance
    GROUP BY n.id, avg_balance
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#16 AS id [INT64]
| +-$graph_table.person_count#17 AS person_count [INT64]
| +-$graph_table.avg_balance#18 AS avg_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#16, person_count#17, avg_balance#18]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#16, person_count#17, avg_balance#18]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#16, person_count#17, avg_balance#18]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#16, person_count#17, avg_balance#18]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                  | +-column_list=$distinct.[x#8, avg_balance#9]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5, avg_balance#7]
                  | |   +-expr_list=
                  | |   | +-avg_balance#7 :=
                  | |   |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                  | |   |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                  | |   |     | +-Cast(UINT64 -> DOUBLE)
                  | |   |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                  | |   |     | +-Cast(INT64 -> DOUBLE)
                  | |   |     |   +-ColumnRef(type=INT64, column=$graph_table.$agg2#5)
                  | |   |     +-Literal(type=DOUBLE, value=10)
                  | |   +-input_scan=
                  | |     +-AggregateScan
                  | |       +-column_list=$graph_table.[x#6, $agg1#4, $agg2#5]
                  | |       +-input_scan=
                  | |       | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | |       +-group_by_list=
                  | |       | +-x#6 :=
                  | |       |   +-GraphGetElementProperty
                  | |       |     +-type=DATE
                  | |       |     +-expr=
                  | |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |       |     +-property=birthday(DATE)
                  | |       +-aggregate_list=
                  | |         +-$agg1#4 :=
                  | |         | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  | |         |   +-GraphGetElementProperty
                  | |         |     +-type=UINT64
                  | |         |     +-expr=
                  | |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |         |     +-property=balance(UINT64)
                  | |         +-$agg2#5 :=
                  | |           +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
                  | |             +-GraphGetElementProperty
                  | |               +-type=UINT64
                  | |               +-expr=
                  | |               | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |               +-property=balance(UINT64)
                  | +-group_by_list=
                  |   +-x#8 := ColumnRef(type=DATE, column=$graph_table.x#6)
                  |   +-avg_balance#9 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#7)
                  +-GraphScan
                  | +-column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#10
                  | |   +-tail=$element_table.n#10
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$distinct.[x#8, avg_balance#9])
                  +-GraphScan
                  | +-column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10, $element_table.p#11]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#11]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#11]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=191-197, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#11
                  | |   +-tail=$element_table.p#11
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10])
                  +-ProjectScan
                  | +-column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10, $element_table.p#11]
                  | +-expr_list=
                  | | +-age#12 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#10)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10, $element_table.p#11])
                  +-FilterScan
                  | +-column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10, $element_table.p#11]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10, $element_table.p#11])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-Literal(type=INT64, value=2)
                  |     +-Literal(type=INT64, value=1)
                  +-ProjectScan
                  | +-column_list=$graph_table.[id#14, person_count#13, avg_balance#15]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[id#14, avg_balance#15, person_count#13]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$distinct.x#8, $distinct.avg_balance#9, $element_table.n#10, $element_table.p#11])
                  |     +-group_by_list=
                  |     | +-id#14 :=
                  |     | | +-GraphGetElementProperty
                  |     | |   +-type=INT64
                  |     | |   +-expr=
                  |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#10)
                  |     | |   +-property=id(INT64)
                  |     | +-avg_balance#15 := ColumnRef(type=DOUBLE, column=$distinct.avg_balance#9)
                  |     +-aggregate_list=
                  |       +-person_count#13 :=
                  |         +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#11)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#16, person_count#17, avg_balance#18]
                    +-expr_list=
                    | +-id#16 := ColumnRef(type=INT64, column=$graph_table.id#14)
                    | +-person_count#17 := ColumnRef(type=INT64, column=$graph_table.person_count#13)
                    | +-avg_balance#18 := ColumnRef(type=DOUBLE, column=$graph_table.avg_balance#15)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[id#14, person_count#13, avg_balance#15])
==

# Count star in RETURN
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH COUNT(*) as count
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.count#5 AS count [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.count#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.count#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.count#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.count#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.count#4]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=[$graph_table.count#4]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  |     +-aggregate_list=
                  |       +-count#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-ProjectScan
                    +-column_list=[$graph_table.count#5]
                    +-expr_list=
                    | +-count#5 := ColumnRef(type=INT64, column=$graph_table.count#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.count#4])
==

select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH p.birthday AS birthday, p.name as name, MAX(a.balance) as max_balance
    GROUP BY birthday, name
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#7 AS birthday [DATE]
| +-$graph_table.name#8 AS name [STRING]
| +-$graph_table.max_balance#9 AS max_balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#7, name#8, max_balance#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#7, name#8, max_balance#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#7, name#8, max_balance#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#7, name#8, max_balance#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[birthday#5, name#6, max_balance#4]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  |     +-group_by_list=
                  |     | +-birthday#5 :=
                  |     | | +-GraphGetElementProperty
                  |     | |   +-type=DATE
                  |     | |   +-expr=
                  |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |     | |   +-property=birthday(DATE)
                  |     | +-name#6 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=STRING
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |     |     +-property=name(STRING)
                  |     +-aggregate_list=
                  |       +-max_balance#4 :=
                  |         +-AggregateFunctionCall(ZetaSQL:max(UINT64) -> UINT64)
                  |           +-GraphGetElementProperty
                  |             +-type=UINT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  |             +-property=balance(UINT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#7, name#8, max_balance#9]
                    +-expr_list=
                    | +-birthday#7 := ColumnRef(type=DATE, column=$graph_table.birthday#5)
                    | +-name#8 := ColumnRef(type=STRING, column=$graph_table.name#6)
                    | +-max_balance#9 := ColumnRef(type=UINT64, column=$graph_table.max_balance#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[birthday#5, name#6, max_balance#4])
==

# GROUP BY graph elements across multiple MATCH
select gt.* from
graph_table(aml
  MATCH (p1:Person)-[e1]->(a)
  MATCH (p2:Person)-[e2]->(a:Account)
  WITH COUNT(*) as count, ANY_VALUE(p1.id) as id, SUM(a.balance)/MAX(a.balance) + 2 as norm_balance
    GROUP BY p1,p2,e1,e2,a
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.count#17 AS count [INT64]
| +-$graph_table.id#18 AS id [INT64]
| +-$graph_table.norm_balance#19 AS norm_balance [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[count#17, id#18, norm_balance#19]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[count#17, id#18, norm_balance#19]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[count#17, id#18, norm_balance#19]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[count#17, id#18, norm_balance#19]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p1#1, e1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p1#1, e1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=45-51, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.p1#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[p1#1, e1#2, a#3, p2#4, e2#5, a#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p2#4, e2#5, a#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p2#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=75-81, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e2#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=92-99, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p2#4
                  | |   +-tail=$element_table.a#6
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[p1#1, e1#2, a#3])
                  +-ProjectScan
                  | +-column_list=$graph_table.[count#7, id#8, norm_balance#16]
                  | +-expr_list=
                  | | +-norm_balance#16 :=
                  | |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                  | |     +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                  | |     | +-Cast(UINT64 -> DOUBLE)
                  | |     | | +-ColumnRef(type=UINT64, column=$graph_table.$agg3#9)
                  | |     | +-Cast(UINT64 -> DOUBLE)
                  | |     |   +-ColumnRef(type=UINT64, column=$graph_table.$agg4#10)
                  | |     +-Literal(type=DOUBLE, value=2)
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[count#7, id#8, $agg3#9, $agg4#10]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p1#1, e1#2, p2#4, e2#5, a#6])
                  |     +-group_by_list=
                  |     | +-p1#11 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p1#1)
                  |     | +-p2#12 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p2#4)
                  |     | +-e1#13 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e1#2)
                  |     | +-e2#14 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e2#5)
                  |     | +-a#15 := ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                  |     +-aggregate_list=
                  |       +-count#7 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  |       +-id#8 :=
                  |       | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |       |   +-GraphGetElementProperty
                  |       |     +-type=INT64
                  |       |     +-expr=
                  |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p1#1)
                  |       |     +-property=id(INT64)
                  |       +-$agg3#9 :=
                  |       | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  |       |   +-GraphGetElementProperty
                  |       |     +-type=UINT64
                  |       |     +-expr=
                  |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                  |       |     +-property=balance(UINT64)
                  |       +-$agg4#10 :=
                  |         +-AggregateFunctionCall(ZetaSQL:max(UINT64) -> UINT64)
                  |           +-GraphGetElementProperty
                  |             +-type=UINT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#6)
                  |             +-property=balance(UINT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[count#17, id#18, norm_balance#19]
                    +-expr_list=
                    | +-count#17 := ColumnRef(type=INT64, column=$graph_table.count#7)
                    | +-id#18 := ColumnRef(type=INT64, column=$graph_table.id#8)
                    | +-norm_balance#19 := ColumnRef(type=DOUBLE, column=$graph_table.norm_balance#16)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[count#7, id#8, norm_balance#16])
==

# SQLBuilder test: aggregate expression with GROUP BY
[run_sqlbuilder]
[show_sqlbuilder_output]
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH p.name as name, COUNT(DISTINCT p.id) as distinct_ids
    GROUP BY name
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.distinct_ids#7 AS distinct_ids [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#6, distinct_ids#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#6, distinct_ids#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#6, distinct_ids#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#6, distinct_ids#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=59-66, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[name#5, distinct_ids#4]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[name#5, distinct_ids#4]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  |     +-group_by_list=
                  |     | +-name#5 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=STRING
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |     |     +-property=name(STRING)
                  |     +-aggregate_list=
                  |       +-distinct_ids#4 :=
                  |         +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  |             +-property=id(INT64)
                  |           +-distinct=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[name#6, distinct_ids#7]
                    +-expr_list=
                    | +-name#6 := ColumnRef(type=STRING, column=$graph_table.name#5)
                    | +-distinct_ids#7 := ColumnRef(type=INT64, column=$graph_table.distinct_ids#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[name#5, distinct_ids#4])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_7 AS name,
  aml_1.a_8 AS distinct_ids
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    WITH
      a_2.name AS a_6,
      COUNT(DISTINCT a_2.id) AS a_5
    WITH
      a_6,
      a_5
    RETURN
      a_6 AS a_7,
      a_5 AS a_8
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    WITH
      a_2.name AS a_6,
      COUNT(DISTINCT a_2.id) AS a_5
    WITH
      a_6,
      a_5
    RETURN
      a_6 AS a_7,
      a_5 AS a_8
  ) AS aml_1
|> SELECT
     aml_1.a_7 AS name,
     aml_1.a_8 AS distinct_ids;
==

# SQLBuilder test: more complex example
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+HAVING_IN_AGGREGATE,+SQL_GRAPH_RETURN_EXTENSIONS]
[run_sqlbuilder]
[show_sqlbuilder_output]
select gt.* from
graph_table(aml
  MATCH (p:Person)-[e]->(a:Account)
  WITH *
  MATCH (p:Person)-[e]->(a:Account)
  WITH distinct p.name as name, COUNT(DISTINCT p.id having max p.id+1) as distinct_ids, ARRAY_AGG(a.id)[OFFSET(0)] AS first_acc_id
    GROUP BY name
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#17 AS name [STRING]
| +-$graph_table.distinct_ids#18 AS distinct_ids [INT64]
| +-$graph_table.first_acc_id#19 AS first_acc_id [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, e#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, e#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=60-67, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[p#4, e#5, a#6]
                  | +-expr_list=
                  | | +-p#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | | +-e#5 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  | | +-a#6 := ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[p#1, e#2, a#3])
                  +-GraphScan
                  | +-column_list=[$graph_table.p#4, $graph_table.e#5, $graph_table.a#6, $element_table.p#7, $element_table.e#8, $element_table.a#9]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#7, e#8, a#9]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#7]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=89-95, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#8]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#9]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=105-112, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#7
                  | |   +-tail=$element_table.a#9
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<balance UINT64, id INT64>, GRAPH_NODE(aml)<balance UINT64, id INT64>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#9)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$graph_table.a#6)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#8)
                  | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$graph_table.e#5)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.p#4)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[p#4, e#5, a#6])
                  +-AggregateScan
                  | +-column_list=$distinct.[name#14, distinct_ids#15, first_acc_id#16]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=$graph_table.[name#12, distinct_ids#10, $agg2#11, first_acc_id#13]
                  | |   +-expr_list=
                  | |   | +-first_acc_id#13 :=
                  | |   |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
                  | |   |     +-ColumnRef(type=ARRAY<INT64>, column=$graph_table.$agg2#11)
                  | |   |     +-Literal(type=INT64, value=0)
                  | |   +-input_scan=
                  | |     +-AggregateScan
                  | |       +-column_list=$graph_table.[name#12, distinct_ids#10, $agg2#11]
                  | |       +-input_scan=
                  | |       | +-GraphRefScan(column_list=$element_table.[p#7, e#8, a#9])
                  | |       +-group_by_list=
                  | |       | +-name#12 :=
                  | |       |   +-GraphGetElementProperty
                  | |       |     +-type=STRING
                  | |       |     +-expr=
                  | |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
                  | |       |     +-property=name(STRING)
                  | |       +-aggregate_list=
                  | |         +-distinct_ids#10 :=
                  | |         | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  | |         |   +-GraphGetElementProperty
                  | |         |     +-type=INT64
                  | |         |     +-expr=
                  | |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
                  | |         |     +-property=id(INT64)
                  | |         |   +-distinct=TRUE
                  | |         |   +-having_modifier=
                  | |         |     +-AggregateHavingModifier
                  | |         |       +-kind=MAX
                  | |         |       +-having_expr=
                  | |         |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  | |         |           +-GraphGetElementProperty
                  | |         |           | +-type=INT64
                  | |         |           | +-expr=
                  | |         |           | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#7)
                  | |         |           | +-property=id(INT64)
                  | |         |           +-Literal(type=INT64, value=1)
                  | |         +-$agg2#11 :=
                  | |           +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                  | |             +-GraphGetElementProperty
                  | |               +-type=INT64
                  | |               +-expr=
                  | |               | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#9)
                  | |               +-property=id(INT64)
                  | +-group_by_list=
                  |   +-name#14 := ColumnRef(type=STRING, column=$graph_table.name#12)
                  |   +-distinct_ids#15 := ColumnRef(type=INT64, column=$graph_table.distinct_ids#10)
                  |   +-first_acc_id#16 := ColumnRef(type=INT64, column=$graph_table.first_acc_id#13)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#17, distinct_ids#18, first_acc_id#19]
                    +-expr_list=
                    | +-name#17 := ColumnRef(type=STRING, column=$distinct.name#14)
                    | +-distinct_ids#18 := ColumnRef(type=INT64, column=$distinct.distinct_ids#15)
                    | +-first_acc_id#19 := ColumnRef(type=INT64, column=$distinct.first_acc_id#16)
                    +-input_scan=
                      +-GraphRefScan(column_list=$distinct.[name#14, distinct_ids#15, first_acc_id#16])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_18 AS name,
  aml_1.a_19 AS distinct_ids,
  aml_1.a_20 AS first_acc_id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    WITH
      a_2 AS a_5,
      a_3 AS a_6,
      a_4 AS a_7
    MATCH
      (a_8
      IS Person)
      -[a_9
      IS (% | ! %)]->
      (a_10
      IS Account)
      WHERE
        (a_10 = a_7) AND (a_9 = a_6) AND (a_8 = a_5)
    WITH
      a_8.name AS a_13,
      COUNT(DISTINCT a_8.id
        HAVING MAX(a_8.id) + 1) AS a_11,
      ARRAY_AGG(a_10.id) AS a_12
    WITH
      a_13,
      a_11,
      a_12,
      a_12[OFFSET(0)] AS a_14
    WITH
      a_13 AS a_15,
      a_11 AS a_16,
      a_14 AS a_17
    RETURN
      a_15 AS a_18,
      a_16 AS a_19,
      a_17 AS a_20
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    WITH
      a_2 AS a_5,
      a_3 AS a_6,
      a_4 AS a_7
    MATCH
      (a_8
      IS Person)
      -[a_9
      IS (% | ! %)]->
      (a_10
      IS Account)
      WHERE
        (a_10 = a_7) AND (a_9 = a_6) AND (a_8 = a_5)
    WITH
      a_8.name AS a_13,
      COUNT(DISTINCT a_8.id
        HAVING MAX(a_8.id) + 1) AS a_11,
      ARRAY_AGG(a_10.id) AS a_12
    WITH
      a_13,
      a_11,
      a_12,
      a_12[OFFSET(0)] AS a_14
    WITH
      a_13 AS a_15,
      a_11 AS a_16,
      a_14 AS a_17
    RETURN
      a_15 AS a_18,
      a_16 AS a_19,
      a_17 AS a_20
  ) AS aml_1
|> SELECT
     aml_1.a_18 AS name,
     aml_1.a_19 AS distinct_ids,
     aml_1.a_20 AS first_acc_id;
==

# Subquery with struct.*
select * from graph_table(aml
  MATCH (a) -> (b)
  WITH (SELECT as STRUCT STRUCT(a, 2 AS b).*
FROM (
  SELECT 1 AS a
) LIMIT 1) as subquery
  RETURN *
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.subquery#10 AS subquery [STRUCT<a INT64, b INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.subquery#10]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.subquery#10]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.subquery#10]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.subquery#10]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.subquery#9]
                  | +-expr_list=
                  | | +-subquery#9 :=
                  | |   +-SubqueryExpr
                  | |     +-type=STRUCT<a INT64, b INT64>
                  | |     +-subquery_type=SCALAR
                  | |     +-subquery=
                  | |       +-ProjectScan
                  | |         +-column_list=[$make_struct.$struct#8]
                  | |         +-expr_list=
                  | |         | +-$struct#8 :=
                  | |         |   +-MakeStruct
                  | |         |     +-type=STRUCT<a INT64, b INT64>
                  | |         |     +-field_list=
                  | |         |       +-ColumnRef(type=INT64, column=$expr_subquery.a#6)
                  | |         |       +-ColumnRef(type=INT64, column=$expr_subquery.b#7)
                  | |         +-input_scan=
                  | |           +-LimitOffsetScan
                  | |             +-column_list=$expr_subquery.[a#6, b#7]
                  | |             +-input_scan=
                  | |             | +-ProjectScan
                  | |             |   +-column_list=$expr_subquery.[a#6, b#7]
                  | |             |   +-expr_list=
                  | |             |   | +-a#6 :=
                  | |             |   | | +-GetStructField
                  | |             |   | |   +-type=INT64
                  | |             |   | |   +-expr=
                  | |             |   | |   | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=$preproject.$struct#5)
                  | |             |   | |   +-field_idx=0
                  | |             |   | +-b#7 :=
                  | |             |   |   +-GetStructField
                  | |             |   |     +-type=INT64
                  | |             |   |     +-expr=
                  | |             |   |     | +-ColumnRef(type=STRUCT<a INT64, b INT64>, column=$preproject.$struct#5)
                  | |             |   |     +-field_idx=1
                  | |             |   +-input_scan=
                  | |             |     +-ProjectScan
                  | |             |       +-column_list=[$subquery1.a#4, $preproject.$struct#5]
                  | |             |       +-expr_list=
                  | |             |       | +-$struct#5 :=
                  | |             |       |   +-MakeStruct
                  | |             |       |     +-type=STRUCT<a INT64, b INT64>
                  | |             |       |     +-field_list=
                  | |             |       |       +-ColumnRef(type=INT64, column=$subquery1.a#4)
                  | |             |       |       +-Literal(type=INT64, value=2)
                  | |             |       +-input_scan=
                  | |             |         +-ProjectScan
                  | |             |           +-column_list=[$subquery1.a#4]
                  | |             |           +-expr_list=
                  | |             |           | +-a#4 := Literal(type=INT64, value=1)
                  | |             |           +-input_scan=
                  | |             |             +-SingleRowScan
                  | |             +-limit=
                  | |               +-Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
                  +-ProjectScan
                    +-column_list=[$graph_table.subquery#10]
                    +-expr_list=
                    | +-subquery#10 := ColumnRef(type=STRUCT<a INT64, b INT64>, column=$graph_table.subquery#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.subquery#9])
==

[run_sqlbuilder]
[show_sqlbuilder_output]
# Regression test for b/328320839
# Check that implicit element patterns are unparsed without an alias
select gt.* from
graph_table(aml
  MATCH (p:Person)-[]->(a:Account)
  WITH DISTINCT p.birthday, a.balance
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#8 AS birthday [DATE]
| +-$graph_table.balance#9 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#8, balance#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#8, balance#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#8, balance#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#8, balance#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=147-153, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=162-169, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AggregateScan
                  | +-column_list=$distinct.[birthday#6, balance#7]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.birthday#4, $graph_table.balance#5]
                  | |   +-expr_list=
                  | |   | +-birthday#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=DATE
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=birthday(DATE)
                  | |   | +-balance#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-group_by_list=
                  |   +-birthday#6 := ColumnRef(type=DATE, column=$graph_table.birthday#4)
                  |   +-balance#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#8, balance#9]
                    +-expr_list=
                    | +-birthday#8 := ColumnRef(type=DATE, column=$distinct.birthday#6)
                    | +-balance#9 := ColumnRef(type=UINT64, column=$distinct.balance#7)
                    +-input_scan=
                      +-GraphRefScan(column_list=$distinct.[birthday#6, balance#7])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_9 AS birthday,
  aml_1.a_10 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    WITH
      a_2,
      a_3,
      a_4,
      a_2.birthday AS a_5,
      a_4.balance AS a_6
    WITH
      a_5 AS a_7,
      a_6 AS a_8
    RETURN
      a_7 AS a_9,
      a_8 AS a_10
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS Account)
    WITH
      a_2,
      a_3,
      a_4,
      a_2.birthday AS a_5,
      a_4.balance AS a_6
    WITH
      a_5 AS a_7,
      a_6 AS a_8
    RETURN
      a_7 AS a_9,
      a_8 AS a_10
  ) AS aml_1
|> SELECT
     aml_1.a_9 AS birthday,
     aml_1.a_10 AS balance;
==

# Explicit group by
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  WITH *, count(*) as id GROUP BY n, e, m, x
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#15 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#15]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                  | +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5])
                  |     +-group_by_list=
                  |     | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |     | +-x#10 := ColumnRef(type=INT64, column=$graph_table.x#5)
                  |     +-aggregate_list=
                  |       +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
                    +-expr_list=
                    | +-n#11 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#7)
                    | +-e#12 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#8)
                    | +-m#13 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.m#9)
                    | +-x#14 := ColumnRef(type=INT64, column=$graph_table.x#10)
                    | +-id#15 := ColumnRef(type=INT64, column=$graph_table.id#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6])
==

# Explicit group by all
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+GROUP_BY_ALL,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  WITH *, count(*) as id GROUP BY ALL
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#15 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#15]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                  | +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5])
                  |     +-group_by_list=
                  |     | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |     | +-x#10 := ColumnRef(type=INT64, column=$graph_table.x#5)
                  |     +-aggregate_list=
                  |       +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
                    +-expr_list=
                    | +-n#11 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#7)
                    | +-e#12 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#8)
                    | +-m#13 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.m#9)
                    | +-x#14 := ColumnRef(type=INT64, column=$graph_table.x#10)
                    | +-id#15 := ColumnRef(type=INT64, column=$graph_table.id#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6])
==

# Implicit aggregation requires SQL_GRAPH_RETURN_EXTENSIONS
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  WITH n, e, m, COUNT(*) as id
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#13 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#13]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#10, e#11, m#12, id#13]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#10, e#11, m#12, id#13]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#10, e#11, m#12, id#13]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=$element_table.[n#1, e#2, m#4]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                  | +-column_list=$graph_table.[n#7, e#8, m#9, id#6]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[n#7, e#8, m#9, id#6]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  |     +-group_by_list=
                  |     | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |     +-aggregate_list=
                  |       +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[n#10, e#11, m#12, id#13]
                    +-expr_list=
                    | +-n#10 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#7)
                    | +-e#11 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#8)
                    | +-m#12 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.m#9)
                    | +-id#13 := ColumnRef(type=INT64, column=$graph_table.id#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[n#7, e#8, m#9, id#6])
==

# Implicit group by all with *, <extra expr>
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  WITH *, COUNT(*) as id
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#15 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#15]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                  | +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.m#4, $graph_table.x#5])
                  |     +-group_by_list=
                  |     | +-n#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     | +-m#9 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |     | +-x#10 := ColumnRef(type=INT64, column=$graph_table.x#5)
                  |     +-aggregate_list=
                  |       +-id#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[n#11, e#12, m#13, x#14, id#15]
                    +-expr_list=
                    | +-n#11 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#7)
                    | +-e#12 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#8)
                    | +-m#13 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.m#9)
                    | +-x#14 := ColumnRef(type=INT64, column=$graph_table.x#10)
                    | +-id#15 := ColumnRef(type=INT64, column=$graph_table.id#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[n#7, e#8, m#9, x#10, id#6])
==

# Implicit group by all
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_RETURN_EXTENSIONS]
select id from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  WITH n.id, e.amount, COUNT(m.id) as col
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#9 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#9, amount#10, col#11]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#9, amount#10, col#11]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#9, amount#10, col#11]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-55, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=74-80, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=$element_table.[n#1, e#2, m#4]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                  | +-column_list=$graph_table.[id#7, amount#8, col#6]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[id#7, amount#8, col#6]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  |     +-group_by_list=
                  |     | +-id#7 :=
                  |     | | +-GraphGetElementProperty
                  |     | |   +-type=INT64
                  |     | |   +-expr=
                  |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | |   +-property=id(INT64)
                  |     | +-amount#8 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=UINT64
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |     +-property=amount(UINT64)
                  |     +-aggregate_list=
                  |       +-col#6 :=
                  |         +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#9, amount#10, col#11]
                    +-expr_list=
                    | +-id#9 := ColumnRef(type=INT64, column=$graph_table.id#7)
                    | +-amount#10 := ColumnRef(type=UINT64, column=$graph_table.amount#8)
                    | +-col#11 := ColumnRef(type=INT64, column=$graph_table.col#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[id#7, amount#8, col#6])
==

# Implicit group by all with volatile expressions excluded
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_RETURN_EXTENSIONS]
select agg_expr from
graph_table(aml
  MATCH (n) -[e:Transfer]- (m)
  MATCH (m: Person)
  LET x = n.id
  WITH RAND() as non_grouping_key1, n.id, e.amount, COUNT(m.id)/SUM(m.id) as agg_expr, CURRENT_DATE() as non_grouping_key2
  RETURN *
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.agg_expr#16 AS agg_expr [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.agg_expr#16]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[non_grouping_key1#13, id#14, amount#15, agg_expr#16, non_grouping_key2#17]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[non_grouping_key1#13, id#14, amount#15, agg_expr#16, non_grouping_key2#17]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[non_grouping_key1#13, id#14, amount#15, agg_expr#16, non_grouping_key2#17]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=53-61, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=80-86, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.m#4
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])
                  +-ProjectScan
                  | +-column_list=$element_table.[n#1, e#2, m#4]
                  | +-expr_list=
                  | | +-x#5 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  +-ProjectScan
                  | +-column_list=$graph_table.[non_grouping_key1#10, id#8, amount#9, agg_expr#11, non_grouping_key2#12]
                  | +-expr_list=
                  | | +-non_grouping_key1#10 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
                  | | +-agg_expr#11 :=
                  | | | +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
                  | | |   +-Cast(INT64 -> DOUBLE)
                  | | |   | +-ColumnRef(type=INT64, column=$graph_table.$agg1#6)
                  | | |   +-Cast(INT64 -> DOUBLE)
                  | | |     +-ColumnRef(type=INT64, column=$graph_table.$agg2#7)
                  | | +-non_grouping_key2#12 := FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[id#8, amount#9, $agg1#6, $agg2#7]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#4])
                  |     +-group_by_list=
                  |     | +-id#8 :=
                  |     | | +-GraphGetElementProperty
                  |     | |   +-type=INT64
                  |     | |   +-expr=
                  |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | |   +-property=id(INT64)
                  |     | +-amount#9 :=
                  |     |   +-GraphGetElementProperty
                  |     |     +-type=UINT64
                  |     |     +-expr=
                  |     |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |     +-property=amount(UINT64)
                  |     +-aggregate_list=
                  |       +-$agg1#6 :=
                  |       | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  |       |   +-GraphGetElementProperty
                  |       |     +-type=INT64
                  |       |     +-expr=
                  |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |       |     +-property=id(INT64)
                  |       +-$agg2#7 :=
                  |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#4)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[non_grouping_key1#13, id#14, amount#15, agg_expr#16, non_grouping_key2#17]
                    +-expr_list=
                    | +-non_grouping_key1#13 := ColumnRef(type=DOUBLE, column=$graph_table.non_grouping_key1#10)
                    | +-id#14 := ColumnRef(type=INT64, column=$graph_table.id#8)
                    | +-amount#15 := ColumnRef(type=UINT64, column=$graph_table.amount#9)
                    | +-agg_expr#16 := ColumnRef(type=DOUBLE, column=$graph_table.agg_expr#11)
                    | +-non_grouping_key2#17 := ColumnRef(type=DATE, column=$graph_table.non_grouping_key2#12)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[non_grouping_key1#10, id#8, amount#9, agg_expr#11, non_grouping_key2#12])
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_RETURN_EXTENSIONS]
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (x) -[e]- (y)
  RETURN   MAX(x.age  GROUP BY x.age) AS x
    GROUP BY y
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#7 AS x [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.x#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.x#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[x#1, e#2, y#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[x#1, e#2, y#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.x#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.y#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.x#1
                  | |   +-tail=$element_table.y#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.x#7]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$graph_table.x#7]
                        +-input_scan=
                        | +-GraphRefScan(column_list=$element_table.[x#1, e#2, y#3])
                        +-group_by_list=
                        | +-y#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.y#3)
                        +-aggregate_list=
                          +-x#7 :=
                            +-AggregateFunctionCall(ZetaSQL:max(UINT32) -> UINT32)
                              +-ColumnRef(type=UINT32, column=$group_by_list.$groupbymod#6)
                              +-group_by_list=
                                +-$groupbymod#5 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.y#3)
                                +-$groupbymod#6 :=
                                  +-GraphGetElementProperty
                                    +-type=UINT32
                                    +-expr=
                                    | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#1)
                                    +-property=age(UINT32)
