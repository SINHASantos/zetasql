# LIMIT and OFFSET tests.
[default language_features=NONE]
SELECT 1 LIMIT 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Literal(type=INT64, value=1)
==

SELECT Key, Value
FROM KeyValue
LIMIT 0;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-limit=
      +-Literal(type=INT64, value=0)
==

SELECT Key, Value
FROM KeyValue
LIMIT 0 OFFSET 0;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-limit=
    | +-Literal(type=INT64, value=0)
    +-offset=
      +-Literal(type=INT64, value=0)
==

# Offset without limit is invalid.
select key from KeyValue offset 5;
--
ERROR: Syntax error: Expected end of input but got integer literal "5" [at 1:33]
select key from KeyValue offset 5;
                                ^
==

select key from KeyValue order by 1 offset 5;
--
ERROR: Syntax error: Expected end of input but got keyword OFFSET [at 1:37]
select key from KeyValue order by 1 offset 5;
                                    ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT Key, Value
FROM KeyValue
LIMIT -1;
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-limit=
      +-Literal(type=INT64, value=-1)
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT expects a non-negative integer literal or parameter [at 3:7]
LIMIT -1;
      ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT Key, Value
FROM KeyValue
LIMIT 0 OFFSET -1;
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-limit=
    | +-Literal(type=INT64, value=0)
    +-offset=
      +-Literal(type=INT64, value=-1)
--
ALTERNATION GROUP: <empty>
--
ERROR: OFFSET expects a non-negative integer literal or parameter [at 3:16]
LIMIT 0 OFFSET -1;
               ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT Key, Value
FROM KeyValue
LIMIT 9223372036854775808;
--
ERROR: Could not cast literal 9223372036854775808 to type INT64 [at 3:7]
LIMIT 9223372036854775808;
      ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT Key, Value
FROM KeyValue
LIMIT 1 OFFSET 9223372036854775808;
--
ERROR: Could not cast literal 9223372036854775808 to type INT64 [at 3:16]
LIMIT 1 OFFSET 9223372036854775808;
               ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT 1 OFFSET 1;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-Literal(type=INT64, value=1)
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT @test_param_int32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, name="test_param_int32")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT @test_param_int64;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Parameter(type=INT64, name="test_param_int64")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT @test_param_uint32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Cast(UINT32 -> INT64)
        +-Parameter(type=UINT32, name="test_param_uint32")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT @test_param_uint64;
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
ERROR: LIMIT ... OFFSET ... expects INT64, got UINT64 [at 1:16]
SELECT 1 LIMIT @test_param_uint64;
               ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Cast(UINT64 -> INT64)
        +-Parameter(type=UINT64, name="test_param_uint64")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT 1 OFFSET @test_param_int32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, name="test_param_int32")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT 1 OFFSET @test_param_int64;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-Parameter(type=INT64, name="test_param_int64")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT 1 OFFSET @test_param_uint32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-Cast(UINT32 -> INT64)
        +-Parameter(type=UINT32, name="test_param_uint32")
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 LIMIT 1 OFFSET @test_param_uint64;
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
ERROR: LIMIT ... OFFSET ... expects INT64, got UINT64 [at 1:25]
SELECT 1 LIMIT 1 OFFSET @test_param_uint64;
                        ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-Cast(UINT64 -> INT64)
        +-Parameter(type=UINT64, name="test_param_uint64")
==

# Casting of literals to integer and parameters to int64 works.
select 1 limit cast(1 as int32) offset cast(@test_param_int32 as int64)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1, has_explicit_type=TRUE)
    +-offset=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, name="test_param_int32")
==

select 1 limit cast(@test_param_int32 as int32)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, name="test_param_int32")
==

select 1 limit cast(@test_param_int64 as int32)
--
ERROR: LIMIT expects an integer literal or parameter [at 1:16]
select 1 limit cast(@test_param_int64 as int32)
               ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
# Expressions may or may not be allowed as arguments to LIMIT/OFFSET depending
# on LIMIT_OFFSET_EXPRESSIONS.
select 1 limit mod(1, 10)
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-FunctionCall(ZetaSQL:mod(INT64, INT64) -> INT64)
        +-Literal(type=INT64, value=1)
        +-Literal(type=INT64, value=10)
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT expects an integer literal or parameter [at 3:16]
select 1 limit mod(1, 10)
               ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
select 1 limit 1 offset mod(1, 10)
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-FunctionCall(ZetaSQL:mod(INT64, INT64) -> INT64)
        +-Literal(type=INT64, value=1)
        +-Literal(type=INT64, value=10)
--
ALTERNATION GROUP: <empty>
--
ERROR: OFFSET expects an integer literal or parameter [at 1:25]
select 1 limit 1 offset mod(1, 10)
                        ^
==

# Null arguments to LIMIT & OFFSET are not allowed.
[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
select 1 limit null
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Literal(type=INT64, value=NULL)
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT must not be null [at 1:16]
select 1 limit null
               ^
==

# Null arguments to LIMIT & OFFSET are not allowed.
[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
select 1 limit null
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-Literal(type=INT64, value=NULL)
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT must not be null [at 1:16]
select 1 limit null
               ^
==

# LIMIT & OFFSET can take expressions that reference query parameters.
[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select 1 limit mod(@test_param_int64, 10)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
      +-FunctionCall(ZetaSQL:mod(INT64, INT64) -> INT64)
        +-Parameter(type=INT64, name="test_param_int64")
        +-Literal(type=INT64, value=10)
==

[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select 1 limit 1 offset mod(@test_param_int64, 10)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-FunctionCall(ZetaSQL:mod(INT64, INT64) -> INT64)
        +-Parameter(type=INT64, name="test_param_int64")
        +-Literal(type=INT64, value=10)
==

# LIMIT & OFFSET cannot use the current name scope.
[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select Key, Value from KeyValue limit max(Key)
--
ERROR: Unrecognized name: Key [at 1:43]
select Key, Value from KeyValue limit max(Key)
                                          ^
==

[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select Key, Value from KeyValue limit 1 offset max(Key)
--
ERROR: Unrecognized name: Key [at 1:52]
select Key, Value from KeyValue limit 1 offset max(Key)
                                                   ^
==

# LIMIT & OFFSET can reference the parent name scope, but will still fail
# because a correlated reference is not constant.
[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
WITH sub AS (SELECT 1 AS lim)
SELECT lim FROM sub WHERE lim = (SELECT 1 LIMIT sub.lim)
--
ERROR: LIMIT expression must be constant [at 2:49]
SELECT lim FROM sub WHERE lim = (SELECT 1 LIMIT sub.lim)
                                                ^
==

[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
WITH sub AS (SELECT 0 AS lim)
SELECT lim FROM sub WHERE lim = (SELECT 0 LIMIT 1 OFFSET sub.lim)
--
ERROR: OFFSET expression must be constant [at 2:58]
SELECT lim FROM sub WHERE lim = (SELECT 0 LIMIT 1 OFFSET sub.lim)
                                                         ^
==

# LIMIT & OFFSET cannot take correlated expression subqueries.
[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select Key, Value from KeyValue limit (select max(Key))
--
ERROR: Unrecognized name: Key [at 1:51]
select Key, Value from KeyValue limit (select max(Key))
                                                  ^
==

[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select Key, Value from KeyValue limit 1 offset (select max(Key))
--
ERROR: Unrecognized name: Key [at 1:60]
select Key, Value from KeyValue limit 1 offset (select max(Key))
                                                           ^
==

# LIMIT & OFFSET expressions must be INT64.
[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select 1 limit cast(mod(1, 10) as uint64)
--
ERROR: LIMIT ... OFFSET ... expects INT64, got UINT64 [at 1:16]
select 1 limit cast(mod(1, 10) as uint64)
               ^
==

[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
select 1 limit 1 offset cast(mod(1, 10) as uint64)
--
ERROR: LIMIT ... OFFSET ... expects INT64, got UINT64 [at 1:25]
select 1 limit 1 offset cast(mod(1, 10) as uint64)
                        ^
==

SELECT *
FROM (SELECT Key, Value
      FROM KeyValue
      LIMIT 10)
LIMIT 5 OFFSET 5
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-LimitOffsetScan
    |       +-column_list=KeyValue.[Key#1, Value#2]
    |       +-input_scan=
    |       | +-ProjectScan
    |       |   +-column_list=KeyValue.[Key#1, Value#2]
    |       |   +-input_scan=
    |       |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |       +-limit=
    |         +-Literal(type=INT64, value=10)
    +-limit=
    | +-Literal(type=INT64, value=5)
    +-offset=
      +-Literal(type=INT64, value=5)
==

select *
from KeyValue kv1
limit 1 offset 2;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
    +-limit=
    | +-Literal(type=INT64, value=1)
    +-offset=
      +-Literal(type=INT64, value=2)
==

select * from KeyValue kv1
UNION ALL
SELECT * from KeyValue kv2
LIMIT 5 OFFSET 1;
--
QueryStmt
+-output_column_list=
| +-$union_all.Key#5 AS Key [INT64]
| +-$union_all.Value#6 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=$union_all.[Key#5, Value#6]
    +-input_scan=
    | +-SetOperationScan
    |   +-column_list=$union_all.[Key#5, Value#6]
    |   +-op_type=UNION_ALL
    |   +-input_item_list=
    |     +-SetOperationItem
    |     | +-scan=
    |     | | +-ProjectScan
    |     | |   +-column_list=KeyValue.[Key#1, Value#2]
    |     | |   +-input_scan=
    |     | |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
    |     | +-output_column_list=KeyValue.[Key#1, Value#2]
    |     +-SetOperationItem
    |       +-scan=
    |       | +-ProjectScan
    |       |   +-column_list=KeyValue.[Key#3, Value#4]
    |       |   +-input_scan=
    |       |     +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="kv2")
    |       +-output_column_list=KeyValue.[Key#3, Value#4]
    +-limit=
    | +-Literal(type=INT64, value=5)
    +-offset=
      +-Literal(type=INT64, value=1)
==

# Expected to fail
select * from KeyValue kv1
LIMIT 5 OFFSET 1
UNION ALL
SELECT * from KeyValue kv2
LIMIT 5 OFFSET 1;
--
ERROR: Syntax error: Expected end of input but got keyword UNION [at 3:1]
UNION ALL
^
==

select key from KeyValue order by 1 limit 3;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[KeyValue.Key#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[KeyValue.Key#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-limit=
      +-Literal(type=INT64, value=3)
==

select key from KeyValue order by 1 limit 3 offset 5;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[KeyValue.Key#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[KeyValue.Key#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-limit=
    | +-Literal(type=INT64, value=3)
    +-offset=
      +-Literal(type=INT64, value=5)
==

# Offset without limit is invalid.
select key from KeyValue order by 1 offset 5;
--
ERROR: Syntax error: Expected end of input but got keyword OFFSET [at 1:37]
select key from KeyValue order by 1 offset 5;
                                    ^
==

[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
select key FROM KeyValue ORDER BY 1 {{LIMIT|LIMIT 1 OFFSET}} 18446744073709551615;
--
ALTERNATION GROUPS:
    +LIMIT_OFFSET_EXPRESSIONS,LIMIT
    LIMIT
--
ERROR: Could not cast literal 18446744073709551615 to type INT64 [at 1:43]
select key FROM KeyValue ORDER BY 1 LIMIT 18446744073709551615;
                                          ^
--
ALTERNATION GROUPS:
    +LIMIT_OFFSET_EXPRESSIONS,LIMIT 1 OFFSET
    LIMIT 1 OFFSET
--
ERROR: Could not cast literal 18446744073709551615 to type INT64 [at 1:52]
select key FROM KeyValue ORDER BY 1 LIMIT 1 OFFSET 18446744073709551615;
                                                   ^
==

[language_features=NONE,+UNNEST_AND_FLATTEN_ARRAYS,+LIMIT_OFFSET_EXPRESSIONS]
SELECT key
FROM KeyValue
LIMIT FLATTEN(STRUCT([STRUCT(1 AS quantity), STRUCT(2 AS quantity)] AS sales).sales.quantity)[OFFSET(0)]
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[KeyValue.Key#1]
    |   +-input_scan=
    |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    +-limit=
      +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
        +-Flatten
        | +-type=ARRAY<INT64>
        | +-expr=
        | | +-GetStructField
        | |   +-type=ARRAY<STRUCT<quantity INT64>>
        | |   +-expr=
        | |   | +-Literal(type=STRUCT<sales ARRAY<STRUCT<quantity INT64>>>, value={sales:[{quantity:1}, {quantity:2}]})
        | |   +-field_idx=0
        | +-get_field_list=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-FlattenedArg(type=STRUCT<quantity INT64>)
        |     +-field_idx=0
        +-Literal(type=INT64, value=0)
==

[language_features=NONE,+UNNEST_AND_FLATTEN_ARRAYS,+LIMIT_OFFSET_EXPRESSIONS]
SELECT key
FROM KeyValue
LIMIT 2
OFFSET FLATTEN(STRUCT([STRUCT(1 AS quantity), STRUCT(2 AS quantity)] AS sales).sales.quantity)[OFFSET(0)]
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[KeyValue.Key#1]
    |   +-input_scan=
    |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    +-limit=
    | +-Literal(type=INT64, value=2)
    +-offset=
      +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
        +-Flatten
        | +-type=ARRAY<INT64>
        | +-expr=
        | | +-GetStructField
        | |   +-type=ARRAY<STRUCT<quantity INT64>>
        | |   +-expr=
        | |   | +-Literal(type=STRUCT<sales ARRAY<STRUCT<quantity INT64>>>, value={sales:[{quantity:1}, {quantity:2}]})
        | |   +-field_idx=0
        | +-get_field_list=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-FlattenedArg(type=STRUCT<quantity INT64>)
        |     +-field_idx=0
        +-Literal(type=INT64, value=0)
==

# SimpleConstant can be referenced in the LIMIT and OFFSET clause with language feature.
[language_features=NONE,{{+LIMIT_OFFSET_EXPRESSIONS|}}]
SELECT 1 FROM KeyValue limit TestConstantInt64 OFFSET TestConstantInt64;
--
ALTERNATION GROUP: +LIMIT_OFFSET_EXPRESSIONS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#3]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#3]
    |   +-expr_list=
    |   | +-$col1#3 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-TableScan(table=KeyValue)
    +-limit=
    | +-Constant(TestConstantInt64, type=INT64, value=1)
    +-offset=
      +-Constant(TestConstantInt64, type=INT64, value=1)
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT expects an integer literal or parameter [at 1:30]
SELECT 1 FROM KeyValue limit TestConstantInt64 OFFSET TestConstantInt64;
                             ^
==

[prepare_database=db]
create constant local_constant_int64 = 1 + 2 * 3;
--
CreateConstantStmt
+-name_path=local_constant_int64
+-expr=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-Literal(type=INT64, value=1)
    +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
      +-Literal(type=INT64, value=2)
      +-Literal(type=INT64, value=3)
==

[prepare_database=db]
create constant local_constant_int32 = CAST(1 + 2 * 3 AS INT32);
--
CreateConstantStmt
+-name_path=local_constant_int32
+-expr=
  +-Cast(INT64 -> INT32)
    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
      +-Literal(type=INT64, value=1)
      +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
        +-Literal(type=INT64, value=2)
        +-Literal(type=INT64, value=3)
==

# SQLConstant can be referenced in the LIMIT and OFFSET clause with language feature.
[language_features=NONE,+LIMIT_OFFSET_EXPRESSIONS]
[use_database=db]
select * from KeyValue kv1
LIMIT local_constant_int64 OFFSET local_constant_int32
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-LimitOffsetScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
    +-limit=
    | +-Constant(local_constant_int64, type=INT64, value=Uninitialized value)
    +-offset=
      +-Cast(INT32 -> INT64)
        +-Constant(local_constant_int32, type=INT32, value=Uninitialized value)
==

[language_features=NONE,{{+LIMIT_ALL|}}]
SELECT 1 LIMIT ALL;
--
ALTERNATION GROUP: +LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT ALL is not supported [at 1:10]
SELECT 1 LIMIT ALL;
         ^
==

[language_features=NONE,{{+LIMIT_ALL|}}]
SELECT 1 LIMIT ALL OFFSET 1;
--
ALTERNATION GROUP: +LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-offset=
      +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: <empty>
--
ERROR: LIMIT ALL is not supported [at 1:10]
SELECT 1 LIMIT ALL OFFSET 1;
         ^
