[default language_features=NONE]
select 1,2,3
|> where true;
--
ERROR: Pipe query syntax not supported [at 2:1]
|> where true;
^
==

[default language_features=NONE,+PIPES,+PIPE_STATIC_DESCRIBE]

select 1,2,3
|> where true;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
+-query=
  +-FilterScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   | +-$col2#2 := Literal(type=INT64, value=2)
    |   | +-$col3#3 := Literal(type=INT64, value=3)
    |   +-input_scan=
    |     +-SingleRowScan
    +-filter_expr=
      +-Literal(type=BOOL, value=true)
==

select 1 x, 2 y
|> where x=1
|> where y=2
|> where x=y;
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
+-query=
  +-FilterScan
    +-column_list=$query.[x#1, y#2]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=$query.[x#1, y#2]
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=$query.[x#1, y#2]
    |   |   +-input_scan=
    |   |   | +-ProjectScan
    |   |   |   +-column_list=$query.[x#1, y#2]
    |   |   |   +-expr_list=
    |   |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   |   | +-y#2 := Literal(type=INT64, value=2)
    |   |   |   +-input_scan=
    |   |   |     +-SingleRowScan
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   |       +-ColumnRef(type=INT64, column=$query.x#1)
    |   |       +-Literal(type=INT64, value=1)
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |       +-ColumnRef(type=INT64, column=$query.y#2)
    |       +-Literal(type=INT64, value=2)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$query.x#1)
        +-ColumnRef(type=INT64, column=$query.y#2)
==

select 5
from (
  select 1
  |> where true
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 := Literal(type=INT64, value=5)
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.$col1#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-Literal(type=BOOL, value=true)
==

select (select 1 |> where true)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-FilterScan
    |         +-column_list=[$expr_subquery.$col1#1]
    |         +-input_scan=
    |         | +-ProjectScan
    |         |   +-column_list=[$expr_subquery.$col1#1]
    |         |   +-expr_list=
    |         |   | +-$col1#1 := Literal(type=INT64, value=1)
    |         |   +-input_scan=
    |         |     +-SingleRowScan
    |         +-filter_expr=
    |           +-Literal(type=BOOL, value=true)
    +-input_scan=
      +-SingleRowScan
==

# Expression in a pipe operator referencing a table.
select 1
|> where (select count(*) from KeyValue) > 1
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-FilterScan
    +-column_list=[$query.$col1#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.$col1#1]
    |   +-expr_list=
    |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-SubqueryExpr
        | +-type=INT64
        | +-subquery_type=SCALAR
        | +-subquery=
        |   +-ProjectScan
        |     +-column_list=[$aggregate.$agg1#4]
        |     +-input_scan=
        |       +-AggregateScan
        |         +-column_list=[$aggregate.$agg1#4]
        |         +-input_scan=
        |         | +-TableScan(table=KeyValue)
        |         +-aggregate_list=
        |           +-$agg1#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-Literal(type=INT64, value=1)
==

# The pipe operator binds inside the WithScan, as part of the final query,
# so the WITH alias is visible in the pipe operator.
WITH q1 AS (select 1 x |> where x=1)
select * from q1
|> where x=(select x from q1)
--
QueryStmt
+-output_column_list=
| +-q1.x#2 AS x [INT64]
+-query=
  +-WithScan
    +-column_list=[q1.x#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="q1"
    |   +-with_subquery=
    |     +-FilterScan
    |       +-column_list=[q1.x#1]
    |       +-input_scan=
    |       | +-ProjectScan
    |       |   +-column_list=[q1.x#1]
    |       |   +-expr_list=
    |       |   | +-x#1 := Literal(type=INT64, value=1)
    |       |   +-input_scan=
    |       |     +-SingleRowScan
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |           +-ColumnRef(type=INT64, column=q1.x#1)
    |           +-Literal(type=INT64, value=1)
    +-query=
      +-FilterScan
        +-column_list=[q1.x#2]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[q1.x#2]
        |   +-input_scan=
        |     +-WithRefScan(column_list=[q1.x#2], with_query_name="q1")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=q1.x#2)
            +-SubqueryExpr
              +-type=INT64
              +-subquery_type=SCALAR
              +-subquery=
                +-ProjectScan
                  +-column_list=[q1.x#3]
                  +-input_scan=
                    +-WithRefScan(column_list=[q1.x#3], with_query_name="q1")
==

# With a WITH query inside parentheses, the WITH alias
# is not visible to the following pipe operator.
[language_features=NONE,+PIPES,+WITH_ON_SUBQUERY]
(
  WITH q1 AS (select 1 x |> where x=1)
  select * from q1
  |> where x=(select x from q1)
)
|> where x=(select x from q1);
--
ERROR: Table not found: q1 [at 6:27]
|> where x=(select x from q1);
                          ^
==

# Value table in a WITH clause works as a value table.
WITH q AS (FROM TestExtraValueTable)
FROM q
|> WHERE {{q.|}}int32_val1 = 4
--
QueryStmt
+-output_column_list=
| +-q.TestExtraValueTable#4 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-WithScan
    +-column_list=[q.TestExtraValueTable#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="q"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[TestExtraValueTable.value#1]
    |       +-input_scan=
    |         +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
    +-query=
      +-FilterScan
        +-column_list=[q.TestExtraValueTable#4]
        +-input_scan=
        | +-WithRefScan(column_list=[q.TestExtraValueTable#4], with_query_name="q")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
            +-GetProtoField
            | +-type=INT32
            | +-expr=
            | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=q.TestExtraValueTable#4)
            | +-field_descriptor=int32_val1
            | +-default_value=0
            +-Literal(type=INT32, value=4)
==

# Pipe after a parenthesized query.
(
  select 1 x
)
|> where x=1
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$query.x#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.x#1]
    |   +-expr_list=
    |   | +-x#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$query.x#1)
        +-Literal(type=INT64, value=1)
==

# The pipe binds to the whole UNION query, so x is visible.
select 1 x
UNION ALL
select 2 y
|> where x=3
--
QueryStmt
+-output_column_list=
| +-$union_all.x#3 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$union_all.x#3]
    +-input_scan=
    | +-SetOperationScan
    |   +-column_list=[$union_all.x#3]
    |   +-op_type=UNION_ALL
    |   +-input_item_list=
    |     +-SetOperationItem
    |     | +-scan=
    |     | | +-ProjectScan
    |     | |   +-column_list=[$union_all1.x#1]
    |     | |   +-expr_list=
    |     | |   | +-x#1 := Literal(type=INT64, value=1)
    |     | |   +-input_scan=
    |     | |     +-SingleRowScan
    |     | +-output_column_list=[$union_all1.x#1]
    |     +-SetOperationItem
    |       +-scan=
    |       | +-ProjectScan
    |       |   +-column_list=[$union_all2.y#2]
    |       |   +-expr_list=
    |       |   | +-y#2 := Literal(type=INT64, value=2)
    |       |   +-input_scan=
    |       |     +-SingleRowScan
    |       +-output_column_list=[$union_all2.y#2]
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$union_all.x#3)
        +-Literal(type=INT64, value=3)
==

# The pipe binds to the whole UNION query, so y is not visible.
select 1 x
UNION ALL
select 2 y
|> where y=3
--
ERROR: Unrecognized name: y [at 4:10]
|> where y=3
         ^
==

(
  select 1 x
  UNION ALL
  select 2 y
  |> where x=2
)
|> where x=3
--
QueryStmt
+-output_column_list=
| +-$union_all.x#3 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$union_all.x#3]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=[$union_all.x#3]
    |   +-input_scan=
    |   | +-SetOperationScan
    |   |   +-column_list=[$union_all.x#3]
    |   |   +-op_type=UNION_ALL
    |   |   +-input_item_list=
    |   |     +-SetOperationItem
    |   |     | +-scan=
    |   |     | | +-ProjectScan
    |   |     | |   +-column_list=[$union_all1.x#1]
    |   |     | |   +-expr_list=
    |   |     | |   | +-x#1 := Literal(type=INT64, value=1)
    |   |     | |   +-input_scan=
    |   |     | |     +-SingleRowScan
    |   |     | +-output_column_list=[$union_all1.x#1]
    |   |     +-SetOperationItem
    |   |       +-scan=
    |   |       | +-ProjectScan
    |   |       |   +-column_list=[$union_all2.y#2]
    |   |       |   +-expr_list=
    |   |       |   | +-y#2 := Literal(type=INT64, value=2)
    |   |       |   +-input_scan=
    |   |       |     +-SingleRowScan
    |   |       +-output_column_list=[$union_all2.y#2]
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |       +-ColumnRef(type=INT64, column=$union_all.x#3)
    |       +-Literal(type=INT64, value=2)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$union_all.x#3)
        +-Literal(type=INT64, value=3)
==

# Pipe after a query with LIMIT.
select 1 x
limit 10
|> where x=1
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$query.x#1]
    +-input_scan=
    | +-LimitOffsetScan
    |   +-column_list=[$query.x#1]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.x#1]
    |   |   +-expr_list=
    |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-limit=
    |     +-Literal(type=INT64, value=10)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$query.x#1)
        +-Literal(type=INT64, value=1)
==

# Pipe after a query with ORDER BY.
select *
from (select 1 x)
order by x
|> where x=1
--
QueryStmt
+-output_column_list=
| +-$subquery1.x#1 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$subquery1.x#1]
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[$subquery1.x#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$subquery1.x#1]
    |   |   +-expr_list=
    |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$subquery1.x#1)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$subquery1.x#1)
        +-Literal(type=INT64, value=1)
==

# Test with SELECTs and EXTENDs computing expressions that never get used.
# This is checking a case where the SQLBuilder was failing to include those.
[show_sqlbuilder_output]
from KeyValue
|> extend key+1 AS k1, 123 AS k2, sqrt(key) AS k3
|> extend k3+1 AS k4, 'abc' AS k5
|> select k1, 'xxx' AS k6, k4+1 AS k7
|> select k1
--
QueryStmt
+-output_column_list=
| +-$pipe_extend.k1#3 AS k1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_extend.k1#3]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$pipe_extend.k1#3, $pipe_select.k6#8, $pipe_select.k7#9]
        +-expr_list=
        | +-k6#8 := Literal(type=STRING, value="xxx")
        | +-k7#9 :=
        |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-ColumnRef(type=DOUBLE, column=$pipe_extend.k4#6)
        |     +-Literal(type=DOUBLE, value=1)
        +-input_scan=
          +-ProjectScan
            +-column_list=[KeyValue.Key#1, $pipe_extend.k1#3, $pipe_extend.k2#4, $pipe_extend.k3#5, $pipe_extend.k4#6, $pipe_extend.k5#7]
            +-expr_list=
            | +-k4#6 :=
            | | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            | |   +-ColumnRef(type=DOUBLE, column=$pipe_extend.k3#5)
            | |   +-Literal(type=DOUBLE, value=1)
            | +-k5#7 := Literal(type=STRING, value="abc")
            +-input_scan=
              +-ProjectScan
                +-column_list=[KeyValue.Key#1, $pipe_extend.k1#3, $pipe_extend.k2#4, $pipe_extend.k3#5]
                +-expr_list=
                | +-k1#3 :=
                | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                | |   +-Literal(type=INT64, value=1)
                | +-k2#4 := Literal(type=INT64, value=123)
                | +-k3#5 :=
                |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
                |     +-Cast(INT64 -> DOUBLE)
                |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                +-input_scan=
                  +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_12.a_3 AS k1
FROM
  (
    SELECT
      projectscan_9.a_3 AS a_3,
      "xxx" AS a_10,
      (projectscan_9.a_7) + 1.0 AS a_11
    FROM
      (
        SELECT
          projectscan_6.a_1 AS a_1,
          projectscan_6.a_3 AS a_3,
          projectscan_6.a_4 AS a_4,
          projectscan_6.a_5 AS a_5,
          (projectscan_6.a_5) + 1.0 AS a_7,
          "abc" AS a_8
        FROM
          (
            SELECT
              keyvalue_2.a_1 AS a_1,
              (keyvalue_2.a_1) + 1 AS a_3,
              123 AS a_4,
              SQRT(CAST(keyvalue_2.a_1 AS DOUBLE)) AS a_5
            FROM
              (
                SELECT
                  KeyValue.Key AS a_1
                FROM
                  KeyValue
              ) AS keyvalue_2
          ) AS projectscan_6
      ) AS projectscan_9
  ) AS projectscan_12;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> SELECT
     keyvalue_2.a_1 AS a_1,
     (keyvalue_2.a_1) + 1 AS a_3,
     123 AS a_4,
     SQRT(CAST(keyvalue_2.a_1 AS DOUBLE)) AS a_5
|> AS projectscan_6
|> SELECT
     projectscan_6.a_1 AS a_1,
     projectscan_6.a_3 AS a_3,
     projectscan_6.a_4 AS a_4,
     projectscan_6.a_5 AS a_5,
     (projectscan_6.a_5) + 1.0 AS a_7,
     "abc" AS a_8
|> AS projectscan_9
|> SELECT
     projectscan_9.a_3 AS a_3,
     "xxx" AS a_10,
     (projectscan_9.a_7) + 1.0 AS a_11
|> AS projectscan_12
|> SELECT
     projectscan_12.a_3 AS k1;
==

select 1 x
|> limit 10
|> limit 10 offset 20
|> limit @test_param_int64
|> where x=1
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$query.x#1]
    +-input_scan=
    | +-LimitOffsetScan
    |   +-column_list=[$query.x#1]
    |   +-input_scan=
    |   | +-LimitOffsetScan
    |   |   +-column_list=[$query.x#1]
    |   |   +-input_scan=
    |   |   | +-LimitOffsetScan
    |   |   |   +-column_list=[$query.x#1]
    |   |   |   +-input_scan=
    |   |   |   | +-ProjectScan
    |   |   |   |   +-column_list=[$query.x#1]
    |   |   |   |   +-expr_list=
    |   |   |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   |   |   +-input_scan=
    |   |   |   |     +-SingleRowScan
    |   |   |   +-limit=
    |   |   |     +-Literal(type=INT64, value=10)
    |   |   +-limit=
    |   |   | +-Literal(type=INT64, value=10)
    |   |   +-offset=
    |   |     +-Literal(type=INT64, value=20)
    |   +-limit=
    |     +-Parameter(type=INT64, name="test_param_int64")
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$query.x#1)
        +-Literal(type=INT64, value=1)
==

select 1 x
|> limit @test_param_int32 offset @test_param_bool
--
ERROR: OFFSET expects an integer literal or parameter [at 2:35]
|> limit @test_param_int32 offset @test_param_bool
                                  ^
==

[language_features=NONE,{{+PIPES|+PIPES,+LIMIT_ALL}}]
select 1 x
|> limit all offset 20
--
ALTERNATION GROUP: +PIPES
--
ERROR: LIMIT ALL is not supported [at 2:4]
|> limit all offset 20
   ^
--
ALTERNATION GROUP: +PIPES,+LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.x#1]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.x#1]
    |   +-expr_list=
    |   | +-x#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-offset=
      +-Literal(type=INT64, value=20)
==

# The table from the pipe input is not visible as a table name in
# correlated expressions subqueries in pipe operators.
from KeyValue kv
|> where (select count(*) from kv) > 1
--
ERROR: Table not found: kv (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier kv is in scope but unqualified names cannot be resolved here.) [at 2:32]
|> where (select count(*) from kv) > 1
                               ^
==

# Columns from the pipe input are visible in correlated expressions subqueries
# in pipe operators.
from KeyValue kv
|> where (select key) > 1
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-SubqueryExpr
        | +-type=INT64
        | +-subquery_type=SCALAR
        | +-parameter_list=
        | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | +-subquery=
        |   +-ProjectScan
        |     +-column_list=[$expr_subquery.key#3]
        |     +-expr_list=
        |     | +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
        |     +-input_scan=
        |       +-SingleRowScan
        +-Literal(type=INT64, value=1)
==

# From bug 328283572, expression subqueries with pseudo-columns were triggering
# validator errors.  Value table version.
# The failures were different with and without column pruning.
[{{|no_}}prune_unused_columns]
SELECT {{|EXISTS|ARRAY}}(FROM TestExtraValueTable)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.TestExtraPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=PROTO<zetasql_test__.TestExtraPB>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[TestExtraValueTable.value#1]
    |         +-input_scan=
    |           +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: EXISTS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-TableScan(table=TestExtraValueTable)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ARRAY<PROTO<zetasql_test__.TestExtraPB>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[TestExtraValueTable.value#1]
    |         +-input_scan=
    |           +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.TestExtraPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=PROTO<zetasql_test__.TestExtraPB>
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[TestExtraValueTable.value#1]
    |         +-input_scan=
    |           +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2, RowId#3], table=TestExtraValueTable, column_index_list=[0, 1, 2])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,EXISTS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2, RowId#3], table=TestExtraValueTable, column_index_list=[0, 1, 2])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,ARRAY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [ARRAY<PROTO<zetasql_test__.TestExtraPB>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[TestExtraValueTable.value#1]
    |         +-input_scan=
    |           +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2, RowId#3], table=TestExtraValueTable, column_index_list=[0, 1, 2])
    +-input_scan=
      +-SingleRowScan
==

# From bug 328283572, expression subqueries with pseudo-columns were triggering
# validator errors.
# Non-value table version - after the DROP, it has only one visible column,
# but still has pseudo-columns.
[{{|no_}}prune_unused_columns]
SELECT {{|EXISTS|ARRAY|NULL IN}}(FROM EnumTable
                                 |> DROP TestEnum, AnotherTestEnum)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=INT32
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.key#1]
    |         +-input_scan=
    |           +-TableScan(column_list=[EnumTable.key#1], table=EnumTable, column_index_list=[0])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: EXISTS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-TableScan(table=EnumTable)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: ARRAY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT32>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.key#1]
    |         +-input_scan=
    |           +-TableScan(column_list=[EnumTable.key#1], table=EnumTable, column_index_list=[0])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: NULL IN
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-Literal(type=INT32, value=NULL)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.key#1]
    |         +-input_scan=
    |           +-TableScan(column_list=[EnumTable.key#1], table=EnumTable, column_index_list=[0])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=INT32
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.key#1]
    |         +-input_scan=
    |           +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,EXISTS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,ARRAY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT32>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.key#1]
    |         +-input_scan=
    |           +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_,NULL IN
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-Literal(type=INT32, value=NULL)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.key#1]
    |         +-input_scan=
    |           +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
==

# Special case where we have a pseudo-column copied as a real column, so
# there might be two copies of that column in the NameList and column_list
# even though only one is in the visible NameList.
[{{|no_}}prune_unused_columns]
SELECT (FROM EnumTable
        |> EXTEND RowId AS RowId2
        |> DROP key, TestEnum, AnotherTestEnum)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BYTES
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.RowId#5]
    |         +-input_scan=
    |           +-TableScan(column_list=[EnumTable.RowId#5], table=EnumTable, column_index_list=[4])
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BYTES
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[EnumTable.RowId#5]
    |         +-input_scan=
    |           +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
==

# EXISTS works even when the subquery produces multiple visible columns.
[{{|no_}}prune_unused_columns]
SELECT EXISTS(FROM EnumTable)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-TableScan(table=EnumTable)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
==

# LIKE ANY with a subquery producuing one column plus pseudo-columns.
# TODO LIKE ANY is not fully implemented yet.  This should
# be producing LIKE_ANY/LIKE_ALL subqueries, not SCALAR subqueries.
[language_features=NONE,+PIPES,+LIKE_ANY_SOME_ALL,+LIKE_ANY_SOME_ALL_SUBQUERY]
[{{|no_}}prune_unused_columns]
SELECT 'abc' LIKE ANY(FROM EnumTable
                      |> EXTEND 'a%' AS pattern
                      |> DROP key, TestEnum, AnotherTestEnum)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=LIKE_ANY
    |     +-in_expr=
    |     | +-Literal(type=STRING, value="abc")
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$pipe_extend.pattern#6]
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$pipe_extend.pattern#6]
    |             +-expr_list=
    |             | +-pattern#6 := Literal(type=STRING, value="a%")
    |             +-input_scan=
    |               +-TableScan(table=EnumTable)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: no_
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=LIKE_ANY
    |     +-in_expr=
    |     | +-Literal(type=STRING, value="abc")
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$pipe_extend.pattern#6]
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[EnumTable.key#1, EnumTable.TestEnum#2, EnumTable.AnotherTestEnum#3, EnumTable.Filename#4, EnumTable.RowId#5, $pipe_extend.pattern#6]
    |             +-expr_list=
    |             | +-pattern#6 := Literal(type=STRING, value="a%")
    |             +-input_scan=
    |               +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    +-input_scan=
      +-SingleRowScan
==

# This compares ProjectScan output produced for SELECT and EXTEND.
# SELECT makes an extra ProjectScan for the no-op project that just
# adds aliases but EXTEND does not.
SELECT 1 x
|> {{SELECT|EXTEND}} x AS y, x AS z
|> STATIC_DESCRIBE
--
ALTERNATION GROUP: SELECT
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS y [INT64]
| +-$query.x#1 AS z [INT64]
+-query=
  +-StaticDescribeScan
    +-column_list=$query.[x#1, x#1]
    +-describe_text=
    |   """
    |   NameList:
    |     y INT64 $query.x#1
    |     z INT64 $query.x#1
    |   NameScope:
    |     Names:
    |       y -> INT64 ($query.x#1)
    |       z -> INT64 ($query.x#1)
    |   """
    +-input_scan=
      +-ProjectScan
        +-column_list=$query.[x#1, x#1]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$query.x#1]
            +-expr_list=
            | +-x#1 := Literal(type=INT64, value=1)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: EXTEND
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$query.x#1 AS y [INT64]
| +-$query.x#1 AS z [INT64]
+-query=
  +-StaticDescribeScan
    +-column_list=[$query.x#1]
    +-describe_text=
    |   """
    |   NameList:
    |     x INT64 $query.x#1
    |     y INT64 $query.x#1
    |     z INT64 $query.x#1
    |   NameScope:
    |     Names:
    |       x -> INT64 ($query.x#1)
    |       y -> INT64 ($query.x#1)
    |       z -> INT64 ($query.x#1)
    |   """
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.x#1]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
