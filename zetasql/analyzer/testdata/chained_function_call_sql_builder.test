[default sqlbuilder_target_syntax_map_mode=kChainedFunctionCall]
[default language_features=NONE,+CHAINED_FUNCTION_CALLS,+SAFE_FUNCTION_CALL,+ANALYTIC_FUNCTIONS,+INLINE_LAMBDA_ARGUMENT,+NAMED_ARGUMENTS,+ARRAY_AGGREGATION_FUNCTIONS,+ARRAY_ZIP,+MULTILEVEL_AGGREGATION,+ANONYMIZATION]
[default show_sqlbuilder_output]
[default sql_builder_target_syntax_mode=standard]

SELECT (key).sqrt(),
       upper(value).lower().substr(1,2)
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [DOUBLE]
| +-$query.$col2#4 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#3, $col2#4]
    +-expr_list=
    | +-$col1#3 :=
    | | +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    | |   +-Cast(INT64 -> DOUBLE)
    | |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | +-$col2#4 :=
    |   +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |     +-FunctionCall(ZetaSQL:lower(STRING) -> STRING)
    |     | +-FunctionCall(ZetaSQL:upper(STRING) -> STRING)
    |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])

[SQLBUILDER_OUTPUT]
SELECT
  CAST(keyvalue_3.a_1 AS DOUBLE).SQRT() AS a_4,
  (((keyvalue_3.a_2).UPPER()).LOWER()).SUBSTR(1, 2) AS a_5
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3;
==

# We don't get chained calls for operator + or the zero-arg function RAND.
SELECT coalesce(safe.abs(15.3 + 2), rand(), hll_count.extract(b'abc'))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:coalesce(repeated(3) DOUBLE) -> DOUBLE)
    |     +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:abs(DOUBLE) -> DOUBLE)
    |     | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |     |   +-Literal(type=DOUBLE, value=15.3)
    |     |   +-Literal(type=DOUBLE, value=2)
    |     +-FunctionCall(ZetaSQL:rand() -> DOUBLE)
    |     +-Cast(INT64 -> DOUBLE)
    |       +-FunctionCall(ZetaSQL:hll_count.extract(BYTES) -> INT64)
    |         +-Literal(type=BYTES, value=b"abc")
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_OUTPUT]
SELECT
  ((15.3 + 2.0).(SAFE.ABS)()).COALESCE(RAND(), CAST(b"abc".(HLL_COUNT.`EXTRACT`)() AS DOUBLE)) AS a_1;
==

# Don't use a chained call if the first argument has an alias.
select array_zip([1], [2] as y),
       array_zip([1] AS x, [2] as y)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<STRUCT<INT64, y INT64>>]
| +-$query.$col2#2 AS `$col2` [ARRAY<STRUCT<x INT64, y INT64>>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:array_zip(ARRAY<INT64> input_array_1, ARRAY<INT64> input_array_2, optional(1) ENUM<ARRAY_ZIP_MODE> mode) -> ARRAY<STRUCT<INT64, y INT64>>)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-Literal(type=ARRAY<INT64>, value=[1])
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   | | +-Literal(type=ARRAY<INT64>, value=[2])
    | |   | +-argument_alias="y"
    | |   +-FunctionArgument
    | |     +-expr=
    | |       +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
    | +-$col2#2 :=
    |   +-FunctionCall(ZetaSQL:array_zip(ARRAY<INT64> input_array_1, ARRAY<INT64> input_array_2, optional(1) ENUM<ARRAY_ZIP_MODE> mode) -> ARRAY<STRUCT<x INT64, y INT64>>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=ARRAY<INT64>, value=[1])
    |     | +-argument_alias="x"
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=ARRAY<INT64>, value=[2])
    |     | +-argument_alias="y"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_OUTPUT]
SELECT
  ARRAY< INT64 >[1].ARRAY_ZIP(ARRAY< INT64 >[2] AS y, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1,
  ARRAY_ZIP(ARRAY< INT64 >[1] AS x, ARRAY< INT64 >[2] AS y, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_2;
==

# Don't generate 5.coalesce(), which is invalid.
# But parentheses are always added on the input, regardless of type.
SELECT (5).coalesce()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:coalesce(repeated(1) INT64) -> INT64)
    |     +-Literal(type=INT64, value=5)
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_OUTPUT]
SELECT
  (5).COALESCE() AS a_1;
==

# Aggregates with DISTINCT.
select sum(distinct key), (value).count(distinct)
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
| +-$aggregate.$agg2#4 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#3, $agg2#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#3, $agg2#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#3 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-distinct=TRUE
          +-$agg2#4 :=
            +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              +-distinct=TRUE

[SQLBUILDER_OUTPUT]
SELECT
  (keyvalue_3.a_1).SUM(DISTINCT) AS a_4,
  (keyvalue_3.a_2).COUNT(DISTINCT) AS a_5
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3;
==

# Window functions with DISTINCT.
select sum(distinct key) OVER (),
       (value).count(distinct) OVER ()
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#5 AS `$col1` [INT64]
| +-$analytic.$analytic2#6 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#5, $analytic2#6]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#5, $analytic.$analytic2#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#5 :=
              | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-distinct=TRUE
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-$analytic2#6 :=
                +-AnalyticFunctionCall(ZetaSQL:count(STRING) -> INT64)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                  +-distinct=TRUE
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)

[SQLBUILDER_OUTPUT]
SELECT
  analyticscan_6.a_4 AS a_4,
  analyticscan_6.a_5 AS a_5
FROM
  (
    SELECT
      keyvalue_3.a_1 AS a_1,
      keyvalue_3.a_2 AS a_2,
      (keyvalue_3.a_1).SUM(DISTINCT) OVER () AS a_4,
      (keyvalue_3.a_2).COUNT(DISTINCT) OVER () AS a_5
    FROM
      (
        SELECT
          KeyValue.Key AS a_1,
          KeyValue.Value AS a_2
        FROM
          KeyValue
      ) AS keyvalue_3
  ) AS analyticscan_6;
==

# Multi-level aggregates don't generate chained function calls.
select avg(sum(key) group by value)
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#5]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#5 :=
            +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#4)
              +-group_by_list=
              | +-$groupbymod#3 := ColumnRef(type=STRING, column=KeyValue.Value#2)
              +-group_by_aggregate_list=
                +-$agg1#4 :=
                  +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=KeyValue.Key#1)

[SQLBUILDER_OUTPUT]
SELECT
  AVG((keyvalue_3.a_1).SUM()
    GROUP BY keyvalue_3.a_2) AS a_4
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3;
==

# Testing APPLY in chained calls.
select (value)
          .upper()
          .apply(x -> cast(x as bytes))
          .concat(b'xxx')
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:concat(BYTES, repeated(1) BYTES) -> BYTES)
    |     +-FunctionCall(ZetaSQL:apply(STRING value, FUNCTION<STRING->BYTES> transform) -> BYTES)
    |     | +-FunctionArgument
    |     | | +-expr=
    |     | |   +-FunctionCall(ZetaSQL:upper(STRING) -> STRING)
    |     | |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     | +-FunctionArgument
    |     |   +-inline_lambda=
    |     |     +-InlineLambda
    |     |       +-argument_list=[$lambda_arg.x#3]
    |     |       +-body=
    |     |         +-Cast(STRING -> BYTES)
    |     |           +-ColumnRef(type=STRING, column=$lambda_arg.x#3)
    |     +-Literal(type=BYTES, value=b"xxx")
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])

[SQLBUILDER_OUTPUT]
SELECT
  (((keyvalue_2.a_1).UPPER()).APPLY((a_4) -> CAST(a_4 AS BYTES))).CONCAT(b"xxx") AS a_3
FROM
  (
    SELECT
      KeyValue.Value AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2;
==

# Named args won't use chained calls.
SELECT fn_named_args_error_if_positional(date_string=>"bar", format_string=>"foo")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_named_args_error_if_positional(STRING format_string, STRING date_string) -> BOOL)
    |     +-Literal(type=STRING, value="foo")
    |     +-Literal(type=STRING, value="bar")
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_OUTPUT]
SELECT
  FN_NAMED_ARGS_ERROR_IF_POSITIONAL(format_string  => "foo", date_string  => "bar") AS a_1;
==

# Test ANON_COUNT with different modifiers, starting from chained or
# non-chained calls.  None of these generate a chained call in SQLBuilder
# because of the callback-based SQL generation for this function.
select {{(int32).|}}anon_count({{distinct|}} {{|int32}} {{|with report(format=proto)}})
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: (int32).,distinct,,
--
ERROR: Aggregate function ANON_COUNT does not support DISTINCT in arguments [at 1:16]
select (int32).anon_count(distinct  )
               ^
--
ALTERNATION GROUP: (int32).,distinct,,with report(format=proto)
--
ERROR: Aggregate operator ANON_COUNT does not support DISTINCT in arguments [at 1:16]
select (int32).anon_count(distinct  with report(format=proto))
               ^
--
ALTERNATION GROUP: (int32).,distinct,int32,
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 2 arguments [at 1:16]
select (int32).anon_count(distinct int32 )
               ^
--
ALTERNATION GROUP: (int32).,distinct,int32,with report(format=proto)
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 2 arguments [at 1:16]
select (int32).anon_count(distinct int32 with report(format=proto))
               ^
--
ALTERNATION GROUPS:
    (int32).,,,
    int32,
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int32#1], table=SimpleTypesWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT32, optional(0) INT64, optional(0) INT64) -> INT64)
              +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)

[SQLBUILDER_OUTPUT]
SELECT WITH ANONYMIZATION OPTIONS() ALL
  ANON_COUNT(simpletypeswithanonymizationuid_2.a_1) AS a_3
FROM
  (
    SELECT
      SimpleTypesWithAnonymizationUid.int32 AS a_1
    FROM
      SimpleTypesWithAnonymizationUid
  ) AS simpletypeswithanonymizationuid_2;
--
ALTERNATION GROUPS:
    (int32).,,,with report(format=proto)
    int32,with report(format=proto)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [PROTO<zetasql.AnonOutputWithReport>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int32#1], table=SimpleTypesWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_count_with_report_proto(INT32, optional(0) INT64, optional(0) INT64) -> PROTO<zetasql.AnonOutputWithReport>)
              +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)

[SQLBUILDER_OUTPUT]
SELECT WITH ANONYMIZATION OPTIONS() ALL
  ANON_COUNT(simpletypeswithanonymizationuid_2.a_1
    WITH REPORT(FORMAT = `PROTO`)) AS a_3
FROM
  (
    SELECT
      SimpleTypesWithAnonymizationUid.int32 AS a_1
    FROM
      SimpleTypesWithAnonymizationUid
  ) AS simpletypeswithanonymizationuid_2;
--
ALTERNATION GROUP: (int32).,,int32,
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 2 arguments [at 1:16]
select (int32).anon_count( int32 )
               ^
--
ALTERNATION GROUP: (int32).,,int32,with report(format=proto)
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 2 arguments [at 1:16]
select (int32).anon_count( int32 with report(format=proto))
               ^
--
ALTERNATION GROUP: distinct,,
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 0 arguments [at 1:8]
select anon_count(distinct  )
       ^
--
ALTERNATION GROUP: distinct,,with report(format=proto)
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 0 arguments [at 1:8]
select anon_count(distinct  with report(format=proto))
       ^
--
ALTERNATION GROUP: distinct,int32,
--
ERROR: Aggregate function ANON_COUNT does not support DISTINCT in arguments [at 1:8]
select anon_count(distinct int32 )
       ^
--
ALTERNATION GROUP: distinct,int32,with report(format=proto)
--
ERROR: Aggregate operator ANON_COUNT does not support DISTINCT in arguments [at 1:8]
select anon_count(distinct int32 with report(format=proto))
       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 0 arguments [at 1:8]
select anon_count(  )
       ^
--
ALTERNATION GROUP: with report(format=proto)
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 0 arguments [at 1:8]
select anon_count(  with report(format=proto))
       ^
