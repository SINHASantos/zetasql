# Tests miscellaneous more complex differential privacy queries with set
# operations, including nested set operations and COUNT(*) with thresholding.
[default language_features=NONE,+DIFFERENTIAL_PRIVACY,+NAMED_ARGUMENTS]

[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
select with differential_privacy count(*, contribution_bounds_per_group => (0, 100))
from (select * from T1StringAnonymizationUid
      union all
      select * from (
        select * from T1StringAnonymizationUid
        union all
        select * from T1StringAnonymizationUid));
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#11 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-281
    +-column_list=[$aggregate.$agg1#11]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#11]
        +-input_scan=
        | +-SetOperationScan
        |   +-parse_location=91-280
        |   +-column_list=$union_all.[uid#9, c2#10]
        |   +-op_type=UNION_ALL
        |   +-input_item_list=
        |     +-SetOperationItem
        |     | +-scan=
        |     | | +-ProjectScan
        |     | |   +-column_list=T1StringAnonymizationUid.[uid#1, c2#2]
        |     | |   +-input_scan=
        |     | |     +-TableScan(parse_location=105-129, column_list=T1StringAnonymizationUid.[uid#1, c2#2], table=T1StringAnonymizationUid, column_index_list=[0, 1])
        |     | +-output_column_list=T1StringAnonymizationUid.[uid#1, c2#2]
        |     +-SetOperationItem
        |       +-scan=
        |       | +-ProjectScan
        |       |   +-column_list=$union_all.[uid#7, c2#8]
        |       |   +-input_scan=
        |       |     +-SetOperationScan
        |       |       +-parse_location=176-279
        |       |       +-column_list=$union_all.[uid#7, c2#8]
        |       |       +-op_type=UNION_ALL
        |       |       +-input_item_list=
        |       |         +-SetOperationItem
        |       |         | +-scan=
        |       |         | | +-ProjectScan
        |       |         | |   +-column_list=T1StringAnonymizationUid.[uid#3, c2#4]
        |       |         | |   +-input_scan=
        |       |         | |     +-TableScan(parse_location=190-214, column_list=T1StringAnonymizationUid.[uid#3, c2#4], table=T1StringAnonymizationUid, column_index_list=[0, 1])
        |       |         | +-output_column_list=T1StringAnonymizationUid.[uid#3, c2#4]
        |       |         +-SetOperationItem
        |       |           +-scan=
        |       |           | +-ProjectScan
        |       |           |   +-column_list=T1StringAnonymizationUid.[uid#5, c2#6]
        |       |           |   +-input_scan=
        |       |           |     +-TableScan(parse_location=255-279, column_list=T1StringAnonymizationUid.[uid#5, c2#6], table=T1StringAnonymizationUid, column_index_list=[0, 1])
        |       |           +-output_column_list=T1StringAnonymizationUid.[uid#5, c2#6]
        |       +-output_column_list=$union_all.[uid#7, c2#8]
        +-aggregate_list=
          +-$agg1#11 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(parse_location=75-83, type=STRUCT<INT64, INT64>, value={0, 100})
[REPLACED_LITERALS]
select with differential_privacy count(*, contribution_bounds_per_group => @_p0_STRUCT)
from (select * from T1StringAnonymizationUid
      union all
      select * from (
        select * from T1StringAnonymizationUid
        union all
        select * from T1StringAnonymizationUid));

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#11 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-281
    +-column_list=[$aggregate.$agg1#11]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#11]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#13, $group_by.$uid#14]
        |   +-input_scan=
        |   | +-SetOperationScan
        |   |   +-column_list=$union_all.[uid#9, c2#10]
        |   |   +-op_type=UNION_ALL
        |   |   +-input_item_list=
        |   |     +-SetOperationItem
        |   |     | +-scan=
        |   |     | | +-ProjectScan
        |   |     | |   +-column_list=T1StringAnonymizationUid.[uid#1, c2#2]
        |   |     | |   +-input_scan=
        |   |     | |     +-TableScan(parse_location=105-129, column_list=T1StringAnonymizationUid.[uid#1, c2#2], table=T1StringAnonymizationUid, column_index_list=[0, 1])
        |   |     | +-output_column_list=T1StringAnonymizationUid.[uid#1, c2#2]
        |   |     +-SetOperationItem
        |   |       +-scan=
        |   |       | +-ProjectScan
        |   |       |   +-column_list=$union_all.[uid#7, c2#8]
        |   |       |   +-input_scan=
        |   |       |     +-SetOperationScan
        |   |       |       +-column_list=$union_all.[uid#7, c2#8]
        |   |       |       +-op_type=UNION_ALL
        |   |       |       +-input_item_list=
        |   |       |         +-SetOperationItem
        |   |       |         | +-scan=
        |   |       |         | | +-ProjectScan
        |   |       |         | |   +-column_list=T1StringAnonymizationUid.[uid#3, c2#4]
        |   |       |         | |   +-input_scan=
        |   |       |         | |     +-TableScan(parse_location=190-214, column_list=T1StringAnonymizationUid.[uid#3, c2#4], table=T1StringAnonymizationUid, column_index_list=[0, 1])
        |   |       |         | +-output_column_list=T1StringAnonymizationUid.[uid#3, c2#4]
        |   |       |         +-SetOperationItem
        |   |       |           +-scan=
        |   |       |           | +-ProjectScan
        |   |       |           |   +-column_list=T1StringAnonymizationUid.[uid#5, c2#6]
        |   |       |           |   +-input_scan=
        |   |       |           |     +-TableScan(parse_location=255-279, column_list=T1StringAnonymizationUid.[uid#5, c2#6], table=T1StringAnonymizationUid, column_index_list=[0, 1])
        |   |       |           +-output_column_list=T1StringAnonymizationUid.[uid#5, c2#6]
        |   |       +-output_column_list=$union_all.[uid#7, c2#8]
        |   +-group_by_list=
        |   | +-$uid#14 := ColumnRef(type=STRING, column=$union_all.uid#9)
        |   +-aggregate_list=
        |     +-$agg1_partial#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#11 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#13)
        | |   +-Literal(parse_location=75-83, type=STRUCT<INT64, INT64>, value={0, 100})
        | +-$group_selection_threshold_col#17 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#17)
==

# Count (*) counting unique users.
# DIFFERENTIAL_PRIVACY_THRESHOLDING feature is enabled, therefore we expect this
# to be used as the count for k_threshold.
[language_features=NONE,+DIFFERENTIAL_PRIVACY,+NAMED_ARGUMENTS,+TABLE_VALUED_FUNCTIONS,+TEMPLATE_FUNCTIONS,+CREATE_TABLE_FUNCTION,+DIFFERENTIAL_PRIVACY_THRESHOLDING]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[parse_location_record_type=PARSE_LOCATION_RECORD_CODE_SEARCH]
select with DIFFERENTIAL_PRIVACY count(*, contribution_bounds_per_group => (0,1))
from (select * from SimpleTypesWithAnonymizationUid
      union all
      select * from SimpleTypesWithAnonymizationUid);
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#37 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-202
    +-column_list=[$aggregate.$agg1#37]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#37]
        +-input_scan=
        | +-SetOperationScan
        |   +-parse_location=88-201
        |   +-column_list=$union_all.[int32#25, int64#26, uint32#27, uint64#28, string#29, bytes#30, bool#31, float#32, double#33, date#34, uid#35, numeric#36]
        |   +-op_type=UNION_ALL
        |   +-input_item_list=
        |     +-SetOperationItem
        |     | +-scan=
        |     | | +-ProjectScan
        |     | |   +-column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12]
        |     | |   +-input_scan=
        |     | |     +-TableScan(parse_location=102-133, column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        |     | +-output_column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12]
        |     +-SetOperationItem
        |       +-scan=
        |       | +-ProjectScan
        |       |   +-column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24]
        |       |   +-input_scan=
        |       |     +-TableScan(parse_location=170-201, column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        |       +-output_column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24]
        +-aggregate_list=
          +-$agg1#37 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-parse_location=33-38
              +-Literal(parse_location=75-80, type=STRUCT<INT64, INT64>, value={0, 1})
[REPLACED_LITERALS]
select with DIFFERENTIAL_PRIVACY count(*, contribution_bounds_per_group => @_p0_STRUCT)
from (select * from SimpleTypesWithAnonymizationUid
      union all
      select * from SimpleTypesWithAnonymizationUid);

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#37 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-parse_location=0-202
    +-column_list=[$aggregate.$agg1#37]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#37]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#39, $group_by.$uid#40]
        |   +-input_scan=
        |   | +-SetOperationScan
        |   |   +-column_list=$union_all.[int32#25, int64#26, uint32#27, uint64#28, string#29, bytes#30, bool#31, float#32, double#33, date#34, uid#35, numeric#36]
        |   |   +-op_type=UNION_ALL
        |   |   +-input_item_list=
        |   |     +-SetOperationItem
        |   |     | +-scan=
        |   |     | | +-ProjectScan
        |   |     | |   +-column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12]
        |   |     | |   +-input_scan=
        |   |     | |     +-TableScan(parse_location=102-133, column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        |   |     | +-output_column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, uid#11, numeric#12]
        |   |     +-SetOperationItem
        |   |       +-scan=
        |   |       | +-ProjectScan
        |   |       |   +-column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24]
        |   |       |   +-input_scan=
        |   |       |     +-TableScan(parse_location=170-201, column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        |   |       +-output_column_list=SimpleTypesWithAnonymizationUid.[int32#13, int64#14, uint32#15, uint64#16, string#17, bytes#18, bool#19, float#20, double#21, date#22, uid#23, numeric#24]
        |   +-group_by_list=
        |   | +-$uid#40 := ColumnRef(type=INT64, column=$union_all.uid#35)
        |   +-aggregate_list=
        |     +-$agg1_partial#39 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#37 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#39)
        |     +-Literal(parse_location=75-80, type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$aggregate.$agg1#37)
