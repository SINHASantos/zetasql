[default language_features=MAXIMUM,+PIPES,+ANALYTIC_FUNCTIONS,+PIPE_STATIC_DESCRIBE]
# Result scan with ORDER BY has is_ordered.
select 1 x
|> ORDER BY x
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$query.x#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.x#1]
    |   +-expr_list=
    |   | +-x#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$query.x#1)
==

# This shows order preservation through LIMIT.
select 1 x
|> ORDER BY x
|> LIMIT 10
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$query.x#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[$query.x#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.x#1]
    |   |   +-expr_list=
    |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$query.x#1)
    +-limit=
      +-Literal(type=INT64, value=10)
==

# This shows order preservation through LIMIT when the
# ordering came from an initial query, not a pipe ORDER BY.
select * from TestTable
order by key
|> LIMIT 10
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-LimitOffsetScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-is_ordered=TRUE
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT32, column=TestTable.key#1)
    +-limit=
      +-Literal(type=INT64, value=10)
==

# This shows other operators that do preserve order.
# These all have is_ordered=true on the final Scan.
from KeyValue
|> ORDER BY key
|> {{SELECT key+1|EXTEND key+1|SET key=key+1|DROP key|STATIC_DESCRIBE}}
--
ALTERNATION GROUP: SELECT key+1
--
QueryStmt
+-output_column_list=
| +-$pipe_select.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.$col1#3]
    +-is_ordered=TRUE
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-OrderByScan
        +-column_list=[KeyValue.Key#1]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
--
ALTERNATION GROUP: EXTEND key+1
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.$col1#3]
    +-is_ordered=TRUE
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-OrderByScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
--
ALTERNATION GROUP: SET key=key+1
--
QueryStmt
+-output_column_list=
| +-$pipe_set.key#3 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_set.key#3]
    +-is_ordered=TRUE
    +-expr_list=
    | +-key#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-OrderByScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
--
ALTERNATION GROUP: DROP key
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-OrderByScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-is_ordered=TRUE
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=KeyValue.Key#1)
--
ALTERNATION GROUP: STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-is_ordered=TRUE
    +-describe_text=
    |   """
    |   NameList:
    |     Key INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |     Range variables:
    |       KeyValue -> RANGE_VARIABLE<Key,Value>
    |
    |   Result is ordered.
    |   """
    +-input_scan=
      +-OrderByScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# This shows other operators that could potentially preserve order, and
# that none of them currently do.
# None of these have is_ordered on the final Scan.
select 1 x
|> ORDER BY x
|> {{WHERE x=1|WINDOW count(*) OVER ()}}
--
ALTERNATION GROUP: WHERE x=1
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$query.x#1]
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[$query.x#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.x#1]
    |   |   +-expr_list=
    |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$query.x#1)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$query.x#1)
        +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: WINDOW count(*) OVER ()
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$analytic.$analytic1#3 AS `$col1` [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[$query.x#1, $analytic.$analytic1#3]
    +-input_scan=
    | +-OrderByScan
    |   +-column_list=[$query.x#1]
    |   +-is_ordered=TRUE
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.x#1]
    |   |   +-expr_list=
    |   |   | +-x#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-order_by_item_list=
    |     +-OrderByItem
    |       +-column_ref=
    |         +-ColumnRef(type=INT64, column=$query.x#1)
    +-function_group_list=
      +-AnalyticFunctionGroup
        +-analytic_function_list=
          +-$analytic1#3 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)


DEPRECATION WARNING:
The pipe WINDOW operator is deprecated; Use EXTEND instead [at 3:1]
|> WINDOW count(*) OVER ()
^
[zetasql.DeprecationWarning] { kind: PIPE_WINDOW }
==

# Pipe AS preserves order of the input table.
select 1 x
|> ORDER BY x
|> AS t;
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
+-query=
  +-OrderByScan
    +-column_list=[$query.x#1]
    +-is_ordered=TRUE
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$query.x#1]
    |   +-expr_list=
    |   | +-x#1 := Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-SingleRowScan
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=$query.x#1)
==

# Pipe SELECT and EXTEND, if calling a window function, do not preserve order.
# is_ordered is present until that window function but not after.
FROM KeyValue
|> ORDER BY 1
|> SELECT key
|> EXTEND key+1
|> {{SELECT|EXTEND}} count(*) OVER () c
--
ALTERNATION GROUP: SELECT
--
QueryStmt
+-output_column_list=
| +-$analytic.c#5 AS c [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.c#5]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $pipe_extend.$col1#3, $analytic.c#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, $pipe_extend.$col1#3]
        |   +-is_ordered=TRUE
        |   +-expr_list=
        |   | +-$col1#3 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[KeyValue.Key#1]
        |       +-is_ordered=TRUE
        |       +-input_scan=
        |         +-OrderByScan
        |           +-column_list=[KeyValue.Key#1]
        |           +-is_ordered=TRUE
        |           +-input_scan=
        |           | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |           +-order_by_item_list=
        |             +-OrderByItem
        |               +-column_ref=
        |                 +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-c#5 :=
                +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: EXTEND
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-$pipe_extend.$col1#3 AS `$col1` [INT64]
| +-$analytic.c#5 AS c [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[KeyValue.Key#1, $pipe_extend.$col1#3, $analytic.c#5]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[KeyValue.Key#1, $pipe_extend.$col1#3]
    |   +-is_ordered=TRUE
    |   +-expr_list=
    |   | +-$col1#3 :=
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |     +-Literal(type=INT64, value=1)
    |   +-input_scan=
    |     +-ProjectScan
    |       +-column_list=[KeyValue.Key#1]
    |       +-is_ordered=TRUE
    |       +-input_scan=
    |         +-OrderByScan
    |           +-column_list=[KeyValue.Key#1]
    |           +-is_ordered=TRUE
    |           +-input_scan=
    |           | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    |           +-order_by_item_list=
    |             +-OrderByItem
    |               +-column_ref=
    |                 +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-function_group_list=
      +-AnalyticFunctionGroup
        +-analytic_function_list=
          +-c#5 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Pipe SET, if calling a window function, does not preserve order.
# is_ordered is present until that window function but not after.
FROM KeyValue
|> ORDER BY 1
|> SET value = value || 'x'
|> SET key = count(*) OVER ()
--
QueryStmt
+-output_column_list=
| +-$pipe_set.key#5 AS Key [INT64]
| +-$pipe_set.value#3 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_set.value#3, $analytic.key#4, $pipe_set.key#5]
    +-expr_list=
    | +-key#5 := ColumnRef(type=INT64, column=$analytic.key#4)
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_set.value#3, $analytic.key#4]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_set.value#3]
        |   +-is_ordered=TRUE
        |   +-expr_list=
        |   | +-value#3 :=
        |   |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |   |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |     +-Literal(type=STRING, value="x")
        |   +-input_scan=
        |     +-OrderByScan
        |       +-column_list=KeyValue.[Key#1, Value#2]
        |       +-is_ordered=TRUE
        |       +-input_scan=
        |       | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |       +-order_by_item_list=
        |         +-OrderByItem
        |           +-column_ref=
        |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-key#4 :=
                +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Table subqueries never preserve order, even with pipes.
# So we don't have is_ordered on the outer Scan.
from (from KeyValue |> order by Key)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-OrderByScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# ARRAY subqueries do preserve order.
# We have is_ordered on the Scan input to SubqueryExpr.
select 1
|> extend ARRAY(from KeyValue |> select Key |> order by key)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$pipe_extend.$col1#4 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1, $pipe_extend.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-OrderByScan
    |         +-column_list=[KeyValue.Key#2]
    |         +-is_ordered=TRUE
    |         +-input_scan=
    |         | +-ProjectScan
    |         |   +-column_list=[KeyValue.Key#2]
    |         |   +-input_scan=
    |         |     +-TableScan(column_list=[KeyValue.Key#2], table=KeyValue, column_index_list=[0])
    |         +-order_by_item_list=
    |           +-OrderByItem
    |             +-column_ref=
    |               +-ColumnRef(type=INT64, column=KeyValue.Key#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

# This ARRAY subquery is preserving order when it has SELECT AS STRUCT after
# ORDER BY.
select 1
|> extend ARRAY(from KeyValue |> order by key |> select AS STRUCT *)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$pipe_extend.$col1#5 AS `$col1` [ARRAY<STRUCT<Key INT64, Value STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1, $pipe_extend.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<STRUCT<Key INT64, Value STRING>>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#4]
    |         +-is_ordered=TRUE
    |         +-expr_list=
    |         | +-$struct#4 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<Key INT64, Value STRING>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=KeyValue.Key#2)
    |         |       +-ColumnRef(type=STRING, column=KeyValue.Value#3)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=KeyValue.[Key#2, Value#3]
    |             +-is_ordered=TRUE
    |             +-input_scan=
    |               +-OrderByScan
    |                 +-column_list=KeyValue.[Key#2, Value#3]
    |                 +-is_ordered=TRUE
    |                 +-input_scan=
    |                 | +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    |                 +-order_by_item_list=
    |                   +-OrderByItem
    |                     +-column_ref=
    |                       +-ColumnRef(type=INT64, column=KeyValue.Key#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
