# This file contains tests for various function-like operators that are
# special cases in some way. This test is about showing which of those work or
# don't, without testing full behavior of chained function calls or of those
# operators. Some of the errors here are parse errors rather than analyzer
# errors, but they are kept together in this file for consistency.
#
# See (broken link) for a summarized list of cases.
#
# See `chained_function_call.test` for general tests, and the tests for
# individual function or operator syntaxes for detailed checking.
#
# Cases that don't work are mostly structured like:
#   SELECT <case that works in standard syntax>,
#          <chained call syntax>
# which shows a standard syntax that makes it through the analyzer, and then
# a chained call syntax that doesn't.
#
# Cases that work are mostly structured like:
#   SELECT {{standard call syntax|chained call syntax}}
# showing two valid syntaxes that produce the same resolved AST.

[default language_features=NONE,+CHAINED_FUNCTION_CALLS]
[default sqlbuilder_target_syntax_map_mode=kChainedFunctionCall]
[default sql_builder_target_syntax_mode=standard]

select cast(5 as int64),
       (5).cast(as int64)
--
ERROR: Syntax error: Expected ")" but got keyword AS [at 2:17]
       (5).cast(as int64)
                ^
==

select safe_cast(5 as int64),
       (5).safe_cast(as int64)
--
ERROR: Syntax error: Expected ")" but got keyword AS [at 2:22]
       (5).safe_cast(as int64)
                     ^
==

# DESCRIPTOR(x) isn't actually a function when used as a TVF argument.
# The parser just treats x.DESCRIPTOR() as a function.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+TABLE_VALUED_FUNCTIONS]
select *
from tvf_one_relation_arg_one_descriptor(
    (select 1 int64a),
    {{DESCRIPTOR(test_col)|test_col.DESCRIPTOR()}})
--
ALTERNATION GROUP: DESCRIPTOR(test_col)
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_arg_one_descriptor.column_bool#2 AS column_bool [BOOL]
| +-tvf_one_relation_arg_one_descriptor.column_bytes#3 AS column_bytes [BYTES]
+-query=
  +-ProjectScan
    +-column_list=tvf_one_relation_arg_one_descriptor.[column_bool#2, column_bytes#3]
    +-input_scan=
      +-TVFScan
        +-column_list=tvf_one_relation_arg_one_descriptor.[column_bool#2, column_bytes#3]
        +-tvf=tvf_one_relation_arg_one_descriptor((TABLE<int64a INT64>, ANY DESCRIPTOR) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        +-signature=(TABLE<int64a INT64>, ANY DESCRIPTOR) -> TABLE<column_bool BOOL, column_bytes BYTES>
        +-argument_list=
        | +-FunctionArgument
        | | +-scan=
        | | | +-ProjectScan
        | | |   +-column_list=[$subquery1.int64a#1]
        | | |   +-expr_list=
        | | |   | +-int64a#1 := Literal(type=INT64, value=1)
        | | |   +-input_scan=
        | | |     +-SingleRowScan
        | | +-argument_column_list=[$subquery1.int64a#1]
        | +-FunctionArgument
        |   +-descriptor_arg=
        |     +-Descriptor(descriptor_column_name_list=[test_col])
        +-column_index_list=[0, 1]
        +-function_call_signature=(TABLE<int64a INT64>, INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
--
ALTERNATION GROUP: test_col.DESCRIPTOR()
--
ERROR: Table-valued function tvf_one_relation_arg_one_descriptor argument 2 must be a DESCRIPTOR [at 4:5]
    test_col.DESCRIPTOR())
    ^
==

# UNNEST doesn't make sense in an expression outside FROM.
select [1,2,3].unnest()
--
ERROR: Function not found: `unnest` [at 1:16]
select [1,2,3].unnest()
               ^
==

# An array literal outside UNNEST in FROM doesn't make sense.
select *
from unnest([1,2,3]),
     [1,2,3].unnest()
--
ERROR: Syntax error: Unexpected "[" [at 3:6]
     [1,2,3].unnest()
     ^
==

# An path outside UNNEST in FROM doesn't make sense.
# Without parentheses, it appears to be a TVF call here.
select *
from ArrayTypes,
     unnest(ProtoArray),
     {{ProtoArray|(ProtoArray)}}.unnest()
--
ALTERNATION GROUP: ProtoArray
--
ERROR: Table-valued functions are not supported [at 4:6]
     ProtoArray.unnest()
     ^
--
ALTERNATION GROUP: (ProtoArray)
--
ERROR: Syntax error: Expected keyword JOIN but got ")" [at 4:17]
     (ProtoArray).unnest()
                ^
==

# STRUCT isn't a function.
select struct(5),
       (5).struct()
--
ERROR: Function not found: `struct`; Did you mean sqrt? [at 2:12]
       (5).struct()
           ^
==

select struct(5,6),
       (5).struct(6)
--
ERROR: Function not found: `struct`; Did you mean sqrt? [at 2:12]
       (5).struct(6)
           ^
==

select struct<INT64>(5),
       (5).struct<INT64>()
--
ERROR: Syntax error: Unexpected ">" [at 2:24]
       (5).struct<INT64>()
                       ^
==

select with(5 as y, 100),
       (5).with(x as y, 100)
--
ERROR: Syntax error: Unexpected "(" [at 1:12]
select with(5 as y, 100),
           ^
==

# The parse error here is slightly confused because NEW is non-reserved.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+PROTO_EXTENSIONS_WITH_NEW]
select new zetasql_test__.KitchenSinkPB(1 as int64_key_1, 2 as int64_key_2),
       (1).new zetasql_test__.KitchenSinkPB(2 as int64_key_2)
--
ERROR: Syntax error: Expected end of input but got "." [at 2:30]
       (1).new zetasql_test__.KitchenSinkPB(2 as int64_key_2)
                             ^
==

select EXTRACT(YEAR FROM current_date()),
       year.EXTRACT(FROM current_date())
--
ERROR: Syntax error: Expected ")" but got keyword FROM [at 2:21]
       year.EXTRACT(FROM current_date())
                    ^
==

select case (5) when 5 then 10 else null end,
       (5).case when 5 then 10 else null end
--
ERROR: Syntax error: Expected end of input but got keyword WHEN [at 2:17]
       (5).case when 5 then 10 else null end
                ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+REPLACE_FIELDS]
# Special operator REPLACE_FIELDS doesn't parse as an ASTFunctionCall, so it
# doesn't work.
select replace_fields(KitchenSink, 123.4 AS double_val),
       (KitchenSink).replace_fields(123.4 AS double_val)
from TestTable
--
ERROR: Function not found: replace_fields [at 4:22]
       (KitchenSink).replace_fields(123.4 AS double_val)
                     ^
==

# With paths in the AS, the chained call function version is not parsable.
# Function call grammar only accepts a single identifier after AS.
select replace_fields(KitchenSink, current_date() AS nested_dates.date),
       (KitchenSink).replace_fields(current_date() AS nested_dates.date)
from TestTable
--
ERROR: Syntax error: Expected ")" but got "." [at 2:67]
       (KitchenSink).replace_fields(current_date() AS nested_dates.date)
                                                                  ^
==

# UPDATE(x) {...} constructor works as a chained call since it parses as
# fucntion call with a suffix after the call.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+BRACED_PROTO_CONSTRUCTORS,+UPDATE_CONSTRUCTOR]
select {{update(KitchenSink)|(KitchenSink).update()}} {double_val: 123.4}
from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-UpdateConstructor
    |     +-type=PROTO<zetasql_test__.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-update_field_item_list=
    |       +-UpdateFieldItem
    |         +-expr=
    |         | +-Literal(type=DOUBLE, value=123.4)
    |         +-proto_field_path=double_val
    |         +-operation=UPDATE_SINGLE
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==


# Special function FILTER_FIELDS parses as an ASTFunctionCall, so it works.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+FILTER_FIELDS]
select {{filter_fields(KitchenSink, -double_val)|(KitchenSink).filter_fields(-double_val)}}
from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FilterField
    |     +-type=PROTO<zetasql_test__.KitchenSinkPB>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-filter_field_arg_list=
    |     | +-FilterFieldArg(include=FALSE, field_descriptor_path=double_val)
    |     +-reset_cleared_required_fields=FALSE
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+FILTER_FIELDS]
SELECT "abc".filter_fields()
--
ERROR: FILTER_FIELDS() expected an input proto type for first argument, but found type STRING [at 1:8]
SELECT "abc".filter_fields()
       ^
==

# IF is a keyword, but also works as a chained function call.
select {{if(true,1,4)|true.if(1,4)|true.`if`(1,4)|(true).if(1,4)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |     +-Literal(type=BOOL, value=true)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=4)
    +-input_scan=
      +-SingleRowScan
==

# GROUPING isn't a real function. It's argument isn't an expression.
# GROUPING is also a keyword and only works if quoted or following rparen.
# But non-parenthesized paths won't work here anyway.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+GROUPING_BUILTIN]
select grouping(key),
       {{(key).grouping()|(key).grouPING(1,2,3)}}
from KeyValue
group by key
--
ALTERNATION GROUP: (key).grouping()
--
ERROR: Function `grouping` does not support chained function calls [at 2:14]
       (key).grouping()
             ^
--
ALTERNATION GROUP: (key).grouPING(1,2,3)
--
ERROR: Function `grouPING` does not support chained function calls [at 2:14]
       (key).grouPING(1,2,3)
             ^
==

# LEFT is a keyword, but also works as a chained function call.
select {{left("abc", 2)|"abc".left(2)|"abc".`left`(2)|("abc").left(2)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:left(STRING, INT64) -> STRING)
    |     +-Literal(type=STRING, value="abc")
    |     +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# RIGHT is a keyword, but also works as a chained function call.
select {{right("abc", 2)|"abc".right(2)|"abc".`right`(2)|("abc").right(2)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:right(STRING, INT64) -> STRING)
    |     +-Literal(type=STRING, value="abc")
    |     +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# COLLATE is a keyword, but also works as a chained function call.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ANNOTATION_FRAMEWORK,+COLLATION_SUPPORT]
[no_java]
select {{collate("abc", "en-us")|"abc".collate("en-us")|"abc".`collate`("en-us")|("abc").collate("en-us")}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1{Collation:"en-us"} AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1{Collation:"en-us"}]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:collate(STRING, STRING) -> STRING)
    |     +-type_annotation_map={Collation:"en-us"}
    |     +-Literal(type=STRING, value="abc")
    |     +-Literal(type=STRING, value="en-us", preserve_in_literal_remover=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# RANGE is a keyword, but also works as a chained function call.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+RANGE_TYPE]
select range(date '2022-01-01', date '2023-01-01'),
       date '2022-01-01'.{{range|`range`}}(date '2023-01-01')
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [RANGE<DATE>]
| +-$query.$col2#2 AS `$col2` [RANGE<DATE>]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:range(DATE, DATE) -> RANGE<DATE>)
    | |   +-Literal(type=DATE, value=2022-01-01, has_explicit_type=TRUE)
    | |   +-Literal(type=DATE, value=2023-01-01, has_explicit_type=TRUE)
    | +-$col2#2 :=
    |   +-FunctionCall(ZetaSQL:range(DATE, DATE) -> RANGE<DATE>)
    |     +-Literal(type=DATE, value=2022-01-01, has_explicit_type=TRUE)
    |     +-Literal(type=DATE, value=2023-01-01, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

# Chaining multiple calls of reserved-keyword functions.
SELECT "abcdef"
          .left(3)
          .upper()
          .right(2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:right(STRING, INT64) -> STRING)
    |     +-FunctionCall(ZetaSQL:upper(STRING) -> STRING)
    |     | +-FunctionCall(ZetaSQL:left(STRING, INT64) -> STRING)
    |     |   +-Literal(type=STRING, value="abcdef")
    |     |   +-Literal(type=INT64, value=3)
    |     +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# FLATTEN works even though the path is not a real expression (as shown by the
# error in the third case).
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+UNNEST_AND_FLATTEN_ARRAYS]
select {{flatten(t.ProtoArray.str_value)|(t.ProtoArray.str_value).flatten()|ProtoArray.str_value}}
from ArrayTypes t
--
ALTERNATION GROUPS:
    flatten(t.ProtoArray.str_value)
    (t.ProtoArray.str_value).flatten()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#21]
    +-expr_list=
    | +-$col1#21 :=
    |   +-Flatten
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.TestExtraPB>>, column=ArrayTypes.ProtoArray#15)
    |     +-get_field_list=
    |       +-GetProtoField
    |         +-type=ARRAY<STRING>
    |         +-expr=
    |         | +-FlattenedArg(type=PROTO<zetasql_test__.TestExtraPB>)
    |         +-field_descriptor=str_value
    |         +-default_value=[]
    +-input_scan=
      +-TableScan(column_list=[ArrayTypes.ProtoArray#15], table=ArrayTypes, column_index_list=[14], alias="t")
--
ALTERNATION GROUP: ProtoArray.str_value
--
ERROR: Cannot access field str_value on a value with type ARRAY<zetasql_test__.TestExtraPB>. You may need an explicit call to FLATTEN, and the flattened argument may only contain 'dot' after the first array [at 1:19]
select ProtoArray.str_value
                  ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+PROTO_DEFAULT_IF_NULL]
select {{proto_default_if_null(KitchenSink.double_val)|(KitchenSink.double_val).proto_default_if_null()}}
from TestTable
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-GetProtoField
    |     +-type=DOUBLE
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=double_val
    |     +-default_value=0
    |     +-return_default_value_when_unset=TRUE
    +-input_scan=
      +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
==

select {{date_add('2023-01-01', interval 1 year)|'2023-01-01'.date_add(interval 1 year)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:date_add(DATE, INT64, ENUM<zetasql.functions.DateTimestampPart>) -> DATE)
    |     +-Literal(type=DATE, value=2023-01-01)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
==

select {{date_diff('2023-01-01', '2024-01-01', YEAR)|'2023-01-01'.date_diff('2024-01-01', YEAR)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-Literal(type=DATE, value=2023-01-01)
    |     +-Literal(type=DATE, value=2024-01-01)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+CIVIL_TIME,+ADDITIONAL_STRING_FUNCTIONS]
select {{last_day('2023-03-04', YEAR)|'2023-03-04'.last_day(YEAR)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:last_day(DATE, optional(1) ENUM<zetasql.functions.DateTimestampPart>) -> DATE)
    |     +-Literal(type=DATE, value=2023-03-04)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
==

select {{normalize('abc')|'abc'.normalize()}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:normalize(STRING, optional(0) ENUM<zetasql.functions.NormalizeMode>) -> STRING)
    |     +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan
==

select {{normalize('abc', NFC)|'abc'.normalize(NFC)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:normalize(STRING, optional(1) ENUM<zetasql.functions.NormalizeMode>) -> STRING)
    |     +-Literal(type=STRING, value="abc")
    |     +-Literal(type=ENUM<zetasql.functions.NormalizeMode>, value=NFC)
    +-input_scan=
      +-SingleRowScan
==

select {{normalize_and_casefold('abc', NFC)|'abc'.normalize_and_casefold(NFC)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:normalize_and_casefold(STRING, optional(1) ENUM<zetasql.functions.NormalizeMode>) -> STRING)
    |     +-Literal(type=STRING, value="abc")
    |     +-Literal(type=ENUM<zetasql.functions.NormalizeMode>, value=NFC)
    +-input_scan=
      +-SingleRowScan
==

select {{generate_date_array('2022-01-01', '2023-01-01', interval 1 month)|'2022-01-01'.generate_date_array('2023-01-01', interval 1 month)}}
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [ARRAY<DATE>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:generate_date_array(DATE, DATE, optional(1) INT64, optional(1) ENUM<zetasql.functions.DateTimestampPart>) -> ARRAY<DATE>)
    |     +-Literal(type=DATE, value=2022-01-01)
    |     +-Literal(type=DATE, value=2023-01-01)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ANONYMIZATION]
select {{anon_sum(int64)|(int64).anon_sum()}},
       {{anon_count(int64)|(int64).anon_count()}}
from SimpleTypesWithAnonymizationUid
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
| +-$aggregate.$agg2#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#13, $agg2#14]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=$aggregate.[$agg1#13, $agg2#14]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
          | +-AggregateFunctionCall(ZetaSQL:anon_sum(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
          +-$agg2#14 :=
            +-AggregateFunctionCall(ZetaSQL:anon_count(INT64, optional(0) INT64, optional(0) INT64) -> INT64)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
==

# ANON_COUNT(*) doesn't make sense as a chained call.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ANONYMIZATION]
select anon_count(*),
       (int64).anon_count(*)
from SimpleTypesWithAnonymizationUid
--
ERROR: Anonymized aggregate function ANON_COUNT expects exactly 1 argument but found 2 arguments [at 2:16]
       (int64).anon_count(*)
               ^
==

select {{corr(double, 1.5)|(double).corr(1.5)}}
from SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.double#9], table=SimpleTypes, column_index_list=[8])
        +-aggregate_list=
          +-$agg1#20 :=
            +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
              +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              +-Literal(type=DOUBLE, value=1.5)
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+SQL_GRAPH{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
select * from graph_table(
  aml
  match (n IS Person
         WHERE {{PROPERTY_EXISTS(n, birthday)|(n).PROPERTY_EXISTS(birthday)}})
  COLUMNS (123 AS x)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#2 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#2]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, STRING) -> BOOL)
        |       |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
        |       |   |   +-Literal(type=STRING, value="birthday")
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=47-53, label=aml.Person)
        |       |   +-target_element_table_list=[aml.Person]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-x#2 := Literal(type=INT64, value=123)
==

# FIRST (and the functions below) are only allowed inside MATCH_RECOGNIZE, in
# either standard or chained call syntax.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+MATCH_RECOGNIZE]
select {{FIRST(key)|(key).FIRST()}}
from KeyValue
--
ALTERNATION GROUP: FIRST(key)
--
ERROR: aggregate function FIRST can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select FIRST(key)
       ^
--
ALTERNATION GROUP: (key).FIRST()
--
ERROR: aggregate function FIRST can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:14]
select (key).FIRST()
             ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+MATCH_RECOGNIZE]
select {{MATCH_NUMBER(key)|(key).MATCH_NUMBER()}}
from KeyValue
--
ALTERNATION GROUP: MATCH_NUMBER(key)
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select MATCH_NUMBER(key)
       ^
--
ALTERNATION GROUP: (key).MATCH_NUMBER()
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:14]
select (key).MATCH_NUMBER()
             ^
==

# With default options, arr[x.OFFSET(...)] just looks like an normal expression,
# since the required OFFSET(...) wrapper wasn't found.
select StringArray[offset(3)],
       StringArray[(3).offset()]
from ArrayTypes
--
ERROR: Array element access with array[position] is not supported. Use array[OFFSET(zero_based_offset)] or array[ORDINAL(one_based_ordinal)] [at 2:20]
       StringArray[(3).offset()]
                   ^
==

# With bare array access enabled, OFFSET() and similar wrappers are still not
# allowed as chained function calls.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+BARE_ARRAY_ACCESS]
select StringArray[offset(3)],
       StringArray[(3).{{offset|safe_offset|ordinal|safe_ordinal}}()]
from ArrayTypes
--
ALTERNATION GROUP: offset
--
ERROR: OFFSET is not a function. It can only be used for array element access using array[OFFSET(position)] [at 2:24]
       StringArray[(3).offset()]
                       ^
--
ALTERNATION GROUP: safe_offset
--
ERROR: SAFE_OFFSET is not a function. It can only be used for array element access using array[SAFE_OFFSET(position)] [at 2:24]
       StringArray[(3).safe_offset()]
                       ^
--
ALTERNATION GROUP: ordinal
--
ERROR: ORDINAL is not a function. It can only be used for array element access using array[ORDINAL(position)] [at 2:24]
       StringArray[(3).ordinal()]
                       ^
--
ALTERNATION GROUP: safe_ordinal
--
ERROR: SAFE_ORDINAL is not a function. It can only be used for array element access using array[SAFE_ORDINAL(position)] [at 2:24]
       StringArray[(3).safe_ordinal()]
                       ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+MAP_TYPE]
select map_from_array([('a', 1)])[KEY('a')],
       map_from_array([('a', 1)])['a'.{{KEY|SAFE_KEY}}()]
--
ALTERNATION GROUP: KEY
--
ERROR: KEY is not a function. It can only be used for map element access using map[KEY(key)] [at 2:39]
       map_from_array([('a', 1)])['a'.KEY()]
                                      ^
--
ALTERNATION GROUP: SAFE_KEY
--
ERROR: SAFE_KEY is not a function. It can only be used for map element access using map[SAFE_KEY(key)] [at 2:39]
       map_from_array([('a', 1)])['a'.SAFE_KEY()]
                                      ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+WEEK_WITH_WEEKDAY]
select date_diff(date, date, week(tuesday)),
       date_diff(date, date, {{tuesday|(tuesday)}}.week())
from SimpleTypes
--
ALTERNATION GROUP: tuesday
--
ERROR: A valid date part name is required, but found tuesday.week [at 2:30]
       date_diff(date, date, tuesday.week())
                             ^
--
ALTERNATION GROUP: (tuesday)
--
ERROR: Found invalid date part argument function call syntax for week() [at 2:40]
       date_diff(date, date, (tuesday).week())
                                       ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ENABLE_MEASURES]
[no_java]
SELECT
  key,
  AGG(measure_sum_quantity),
  (measure_sum_quantity).AGG()
FROM MeasureTable_SingleKey
GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#17 AS key [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
| +-$aggregate.$agg2#16 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#17, $aggregate.$agg1#15, $aggregate.$agg2#16]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#17, $aggregate.$agg1#15, $aggregate.$agg2#16]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 8])
        +-group_by_list=
        | +-key#17 := ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        +-aggregate_list=
          +-$agg1#15 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)
          +-$agg2#16 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)
==

# COUNT(DISINCT) works as a chained call.
select (key).count(), {{(value).count(distinct)|count(distinct value)}}
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
| +-$aggregate.$agg2#4 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#3, $agg2#4]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#3, $agg2#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#3 :=
          | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-$agg2#4 :=
            +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
              +-ColumnRef(type=STRING, column=KeyValue.Value#2)
              +-distinct=TRUE
==

select (value).count(distinct {{*|key}})
from KeyValue
--
ALTERNATION GROUP: *
--
ERROR: Argument * can only be used in COUNT(*) [at 1:31]
select (value).count(distinct *)
                              ^
--
ALTERNATION GROUP: key
--
ERROR: No matching signature for aggregate function COUNT
  Argument types: STRING (from chained function call input), INT64
  Signature: COUNT(T1)
    Signature accepts at most 1 argument, found 2 arguments (including chained function call input) [at 1:16]
select (value).count(distinct key)
               ^
==

select (123).sqrt(distinct)
--
ERROR: Non-aggregate function SQRT cannot be called with DISTINCT [at 1:14]
select (123).sqrt(distinct)
             ^
==

select "abc".concat(distinct "def")
--
ERROR: Non-aggregate function CONCAT cannot be called with DISTINCT [at 1:14]
select "abc".concat(distinct "def")
             ^
==

select true.if(distinct 5, 10)
--
ERROR: Non-aggregate function IF cannot be called with DISTINCT [at 1:13]
select true.if(distinct 5, 10)
            ^
==

# Aggregation modifiers that work in chained calls
[show_sqlbuilder_output]
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ORDER_BY_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+AGGREGATE_FILTERING]
select (key).array_agg(DISTINCT),
       (key).array_agg(ORDER BY value),
       (key).array_agg(RESPECT NULLS),
       (key).array_agg(LIMIT 1),
       (key).array_agg(HAVING MAX value),
       (key).array_agg(WHERE value is null),
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#4 AS `$col2` [ARRAY<INT64>]
| +-$aggregate.$agg3#5 AS `$col3` [ARRAY<INT64>]
| +-$aggregate.$agg4#6 AS `$col4` [ARRAY<INT64>]
| +-$aggregate.$agg5#7 AS `$col5` [ARRAY<INT64>]
| +-$aggregate.$agg6#8 AS `$col6` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#3, $agg2#4, $agg3#5, $agg4#6, $agg5#7, $agg6#8]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#3, $agg2#4, $agg3#5, $agg4#6, $agg5#7, $agg6#8]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#3 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-distinct=TRUE
          +-$agg2#4 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
          +-$agg3#5 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-null_handling_modifier=RESPECT_NULLS
          +-$agg4#6 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-limit=
          |     +-Literal(type=INT64, value=1)
          +-$agg5#7 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-having_modifier=
          |     +-AggregateHavingModifier
          |       +-kind=MAX
          |       +-having_expr=
          |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
          +-$agg6#8 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              +-where_expr=
                +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)

[SQLBUILDER_OUTPUT]
SELECT
  (keyvalue_3.a_1).ARRAY_AGG(DISTINCT) AS a_4,
  (keyvalue_3.a_1).ARRAY_AGG(
    ORDER BY keyvalue_3.a_2) AS a_5,
  (keyvalue_3.a_1).ARRAY_AGG(RESPECT NULLS) AS a_6,
  (keyvalue_3.a_1).ARRAY_AGG(
    LIMIT 1) AS a_7,
  (keyvalue_3.a_1).ARRAY_AGG(
    HAVING MAX keyvalue_3.a_2) AS a_8,
  (keyvalue_3.a_1).ARRAY_AGG(
    WHERE
      (keyvalue_3.a_2) IS NULL) AS a_9
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3;
==

# IGNORE NULLS is handled differently in window functions.
[show_sqlbuilder_output]
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ANALYTIC_FUNCTIONS,+NULL_HANDLING_MODIFIER_IN_ANALYTIC]
select (key).array_agg(IGNORE NULLS) OVER ()
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-null_handling_modifier=IGNORE_NULLS
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)

[SQLBUILDER_OUTPUT]
SELECT
  analyticscan_4.a_3 AS a_3
FROM
  (
    SELECT
      keyvalue_2.a_1 AS a_1,
      (keyvalue_2.a_1).ARRAY_AGG(IGNORE NULLS) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_3
    FROM
      (
        SELECT
          KeyValue.Key AS a_1
        FROM
          KeyValue
      ) AS keyvalue_2
  ) AS analyticscan_4;
==

# Aggregation modifiers that don't work in chained calls
[language_features=NONE,+CHAINED_FUNCTION_CALLS{{|,+WITH_GROUP_ROWS}}]
select count(key)    WITH GROUP ROWS (select key from group_rows()),
       (key).count() WITH GROUP ROWS (select key from group_rows())
from KeyValue;
--
ALTERNATION GROUP: <empty>
--
ERROR: WITH GROUP ROWS is not supported [at 1:22]
select count(key)    WITH GROUP ROWS (select key from group_rows()),
                     ^
--
ALTERNATION GROUP: ,+WITH_GROUP_ROWS
--
ERROR: Chained function call cannot use WITH GROUP ROWS [at 2:14]
       (key).count() WITH GROUP ROWS (select key from group_rows())
             ^
==

[language_features=NONE,+CHAINED_FUNCTION_CALLS{{|,+MULTILEVEL_AGGREGATION}}]
SELECT
  SUM(any_value(key) GROUP BY value),
  any_value(key).SUM(GROUP BY value),
FROM KeyValue
--
ALTERNATION GROUP: <empty>
--
ERROR: Multi-level aggregation is not yet supported. [at 2:22]
  SUM(any_value(key) GROUP BY value),
                     ^
--
ALTERNATION GROUP: ,+MULTILEVEL_AGGREGATION
--
ERROR: Chained function call cannot use multi-level aggregation [at 3:18]
  any_value(key).SUM(GROUP BY value),
                 ^
==

# Modifiers that work on anonymization functions
[show_sqlbuilder_output]
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ANONYMIZATION,+JSON_TYPE]
select with anonymization
   (int64).anon_sum(WITH REPORT(format=json)),
from SimpleTypesWithAnonymizationUid
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AnonymizedAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:$anon_sum_with_report_json(INT64, optional(0) INT64, optional(0) INT64) -> JSON)
              +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)

[SQLBUILDER_OUTPUT]
SELECT WITH ANONYMIZATION OPTIONS() ALL
  ANON_SUM(simpletypeswithanonymizationuid_2.a_1
    WITH REPORT(FORMAT = JSON)) AS a_3
FROM
  (
    SELECT
      SimpleTypesWithAnonymizationUid.int64 AS a_1
    FROM
      SimpleTypesWithAnonymizationUid
  ) AS simpletypeswithanonymizationuid_2;
==

# CLAMPED parses but is not allowed on multi-argument calls.
[language_features=NONE,+CHAINED_FUNCTION_CALLS{{|,+ANONYMIZATION}}]
select with anonymization
   anon_quantiles(int64, 4 CLAMPED BETWEEN 2 AND 3),
   (int64).anon_quantiles(4 CLAMPED BETWEEN 2 AND 3),
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected keyword WITH [at 1:8]
select with anonymization
       ^
--
ALTERNATION GROUP: ,+ANONYMIZATION
--
ERROR: Chained function call cannot use CLAMPED BETWEEN [at 3:12]
   (int64).anon_quantiles(4 CLAMPED BETWEEN 2 AND 3),
           ^
==

# Without an argument, CLAMPED BETWEEN parses as an expression rather than
# as a modifier.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+ANONYMIZATION]
select with anonymization
   anon_sum(int64 CLAMPED BETWEEN 0 and 10),
   (int64).anon_sum(CLAMPED BETWEEN 0 and 10),
from (
  # Same error whether a `clamped` column exists or not.
  select *, 5 AS {{clamped|not_clamped}}
  from SimpleTypesWithAnonymizationUid
)
--
ERROR: Anonymized aggregate function ANON_SUM expects exactly 1 argument but found 2 arguments [at 3:12]
   (int64).anon_sum(CLAMPED BETWEEN 0 and 10),
           ^
==

# Test a call with no inline arguments and both a prefix and suffix modifier.
[language_features=NONE,+CHAINED_FUNCTION_CALLS,+NULL_HANDLING_MODIFIER_IN_AGGREGATE]
[show_sqlbuilder_output]
select (key).array_agg(distinct ignore nulls)
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              +-distinct=TRUE
              +-null_handling_modifier=IGNORE_NULLS

[SQLBUILDER_OUTPUT]
SELECT
  (keyvalue_2.a_1).ARRAY_AGG(DISTINCT IGNORE NULLS) AS a_3
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2;
