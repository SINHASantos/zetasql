# ============== New syntax does not work without language feature =========
[default language_features=NONE]
SELECT *
FROM UNNEST([1,2], mode => "STRICT");
--
ERROR: Argument `mode` is not supported [at 2:20]
FROM UNNEST([1,2], mode => "STRICT");
                   ^
==

SELECT *
FROM UNNEST([1,2], [3,4], mode => "STRICT");
--
ERROR: The UNNEST operator supports exactly one argument [at 2:20]
FROM UNNEST([1,2], [3,4], mode => "STRICT");
                   ^
==

SELECT *
FROM UNNEST([1,2] AS array_alias)
--
ERROR: Argument alias is not supported in the UNNEST operator [at 2:19]
FROM UNNEST([1,2] AS array_alias)
                  ^
==

[default language_features=NONE,+MULTIWAY_UNNEST,+WITH_EXPRESSION]
[default enabled_ast_rewrites=DEFAULTS,-WITH_EXPR,+MULTIWAY_UNNEST]
# ============== UNNEST with legacy syntax =========
SELECT *
FROM UNNEST([1,2]){{| AS e}}
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#1]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.$unnest1#1]
--
ALTERNATION GROUP:  AS e
--
QueryStmt
+-output_column_list=
| +-$array.e#1 AS e [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.e#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.e#1]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.e#1]
==

SELECT *
FROM TestTable, UNNEST(TestTable.KitchenSink.repeated_int32_val){{| AS e}}
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=[$array.$unnest1#4]
--
ALTERNATION GROUP:  AS e
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.e#4 AS e [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.e#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.e#4]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=[$array.e#4]
==

# ============== UNNEST with single path expression argument =========
[language_features=NONE,+MULTIWAY_UNNEST{{|,+SINGLETON_UNNEST_INFERS_ALIAS}}]
[show_sqlbuilder_output]
# Allow infer alias will introduce backward compatibility break, because the
# selected column gets replaced.
WITH t AS (SELECT [1, 2, 3] AS xs)
SELECT xs
FROM t, UNNEST(t.xs);
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-t.xs#2 AS xs [ARRAY<INT64>]
+-query=
  +-WithScan
    +-column_list=[t.xs#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.xs#1]
    |       +-expr_list=
    |       | +-xs#1 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[t.xs#2]
        +-input_scan=
          +-ArrayScan
            +-column_list=[t.xs#2]
            +-input_scan=
            | +-WithRefScan(column_list=[t.xs#2], with_query_name="t")
            +-array_expr_list=
            | +-ColumnRef(type=ARRAY<INT64>, column=t.xs#2)
            +-element_column_list=[$array.$unnest1#3]

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      ARRAY< INT64 >[1, 2, 3] AS a_1
  )
SELECT
  withrefscan_2.a_1 AS xs
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      t AS withrefscan_2
  ) AS withrefscan_2
  JOIN
  UNNEST(withrefscan_2.a_1 AS a_3);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      ARRAY< INT64 >[1, 2, 3] AS a_1
  )
FROM
  t AS withrefscan_2
|> SELECT
     withrefscan_2.a_1 AS a_1
|> AS withrefscan_2
|> JOIN
   UNNEST(withrefscan_2.a_1 AS a_3)
|> SELECT
     withrefscan_2.a_1 AS xs;
--
ALTERNATION GROUP: ,+SINGLETON_UNNEST_INFERS_ALIAS
--
QueryStmt
+-output_column_list=
| +-$array.xs#3 AS xs [INT64]
+-query=
  +-WithScan
    +-column_list=[$array.xs#3]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.xs#1]
    |       +-expr_list=
    |       | +-xs#1 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$array.xs#3]
        +-input_scan=
          +-ArrayScan
            +-column_list=[t.xs#2, $array.xs#3]
            +-input_scan=
            | +-WithRefScan(column_list=[t.xs#2], with_query_name="t")
            +-array_expr_list=
            | +-ColumnRef(type=ARRAY<INT64>, column=t.xs#2)
            +-element_column_list=[$array.xs#3]

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      ARRAY< INT64 >[1, 2, 3] AS a_1
  )
SELECT
  a_3 AS xs
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      t AS withrefscan_2
  ) AS withrefscan_2
  JOIN
  UNNEST(withrefscan_2.a_1 AS a_3);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      ARRAY< INT64 >[1, 2, 3] AS a_1
  )
FROM
  t AS withrefscan_2
|> SELECT
     withrefscan_2.a_1 AS a_1
|> AS withrefscan_2
|> JOIN
   UNNEST(withrefscan_2.a_1 AS a_3)
|> SELECT
     a_3 AS xs;
==

# ============== UNNEST with builtin enum mode argument =========
SELECT *
FROM UNNEST([1,2], mode => {{"STRICT"|"TRUNCATE"|"PAD"}});
--
ALTERNATION GROUP: "STRICT"
--
ERROR: Argument `mode` is not allowed when UNNEST only has one array argument [at 2:20]
FROM UNNEST([1,2], mode => "STRICT");
                   ^
--
ALTERNATION GROUP: "TRUNCATE"
--
ERROR: Argument `mode` is not allowed when UNNEST only has one array argument [at 2:20]
FROM UNNEST([1,2], mode => "TRUNCATE");
                   ^
--
ALTERNATION GROUP: "PAD"
--
ERROR: Argument `mode` is not allowed when UNNEST only has one array argument [at 2:20]
FROM UNNEST([1,2], mode => "PAD");
                   ^
==

# Named argument with a name other than `mode` is not supported.
SELECT *
FROM UNNEST([1, 2], unsupported_named_argument => "PAD");
--
ERROR: Unsupported named argument `unsupported_named_argument` in UNNEST; use `mode` instead [at 2:21]
FROM UNNEST([1, 2], unsupported_named_argument => "PAD");
                    ^
==

# `mode` argument only works if it can be coerced to ARRAY_ZIP_MODE enum.
# Currently only STRING and INT64 literals are allowed. And they will be
# unparsed to be wrapped with CAST.
[show_sqlbuilder_output]
SELECT *
FROM UNNEST([1,2], [2], mode => {{1|0.05|"STRICT"}})
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<INT64>, value=[2])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_1 AS a_1,
  a_2 AS a_2
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1, ARRAY< INT64 >[2] AS a_2, mode  => CAST("PAD" AS ARRAY_ZIP_MODE));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1, ARRAY< INT64 >[2] AS a_2, mode  => CAST("PAD" AS ARRAY_ZIP_MODE))
|> SELECT
     a_1 AS a_1,
     a_2 AS a_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_19.arr0 AS a_20,
  a_19.arr1 AS a_21
FROM
  UNNEST(WITH(a_1 AS ARRAY< INT64 >[1, 2], a_15 AS `IF`((a_1) IS NULL, 0, ARRAY_LENGTH(a_1)), a_5 AS ARRAY<
  INT64 >[2], a_16 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_17 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL,
    ERROR("UNNEST does not allow NULL mode argument"), CAST("PAD" AS ARRAY_ZIP_MODE)), a_18 AS `IF`((a_17 =
    CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_15, a_16)) != (GREATEST(a_15, a_16))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_11 AS `IF`(a_17 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_15, a_16), GREATEST(a_15,
      a_16)), ARRAY(
    SELECT
      STRUCT< arr0 INT64, arr1 INT64, offset INT64 > (orderbyscan_13.a_2, orderbyscan_13.a_6, orderbyscan_13.a_9) AS a_14
    FROM
      (
        SELECT
          filterscan_12.a_2 AS a_2,
          filterscan_12.a_3 AS a_3,
          filterscan_12.a_6 AS a_6,
          filterscan_12.a_7 AS a_7,
          filterscan_12.a_9 AS a_9
        FROM
          (
            SELECT
              projectscan_10.a_2 AS a_2,
              projectscan_10.a_3 AS a_3,
              projectscan_10.a_6 AS a_6,
              projectscan_10.a_7 AS a_7,
              projectscan_10.a_9 AS a_9
            FROM
              (
                SELECT
                  arrayscan_4.a_2 AS a_2,
                  arrayscan_4.a_3 AS a_3,
                  arrayscan_8.a_6 AS a_6,
                  arrayscan_8.a_7 AS a_7,
                  COALESCE(arrayscan_4.a_3, arrayscan_8.a_7) AS a_9
                FROM
                  (
                    SELECT
                      a_2 AS a_2,
                      a_3 AS a_3
                    FROM
                      UNNEST(a_1 AS a_2) WITH OFFSET AS a_3
                  ) AS arrayscan_4
                  FULL JOIN
                  (
                    SELECT
                      a_6 AS a_6,
                      a_7 AS a_7
                    FROM
                      UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
                  ) AS arrayscan_8
                  ON (arrayscan_4.a_3) = (arrayscan_8.a_7)
              ) AS projectscan_10
            WHERE
              (projectscan_10.a_9) < a_11
          ) AS filterscan_12
        ORDER BY filterscan_12.a_9
      ) AS orderbyscan_13
  )) AS a_19);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(WITH(a_1 AS ARRAY< INT64 >[1, 2], a_15 AS `IF`((a_1) IS NULL, 0, ARRAY_LENGTH(a_1)), a_5 AS ARRAY<
  INT64 >[2], a_16 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_17 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL,
    ERROR("UNNEST does not allow NULL mode argument"), CAST("PAD" AS ARRAY_ZIP_MODE)), a_18 AS `IF`((a_17 =
    CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_15, a_16)) != (GREATEST(a_15, a_16))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_11 AS `IF`(a_17 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_15, a_16), GREATEST(a_15,
      a_16)), ARRAY(
    FROM
      UNNEST(a_1 AS a_2) WITH OFFSET AS a_3
    |> SELECT
         a_2 AS a_2,
         a_3 AS a_3
    |> AS arrayscan_4
    |> FULL JOIN
       (
         FROM
           UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
         |> SELECT
              a_6 AS a_6,
              a_7 AS a_7
         |> AS arrayscan_8
       )
       ON (arrayscan_4.a_3) = (arrayscan_8.a_7)
    |> SELECT
         arrayscan_4.a_2 AS a_2,
         arrayscan_4.a_3 AS a_3,
         arrayscan_8.a_6 AS a_6,
         arrayscan_8.a_7 AS a_7,
         COALESCE(arrayscan_4.a_3, arrayscan_8.a_7) AS a_9
    |> AS projectscan_10
    |> WHERE
         (projectscan_10.a_9) < a_11
    |> SELECT
         projectscan_10.a_2 AS a_2,
         projectscan_10.a_3 AS a_3,
         projectscan_10.a_6 AS a_6,
         projectscan_10.a_7 AS a_7,
         projectscan_10.a_9 AS a_9
    |> AS filterscan_12
    |> ORDER BY filterscan_12.a_9
    |> SELECT
         filterscan_12.a_2 AS a_2,
         filterscan_12.a_3 AS a_3,
         filterscan_12.a_6 AS a_6,
         filterscan_12.a_7 AS a_7,
         filterscan_12.a_9 AS a_9
    |> AS orderbyscan_13
    |> SELECT
         STRUCT< arr0 INT64, arr1 INT64, offset INT64 > (orderbyscan_13.a_2, orderbyscan_13.a_6, orderbyscan_13.a_9) AS a_14
  )) AS a_19)
|> SELECT
     a_19.arr0 AS a_20,
     a_19.arr1 AS a_21;
--
ALTERNATION GROUP: 0.05
--
ERROR: Named argument `mode` used in UNNEST should have type ARRAY_ZIP_MODE, but got type DOUBLE [at 2:33]
FROM UNNEST([1,2], [2], mode => 0.05)
                                ^
--
ALTERNATION GROUP: "STRICT"
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<INT64>, value=[2])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_1 AS a_1,
  a_2 AS a_2
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1, ARRAY< INT64 >[2] AS a_2, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1, ARRAY< INT64 >[2] AS a_2, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE))
|> SELECT
     a_1 AS a_1,
     a_2 AS a_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_19.arr0 AS a_20,
  a_19.arr1 AS a_21
FROM
  UNNEST(WITH(a_1 AS ARRAY< INT64 >[1, 2], a_15 AS `IF`((a_1) IS NULL, 0, ARRAY_LENGTH(a_1)), a_5 AS ARRAY<
  INT64 >[2], a_16 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_17 AS `IF`(CAST("STRICT" AS ARRAY_ZIP_MODE) IS NULL,
    ERROR("UNNEST does not allow NULL mode argument"), CAST("STRICT" AS ARRAY_ZIP_MODE)), a_18 AS `IF`((a_17 =
    CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_15, a_16)) != (GREATEST(a_15, a_16))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_11 AS `IF`(a_17 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_15, a_16), GREATEST(a_15,
      a_16)), ARRAY(
    SELECT
      STRUCT< arr0 INT64, arr1 INT64, offset INT64 > (orderbyscan_13.a_2, orderbyscan_13.a_6, orderbyscan_13.a_9) AS a_14
    FROM
      (
        SELECT
          filterscan_12.a_2 AS a_2,
          filterscan_12.a_3 AS a_3,
          filterscan_12.a_6 AS a_6,
          filterscan_12.a_7 AS a_7,
          filterscan_12.a_9 AS a_9
        FROM
          (
            SELECT
              projectscan_10.a_2 AS a_2,
              projectscan_10.a_3 AS a_3,
              projectscan_10.a_6 AS a_6,
              projectscan_10.a_7 AS a_7,
              projectscan_10.a_9 AS a_9
            FROM
              (
                SELECT
                  arrayscan_4.a_2 AS a_2,
                  arrayscan_4.a_3 AS a_3,
                  arrayscan_8.a_6 AS a_6,
                  arrayscan_8.a_7 AS a_7,
                  COALESCE(arrayscan_4.a_3, arrayscan_8.a_7) AS a_9
                FROM
                  (
                    SELECT
                      a_2 AS a_2,
                      a_3 AS a_3
                    FROM
                      UNNEST(a_1 AS a_2) WITH OFFSET AS a_3
                  ) AS arrayscan_4
                  FULL JOIN
                  (
                    SELECT
                      a_6 AS a_6,
                      a_7 AS a_7
                    FROM
                      UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
                  ) AS arrayscan_8
                  ON (arrayscan_4.a_3) = (arrayscan_8.a_7)
              ) AS projectscan_10
            WHERE
              (projectscan_10.a_9) < a_11
          ) AS filterscan_12
        ORDER BY filterscan_12.a_9
      ) AS orderbyscan_13
  )) AS a_19);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(WITH(a_1 AS ARRAY< INT64 >[1, 2], a_15 AS `IF`((a_1) IS NULL, 0, ARRAY_LENGTH(a_1)), a_5 AS ARRAY<
  INT64 >[2], a_16 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_17 AS `IF`(CAST("STRICT" AS ARRAY_ZIP_MODE) IS NULL,
    ERROR("UNNEST does not allow NULL mode argument"), CAST("STRICT" AS ARRAY_ZIP_MODE)), a_18 AS `IF`((a_17 =
    CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_15, a_16)) != (GREATEST(a_15, a_16))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_11 AS `IF`(a_17 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_15, a_16), GREATEST(a_15,
      a_16)), ARRAY(
    FROM
      UNNEST(a_1 AS a_2) WITH OFFSET AS a_3
    |> SELECT
         a_2 AS a_2,
         a_3 AS a_3
    |> AS arrayscan_4
    |> FULL JOIN
       (
         FROM
           UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
         |> SELECT
              a_6 AS a_6,
              a_7 AS a_7
         |> AS arrayscan_8
       )
       ON (arrayscan_4.a_3) = (arrayscan_8.a_7)
    |> SELECT
         arrayscan_4.a_2 AS a_2,
         arrayscan_4.a_3 AS a_3,
         arrayscan_8.a_6 AS a_6,
         arrayscan_8.a_7 AS a_7,
         COALESCE(arrayscan_4.a_3, arrayscan_8.a_7) AS a_9
    |> AS projectscan_10
    |> WHERE
         (projectscan_10.a_9) < a_11
    |> SELECT
         projectscan_10.a_2 AS a_2,
         projectscan_10.a_3 AS a_3,
         projectscan_10.a_6 AS a_6,
         projectscan_10.a_7 AS a_7,
         projectscan_10.a_9 AS a_9
    |> AS filterscan_12
    |> ORDER BY filterscan_12.a_9
    |> SELECT
         filterscan_12.a_2 AS a_2,
         filterscan_12.a_3 AS a_3,
         filterscan_12.a_6 AS a_6,
         filterscan_12.a_7 AS a_7,
         filterscan_12.a_9 AS a_9
    |> AS orderbyscan_13
    |> SELECT
         STRUCT< arr0 INT64, arr1 INT64, offset INT64 > (orderbyscan_13.a_2, orderbyscan_13.a_6, orderbyscan_13.a_9) AS a_14
  )) AS a_19)
|> SELECT
     a_19.arr0 AS a_20,
     a_19.arr1 AS a_21;
==

# `mode` argument that is a non-literal only works if it has ARRAY_ZIP_MODE as
# an explicit type.
SELECT *
FROM UNNEST([1,2], [2], mode => {{CAST("STRICT" AS ARRAY_ZIP_MODE)|CAST(1 AS INT32)}});
--
ALTERNATION GROUP: CAST("STRICT" AS ARRAY_ZIP_MODE)
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<INT64>, value=[2])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Cast(STRING -> ENUM<ARRAY_ZIP_MODE>)
            +-Literal(type=STRING, value="STRICT")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Cast(STRING -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   |   +-Literal(type=STRING, value="STRICT")
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Cast(STRING -> ENUM<ARRAY_ZIP_MODE>)
            |   | |     +-Literal(type=STRING, value="STRICT")
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
--
ALTERNATION GROUP: CAST(1 AS INT32)
--
ERROR: Named argument `mode` used in UNNEST should have type ARRAY_ZIP_MODE, but got type INT32 [at 2:33]
FROM UNNEST([1,2], [2], mode => CAST(1 AS INT32));
                                ^
==

# `mode` argument that is a non-literal STRING or non-literal INT doesn't work.
SELECT *
FROM UNNEST([1,2], [2], mode => {{(SELECT "STRICT")|CONCAT("STR", "ICT")|(0 + 1)}})
--
ALTERNATION GROUP: (SELECT "STRICT")
--
ERROR: Named argument `mode` used in UNNEST should have type ARRAY_ZIP_MODE, but got type STRING [at 2:33]
FROM UNNEST([1,2], [2], mode => (SELECT "STRICT"))
                                ^
--
ALTERNATION GROUP: CONCAT("STR", "ICT")
--
ERROR: Named argument `mode` used in UNNEST should have type ARRAY_ZIP_MODE, but got type STRING [at 2:33]
FROM UNNEST([1,2], [2], mode => CONCAT("STR", "ICT"))
                                ^
--
ALTERNATION GROUP: (0 + 1)
--
ERROR: Named argument `mode` used in UNNEST should have type ARRAY_ZIP_MODE, but got type INT64 [at 2:34]
FROM UNNEST([1,2], [2], mode => (0 + 1))
                                 ^
==

# NULL `mode` argument without explicit type will be coerced to ENUM type.
SELECT *
FROM UNNEST([1,2], [2], mode => {{NULL|CAST(NULL AS ARRAY_ZIP_MODE)}})
--
ALTERNATION GROUP: NULL
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<INT64>, value=[2])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=NULL)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=NULL)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=NULL)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
--
ALTERNATION GROUP: CAST(NULL AS ARRAY_ZIP_MODE)
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<INT64>, value=[2])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=NULL, has_explicit_type=TRUE)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=NULL, has_explicit_type=TRUE)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=NULL, has_explicit_type=TRUE)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
==

# `mode` argument works with other existing syntax in UNNEST operator.
[show_sqlbuilder_output]
SELECT *
FROM UNNEST([1, 2], [1, 2], mode => "STRICT") WITH OFFSET off;
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
| +-$array_offset.off#3 AS off [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1, $array.$unnest2#2, $array_offset.off#3]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.$unnest1#1, $array.$unnest2#2, $array_offset.off#3]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.off#3)
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_1 AS a_1,
  a_2 AS a_2,
  a_3 AS off
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1, ARRAY< INT64 >[1, 2] AS a_2, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) WITH OFFSET AS a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1, ARRAY< INT64 >[1, 2] AS a_2, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) WITH OFFSET AS a_3
|> SELECT
     a_1 AS a_1,
     a_2 AS a_2,
     a_3 AS off;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
| +-$array_offset.off#3 AS off [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.$unnest1#1, $array.$unnest2#2, $array_offset.off#3]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$array.$unnest1#1, $array.$unnest2#2, $array_offset.off#3]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
        | |   +-field_idx=1
        | +-off#3 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
        |     +-field_idx=2
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#17]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#4 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#5 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4)
            |   | +-arr1#6 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr1_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6)
            |   | +-mode#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | +-strict_check#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#8)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#10 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#8)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#10)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#16]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#16 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#11)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#13)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#15)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14, $full_join.offset#15]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14, $full_join.offset#15]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14, $full_join.offset#15]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#15 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#12)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#11, $array_offset.offset#12]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#11]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#12)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#12)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#15)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#10, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#15)
            +-element_column_list=[$array.$with_expr_element#17]
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_19.arr0 AS a_20,
  a_19.arr1 AS a_21,
  a_19.offset AS off
FROM
  UNNEST(WITH(a_1 AS ARRAY< INT64 >[1, 2], a_15 AS `IF`((a_1) IS NULL, 0, ARRAY_LENGTH(a_1)), a_5 AS ARRAY<
  INT64 >[1, 2], a_16 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_17 AS `IF`(CAST("STRICT" AS ARRAY_ZIP_MODE) IS NULL,
    ERROR("UNNEST does not allow NULL mode argument"), CAST("STRICT" AS ARRAY_ZIP_MODE)), a_18 AS `IF`((a_17 =
    CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_15, a_16)) != (GREATEST(a_15, a_16))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_11 AS `IF`(a_17 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_15, a_16), GREATEST(a_15,
      a_16)), ARRAY(
    SELECT
      STRUCT< arr0 INT64, arr1 INT64, offset INT64 > (orderbyscan_13.a_2, orderbyscan_13.a_6, orderbyscan_13.a_9) AS a_14
    FROM
      (
        SELECT
          filterscan_12.a_2 AS a_2,
          filterscan_12.a_3 AS a_3,
          filterscan_12.a_6 AS a_6,
          filterscan_12.a_7 AS a_7,
          filterscan_12.a_9 AS a_9
        FROM
          (
            SELECT
              projectscan_10.a_2 AS a_2,
              projectscan_10.a_3 AS a_3,
              projectscan_10.a_6 AS a_6,
              projectscan_10.a_7 AS a_7,
              projectscan_10.a_9 AS a_9
            FROM
              (
                SELECT
                  arrayscan_4.a_2 AS a_2,
                  arrayscan_4.a_3 AS a_3,
                  arrayscan_8.a_6 AS a_6,
                  arrayscan_8.a_7 AS a_7,
                  COALESCE(arrayscan_4.a_3, arrayscan_8.a_7) AS a_9
                FROM
                  (
                    SELECT
                      a_2 AS a_2,
                      a_3 AS a_3
                    FROM
                      UNNEST(a_1 AS a_2) WITH OFFSET AS a_3
                  ) AS arrayscan_4
                  FULL JOIN
                  (
                    SELECT
                      a_6 AS a_6,
                      a_7 AS a_7
                    FROM
                      UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
                  ) AS arrayscan_8
                  ON (arrayscan_4.a_3) = (arrayscan_8.a_7)
              ) AS projectscan_10
            WHERE
              (projectscan_10.a_9) < a_11
          ) AS filterscan_12
        ORDER BY filterscan_12.a_9
      ) AS orderbyscan_13
  )) AS a_19);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(WITH(a_1 AS ARRAY< INT64 >[1, 2], a_15 AS `IF`((a_1) IS NULL, 0, ARRAY_LENGTH(a_1)), a_5 AS ARRAY<
  INT64 >[1, 2], a_16 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_17 AS `IF`(CAST("STRICT" AS ARRAY_ZIP_MODE) IS NULL,
    ERROR("UNNEST does not allow NULL mode argument"), CAST("STRICT" AS ARRAY_ZIP_MODE)), a_18 AS `IF`((a_17 =
    CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_15, a_16)) != (GREATEST(a_15, a_16))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_11 AS `IF`(a_17 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_15, a_16), GREATEST(a_15,
      a_16)), ARRAY(
    FROM
      UNNEST(a_1 AS a_2) WITH OFFSET AS a_3
    |> SELECT
         a_2 AS a_2,
         a_3 AS a_3
    |> AS arrayscan_4
    |> FULL JOIN
       (
         FROM
           UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
         |> SELECT
              a_6 AS a_6,
              a_7 AS a_7
         |> AS arrayscan_8
       )
       ON (arrayscan_4.a_3) = (arrayscan_8.a_7)
    |> SELECT
         arrayscan_4.a_2 AS a_2,
         arrayscan_4.a_3 AS a_3,
         arrayscan_8.a_6 AS a_6,
         arrayscan_8.a_7 AS a_7,
         COALESCE(arrayscan_4.a_3, arrayscan_8.a_7) AS a_9
    |> AS projectscan_10
    |> WHERE
         (projectscan_10.a_9) < a_11
    |> SELECT
         projectscan_10.a_2 AS a_2,
         projectscan_10.a_3 AS a_3,
         projectscan_10.a_6 AS a_6,
         projectscan_10.a_7 AS a_7,
         projectscan_10.a_9 AS a_9
    |> AS filterscan_12
    |> ORDER BY filterscan_12.a_9
    |> SELECT
         filterscan_12.a_2 AS a_2,
         filterscan_12.a_3 AS a_3,
         filterscan_12.a_6 AS a_6,
         filterscan_12.a_7 AS a_7,
         filterscan_12.a_9 AS a_9
    |> AS orderbyscan_13
    |> SELECT
         STRUCT< arr0 INT64, arr1 INT64, offset INT64 > (orderbyscan_13.a_2, orderbyscan_13.a_6, orderbyscan_13.a_9) AS a_14
  )) AS a_19)
|> SELECT
     a_19.arr0 AS a_20,
     a_19.arr1 AS a_21,
     a_19.offset AS off;
==

# ============== UNNEST with table alias or argument alias =========
# Table alias is not allowed when UNNEST has multiple expressions with aliases.
SELECT *
FROM UNNEST([1, 2] AS col_alias, [2, 3] AS another_col_alias) AS table_alias
--
ERROR: When 2 or more array arguments are supplied to UNNEST, aliases for the element columns must be specified following the argument inside the parenthesis [at 2:63]
FROM UNNEST([1, 2] AS col_alias, [2, 3] AS another_col_alias) AS table_alias
                                                              ^
==

# Table alias is not allowed when UNNEST has multiple expressions, some with
# alias some not.
SELECT *
FROM UNNEST([1, 2] AS col_alias, [2, 3]) AS table_alias
--
ERROR: When 2 or more array arguments are supplied to UNNEST, aliases for the element columns must be specified following the argument inside the parenthesis [at 2:42]
FROM UNNEST([1, 2] AS col_alias, [2, 3]) AS table_alias
                                         ^
==

# Table alias is not allowed when UNNEST has multiple expressions, none of them
# has alias.
SELECT *
FROM UNNEST([1, 2], [2, 3]) AS table_alias
--
ERROR: When 2 or more array arguments are supplied to UNNEST, aliases for the element columns must be specified following the argument inside the parenthesis [at 2:29]
FROM UNNEST([1, 2], [2, 3]) AS table_alias
                            ^
==

# Table alias is not allowed when UNNEST argument has alias.
SELECT *
FROM UNNEST([1, 2] AS col_alias) AS table_alias
--
ERROR: Alias outside UNNEST is not allowed when the argument inside the parenthesis has alias [at 2:34]
FROM UNNEST([1, 2] AS col_alias) AS table_alias
                                 ^
==

# Column alias in single argument.
[show_sqlbuilder_output]
SELECT *
FROM UNNEST([1,2] AS array_alias)
--
QueryStmt
+-output_column_list=
| +-$array.array_alias#1 AS array_alias [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.array_alias#1]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.array_alias#1]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.array_alias#1]

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_1 AS array_alias
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  UNNEST(ARRAY< INT64 >[1, 2] AS a_1)
|> SELECT
     a_1 AS array_alias;
==

# ============== UNNEST with multiple array arguments =========
# 2 arguments: NULL literal does not coerce to array, so it is only accepted if
# it has explicit type.
SELECT *
FROM UNNEST({{NULL, NULL|CAST(NULL AS ARRAY<INT64>), CAST(NULL AS ARRAY<STRING>)}})
--
ALTERNATION GROUP: NULL, NULL
--
ERROR: Values referenced in UNNEST must be arrays. UNNEST contains expression of type INT64 [at 2:13]
FROM UNNEST(NULL, NULL)
            ^
--
ALTERNATION GROUP: CAST(NULL AS ARRAY<INT64>), CAST(NULL AS ARRAY<STRING>)
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
        | +-Literal(type=ARRAY<STRING>, value=NULL, has_explicit_type=TRUE)
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRING, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRING, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 STRING, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=NULL, has_explicit_type=TRUE)
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<STRING>, value=NULL, has_explicit_type=TRUE)
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 STRING, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 STRING, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=STRING, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
==

# 2 arguments: literal expression without any alias.
SELECT *
FROM UNNEST([1, 2, 3], [2, 3])
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-Literal(type=ARRAY<INT64>, value=[2, 3])
        +-element_column_list=$array.[$unnest1#1, $unnest2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.$unnest2#2 AS `$unnest2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, $unnest2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, $unnest2#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2, 3])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
==

# 2 arguments: literal expression with alias, literal expression without any alias.
SELECT *
FROM UNNEST([1, 2, 3] AS literal_array, [2, 3])
--
QueryStmt
+-output_column_list=
| +-$array.literal_array#1 AS literal_array [INT64]
| +-$array.$unnest1#2 AS `$unnest1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[literal_array#1, $unnest1#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[literal_array#1, $unnest1#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-Literal(type=ARRAY<INT64>, value=[2, 3])
        +-element_column_list=$array.[literal_array#1, $unnest1#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.literal_array#1 AS literal_array [INT64]
| +-$array.$unnest1#2 AS `$unnest1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[literal_array#1, $unnest1#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[literal_array#1, $unnest1#2]
        +-expr_list=
        | +-literal_array#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-$unnest1#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2, 3])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
==

# 2 arguments: literal expression without alias, literal expression with alias.
SELECT *
FROM UNNEST([1, 2, 3], [2, 3] AS literal_array)
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.literal_array#2 AS literal_array [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, literal_array#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[$unnest1#1, literal_array#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-Literal(type=ARRAY<INT64>, value=[2, 3])
        +-element_column_list=$array.[$unnest1#1, literal_array#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$unnest1` [INT64]
| +-$array.literal_array#2 AS literal_array [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[$unnest1#1, literal_array#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[$unnest1#1, literal_array#2]
        +-expr_list=
        | +-$unnest1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-literal_array#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2, 3])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
==

# 2 arguments: literal expression with aliases.
SELECT *
FROM UNNEST([1, 2, 3] AS array1, [2, 3] AS array2)
--
QueryStmt
+-output_column_list=
| +-$array.array1#1 AS array1 [INT64]
| +-$array.array2#2 AS array2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[array1#1, array2#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=$array.[array1#1, array2#2]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-Literal(type=ARRAY<INT64>, value=[2, 3])
        +-element_column_list=$array.[array1#1, array2#2]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.array1#1 AS array1 [INT64]
| +-$array.array2#2 AS array2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$array.[array1#1, array2#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$array.[array1#1, array2#2]
        +-expr_list=
        | +-array1#1 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        | |   +-field_idx=0
        | +-array2#2 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#16)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$array.$with_expr_element#16]
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#3 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#4 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |   | +-arr1#5 := Literal(type=ARRAY<INT64>, value=[2, 3])
            |   | +-arr1_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |   | +-mode#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#9 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#7)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#4)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#6)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#9)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#15]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#15 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#10)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#12)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13, $full_join.offset#14]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#14 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#10, $array_offset.offset#11, $array.arr1#12, $array_offset.offset#13]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#10, $array_offset.offset#11]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#3, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#10]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#11)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#11)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#14)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#9, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#14)
            +-element_column_list=[$array.$with_expr_element#16]
==

# 2 arguments: literal expression and path expression without any alias.
SELECT *
FROM TestTable, UNNEST([1, 2, 3], TestTable.KitchenSink.repeated_int32_val)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT64]
| +-$array.repeated_int32_val#5 AS repeated_int32_val [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.repeated_int32_val#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.repeated_int32_val#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=$array.[$unnest1#4, repeated_int32_val#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT64]
| +-$array.repeated_int32_val#5 AS repeated_int32_val [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.repeated_int32_val#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.repeated_int32_val#5]
        +-expr_list=
        | +-$unnest1#4 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-repeated_int32_val#5 :=
        |   +-GetStructField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#13)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
==

# 2 arguments: literal expression with alias, path expression without explicit alias.
SELECT *
FROM TestTable, UNNEST([1, 2, 3] AS literal_array, TestTable.KitchenSink.repeated_int32_val)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.literal_array#4 AS literal_array [INT64]
| +-$array.repeated_int32_val#5 AS repeated_int32_val [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.literal_array#4, $array.repeated_int32_val#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.literal_array#4, $array.repeated_int32_val#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=$array.[literal_array#4, repeated_int32_val#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.literal_array#4 AS literal_array [INT64]
| +-$array.repeated_int32_val#5 AS repeated_int32_val [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.literal_array#4, $array.repeated_int32_val#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.literal_array#4, $array.repeated_int32_val#5]
        +-expr_list=
        | +-literal_array#4 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-repeated_int32_val#5 :=
        |   +-GetStructField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#13)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
==

# 2 arguments: literal expression without alias, path expression with explicit alias.
SELECT *
FROM TestTable, UNNEST([1, 2, 3], TestTable.KitchenSink.repeated_int32_val AS array2)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT64]
| +-$array.array2#5 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=$array.[$unnest1#4, array2#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT64]
| +-$array.array2#5 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5]
        +-expr_list=
        | +-$unnest1#4 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-array2#5 :=
        |   +-GetStructField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#13)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
==

# 2 arguments: literal expression and path expression with explicit alias.
SELECT *
FROM TestTable, UNNEST([1, 2, 3] AS array1, TestTable.KitchenSink.repeated_int32_val AS array2)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.array1#4 AS array1 [INT64]
| +-$array.array2#5 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=$array.[array1#4, array2#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.array1#4 AS array1 [INT64]
| +-$array.array2#5 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
        +-expr_list=
        | +-array1#4 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-array2#5 :=
        |   +-GetStructField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#13)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
==

[language_features=NONE,+MULTIWAY_UNNEST,+UNNEST_AND_FLATTEN_ARRAYS,+WITH_EXPRESSION]
# 2 arguments: path expressions of implicit flatten and array element access
# with explicit alias.
SELECT *
FROM TestTable, UNNEST(
  {{TestTable.KitchenSink.nested_repeated_value.nested_int64|FLATTEN(TestTable.KitchenSink.nested_repeated_value.nested_int64)}} AS array1,
  TestTable.KitchenSink.nested_repeated_value[OFFSET(0)].nested_repeated_int64 AS array2
)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.array1#4 AS array1 [INT64]
| +-$array.array2#5 AS array2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Flatten
        | | +-type=ARRAY<INT64>
        | | +-expr=
        | | | +-GetProtoField
        | | |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
        | | |   +-expr=
        | | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | |   +-field_descriptor=nested_repeated_value
        | | |   +-default_value=[]
        | | +-get_field_list=
        | |   +-GetProtoField
        | |     +-type=INT64
        | |     +-expr=
        | |     | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>)
        | |     +-field_descriptor=nested_int64
        | |     +-default_value=88
        | +-GetProtoField
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, INT64) -> PROTO<zetasql_test__.KitchenSinkPB.Nested>)
        |   |   +-GetProtoField
        |   |   | +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
        |   |   | +-expr=
        |   |   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   | +-field_descriptor=nested_repeated_value
        |   |   | +-default_value=[]
        |   |   +-Literal(type=INT64, value=0)
        |   +-field_descriptor=nested_repeated_int64
        |   +-default_value=[]
        +-element_column_list=$array.[array1#4, array2#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.array1#4 AS array1 [INT64]
| +-$array.array2#5 AS array2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
        +-expr_list=
        | +-array1#4 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#23)
        | |   +-field_idx=0
        | +-array2#5 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#23)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#23]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#10 :=
            |   | | +-WithExpr
            |   | |   +-type=ARRAY<INT64>
            |   | |   +-assignment_list=
            |   | |   | +-injected#6 :=
            |   | |   |   +-GetProtoField
            |   | |   |     +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
            |   | |   |     +-expr=
            |   | |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   |     +-field_descriptor=nested_repeated_value
            |   | |   |     +-default_value=[]
            |   | |   +-expr=
            |   | |     +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
            |   | |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> BOOL)
            |   | |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#6)
            |   | |       +-Literal(type=ARRAY<INT64>, value=NULL)
            |   | |       +-SubqueryExpr
            |   | |         +-type=ARRAY<INT64>
            |   | |         +-subquery_type=ARRAY
            |   | |         +-parameter_list=
            |   | |         | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#6)
            |   | |         +-subquery=
            |   | |           +-OrderByScan
            |   | |             +-column_list=[$flatten.injected#9]
            |   | |             +-is_ordered=TRUE
            |   | |             +-input_scan=
            |   | |             | +-ProjectScan
            |   | |             |   +-column_list=[$flatten.injected#7, $offset.injected#8, $flatten.injected#9]
            |   | |             |   +-expr_list=
            |   | |             |   | +-injected#9 :=
            |   | |             |   |   +-GetProtoField
            |   | |             |   |     +-type=INT64
            |   | |             |   |     +-expr=
            |   | |             |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$flatten.injected#7)
            |   | |             |   |     +-field_descriptor=nested_int64
            |   | |             |   |     +-default_value=88
            |   | |             |   +-input_scan=
            |   | |             |     +-ArrayScan
            |   | |             |       +-column_list=[$flatten.injected#7, $offset.injected#8]
            |   | |             |       +-array_expr_list=
            |   | |             |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#6, is_correlated=TRUE)
            |   | |             |       +-element_column_list=[$flatten.injected#7]
            |   | |             |       +-array_offset_column=
            |   | |             |         +-ColumnHolder(column=$offset.injected#8)
            |   | |             +-order_by_item_list=
            |   | |               +-OrderByItem
            |   | |                 +-column_ref=
            |   | |                   +-ColumnRef(type=INT64, column=$offset.injected#8)
            |   | +-arr0_len#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#10)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#10)
            |   | +-arr1#12 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT64>
            |   | |   +-expr=
            |   | |   | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, INT64) -> PROTO<zetasql_test__.KitchenSinkPB.Nested>)
            |   | |   |   +-GetProtoField
            |   | |   |   | +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
            |   | |   |   | +-expr=
            |   | |   |   | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   |   | +-field_descriptor=nested_repeated_value
            |   | |   |   | +-default_value=[]
            |   | |   |   +-Literal(type=INT64, value=0)
            |   | |   +-field_descriptor=nested_repeated_int64
            |   | |   +-default_value=[]
            |   | +-arr1_len#13 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#12)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#12)
            |   | +-mode#14 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#15 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#14)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#11)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#13)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#11)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#13)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#16 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#14)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#11)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#13)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#11)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#13)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#10)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#12)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#16)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#22]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#22 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#17)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#19)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#21)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#17, $array_offset.offset#18, $array.arr1#19, $array_offset.offset#20, $full_join.offset#21]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#17, $array_offset.offset#18, $array.arr1#19, $array_offset.offset#20, $full_join.offset#21]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#17, $array_offset.offset#18, $array.arr1#19, $array_offset.offset#20, $full_join.offset#21]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#21 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#18)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#20)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#17, $array_offset.offset#18, $array.arr1#19, $array_offset.offset#20]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#17, $array_offset.offset#18]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#10, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#17]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#18)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#19, $array_offset.offset#20]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#12, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#19]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#20)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#18)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#20)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#21)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#16, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#21)
            +-element_column_list=[$array.$with_expr_element#23]
==

[show_sqlbuilder_output]
# 2 arguments: path expressions with inferred alias.
SELECT *
FROM TestTable, UNNEST(
  TestTable.KitchenSink.repeated_int32_val,
  TestTable.KitchenSink.repeated_string_val
)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.repeated_int32_val#4 AS repeated_int32_val [INT32]
| +-$array.repeated_string_val#5 AS repeated_string_val [STRING]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.repeated_string_val#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.repeated_string_val#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-GetProtoField
        | | +-type=ARRAY<INT32>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_int32_val
        | | +-default_value=[]
        | +-GetProtoField
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_string_val
        |   +-default_value=[]
        +-element_column_list=$array.[repeated_int32_val#4, repeated_string_val#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  testtable_4.a_1 AS key,
  testtable_4.a_2 AS TestEnum,
  testtable_4.a_3 AS KitchenSink,
  a_5 AS repeated_int32_val,
  a_6 AS repeated_string_val
FROM
  (
    SELECT
      TestTable.key AS a_1,
      TestTable.TestEnum AS a_2,
      TestTable.KitchenSink AS a_3
    FROM
      TestTable
  ) AS testtable_4
  JOIN
  UNNEST(testtable_4.a_3.repeated_int32_val AS a_5, testtable_4.a_3.repeated_string_val AS a_6, mode  => CAST("PAD" AS ARRAY_ZIP_MODE));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1,
     TestTable.TestEnum AS a_2,
     TestTable.KitchenSink AS a_3
|> AS testtable_4
|> JOIN
   UNNEST(testtable_4.a_3.repeated_int32_val AS a_5, testtable_4.a_3.repeated_string_val AS a_6, mode  => CAST("PAD" AS ARRAY_ZIP_MODE))
|> SELECT
     testtable_4.a_1 AS key,
     testtable_4.a_2 AS TestEnum,
     testtable_4.a_3 AS KitchenSink,
     a_5 AS repeated_int32_val,
     a_6 AS repeated_string_val;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.repeated_int32_val#4 AS repeated_int32_val [INT32]
| +-$array.repeated_string_val#5 AS repeated_string_val [STRING]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.repeated_string_val#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.repeated_string_val#5]
        +-expr_list=
        | +-repeated_int32_val#4 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 STRING, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-repeated_string_val#5 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 STRING, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT32, arr1 STRING, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<STRING>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_string_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT32, arr1 STRING, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT32, arr1 STRING, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT32, column=$array.arr0#13)
            |           |       +-ColumnRef(type=STRING, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  testtable_4.a_1 AS key,
  testtable_4.a_2 AS TestEnum,
  testtable_4.a_3 AS KitchenSink,
  a_23.arr0 AS repeated_int32_val,
  a_23.arr1 AS repeated_string_val
FROM
  (
    SELECT
      TestTable.key AS a_1,
      TestTable.TestEnum AS a_2,
      TestTable.KitchenSink AS a_3
    FROM
      TestTable
  ) AS testtable_4
  JOIN
  UNNEST(WITH(a_5 AS testtable_4.a_3.repeated_int32_val, a_19 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_9 AS testtable_4.a_3.repeated_string_val, a_20 AS `IF`((a_9) IS NULL,
    0, ARRAY_LENGTH(a_9)), a_21 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
    CAST("PAD" AS ARRAY_ZIP_MODE)), a_22 AS `IF`((a_21 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_19,
      a_20)) != (GREATEST(a_19, a_20))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_15 AS `IF`(a_21 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_19, a_20), GREATEST(a_19,
      a_20)), ARRAY(
    SELECT
      STRUCT< arr0 INT32, arr1 STRING, offset INT64 > (orderbyscan_17.a_6, orderbyscan_17.a_10, orderbyscan_17.a_13) AS a_18
    FROM
      (
        SELECT
          filterscan_16.a_6 AS a_6,
          filterscan_16.a_7 AS a_7,
          filterscan_16.a_10 AS a_10,
          filterscan_16.a_11 AS a_11,
          filterscan_16.a_13 AS a_13
        FROM
          (
            SELECT
              projectscan_14.a_6 AS a_6,
              projectscan_14.a_7 AS a_7,
              projectscan_14.a_10 AS a_10,
              projectscan_14.a_11 AS a_11,
              projectscan_14.a_13 AS a_13
            FROM
              (
                SELECT
                  arrayscan_8.a_6 AS a_6,
                  arrayscan_8.a_7 AS a_7,
                  arrayscan_12.a_10 AS a_10,
                  arrayscan_12.a_11 AS a_11,
                  COALESCE(arrayscan_8.a_7, arrayscan_12.a_11) AS a_13
                FROM
                  (
                    SELECT
                      a_6 AS a_6,
                      a_7 AS a_7
                    FROM
                      UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
                  ) AS arrayscan_8
                  FULL JOIN
                  (
                    SELECT
                      a_10 AS a_10,
                      a_11 AS a_11
                    FROM
                      UNNEST(a_9 AS a_10) WITH OFFSET AS a_11
                  ) AS arrayscan_12
                  ON (arrayscan_8.a_7) = (arrayscan_12.a_11)
              ) AS projectscan_14
            WHERE
              (projectscan_14.a_13) < a_15
          ) AS filterscan_16
        ORDER BY filterscan_16.a_13
      ) AS orderbyscan_17
  )) AS a_23);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1,
     TestTable.TestEnum AS a_2,
     TestTable.KitchenSink AS a_3
|> AS testtable_4
|> JOIN
   UNNEST(WITH(a_5 AS testtable_4.a_3.repeated_int32_val, a_19 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_9 AS testtable_4.a_3.repeated_string_val, a_20 AS `IF`((a_9) IS NULL,
     0, ARRAY_LENGTH(a_9)), a_21 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
     CAST("PAD" AS ARRAY_ZIP_MODE)), a_22 AS `IF`((a_21 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_19,
       a_20)) != (GREATEST(a_19, a_20))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
     CAST(NULL AS INT64)), a_15 AS `IF`(a_21 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_19, a_20), GREATEST(a_19,
       a_20)), ARRAY(
     FROM
       UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
     |> SELECT
          a_6 AS a_6,
          a_7 AS a_7
     |> AS arrayscan_8
     |> FULL JOIN
        (
          FROM
            UNNEST(a_9 AS a_10) WITH OFFSET AS a_11
          |> SELECT
               a_10 AS a_10,
               a_11 AS a_11
          |> AS arrayscan_12
        )
        ON (arrayscan_8.a_7) = (arrayscan_12.a_11)
     |> SELECT
          arrayscan_8.a_6 AS a_6,
          arrayscan_8.a_7 AS a_7,
          arrayscan_12.a_10 AS a_10,
          arrayscan_12.a_11 AS a_11,
          COALESCE(arrayscan_8.a_7, arrayscan_12.a_11) AS a_13
     |> AS projectscan_14
     |> WHERE
          (projectscan_14.a_13) < a_15
     |> SELECT
          projectscan_14.a_6 AS a_6,
          projectscan_14.a_7 AS a_7,
          projectscan_14.a_10 AS a_10,
          projectscan_14.a_11 AS a_11,
          projectscan_14.a_13 AS a_13
     |> AS filterscan_16
     |> ORDER BY filterscan_16.a_13
     |> SELECT
          filterscan_16.a_6 AS a_6,
          filterscan_16.a_7 AS a_7,
          filterscan_16.a_10 AS a_10,
          filterscan_16.a_11 AS a_11,
          filterscan_16.a_13 AS a_13
     |> AS orderbyscan_17
     |> SELECT
          STRUCT< arr0 INT32, arr1 STRING, offset INT64 > (orderbyscan_17.a_6, orderbyscan_17.a_10, orderbyscan_17.a_13) AS a_18
   )) AS a_23)
|> SELECT
     testtable_4.a_1 AS key,
     testtable_4.a_2 AS TestEnum,
     testtable_4.a_3 AS KitchenSink,
     a_23.arr0 AS repeated_int32_val,
     a_23.arr1 AS repeated_string_val;
==

[show_sqlbuilder_output]
# 2 arguments: path expressions with inferred alias.
SELECT *
FROM TestTable, UNNEST(
  TestTable.KitchenSink.repeated_int32_val,
  TestTable.KitchenSink.repeated_int32_val{{| AS array2}}
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Duplicate value table name `repeated_int32_val` found in UNNEST is not allowed [at 5:25]
  TestTable.KitchenSink.repeated_int32_val
                        ^
--
ALTERNATION GROUP:  AS array2
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.repeated_int32_val#4 AS repeated_int32_val [INT32]
| +-$array.array2#5 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.array2#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.array2#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-GetProtoField
        | | +-type=ARRAY<INT32>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_int32_val
        | | +-default_value=[]
        | +-GetProtoField
        |   +-type=ARRAY<INT32>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int32_val
        |   +-default_value=[]
        +-element_column_list=$array.[repeated_int32_val#4, array2#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  testtable_4.a_1 AS key,
  testtable_4.a_2 AS TestEnum,
  testtable_4.a_3 AS KitchenSink,
  a_5 AS repeated_int32_val,
  a_6 AS array2
FROM
  (
    SELECT
      TestTable.key AS a_1,
      TestTable.TestEnum AS a_2,
      TestTable.KitchenSink AS a_3
    FROM
      TestTable
  ) AS testtable_4
  JOIN
  UNNEST(testtable_4.a_3.repeated_int32_val AS a_5, testtable_4.a_3.repeated_int32_val AS a_6, mode  => CAST("PAD" AS ARRAY_ZIP_MODE));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1,
     TestTable.TestEnum AS a_2,
     TestTable.KitchenSink AS a_3
|> AS testtable_4
|> JOIN
   UNNEST(testtable_4.a_3.repeated_int32_val AS a_5, testtable_4.a_3.repeated_int32_val AS a_6, mode  => CAST("PAD" AS ARRAY_ZIP_MODE))
|> SELECT
     testtable_4.a_1 AS key,
     testtable_4.a_2 AS TestEnum,
     testtable_4.a_3 AS KitchenSink,
     a_5 AS repeated_int32_val,
     a_6 AS array2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.repeated_int32_val#4 AS repeated_int32_val [INT32]
| +-$array.array2#5 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.array2#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4, $array.array2#5]
        +-expr_list=
        | +-repeated_int32_val#4 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-array2#5 :=
        |   +-GetStructField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT32, arr1 INT32, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT32, arr1 INT32, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT32, column=$array.arr0#13)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  testtable_4.a_1 AS key,
  testtable_4.a_2 AS TestEnum,
  testtable_4.a_3 AS KitchenSink,
  a_23.arr0 AS repeated_int32_val,
  a_23.arr1 AS array2
FROM
  (
    SELECT
      TestTable.key AS a_1,
      TestTable.TestEnum AS a_2,
      TestTable.KitchenSink AS a_3
    FROM
      TestTable
  ) AS testtable_4
  JOIN
  UNNEST(WITH(a_5 AS testtable_4.a_3.repeated_int32_val, a_19 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_9 AS testtable_4.a_3.repeated_int32_val, a_20 AS `IF`((a_9) IS NULL,
    0, ARRAY_LENGTH(a_9)), a_21 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
    CAST("PAD" AS ARRAY_ZIP_MODE)), a_22 AS `IF`((a_21 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_19,
      a_20)) != (GREATEST(a_19, a_20))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_15 AS `IF`(a_21 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_19, a_20), GREATEST(a_19,
      a_20)), ARRAY(
    SELECT
      STRUCT< arr0 INT32, arr1 INT32, offset INT64 > (orderbyscan_17.a_6, orderbyscan_17.a_10, orderbyscan_17.a_13) AS a_18
    FROM
      (
        SELECT
          filterscan_16.a_6 AS a_6,
          filterscan_16.a_7 AS a_7,
          filterscan_16.a_10 AS a_10,
          filterscan_16.a_11 AS a_11,
          filterscan_16.a_13 AS a_13
        FROM
          (
            SELECT
              projectscan_14.a_6 AS a_6,
              projectscan_14.a_7 AS a_7,
              projectscan_14.a_10 AS a_10,
              projectscan_14.a_11 AS a_11,
              projectscan_14.a_13 AS a_13
            FROM
              (
                SELECT
                  arrayscan_8.a_6 AS a_6,
                  arrayscan_8.a_7 AS a_7,
                  arrayscan_12.a_10 AS a_10,
                  arrayscan_12.a_11 AS a_11,
                  COALESCE(arrayscan_8.a_7, arrayscan_12.a_11) AS a_13
                FROM
                  (
                    SELECT
                      a_6 AS a_6,
                      a_7 AS a_7
                    FROM
                      UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
                  ) AS arrayscan_8
                  FULL JOIN
                  (
                    SELECT
                      a_10 AS a_10,
                      a_11 AS a_11
                    FROM
                      UNNEST(a_9 AS a_10) WITH OFFSET AS a_11
                  ) AS arrayscan_12
                  ON (arrayscan_8.a_7) = (arrayscan_12.a_11)
              ) AS projectscan_14
            WHERE
              (projectscan_14.a_13) < a_15
          ) AS filterscan_16
        ORDER BY filterscan_16.a_13
      ) AS orderbyscan_17
  )) AS a_23);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1,
     TestTable.TestEnum AS a_2,
     TestTable.KitchenSink AS a_3
|> AS testtable_4
|> JOIN
   UNNEST(WITH(a_5 AS testtable_4.a_3.repeated_int32_val, a_19 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_9 AS testtable_4.a_3.repeated_int32_val, a_20 AS `IF`((a_9) IS NULL,
     0, ARRAY_LENGTH(a_9)), a_21 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
     CAST("PAD" AS ARRAY_ZIP_MODE)), a_22 AS `IF`((a_21 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_19,
       a_20)) != (GREATEST(a_19, a_20))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
     CAST(NULL AS INT64)), a_15 AS `IF`(a_21 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_19, a_20), GREATEST(a_19,
       a_20)), ARRAY(
     FROM
       UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
     |> SELECT
          a_6 AS a_6,
          a_7 AS a_7
     |> AS arrayscan_8
     |> FULL JOIN
        (
          FROM
            UNNEST(a_9 AS a_10) WITH OFFSET AS a_11
          |> SELECT
               a_10 AS a_10,
               a_11 AS a_11
          |> AS arrayscan_12
        )
        ON (arrayscan_8.a_7) = (arrayscan_12.a_11)
     |> SELECT
          arrayscan_8.a_6 AS a_6,
          arrayscan_8.a_7 AS a_7,
          arrayscan_12.a_10 AS a_10,
          arrayscan_12.a_11 AS a_11,
          COALESCE(arrayscan_8.a_7, arrayscan_12.a_11) AS a_13
     |> AS projectscan_14
     |> WHERE
          (projectscan_14.a_13) < a_15
     |> SELECT
          projectscan_14.a_6 AS a_6,
          projectscan_14.a_7 AS a_7,
          projectscan_14.a_10 AS a_10,
          projectscan_14.a_11 AS a_11,
          projectscan_14.a_13 AS a_13
     |> AS filterscan_16
     |> ORDER BY filterscan_16.a_13
     |> SELECT
          filterscan_16.a_6 AS a_6,
          filterscan_16.a_7 AS a_7,
          filterscan_16.a_10 AS a_10,
          filterscan_16.a_11 AS a_11,
          filterscan_16.a_13 AS a_13
     |> AS orderbyscan_17
     |> SELECT
          STRUCT< arr0 INT32, arr1 INT32, offset INT64 > (orderbyscan_17.a_6, orderbyscan_17.a_10, orderbyscan_17.a_13) AS a_18
   )) AS a_23)
|> SELECT
     testtable_4.a_1 AS key,
     testtable_4.a_2 AS TestEnum,
     testtable_4.a_3 AS KitchenSink,
     a_23.arr0 AS repeated_int32_val,
     a_23.arr1 AS array2;
==

[show_sqlbuilder_output]
# 2 arguments: path expressions with explicit alias.
SELECT *
FROM TestTable, UNNEST(
  TestTable.KitchenSink.repeated_int32_val AS array1,
  TestTable.KitchenSink.repeated_string_val AS array2
)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.array1#4 AS array1 [INT32]
| +-$array.array2#5 AS array2 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-GetProtoField
        | | +-type=ARRAY<INT32>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_int32_val
        | | +-default_value=[]
        | +-GetProtoField
        |   +-type=ARRAY<STRING>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_string_val
        |   +-default_value=[]
        +-element_column_list=$array.[array1#4, array2#5]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  testtable_4.a_1 AS key,
  testtable_4.a_2 AS TestEnum,
  testtable_4.a_3 AS KitchenSink,
  a_5 AS array1,
  a_6 AS array2
FROM
  (
    SELECT
      TestTable.key AS a_1,
      TestTable.TestEnum AS a_2,
      TestTable.KitchenSink AS a_3
    FROM
      TestTable
  ) AS testtable_4
  JOIN
  UNNEST(testtable_4.a_3.repeated_int32_val AS a_5, testtable_4.a_3.repeated_string_val AS a_6, mode  => CAST("PAD" AS ARRAY_ZIP_MODE));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1,
     TestTable.TestEnum AS a_2,
     TestTable.KitchenSink AS a_3
|> AS testtable_4
|> JOIN
   UNNEST(testtable_4.a_3.repeated_int32_val AS a_5, testtable_4.a_3.repeated_string_val AS a_6, mode  => CAST("PAD" AS ARRAY_ZIP_MODE))
|> SELECT
     testtable_4.a_1 AS key,
     testtable_4.a_2 AS TestEnum,
     testtable_4.a_3 AS KitchenSink,
     a_5 AS array1,
     a_6 AS array2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.array1#4 AS array1 [INT32]
| +-$array.array2#5 AS array2 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.array1#4, $array.array2#5]
        +-expr_list=
        | +-array1#4 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 STRING, offset INT64>, column=$array.$with_expr_element#19)
        | |   +-field_idx=0
        | +-array2#5 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 STRING, offset INT64>, column=$array.$with_expr_element#19)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#19]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT32, arr1 STRING, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#6 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr0_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |   | +-arr1#8 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<STRING>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_string_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8)
            |   | +-mode#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#11 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#12 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#10)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#7)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#9)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT32, arr1 STRING, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6)
            |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#12)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#18]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#18 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT32, arr1 STRING, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT32, column=$array.arr0#13)
            |           |       +-ColumnRef(type=STRING, column=$array.arr1#15)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16, $full_join.offset#17]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#17 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#13, $array_offset.offset#14, $array.arr1#15, $array_offset.offset#16]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#15, $array_offset.offset#16]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr1#8, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#15]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#16)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#16)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#17)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#12, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#17)
            +-element_column_list=[$array.$with_expr_element#19]
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  testtable_4.a_1 AS key,
  testtable_4.a_2 AS TestEnum,
  testtable_4.a_3 AS KitchenSink,
  a_23.arr0 AS array1,
  a_23.arr1 AS array2
FROM
  (
    SELECT
      TestTable.key AS a_1,
      TestTable.TestEnum AS a_2,
      TestTable.KitchenSink AS a_3
    FROM
      TestTable
  ) AS testtable_4
  JOIN
  UNNEST(WITH(a_5 AS testtable_4.a_3.repeated_int32_val, a_19 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_9 AS testtable_4.a_3.repeated_string_val, a_20 AS `IF`((a_9) IS NULL,
    0, ARRAY_LENGTH(a_9)), a_21 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
    CAST("PAD" AS ARRAY_ZIP_MODE)), a_22 AS `IF`((a_21 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_19,
      a_20)) != (GREATEST(a_19, a_20))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
    CAST(NULL AS INT64)), a_15 AS `IF`(a_21 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_19, a_20), GREATEST(a_19,
      a_20)), ARRAY(
    SELECT
      STRUCT< arr0 INT32, arr1 STRING, offset INT64 > (orderbyscan_17.a_6, orderbyscan_17.a_10, orderbyscan_17.a_13) AS a_18
    FROM
      (
        SELECT
          filterscan_16.a_6 AS a_6,
          filterscan_16.a_7 AS a_7,
          filterscan_16.a_10 AS a_10,
          filterscan_16.a_11 AS a_11,
          filterscan_16.a_13 AS a_13
        FROM
          (
            SELECT
              projectscan_14.a_6 AS a_6,
              projectscan_14.a_7 AS a_7,
              projectscan_14.a_10 AS a_10,
              projectscan_14.a_11 AS a_11,
              projectscan_14.a_13 AS a_13
            FROM
              (
                SELECT
                  arrayscan_8.a_6 AS a_6,
                  arrayscan_8.a_7 AS a_7,
                  arrayscan_12.a_10 AS a_10,
                  arrayscan_12.a_11 AS a_11,
                  COALESCE(arrayscan_8.a_7, arrayscan_12.a_11) AS a_13
                FROM
                  (
                    SELECT
                      a_6 AS a_6,
                      a_7 AS a_7
                    FROM
                      UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
                  ) AS arrayscan_8
                  FULL JOIN
                  (
                    SELECT
                      a_10 AS a_10,
                      a_11 AS a_11
                    FROM
                      UNNEST(a_9 AS a_10) WITH OFFSET AS a_11
                  ) AS arrayscan_12
                  ON (arrayscan_8.a_7) = (arrayscan_12.a_11)
              ) AS projectscan_14
            WHERE
              (projectscan_14.a_13) < a_15
          ) AS filterscan_16
        ORDER BY filterscan_16.a_13
      ) AS orderbyscan_17
  )) AS a_23);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1,
     TestTable.TestEnum AS a_2,
     TestTable.KitchenSink AS a_3
|> AS testtable_4
|> JOIN
   UNNEST(WITH(a_5 AS testtable_4.a_3.repeated_int32_val, a_19 AS `IF`((a_5) IS NULL, 0, ARRAY_LENGTH(a_5)), a_9 AS testtable_4.a_3.repeated_string_val, a_20 AS `IF`((a_9) IS NULL,
     0, ARRAY_LENGTH(a_9)), a_21 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
     CAST("PAD" AS ARRAY_ZIP_MODE)), a_22 AS `IF`((a_21 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_19,
       a_20)) != (GREATEST(a_19, a_20))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
     CAST(NULL AS INT64)), a_15 AS `IF`(a_21 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_19, a_20), GREATEST(a_19,
       a_20)), ARRAY(
     FROM
       UNNEST(a_5 AS a_6) WITH OFFSET AS a_7
     |> SELECT
          a_6 AS a_6,
          a_7 AS a_7
     |> AS arrayscan_8
     |> FULL JOIN
        (
          FROM
            UNNEST(a_9 AS a_10) WITH OFFSET AS a_11
          |> SELECT
               a_10 AS a_10,
               a_11 AS a_11
          |> AS arrayscan_12
        )
        ON (arrayscan_8.a_7) = (arrayscan_12.a_11)
     |> SELECT
          arrayscan_8.a_6 AS a_6,
          arrayscan_8.a_7 AS a_7,
          arrayscan_12.a_10 AS a_10,
          arrayscan_12.a_11 AS a_11,
          COALESCE(arrayscan_8.a_7, arrayscan_12.a_11) AS a_13
     |> AS projectscan_14
     |> WHERE
          (projectscan_14.a_13) < a_15
     |> SELECT
          projectscan_14.a_6 AS a_6,
          projectscan_14.a_7 AS a_7,
          projectscan_14.a_10 AS a_10,
          projectscan_14.a_11 AS a_11,
          projectscan_14.a_13 AS a_13
     |> AS filterscan_16
     |> ORDER BY filterscan_16.a_13
     |> SELECT
          filterscan_16.a_6 AS a_6,
          filterscan_16.a_7 AS a_7,
          filterscan_16.a_10 AS a_10,
          filterscan_16.a_11 AS a_11,
          filterscan_16.a_13 AS a_13
     |> AS orderbyscan_17
     |> SELECT
          STRUCT< arr0 INT32, arr1 STRING, offset INT64 > (orderbyscan_17.a_6, orderbyscan_17.a_10, orderbyscan_17.a_13) AS a_18
   )) AS a_23)
|> SELECT
     testtable_4.a_1 AS key,
     testtable_4.a_2 AS TestEnum,
     testtable_4.a_3 AS KitchenSink,
     a_23.arr0 AS array1,
     a_23.arr1 AS array2;
==

# 2 arguments: path expressions reference columns from different lhs tables.
SELECT *
FROM TestTable, ComplexTypes, UNNEST(
  TestTable.KitchenSink.repeated_int32_val AS array1,
  ComplexTypes.Int32Array AS array2
)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.key#4 AS key [INT32]
| +-ComplexTypes.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-ComplexTypes.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.Int32Array#7 AS Int32Array [ARRAY<INT32>]
| +-ComplexTypes.TestStruct#8 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-ComplexTypes.TestProto#9 AS TestProto [PROTO<zetasql_test__.TestExtraPB>]
| +-$array.array1#10 AS array1 [INT32]
| +-$array.array2#11 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, $array.array1#10, $array.array2#11]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, $array.array1#10, $array.array2#11]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9]
        |   +-left_scan=
        |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        |   +-right_scan=
        |     +-TableScan(column_list=ComplexTypes.[key#4, TestEnum#5, KitchenSink#6, Int32Array#7, TestStruct#8, TestProto#9], table=ComplexTypes, column_index_list=[0, 1, 2, 3, 4, 5])
        +-array_expr_list=
        | +-GetProtoField
        | | +-type=ARRAY<INT32>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_int32_val
        | | +-default_value=[]
        | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
        +-element_column_list=$array.[array1#10, array2#11]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.key#4 AS key [INT32]
| +-ComplexTypes.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-ComplexTypes.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.Int32Array#7 AS Int32Array [ARRAY<INT32>]
| +-ComplexTypes.TestStruct#8 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-ComplexTypes.TestProto#9 AS TestProto [PROTO<zetasql_test__.TestExtraPB>]
| +-$array.array1#10 AS array1 [INT32]
| +-$array.array2#11 AS array2 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, $array.array1#10, $array.array2#11]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, $array.array1#10, $array.array2#11]
        +-expr_list=
        | +-array1#10 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>, column=$array.$with_expr_element#25)
        | |   +-field_idx=0
        | +-array2#11 :=
        |   +-GetStructField
        |     +-type=INT32
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>, column=$array.$with_expr_element#25)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, $array.$with_expr_element#25]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9]
            |   +-left_scan=
            |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            |   +-right_scan=
            |     +-TableScan(column_list=ComplexTypes.[key#4, TestEnum#5, KitchenSink#6, Int32Array#7, TestStruct#8, TestProto#9], table=ComplexTypes, column_index_list=[0, 1, 2, 3, 4, 5])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT32, arr1 INT32, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#12 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr0_len#13 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#12)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#12)
            |   | +-arr1#14 := ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
            |   | +-arr1_len#15 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#14)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#14)
            |   | +-mode#16 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#17 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#16)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#13)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#15)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#13)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#15)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#18 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#16)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#13)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#15)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#13)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#15)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT32, arr1 INT32, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#12)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#14)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#18)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#24]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#24 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT32, column=$array.arr0#19)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#21)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#23)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#19, $array_offset.offset#20, $array.arr1#21, $array_offset.offset#22, $full_join.offset#23]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#19, $array_offset.offset#20, $array.arr1#21, $array_offset.offset#22, $full_join.offset#23]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#19, $array_offset.offset#20, $array.arr1#21, $array_offset.offset#22, $full_join.offset#23]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#23 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#20)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#22)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#19, $array_offset.offset#20, $array.arr1#21, $array_offset.offset#22]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#19, $array_offset.offset#20]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#12, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#19]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#20)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#21, $array_offset.offset#22]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#14, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#21]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#22)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#20)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#22)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#23)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#18, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#23)
            +-element_column_list=[$array.$with_expr_element#25]
==

[show_sqlbuilder_output]
# 2 arguments: correlated path expressions reference columns from different
# out-of-scope tables.
SELECT (
  SELECT AS STRUCT *
  FROM UNNEST(
    TestTable.KitchenSink.repeated_int32_val AS array1,
    ComplexTypes.Int32Array AS array2,
    mode => 'PAD'
  )
) AS col1
FROM TestTable, ComplexTypes
--
QueryStmt
+-output_column_list=
| +-$query.col1#13 AS col1 [STRUCT<array1 INT32, array2 INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#13]
    +-expr_list=
    | +-col1#13 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<array1 INT32, array2 INT32>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#12]
    |         +-expr_list=
    |         | +-$struct#12 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<array1 INT32, array2 INT32>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT32, column=$array.array1#10)
    |         |       +-ColumnRef(type=INT32, column=$array.array2#11)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$array.[array1#10, array2#11]
    |             +-input_scan=
    |               +-ArrayScan
    |                 +-column_list=$array.[array1#10, array2#11]
    |                 +-array_expr_list=
    |                 | +-GetProtoField
    |                 | | +-type=ARRAY<INT32>
    |                 | | +-expr=
    |                 | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 | | +-field_descriptor=repeated_int32_val
    |                 | | +-default_value=[]
    |                 | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7, is_correlated=TRUE)
    |                 +-element_column_list=$array.[array1#10, array2#11]
    |                 +-array_zip_mode=
    |                   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7]
        +-left_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-right_scan=
          +-TableScan(column_list=[ComplexTypes.Int32Array#7], table=ComplexTypes, column_index_list=[3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      STRUCT< array1 INT32, array2 INT32 > (projectscan_8.a_6, projectscan_8.a_7) AS a_9
    FROM
      (
        SELECT
          a_6 AS a_6,
          a_7 AS a_7
        FROM
          UNNEST(testtable_2.a_1.repeated_int32_val AS a_6, complextypes_4.a_3 AS a_7, mode  => CAST("PAD" AS ARRAY_ZIP_MODE))
      ) AS projectscan_8
  ) AS col1
FROM
  (
    SELECT
      TestTable.KitchenSink AS a_1
    FROM
      TestTable
  ) AS testtable_2
  CROSS JOIN
  (
    SELECT
      ComplexTypes.Int32Array AS a_3
    FROM
      ComplexTypes
  ) AS complextypes_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> CROSS JOIN
   (
     FROM
       ComplexTypes
     |> SELECT
          ComplexTypes.Int32Array AS a_3
     |> AS complextypes_4
   )
|> SELECT
     (
       FROM
         UNNEST(testtable_2.a_1.repeated_int32_val AS a_6, complextypes_4.a_3 AS a_7, mode  => CAST("PAD" AS ARRAY_ZIP_MODE))
       |> SELECT
            a_6 AS a_6,
            a_7 AS a_7
       |> AS projectscan_8
       |> SELECT
            STRUCT< array1 INT32, array2 INT32 > (projectscan_8.a_6, projectscan_8.a_7) AS a_9
     ) AS col1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.col1#13 AS col1 [STRUCT<array1 INT32, array2 INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#13]
    +-expr_list=
    | +-col1#13 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<array1 INT32, array2 INT32>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#12]
    |         +-expr_list=
    |         | +-$struct#12 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<array1 INT32, array2 INT32>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT32, column=$array.array1#10)
    |         |       +-ColumnRef(type=INT32, column=$array.array2#11)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$array.[array1#10, array2#11]
    |             +-input_scan=
    |               +-ProjectScan
    |                 +-column_list=$array.[array1#10, array2#11]
    |                 +-expr_list=
    |                 | +-array1#10 :=
    |                 | | +-GetStructField
    |                 | |   +-type=INT32
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>, column=$array.$with_expr_element#27)
    |                 | |   +-field_idx=0
    |                 | +-array2#11 :=
    |                 |   +-GetStructField
    |                 |     +-type=INT32
    |                 |     +-expr=
    |                 |     | +-ColumnRef(type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>, column=$array.$with_expr_element#27)
    |                 |     +-field_idx=1
    |                 +-input_scan=
    |                   +-ArrayScan
    |                     +-column_list=[$array.$with_expr_element#27]
    |                     +-array_expr_list=
    |                     | +-WithExpr
    |                     |   +-type=ARRAY<STRUCT<arr0 INT32, arr1 INT32, offset INT64>>
    |                     |   +-assignment_list=
    |                     |   | +-arr0#14 :=
    |                     |   | | +-GetProtoField
    |                     |   | |   +-type=ARRAY<INT32>
    |                     |   | |   +-expr=
    |                     |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   +-field_descriptor=repeated_int32_val
    |                     |   | |   +-default_value=[]
    |                     |   | +-arr0_len#15 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#14)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#14)
    |                     |   | +-arr1#16 := ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7, is_correlated=TRUE)
    |                     |   | +-arr1_len#17 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#16)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#16)
    |                     |   | +-mode#18 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
    |                     |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
    |                     |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
    |                     |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
    |                     |   | +-strict_check#19 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
    |                     |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#18)
    |                     |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
    |                     |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
    |                     |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#15)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#17)
    |                     |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#15)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#17)
    |                     |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |                     |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
    |                     |   | |   +-Literal(type=INT64, value=NULL)
    |                     |   | +-result_len#20 :=
    |                     |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#18)
    |                     |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
    |                     |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#15)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#17)
    |                     |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#15)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#17)
    |                     |   +-expr=
    |                     |     +-SubqueryExpr
    |                     |       +-type=ARRAY<STRUCT<arr0 INT32, arr1 INT32, offset INT64>>
    |                     |       +-subquery_type=ARRAY
    |                     |       +-parameter_list=
    |                     |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#14)
    |                     |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#16)
    |                     |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#20)
    |                     |       +-subquery=
    |                     |         +-ProjectScan
    |                     |           +-column_list=[$make_struct.$struct#26]
    |                     |           +-is_ordered=TRUE
    |                     |           +-expr_list=
    |                     |           | +-$struct#26 :=
    |                     |           |   +-MakeStruct
    |                     |           |     +-type=STRUCT<arr0 INT32, arr1 INT32, offset INT64>
    |                     |           |     +-field_list=
    |                     |           |       +-ColumnRef(type=INT32, column=$array.arr0#21)
    |                     |           |       +-ColumnRef(type=INT32, column=$array.arr1#23)
    |                     |           |       +-ColumnRef(type=INT64, column=$full_join.offset#25)
    |                     |           +-input_scan=
    |                     |             +-OrderByScan
    |                     |               +-column_list=[$array.arr0#21, $array_offset.offset#22, $array.arr1#23, $array_offset.offset#24, $full_join.offset#25]
    |                     |               +-is_ordered=TRUE
    |                     |               +-input_scan=
    |                     |               | +-FilterScan
    |                     |               |   +-column_list=[$array.arr0#21, $array_offset.offset#22, $array.arr1#23, $array_offset.offset#24, $full_join.offset#25]
    |                     |               |   +-input_scan=
    |                     |               |   | +-ProjectScan
    |                     |               |   |   +-column_list=[$array.arr0#21, $array_offset.offset#22, $array.arr1#23, $array_offset.offset#24, $full_join.offset#25]
    |                     |               |   |   +-expr_list=
    |                     |               |   |   | +-offset#25 :=
    |                     |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#22)
    |                     |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#24)
    |                     |               |   |   +-input_scan=
    |                     |               |   |     +-JoinScan
    |                     |               |   |       +-column_list=[$array.arr0#21, $array_offset.offset#22, $array.arr1#23, $array_offset.offset#24]
    |                     |               |   |       +-join_type=FULL
    |                     |               |   |       +-left_scan=
    |                     |               |   |       | +-ArrayScan
    |                     |               |   |       |   +-column_list=[$array.arr0#21, $array_offset.offset#22]
    |                     |               |   |       |   +-array_expr_list=
    |                     |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr0#14, is_correlated=TRUE)
    |                     |               |   |       |   +-element_column_list=[$array.arr0#21]
    |                     |               |   |       |   +-array_offset_column=
    |                     |               |   |       |     +-ColumnHolder(column=$array_offset.offset#22)
    |                     |               |   |       +-right_scan=
    |                     |               |   |       | +-ArrayScan
    |                     |               |   |       |   +-column_list=[$array.arr1#23, $array_offset.offset#24]
    |                     |               |   |       |   +-array_expr_list=
    |                     |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#16, is_correlated=TRUE)
    |                     |               |   |       |   +-element_column_list=[$array.arr1#23]
    |                     |               |   |       |   +-array_offset_column=
    |                     |               |   |       |     +-ColumnHolder(column=$array_offset.offset#24)
    |                     |               |   |       +-join_expr=
    |                     |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#22)
    |                     |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#24)
    |                     |               |   +-filter_expr=
    |                     |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |                     |               |       +-ColumnRef(type=INT64, column=$full_join.offset#25)
    |                     |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#20, is_correlated=TRUE)
    |                     |               +-order_by_item_list=
    |                     |                 +-OrderByItem
    |                     |                   +-column_ref=
    |                     |                     +-ColumnRef(type=INT64, column=$full_join.offset#25)
    |                     +-element_column_list=[$array.$with_expr_element#27]
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7]
        +-left_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-right_scan=
          +-TableScan(column_list=[ComplexTypes.Int32Array#7], table=ComplexTypes, column_index_list=[3])
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      STRUCT< array1 INT32, array2 INT32 > (projectscan_27.a_25, projectscan_27.a_26) AS a_28
    FROM
      (
        SELECT
          a_24.arr0 AS a_25,
          a_24.arr1 AS a_26
        FROM
          UNNEST(WITH(a_6 AS testtable_2.a_1.repeated_int32_val, a_20 AS `IF`((a_6) IS NULL, 0, ARRAY_LENGTH(a_6)), a_10 AS complextypes_4.a_3, a_21 AS `IF`((a_10) IS NULL,
            0, ARRAY_LENGTH(a_10)), a_22 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
            CAST("PAD" AS ARRAY_ZIP_MODE)), a_23 AS `IF`((a_22 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_20,
              a_21)) != (GREATEST(a_20, a_21))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
            CAST(NULL AS INT64)), a_16 AS `IF`(a_22 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_20, a_21), GREATEST(a_20,
              a_21)), ARRAY(
            SELECT
              STRUCT< arr0 INT32, arr1 INT32, offset INT64 > (orderbyscan_18.a_7, orderbyscan_18.a_11, orderbyscan_18.a_14) AS a_19
            FROM
              (
                SELECT
                  filterscan_17.a_7 AS a_7,
                  filterscan_17.a_8 AS a_8,
                  filterscan_17.a_11 AS a_11,
                  filterscan_17.a_12 AS a_12,
                  filterscan_17.a_14 AS a_14
                FROM
                  (
                    SELECT
                      projectscan_15.a_7 AS a_7,
                      projectscan_15.a_8 AS a_8,
                      projectscan_15.a_11 AS a_11,
                      projectscan_15.a_12 AS a_12,
                      projectscan_15.a_14 AS a_14
                    FROM
                      (
                        SELECT
                          arrayscan_9.a_7 AS a_7,
                          arrayscan_9.a_8 AS a_8,
                          arrayscan_13.a_11 AS a_11,
                          arrayscan_13.a_12 AS a_12,
                          COALESCE(arrayscan_9.a_8, arrayscan_13.a_12) AS a_14
                        FROM
                          (
                            SELECT
                              a_7 AS a_7,
                              a_8 AS a_8
                            FROM
                              UNNEST(a_6 AS a_7) WITH OFFSET AS a_8
                          ) AS arrayscan_9
                          FULL JOIN
                          (
                            SELECT
                              a_11 AS a_11,
                              a_12 AS a_12
                            FROM
                              UNNEST(a_10 AS a_11) WITH OFFSET AS a_12
                          ) AS arrayscan_13
                          ON (arrayscan_9.a_8) = (arrayscan_13.a_12)
                      ) AS projectscan_15
                    WHERE
                      (projectscan_15.a_14) < a_16
                  ) AS filterscan_17
                ORDER BY filterscan_17.a_14
              ) AS orderbyscan_18
          )) AS a_24)
      ) AS projectscan_27
  ) AS col1
FROM
  (
    SELECT
      TestTable.KitchenSink AS a_1
    FROM
      TestTable
  ) AS testtable_2
  CROSS JOIN
  (
    SELECT
      ComplexTypes.Int32Array AS a_3
    FROM
      ComplexTypes
  ) AS complextypes_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> CROSS JOIN
   (
     FROM
       ComplexTypes
     |> SELECT
          ComplexTypes.Int32Array AS a_3
     |> AS complextypes_4
   )
|> SELECT
     (
       FROM
         UNNEST(WITH(a_6 AS testtable_2.a_1.repeated_int32_val, a_20 AS `IF`((a_6) IS NULL, 0, ARRAY_LENGTH(a_6)), a_10 AS complextypes_4.a_3, a_21 AS `IF`((a_10) IS NULL,
           0, ARRAY_LENGTH(a_10)), a_22 AS `IF`(CAST("PAD" AS ARRAY_ZIP_MODE) IS NULL, ERROR("UNNEST does not allow NULL mode argument"),
           CAST("PAD" AS ARRAY_ZIP_MODE)), a_23 AS `IF`((a_22 = CAST("STRICT" AS ARRAY_ZIP_MODE)) AND ((LEAST(a_20,
             a_21)) != (GREATEST(a_20, a_21))), ERROR("Unnested arrays under STRICT mode must have equal lengths"),
           CAST(NULL AS INT64)), a_16 AS `IF`(a_22 = CAST("TRUNCATE" AS ARRAY_ZIP_MODE), LEAST(a_20, a_21), GREATEST(a_20,
             a_21)), ARRAY(
           FROM
             UNNEST(a_6 AS a_7) WITH OFFSET AS a_8
           |> SELECT
                a_7 AS a_7,
                a_8 AS a_8
           |> AS arrayscan_9
           |> FULL JOIN
              (
                FROM
                  UNNEST(a_10 AS a_11) WITH OFFSET AS a_12
                |> SELECT
                     a_11 AS a_11,
                     a_12 AS a_12
                |> AS arrayscan_13
              )
              ON (arrayscan_9.a_8) = (arrayscan_13.a_12)
           |> SELECT
                arrayscan_9.a_7 AS a_7,
                arrayscan_9.a_8 AS a_8,
                arrayscan_13.a_11 AS a_11,
                arrayscan_13.a_12 AS a_12,
                COALESCE(arrayscan_9.a_8, arrayscan_13.a_12) AS a_14
           |> AS projectscan_15
           |> WHERE
                (projectscan_15.a_14) < a_16
           |> SELECT
                projectscan_15.a_7 AS a_7,
                projectscan_15.a_8 AS a_8,
                projectscan_15.a_11 AS a_11,
                projectscan_15.a_12 AS a_12,
                projectscan_15.a_14 AS a_14
           |> AS filterscan_17
           |> ORDER BY filterscan_17.a_14
           |> SELECT
                filterscan_17.a_7 AS a_7,
                filterscan_17.a_8 AS a_8,
                filterscan_17.a_11 AS a_11,
                filterscan_17.a_12 AS a_12,
                filterscan_17.a_14 AS a_14
           |> AS orderbyscan_18
           |> SELECT
                STRUCT< arr0 INT32, arr1 INT32, offset INT64 > (orderbyscan_18.a_7, orderbyscan_18.a_11, orderbyscan_18.a_14) AS a_19
         )) AS a_24)
       |> SELECT
            a_24.arr0 AS a_25,
            a_24.arr1 AS a_26
       |> AS projectscan_27
       |> SELECT
            STRUCT< array1 INT32, array2 INT32 > (projectscan_27.a_25, projectscan_27.a_26) AS a_28
     ) AS col1;
==

[language_features=NONE,+MULTIWAY_UNNEST,+UNNEST_AND_FLATTEN_ARRAYS,+WITH_EXPRESSION]
# 2 arguments: FLATTEN correlated path expressions reference columns from
# different out-of-scope tables.
SELECT (
  SELECT AS STRUCT *
  FROM UNNEST(
    FLATTEN(TestTable.KitchenSink.nested_repeated_value.nested_int64) AS array1,
    ComplexTypes.Int32Array AS array2,
    mode => 'PAD'
  )
) AS col1
FROM TestTable, ComplexTypes
--
QueryStmt
+-output_column_list=
| +-$query.col1#13 AS col1 [STRUCT<array1 INT64, array2 INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#13]
    +-expr_list=
    | +-col1#13 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<array1 INT64, array2 INT32>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#12]
    |         +-expr_list=
    |         | +-$struct#12 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<array1 INT64, array2 INT32>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=$array.array1#10)
    |         |       +-ColumnRef(type=INT32, column=$array.array2#11)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$array.[array1#10, array2#11]
    |             +-input_scan=
    |               +-ArrayScan
    |                 +-column_list=$array.[array1#10, array2#11]
    |                 +-array_expr_list=
    |                 | +-Flatten
    |                 | | +-type=ARRAY<INT64>
    |                 | | +-expr=
    |                 | | | +-GetProtoField
    |                 | | |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |                 | | |   +-expr=
    |                 | | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 | | |   +-field_descriptor=nested_repeated_value
    |                 | | |   +-default_value=[]
    |                 | | +-get_field_list=
    |                 | |   +-GetProtoField
    |                 | |     +-type=INT64
    |                 | |     +-expr=
    |                 | |     | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>)
    |                 | |     +-field_descriptor=nested_int64
    |                 | |     +-default_value=88
    |                 | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7, is_correlated=TRUE)
    |                 +-element_column_list=$array.[array1#10, array2#11]
    |                 +-array_zip_mode=
    |                   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7]
        +-left_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-right_scan=
          +-TableScan(column_list=[ComplexTypes.Int32Array#7], table=ComplexTypes, column_index_list=[3])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.col1#13 AS col1 [STRUCT<array1 INT64, array2 INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#13]
    +-expr_list=
    | +-col1#13 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<array1 INT64, array2 INT32>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#12]
    |         +-expr_list=
    |         | +-$struct#12 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<array1 INT64, array2 INT32>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=$array.array1#10)
    |         |       +-ColumnRef(type=INT32, column=$array.array2#11)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$array.[array1#10, array2#11]
    |             +-input_scan=
    |               +-ProjectScan
    |                 +-column_list=$array.[array1#10, array2#11]
    |                 +-expr_list=
    |                 | +-array1#10 :=
    |                 | | +-GetStructField
    |                 | |   +-type=INT64
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#31)
    |                 | |   +-field_idx=0
    |                 | +-array2#11 :=
    |                 |   +-GetStructField
    |                 |     +-type=INT32
    |                 |     +-expr=
    |                 |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>, column=$array.$with_expr_element#31)
    |                 |     +-field_idx=1
    |                 +-input_scan=
    |                   +-ArrayScan
    |                     +-column_list=[$array.$with_expr_element#31]
    |                     +-array_expr_list=
    |                     | +-WithExpr
    |                     |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
    |                     |   +-assignment_list=
    |                     |   | +-arr0#18 :=
    |                     |   | | +-WithExpr
    |                     |   | |   +-type=ARRAY<INT64>
    |                     |   | |   +-assignment_list=
    |                     |   | |   | +-injected#14 :=
    |                     |   | |   |   +-GetProtoField
    |                     |   | |   |     +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |                     |   | |   |     +-expr=
    |                     |   | |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   |     +-field_descriptor=nested_repeated_value
    |                     |   | |   |     +-default_value=[]
    |                     |   | |   +-expr=
    |                     |   | |     +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |                     |   | |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> BOOL)
    |                     |   | |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#14)
    |                     |   | |       +-Literal(type=ARRAY<INT64>, value=NULL)
    |                     |   | |       +-SubqueryExpr
    |                     |   | |         +-type=ARRAY<INT64>
    |                     |   | |         +-subquery_type=ARRAY
    |                     |   | |         +-parameter_list=
    |                     |   | |         | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#14)
    |                     |   | |         +-subquery=
    |                     |   | |           +-OrderByScan
    |                     |   | |             +-column_list=[$flatten.injected#17]
    |                     |   | |             +-is_ordered=TRUE
    |                     |   | |             +-input_scan=
    |                     |   | |             | +-ProjectScan
    |                     |   | |             |   +-column_list=[$flatten.injected#15, $offset.injected#16, $flatten.injected#17]
    |                     |   | |             |   +-expr_list=
    |                     |   | |             |   | +-injected#17 :=
    |                     |   | |             |   |   +-GetProtoField
    |                     |   | |             |   |     +-type=INT64
    |                     |   | |             |   |     +-expr=
    |                     |   | |             |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$flatten.injected#15)
    |                     |   | |             |   |     +-field_descriptor=nested_int64
    |                     |   | |             |   |     +-default_value=88
    |                     |   | |             |   +-input_scan=
    |                     |   | |             |     +-ArrayScan
    |                     |   | |             |       +-column_list=[$flatten.injected#15, $offset.injected#16]
    |                     |   | |             |       +-array_expr_list=
    |                     |   | |             |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$flatten_input.injected#14, is_correlated=TRUE)
    |                     |   | |             |       +-element_column_list=[$flatten.injected#15]
    |                     |   | |             |       +-array_offset_column=
    |                     |   | |             |         +-ColumnHolder(column=$offset.injected#16)
    |                     |   | |             +-order_by_item_list=
    |                     |   | |               +-OrderByItem
    |                     |   | |                 +-column_ref=
    |                     |   | |                   +-ColumnRef(type=INT64, column=$offset.injected#16)
    |                     |   | +-arr0_len#19 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#18)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#18)
    |                     |   | +-arr1#20 := ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7, is_correlated=TRUE)
    |                     |   | +-arr1_len#21 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#20)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#20)
    |                     |   | +-mode#22 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
    |                     |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
    |                     |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
    |                     |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
    |                     |   | +-strict_check#23 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
    |                     |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#22)
    |                     |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
    |                     |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
    |                     |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#19)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#21)
    |                     |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#19)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#21)
    |                     |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |                     |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
    |                     |   | |   +-Literal(type=INT64, value=NULL)
    |                     |   | +-result_len#24 :=
    |                     |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#22)
    |                     |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
    |                     |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#19)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#21)
    |                     |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#19)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#21)
    |                     |   +-expr=
    |                     |     +-SubqueryExpr
    |                     |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, offset INT64>>
    |                     |       +-subquery_type=ARRAY
    |                     |       +-parameter_list=
    |                     |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#18)
    |                     |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#20)
    |                     |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#24)
    |                     |       +-subquery=
    |                     |         +-ProjectScan
    |                     |           +-column_list=[$make_struct.$struct#30]
    |                     |           +-is_ordered=TRUE
    |                     |           +-expr_list=
    |                     |           | +-$struct#30 :=
    |                     |           |   +-MakeStruct
    |                     |           |     +-type=STRUCT<arr0 INT64, arr1 INT32, offset INT64>
    |                     |           |     +-field_list=
    |                     |           |       +-ColumnRef(type=INT64, column=$array.arr0#25)
    |                     |           |       +-ColumnRef(type=INT32, column=$array.arr1#27)
    |                     |           |       +-ColumnRef(type=INT64, column=$full_join.offset#29)
    |                     |           +-input_scan=
    |                     |             +-OrderByScan
    |                     |               +-column_list=[$array.arr0#25, $array_offset.offset#26, $array.arr1#27, $array_offset.offset#28, $full_join.offset#29]
    |                     |               +-is_ordered=TRUE
    |                     |               +-input_scan=
    |                     |               | +-FilterScan
    |                     |               |   +-column_list=[$array.arr0#25, $array_offset.offset#26, $array.arr1#27, $array_offset.offset#28, $full_join.offset#29]
    |                     |               |   +-input_scan=
    |                     |               |   | +-ProjectScan
    |                     |               |   |   +-column_list=[$array.arr0#25, $array_offset.offset#26, $array.arr1#27, $array_offset.offset#28, $full_join.offset#29]
    |                     |               |   |   +-expr_list=
    |                     |               |   |   | +-offset#29 :=
    |                     |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#26)
    |                     |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#28)
    |                     |               |   |   +-input_scan=
    |                     |               |   |     +-JoinScan
    |                     |               |   |       +-column_list=[$array.arr0#25, $array_offset.offset#26, $array.arr1#27, $array_offset.offset#28]
    |                     |               |   |       +-join_type=FULL
    |                     |               |   |       +-left_scan=
    |                     |               |   |       | +-ArrayScan
    |                     |               |   |       |   +-column_list=[$array.arr0#25, $array_offset.offset#26]
    |                     |               |   |       |   +-array_expr_list=
    |                     |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#18, is_correlated=TRUE)
    |                     |               |   |       |   +-element_column_list=[$array.arr0#25]
    |                     |               |   |       |   +-array_offset_column=
    |                     |               |   |       |     +-ColumnHolder(column=$array_offset.offset#26)
    |                     |               |   |       +-right_scan=
    |                     |               |   |       | +-ArrayScan
    |                     |               |   |       |   +-column_list=[$array.arr1#27, $array_offset.offset#28]
    |                     |               |   |       |   +-array_expr_list=
    |                     |               |   |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#20, is_correlated=TRUE)
    |                     |               |   |       |   +-element_column_list=[$array.arr1#27]
    |                     |               |   |       |   +-array_offset_column=
    |                     |               |   |       |     +-ColumnHolder(column=$array_offset.offset#28)
    |                     |               |   |       +-join_expr=
    |                     |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#26)
    |                     |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#28)
    |                     |               |   +-filter_expr=
    |                     |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |                     |               |       +-ColumnRef(type=INT64, column=$full_join.offset#29)
    |                     |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#24, is_correlated=TRUE)
    |                     |               +-order_by_item_list=
    |                     |                 +-OrderByItem
    |                     |                   +-column_ref=
    |                     |                     +-ColumnRef(type=INT64, column=$full_join.offset#29)
    |                     +-element_column_list=[$array.$with_expr_element#31]
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7]
        +-left_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-right_scan=
          +-TableScan(column_list=[ComplexTypes.Int32Array#7], table=ComplexTypes, column_index_list=[3])
==


# 3 arguments: literal expression without alias, path expression with explicit alias.
SELECT *
FROM TestTable, UNNEST([1, 2, 3], TestTable.KitchenSink.repeated_int32_val AS array2, TestTable.KitchenSink.repeated_int64_val AS array3)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT64]
| +-$array.array2#5 AS array2 [INT32]
| +-$array.array3#6 AS array3 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5, $array.array3#6]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5, $array.array3#6]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        | +-GetProtoField
        | | +-type=ARRAY<INT32>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_int32_val
        | | +-default_value=[]
        | +-GetProtoField
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   +-field_descriptor=repeated_int64_val
        |   +-default_value=[]
        +-element_column_list=$array.[$unnest1#4, array2#5, array3#6]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.$unnest1#4 AS `$unnest1` [INT64]
| +-$array.array2#5 AS array2 [INT32]
| +-$array.array3#6 AS array3 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5, $array.array3#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$unnest1#4, $array.array2#5, $array.array3#6]
        +-expr_list=
        | +-$unnest1#4 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, arr2 INT64, offset INT64>, column=$array.$with_expr_element#25)
        | |   +-field_idx=0
        | +-array2#5 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, arr2 INT64, offset INT64>, column=$array.$with_expr_element#25)
        | |   +-field_idx=1
        | +-array3#6 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT32, arr2 INT64, offset INT64>, column=$array.$with_expr_element#25)
        |     +-field_idx=2
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.$with_expr_element#25]
            +-input_scan=
            | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, arr2 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#7 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
            |   | +-arr0_len#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#7)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#7)
            |   | +-arr1#9 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr1_len#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#9)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#9)
            |   | +-arr2#11 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT64>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int64_val
            |   | |   +-default_value=[]
            |   | +-arr2_len#12 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr2#11)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr2#11)
            |   | +-mode#13 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#14 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#13)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(3) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#8)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#10)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr2_len#12)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(3) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#8)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#10)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr2_len#12)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#15 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#13)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(3) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#8)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#10)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr2_len#12)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(3) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#8)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#10)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr2_len#12)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT32, arr2 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#7)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#9)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr2#11)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#15)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#24]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#24 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT32, arr2 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#16)
            |           |       +-ColumnRef(type=INT32, column=$array.arr1#18)
            |           |       +-ColumnRef(type=INT64, column=$array.arr2#21)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#23)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#16, $array_offset.offset#17, $array.arr1#18, $array_offset.offset#19, $full_join.offset#20, $array.arr2#21, $array_offset.offset#22, $full_join.offset#23]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#16, $array_offset.offset#17, $array.arr1#18, $array_offset.offset#19, $full_join.offset#20, $array.arr2#21, $array_offset.offset#22, $full_join.offset#23]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#16, $array_offset.offset#17, $array.arr1#18, $array_offset.offset#19, $full_join.offset#20, $array.arr2#21, $array_offset.offset#22, $full_join.offset#23]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#23 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$full_join.offset#20)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#22)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#16, $array_offset.offset#17, $array.arr1#18, $array_offset.offset#19, $full_join.offset#20, $array.arr2#21, $array_offset.offset#22]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ProjectScan
            |               |   |       |   +-column_list=[$array.arr0#16, $array_offset.offset#17, $array.arr1#18, $array_offset.offset#19, $full_join.offset#20]
            |               |   |       |   +-expr_list=
            |               |   |       |   | +-offset#20 :=
            |               |   |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#17)
            |               |   |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#19)
            |               |   |       |   +-input_scan=
            |               |   |       |     +-JoinScan
            |               |   |       |       +-column_list=[$array.arr0#16, $array_offset.offset#17, $array.arr1#18, $array_offset.offset#19]
            |               |   |       |       +-join_type=FULL
            |               |   |       |       +-left_scan=
            |               |   |       |       | +-ArrayScan
            |               |   |       |       |   +-column_list=[$array.arr0#16, $array_offset.offset#17]
            |               |   |       |       |   +-array_expr_list=
            |               |   |       |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#7, is_correlated=TRUE)
            |               |   |       |       |   +-element_column_list=[$array.arr0#16]
            |               |   |       |       |   +-array_offset_column=
            |               |   |       |       |     +-ColumnHolder(column=$array_offset.offset#17)
            |               |   |       |       +-right_scan=
            |               |   |       |       | +-ArrayScan
            |               |   |       |       |   +-column_list=[$array.arr1#18, $array_offset.offset#19]
            |               |   |       |       |   +-array_expr_list=
            |               |   |       |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr1#9, is_correlated=TRUE)
            |               |   |       |       |   +-element_column_list=[$array.arr1#18]
            |               |   |       |       |   +-array_offset_column=
            |               |   |       |       |     +-ColumnHolder(column=$array_offset.offset#19)
            |               |   |       |       +-join_expr=
            |               |   |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#17)
            |               |   |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#19)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr2#21, $array_offset.offset#22]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr2#11, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr2#21]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#22)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$full_join.offset#20)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#22)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#23)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#15, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#23)
            +-element_column_list=[$array.$with_expr_element#25]
==

# 10 arguments: literal and path expressions with explicit and inferred aliases
# and without alias.
# Note that, SELECT * will expand STRUCT or PROTO array element.
SELECT *
FROM TestTable, ComplexTypes, MoreComplexTypes, UNNEST(
  [1, 2] AS array1,
  [STRUCT(1 AS x), STRUCT(2)] AS array2,
  TestTable.KitchenSink.repeated_int32_val AS array3,
  ["hello"],
  TestTable.KitchenSink.repeated_string_val AS array5,
  ComplexTypes.Int32Array AS array6,
  MoreComplexTypes.ArrayOfStruct AS array7,
  TestTable.KitchenSink.repeated_float_val,
  TestTable.KitchenSink.nested_repeated_value,
  TestTable.KitchenSink.nested_value.nested_repeated_int64,
  mode => 'STRICT'
)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.key#4 AS key [INT32]
| +-ComplexTypes.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-ComplexTypes.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.Int32Array#7 AS Int32Array [ARRAY<INT32>]
| +-ComplexTypes.TestStruct#8 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-ComplexTypes.TestProto#9 AS TestProto [PROTO<zetasql_test__.TestExtraPB>]
| +-MoreComplexTypes.key#10 AS key [INT32]
| +-MoreComplexTypes.ArrayOfStruct#11 AS ArrayOfStruct [ARRAY<STRUCT<a INT32, b STRING>>]
| +-MoreComplexTypes.StructOfArrayOfStruct#12 AS StructOfArrayOfStruct [STRUCT<x INT64, y STRUCT<a INT32, b STRING>, z ARRAY<STRUCT<a INT32, b STRING>>>]
| +-$array.array1#13 AS array1 [INT64]
| +-$query.x#23 AS x [INT64]
| +-$array.array3#15 AS array3 [INT32]
| +-$array.$unnest1#16 AS `$unnest1` [STRING]
| +-$array.array5#17 AS array5 [STRING]
| +-$array.array6#18 AS array6 [INT32]
| +-$query.a#24 AS a [INT32]
| +-$query.b#25 AS b [STRING]
| +-$array.repeated_float_val#20 AS repeated_float_val [FLOAT]
| +-$query.nested_int64#26 AS nested_int64 [INT64]
| +-$query.nested_repeated_int64#27 AS nested_repeated_int64 [ARRAY<INT64>]
| +-$query.nested_repeated_int32#28 AS nested_repeated_int32 [ARRAY<INT32>]
| +-$query.value#29 AS value [ARRAY<INT32>]
| +-$array.nested_repeated_int64#22 AS nested_repeated_int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12, $array.array1#13, $query.x#23, $array.array3#15, $array.$unnest1#16, $array.array5#17, $array.array6#18, $query.a#24, $query.b#25, $array.repeated_float_val#20, $query.nested_int64#26, $query.nested_repeated_int64#27, $query.nested_repeated_int32#28, $query.value#29, $array.nested_repeated_int64#22]
    +-expr_list=
    | +-x#23 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<x INT64>, column=$array.array2#14)
    | |   +-field_idx=0
    | +-a#24 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    | |   +-field_idx=0
    | +-b#25 :=
    | | +-GetStructField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    | |   +-field_idx=1
    | +-nested_int64#26 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    | |   +-field_descriptor=nested_int64
    | |   +-default_value=88
    | +-nested_repeated_int64#27 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT64>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    | |   +-field_descriptor=nested_repeated_int64
    | |   +-default_value=[]
    | +-nested_repeated_int32#28 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT32>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    | |   +-field_descriptor=nested_repeated_int32
    | |   +-default_value=[]
    | +-value#29 :=
    |   +-GetProtoField
    |     +-type=ARRAY<INT32>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |     +-field_descriptor=value
    |     +-default_value=[]
    +-input_scan=
      +-ArrayScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12, $array.array1#13, $array.array2#14, $array.array3#15, $array.$unnest1#16, $array.array5#17, $array.array6#18, $array.array7#19, $array.repeated_float_val#20, $array.nested_repeated_value#21, $array.nested_repeated_int64#22]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12]
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9]
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        |   |   +-right_scan=
        |   |     +-TableScan(column_list=ComplexTypes.[key#4, TestEnum#5, KitchenSink#6, Int32Array#7, TestStruct#8, TestProto#9], table=ComplexTypes, column_index_list=[0, 1, 2, 3, 4, 5])
        |   +-right_scan=
        |     +-TableScan(column_list=MoreComplexTypes.[key#10, ArrayOfStruct#11, StructOfArrayOfStruct#12], table=MoreComplexTypes, column_index_list=[0, 1, 2])
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-Literal(type=ARRAY<STRUCT<x INT64>>, value=[{x:1}, {x:2}])
        | +-GetProtoField
        | | +-type=ARRAY<INT32>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_int32_val
        | | +-default_value=[]
        | +-Literal(type=ARRAY<STRING>, value=["hello"])
        | +-GetProtoField
        | | +-type=ARRAY<STRING>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_string_val
        | | +-default_value=[]
        | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
        | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=MoreComplexTypes.ArrayOfStruct#11)
        | +-GetProtoField
        | | +-type=ARRAY<FLOAT>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=repeated_float_val
        | | +-default_value=[]
        | +-GetProtoField
        | | +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        | | +-field_descriptor=nested_repeated_value
        | | +-default_value=[]
        | +-GetProtoField
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=nested_value
        |   |   +-default_value=NULL
        |   +-field_descriptor=nested_repeated_int64
        |   +-default_value=[]
        +-element_column_list=$array.[array1#13, array2#14, array3#15, $unnest1#16, array5#17, array6#18, array7#19, repeated_float_val#20, nested_repeated_value#21, nested_repeated_int64#22]
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.key#4 AS key [INT32]
| +-ComplexTypes.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-ComplexTypes.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-ComplexTypes.Int32Array#7 AS Int32Array [ARRAY<INT32>]
| +-ComplexTypes.TestStruct#8 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-ComplexTypes.TestProto#9 AS TestProto [PROTO<zetasql_test__.TestExtraPB>]
| +-MoreComplexTypes.key#10 AS key [INT32]
| +-MoreComplexTypes.ArrayOfStruct#11 AS ArrayOfStruct [ARRAY<STRUCT<a INT32, b STRING>>]
| +-MoreComplexTypes.StructOfArrayOfStruct#12 AS StructOfArrayOfStruct [STRUCT<x INT64, y STRUCT<a INT32, b STRING>, z ARRAY<STRUCT<a INT32, b STRING>>>]
| +-$array.array1#13 AS array1 [INT64]
| +-$query.x#23 AS x [INT64]
| +-$array.array3#15 AS array3 [INT32]
| +-$array.$unnest1#16 AS `$unnest1` [STRING]
| +-$array.array5#17 AS array5 [STRING]
| +-$array.array6#18 AS array6 [INT32]
| +-$query.a#24 AS a [INT32]
| +-$query.b#25 AS b [STRING]
| +-$array.repeated_float_val#20 AS repeated_float_val [FLOAT]
| +-$query.nested_int64#26 AS nested_int64 [INT64]
| +-$query.nested_repeated_int64#27 AS nested_repeated_int64 [ARRAY<INT64>]
| +-$query.nested_repeated_int32#28 AS nested_repeated_int32 [ARRAY<INT32>]
| +-$query.value#29 AS value [ARRAY<INT32>]
| +-$array.nested_repeated_int64#22 AS nested_repeated_int64 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12, $array.array1#13, $query.x#23, $array.array3#15, $array.$unnest1#16, $array.array5#17, $array.array6#18, $query.a#24, $query.b#25, $array.repeated_float_val#20, $query.nested_int64#26, $query.nested_repeated_int64#27, $query.nested_repeated_int32#28, $query.value#29, $array.nested_repeated_int64#22]
    +-expr_list=
    | +-x#23 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<x INT64>, column=$array.array2#14)
    | |   +-field_idx=0
    | +-a#24 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    | |   +-field_idx=0
    | +-b#25 :=
    | | +-GetStructField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    | |   +-field_idx=1
    | +-nested_int64#26 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    | |   +-field_descriptor=nested_int64
    | |   +-default_value=88
    | +-nested_repeated_int64#27 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT64>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    | |   +-field_descriptor=nested_repeated_int64
    | |   +-default_value=[]
    | +-nested_repeated_int32#28 :=
    | | +-GetProtoField
    | |   +-type=ARRAY<INT32>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    | |   +-field_descriptor=nested_repeated_int32
    | |   +-default_value=[]
    | +-value#29 :=
    |   +-GetProtoField
    |     +-type=ARRAY<INT32>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |     +-field_descriptor=value
    |     +-default_value=[]
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12, $array.array1#13, $array.array2#14, $array.array3#15, $array.$unnest1#16, $array.array5#17, $array.array6#18, $array.array7#19, $array.repeated_float_val#20, $array.nested_repeated_value#21, $array.nested_repeated_int64#22]
        +-expr_list=
        | +-array1#13 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=0
        | +-array2#14 :=
        | | +-GetStructField
        | |   +-type=STRUCT<x INT64>
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=1
        | +-array3#15 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=2
        | +-$unnest1#16 :=
        | | +-GetStructField
        | |   +-type=STRING
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=3
        | +-array5#17 :=
        | | +-GetStructField
        | |   +-type=STRING
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=4
        | +-array6#18 :=
        | | +-GetStructField
        | |   +-type=INT32
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=5
        | +-array7#19 :=
        | | +-GetStructField
        | |   +-type=STRUCT<a INT32, b STRING>
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=6
        | +-repeated_float_val#20 :=
        | | +-GetStructField
        | |   +-type=FLOAT
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=7
        | +-nested_repeated_value#21 :=
        | | +-GetStructField
        | |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        | |   +-field_idx=8
        | +-nested_repeated_int64#22 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#83)
        |     +-field_idx=9
        +-input_scan=
          +-ArrayScan
            +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12, $array.$with_expr_element#83]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9, MoreComplexTypes.key#10, MoreComplexTypes.ArrayOfStruct#11, MoreComplexTypes.StructOfArrayOfStruct#12]
            |   +-left_scan=
            |   | +-JoinScan
            |   |   +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, ComplexTypes.key#4, ComplexTypes.TestEnum#5, ComplexTypes.KitchenSink#6, ComplexTypes.Int32Array#7, ComplexTypes.TestStruct#8, ComplexTypes.TestProto#9]
            |   |   +-left_scan=
            |   |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
            |   |   +-right_scan=
            |   |     +-TableScan(column_list=ComplexTypes.[key#4, TestEnum#5, KitchenSink#6, Int32Array#7, TestStruct#8, TestProto#9], table=ComplexTypes, column_index_list=[0, 1, 2, 3, 4, 5])
            |   +-right_scan=
            |     +-TableScan(column_list=MoreComplexTypes.[key#10, ArrayOfStruct#11, StructOfArrayOfStruct#12], table=MoreComplexTypes, column_index_list=[0, 1, 2])
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#30 := Literal(type=ARRAY<INT64>, value=[1, 2])
            |   | +-arr0_len#31 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#30)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#30)
            |   | +-arr1#32 := Literal(type=ARRAY<STRUCT<x INT64>>, value=[{x:1}, {x:2}])
            |   | +-arr1_len#33 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<x INT64>>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#32)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<x INT64>>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#32)
            |   | +-arr2#34 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT32>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_int32_val
            |   | |   +-default_value=[]
            |   | +-arr2_len#35 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#34)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#34)
            |   | +-arr3#36 := Literal(type=ARRAY<STRING>, value=["hello"])
            |   | +-arr3_len#37 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#36)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#36)
            |   | +-arr4#38 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<STRING>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_string_val
            |   | |   +-default_value=[]
            |   | +-arr4_len#39 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#38)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#38)
            |   | +-arr5#40 := ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
            |   | +-arr5_len#41 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#40)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#40)
            |   | +-arr6#42 := ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=MoreComplexTypes.ArrayOfStruct#11)
            |   | +-arr6_len#43 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a INT32, b STRING>>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#42)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<a INT32, b STRING>>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#42)
            |   | +-arr7#44 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<FLOAT>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=repeated_float_val
            |   | |   +-default_value=[]
            |   | +-arr7_len#45 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<FLOAT>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#44)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<FLOAT>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#44)
            |   | +-arr8#46 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   +-field_descriptor=nested_repeated_value
            |   | |   +-default_value=[]
            |   | +-arr8_len#47 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#46)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#46)
            |   | +-arr9#48 :=
            |   | | +-GetProtoField
            |   | |   +-type=ARRAY<INT64>
            |   | |   +-expr=
            |   | |   | +-GetProtoField
            |   | |   |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
            |   | |   |   +-expr=
            |   | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |   |   +-field_descriptor=nested_value
            |   | |   |   +-default_value=NULL
            |   | |   +-field_descriptor=nested_repeated_int64
            |   | |   +-default_value=[]
            |   | +-arr9_len#49 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#48)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#48)
            |   | +-mode#50 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | +-strict_check#51 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#50)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(10) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#31)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#33)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr2_len#35)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr3_len#37)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr4_len#39)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr5_len#41)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr6_len#43)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr7_len#45)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr8_len#47)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr9_len#49)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(10) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#31)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#33)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr2_len#35)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr3_len#37)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr4_len#39)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr5_len#41)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr6_len#43)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr7_len#45)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr8_len#47)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr9_len#49)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#52 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#50)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(10) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#31)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#33)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr2_len#35)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr3_len#37)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr4_len#39)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr5_len#41)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr6_len#43)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr7_len#45)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr8_len#47)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr9_len#49)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(10) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#31)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#33)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr2_len#35)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr3_len#37)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr4_len#39)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr5_len#41)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr6_len#43)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr7_len#45)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr8_len#47)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr9_len#49)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#30)
            |       | +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#32)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#34)
            |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#36)
            |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#38)
            |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#40)
            |       | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#42)
            |       | +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#44)
            |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#46)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#48)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#52)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#82]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#82 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#53)
            |           |       +-ColumnRef(type=STRUCT<x INT64>, column=$array.arr1#55)
            |           |       +-ColumnRef(type=INT32, column=$array.arr2#58)
            |           |       +-ColumnRef(type=STRING, column=$array.arr3#61)
            |           |       +-ColumnRef(type=STRING, column=$array.arr4#64)
            |           |       +-ColumnRef(type=INT32, column=$array.arr5#67)
            |           |       +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.arr6#70)
            |           |       +-ColumnRef(type=FLOAT, column=$array.arr7#73)
            |           |       +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.arr8#76)
            |           |       +-ColumnRef(type=INT64, column=$array.arr9#79)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#81)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75, $array.arr8#76, $array_offset.offset#77, $full_join.offset#78, $array.arr9#79, $array_offset.offset#80, $full_join.offset#81]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75, $array.arr8#76, $array_offset.offset#77, $full_join.offset#78, $array.arr9#79, $array_offset.offset#80, $full_join.offset#81]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75, $array.arr8#76, $array_offset.offset#77, $full_join.offset#78, $array.arr9#79, $array_offset.offset#80, $full_join.offset#81]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#81 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$full_join.offset#78)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#80)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75, $array.arr8#76, $array_offset.offset#77, $full_join.offset#78, $array.arr9#79, $array_offset.offset#80]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ProjectScan
            |               |   |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75, $array.arr8#76, $array_offset.offset#77, $full_join.offset#78]
            |               |   |       |   +-expr_list=
            |               |   |       |   | +-offset#78 :=
            |               |   |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#75)
            |               |   |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#77)
            |               |   |       |   +-input_scan=
            |               |   |       |     +-JoinScan
            |               |   |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75, $array.arr8#76, $array_offset.offset#77]
            |               |   |       |       +-join_type=FULL
            |               |   |       |       +-left_scan=
            |               |   |       |       | +-ProjectScan
            |               |   |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74, $full_join.offset#75]
            |               |   |       |       |   +-expr_list=
            |               |   |       |       |   | +-offset#75 :=
            |               |   |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#72)
            |               |   |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#74)
            |               |   |       |       |   +-input_scan=
            |               |   |       |       |     +-JoinScan
            |               |   |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72, $array.arr7#73, $array_offset.offset#74]
            |               |   |       |       |       +-join_type=FULL
            |               |   |       |       |       +-left_scan=
            |               |   |       |       |       | +-ProjectScan
            |               |   |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71, $full_join.offset#72]
            |               |   |       |       |       |   +-expr_list=
            |               |   |       |       |       |   | +-offset#72 :=
            |               |   |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#69)
            |               |   |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#71)
            |               |   |       |       |       |   +-input_scan=
            |               |   |       |       |       |     +-JoinScan
            |               |   |       |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69, $array.arr6#70, $array_offset.offset#71]
            |               |   |       |       |       |       +-join_type=FULL
            |               |   |       |       |       |       +-left_scan=
            |               |   |       |       |       |       | +-ProjectScan
            |               |   |       |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68, $full_join.offset#69]
            |               |   |       |       |       |       |   +-expr_list=
            |               |   |       |       |       |       |   | +-offset#69 :=
            |               |   |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#66)
            |               |   |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#68)
            |               |   |       |       |       |       |   +-input_scan=
            |               |   |       |       |       |       |     +-JoinScan
            |               |   |       |       |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66, $array.arr5#67, $array_offset.offset#68]
            |               |   |       |       |       |       |       +-join_type=FULL
            |               |   |       |       |       |       |       +-left_scan=
            |               |   |       |       |       |       |       | +-ProjectScan
            |               |   |       |       |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65, $full_join.offset#66]
            |               |   |       |       |       |       |       |   +-expr_list=
            |               |   |       |       |       |       |       |   | +-offset#66 :=
            |               |   |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#63)
            |               |   |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#65)
            |               |   |       |       |       |       |       |   +-input_scan=
            |               |   |       |       |       |       |       |     +-JoinScan
            |               |   |       |       |       |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63, $array.arr4#64, $array_offset.offset#65]
            |               |   |       |       |       |       |       |       +-join_type=FULL
            |               |   |       |       |       |       |       |       +-left_scan=
            |               |   |       |       |       |       |       |       | +-ProjectScan
            |               |   |       |       |       |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62, $full_join.offset#63]
            |               |   |       |       |       |       |       |       |   +-expr_list=
            |               |   |       |       |       |       |       |       |   | +-offset#63 :=
            |               |   |       |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#60)
            |               |   |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#62)
            |               |   |       |       |       |       |       |       |   +-input_scan=
            |               |   |       |       |       |       |       |       |     +-JoinScan
            |               |   |       |       |       |       |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60, $array.arr3#61, $array_offset.offset#62]
            |               |   |       |       |       |       |       |       |       +-join_type=FULL
            |               |   |       |       |       |       |       |       |       +-left_scan=
            |               |   |       |       |       |       |       |       |       | +-ProjectScan
            |               |   |       |       |       |       |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59, $full_join.offset#60]
            |               |   |       |       |       |       |       |       |       |   +-expr_list=
            |               |   |       |       |       |       |       |       |       |   | +-offset#60 :=
            |               |   |       |       |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#57)
            |               |   |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#59)
            |               |   |       |       |       |       |       |       |       |   +-input_scan=
            |               |   |       |       |       |       |       |       |       |     +-JoinScan
            |               |   |       |       |       |       |       |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57, $array.arr2#58, $array_offset.offset#59]
            |               |   |       |       |       |       |       |       |       |       +-join_type=FULL
            |               |   |       |       |       |       |       |       |       |       +-left_scan=
            |               |   |       |       |       |       |       |       |       |       | +-ProjectScan
            |               |   |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56, $full_join.offset#57]
            |               |   |       |       |       |       |       |       |       |       |   +-expr_list=
            |               |   |       |       |       |       |       |       |       |       |   | +-offset#57 :=
            |               |   |       |       |       |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |       |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#54)
            |               |   |       |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#56)
            |               |   |       |       |       |       |       |       |       |       |   +-input_scan=
            |               |   |       |       |       |       |       |       |       |       |     +-JoinScan
            |               |   |       |       |       |       |       |       |       |       |       +-column_list=[$array.arr0#53, $array_offset.offset#54, $array.arr1#55, $array_offset.offset#56]
            |               |   |       |       |       |       |       |       |       |       |       +-join_type=FULL
            |               |   |       |       |       |       |       |       |       |       |       +-left_scan=
            |               |   |       |       |       |       |       |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr0#53, $array_offset.offset#54]
            |               |   |       |       |       |       |       |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#30, is_correlated=TRUE)
            |               |   |       |       |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr0#53]
            |               |   |       |       |       |       |       |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#54)
            |               |   |       |       |       |       |       |       |       |       |       +-right_scan=
            |               |   |       |       |       |       |       |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr1#55, $array_offset.offset#56]
            |               |   |       |       |       |       |       |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#32, is_correlated=TRUE)
            |               |   |       |       |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr1#55]
            |               |   |       |       |       |       |       |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#56)
            |               |   |       |       |       |       |       |       |       |       |       +-join_expr=
            |               |   |       |       |       |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#54)
            |               |   |       |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#56)
            |               |   |       |       |       |       |       |       |       |       +-right_scan=
            |               |   |       |       |       |       |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr2#58, $array_offset.offset#59]
            |               |   |       |       |       |       |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#34, is_correlated=TRUE)
            |               |   |       |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr2#58]
            |               |   |       |       |       |       |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#59)
            |               |   |       |       |       |       |       |       |       |       +-join_expr=
            |               |   |       |       |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#57)
            |               |   |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#59)
            |               |   |       |       |       |       |       |       |       +-right_scan=
            |               |   |       |       |       |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |       |       |       |   +-column_list=[$array.arr3#61, $array_offset.offset#62]
            |               |   |       |       |       |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#36, is_correlated=TRUE)
            |               |   |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr3#61]
            |               |   |       |       |       |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#62)
            |               |   |       |       |       |       |       |       |       +-join_expr=
            |               |   |       |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#60)
            |               |   |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#62)
            |               |   |       |       |       |       |       |       +-right_scan=
            |               |   |       |       |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |       |       |   +-column_list=[$array.arr4#64, $array_offset.offset#65]
            |               |   |       |       |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#38, is_correlated=TRUE)
            |               |   |       |       |       |       |       |       |   +-element_column_list=[$array.arr4#64]
            |               |   |       |       |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#65)
            |               |   |       |       |       |       |       |       +-join_expr=
            |               |   |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#63)
            |               |   |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#65)
            |               |   |       |       |       |       |       +-right_scan=
            |               |   |       |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |       |   +-column_list=[$array.arr5#67, $array_offset.offset#68]
            |               |   |       |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#40, is_correlated=TRUE)
            |               |   |       |       |       |       |       |   +-element_column_list=[$array.arr5#67]
            |               |   |       |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#68)
            |               |   |       |       |       |       |       +-join_expr=
            |               |   |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#66)
            |               |   |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#68)
            |               |   |       |       |       |       +-right_scan=
            |               |   |       |       |       |       | +-ArrayScan
            |               |   |       |       |       |       |   +-column_list=[$array.arr6#70, $array_offset.offset#71]
            |               |   |       |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#42, is_correlated=TRUE)
            |               |   |       |       |       |       |   +-element_column_list=[$array.arr6#70]
            |               |   |       |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#71)
            |               |   |       |       |       |       +-join_expr=
            |               |   |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#69)
            |               |   |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#71)
            |               |   |       |       |       +-right_scan=
            |               |   |       |       |       | +-ArrayScan
            |               |   |       |       |       |   +-column_list=[$array.arr7#73, $array_offset.offset#74]
            |               |   |       |       |       |   +-array_expr_list=
            |               |   |       |       |       |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#44, is_correlated=TRUE)
            |               |   |       |       |       |   +-element_column_list=[$array.arr7#73]
            |               |   |       |       |       |   +-array_offset_column=
            |               |   |       |       |       |     +-ColumnHolder(column=$array_offset.offset#74)
            |               |   |       |       |       +-join_expr=
            |               |   |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#72)
            |               |   |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#74)
            |               |   |       |       +-right_scan=
            |               |   |       |       | +-ArrayScan
            |               |   |       |       |   +-column_list=[$array.arr8#76, $array_offset.offset#77]
            |               |   |       |       |   +-array_expr_list=
            |               |   |       |       |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#46, is_correlated=TRUE)
            |               |   |       |       |   +-element_column_list=[$array.arr8#76]
            |               |   |       |       |   +-array_offset_column=
            |               |   |       |       |     +-ColumnHolder(column=$array_offset.offset#77)
            |               |   |       |       +-join_expr=
            |               |   |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |       |           +-ColumnRef(type=INT64, column=$full_join.offset#75)
            |               |   |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#77)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr9#79, $array_offset.offset#80]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#48, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr9#79]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#80)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$full_join.offset#78)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#80)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#81)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#52, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#81)
            +-element_column_list=[$array.$with_expr_element#83]
==

# 10 arguments: literal and correlated path expressions with explicit and
# inferred aliases and without alias.
# Note that, SELECT * will expand STRUCT or PROTO array element.
SELECT (
  SELECT AS STRUCT *
  FROM UNNEST(
    [1, 2] AS array1,
    [STRUCT(1 AS x), STRUCT(2)] AS array2,
    TestTable.KitchenSink.repeated_int32_val AS array3,
    ["hello"],
    TestTable.KitchenSink.repeated_string_val AS array5,
    ComplexTypes.Int32Array AS array6,
    MoreComplexTypes.ArrayOfStruct AS array7,
    TestTable.KitchenSink.repeated_float_val,
    TestTable.KitchenSink.nested_repeated_value,
    TestTable.KitchenSink.nested_value.nested_repeated_int64,
    mode => 'TRUNCATE'
  )
) AS col1
FROM TestTable, ComplexTypes, MoreComplexTypes
--
QueryStmt
+-output_column_list=
| +-$query.col1#31 AS col1 [STRUCT<array1 INT64, x INT64, array3 INT32, STRING, array5 STRING, array6 INT32, a INT32, b STRING, repeated_float_val FLOAT, nested_int64 INT64, nested_repeated_int64 ARRAY<INT64>, nested_repeated_int32 ARRAY<INT32>, value ARRAY<INT32>, nested_repeated_int64 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#31]
    +-expr_list=
    | +-col1#31 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<array1 INT64, x INT64, array3 INT32, STRING, array5 STRING, array6 INT32, a INT32, b STRING, repeated_float_val FLOAT, nested_int64 INT64, nested_repeated_int64 ARRAY<INT64>, nested_repeated_int32 ARRAY<INT32>, value ARRAY<INT32>, nested_repeated_int64 INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
    |     | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=MoreComplexTypes.ArrayOfStruct#11)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#30]
    |         +-expr_list=
    |         | +-$struct#30 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<array1 INT64, x INT64, array3 INT32, STRING, array5 STRING, array6 INT32, a INT32, b STRING, repeated_float_val FLOAT, nested_int64 INT64, nested_repeated_int64 ARRAY<INT64>, nested_repeated_int32 ARRAY<INT32>, value ARRAY<INT32>, nested_repeated_int64 INT64>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=$array.array1#13)
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.x#23)
    |         |       +-ColumnRef(type=INT32, column=$array.array3#15)
    |         |       +-ColumnRef(type=STRING, column=$array.$unnest1#16)
    |         |       +-ColumnRef(type=STRING, column=$array.array5#17)
    |         |       +-ColumnRef(type=INT32, column=$array.array6#18)
    |         |       +-ColumnRef(type=INT32, column=$expr_subquery.a#24)
    |         |       +-ColumnRef(type=STRING, column=$expr_subquery.b#25)
    |         |       +-ColumnRef(type=FLOAT, column=$array.repeated_float_val#20)
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.nested_int64#26)
    |         |       +-ColumnRef(type=ARRAY<INT64>, column=$expr_subquery.nested_repeated_int64#27)
    |         |       +-ColumnRef(type=ARRAY<INT32>, column=$expr_subquery.nested_repeated_int32#28)
    |         |       +-ColumnRef(type=ARRAY<INT32>, column=$expr_subquery.value#29)
    |         |       +-ColumnRef(type=INT64, column=$array.nested_repeated_int64#22)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$array.array1#13, $expr_subquery.x#23, $array.array3#15, $array.$unnest1#16, $array.array5#17, $array.array6#18, $expr_subquery.a#24, $expr_subquery.b#25, $array.repeated_float_val#20, $expr_subquery.nested_int64#26, $expr_subquery.nested_repeated_int64#27, $expr_subquery.nested_repeated_int32#28, $expr_subquery.value#29, $array.nested_repeated_int64#22]
    |             +-expr_list=
    |             | +-x#23 :=
    |             | | +-GetStructField
    |             | |   +-type=INT64
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=STRUCT<x INT64>, column=$array.array2#14)
    |             | |   +-field_idx=0
    |             | +-a#24 :=
    |             | | +-GetStructField
    |             | |   +-type=INT32
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    |             | |   +-field_idx=0
    |             | +-b#25 :=
    |             | | +-GetStructField
    |             | |   +-type=STRING
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    |             | |   +-field_idx=1
    |             | +-nested_int64#26 :=
    |             | | +-GetProtoField
    |             | |   +-type=INT64
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             | |   +-field_descriptor=nested_int64
    |             | |   +-default_value=88
    |             | +-nested_repeated_int64#27 :=
    |             | | +-GetProtoField
    |             | |   +-type=ARRAY<INT64>
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             | |   +-field_descriptor=nested_repeated_int64
    |             | |   +-default_value=[]
    |             | +-nested_repeated_int32#28 :=
    |             | | +-GetProtoField
    |             | |   +-type=ARRAY<INT32>
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             | |   +-field_descriptor=nested_repeated_int32
    |             | |   +-default_value=[]
    |             | +-value#29 :=
    |             |   +-GetProtoField
    |             |     +-type=ARRAY<INT32>
    |             |     +-expr=
    |             |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             |     +-field_descriptor=value
    |             |     +-default_value=[]
    |             +-input_scan=
    |               +-ArrayScan
    |                 +-column_list=$array.[array1#13, array2#14, array3#15, $unnest1#16, array5#17, array6#18, array7#19, repeated_float_val#20, nested_repeated_value#21, nested_repeated_int64#22]
    |                 +-array_expr_list=
    |                 | +-Literal(type=ARRAY<INT64>, value=[1, 2])
    |                 | +-Literal(type=ARRAY<STRUCT<x INT64>>, value=[{x:1}, {x:2}])
    |                 | +-GetProtoField
    |                 | | +-type=ARRAY<INT32>
    |                 | | +-expr=
    |                 | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 | | +-field_descriptor=repeated_int32_val
    |                 | | +-default_value=[]
    |                 | +-Literal(type=ARRAY<STRING>, value=["hello"])
    |                 | +-GetProtoField
    |                 | | +-type=ARRAY<STRING>
    |                 | | +-expr=
    |                 | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 | | +-field_descriptor=repeated_string_val
    |                 | | +-default_value=[]
    |                 | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7, is_correlated=TRUE)
    |                 | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=MoreComplexTypes.ArrayOfStruct#11, is_correlated=TRUE)
    |                 | +-GetProtoField
    |                 | | +-type=ARRAY<FLOAT>
    |                 | | +-expr=
    |                 | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 | | +-field_descriptor=repeated_float_val
    |                 | | +-default_value=[]
    |                 | +-GetProtoField
    |                 | | +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |                 | | +-expr=
    |                 | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 | | +-field_descriptor=nested_repeated_value
    |                 | | +-default_value=[]
    |                 | +-GetProtoField
    |                 |   +-type=ARRAY<INT64>
    |                 |   +-expr=
    |                 |   | +-GetProtoField
    |                 |   |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    |                 |   |   +-expr=
    |                 |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                 |   |   +-field_descriptor=nested_value
    |                 |   |   +-default_value=NULL
    |                 |   +-field_descriptor=nested_repeated_int64
    |                 |   +-default_value=[]
    |                 +-element_column_list=$array.[array1#13, array2#14, array3#15, $unnest1#16, array5#17, array6#18, array7#19, repeated_float_val#20, nested_repeated_value#21, nested_repeated_int64#22]
    |                 +-array_zip_mode=
    |                   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7, MoreComplexTypes.ArrayOfStruct#11]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7]
        |   +-left_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   +-right_scan=
        |     +-TableScan(column_list=[ComplexTypes.Int32Array#7], table=ComplexTypes, column_index_list=[3])
        +-right_scan=
          +-TableScan(column_list=[MoreComplexTypes.ArrayOfStruct#11], table=MoreComplexTypes, column_index_list=[1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.col1#31 AS col1 [STRUCT<array1 INT64, x INT64, array3 INT32, STRING, array5 STRING, array6 INT32, a INT32, b STRING, repeated_float_val FLOAT, nested_int64 INT64, nested_repeated_int64 ARRAY<INT64>, nested_repeated_int32 ARRAY<INT32>, value ARRAY<INT32>, nested_repeated_int64 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#31]
    +-expr_list=
    | +-col1#31 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<array1 INT64, x INT64, array3 INT32, STRING, array5 STRING, array6 INT32, a INT32, b STRING, repeated_float_val FLOAT, nested_int64 INT64, nested_repeated_int64 ARRAY<INT64>, nested_repeated_int32 ARRAY<INT32>, value ARRAY<INT32>, nested_repeated_int64 INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     | +-ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7)
    |     | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=MoreComplexTypes.ArrayOfStruct#11)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#30]
    |         +-expr_list=
    |         | +-$struct#30 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<array1 INT64, x INT64, array3 INT32, STRING, array5 STRING, array6 INT32, a INT32, b STRING, repeated_float_val FLOAT, nested_int64 INT64, nested_repeated_int64 ARRAY<INT64>, nested_repeated_int32 ARRAY<INT32>, value ARRAY<INT32>, nested_repeated_int64 INT64>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=$array.array1#13)
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.x#23)
    |         |       +-ColumnRef(type=INT32, column=$array.array3#15)
    |         |       +-ColumnRef(type=STRING, column=$array.$unnest1#16)
    |         |       +-ColumnRef(type=STRING, column=$array.array5#17)
    |         |       +-ColumnRef(type=INT32, column=$array.array6#18)
    |         |       +-ColumnRef(type=INT32, column=$expr_subquery.a#24)
    |         |       +-ColumnRef(type=STRING, column=$expr_subquery.b#25)
    |         |       +-ColumnRef(type=FLOAT, column=$array.repeated_float_val#20)
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.nested_int64#26)
    |         |       +-ColumnRef(type=ARRAY<INT64>, column=$expr_subquery.nested_repeated_int64#27)
    |         |       +-ColumnRef(type=ARRAY<INT32>, column=$expr_subquery.nested_repeated_int32#28)
    |         |       +-ColumnRef(type=ARRAY<INT32>, column=$expr_subquery.value#29)
    |         |       +-ColumnRef(type=INT64, column=$array.nested_repeated_int64#22)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$array.array1#13, $expr_subquery.x#23, $array.array3#15, $array.$unnest1#16, $array.array5#17, $array.array6#18, $expr_subquery.a#24, $expr_subquery.b#25, $array.repeated_float_val#20, $expr_subquery.nested_int64#26, $expr_subquery.nested_repeated_int64#27, $expr_subquery.nested_repeated_int32#28, $expr_subquery.value#29, $array.nested_repeated_int64#22]
    |             +-expr_list=
    |             | +-x#23 :=
    |             | | +-GetStructField
    |             | |   +-type=INT64
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=STRUCT<x INT64>, column=$array.array2#14)
    |             | |   +-field_idx=0
    |             | +-a#24 :=
    |             | | +-GetStructField
    |             | |   +-type=INT32
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    |             | |   +-field_idx=0
    |             | +-b#25 :=
    |             | | +-GetStructField
    |             | |   +-type=STRING
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.array7#19)
    |             | |   +-field_idx=1
    |             | +-nested_int64#26 :=
    |             | | +-GetProtoField
    |             | |   +-type=INT64
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             | |   +-field_descriptor=nested_int64
    |             | |   +-default_value=88
    |             | +-nested_repeated_int64#27 :=
    |             | | +-GetProtoField
    |             | |   +-type=ARRAY<INT64>
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             | |   +-field_descriptor=nested_repeated_int64
    |             | |   +-default_value=[]
    |             | +-nested_repeated_int32#28 :=
    |             | | +-GetProtoField
    |             | |   +-type=ARRAY<INT32>
    |             | |   +-expr=
    |             | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             | |   +-field_descriptor=nested_repeated_int32
    |             | |   +-default_value=[]
    |             | +-value#29 :=
    |             |   +-GetProtoField
    |             |     +-type=ARRAY<INT32>
    |             |     +-expr=
    |             |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.nested_repeated_value#21)
    |             |     +-field_descriptor=value
    |             |     +-default_value=[]
    |             +-input_scan=
    |               +-ProjectScan
    |                 +-column_list=$array.[array1#13, array2#14, array3#15, $unnest1#16, array5#17, array6#18, array7#19, repeated_float_val#20, nested_repeated_value#21, nested_repeated_int64#22]
    |                 +-expr_list=
    |                 | +-array1#13 :=
    |                 | | +-GetStructField
    |                 | |   +-type=INT64
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=0
    |                 | +-array2#14 :=
    |                 | | +-GetStructField
    |                 | |   +-type=STRUCT<x INT64>
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=1
    |                 | +-array3#15 :=
    |                 | | +-GetStructField
    |                 | |   +-type=INT32
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=2
    |                 | +-$unnest1#16 :=
    |                 | | +-GetStructField
    |                 | |   +-type=STRING
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=3
    |                 | +-array5#17 :=
    |                 | | +-GetStructField
    |                 | |   +-type=STRING
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=4
    |                 | +-array6#18 :=
    |                 | | +-GetStructField
    |                 | |   +-type=INT32
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=5
    |                 | +-array7#19 :=
    |                 | | +-GetStructField
    |                 | |   +-type=STRUCT<a INT32, b STRING>
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=6
    |                 | +-repeated_float_val#20 :=
    |                 | | +-GetStructField
    |                 | |   +-type=FLOAT
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=7
    |                 | +-nested_repeated_value#21 :=
    |                 | | +-GetStructField
    |                 | |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    |                 | |   +-expr=
    |                 | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 | |   +-field_idx=8
    |                 | +-nested_repeated_int64#22 :=
    |                 |   +-GetStructField
    |                 |     +-type=INT64
    |                 |     +-expr=
    |                 |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>, column=$array.$with_expr_element#85)
    |                 |     +-field_idx=9
    |                 +-input_scan=
    |                   +-ArrayScan
    |                     +-column_list=[$array.$with_expr_element#85]
    |                     +-array_expr_list=
    |                     | +-WithExpr
    |                     |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>>
    |                     |   +-assignment_list=
    |                     |   | +-arr0#32 := Literal(type=ARRAY<INT64>, value=[1, 2])
    |                     |   | +-arr0_len#33 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#32)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#32)
    |                     |   | +-arr1#34 := Literal(type=ARRAY<STRUCT<x INT64>>, value=[{x:1}, {x:2}])
    |                     |   | +-arr1_len#35 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<x INT64>>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#34)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<x INT64>>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#34)
    |                     |   | +-arr2#36 :=
    |                     |   | | +-GetProtoField
    |                     |   | |   +-type=ARRAY<INT32>
    |                     |   | |   +-expr=
    |                     |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   +-field_descriptor=repeated_int32_val
    |                     |   | |   +-default_value=[]
    |                     |   | +-arr2_len#37 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#36)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#36)
    |                     |   | +-arr3#38 := Literal(type=ARRAY<STRING>, value=["hello"])
    |                     |   | +-arr3_len#39 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#38)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#38)
    |                     |   | +-arr4#40 :=
    |                     |   | | +-GetProtoField
    |                     |   | |   +-type=ARRAY<STRING>
    |                     |   | |   +-expr=
    |                     |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   +-field_descriptor=repeated_string_val
    |                     |   | |   +-default_value=[]
    |                     |   | +-arr4_len#41 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#40)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#40)
    |                     |   | +-arr5#42 := ColumnRef(type=ARRAY<INT32>, column=ComplexTypes.Int32Array#7, is_correlated=TRUE)
    |                     |   | +-arr5_len#43 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT32>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#42)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT32>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#42)
    |                     |   | +-arr6#44 := ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=MoreComplexTypes.ArrayOfStruct#11, is_correlated=TRUE)
    |                     |   | +-arr6_len#45 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<a INT32, b STRING>>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#44)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<a INT32, b STRING>>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#44)
    |                     |   | +-arr7#46 :=
    |                     |   | | +-GetProtoField
    |                     |   | |   +-type=ARRAY<FLOAT>
    |                     |   | |   +-expr=
    |                     |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   +-field_descriptor=repeated_float_val
    |                     |   | |   +-default_value=[]
    |                     |   | +-arr7_len#47 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<FLOAT>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#46)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<FLOAT>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#46)
    |                     |   | +-arr8#48 :=
    |                     |   | | +-GetProtoField
    |                     |   | |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>
    |                     |   | |   +-expr=
    |                     |   | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   +-field_descriptor=nested_repeated_value
    |                     |   | |   +-default_value=[]
    |                     |   | +-arr8_len#49 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#48)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#48)
    |                     |   | +-arr9#50 :=
    |                     |   | | +-GetProtoField
    |                     |   | |   +-type=ARRAY<INT64>
    |                     |   | |   +-expr=
    |                     |   | |   | +-GetProtoField
    |                     |   | |   |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    |                     |   | |   |   +-expr=
    |                     |   | |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
    |                     |   | |   |   +-field_descriptor=nested_value
    |                     |   | |   |   +-default_value=NULL
    |                     |   | |   +-field_descriptor=nested_repeated_int64
    |                     |   | |   +-default_value=[]
    |                     |   | +-arr9_len#51 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |                     |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#50)
    |                     |   | |   +-Literal(type=INT64, value=0)
    |                     |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
    |                     |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#50)
    |                     |   | +-mode#52 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
    |                     |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
    |                     |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
    |                     |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
    |                     |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
    |                     |   | +-strict_check#53 :=
    |                     |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
    |                     |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#52)
    |                     |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
    |                     |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
    |                     |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(10) INT64) -> INT64)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#33)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#35)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr2_len#37)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr3_len#39)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr4_len#41)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr5_len#43)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr6_len#45)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr7_len#47)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr8_len#49)
    |                     |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr9_len#51)
    |                     |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(10) INT64) -> INT64)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#33)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#35)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr2_len#37)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr3_len#39)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr4_len#41)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr5_len#43)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr6_len#45)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr7_len#47)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr8_len#49)
    |                     |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr9_len#51)
    |                     |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    |                     |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
    |                     |   | |   +-Literal(type=INT64, value=NULL)
    |                     |   | +-result_len#54 :=
    |                     |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                     |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
    |                     |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#52)
    |                     |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
    |                     |   |     +-FunctionCall(ZetaSQL:least(repeated(10) INT64) -> INT64)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#33)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#35)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr2_len#37)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr3_len#39)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr4_len#41)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr5_len#43)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr6_len#45)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr7_len#47)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr8_len#49)
    |                     |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr9_len#51)
    |                     |   |     +-FunctionCall(ZetaSQL:greatest(repeated(10) INT64) -> INT64)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#33)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#35)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr2_len#37)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr3_len#39)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr4_len#41)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr5_len#43)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr6_len#45)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr7_len#47)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr8_len#49)
    |                     |   |       +-ColumnRef(type=INT64, column=$with_expr.arr9_len#51)
    |                     |   +-expr=
    |                     |     +-SubqueryExpr
    |                     |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>>
    |                     |       +-subquery_type=ARRAY
    |                     |       +-parameter_list=
    |                     |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#32)
    |                     |       | +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#34)
    |                     |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#36)
    |                     |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#38)
    |                     |       | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#40)
    |                     |       | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#42)
    |                     |       | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#44)
    |                     |       | +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#46)
    |                     |       | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#48)
    |                     |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#50)
    |                     |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#54)
    |                     |       +-subquery=
    |                     |         +-ProjectScan
    |                     |           +-column_list=[$make_struct.$struct#84]
    |                     |           +-is_ordered=TRUE
    |                     |           +-expr_list=
    |                     |           | +-$struct#84 :=
    |                     |           |   +-MakeStruct
    |                     |           |     +-type=STRUCT<arr0 INT64, arr1 STRUCT<x INT64>, arr2 INT32, arr3 STRING, arr4 STRING, arr5 INT32, arr6 STRUCT<a INT32, b STRING>, arr7 FLOAT, arr8 PROTO<zetasql_test__.KitchenSinkPB.Nested>, arr9 INT64, offset INT64>
    |                     |           |     +-field_list=
    |                     |           |       +-ColumnRef(type=INT64, column=$array.arr0#55)
    |                     |           |       +-ColumnRef(type=STRUCT<x INT64>, column=$array.arr1#57)
    |                     |           |       +-ColumnRef(type=INT32, column=$array.arr2#60)
    |                     |           |       +-ColumnRef(type=STRING, column=$array.arr3#63)
    |                     |           |       +-ColumnRef(type=STRING, column=$array.arr4#66)
    |                     |           |       +-ColumnRef(type=INT32, column=$array.arr5#69)
    |                     |           |       +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$array.arr6#72)
    |                     |           |       +-ColumnRef(type=FLOAT, column=$array.arr7#75)
    |                     |           |       +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.Nested>, column=$array.arr8#78)
    |                     |           |       +-ColumnRef(type=INT64, column=$array.arr9#81)
    |                     |           |       +-ColumnRef(type=INT64, column=$full_join.offset#83)
    |                     |           +-input_scan=
    |                     |             +-OrderByScan
    |                     |               +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77, $array.arr8#78, $array_offset.offset#79, $full_join.offset#80, $array.arr9#81, $array_offset.offset#82, $full_join.offset#83]
    |                     |               +-is_ordered=TRUE
    |                     |               +-input_scan=
    |                     |               | +-FilterScan
    |                     |               |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77, $array.arr8#78, $array_offset.offset#79, $full_join.offset#80, $array.arr9#81, $array_offset.offset#82, $full_join.offset#83]
    |                     |               |   +-input_scan=
    |                     |               |   | +-ProjectScan
    |                     |               |   |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77, $array.arr8#78, $array_offset.offset#79, $full_join.offset#80, $array.arr9#81, $array_offset.offset#82, $full_join.offset#83]
    |                     |               |   |   +-expr_list=
    |                     |               |   |   | +-offset#83 :=
    |                     |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |   |     +-ColumnRef(type=INT64, column=$full_join.offset#80)
    |                     |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#82)
    |                     |               |   |   +-input_scan=
    |                     |               |   |     +-JoinScan
    |                     |               |   |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77, $array.arr8#78, $array_offset.offset#79, $full_join.offset#80, $array.arr9#81, $array_offset.offset#82]
    |                     |               |   |       +-join_type=FULL
    |                     |               |   |       +-left_scan=
    |                     |               |   |       | +-ProjectScan
    |                     |               |   |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77, $array.arr8#78, $array_offset.offset#79, $full_join.offset#80]
    |                     |               |   |       |   +-expr_list=
    |                     |               |   |       |   | +-offset#80 :=
    |                     |               |   |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#77)
    |                     |               |   |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#79)
    |                     |               |   |       |   +-input_scan=
    |                     |               |   |       |     +-JoinScan
    |                     |               |   |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77, $array.arr8#78, $array_offset.offset#79]
    |                     |               |   |       |       +-join_type=FULL
    |                     |               |   |       |       +-left_scan=
    |                     |               |   |       |       | +-ProjectScan
    |                     |               |   |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76, $full_join.offset#77]
    |                     |               |   |       |       |   +-expr_list=
    |                     |               |   |       |       |   | +-offset#77 :=
    |                     |               |   |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#74)
    |                     |               |   |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#76)
    |                     |               |   |       |       |   +-input_scan=
    |                     |               |   |       |       |     +-JoinScan
    |                     |               |   |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74, $array.arr7#75, $array_offset.offset#76]
    |                     |               |   |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       +-left_scan=
    |                     |               |   |       |       |       | +-ProjectScan
    |                     |               |   |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73, $full_join.offset#74]
    |                     |               |   |       |       |       |   +-expr_list=
    |                     |               |   |       |       |       |   | +-offset#74 :=
    |                     |               |   |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#71)
    |                     |               |   |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#73)
    |                     |               |   |       |       |       |   +-input_scan=
    |                     |               |   |       |       |       |     +-JoinScan
    |                     |               |   |       |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71, $array.arr6#72, $array_offset.offset#73]
    |                     |               |   |       |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       |       +-left_scan=
    |                     |               |   |       |       |       |       | +-ProjectScan
    |                     |               |   |       |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70, $full_join.offset#71]
    |                     |               |   |       |       |       |       |   +-expr_list=
    |                     |               |   |       |       |       |       |   | +-offset#71 :=
    |                     |               |   |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#68)
    |                     |               |   |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#70)
    |                     |               |   |       |       |       |       |   +-input_scan=
    |                     |               |   |       |       |       |       |     +-JoinScan
    |                     |               |   |       |       |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68, $array.arr5#69, $array_offset.offset#70]
    |                     |               |   |       |       |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       |       |       +-left_scan=
    |                     |               |   |       |       |       |       |       | +-ProjectScan
    |                     |               |   |       |       |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67, $full_join.offset#68]
    |                     |               |   |       |       |       |       |       |   +-expr_list=
    |                     |               |   |       |       |       |       |       |   | +-offset#68 :=
    |                     |               |   |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#65)
    |                     |               |   |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#67)
    |                     |               |   |       |       |       |       |       |   +-input_scan=
    |                     |               |   |       |       |       |       |       |     +-JoinScan
    |                     |               |   |       |       |       |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65, $array.arr4#66, $array_offset.offset#67]
    |                     |               |   |       |       |       |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       |       |       |       +-left_scan=
    |                     |               |   |       |       |       |       |       |       | +-ProjectScan
    |                     |               |   |       |       |       |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64, $full_join.offset#65]
    |                     |               |   |       |       |       |       |       |       |   +-expr_list=
    |                     |               |   |       |       |       |       |       |       |   | +-offset#65 :=
    |                     |               |   |       |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#62)
    |                     |               |   |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#64)
    |                     |               |   |       |       |       |       |       |       |   +-input_scan=
    |                     |               |   |       |       |       |       |       |       |     +-JoinScan
    |                     |               |   |       |       |       |       |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62, $array.arr3#63, $array_offset.offset#64]
    |                     |               |   |       |       |       |       |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       |       |       |       |       +-left_scan=
    |                     |               |   |       |       |       |       |       |       |       | +-ProjectScan
    |                     |               |   |       |       |       |       |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61, $full_join.offset#62]
    |                     |               |   |       |       |       |       |       |       |       |   +-expr_list=
    |                     |               |   |       |       |       |       |       |       |       |   | +-offset#62 :=
    |                     |               |   |       |       |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$full_join.offset#59)
    |                     |               |   |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#61)
    |                     |               |   |       |       |       |       |       |       |       |   +-input_scan=
    |                     |               |   |       |       |       |       |       |       |       |     +-JoinScan
    |                     |               |   |       |       |       |       |       |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59, $array.arr2#60, $array_offset.offset#61]
    |                     |               |   |       |       |       |       |       |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       |       |       |       |       |       +-left_scan=
    |                     |               |   |       |       |       |       |       |       |       |       | +-ProjectScan
    |                     |               |   |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58, $full_join.offset#59]
    |                     |               |   |       |       |       |       |       |       |       |       |   +-expr_list=
    |                     |               |   |       |       |       |       |       |       |       |       |   | +-offset#59 :=
    |                     |               |   |       |       |       |       |       |       |       |       |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
    |                     |               |   |       |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#56)
    |                     |               |   |       |       |       |       |       |       |       |       |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#58)
    |                     |               |   |       |       |       |       |       |       |       |       |   +-input_scan=
    |                     |               |   |       |       |       |       |       |       |       |       |     +-JoinScan
    |                     |               |   |       |       |       |       |       |       |       |       |       +-column_list=[$array.arr0#55, $array_offset.offset#56, $array.arr1#57, $array_offset.offset#58]
    |                     |               |   |       |       |       |       |       |       |       |       |       +-join_type=FULL
    |                     |               |   |       |       |       |       |       |       |       |       |       +-left_scan=
    |                     |               |   |       |       |       |       |       |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr0#55, $array_offset.offset#56]
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#32, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr0#55]
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#56)
    |                     |               |   |       |       |       |       |       |       |       |       |       +-right_scan=
    |                     |               |   |       |       |       |       |       |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr1#57, $array_offset.offset#58]
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRUCT<x INT64>>, column=$with_expr.arr1#34, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr1#57]
    |                     |               |   |       |       |       |       |       |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#58)
    |                     |               |   |       |       |       |       |       |       |       |       |       +-join_expr=
    |                     |               |   |       |       |       |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#56)
    |                     |               |   |       |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#58)
    |                     |               |   |       |       |       |       |       |       |       |       +-right_scan=
    |                     |               |   |       |       |       |       |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |       |       |       |       |   +-column_list=[$array.arr2#60, $array_offset.offset#61]
    |                     |               |   |       |       |       |       |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr2#36, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr2#60]
    |                     |               |   |       |       |       |       |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#61)
    |                     |               |   |       |       |       |       |       |       |       |       +-join_expr=
    |                     |               |   |       |       |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#59)
    |                     |               |   |       |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#61)
    |                     |               |   |       |       |       |       |       |       |       +-right_scan=
    |                     |               |   |       |       |       |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |       |       |       |   +-column_list=[$array.arr3#63, $array_offset.offset#64]
    |                     |               |   |       |       |       |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr3#38, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |       |       |       |   +-element_column_list=[$array.arr3#63]
    |                     |               |   |       |       |       |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#64)
    |                     |               |   |       |       |       |       |       |       |       +-join_expr=
    |                     |               |   |       |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#62)
    |                     |               |   |       |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#64)
    |                     |               |   |       |       |       |       |       |       +-right_scan=
    |                     |               |   |       |       |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |       |       |   +-column_list=[$array.arr4#66, $array_offset.offset#67]
    |                     |               |   |       |       |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRING>, column=$with_expr.arr4#40, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |       |       |   +-element_column_list=[$array.arr4#66]
    |                     |               |   |       |       |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#67)
    |                     |               |   |       |       |       |       |       |       +-join_expr=
    |                     |               |   |       |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#65)
    |                     |               |   |       |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#67)
    |                     |               |   |       |       |       |       |       +-right_scan=
    |                     |               |   |       |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |       |   +-column_list=[$array.arr5#69, $array_offset.offset#70]
    |                     |               |   |       |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |       |   | +-ColumnRef(type=ARRAY<INT32>, column=$with_expr.arr5#42, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |       |   +-element_column_list=[$array.arr5#69]
    |                     |               |   |       |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#70)
    |                     |               |   |       |       |       |       |       +-join_expr=
    |                     |               |   |       |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#68)
    |                     |               |   |       |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#70)
    |                     |               |   |       |       |       |       +-right_scan=
    |                     |               |   |       |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |       |   +-column_list=[$array.arr6#72, $array_offset.offset#73]
    |                     |               |   |       |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |       |   | +-ColumnRef(type=ARRAY<STRUCT<a INT32, b STRING>>, column=$with_expr.arr6#44, is_correlated=TRUE)
    |                     |               |   |       |       |       |       |   +-element_column_list=[$array.arr6#72]
    |                     |               |   |       |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |       |     +-ColumnHolder(column=$array_offset.offset#73)
    |                     |               |   |       |       |       |       +-join_expr=
    |                     |               |   |       |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#71)
    |                     |               |   |       |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#73)
    |                     |               |   |       |       |       +-right_scan=
    |                     |               |   |       |       |       | +-ArrayScan
    |                     |               |   |       |       |       |   +-column_list=[$array.arr7#75, $array_offset.offset#76]
    |                     |               |   |       |       |       |   +-array_expr_list=
    |                     |               |   |       |       |       |   | +-ColumnRef(type=ARRAY<FLOAT>, column=$with_expr.arr7#46, is_correlated=TRUE)
    |                     |               |   |       |       |       |   +-element_column_list=[$array.arr7#75]
    |                     |               |   |       |       |       |   +-array_offset_column=
    |                     |               |   |       |       |       |     +-ColumnHolder(column=$array_offset.offset#76)
    |                     |               |   |       |       |       +-join_expr=
    |                     |               |   |       |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |       |           +-ColumnRef(type=INT64, column=$full_join.offset#74)
    |                     |               |   |       |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#76)
    |                     |               |   |       |       +-right_scan=
    |                     |               |   |       |       | +-ArrayScan
    |                     |               |   |       |       |   +-column_list=[$array.arr8#78, $array_offset.offset#79]
    |                     |               |   |       |       |   +-array_expr_list=
    |                     |               |   |       |       |   | +-ColumnRef(type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.Nested>>, column=$with_expr.arr8#48, is_correlated=TRUE)
    |                     |               |   |       |       |   +-element_column_list=[$array.arr8#78]
    |                     |               |   |       |       |   +-array_offset_column=
    |                     |               |   |       |       |     +-ColumnHolder(column=$array_offset.offset#79)
    |                     |               |   |       |       +-join_expr=
    |                     |               |   |       |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |       |           +-ColumnRef(type=INT64, column=$full_join.offset#77)
    |                     |               |   |       |           +-ColumnRef(type=INT64, column=$array_offset.offset#79)
    |                     |               |   |       +-right_scan=
    |                     |               |   |       | +-ArrayScan
    |                     |               |   |       |   +-column_list=[$array.arr9#81, $array_offset.offset#82]
    |                     |               |   |       |   +-array_expr_list=
    |                     |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr9#50, is_correlated=TRUE)
    |                     |               |   |       |   +-element_column_list=[$array.arr9#81]
    |                     |               |   |       |   +-array_offset_column=
    |                     |               |   |       |     +-ColumnHolder(column=$array_offset.offset#82)
    |                     |               |   |       +-join_expr=
    |                     |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |                     |               |   |           +-ColumnRef(type=INT64, column=$full_join.offset#80)
    |                     |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#82)
    |                     |               |   +-filter_expr=
    |                     |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |                     |               |       +-ColumnRef(type=INT64, column=$full_join.offset#83)
    |                     |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#54, is_correlated=TRUE)
    |                     |               +-order_by_item_list=
    |                     |                 +-OrderByItem
    |                     |                   +-column_ref=
    |                     |                     +-ColumnRef(type=INT64, column=$full_join.offset#83)
    |                     +-element_column_list=[$array.$with_expr_element#85]
    +-input_scan=
      +-JoinScan
        +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7, MoreComplexTypes.ArrayOfStruct#11]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=[TestTable.KitchenSink#3, ComplexTypes.Int32Array#7]
        |   +-left_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   +-right_scan=
        |     +-TableScan(column_list=[ComplexTypes.Int32Array#7], table=ComplexTypes, column_index_list=[3])
        +-right_scan=
          +-TableScan(column_list=[MoreComplexTypes.ArrayOfStruct#11], table=MoreComplexTypes, column_index_list=[1])
==

# b/423700272
SELECT a FROM (SELECT NULL)
LEFT JOIN UNNEST(ARRAY[1] AS a, ARRAY[0] AS b) ON false
--
QueryStmt
+-output_column_list=
| +-$array.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.a#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$subquery1.$col1#1, $array.a#2]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=NULL)
        |   +-input_scan=
        |     +-SingleRowScan
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1])
        | +-Literal(type=ARRAY<INT64>, value=[0])
        +-element_column_list=$array.[a#2, b#3]
        +-join_expr=
        | +-Literal(type=BOOL, value=false)
        +-is_outer=TRUE
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.a#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.$col1#1, $array.a#2, $array.b#3]
        +-expr_list=
        | +-a#2 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
        | |   +-field_idx=0
        | +-b#3 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
        |     +-field_idx=1
        +-input_scan=
          +-ArrayScan
            +-column_list=[$subquery1.$col1#1, $array.$with_expr_element#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[$subquery1.$col1#1]
            |   +-expr_list=
            |   | +-$col1#1 := Literal(type=INT64, value=NULL)
            |   +-input_scan=
            |     +-SingleRowScan
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#4 := Literal(type=ARRAY<INT64>, value=[1])
            |   | +-arr0_len#5 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4)
            |   | +-arr1#6 := Literal(type=ARRAY<INT64>, value=[0])
            |   | +-arr1_len#7 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6)
            |   | +-mode#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#8)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#10 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#8)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#5)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#7)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#10)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#16]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#16 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#11)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#13)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#15)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14, $full_join.offset#15]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14, $full_join.offset#15]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14, $full_join.offset#15]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#15 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#12)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#11, $array_offset.offset#12, $array.arr1#13, $array_offset.offset#14]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#11, $array_offset.offset#12]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#4, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#11]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#12)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#13, $array_offset.offset#14]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#6, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#13]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#14)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#12)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#14)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#15)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#10, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#15)
            +-element_column_list=[$array.$with_expr_element#17]
            +-join_expr=
            | +-WithExpr
            |   +-type=BOOL
            |   +-assignment_list=
            |   | +-$with_expr_field#18 :=
            |   | | +-GetStructField
            |   | |   +-type=INT64
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
            |   | |   +-field_idx=0
            |   | +-$with_expr_field#19 :=
            |   |   +-GetStructField
            |   |     +-type=INT64
            |   |     +-expr=
            |   |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#17)
            |   |     +-field_idx=1
            |   +-expr=
            |     +-Literal(type=BOOL, value=false)
            +-is_outer=TRUE

==

SELECT a FROM (SELECT NULL)
LEFT JOIN UNNEST(ARRAY[1] AS a, ARRAY[0] AS b) WITH OFFSET offset
ON a = b AND offset = 3
--
QueryStmt
+-output_column_list=
| +-$array.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.a#2]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$subquery1.$col1#1, $array.a#2, $array.b#3, $array_offset.offset#4]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=NULL)
        |   +-input_scan=
        |     +-SingleRowScan
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1])
        | +-Literal(type=ARRAY<INT64>, value=[0])
        +-element_column_list=$array.[a#2, b#3]
        +-array_offset_column=
        | +-ColumnHolder(column=$array_offset.offset#4)
        +-join_expr=
        | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   | +-ColumnRef(type=INT64, column=$array.a#2)
        |   | +-ColumnRef(type=INT64, column=$array.b#3)
        |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |     +-ColumnRef(type=INT64, column=$array_offset.offset#4)
        |     +-Literal(type=INT64, value=3)
        +-is_outer=TRUE
        +-array_zip_mode=
          +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$array.a#2 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.a#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.$col1#1, $array.a#2, $array.b#3, $array_offset.offset#4]
        +-expr_list=
        | +-a#2 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#18)
        | |   +-field_idx=0
        | +-b#3 :=
        | | +-GetStructField
        | |   +-type=INT64
        | |   +-expr=
        | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#18)
        | |   +-field_idx=1
        | +-offset#4 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#18)
        |     +-field_idx=2
        +-input_scan=
          +-ArrayScan
            +-column_list=[$subquery1.$col1#1, $array.$with_expr_element#18]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[$subquery1.$col1#1]
            |   +-expr_list=
            |   | +-$col1#1 := Literal(type=INT64, value=NULL)
            |   +-input_scan=
            |     +-SingleRowScan
            +-array_expr_list=
            | +-WithExpr
            |   +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |   +-assignment_list=
            |   | +-arr0#5 := Literal(type=ARRAY<INT64>, value=[1])
            |   | +-arr0_len#6 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#5)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#5)
            |   | +-arr1#7 := Literal(type=ARRAY<INT64>, value=[0])
            |   | +-arr1_len#8 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
            |   | |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#7)
            |   | |   +-Literal(type=INT64, value=0)
            |   | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
            |   | |     +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#7)
            |   | +-mode#9 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   +-FunctionCall(ZetaSQL:$is_null(ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> ENUM<ARRAY_ZIP_MODE>)
            |   | |   | +-Literal(type=STRING, value="UNNEST does not allow NULL mode argument")
            |   | |   +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=PAD)
            |   | +-strict_check#10 :=
            |   | | +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   | |   +-FunctionCall(ZetaSQL:$and(repeated(2) BOOL) -> BOOL)
            |   | |   | +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   | |   | | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#9)
            |   | |   | | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=STRICT)
            |   | |   | +-FunctionCall(ZetaSQL:$not_equal(INT64, INT64) -> BOOL)
            |   | |   |   +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#6)
            |   | |   |   | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#8)
            |   | |   |   +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr0_len#6)
            |   | |   |     +-ColumnRef(type=INT64, column=$with_expr.arr1_len#8)
            |   | |   +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
            |   | |   | +-Literal(type=STRING, value="Unnested arrays under STRICT mode must have equal lengths")
            |   | |   +-Literal(type=INT64, value=NULL)
            |   | +-result_len#11 :=
            |   |   +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:$equal(ENUM<ARRAY_ZIP_MODE>, ENUM<ARRAY_ZIP_MODE>) -> BOOL)
            |   |     | +-ColumnRef(type=ENUM<ARRAY_ZIP_MODE>, column=$with_expr.mode#9)
            |   |     | +-Literal(type=ENUM<ARRAY_ZIP_MODE>, value=TRUNCATE)
            |   |     +-FunctionCall(ZetaSQL:least(repeated(2) INT64) -> INT64)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr0_len#6)
            |   |     | +-ColumnRef(type=INT64, column=$with_expr.arr1_len#8)
            |   |     +-FunctionCall(ZetaSQL:greatest(repeated(2) INT64) -> INT64)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr0_len#6)
            |   |       +-ColumnRef(type=INT64, column=$with_expr.arr1_len#8)
            |   +-expr=
            |     +-SubqueryExpr
            |       +-type=ARRAY<STRUCT<arr0 INT64, arr1 INT64, offset INT64>>
            |       +-subquery_type=ARRAY
            |       +-parameter_list=
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#5)
            |       | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#7)
            |       | +-ColumnRef(type=INT64, column=$with_expr.result_len#11)
            |       +-subquery=
            |         +-ProjectScan
            |           +-column_list=[$make_struct.$struct#17]
            |           +-is_ordered=TRUE
            |           +-expr_list=
            |           | +-$struct#17 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>
            |           |     +-field_list=
            |           |       +-ColumnRef(type=INT64, column=$array.arr0#12)
            |           |       +-ColumnRef(type=INT64, column=$array.arr1#14)
            |           |       +-ColumnRef(type=INT64, column=$full_join.offset#16)
            |           +-input_scan=
            |             +-OrderByScan
            |               +-column_list=[$array.arr0#12, $array_offset.offset#13, $array.arr1#14, $array_offset.offset#15, $full_join.offset#16]
            |               +-is_ordered=TRUE
            |               +-input_scan=
            |               | +-FilterScan
            |               |   +-column_list=[$array.arr0#12, $array_offset.offset#13, $array.arr1#14, $array_offset.offset#15, $full_join.offset#16]
            |               |   +-input_scan=
            |               |   | +-ProjectScan
            |               |   |   +-column_list=[$array.arr0#12, $array_offset.offset#13, $array.arr1#14, $array_offset.offset#15, $full_join.offset#16]
            |               |   |   +-expr_list=
            |               |   |   | +-offset#16 :=
            |               |   |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |   |     +-ColumnRef(type=INT64, column=$array_offset.offset#15)
            |               |   |   +-input_scan=
            |               |   |     +-JoinScan
            |               |   |       +-column_list=[$array.arr0#12, $array_offset.offset#13, $array.arr1#14, $array_offset.offset#15]
            |               |   |       +-join_type=FULL
            |               |   |       +-left_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr0#12, $array_offset.offset#13]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr0#5, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr0#12]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#13)
            |               |   |       +-right_scan=
            |               |   |       | +-ArrayScan
            |               |   |       |   +-column_list=[$array.arr1#14, $array_offset.offset#15]
            |               |   |       |   +-array_expr_list=
            |               |   |       |   | +-ColumnRef(type=ARRAY<INT64>, column=$with_expr.arr1#7, is_correlated=TRUE)
            |               |   |       |   +-element_column_list=[$array.arr1#14]
            |               |   |       |   +-array_offset_column=
            |               |   |       |     +-ColumnHolder(column=$array_offset.offset#15)
            |               |   |       +-join_expr=
            |               |   |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#13)
            |               |   |           +-ColumnRef(type=INT64, column=$array_offset.offset#15)
            |               |   +-filter_expr=
            |               |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            |               |       +-ColumnRef(type=INT64, column=$full_join.offset#16)
            |               |       +-ColumnRef(type=INT64, column=$with_expr.result_len#11, is_correlated=TRUE)
            |               +-order_by_item_list=
            |                 +-OrderByItem
            |                   +-column_ref=
            |                     +-ColumnRef(type=INT64, column=$full_join.offset#16)
            +-element_column_list=[$array.$with_expr_element#18]
            +-join_expr=
            | +-WithExpr
            |   +-type=BOOL
            |   +-assignment_list=
            |   | +-$with_expr_field#19 :=
            |   | | +-GetStructField
            |   | |   +-type=INT64
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#18)
            |   | |   +-field_idx=0
            |   | +-$with_expr_field#20 :=
            |   | | +-GetStructField
            |   | |   +-type=INT64
            |   | |   +-expr=
            |   | |   | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#18)
            |   | |   +-field_idx=1
            |   | +-$with_expr_field#21 :=
            |   |   +-GetStructField
            |   |     +-type=INT64
            |   |     +-expr=
            |   |     | +-ColumnRef(type=STRUCT<arr0 INT64, arr1 INT64, offset INT64>, column=$array.$with_expr_element#18)
            |   |     +-field_idx=2
            |   +-expr=
            |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       | +-ColumnRef(type=INT64, column=$array.$with_expr_field#19)
            |       | +-ColumnRef(type=INT64, column=$array.$with_expr_field#20)
            |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |         +-ColumnRef(type=INT64, column=$array.$with_expr_field#21)
            |         +-Literal(type=INT64, value=3)
            +-is_outer=TRUE
