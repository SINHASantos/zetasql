[default show_sqlbuilder_output]
[default no_show_resolved_ast]
[default language_features=MAXIMUM,+ARRAY_ZIP,+INLINE_LAMBDA_ARGUMENT,+NAMED_ARGUMENTS]
# Two-array no arrays have argument alias
SELECT ARRAY_ZIP([1, 2], ['s', 't'])
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Two-array some arrays have aliases
# Due to b/308019972, the argument name `mode` is not restored.
SELECT ARRAY_ZIP([1, 2], ['s', 't'] AS alias, mode => 'PAD')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"] AS alias, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"] AS alias, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Two-array all arrays have aliases
SELECT ARRAY_ZIP([1, 2] AS alias_0, ['s', 't'] AS alias_1, mode => 'TRUNCATE')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2] AS alias_0, ARRAY< STRING >["s", "t"] AS alias_1, mode  => CAST("TRUNCATE" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2] AS alias_0, ARRAY< STRING >["s", "t"] AS alias_1, mode  => CAST("TRUNCATE" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Two-array lambda signature, lambda argument name is provided and named argument order is swapped
# Due to b/308019972, the argument names are not restored.
SELECT ARRAY_ZIP([1, 2], ['s', 't'], transformation => (e0, e1) -> 1, mode => 'STRICT')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], (a_2, a_3) -> 1, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], (a_2, a_3) -> 1, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Two-array lambda signature lambda name is not provided.
SELECT ARRAY_ZIP([1, 2], ['s', 't'], (e0, e1) -> 1, mode => 'PAD')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], (a_2, a_3) -> 1, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], (a_2, a_3) -> 1, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Three-array no arrays have argument alias
SELECT ARRAY_ZIP([1, 2], ['s', 't'], [TRUE], mode => 'PAD')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Three-array some arrays have aliases
SELECT ARRAY_ZIP([1, 2], ['s', 't'] AS alias, [TRUE], mode => 'TRUNCATE')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"] AS alias, ARRAY< BOOL >[true], mode  => CAST("TRUNCATE" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"] AS alias, ARRAY< BOOL >[true], mode  => CAST("TRUNCATE" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Three-array all arrays have aliases
SELECT ARRAY_ZIP([1, 2] AS alias_0, ['s', 't'] AS alias_1, [TRUE] AS alias_2, mode => 'STRICT')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2] AS alias_0, ARRAY< STRING >["s", "t"] AS alias_1, ARRAY< BOOL >[true] AS alias_2,
    mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2] AS alias_0, ARRAY< STRING >["s", "t"] AS alias_1, ARRAY< BOOL >[true] AS alias_2,
    mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Three-array lambda signature, lambda argument name is provided
SELECT ARRAY_ZIP([1, 2], ['s', 't'], [TRUE], transformation => (e0, e1, e2) -> 1)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], (a_2, a_3, a_4) -> 1,
    mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], (a_2, a_3, a_4) -> 1,
    mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Three-array lambda signature lambda name is not provided.
SELECT ARRAY_ZIP([1, 2], ['s', 't'], [TRUE], (e0, e1, e2) -> 1, mode => 'PAD')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], (a_2, a_3, a_4) -> 1,
    mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], (a_2, a_3, a_4) -> 1,
    mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Four-array no arrays have argument alias
SELECT ARRAY_ZIP([1, 2], ['s', 't'], [TRUE], [b''], mode => 'TRUNCATE')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], ARRAY< BYTES >[b""],
    mode  => CAST("TRUNCATE" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], ARRAY< BYTES >[b""],
    mode  => CAST("TRUNCATE" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Four-array some arrays have aliases
SELECT ARRAY_ZIP([1, 2], ['s', 't'] AS alias, [TRUE], [b''], mode => 'STRICT')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"] AS alias, ARRAY< BOOL >[true], ARRAY< BYTES >
    [b""], mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"] AS alias, ARRAY< BOOL >[true], ARRAY< BYTES >
    [b""], mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Four-array all arrays have aliases
SELECT ARRAY_ZIP([1, 2] AS alias_0, ['s', 't'] AS alias_1, [TRUE] AS alias_2, [b''] AS alias_3)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2] AS alias_0, ARRAY< STRING >["s", "t"] AS alias_1, ARRAY< BOOL >[true] AS alias_2,
    ARRAY< BYTES >[b""] AS alias_3, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2] AS alias_0, ARRAY< STRING >["s", "t"] AS alias_1, ARRAY< BOOL >[true] AS alias_2,
    ARRAY< BYTES >[b""] AS alias_3, mode  => CAST("STRICT" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Four-array lambda signature, lambda argument name is provided and named argument order is swapped
SELECT ARRAY_ZIP([1, 2], ['s', 't'], [TRUE], [b''], transformation => (e0, e1, e2, e3) -> 1, mode => 'PAD')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], ARRAY< BYTES >[b""],
    (a_2, a_3, a_4, a_5) -> 1, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], ARRAY< BYTES >[b""],
    (a_2, a_3, a_4, a_5) -> 1, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;
==

# Four-array lambda signature lambda name is not provided.
SELECT ARRAY_ZIP([1, 2], ['s', 't'], [TRUE], [b''], (e0, e1, e2, e3) -> 1, mode => 'PAD')
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], ARRAY< BYTES >[b""],
    (a_2, a_3, a_4, a_5) -> 1, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_ZIP(ARRAY< INT64 >[1, 2], ARRAY< STRING >["s", "t"], ARRAY< BOOL >[true], ARRAY< BYTES >[b""],
    (a_2, a_3, a_4, a_5) -> 1, mode  => CAST("PAD" AS ARRAY_ZIP_MODE)) AS a_1;
