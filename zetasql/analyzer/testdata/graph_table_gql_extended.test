[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_RETURN_EXTENSIONS]
[default no_test_extract_table_names]
# No unparser due to SQLBuilder visitor not implemented for GraphMakeElement

# Return some columns from a graph table.
select gt.* from
graph_table(aml
  match (n)
  return n.name, 1 AS number, CONCAT("str", "_suffix") AS concat_str
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
| +-$graph_table.number#3 AS number [INT64]
| +-$graph_table.concat_str#4 AS concat_str [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#2, number#3, concat_str#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#2, number#3, concat_str#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                    +-expr_list=
                    | +-name#2 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-number#3 := Literal(type=INT64, value=1)
                    | +-concat_str#4 :=
                    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                    |     +-Literal(type=STRING, value="str")
                    |     +-Literal(type=STRING, value="_suffix")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Accessing an undefined element returns error
select gt.* from graph_table(aml match () return n.Id) as gt
--
ERROR: Unrecognized name: n [at 1:50]
select gt.* from graph_table(aml match () return n.Id) as gt
                                                 ^
==

# Accessing a property not defined in the graph returns error.
select gt.* from graph_table(aml match (n) return n.unknown_property) as gt
--
ERROR: Property unknown_property is not exposed by element type GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING> [at 1:53]
select gt.* from graph_table(aml match (n) return n.unknown_property) as gt
                                                    ^
==

# Accessing a property not exposed by the graph element but defined in the graph
# returns an error.
select gt.* from graph_table(aml match (n) return n.accountId) as gt
--
ERROR: Property accountId is not exposed by element type GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING> [at 1:53]
select gt.* from graph_table(aml match (n) return n.accountId) as gt
                                                    ^
==

# Conflicting column names are reported as error.
select gt.* from graph_table(aml match () return 1 AS Id, 2 AS Id) as gt
--
ERROR: Ambiguous name: Id [at 1:50]
select gt.* from graph_table(aml match () return 1 AS Id, 2 AS Id) as gt
                                                 ^
==

# COlUMNS must have inferred or explicit names.
select gt.* from graph_table(aml match () return 1) as gt
--
ERROR: A name must be explicitly defined for this column [at 1:50]
select gt.* from graph_table(aml match () return 1) as gt
                                                 ^
==

# Graph element cannot be returned as an output column.
select gt.* from graph_table(aml match (n) return n) as gt
--
ERROR: Returning graph-typed column is not supported [at 1:51]
select gt.* from graph_table(aml match (n) return n) as gt
                                                  ^
==

# Correlated column in graph_table return operator.
select 1 from KeyValue kv where exists (
  select 1 from graph_table (
    aml match ()
    return (1 + kv.Key) AS new_key
  )
)
--


QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#5]
                +-expr_list=
                | +-$col1#5 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=[$graph_table.new_key#4]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=[$graph_table.new_key#4]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=[$graph_table.new_key#4]
                            +-scan_list=
                              +-GraphScan
                              | +-column_list=[$element_table.$element1#3]
                              | +-input_scan_list=
                              | | +-GraphPathScan
                              | |   +-column_list=[$element_table.$element1#3]
                              | |   +-input_scan_list=
                              | |   | +-GraphNodeScan
                              | |   |   +-column_list=[$element_table.$element1#3]
                              | |   |   +-label_expr=
                              | |   |   | +-GraphLabelNaryExpr
                              | |   |   |   +-op=OR
                              | |   |   |   +-operand_list=
                              | |   |   |     +-GraphWildCardLabel
                              | |   |   |     +-GraphLabelNaryExpr
                              | |   |   |       +-op=NOT
                              | |   |   |       +-operand_list=
                              | |   |   |         +-GraphWildCardLabel
                              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                              | |   +-head=$element_table.$element1#3
                              | |   +-tail=$element_table.$element1#3
                              | +-input_scan=
                              |   +-SingleRowScan
                              +-ProjectScan
                                +-column_list=[$graph_table.new_key#4]
                                +-expr_list=
                                | +-new_key#4 :=
                                |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                                |     +-Literal(type=INT64, value=1)
                                |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                                +-input_scan=
                                  +-GraphRefScan(column_list=[$element_table.$element1#3])
==

# Correlated subquery in graph_table columns clause.
select gt.c_value from graph_table(
  aml match (n)
  return
    (select kv.value from KeyValue kv where kv.Key = n.id limit 1) AS c_value
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.c_value#4 AS c_value [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.c_value#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.c_value#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.c_value#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.c_value#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.c_value#4]
                    +-expr_list=
                    | +-c_value#4 :=
                    |   +-SubqueryExpr
                    |     +-type=STRING
                    |     +-subquery_type=SCALAR
                    |     +-parameter_list=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-subquery=
                    |       +-LimitOffsetScan
                    |         +-column_list=[KeyValue.Value#3]
                    |         +-input_scan=
                    |         | +-ProjectScan
                    |         |   +-column_list=[KeyValue.Value#3]
                    |         |   +-input_scan=
                    |         |     +-FilterScan
                    |         |       +-column_list=KeyValue.[Key#2, Value#3]
                    |         |       +-input_scan=
                    |         |       | +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1], alias="kv")
                    |         |       +-filter_expr=
                    |         |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                    |         |           +-ColumnRef(type=INT64, column=KeyValue.Key#2)
                    |         |           +-GraphGetElementProperty
                    |         |             +-type=INT64
                    |         |             +-expr=
                    |         |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
                    |         |             +-property=id(INT64)
                    |         +-limit=
                    |           +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])
==

# Correlated graph subquery in graph_table return operator
select inner_name from graph_table(
  aml match (n)
  return
    (select gt_inner.name
      from graph_table (
        aml match (m)
        columns('static_name' AS name)
      ) gt_inner
      limit 1
    ) AS inner_name
)
--

QueryStmt
+-output_column_list=
| +-$graph_table.inner_name#4 AS inner_name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.inner_name#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.inner_name#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.inner_name#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.inner_name#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.inner_name#4]
                    +-expr_list=
                    | +-inner_name#4 :=
                    |   +-SubqueryExpr
                    |     +-type=STRING
                    |     +-subquery_type=SCALAR
                    |     +-subquery=
                    |       +-LimitOffsetScan
                    |         +-column_list=[$graph_table.name#3]
                    |         +-input_scan=
                    |         | +-ProjectScan
                    |         |   +-column_list=[$graph_table.name#3]
                    |         |   +-input_scan=
                    |         |     +-GraphTableScan
                    |         |       +-column_list=[$graph_table.name#3]
                    |         |       +-property_graph=aml
                    |         |       +-input_scan=
                    |         |       | +-GraphScan
                    |         |       |   +-column_list=[$element_table.m#2]
                    |         |       |   +-input_scan_list=
                    |         |       |     +-GraphPathScan
                    |         |       |       +-column_list=[$element_table.m#2]
                    |         |       |       +-input_scan_list=
                    |         |       |       | +-GraphNodeScan
                    |         |       |       |   +-column_list=[$element_table.m#2]
                    |         |       |       |   +-label_expr=
                    |         |       |       |   | +-GraphLabelNaryExpr
                    |         |       |       |   |   +-op=OR
                    |         |       |       |   |   +-operand_list=
                    |         |       |       |   |     +-GraphWildCardLabel
                    |         |       |       |   |     +-GraphLabelNaryExpr
                    |         |       |       |   |       +-op=NOT
                    |         |       |       |   |       +-operand_list=
                    |         |       |       |   |         +-GraphWildCardLabel
                    |         |       |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    |         |       |       +-head=$element_table.m#2
                    |         |       |       +-tail=$element_table.m#2
                    |         |       +-shape_expr_list=
                    |         |         +-name#3 := Literal(type=STRING, value="static_name")
                    |         +-limit=
                    |           +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])
==

# Join between graph tables and non-graph tables.
select gt1.num, gt2.str FROM
graph_table(
  aml match (n)
  return 1 AS num
) gt1
JOIN KeyValue kv
ON kv.key = gt1.num
JOIN
graph_table(
  aml match ()
  columns('string' AS str)
) gt2
ON gt2.str = kv.value
--
QueryStmt
+-output_column_list=
| +-$graph_table.num#2 AS num [INT64]
| +-$graph_table.str#6 AS str [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[num#2, str#6]
    +-input_scan=
      +-JoinScan
        +-column_list=[$graph_table.num#2, KeyValue.Key#3, KeyValue.Value#4, $graph_table.str#6]
        +-left_scan=
        | +-JoinScan
        |   +-column_list=[$graph_table.num#2, KeyValue.Key#3, KeyValue.Value#4]
        |   +-left_scan=
        |   | +-GraphTableScan
        |   |   +-column_list=[$graph_table.num#2]
        |   |   +-property_graph=aml
        |   |   +-input_scan=
        |   |     +-GraphLinearScan
        |   |       +-column_list=[$graph_table.num#2]
        |   |       +-scan_list=
        |   |         +-GraphLinearScan
        |   |           +-column_list=[$graph_table.num#2]
        |   |           +-scan_list=
        |   |             +-GraphScan
        |   |             | +-column_list=[$element_table.n#1]
        |   |             | +-input_scan_list=
        |   |             | | +-GraphPathScan
        |   |             | |   +-column_list=[$element_table.n#1]
        |   |             | |   +-input_scan_list=
        |   |             | |   | +-GraphNodeScan
        |   |             | |   |   +-column_list=[$element_table.n#1]
        |   |             | |   |   +-label_expr=
        |   |             | |   |   | +-GraphLabelNaryExpr
        |   |             | |   |   |   +-op=OR
        |   |             | |   |   |   +-operand_list=
        |   |             | |   |   |     +-GraphWildCardLabel
        |   |             | |   |   |     +-GraphLabelNaryExpr
        |   |             | |   |   |       +-op=NOT
        |   |             | |   |   |       +-operand_list=
        |   |             | |   |   |         +-GraphWildCardLabel
        |   |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |   |             | |   +-head=$element_table.n#1
        |   |             | |   +-tail=$element_table.n#1
        |   |             | +-input_scan=
        |   |             |   +-SingleRowScan
        |   |             +-ProjectScan
        |   |               +-column_list=[$graph_table.num#2]
        |   |               +-expr_list=
        |   |               | +-num#2 := Literal(type=INT64, value=1)
        |   |               +-input_scan=
        |   |                 +-GraphRefScan(column_list=[$element_table.n#1])
        |   +-right_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="kv")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        |       +-ColumnRef(type=INT64, column=$graph_table.num#2)
        +-right_scan=
        | +-GraphTableScan
        |   +-column_list=[$graph_table.str#6]
        |   +-property_graph=aml
        |   +-input_scan=
        |   | +-GraphScan
        |   |   +-column_list=[$element_table.$element1#5]
        |   |   +-input_scan_list=
        |   |     +-GraphPathScan
        |   |       +-column_list=[$element_table.$element1#5]
        |   |       +-input_scan_list=
        |   |       | +-GraphNodeScan
        |   |       |   +-column_list=[$element_table.$element1#5]
        |   |       |   +-label_expr=
        |   |       |   | +-GraphLabelNaryExpr
        |   |       |   |   +-op=OR
        |   |       |   |   +-operand_list=
        |   |       |   |     +-GraphWildCardLabel
        |   |       |   |     +-GraphLabelNaryExpr
        |   |       |   |       +-op=NOT
        |   |       |   |       +-operand_list=
        |   |       |   |         +-GraphWildCardLabel
        |   |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |   |       +-head=$element_table.$element1#5
        |   |       +-tail=$element_table.$element1#5
        |   +-shape_expr_list=
        |     +-str#6 := Literal(type=STRING, value="string")
        +-join_expr=
          +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=$graph_table.str#6)
            +-ColumnRef(type=STRING, column=KeyValue.Value#4)
==

# single path matched with match operator

select gt.* from
graph_table(aml
  match (n:Person)
  return n.name, 1 AS number, CONCAT("str", "_suffix") AS concat_str
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
| +-$graph_table.number#3 AS number [INT64]
| +-$graph_table.concat_str#4 AS concat_str [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#2, number#3, concat_str#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#2, number#3, concat_str#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                    +-expr_list=
                    | +-name#2 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-number#3 := Literal(type=INT64, value=1)
                    | +-concat_str#4 :=
                    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                    |     +-Literal(type=STRING, value="str")
                    |     +-Literal(type=STRING, value="_suffix")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])
==

# Empty scan produced from graph pattern
select 1 from KeyValue kv where exists (
  select 1 from graph_table (
    aml match (n:Person&Account WHERE kv.key IS NOT NULL)
    return (1 + kv.Key) AS new_key
  )
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#6 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#6]
    +-expr_list=
    | +-$col1#6 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv")
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#5]
                +-expr_list=
                | +-$col1#5 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=[$graph_table.new_key#4]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=[$graph_table.new_key#4]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=[$graph_table.new_key#4]
                            +-scan_list=
                              +-GraphScan
                              | +-column_list=[$element_table.n#3]
                              | +-input_scan_list=
                              | | +-GraphPathScan
                              | |   +-column_list=[$element_table.n#3]
                              | |   +-input_scan_list=
                              | |   | +-GraphNodeScan
                              | |   |   +-column_list=[$element_table.n#3]
                              | |   |   +-filter_expr=
                              | |   |   | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
                              | |   |   |   +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
                              | |   |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              | |   |   +-label_expr=
                              | |   |   | +-GraphLabelNaryExpr
                              | |   |   |   +-parse_location=88-102
                              | |   |   |   +-op=AND
                              | |   |   |   +-operand_list=
                              | |   |   |     +-GraphLabel(parse_location=88-94, label=aml.Person)
                              | |   |   |     +-GraphLabel(parse_location=95-102, label=aml.Account)
                              | |   |   +-target_element_table_list=[]
                              | |   +-head=$element_table.n#3
                              | |   +-tail=$element_table.n#3
                              | +-input_scan=
                              |   +-SingleRowScan
                              +-ProjectScan
                                +-column_list=[$graph_table.new_key#4]
                                +-expr_list=
                                | +-new_key#4 :=
                                |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                                |     +-Literal(type=INT64, value=1)
                                |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                                +-input_scan=
                                  +-GraphRefScan(column_list=[$element_table.n#3])

==

# Linear composition: no MATCH
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    RETURN
      2 AS one,
      1 AS two
    NEXT
    RETURN
      1 AS one,
      1 + 1 AS two
  ) AS g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#3 AS one [INT64]
| +-$graph_table.two#4 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[one#3, two#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[one#3, two#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[one#3, two#4]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[one#1, two#2]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[one#1, two#2]
              |     +-expr_list=
              |     | +-one#1 := Literal(type=INT64, value=2)
              |     | +-two#2 := Literal(type=INT64, value=1)
              |     +-input_scan=
              |       +-SingleRowScan
              +-GraphLinearScan
                +-column_list=$graph_table.[one#3, two#4]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[one#3, two#4]
                    +-expr_list=
                    | +-one#3 := Literal(type=INT64, value=1)
                    | +-two#4 :=
                    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[one#1, two#2])

==

# All property reference is not allowed.
select * from
  graph_table(aml
    MATCH (n) -[:PersonOwnAccount]-> (m)
    MATCH (n), (m)
    RETURN n.*, m.*
  ) g1
--

ERROR: Syntax error: Unexpected "*" [at 5:14]
    RETURN n.*, m.*
             ^

==

# subpath pattern

select gt.* from
graph_table(aml
  match (n:Person)(-[e]->)(m)
  return 1 as one
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#6 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, $element1#2, e#3, $element2#4, m#5]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, $element1#2, e#3, $element2#4, m#5]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$element_table.[$element1#2, e#3, $element2#4]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$element_table.$element1#2
                  | |   | | +-tail=$element_table.$element2#4
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#5]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#5
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#6]
                    +-expr_list=
                    | +-one#6 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, $element1#2, e#3, $element2#4, m#5])
==

# Correlated joins.
select * from
  graph_table(aml
    MATCH (a)
    RETURN 2 as two
    NEXT
    MATCH (m) -[e:Transfer]-> (n)
    MATCH (a) -[:Transfer]-> (n) WHERE a.id > n.id
    MATCH (g) -[:Transfer]->(m)  WHERE g.id > a.id AND e.targetAccountId > 0
    MATCH (n) -> (n)
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid, 1 AS e, two
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.aid#15 AS aid [INT64]
| +-$graph_table.mid#16 AS mid [INT64]
| +-$graph_table.nid#17 AS nid [INT64]
| +-$graph_table.e#18 AS e [INT64]
| +-$graph_table.two#19 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, two#19]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, two#19]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, two#19]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=[$graph_table.two#2]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.a#1]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.a#1
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=[$graph_table.two#2]
              |     +-expr_list=
              |     | +-two#2 := Literal(type=INT64, value=2)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$element_table.a#1])
              +-GraphLinearScan
                +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, two#19]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.two#2, $element_table.m#3, $element_table.e#4, $element_table.n#5]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[m#3, e#4, n#5]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.m#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=93-101, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#5]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.m#3
                  | |   +-tail=$element_table.n#5
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.two#2])
                  +-GraphScan
                  | +-column_list=[$graph_table.two#2, $element_table.m#3, $element_table.e#4, $element_table.n#5, $element_table.a#6, $element_table.$element1#7, $element_table.n#8]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#6, $element1#7, n#8]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#6]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#7]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=126-134, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#8]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#6
                  | |   +-tail=$element_table.n#8
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#8)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#5)
                  | |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=INT64
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#6)
                  | |     | +-property=id(INT64)
                  | |     +-GraphGetElementProperty
                  | |       +-type=INT64
                  | |       +-expr=
                  | |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#8)
                  | |       +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.two#2, $element_table.m#3, $element_table.e#4, $element_table.n#5])
                  +-GraphScan
                  | +-column_list=[$graph_table.two#2, $element_table.m#3, $element_table.e#4, $element_table.a#6, $element_table.$element1#7, $element_table.n#8, $element_table.g#9, $element_table.$element2#10, $element_table.m#11]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[g#9, $element2#10, m#11]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.g#9]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element2#10]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=177-185, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#11]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.g#9
                  | |   +-tail=$element_table.m#11
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                  | |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  | |     | +-GraphGetElementProperty
                  | |     | | +-type=INT64
                  | |     | | +-expr=
                  | |     | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.g#9)
                  | |     | | +-property=id(INT64)
                  | |     | +-GraphGetElementProperty
                  | |     |   +-type=INT64
                  | |     |   +-expr=
                  | |     |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#6)
                  | |     |   +-property=id(INT64)
                  | |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  | |       +-GraphGetElementProperty
                  | |       | +-type=INT64
                  | |       | +-expr=
                  | |       | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#4)
                  | |       | +-property=targetAccountId(INT64)
                  | |       +-Literal(type=INT64, value=0)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.two#2, $element_table.m#3, $element_table.e#4, $element_table.a#6, $element_table.$element1#7, $element_table.n#8])
                  +-GraphScan
                  | +-column_list=[$graph_table.two#2, $element_table.e#4, $element_table.a#6, $element_table.$element1#7, $element_table.n#8, $element_table.g#9, $element_table.$element2#10, $element_table.m#11, $element_table.n#12, $element_table.$element3#13, $element_table.n#14]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#12, $element3#13, n#14]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#12]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=AND
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |     | +-op=OR
                  | |   | | |     | +-operand_list=
                  | |   | | |     |   +-GraphWildCardLabel
                  | |   | | |     |   +-GraphLabelNaryExpr
                  | |   | | |     |     +-op=NOT
                  | |   | | |     |     +-operand_list=
                  | |   | | |     |       +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=OR
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | |         +-GraphLabelNaryExpr
                  | |   | | |           +-op=NOT
                  | |   | | |           +-operand_list=
                  | |   | | |             +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element3#13]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#14]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=AND
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |     | +-op=OR
                  | |   |   |     | +-operand_list=
                  | |   |   |     |   +-GraphWildCardLabel
                  | |   |   |     |   +-GraphLabelNaryExpr
                  | |   |   |     |     +-op=NOT
                  | |   |   |     |     +-operand_list=
                  | |   |   |     |       +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=OR
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   |         +-GraphLabelNaryExpr
                  | |   |   |           +-op=NOT
                  | |   |   |           +-operand_list=
                  | |   |   |             +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-filter_expr=
                  | |   | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#12)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#14)
                  | |   +-head=$element_table.n#12
                  | |   +-tail=$element_table.n#14
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#12)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#8)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.two#2, $element_table.e#4, $element_table.a#6, $element_table.$element1#7, $element_table.n#8, $element_table.g#9, $element_table.$element2#10, $element_table.m#11])
                  +-ProjectScan
                    +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, two#19]
                    +-expr_list=
                    | +-aid#15 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#6)
                    | |   +-property=id(INT64)
                    | +-mid#16 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11)
                    | |   +-property=id(INT64)
                    | +-nid#17 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#12)
                    | |   +-property=id(INT64)
                    | +-e#18 := Literal(type=INT64, value=1)
                    | +-two#19 := ColumnRef(type=INT64, column=$graph_table.two#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.two#2, $element_table.e#4, $element_table.a#6, $element_table.$element1#7, $element_table.g#9, $element_table.$element2#10, $element_table.m#11, $element_table.n#12, $element_table.$element3#13])
==

# Correlated join across MATCHes.
select * from
  graph_table(aml
    MATCH (m) -[:Transfer]-> (n)
    MATCH (a) -[:Transfer]-> (x),  (x) -[:Transfer]-> (n) WHERE a.id > n.id
    MATCH (g) -[:Transfer]->(m) WHERE a.id > m.id AND g.id > m.id
    MATCH (b) -[:Transfer]->(c) WHERE b.id = c.id   # A local reference here is also put into the join condition
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.aid#16 AS aid [INT64]
| +-$graph_table.mid#17 AS mid [INT64]
| +-$graph_table.nid#18 AS nid [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[aid#16, mid#17, nid#18]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[aid#16, mid#17, nid#18]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[aid#16, mid#17, nid#18]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[aid#16, mid#17, nid#18]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[m#1, $element1#2, n#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[m#1, $element1#2, n#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.m#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=49-57, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.m#1
                  | |   +-tail=$element_table.n#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[m#1, $element1#2, n#3, a#4, $element2#5, x#6, x#7, $element3#8, n#9]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | | | +-column_list=$element_table.[a#4, $element2#5, x#6]
                  | | | +-input_scan_list=
                  | | | | +-GraphNodeScan
                  | | | | | +-column_list=[$element_table.a#4]
                  | | | | | +-label_expr=
                  | | | | | | +-GraphLabelNaryExpr
                  | | | | | |   +-op=OR
                  | | | | | |   +-operand_list=
                  | | | | | |     +-GraphWildCardLabel
                  | | | | | |     +-GraphLabelNaryExpr
                  | | | | | |       +-op=NOT
                  | | | | | |       +-operand_list=
                  | | | | | |         +-GraphWildCardLabel
                  | | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | | | | +-GraphEdgeScan
                  | | | | | +-column_list=[$element_table.$element2#5]
                  | | | | | +-label_expr=
                  | | | | | | +-GraphLabel(parse_location=82-90, label=aml.Transfer)
                  | | | | | +-target_element_table_list=[aml.Transfer]
                  | | | | | +-orientation=RIGHT
                  | | | | +-GraphNodeScan
                  | | | |   +-column_list=[$element_table.x#6]
                  | | | |   +-label_expr=
                  | | | |   | +-GraphLabelNaryExpr
                  | | | |   |   +-op=AND
                  | | | |   |   +-operand_list=
                  | | | |   |     +-GraphLabelNaryExpr
                  | | | |   |     | +-op=OR
                  | | | |   |     | +-operand_list=
                  | | | |   |     |   +-GraphWildCardLabel
                  | | | |   |     |   +-GraphLabelNaryExpr
                  | | | |   |     |     +-op=NOT
                  | | | |   |     |     +-operand_list=
                  | | | |   |     |       +-GraphWildCardLabel
                  | | | |   |     +-GraphLabelNaryExpr
                  | | | |   |       +-op=OR
                  | | | |   |       +-operand_list=
                  | | | |   |         +-GraphWildCardLabel
                  | | | |   |         +-GraphLabelNaryExpr
                  | | | |   |           +-op=NOT
                  | | | |   |           +-operand_list=
                  | | | |   |             +-GraphWildCardLabel
                  | | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | | | +-head=$element_table.a#4
                  | | | +-tail=$element_table.x#6
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[x#7, $element3#8, n#9]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.x#7]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=AND
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |     | +-op=OR
                  | |   | | |     | +-operand_list=
                  | |   | | |     |   +-GraphWildCardLabel
                  | |   | | |     |   +-GraphLabelNaryExpr
                  | |   | | |     |     +-op=NOT
                  | |   | | |     |     +-operand_list=
                  | |   | | |     |       +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=OR
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | |         +-GraphLabelNaryExpr
                  | |   | | |           +-op=NOT
                  | |   | | |           +-operand_list=
                  | |   | | |             +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element3#8]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=107-115, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#9]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.x#7
                  | |   +-tail=$element_table.n#9
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#6)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#7)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#3)
                  | |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=INT64
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#4)
                  | |     | +-property=id(INT64)
                  | |     +-GraphGetElementProperty
                  | |       +-type=INT64
                  | |       +-expr=
                  | |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
                  | |       +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[m#1, $element1#2, n#3])
                  +-GraphScan
                  | +-column_list=$element_table.[m#1, $element1#2, a#4, $element2#5, x#6, $element3#8, n#9, g#10, $element4#11, m#12]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[g#10, $element4#11, m#12]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.g#10]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element4#11]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=158-166, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#12]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.g#10
                  | |   +-tail=$element_table.m#12
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#1)
                  | |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  | |     | +-GraphGetElementProperty
                  | |     | | +-type=INT64
                  | |     | | +-expr=
                  | |     | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#4)
                  | |     | | +-property=id(INT64)
                  | |     | +-GraphGetElementProperty
                  | |     |   +-type=INT64
                  | |     |   +-expr=
                  | |     |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
                  | |     |   +-property=id(INT64)
                  | |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  | |       +-GraphGetElementProperty
                  | |       | +-type=INT64
                  | |       | +-expr=
                  | |       | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.g#10)
                  | |       | +-property=id(INT64)
                  | |       +-GraphGetElementProperty
                  | |         +-type=INT64
                  | |         +-expr=
                  | |         | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
                  | |         +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[m#1, $element1#2, a#4, $element2#5, x#6, $element3#8, n#9])
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#2, a#4, $element2#5, x#6, $element3#8, n#9, g#10, $element4#11, m#12, b#13, $element5#14, c#15]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[b#13, $element5#14, c#15]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#13]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element5#14]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=224-232, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#15]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.b#13
                  | |   +-tail=$element_table.c#15
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   +-GraphGetElementProperty
                  | |   | +-type=INT64
                  | |   | +-expr=
                  | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#13)
                  | |   | +-property=id(INT64)
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.c#15)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[$element1#2, a#4, $element2#5, x#6, $element3#8, n#9, g#10, $element4#11, m#12])
                  +-ProjectScan
                    +-column_list=$graph_table.[aid#16, mid#17, nid#18]
                    +-expr_list=
                    | +-aid#16 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#4)
                    | |   +-property=id(INT64)
                    | +-mid#17 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
                    | |   +-property=id(INT64)
                    | +-nid#18 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#2, a#4, $element2#5, x#6, $element3#8, n#9, g#10, $element4#11, m#12, b#13, $element5#14, c#15])
==

# Element pattern non-local reference is not allowed.
select * from
  graph_table(aml
    MATCH ((a) -[:Transfer]-> (n))
    MATCH (g) -[:Transfer]->(m WHERE a.id > m.id)
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid
  ) g1
--

ERROR: Name 'a', defined in the previous statement, can only be referenced in the outermost WHERE clause of MATCH [at 4:38]
    MATCH (g) -[:Transfer]->(m WHERE a.id > m.id)
                                     ^
==

# Redeclaring relational column g is not allowed.

select * from
  graph_table(aml
    RETURN 1 AS g
    NEXT
    MATCH ((a) -[:Transfer]-> (n))
    MATCH (g) -[:Transfer]->(m) WHERE a.id > m.id
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid
  ) g1

--
ERROR: `g` is not a graph element column and cannot be redeclared [at 6:11]
    MATCH (g) -[:Transfer]->(m) WHERE a.id > m.id
          ^
==

# SAME() on different typed graph columns. RETURN should pick the latter `a`.
select * from graph_table(aml
  MATCH (a IS Account)
  MATCH (a) WHERE a.name = "a"
  RETURN a.name, 1 as one
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, one#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-51, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.a#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, a#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#2
                  | |   +-tail=$element_table.a#2
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#2)
                  | |   | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
                  | |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=STRING
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#2)
                  | |     | +-property=name(STRING)
                  | |     +-Literal(type=STRING, value="a")
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, one#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#2)
                    | |   +-property=name(STRING)
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#2])

==

# SAME() on different typed graph columns. RETURN should pick the latter `a`.
select * from graph_table(aml
  MATCH (a)
  MATCH (a IS Account)
  RETURN a.name, 1 as one
)
--

ERROR: Property name is not exposed by element type GRAPH_NODE(aml)<balance UINT64, id INT64> [at 4:12]
  RETURN a.name, 1 as one
           ^
==

[run_sqlbuilder]
[show_sqlbuilder_output]

select gt.* from
graph_table(aml
  match (n)
  return n.name, 1 AS number, CONCAT("str", "_suffix") AS concat_str
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
| +-$graph_table.number#3 AS number [INT64]
| +-$graph_table.concat_str#4 AS concat_str [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#2, number#3, concat_str#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#2, number#3, concat_str#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[name#2, number#3, concat_str#4]
                    +-expr_list=
                    | +-name#2 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-number#3 := Literal(type=INT64, value=1)
                    | +-concat_str#4 :=
                    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                    |     +-Literal(type=STRING, value="str")
                    |     +-Literal(type=STRING, value="_suffix")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name,
  aml_1.a_4 AS number,
  aml_1.a_5 AS concat_str
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2.name AS a_3,
      1 AS a_4,
      CONCAT("str", "_suffix") AS a_5
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2.name AS a_3,
      1 AS a_4,
      CONCAT("str", "_suffix") AS a_5
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name,
     aml_1.a_4 AS number,
     aml_1.a_5 AS concat_str;

==

[run_sqlbuilder]
[show_sqlbuilder_output]

select 1
from graph_table(
  aml match () return 1 AS num
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#3]
    +-expr_list=
    | +-$col1#3 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.num#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.num#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.num#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.$element1#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.$element1#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element1#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.num#2]
                    +-expr_list=
                    | +-num#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.$element1#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_5
FROM
  (
    SELECT
      aml_1.a_3 AS a_3
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS (% | ! %))
        RETURN
          1 AS a_3
      ) AS aml_1
  ) AS graphtablescan_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      1 AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS a_3
|> AS graphtablescan_4
|> SELECT
     1 AS a_5;


==

# Using RETURN statement instead of COLUMNS() indicates GQL syntax. GQL extended GRAPH_TABLE requires SQL_GRAPH.
[language_features=NONE,+SQL_GRAPH_ADVANCED_QUERY]
select * from
  graph_table(aml
    MATCH ()
    RETURN 1 AS one, 1+1 AS two
  ) g1
--

ERROR: Graph query is not supported [at 2:3]
  graph_table(aml
  ^
==

# GQL extended GRAPH_TABLE requires GQL_EXTENDED
[language_features=NONE,+SQL_GRAPH]
select * from
  graph_table(aml
    MATCH ()
    RETURN 1 AS one, 1+1 AS two
  ) g1
--

ERROR: Graph query with GQL extension is not supported [at 3:5]
    MATCH ()
    ^

==

# GQL extended GRAPH_TABLE requires both SQL_GRAPH and GQL_EXTENDED feature flags
[language_features=NONE]
select * from
  graph_table(aml
    MATCH ()
    RETURN 1 AS one, 1+1 AS two
  ) g1
--

ERROR: Graph query is not supported [at 2:3]
  graph_table(aml
  ^
==

# Correlated gql queries
select inner_name from graph_table(
  aml match (n)
  return
    (select gt_inner.name
      from graph_table (
        aml match (m)
        return 'static_name' AS name
      ) gt_inner
      limit 1
    ) AS inner_name
)
--

QueryStmt
+-output_column_list=
| +-$graph_table.inner_name#4 AS inner_name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.inner_name#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.inner_name#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.inner_name#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.inner_name#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.inner_name#4]
                    +-expr_list=
                    | +-inner_name#4 :=
                    |   +-SubqueryExpr
                    |     +-type=STRING
                    |     +-subquery_type=SCALAR
                    |     +-subquery=
                    |       +-LimitOffsetScan
                    |         +-column_list=[$graph_table.name#3]
                    |         +-input_scan=
                    |         | +-ProjectScan
                    |         |   +-column_list=[$graph_table.name#3]
                    |         |   +-input_scan=
                    |         |     +-GraphTableScan
                    |         |       +-column_list=[$graph_table.name#3]
                    |         |       +-property_graph=aml
                    |         |       +-input_scan=
                    |         |         +-GraphLinearScan
                    |         |           +-column_list=[$graph_table.name#3]
                    |         |           +-scan_list=
                    |         |             +-GraphLinearScan
                    |         |               +-column_list=[$graph_table.name#3]
                    |         |               +-scan_list=
                    |         |                 +-GraphScan
                    |         |                 | +-column_list=[$element_table.m#2]
                    |         |                 | +-input_scan_list=
                    |         |                 | | +-GraphPathScan
                    |         |                 | |   +-column_list=[$element_table.m#2]
                    |         |                 | |   +-input_scan_list=
                    |         |                 | |   | +-GraphNodeScan
                    |         |                 | |   |   +-column_list=[$element_table.m#2]
                    |         |                 | |   |   +-label_expr=
                    |         |                 | |   |   | +-GraphLabelNaryExpr
                    |         |                 | |   |   |   +-op=OR
                    |         |                 | |   |   |   +-operand_list=
                    |         |                 | |   |   |     +-GraphWildCardLabel
                    |         |                 | |   |   |     +-GraphLabelNaryExpr
                    |         |                 | |   |   |       +-op=NOT
                    |         |                 | |   |   |       +-operand_list=
                    |         |                 | |   |   |         +-GraphWildCardLabel
                    |         |                 | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    |         |                 | |   +-head=$element_table.m#2
                    |         |                 | |   +-tail=$element_table.m#2
                    |         |                 | +-input_scan=
                    |         |                 |   +-SingleRowScan
                    |         |                 +-ProjectScan
                    |         |                   +-column_list=[$graph_table.name#3]
                    |         |                   +-expr_list=
                    |         |                   | +-name#3 := Literal(type=STRING, value="static_name")
                    |         |                   +-input_scan=
                    |         |                     +-GraphRefScan(column_list=[$element_table.m#2])
                    |         +-limit=
                    |           +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])
==

# Nested Linear queries should work.
select * from
  graph_table(aml
    MATCH (m) -[e:Transfer]-> (n:Account)
    MATCH (a) -[:Transfer]-> (n) WHERE n.name = "n" AND EXISTS(
      select * from graph_table (
        aml
        return 1 as one
        NEXT
        MATCH -[ee]-> WHERE SAME(ee, e)
        return ee.targetAccountId, one
      )
    )
    RETURN a.id AS aid, m.id AS mid, n.id AS nid, 1 AS e, n.name, (
      select id from graph_table (
        aml match (x) WHERE SAME(x, n)
        return x.id
      ) limit 1
    ) AS sth
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.aid#15 AS aid [INT64]
| +-$graph_table.mid#16 AS mid [INT64]
| +-$graph_table.nid#17 AS nid [INT64]
| +-$graph_table.e#18 AS e [INT64]
| +-$graph_table.name#19 AS name [STRING]
| +-$graph_table.sth#20 AS sth [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, name#19, sth#20]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, name#19, sth#20]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, name#19, sth#20]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, name#19, sth#20]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[m#1, e#2, n#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[m#1, e#2, n#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.m#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=50-58, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=65-72, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.m#1
                  | |   +-tail=$element_table.n#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[m#1, e#2, n#3, a#4, $element1#5, n#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#4, $element1#5, n#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=91-99, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#4
                  | |   +-tail=$element_table.n#6
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#6)
                  | |   | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#3)
                  | |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |     | +-GraphGetElementProperty
                  | |     | | +-type=STRING
                  | |     | | +-expr=
                  | |     | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#6)
                  | |     | | +-property=name(STRING)
                  | |     | +-Literal(type=STRING, value="n")
                  | |     +-SubqueryExpr
                  | |       +-type=BOOL
                  | |       +-subquery_type=EXISTS
                  | |       +-parameter_list=
                  | |       | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
                  | |       +-subquery=
                  | |         +-ProjectScan
                  | |           +-column_list=$graph_table.[targetAccountId#11, one#12]
                  | |           +-input_scan=
                  | |             +-GraphTableScan
                  | |               +-column_list=$graph_table.[targetAccountId#11, one#12]
                  | |               +-property_graph=aml
                  | |               +-input_scan=
                  | |                 +-GraphLinearScan
                  | |                   +-column_list=$graph_table.[targetAccountId#11, one#12]
                  | |                   +-scan_list=
                  | |                     +-GraphLinearScan
                  | |                     | +-column_list=[$graph_table.one#7]
                  | |                     | +-scan_list=
                  | |                     |   +-ProjectScan
                  | |                     |     +-column_list=[$graph_table.one#7]
                  | |                     |     +-expr_list=
                  | |                     |     | +-one#7 := Literal(type=INT64, value=1)
                  | |                     |     +-input_scan=
                  | |                     |       +-SingleRowScan
                  | |                     +-GraphLinearScan
                  | |                       +-column_list=$graph_table.[targetAccountId#11, one#12]
                  | |                       +-scan_list=
                  | |                         +-GraphScan
                  | |                         | +-column_list=[$graph_table.one#7, $element_table.$element1#8, $element_table.ee#9, $element_table.$element2#10]
                  | |                         | +-input_scan_list=
                  | |                         | | +-GraphPathScan
                  | |                         | |   +-column_list=$element_table.[$element1#8, ee#9, $element2#10]
                  | |                         | |   +-input_scan_list=
                  | |                         | |   | +-GraphNodeScan
                  | |                         | |   | | +-column_list=[$element_table.$element1#8]
                  | |                         | |   | | +-label_expr=
                  | |                         | |   | | | +-GraphLabelNaryExpr
                  | |                         | |   | | |   +-op=OR
                  | |                         | |   | | |   +-operand_list=
                  | |                         | |   | | |     +-GraphWildCardLabel
                  | |                         | |   | | |     +-GraphLabelNaryExpr
                  | |                         | |   | | |       +-op=NOT
                  | |                         | |   | | |       +-operand_list=
                  | |                         | |   | | |         +-GraphWildCardLabel
                  | |                         | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |                         | |   | +-GraphEdgeScan
                  | |                         | |   | | +-column_list=[$element_table.ee#9]
                  | |                         | |   | | +-label_expr=
                  | |                         | |   | | | +-GraphLabelNaryExpr
                  | |                         | |   | | |   +-op=OR
                  | |                         | |   | | |   +-operand_list=
                  | |                         | |   | | |     +-GraphWildCardLabel
                  | |                         | |   | | |     +-GraphLabelNaryExpr
                  | |                         | |   | | |       +-op=NOT
                  | |                         | |   | | |       +-operand_list=
                  | |                         | |   | | |         +-GraphWildCardLabel
                  | |                         | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |                         | |   | | +-orientation=RIGHT
                  | |                         | |   | +-GraphNodeScan
                  | |                         | |   |   +-column_list=[$element_table.$element2#10]
                  | |                         | |   |   +-label_expr=
                  | |                         | |   |   | +-GraphLabelNaryExpr
                  | |                         | |   |   |   +-op=OR
                  | |                         | |   |   |   +-operand_list=
                  | |                         | |   |   |     +-GraphWildCardLabel
                  | |                         | |   |   |     +-GraphLabelNaryExpr
                  | |                         | |   |   |       +-op=NOT
                  | |                         | |   |   |       +-operand_list=
                  | |                         | |   |   |         +-GraphWildCardLabel
                  | |                         | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |                         | |   +-head=$element_table.$element1#8
                  | |                         | |   +-tail=$element_table.$element2#10
                  | |                         | +-filter_expr=
                  | |                         | | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                  | |                         | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.ee#9)
                  | |                         | |   +-Cast(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64> -> GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                  | |                         | |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2, is_correlated=TRUE)
                  | |                         | +-input_scan=
                  | |                         |   +-GraphRefScan(column_list=[$graph_table.one#7])
                  | |                         +-ProjectScan
                  | |                           +-column_list=$graph_table.[targetAccountId#11, one#12]
                  | |                           +-expr_list=
                  | |                           | +-targetAccountId#11 :=
                  | |                           | | +-GraphGetElementProperty
                  | |                           | |   +-type=INT64
                  | |                           | |   +-expr=
                  | |                           | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.ee#9)
                  | |                           | |   +-property=targetAccountId(INT64)
                  | |                           | +-one#12 := ColumnRef(type=INT64, column=$graph_table.one#7)
                  | |                           +-input_scan=
                  | |                             +-GraphRefScan(column_list=[$graph_table.one#7, $element_table.$element1#8, $element_table.ee#9, $element_table.$element2#10])
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[m#1, e#2, n#3])
                  +-ProjectScan
                    +-column_list=$graph_table.[aid#15, mid#16, nid#17, e#18, name#19, sth#20]
                    +-expr_list=
                    | +-aid#15 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#4)
                    | |   +-property=id(INT64)
                    | +-mid#16 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#1)
                    | |   +-property=id(INT64)
                    | +-nid#17 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#6)
                    | |   +-property=id(INT64)
                    | +-e#18 := Literal(type=INT64, value=1)
                    | +-name#19 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#6)
                    | |   +-property=name(STRING)
                    | +-sth#20 :=
                    |   +-SubqueryExpr
                    |     +-type=INT64
                    |     +-subquery_type=SCALAR
                    |     +-parameter_list=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#6)
                    |     +-subquery=
                    |       +-LimitOffsetScan
                    |         +-column_list=[$graph_table.id#14]
                    |         +-input_scan=
                    |         | +-ProjectScan
                    |         |   +-column_list=[$graph_table.id#14]
                    |         |   +-input_scan=
                    |         |     +-GraphTableScan
                    |         |       +-column_list=[$graph_table.id#14]
                    |         |       +-property_graph=aml
                    |         |       +-input_scan=
                    |         |         +-GraphLinearScan
                    |         |           +-column_list=[$graph_table.id#14]
                    |         |           +-scan_list=
                    |         |             +-GraphLinearScan
                    |         |               +-column_list=[$graph_table.id#14]
                    |         |               +-scan_list=
                    |         |                 +-GraphScan
                    |         |                 | +-column_list=[$element_table.x#13]
                    |         |                 | +-input_scan_list=
                    |         |                 | | +-GraphPathScan
                    |         |                 | |   +-column_list=[$element_table.x#13]
                    |         |                 | |   +-input_scan_list=
                    |         |                 | |   | +-GraphNodeScan
                    |         |                 | |   |   +-column_list=[$element_table.x#13]
                    |         |                 | |   |   +-label_expr=
                    |         |                 | |   |   | +-GraphLabelNaryExpr
                    |         |                 | |   |   |   +-op=OR
                    |         |                 | |   |   |   +-operand_list=
                    |         |                 | |   |   |     +-GraphWildCardLabel
                    |         |                 | |   |   |     +-GraphLabelNaryExpr
                    |         |                 | |   |   |       +-op=NOT
                    |         |                 | |   |   |       +-operand_list=
                    |         |                 | |   |   |         +-GraphWildCardLabel
                    |         |                 | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    |         |                 | |   +-head=$element_table.x#13
                    |         |                 | |   +-tail=$element_table.x#13
                    |         |                 | +-filter_expr=
                    |         |                 | | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                    |         |                 | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#13)
                    |         |                 | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#6, is_correlated=TRUE)
                    |         |                 | +-input_scan=
                    |         |                 |   +-SingleRowScan
                    |         |                 +-ProjectScan
                    |         |                   +-column_list=[$graph_table.id#14]
                    |         |                   +-expr_list=
                    |         |                   | +-id#14 :=
                    |         |                   |   +-GraphGetElementProperty
                    |         |                   |     +-type=INT64
                    |         |                   |     +-expr=
                    |         |                   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#13)
                    |         |                   |     +-property=id(INT64)
                    |         |                   +-input_scan=
                    |         |                     +-GraphRefScan(column_list=[$element_table.x#13])
                    |         +-limit=
                    |           +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[m#1, e#2, a#4, $element1#5, n#6])

==

# The result should be empty.
select * from graph_table(aml
  MATCH (a IS Account)
  MATCH (a IS Person)
  RETURN a.name, 1 as one
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, one#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-51, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.a#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, a#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=67-73, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#2
                  | |   +-tail=$element_table.a#2
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#2)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, one#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#2)
                    | |   +-property=name(STRING)
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#2])

==

# Cannot multiply declare an element as both a node and an edge.
select * from graph_table(aml
  MATCH (a)
  MATCH -[a]->
  RETURN a.name, 1 as one
)

--
ERROR: Cannot multiply declare an element as both a node and an edge pattern: `a` [at 3:9]
  MATCH -[a]->
        ^
==

# Linear composition: starting with return *
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    RETURN
      *
    NEXT
    RETURN
      2 AS one,
      1 AS two
    NEXT
    RETURN
      1 AS one,
      1 + 1 AS two
  ) AS g1
--
ERROR: RETURN * would expand to zero columns [at 7:7]
      *
      ^
==

# RETURN * used at the end is ok
select * from
  graph_table(aml
    RETURN
      2 AS one,
      1 AS three,
      "string" AS str
    NEXT
    RETURN
      1 AS one,
      1 + 1 AS two,
      str
    NEXT
    RETURN *
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#7 AS one [INT64]
| +-$graph_table.two#8 AS two [INT64]
| +-$graph_table.str#9 AS str [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[one#7, two#8, str#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[one#7, two#8, str#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[one#7, two#8, str#9]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[one#1, three#2, str#3]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[one#1, three#2, str#3]
              |     +-expr_list=
              |     | +-one#1 := Literal(type=INT64, value=2)
              |     | +-three#2 := Literal(type=INT64, value=1)
              |     | +-str#3 := Literal(type=STRING, value="string")
              |     +-input_scan=
              |       +-SingleRowScan
              +-GraphLinearScan
              | +-column_list=$graph_table.[one#4, two#5, str#6]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[one#4, two#5, str#6]
              |     +-expr_list=
              |     | +-one#4 := Literal(type=INT64, value=1)
              |     | +-two#5 :=
              |     | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |     | |   +-Literal(type=INT64, value=1)
              |     | |   +-Literal(type=INT64, value=1)
              |     | +-str#6 := ColumnRef(type=STRING, column=$graph_table.str#3)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$graph_table.[one#1, three#2, str#3])
              +-GraphLinearScan
                +-column_list=$graph_table.[one#7, two#8, str#9]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[one#7, two#8, str#9]
                    +-expr_list=
                    | +-one#7 := ColumnRef(type=INT64, column=$graph_table.one#4)
                    | +-two#8 := ColumnRef(type=INT64, column=$graph_table.two#5)
                    | +-str#9 := ColumnRef(type=STRING, column=$graph_table.str#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[one#4, two#5, str#6])
==

# Correlated join with return *.
select * from
  graph_table(aml
    MATCH (m) -[e:Transfer]-> (n)
    RETURN *
    NEXT
    MATCH (a) -[:Transfer]-> (n) WHERE a.id > n.id
    MATCH (g) -[:Transfer]->(m)  WHERE g.id > a.id AND e.targetAccountId > 0
    RETURN a, m, n
    NEXT
    MATCH (n) -> (n)
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid, 1 AS e
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.aid#19 AS aid [INT64]
| +-$graph_table.mid#20 AS mid [INT64]
| +-$graph_table.nid#21 AS nid [INT64]
| +-$graph_table.e#22 AS e [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[aid#19, mid#20, nid#21, e#22]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[aid#19, mid#20, nid#21, e#22]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[aid#19, mid#20, nid#21, e#22]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[m#4, e#5, n#6]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[m#1, e#2, n#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[m#1, e#2, n#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.m#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.e#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=50-58, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.n#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.m#1
              |   | |   +-tail=$element_table.n#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=$graph_table.[m#4, e#5, n#6]
              |     +-expr_list=
              |     | +-m#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#1)
              |     | +-e#5 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
              |     | +-n#6 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#3)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$element_table.[m#1, e#2, n#3])
              +-GraphLinearScan
              | +-column_list=$graph_table.[a#13, m#14, n#15]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$graph_table.m#4, $graph_table.e#5, $graph_table.n#6, $element_table.a#7, $element_table.$element1#8, $element_table.n#9]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[a#7, $element1#8, n#9]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#7]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.$element1#8]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=105-113, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.n#9]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.a#7
              |   | |   +-tail=$element_table.n#9
              |   | +-filter_expr=
              |   | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
              |   | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#6)
              |   | |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              |   | |     +-GraphGetElementProperty
              |   | |     | +-type=INT64
              |   | |     | +-expr=
              |   | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#7)
              |   | |     | +-property=id(INT64)
              |   | |     +-GraphGetElementProperty
              |   | |       +-type=INT64
              |   | |       +-expr=
              |   | |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |   | |       +-property=id(INT64)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=$graph_table.[m#4, e#5, n#6])
              |   +-GraphScan
              |   | +-column_list=[$graph_table.m#4, $graph_table.e#5, $element_table.a#7, $element_table.$element1#8, $element_table.n#9, $element_table.g#10, $element_table.$element2#11, $element_table.m#12]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[g#10, $element2#11, m#12]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.g#10]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.$element2#11]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=156-164, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.m#12]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.g#10
              |   | |   +-tail=$element_table.m#12
              |   | +-filter_expr=
              |   | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
              |   | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#4)
              |   | |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
              |   | |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              |   | |     | +-GraphGetElementProperty
              |   | |     | | +-type=INT64
              |   | |     | | +-expr=
              |   | |     | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.g#10)
              |   | |     | | +-property=id(INT64)
              |   | |     | +-GraphGetElementProperty
              |   | |     |   +-type=INT64
              |   | |     |   +-expr=
              |   | |     |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#7)
              |   | |     |   +-property=id(INT64)
              |   | |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
              |   | |       +-GraphGetElementProperty
              |   | |       | +-type=INT64
              |   | |       | +-expr=
              |   | |       | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#5)
              |   | |       | +-property=targetAccountId(INT64)
              |   | |       +-Literal(type=INT64, value=0)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=[$graph_table.m#4, $graph_table.e#5, $element_table.a#7, $element_table.$element1#8, $element_table.n#9])
              |   +-ProjectScan
              |     +-column_list=$graph_table.[a#13, m#14, n#15]
              |     +-expr_list=
              |     | +-a#13 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#7)
              |     | +-m#14 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
              |     | +-n#15 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$graph_table.e#5, $element_table.a#7, $element_table.$element1#8, $element_table.n#9, $element_table.g#10, $element_table.$element2#11, $element_table.m#12])
              +-GraphLinearScan
                +-column_list=$graph_table.[aid#19, mid#20, nid#21, e#22]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.a#13, $graph_table.m#14, $graph_table.n#15, $element_table.n#16, $element_table.$element3#17, $element_table.n#18]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#16, $element3#17, n#18]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#16]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=AND
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |     | +-op=OR
                  | |   | | |     | +-operand_list=
                  | |   | | |     |   +-GraphWildCardLabel
                  | |   | | |     |   +-GraphLabelNaryExpr
                  | |   | | |     |     +-op=NOT
                  | |   | | |     |     +-operand_list=
                  | |   | | |     |       +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=OR
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | |         +-GraphLabelNaryExpr
                  | |   | | |           +-op=NOT
                  | |   | | |           +-operand_list=
                  | |   | | |             +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element3#17]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#18]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=AND
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |     | +-op=OR
                  | |   |   |     | +-operand_list=
                  | |   |   |     |   +-GraphWildCardLabel
                  | |   |   |     |   +-GraphLabelNaryExpr
                  | |   |   |     |     +-op=NOT
                  | |   |   |     |     +-operand_list=
                  | |   |   |     |       +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=OR
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   |         +-GraphLabelNaryExpr
                  | |   |   |           +-op=NOT
                  | |   |   |           +-operand_list=
                  | |   |   |             +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-filter_expr=
                  | |   | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#16)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#18)
                  | |   +-head=$element_table.n#16
                  | |   +-tail=$element_table.n#18
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#16)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#15)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[a#13, m#14, n#15])
                  +-ProjectScan
                    +-column_list=$graph_table.[aid#19, mid#20, nid#21, e#22]
                    +-expr_list=
                    | +-aid#19 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#13)
                    | |   +-property=id(INT64)
                    | +-mid#20 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#14)
                    | |   +-property=id(INT64)
                    | +-nid#21 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#16)
                    | |   +-property=id(INT64)
                    | +-e#22 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.a#13, $graph_table.m#14, $element_table.n#16, $element_table.$element3#17])
==

# Redeclaring relational column across return *.
select * from
  graph_table(aml
    RETURN 1 AS g
    NEXT
    MATCH ((a) -[:Transfer]-> (n))
    RETURN *
    NEXT
    RETURN g, a
    NEXT
    MATCH (g) -[:Transfer]->(m) WHERE a.id > m.id
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid
  ) g1
--
ERROR: `g` is not a graph element column and cannot be redeclared [at 10:11]
    MATCH (g) -[:Transfer]->(m) WHERE a.id > m.id
          ^
==

# Nested Linear queries should work with return *.
select * from
  graph_table(aml
    MATCH (m) -[e:Transfer]-> (n:Account)
    RETURN *
    NEXT
    MATCH (a) -[:Transfer]-> (n) WHERE n.name = "n" AND EXISTS(
      select * from graph_table (
        aml
        return 1 as one
        NEXT
        MATCH -[ee]-> WHERE SAME(ee, e)
        return ee.targetAccountId, one
      )
    )
    RETURN a, m, n, n.name, (
      select id from graph_table (
        aml match (x) WHERE SAME(x, n)
        return *
        NEXT
        return x.id
      ) limit 1
    ) AS sth
    NEXT
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid, 1 AS e
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.aid#24 AS aid [INT64]
| +-$graph_table.mid#25 AS mid [INT64]
| +-$graph_table.nid#26 AS nid [INT64]
| +-$graph_table.e#27 AS e [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[aid#24, mid#25, nid#26, e#27]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[aid#24, mid#25, nid#26, e#27]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[aid#24, mid#25, nid#26, e#27]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[m#4, e#5, n#6]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[m#1, e#2, n#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[m#1, e#2, n#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.m#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.e#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=50-58, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.n#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=65-72, label=aml.Account)
              |   | |   |   +-target_element_table_list=[aml.Account]
              |   | |   +-head=$element_table.m#1
              |   | |   +-tail=$element_table.n#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=$graph_table.[m#4, e#5, n#6]
              |     +-expr_list=
              |     | +-m#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#1)
              |     | +-e#5 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
              |     | +-n#6 := ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#3)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$element_table.[m#1, e#2, n#3])
              +-GraphLinearScan
              | +-column_list=$graph_table.[a#19, m#20, n#21, name#22, sth#23]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$graph_table.m#4, $graph_table.e#5, $graph_table.n#6, $element_table.a#7, $element_table.$element1#8, $element_table.n#9]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[a#7, $element1#8, n#9]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#7]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.$element1#8]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=113-121, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.n#9]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.a#7
              |   | |   +-tail=$element_table.n#9
              |   | +-filter_expr=
              |   | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
              |   | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |   | |   | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
              |   | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$graph_table.n#6)
              |   | |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
              |   | |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
              |   | |     | +-GraphGetElementProperty
              |   | |     | | +-type=STRING
              |   | |     | | +-expr=
              |   | |     | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |   | |     | | +-property=name(STRING)
              |   | |     | +-Literal(type=STRING, value="n")
              |   | |     +-SubqueryExpr
              |   | |       +-type=BOOL
              |   | |       +-subquery_type=EXISTS
              |   | |       +-parameter_list=
              |   | |       | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#5)
              |   | |       +-subquery=
              |   | |         +-ProjectScan
              |   | |           +-column_list=$graph_table.[targetAccountId#14, one#15]
              |   | |           +-input_scan=
              |   | |             +-GraphTableScan
              |   | |               +-column_list=$graph_table.[targetAccountId#14, one#15]
              |   | |               +-property_graph=aml
              |   | |               +-input_scan=
              |   | |                 +-GraphLinearScan
              |   | |                   +-column_list=$graph_table.[targetAccountId#14, one#15]
              |   | |                   +-scan_list=
              |   | |                     +-GraphLinearScan
              |   | |                     | +-column_list=[$graph_table.one#10]
              |   | |                     | +-scan_list=
              |   | |                     |   +-ProjectScan
              |   | |                     |     +-column_list=[$graph_table.one#10]
              |   | |                     |     +-expr_list=
              |   | |                     |     | +-one#10 := Literal(type=INT64, value=1)
              |   | |                     |     +-input_scan=
              |   | |                     |       +-SingleRowScan
              |   | |                     +-GraphLinearScan
              |   | |                       +-column_list=$graph_table.[targetAccountId#14, one#15]
              |   | |                       +-scan_list=
              |   | |                         +-GraphScan
              |   | |                         | +-column_list=[$graph_table.one#10, $element_table.$element1#11, $element_table.ee#12, $element_table.$element2#13]
              |   | |                         | +-input_scan_list=
              |   | |                         | | +-GraphPathScan
              |   | |                         | |   +-column_list=$element_table.[$element1#11, ee#12, $element2#13]
              |   | |                         | |   +-input_scan_list=
              |   | |                         | |   | +-GraphNodeScan
              |   | |                         | |   | | +-column_list=[$element_table.$element1#11]
              |   | |                         | |   | | +-label_expr=
              |   | |                         | |   | | | +-GraphLabelNaryExpr
              |   | |                         | |   | | |   +-op=OR
              |   | |                         | |   | | |   +-operand_list=
              |   | |                         | |   | | |     +-GraphWildCardLabel
              |   | |                         | |   | | |     +-GraphLabelNaryExpr
              |   | |                         | |   | | |       +-op=NOT
              |   | |                         | |   | | |       +-operand_list=
              |   | |                         | |   | | |         +-GraphWildCardLabel
              |   | |                         | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |                         | |   | +-GraphEdgeScan
              |   | |                         | |   | | +-column_list=[$element_table.ee#12]
              |   | |                         | |   | | +-label_expr=
              |   | |                         | |   | | | +-GraphLabelNaryExpr
              |   | |                         | |   | | |   +-op=OR
              |   | |                         | |   | | |   +-operand_list=
              |   | |                         | |   | | |     +-GraphWildCardLabel
              |   | |                         | |   | | |     +-GraphLabelNaryExpr
              |   | |                         | |   | | |       +-op=NOT
              |   | |                         | |   | | |       +-operand_list=
              |   | |                         | |   | | |         +-GraphWildCardLabel
              |   | |                         | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |                         | |   | | +-orientation=RIGHT
              |   | |                         | |   | +-GraphNodeScan
              |   | |                         | |   |   +-column_list=[$element_table.$element2#13]
              |   | |                         | |   |   +-label_expr=
              |   | |                         | |   |   | +-GraphLabelNaryExpr
              |   | |                         | |   |   |   +-op=OR
              |   | |                         | |   |   |   +-operand_list=
              |   | |                         | |   |   |     +-GraphWildCardLabel
              |   | |                         | |   |   |     +-GraphLabelNaryExpr
              |   | |                         | |   |   |       +-op=NOT
              |   | |                         | |   |   |       +-operand_list=
              |   | |                         | |   |   |         +-GraphWildCardLabel
              |   | |                         | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |                         | |   +-head=$element_table.$element1#11
              |   | |                         | |   +-tail=$element_table.$element2#13
              |   | |                         | +-filter_expr=
              |   | |                         | | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
              |   | |                         | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.ee#12)
              |   | |                         | |   +-Cast(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64> -> GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
              |   | |                         | |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$graph_table.e#5, is_correlated=TRUE)
              |   | |                         | +-input_scan=
              |   | |                         |   +-GraphRefScan(column_list=[$graph_table.one#10])
              |   | |                         +-ProjectScan
              |   | |                           +-column_list=$graph_table.[targetAccountId#14, one#15]
              |   | |                           +-expr_list=
              |   | |                           | +-targetAccountId#14 :=
              |   | |                           | | +-GraphGetElementProperty
              |   | |                           | |   +-type=INT64
              |   | |                           | |   +-expr=
              |   | |                           | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.ee#12)
              |   | |                           | |   +-property=targetAccountId(INT64)
              |   | |                           | +-one#15 := ColumnRef(type=INT64, column=$graph_table.one#10)
              |   | |                           +-input_scan=
              |   | |                             +-GraphRefScan(column_list=[$graph_table.one#10, $element_table.$element1#11, $element_table.ee#12, $element_table.$element2#13])
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=$graph_table.[m#4, e#5, n#6])
              |   +-ProjectScan
              |     +-column_list=$graph_table.[a#19, m#20, n#21, name#22, sth#23]
              |     +-expr_list=
              |     | +-a#19 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#7)
              |     | +-m#20 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#4)
              |     | +-n#21 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |     | +-name#22 :=
              |     | | +-GraphGetElementProperty
              |     | |   +-type=STRING
              |     | |   +-expr=
              |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |     | |   +-property=name(STRING)
              |     | +-sth#23 :=
              |     |   +-SubqueryExpr
              |     |     +-type=INT64
              |     |     +-subquery_type=SCALAR
              |     |     +-parameter_list=
              |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
              |     |     +-subquery=
              |     |       +-LimitOffsetScan
              |     |         +-column_list=[$graph_table.id#18]
              |     |         +-input_scan=
              |     |         | +-ProjectScan
              |     |         |   +-column_list=[$graph_table.id#18]
              |     |         |   +-input_scan=
              |     |         |     +-GraphTableScan
              |     |         |       +-column_list=[$graph_table.id#18]
              |     |         |       +-property_graph=aml
              |     |         |       +-input_scan=
              |     |         |         +-GraphLinearScan
              |     |         |           +-column_list=[$graph_table.id#18]
              |     |         |           +-scan_list=
              |     |         |             +-GraphLinearScan
              |     |         |             | +-column_list=[$graph_table.x#17]
              |     |         |             | +-scan_list=
              |     |         |             |   +-GraphScan
              |     |         |             |   | +-column_list=[$element_table.x#16]
              |     |         |             |   | +-input_scan_list=
              |     |         |             |   | | +-GraphPathScan
              |     |         |             |   | |   +-column_list=[$element_table.x#16]
              |     |         |             |   | |   +-input_scan_list=
              |     |         |             |   | |   | +-GraphNodeScan
              |     |         |             |   | |   |   +-column_list=[$element_table.x#16]
              |     |         |             |   | |   |   +-label_expr=
              |     |         |             |   | |   |   | +-GraphLabelNaryExpr
              |     |         |             |   | |   |   |   +-op=OR
              |     |         |             |   | |   |   |   +-operand_list=
              |     |         |             |   | |   |   |     +-GraphWildCardLabel
              |     |         |             |   | |   |   |     +-GraphLabelNaryExpr
              |     |         |             |   | |   |   |       +-op=NOT
              |     |         |             |   | |   |   |       +-operand_list=
              |     |         |             |   | |   |   |         +-GraphWildCardLabel
              |     |         |             |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |     |         |             |   | |   +-head=$element_table.x#16
              |     |         |             |   | |   +-tail=$element_table.x#16
              |     |         |             |   | +-filter_expr=
              |     |         |             |   | | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              |     |         |             |   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#16)
              |     |         |             |   | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9, is_correlated=TRUE)
              |     |         |             |   | +-input_scan=
              |     |         |             |   |   +-SingleRowScan
              |     |         |             |   +-ProjectScan
              |     |         |             |     +-column_list=[$graph_table.x#17]
              |     |         |             |     +-expr_list=
              |     |         |             |     | +-x#17 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#16)
              |     |         |             |     +-input_scan=
              |     |         |             |       +-GraphRefScan(column_list=[$element_table.x#16])
              |     |         |             +-GraphLinearScan
              |     |         |               +-column_list=[$graph_table.id#18]
              |     |         |               +-scan_list=
              |     |         |                 +-ProjectScan
              |     |         |                   +-column_list=[$graph_table.id#18]
              |     |         |                   +-expr_list=
              |     |         |                   | +-id#18 :=
              |     |         |                   |   +-GraphGetElementProperty
              |     |         |                   |     +-type=INT64
              |     |         |                   |     +-expr=
              |     |         |                   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.x#17)
              |     |         |                   |     +-property=id(INT64)
              |     |         |                   +-input_scan=
              |     |         |                     +-GraphRefScan(column_list=[$graph_table.x#17])
              |     |         +-limit=
              |     |           +-Literal(type=INT64, value=1)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$graph_table.m#4, $graph_table.e#5, $element_table.a#7, $element_table.$element1#8, $element_table.n#9])
              +-GraphLinearScan
                +-column_list=$graph_table.[aid#24, mid#25, nid#26, e#27]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[aid#24, mid#25, nid#26, e#27]
                    +-expr_list=
                    | +-aid#24 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#19)
                    | |   +-property=id(INT64)
                    | +-mid#25 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#20)
                    | |   +-property=id(INT64)
                    | +-nid#26 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#21)
                    | |   +-property=id(INT64)
                    | +-e#27 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[a#19, m#20, n#21, name#22, sth#23])
==

# The first RETURN's output cols gets pruned, however the input scan MATCH should still be there.
SELECT
  *
FROM
  GRAPH_TABLE(
    aml
    MATCH ()
    RETURN
      2 AS one,
      1 AS two
    NEXT
    RETURN
      1 AS one,
      1 + 1 AS two
  ) AS g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
| +-$graph_table.two#5 AS two [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[one#4, two#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[one#4, two#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[one#4, two#5]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[one#2, two#3]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.$element1#1]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.$element1#1]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element1#1]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.$element1#1
              |   | |   +-tail=$element_table.$element1#1
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=$graph_table.[one#2, two#3]
              |     +-expr_list=
              |     | +-one#2 := Literal(type=INT64, value=2)
              |     | +-two#3 := Literal(type=INT64, value=1)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$element_table.$element1#1])
              +-GraphLinearScan
                +-column_list=$graph_table.[one#4, two#5]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[one#4, two#5]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    | +-two#5 :=
                    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    |     +-Literal(type=INT64, value=1)
                    |     +-Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[one#2, two#3])



==

# Test that LET fails when referencing unrecognized names
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, not_n.birthday, YEAR)
  return n.name, age
) gt

--

ERROR: Unrecognized name: not_n [at 4:37]
  let age = DATE_DIFF(CURRENT_DATE, not_n.birthday, YEAR)
                                    ^

==

# Test that LET fails when referenced names are defined in the same statement
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR), is_minor = age < 18
  return n.name, is_minor
) gt

--

ERROR: Unrecognized name: age [at 4:67]
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR), is_minor = age < 18
                                                                  ^

==

# Test that LET fails when referenced names are ambiguous
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR),
      age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR) + 1
  return n.name, age
) gt

--

ERROR: Ambiguous name: age [at 4:7]
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR),
      ^

==

# Test that LET fails when the same variable has multiple definitions across
# different LET statements
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR) + 1
  return n.name, age
) gt

--

ERROR: Ambiguous name: age [at 5:7]
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR) + 1
      ^

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Test that LET can define a variable that has the same name as a variable
# defined in an earlier linear query statement if that earlier variable is
# not projected by the intervening RETURN statement(s)
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  return n
  next
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR) + 1
  return n.name, age
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.name#5 AS name [STRING]
| +-$graph_table.age#6 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#5, age#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#5, age#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#5, age#6]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=[$graph_table.n#3]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.n#1]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.n#1]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.n#1]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.n#1
              |   | |   +-tail=$element_table.n#1
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |   | +-column_list=[$element_table.n#1]
              |   | +-expr_list=
              |   | | +-age#2 :=
              |   | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
              |   | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
              |   | |     +-GraphGetElementProperty
              |   | |     | +-type=DATE
              |   | |     | +-expr=
              |   | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              |   | |     | +-property=birthday(DATE)
              |   | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=[$element_table.n#1])
              |   +-ProjectScan
              |     +-column_list=[$graph_table.n#3]
              |     +-expr_list=
              |     | +-n#3 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$element_table.n#1])
              +-GraphLinearScan
                +-column_list=$graph_table.[name#5, age#6]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=$graph_table.[n#3, age#4]
                  | +-expr_list=
                  | | +-age#4 :=
                  | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     | +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     | +-GraphGetElementProperty
                  | |     | | +-type=DATE
                  | |     | | +-expr=
                  | |     | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#3)
                  | |     | | +-property=birthday(DATE)
                  | |     | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | |     +-Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.n#3])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#5, age#6]
                    +-expr_list=
                    | +-name#5 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.n#3)
                    | |   +-property=name(STRING)
                    | +-age#6 := ColumnRef(type=INT64, column=$graph_table.age#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[n#3, age#4])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_6 AS name,
  aml_1.a_7 AS age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    RETURN
      a_2 AS a_4
    NEXT
    LET
      a_5 = (DATE_DIFF(`CURRENT_DATE`(), a_4.birthday, YEAR)) + 1
    RETURN
      a_4.name AS a_6,
      a_5 AS a_7
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    RETURN
      a_2 AS a_4
    NEXT
    LET
      a_5 = (DATE_DIFF(`CURRENT_DATE`(), a_4.birthday, YEAR)) + 1
    RETURN
      a_4.name AS a_6,
      a_5 AS a_7
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS name,
     aml_1.a_7 AS age;

==

# Test that LET fails when an existing working table column is redefined
select gt.* from
graph_table(aml
  match (n)
  return n.id
  next
  let id = id + 1
  return id
) gt

--

ERROR: Ambiguous name: id [at 6:7]
  let id = id + 1
      ^

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Use LET to add computed columns.
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  return n.name, age
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_4 AS name,
  aml_1.a_5 AS age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    RETURN
      a_2.name AS a_4,
      a_3 AS a_5
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    RETURN
      a_2.name AS a_4,
      a_3 AS a_5
  ) AS aml_1
|> SELECT
     aml_1.a_4 AS name,
     aml_1.a_5 AS age;

==

# Use LET to add computed columns.
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  return n.name, age
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

==

# Test sequence of LET statements
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  let is_minor = age < 18
  return n.name, is_minor
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.is_minor#5 AS is_minor [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, is_minor#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, is_minor#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, is_minor#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, is_minor#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2, $graph_table.is_minor#3]
                  | +-expr_list=
                  | | +-is_minor#3 :=
                  | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
                  | |     +-ColumnRef(type=INT64, column=$graph_table.age#2)
                  | |     +-Literal(type=INT64, value=18)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#4, is_minor#5]
                    +-expr_list=
                    | +-name#4 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-is_minor#5 := ColumnRef(type=BOOL, column=$graph_table.is_minor#3)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2, $graph_table.is_minor#3])

==

# Use LET as the first statement in a linear query.
select gt.* from
graph_table(aml
  let nationality = "UNKNOWN"
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  return n.name, age, nationality
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.age#5 AS age [INT64]
| +-$graph_table.nationality#6 AS nationality [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, age#5, nationality#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, age#5, nationality#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, age#5, nationality#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, age#5, nationality#6]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.nationality#1]
                  | +-expr_list=
                  | | +-nationality#1 := Literal(type=STRING, value="UNKNOWN")
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=[$graph_table.nationality#1, $element_table.n#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.n#2
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.nationality#1])
                  +-ProjectScan
                  | +-column_list=[$graph_table.nationality#1, $element_table.n#2, $graph_table.age#3]
                  | +-expr_list=
                  | | +-age#3 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.nationality#1, $element_table.n#2])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#4, age#5, nationality#6]
                    +-expr_list=
                    | +-name#4 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                    | |   +-property=name(STRING)
                    | +-age#5 := ColumnRef(type=INT64, column=$graph_table.age#3)
                    | +-nationality#6 := ColumnRef(type=STRING, column=$graph_table.nationality#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.nationality#1, $element_table.n#2, $graph_table.age#3])

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Use LET as the first statement in a linear query (test SQLBuilder).
select gt.* from
graph_table(aml
  let nationality = "UNKNOWN"
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  return n.name, age, nationality
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.age#5 AS age [INT64]
| +-$graph_table.nationality#6 AS nationality [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, age#5, nationality#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, age#5, nationality#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, age#5, nationality#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, age#5, nationality#6]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.nationality#1]
                  | +-expr_list=
                  | | +-nationality#1 := Literal(type=STRING, value="UNKNOWN")
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=[$graph_table.nationality#1, $element_table.n#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.n#2
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.nationality#1])
                  +-ProjectScan
                  | +-column_list=[$graph_table.nationality#1, $element_table.n#2, $graph_table.age#3]
                  | +-expr_list=
                  | | +-age#3 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.nationality#1, $element_table.n#2])
                  +-ProjectScan
                    +-column_list=$graph_table.[name#4, age#5, nationality#6]
                    +-expr_list=
                    | +-name#4 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                    | |   +-property=name(STRING)
                    | +-age#5 := ColumnRef(type=INT64, column=$graph_table.age#3)
                    | +-nationality#6 := ColumnRef(type=STRING, column=$graph_table.nationality#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.nationality#1, $element_table.n#2, $graph_table.age#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name,
  aml_1.a_6 AS age,
  aml_1.a_7 AS nationality
FROM
  GRAPH_TABLE(
    aml
    LET
      a_2 = "UNKNOWN"
    MATCH
      (a_3
      IS (% | ! %))
    LET
      a_4 = DATE_DIFF(`CURRENT_DATE`(), a_3.birthday, YEAR)
    RETURN
      a_3.name AS a_5,
      a_4 AS a_6,
      a_2 AS a_7
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    LET
      a_2 = "UNKNOWN"
    MATCH
      (a_3
      IS (% | ! %))
    LET
      a_4 = DATE_DIFF(`CURRENT_DATE`(), a_3.birthday, YEAR)
    RETURN
      a_3.name AS a_5,
      a_4 AS a_6,
      a_2 AS a_7
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name,
     aml_1.a_6 AS age,
     aml_1.a_7 AS nationality;

==

# Test LET with a quoted identifier

select * from
graph_table(aml
  MATCH (`from`)
  LET `let` = `from`.name
  RETURN `let`
) g1

--
QueryStmt
+-output_column_list=
| +-$graph_table.let#3 AS let [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.let#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.let#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.let#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.let#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.from#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.from#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.from#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.from#1
                  | |   +-tail=$element_table.from#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.from#1, $graph_table.let#2]
                  | +-expr_list=
                  | | +-let#2 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=STRING
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.from#1)
                  | |     +-property=name(STRING)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.from#1])
                  +-ProjectScan
                    +-column_list=[$graph_table.let#3]
                    +-expr_list=
                    | +-let#3 := ColumnRef(type=STRING, column=$graph_table.let#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.from#1, $graph_table.let#2])

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Test LET with a quoted identifier

select * from
graph_table(aml
  MATCH (`from`)
  LET `let` = `from`.name
  RETURN `let`
) g1

--
QueryStmt
+-output_column_list=
| +-$graph_table.let#3 AS let [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.let#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.let#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.let#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.let#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.from#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.from#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.from#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.from#1
                  | |   +-tail=$element_table.from#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.from#1, $graph_table.let#2]
                  | +-expr_list=
                  | | +-let#2 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=STRING
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.from#1)
                  | |     +-property=name(STRING)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.from#1])
                  +-ProjectScan
                    +-column_list=[$graph_table.let#3]
                    +-expr_list=
                    | +-let#3 := ColumnRef(type=STRING, column=$graph_table.let#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.from#1, $graph_table.let#2])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_4 AS let
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = a_2.name
    RETURN
      a_3 AS a_4
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = a_2.name
    RETURN
      a_3 AS a_4
  ) AS aml_1
|> SELECT
     aml_1.a_4 AS let;

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Use LET as the first statement and test that it is an error for a
# variable defined in LET to be redeclared in a subsequent MATCH
select gt.* from
graph_table(aml
  let n = "UNKNOWN"
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  return n.name, age, nationality
) gt

--
ERROR: `n` is not a graph element column and cannot be redeclared [at 6:9]
  match (n)
        ^

==

# Test that FILTER fails when it references unrecognized names
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter years > 25
  return n.name, age
) gt

--

ERROR: Unrecognized name: years [at 5:10]
  filter years > 25
         ^

==

# Test that FILTER fails when the filter expression is not a boolean
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter age + 1
  return n.name, age
) gt

--

ERROR: WHERE clause should return type BOOL, but returns INT64 [at 5:10]
  filter age + 1
         ^

==

# Let FILTER be the first statement in a linear query
select gt.* from
graph_table(aml
  filter where 1 > 2
  return 1 as number
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.number#1 AS number [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.number#1]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.number#1]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.number#1]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.number#1]
                +-scan_list=
                  +-FilterScan
                  | +-input_scan=
                  | | +-SingleRowScan
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-Literal(type=INT64, value=1)
                  |     +-Literal(type=INT64, value=2)
                  +-ProjectScan
                    +-column_list=[$graph_table.number#1]
                    +-expr_list=
                    | +-number#1 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan

==

# Use FILTER to select rows from the working table
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter where age > 25
  return n.name, age
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$graph_table.age#2)
                  |     +-Literal(type=INT64, value=25)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

==

# Use FILTER to select rows from the working table (skip the WHERE keyword)
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter  age > 25
  return n.name, age
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$graph_table.age#2)
                  |     +-Literal(type=INT64, value=25)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Use FILTER to select rows from the working table (skip the WHERE keyword)
# Test SQLBuilder
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter  age > 25
  return n.name, age
) gt

--

QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$graph_table.age#2)
                  |     +-Literal(type=INT64, value=25)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_4 AS name,
  aml_1.a_5 AS age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    FILTER
      WHERE
        a_3 > 25
    RETURN
      a_2.name AS a_4,
      a_3 AS a_5
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    FILTER
      WHERE
        a_3 > 25
    RETURN
      a_2.name AS a_4,
      a_3 AS a_5
  ) AS aml_1
|> SELECT
     aml_1.a_4 AS name,
     aml_1.a_5 AS age;

==

# Write consecutive FILTER statements
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter where age > 25
  filter where n.name = 'Alice'
  return n.name, age
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$graph_table.age#2)
                  |     +-Literal(type=INT64, value=25)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  |     +-GraphGetElementProperty
                  |     | +-type=STRING
                  |     | +-expr=
                  |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | +-property=name(STRING)
                  |     +-Literal(type=STRING, value="Alice")
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

==

[run_sqlbuilder]
[show_sqlbuilder_output]

# Write consecutive FILTER statements (test SQLBuilder)
select gt.* from
graph_table(aml
  match (n)
  let age = DATE_DIFF(CURRENT_DATE, n.birthday, YEAR)
  filter where age > 25
  filter where n.name = 'Alice'
  return n.name, age
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-expr_list=
                  | | +-age#2 :=
                  | |   +-FunctionCall(ZetaSQL:date_diff(DATE, DATE, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
                  | |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$graph_table.age#2)
                  |     +-Literal(type=INT64, value=25)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $graph_table.age#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  |     +-GraphGetElementProperty
                  |     | +-type=STRING
                  |     | +-expr=
                  |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     | +-property=name(STRING)
                  |     +-Literal(type=STRING, value="Alice")
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-age#4 := ColumnRef(type=INT64, column=$graph_table.age#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $graph_table.age#2])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_4 AS name,
  aml_1.a_5 AS age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    FILTER
      WHERE
        a_3 > 25
    FILTER
      WHERE
        (a_2.name) = "Alice"
    RETURN
      a_2.name AS a_4,
      a_3 AS a_5
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    LET
      a_3 = DATE_DIFF(`CURRENT_DATE`(), a_2.birthday, YEAR)
    FILTER
      WHERE
        a_3 > 25
    FILTER
      WHERE
        (a_2.name) = "Alice"
    RETURN
      a_2.name AS a_4,
      a_3 AS a_5
  ) AS aml_1
|> SELECT
     aml_1.a_4 AS name,
     aml_1.a_5 AS age;



==

# Make sure that the optional match bindings don't shadow earlier bindings with
# the same name
select gt.* from
graph_table(aml
  match (n)
  optional match (n) -> (m)
  return n.name as a, m.name as b
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.a#5 AS a [STRING]
| +-$graph_table.b#6 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[a#5, b#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[a#5, b#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[a#5, b#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[a#5, b#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, n#2, $element1#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#2, $element1#3, m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[a#5, b#6]
                    +-expr_list=
                    | +-a#5 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=name(STRING)
                    | +-b#6 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, $element1#3, m#4])

==

# Optional match as the first statement
select gt.* from
graph_table(aml
  optional match (n : Person)
  return n.name as a
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.a#2 AS a [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.a#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=55-61, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  | | +-SingleRowScan
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.a#2]
                    +-expr_list=
                    | +-a#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# In normal MATCH, redefinition overrides
select gt.* from
graph_table(aml
  match (n : Person)
  match (n : Account)
  return n.balance as a
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.a#3 AS a [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.a#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=46-52, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, n#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=67-74, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.n#2
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#2)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-ProjectScan
                    +-column_list=[$graph_table.a#3]
                    +-expr_list=
                    | +-a#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#2)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#2])

==

# In constrast to the previous example, in OPTIONAL MATCH, redefinition does not
# override
select gt.* from
graph_table(aml
  match (n : Person)
  optional match (n : Account)
  return n.birthday as a
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.a#3 AS a [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.a#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=46-52, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, n#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=76-83, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.n#2
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#2)
                  | |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.a#3]
                    +-expr_list=
                    | +-a#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=DATE
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=birthday(DATE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Optional match doesn't shadow `balance` property that's only available on Account
select gt.* from
graph_table(aml
  match (n : Account)
  optional match (n : Person) -> (m) where n.birthday = DATE "2024-01-01"
  return n.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=46-53, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, n#2, $element1#3, m#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#2, $element1#3, m#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=77-83, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.m#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   | +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#2)
                  | |   | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                  | |   +-FunctionCall(ZetaSQL:$equal(DATE, DATE) -> BOOL)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=DATE
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#2)
                  | |     | +-property=birthday(DATE)
                  | |     +-Literal(type=DATE, value=2024-01-01, has_explicit_type=TRUE)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.balance#5]
                    +-expr_list=
                    | +-balance#5 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, $element1#3, m#4])

==

# Similar as previous query but checking where condition on node instead of
# on match.
select * from graph_table(aml match (n : Account)
  optional match (n where n.birthday = DATE "2024-01-01") -> ()
  return n.id)
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#5 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=41-48, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, n#2, $element1#3, $element2#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#2, $element1#3, $element2#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#2]
                  | |   | | +-filter_expr=
                  | |   | | | +-FunctionCall(ZetaSQL:$equal(DATE, DATE) -> BOOL)
                  | |   | | |   +-GraphGetElementProperty
                  | |   | | |   | +-type=DATE
                  | |   | | |   | +-expr=
                  | |   | | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |   | | |   | +-property=birthday(DATE)
                  | |   | | |   +-Literal(type=DATE, value=2024-01-01, has_explicit_type=TRUE)
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.$element2#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.id#5]
                    +-expr_list=
                    | +-id#5 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, $element1#3, $element2#4])

==

# `birthday` should not be accessible because `n` in the return
# statement has the `Account` label which is only supplied by the `Account`
# node table which just has properties `id`, `balance`.
select * from graph_table(aml match (n : Account)
  optional match (n where n.birthday = DATE "2024-01-01") -> ()
  return n.birthday)
--
ERROR: Property birthday is not exposed by element type GRAPH_NODE(aml)<balance UINT64, id INT64> [at 3:12]
  return n.birthday)
           ^
==

# Cross statement references in optional match
select * from graph_table(aml match (n : Account)-[e1]->()
  optional match (n:Person) -[e2:PersonOwnAccount]-> () where e2.personId = e1.accountId
  return n.id)
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#7 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e1#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e1#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=41-48, label=aml.Account)
                  | |   | | +-target_element_table_list=[aml.Account]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e1#2, $element1#3, n#4, e2#5, $element2#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#4, e2#5, $element2#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=79-85, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e2#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=92-108, label=aml.PersonOwnAccount)
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#4
                  | |   +-tail=$element_table.$element2#6
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   | +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#4)
                  | |   | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                  | |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |     +-GraphGetElementProperty
                  | |     | +-type=INT64
                  | |     | +-expr=
                  | |     | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.e2#5)
                  | |     | +-property=personId(INT64)
                  | |     +-GraphGetElementProperty
                  | |       +-type=INT64
                  | |       +-expr=
                  | |       | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e1#2)
                  | |       +-property=accountId(INT64)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[n#1, e1#2, $element1#3])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.id#7]
                    +-expr_list=
                    | +-id#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e1#2, $element1#3, e2#5, $element2#6])

==

# Label inference for multiply declared variables when used in a `MATCH`.
# The next test makes sure that the inference is similar for `OPTIONAL MATCH`.
select * from graph_table(aml
  match (middle)
  match (n:Person) -> (middle) -> (n:HasId)
  return n.id)
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#7 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.middle#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.middle#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.middle#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.middle#1
                  | |   +-tail=$element_table.middle#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[middle#1, n#2, $element1#3, middle#4, $element2#5, n#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#2, $element1#3, middle#4, $element2#5, n#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=AND
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabel(parse_location=58-64, label=aml.Person)
                  | |   | | |     +-GraphLabel(parse_location=84-89, label=aml.HasId)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.middle#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element2#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=AND
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel(parse_location=58-64, label=aml.Person)
                  | |   |   |     +-GraphLabel(parse_location=84-89, label=aml.HasId)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-filter_expr=
                  | |   | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#2)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#6)
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.n#6
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.middle#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.middle#1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.middle#1])
                  +-ProjectScan
                    +-column_list=[$graph_table.id#7]
                    +-expr_list=
                    | +-id#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#2)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#2, $element1#3, middle#4, $element2#5])

==

# Multiply declared variables in optional match
select * from graph_table(aml
  match (middle)
  optional match (n:Person) -> (middle) -> (n:HasId)
  return n.id)
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#7 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.middle#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.middle#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.middle#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.middle#1
                  | |   +-tail=$element_table.middle#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[middle#1, n#2, $element1#3, middle#4, $element2#5, n#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#2, $element1#3, middle#4, $element2#5, n#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=AND
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabel(parse_location=67-73, label=aml.Person)
                  | |   | | |     +-GraphLabel(parse_location=93-98, label=aml.HasId)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.middle#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element2#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=AND
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel(parse_location=67-73, label=aml.Person)
                  | |   |   |     +-GraphLabel(parse_location=93-98, label=aml.HasId)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-filter_expr=
                  | |   | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#2)
                  | |   |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#6)
                  | |   +-head=$element_table.n#2
                  | |   +-tail=$element_table.n#6
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.middle#4)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.middle#1)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.middle#1])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.id#7]
                    +-expr_list=
                    | +-id#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#2)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[middle#1, n#2, $element1#3, $element2#5])
==

select gt.* from
graph_table(aml
  match (n:Person)
  match (m:Account)
  filter where same(n, m) and all_different(n, m) and n = m and n != m
  return n.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, m#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#2]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=63-70, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.m#2
                  | |   +-tail=$element_table.m#2
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-FilterScan
                  | +-column_list=$element_table.[n#1, m#2]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[n#1, m#2])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(3) BOOL) -> BOOL)
                  |     +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  |     | +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  |     | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |     |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.m#2)
                  |     +-FunctionCall(ZetaSQL:all_different(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  |     | +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  |     | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |     |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.m#2)
                  |     +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  |     | +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  |     | +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |     |   +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.m#2)
                  |     +-FunctionCall(ZetaSQL:$not_equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  |       +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  |       +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  |         +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.m#2)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#3]
                    +-expr_list=
                    | +-name#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, m#2])


==

select gt.* from
graph_table(aml
  match (f:Person)
  match (f:Person)-[:PersonOwnAccount]->(a:Account)
  let x = 1
  return 1 as name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.f#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.f#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.f#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.f#1
                  | |   +-tail=$element_table.f#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[f#1, f#2, $element1#3, a#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[f#2, $element1#3, a#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.f#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=63-69, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#3]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=73-89, label=aml.PersonOwnAccount)
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#4]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=95-102, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.f#2
                  | |   +-tail=$element_table.a#4
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.f#2)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.f#1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.f#1])
                  +-ProjectScan
                  | +-column_list=$element_table.[f#2, $element1#3, a#4]
                  | +-expr_list=
                  | | +-x#5 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[f#2, $element1#3, a#4])
                  +-ProjectScan
                    +-column_list=[$graph_table.name#6]
                    +-expr_list=
                    | +-name#6 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[f#2, $element1#3, a#4])
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+TABLESAMPLE,+STRATIFIED_RESERVOIR_TABLESAMPLE]
select * from graph_table(
  aml
  match (n:Person)
  return n.birthday, n.name
) as gt tablesample reservoir (1 rows partition by birthday)
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#2 AS birthday [DATE]
| +-$graph_table.name#3 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#2, name#3]
    +-input_scan=
      +-SampleScan
        +-column_list=$graph_table.[birthday#2, name#3]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=$graph_table.[birthday#2, name#3]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=$graph_table.[birthday#2, name#3]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=$graph_table.[birthday#2, name#3]
        |           +-scan_list=
        |             +-GraphScan
        |             | +-column_list=[$element_table.n#1]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=[$element_table.n#1]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.n#1]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
        |             | |   |   +-target_element_table_list=[aml.Person]
        |             | |   +-head=$element_table.n#1
        |             | |   +-tail=$element_table.n#1
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-ProjectScan
        |               +-column_list=$graph_table.[birthday#2, name#3]
        |               +-expr_list=
        |               | +-birthday#2 :=
        |               | | +-GraphGetElementProperty
        |               | |   +-type=DATE
        |               | |   +-expr=
        |               | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
        |               | |   +-property=birthday(DATE)
        |               | +-name#3 :=
        |               |   +-GraphGetElementProperty
        |               |     +-type=STRING
        |               |     +-expr=
        |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
        |               |     +-property=name(STRING)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=[$element_table.n#1])
        +-method="reservoir"
        +-size=
        | +-Literal(type=INT64, value=1)
        +-unit=ROWS
        +-partition_by_list=
          +-ColumnRef(type=DATE, column=$graph_table.birthday#2)

==

# Without RETURN_EXTENSIONS, * cannot be used with other return items
select * from
  graph_table(aml
    return *, 1 as num
  ) g1
--
ERROR: RETURN * would expand to zero columns [at 3:12]
    return *, 1 as num
           ^
==

# * cannot be used on an empty working table
select * from
  graph_table(aml
    return *, 1 as num
  ) g1
--
ERROR: RETURN * would expand to zero columns [at 3:12]
    return *, 1 as num
           ^
==

# Without EXPOSE_GRAPH_ELEMENT, * containing graph typed columns is an error
select 1 as col from
  graph_table(aml
    match (n)
    return *, 1 as id1, 2 as id2, 3 as id3
  ) g1
--
ERROR: Returning graph-typed column is not supported [at 4:12]
    return *, 1 as id1, 2 as id2, 3 as id3
           ^
==

select 1 as col from
  graph_table(aml
    match (n)
    return 1 as id1, *, 2 as id2, 3 as id3
  ) g1
--
ERROR: Returning graph-typed column is not supported [at 4:22]
    return 1 as id1, *, 2 as id2, 3 as id3
                     ^
==

select 1 as col from
  graph_table(aml
    match (n)
    return 1 as id1, 2 as id2, 3 as id3, *
  ) g1
--
ERROR: Returning graph-typed column is not supported [at 4:42]
    return 1 as id1, 2 as id2, 3 as id3, *
                                         ^
==

# Multiple * is ambiguous
select 1 as col from
  graph_table(aml
    match (n)-[e]-
    return *,*
  ) g1
--
ERROR: Ambiguous name: n [at 4:12]
    return *,*
           ^
==

# Ambiguous column name not allowed
select 1 as col from
  graph_table(aml
    match (n)-[e]-
    let col1 = n.id
    return *, 1 as col1
  ) g1
--
ERROR: Ambiguous name: col1 [at 5:12]
    return *, 1 as col1
           ^
==

# Ambiguous column name not allowed
select 1 as col from
  graph_table(aml
    match (n)-[e]-
    return n.id
    next
    return *, 1 as id
  ) g1
--
ERROR: Ambiguous name: id [at 6:12]
    return *, 1 as id
           ^
==

# Ambiguous column name not allowed
select 1 as col from
  graph_table(aml
    match (n)-[e]-
    let id = 1
    return *, n.id
  ) g1
--
ERROR: Ambiguous name: id [at 5:12]
    return *, n.id
           ^
==

# Return * is not allowed in strict mode
[show_strict_mode]
# Multiple * is ambiguous
select 1 as col from
  graph_table(aml
    match (n)-[e]-
    return *
  ) g1
--
STRICT MODE ERROR: RETURN * is not allowed in strict name resolution mode [at 5:12]
    return *
           ^
--
ERROR: Returning graph-typed column is not supported [at 5:12]
    return *
           ^
==

# RETURN * with other expressions
select * from
  graph_table(aml
    match (n)
    return n.id
    next
    return *, 1 as num1, "foo" as str
    next
    return *, 2 as num2
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#6 AS id [INT64]
| +-$graph_table.num1#7 AS num1 [INT64]
| +-$graph_table.str#8 AS str [STRING]
| +-$graph_table.num2#9 AS num2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=[$graph_table.id#2]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.n#1]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.n#1]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.n#1]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.n#1
              |   | |   +-tail=$element_table.n#1
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=[$graph_table.id#2]
              |     +-expr_list=
              |     | +-id#2 :=
              |     |   +-GraphGetElementProperty
              |     |     +-type=INT64
              |     |     +-expr=
              |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              |     |     +-property=id(INT64)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$element_table.n#1])
              +-GraphLinearScan
              | +-column_list=$graph_table.[id#3, num1#4, str#5]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[id#3, num1#4, str#5]
              |     +-expr_list=
              |     | +-id#3 := ColumnRef(type=INT64, column=$graph_table.id#2)
              |     | +-num1#4 := Literal(type=INT64, value=1)
              |     | +-str#5 := Literal(type=STRING, value="foo")
              |     +-input_scan=
              |       +-GraphRefScan(column_list=[$graph_table.id#2])
              +-GraphLinearScan
                +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
                    +-expr_list=
                    | +-id#6 := ColumnRef(type=INT64, column=$graph_table.id#3)
                    | +-num1#7 := ColumnRef(type=INT64, column=$graph_table.num1#4)
                    | +-str#8 := ColumnRef(type=STRING, column=$graph_table.str#5)
                    | +-num2#9 := Literal(type=INT64, value=2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[id#3, num1#4, str#5])
==

# WITH * with other expressions
select * from
  graph_table(aml
    match (n)
    with n.id
    with *, 1 as num1, "foo" as str
    return *, 2 as num2
  ) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#6 AS id [INT64]
| +-$graph_table.num1#7 AS num1 [INT64]
| +-$graph_table.str#8 AS str [STRING]
| +-$graph_table.num2#9 AS num2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.id#2]
                  | +-expr_list=
                  | | +-id#2 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-ProjectScan
                  | +-column_list=$graph_table.[id#3, num1#4, str#5]
                  | +-expr_list=
                  | | +-id#3 := ColumnRef(type=INT64, column=$graph_table.id#2)
                  | | +-num1#4 := Literal(type=INT64, value=1)
                  | | +-str#5 := Literal(type=STRING, value="foo")
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.id#2])
                  +-ProjectScan
                    +-column_list=$graph_table.[id#6, num1#7, str#8, num2#9]
                    +-expr_list=
                    | +-id#6 := ColumnRef(type=INT64, column=$graph_table.id#3)
                    | +-num1#7 := ColumnRef(type=INT64, column=$graph_table.num1#4)
                    | +-str#8 := ColumnRef(type=STRING, column=$graph_table.str#5)
                    | +-num2#9 := Literal(type=INT64, value=2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[id#3, num1#4, str#5])
==

[run_sqlbuilder]
[show_sqlbuilder_output]
# Consecutive WITH statements (test SQLBuilder)
select gt.* from
graph_table(aml
  match (n)
  with n.id
  with *, 1 as num1, "foo" as str
  match (m)
  with *, 2 as num2
  with sum(m.id) as agg, *
  return m.name, num2, agg
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#18 AS name [STRING]
| +-$graph_table.num2#19 AS num2 [INT64]
| +-$graph_table.agg#20 AS agg [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#18, num2#19, agg#20]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#18, num2#19, agg#20]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#18, num2#19, agg#20]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#18, num2#19, agg#20]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.id#2]
                  | +-expr_list=
                  | | +-id#2 :=
                  | |   +-GraphGetElementProperty
                  | |     +-type=INT64
                  | |     +-expr=
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |     +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1])
                  +-ProjectScan
                  | +-column_list=$graph_table.[id#3, num1#4, str#5]
                  | +-expr_list=
                  | | +-id#3 := ColumnRef(type=INT64, column=$graph_table.id#2)
                  | | +-num1#4 := Literal(type=INT64, value=1)
                  | | +-str#5 := Literal(type=STRING, value="foo")
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.id#2])
                  +-GraphScan
                  | +-column_list=[$graph_table.id#3, $graph_table.num1#4, $graph_table.str#5, $element_table.m#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.m#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.m#6
                  | |   +-tail=$element_table.m#6
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[id#3, num1#4, str#5])
                  +-ProjectScan
                  | +-column_list=$graph_table.[id#7, num1#8, str#9, m#10, num2#11]
                  | +-expr_list=
                  | | +-id#7 := ColumnRef(type=INT64, column=$graph_table.id#3)
                  | | +-num1#8 := ColumnRef(type=INT64, column=$graph_table.num1#4)
                  | | +-str#9 := ColumnRef(type=STRING, column=$graph_table.str#5)
                  | | +-m#10 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#6)
                  | | +-num2#11 := Literal(type=INT64, value=2)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.id#3, $graph_table.num1#4, $graph_table.str#5, $element_table.m#6])
                  +-ProjectScan
                  | +-column_list=$graph_table.[agg#12, id#13, num1#14, str#15, m#16, num2#17]
                  | +-input_scan=
                  |   +-AggregateScan
                  |     +-column_list=$graph_table.[id#13, num1#14, str#15, m#16, num2#17, agg#12]
                  |     +-input_scan=
                  |     | +-GraphRefScan(column_list=$graph_table.[id#7, num1#8, str#9, m#10, num2#11])
                  |     +-group_by_list=
                  |     | +-id#13 := ColumnRef(type=INT64, column=$graph_table.id#7)
                  |     | +-num1#14 := ColumnRef(type=INT64, column=$graph_table.num1#8)
                  |     | +-str#15 := ColumnRef(type=STRING, column=$graph_table.str#9)
                  |     | +-m#16 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#10)
                  |     | +-num2#17 := ColumnRef(type=INT64, column=$graph_table.num2#11)
                  |     +-aggregate_list=
                  |       +-agg#12 :=
                  |         +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=INT64
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#10)
                  |             +-property=id(INT64)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#18, num2#19, agg#20]
                    +-expr_list=
                    | +-name#18 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#16)
                    | |   +-property=name(STRING)
                    | +-num2#19 := ColumnRef(type=INT64, column=$graph_table.num2#17)
                    | +-agg#20 := ColumnRef(type=INT64, column=$graph_table.agg#12)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[agg#12, id#13, num1#14, str#15, m#16, num2#17])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_19 AS name,
  aml_1.a_20 AS num2,
  aml_1.a_21 AS agg
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    WITH
      a_2.id AS a_3
    WITH
      a_3 AS a_4,
      1 AS a_5,
      "foo" AS a_6
    MATCH
      (a_7
      IS (% | ! %))
    WITH
      a_4 AS a_8,
      a_5 AS a_9,
      a_6 AS a_10,
      a_7 AS a_11,
      2 AS a_12
    WITH
      a_8 AS a_14,
      a_9 AS a_15,
      a_10 AS a_16,
      a_11 AS a_17,
      a_12 AS a_18,
      SUM(a_11.id) AS a_13
    WITH
      a_13,
      a_14,
      a_15,
      a_16,
      a_17,
      a_18
    RETURN
      a_17.name AS a_19,
      a_18 AS a_20,
      a_13 AS a_21
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    WITH
      a_2.id AS a_3
    WITH
      a_3 AS a_4,
      1 AS a_5,
      "foo" AS a_6
    MATCH
      (a_7
      IS (% | ! %))
    WITH
      a_4 AS a_8,
      a_5 AS a_9,
      a_6 AS a_10,
      a_7 AS a_11,
      2 AS a_12
    WITH
      a_8 AS a_14,
      a_9 AS a_15,
      a_10 AS a_16,
      a_11 AS a_17,
      a_12 AS a_18,
      SUM(a_11.id) AS a_13
    WITH
      a_13,
      a_14,
      a_15,
      a_16,
      a_17,
      a_18
    RETURN
      a_17.name AS a_19,
      a_18 AS a_20,
      a_13 AS a_21
  ) AS aml_1
|> SELECT
     aml_1.a_19 AS name,
     aml_1.a_20 AS num2,
     aml_1.a_21 AS agg;
==

# This test case is for name resolution.
[run_sqlbuilder]
[show_sqlbuilder_output]
[no_show_resolved_ast]
select * from
  graph_table(aml
    MATCH (m) -[:Transfer]-> (n)
    MATCH ((a) -[:Transfer]-> (n) WHERE a.id > {{m|n}}.id)
    RETURN
      a.id AS aid, m.id AS mid, n.id AS nid
  ) g1
--
ALTERNATION GROUP: m
--
ERROR: Name 'm', defined in the previous statement, can only be referenced in the outermost WHERE clause of MATCH [at 4:48]
    MATCH ((a) -[:Transfer]-> (n) WHERE a.id > m.id)
                                               ^
--
ALTERNATION GROUP: n
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_8 AS aid,
  aml_1.a_9 AS mid,
  aml_1.a_10 AS nid
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Transfer]->
      (a_4
      IS (% | ! %))
    MATCH
      (
        (a_5
        IS (% | ! %))
        -[a_6
        IS Transfer]->
        (a_7
        IS (% | ! %))
        WHERE
          (a_5.id) > (a_7.id)
      )
      WHERE
        a_7 = a_4
    RETURN
      a_5.id AS a_8,
      a_2.id AS a_9,
      a_7.id AS a_10
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Transfer]->
      (a_4
      IS (% | ! %))
    MATCH
      (
        (a_5
        IS (% | ! %))
        -[a_6
        IS Transfer]->
        (a_7
        IS (% | ! %))
        WHERE
          (a_5.id) > (a_7.id)
      )
      WHERE
        a_7 = a_4
    RETURN
      a_5.id AS a_8,
      a_2.id AS a_9,
      a_7.id AS a_10
  ) AS aml_1
|> SELECT
     aml_1.a_8 AS aid,
     aml_1.a_9 AS mid,
     aml_1.a_10 AS nid;
==

# This test case is for name resolution.
[run_sqlbuilder]
[show_sqlbuilder_output]
[no_show_resolved_ast]
select exists(
  select 1 from graph_table(aml
    match (m) -[:Transfer]-> (n)
    match ((a) -[:Transfer]-> (n) WHERE a.id > {{m|n}}.id)
    return n.id AS nid))
from (select struct(1 as id) AS m, struct(2 as id) as n)
--
ALTERNATION GROUP: m
--
ERROR: Name 'm', defined in the previous statement, can only be referenced in the outermost WHERE clause of MATCH [at 4:48]
    match ((a) -[:Transfer]-> (n) WHERE a.id > m.id)
                                               ^
--
ALTERNATION GROUP: n
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  EXISTS(
    SELECT
      1 AS a_14
    FROM
      (
        SELECT
          aml_5.a_12 AS a_12
        FROM
          GRAPH_TABLE(
            aml
            MATCH
              (a_6
              IS (% | ! %))
              -[a_7
              IS Transfer]->
              (a_8
              IS (% | ! %))
            MATCH
              (
                (a_9
                IS (% | ! %))
                -[a_10
                IS Transfer]->
                (a_11
                IS (% | ! %))
                WHERE
                  (a_9.id) > (a_11.id)
              )
              WHERE
                a_11 = a_8
            RETURN
              a_11.id AS a_12
          ) AS aml_5
      ) AS graphtablescan_13
  ) AS a_4
FROM
  (
    SELECT
      STRUCT< id INT64 > (1) AS a_1,
      STRUCT< id INT64 > (2) AS a_2
  ) AS projectscan_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  STRUCT< id INT64 > (1) AS a_1,
  STRUCT< id INT64 > (2) AS a_2
|> AS projectscan_3
|> SELECT
     EXISTS(
       FROM
         GRAPH_TABLE(
           aml
           MATCH
             (a_6
             IS (% | ! %))
             -[a_7
             IS Transfer]->
             (a_8
             IS (% | ! %))
           MATCH
             (
               (a_9
               IS (% | ! %))
               -[a_10
               IS Transfer]->
               (a_11
               IS (% | ! %))
               WHERE
                 (a_9.id) > (a_11.id)
             )
             WHERE
               a_11 = a_8
           RETURN
             a_11.id AS a_12
         ) AS aml_5
       |> SELECT
            aml_5.a_12 AS a_12
       |> AS graphtablescan_13
       |> SELECT
            1 AS a_14
     ) AS a_4;
==

# SQLBuilder test: $make_array unparses without explicit graph element type
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
[run_sqlbuilder]
[show_sqlbuilder_output]
select 1 from
graph_table(aml
  match (n:Account)-[e]-(m:Syndicate)
  return [m, n] as arr
) gt
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 := Literal(type=INT64, value=1)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.arr#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.arr#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.arr#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, m#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, m#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=41-48, label=aml.Account)
                  | |   | | +-target_element_table_list=[aml.Account]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=57-66, label=aml.Syndicate)
                  | |   |   +-target_element_table_list=[aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.arr#4]
                    +-expr_list=
                    | +-arr#4 :=
                    |   +-FunctionCall(ZetaSQL:$make_array(repeated(2) GRAPH_NODE(aml)<balance UINT64, id INT64, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<GRAPH_NODE(aml)<balance UINT64, id INT64, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>)
                    |     +-Cast(GRAPH_NODE(aml)<syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING> -> GRAPH_NODE(aml)<balance UINT64, id INT64, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
                    |     +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<balance UINT64, id INT64, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                    |       +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.n#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, m#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_7
FROM
  (
    SELECT
      aml_1.a_5 AS a_5
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS Account)
          -[a_3
          IS (% | ! %)]-
          (a_4
          IS Syndicate)
        RETURN
          ARRAY[a_4, a_2] AS a_5
      ) AS aml_1
  ) AS graphtablescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Account)
      -[a_3
      IS (% | ! %)]-
      (a_4
      IS Syndicate)
    RETURN
      ARRAY[a_4, a_2] AS a_5
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS a_5
|> AS graphtablescan_6
|> SELECT
     1 AS a_7;
==

# Regression tests for b/411713067
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a:Person)-[e]->{1}(:Person)
  RETURN 1 AS one
  LIMIT 1

  NEXT

  MATCH (a:Person)-[e]->{1}(:Person)
  RETURN 1 AS one
  LIMIT 1
) AS g
--

QueryStmt
+-output_column_list=
| +-$graph_table.one#22 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#22]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#22]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#22]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=[$graph_table.one#11]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.$element3#10]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.$element3#10]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphPathScan
              |   | |   | | +-column_list=$path_scan.[$head#8, $tail#9]
              |   | |   | | +-input_scan_list=
              |   | |   | | | +-GraphNodeScan
              |   | |   | | | | +-column_list=[$element_table.$element1#2]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | | +-GraphEdgeScan
              |   | |   | | | | +-column_list=[$element_table.e#3]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | | | +-orientation=RIGHT
              |   | |   | | | +-GraphNodeScan
              |   | |   | | |   +-column_list=[$element_table.$element2#4]
              |   | |   | | |   +-label_expr=
              |   | |   | | |   | +-GraphLabelNaryExpr
              |   | |   | | |   |   +-op=OR
              |   | |   | | |   |   +-operand_list=
              |   | |   | | |   |     +-GraphWildCardLabel
              |   | |   | | |   |     +-GraphLabelNaryExpr
              |   | |   | | |   |       +-op=NOT
              |   | |   | | |   |       +-operand_list=
              |   | |   | | |   |         +-GraphWildCardLabel
              |   | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | +-head=$path_scan.$head#8
              |   | |   | | +-tail=$path_scan.$tail#9
              |   | |   | | +-quantifier=
              |   | |   | | | +-GraphPathPatternQuantifier
              |   | |   | | |   +-lower_bound=
              |   | |   | | |   | +-Literal(type=INT64, value=1)
              |   | |   | | |   +-upper_bound=
              |   | |   | | |     +-Literal(type=INT64, value=1)
              |   | |   | | +-group_variable_list=
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element3#10]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=62-68, label=aml.Person)
              |   | |   |   +-target_element_table_list=[aml.Person]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.$element3#10
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-LimitOffsetScan
              |     +-column_list=[$graph_table.one#11]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=[$graph_table.one#11]
              |     |   +-expr_list=
              |     |   | +-one#11 := Literal(type=INT64, value=1)
              |     |   +-input_scan=
              |     |     +-GraphRefScan(column_list=$element_table.[a#1, $element3#10])
              |     +-limit=
              |       +-Literal(type=INT64, value=1)
              +-GraphLinearScan
                +-column_list=[$graph_table.one#22]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.one#11, $element_table.a#12, $path_scan.$head#19, $path_scan.$tail#20, $element_table.$element6#21]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#12, $path_scan.$head#19, $path_scan.$tail#20, $element_table.$element6#21]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#12]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=118-124, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$path_scan.[$head#19, $tail#20]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element4#13]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#14]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element5#15]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#19
                  | |   | | +-tail=$path_scan.$tail#20
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=1)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element4#13, array=$element_table.$element4#16)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#14, array=$element_table.e#17)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element5#15, array=$element_table.$element5#18)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element6#21]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=136-142, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#12
                  | |   +-tail=$element_table.$element6#21
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.one#11])
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.one#22]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.one#22]
                    |   +-expr_list=
                    |   | +-one#22 := Literal(type=INT64, value=1)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$graph_table.one#11, $element_table.a#12, $element_table.$element6#21])
                    +-limit=
                      +-Literal(type=INT64, value=1)
==

# Ensure the group name list is updated correctly with RETURN
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a:Person)-[e]->{3}(:Person)
  RETURN e AS e1, e AS e2
  LIMIT 1

  NEXT

  MATCH (a:Person)-[{{e|e1}}]->{{|{1} }}(:Person)
  RETURN 1 AS one
  LIMIT 1
) AS g
--

ALTERNATION GROUP: e,
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#16 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#16]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#16]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#16]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[e1#11, e2#12]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphPathScan
              |   | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
              |   | |   | | +-input_scan_list=
              |   | |   | | | +-GraphNodeScan
              |   | |   | | | | +-column_list=[$element_table.$element1#2]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | | +-GraphEdgeScan
              |   | |   | | | | +-column_list=[$element_table.e#3]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | | | +-orientation=RIGHT
              |   | |   | | | +-GraphNodeScan
              |   | |   | | |   +-column_list=[$element_table.$element2#4]
              |   | |   | | |   +-label_expr=
              |   | |   | | |   | +-GraphLabelNaryExpr
              |   | |   | | |   |   +-op=OR
              |   | |   | | |   |   +-operand_list=
              |   | |   | | |   |     +-GraphWildCardLabel
              |   | |   | | |   |     +-GraphLabelNaryExpr
              |   | |   | | |   |       +-op=NOT
              |   | |   | | |   |       +-operand_list=
              |   | |   | | |   |         +-GraphWildCardLabel
              |   | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | +-head=$path_scan.$head#8
              |   | |   | | +-tail=$path_scan.$tail#9
              |   | |   | | +-quantifier=
              |   | |   | | | +-GraphPathPatternQuantifier
              |   | |   | | |   +-lower_bound=
              |   | |   | | |   | +-Literal(type=INT64, value=3)
              |   | |   | | |   +-upper_bound=
              |   | |   | | |     +-Literal(type=INT64, value=3)
              |   | |   | | +-group_variable_list=
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element3#10]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=62-68, label=aml.Person)
              |   | |   |   +-target_element_table_list=[aml.Person]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.$element3#10
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-LimitOffsetScan
              |     +-column_list=$graph_table.[e1#11, e2#12]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=$graph_table.[e1#11, e2#12]
              |     |   +-expr_list=
              |     |   | +-e1#11 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |     |   | +-e2#12 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |     |   +-input_scan=
              |     |     +-GraphRefScan(column_list=$element_table.[a#1, e#6, $element3#10])
              |     +-limit=
              |       +-Literal(type=INT64, value=1)
              +-GraphLinearScan
                +-column_list=[$graph_table.one#16]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.e1#11, $graph_table.e2#12, $element_table.a#13, $element_table.e#14, $element_table.$element4#15]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#13, e#14, $element4#15]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#13]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=126-132, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#14]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element4#15]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=141-147, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#13
                  | |   +-tail=$element_table.$element4#15
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[e1#11, e2#12])
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.one#16]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.one#16]
                    |   +-expr_list=
                    |   | +-one#16 := Literal(type=INT64, value=1)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$graph_table.e1#11, $graph_table.e2#12, $element_table.a#13, $element_table.e#14, $element_table.$element4#15])
                    +-limit=
                      +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: e,{1} 
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#23 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#23]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#23]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#23]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[e1#11, e2#12]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphPathScan
              |   | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
              |   | |   | | +-input_scan_list=
              |   | |   | | | +-GraphNodeScan
              |   | |   | | | | +-column_list=[$element_table.$element1#2]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | | +-GraphEdgeScan
              |   | |   | | | | +-column_list=[$element_table.e#3]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | | | +-orientation=RIGHT
              |   | |   | | | +-GraphNodeScan
              |   | |   | | |   +-column_list=[$element_table.$element2#4]
              |   | |   | | |   +-label_expr=
              |   | |   | | |   | +-GraphLabelNaryExpr
              |   | |   | | |   |   +-op=OR
              |   | |   | | |   |   +-operand_list=
              |   | |   | | |   |     +-GraphWildCardLabel
              |   | |   | | |   |     +-GraphLabelNaryExpr
              |   | |   | | |   |       +-op=NOT
              |   | |   | | |   |       +-operand_list=
              |   | |   | | |   |         +-GraphWildCardLabel
              |   | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | +-head=$path_scan.$head#8
              |   | |   | | +-tail=$path_scan.$tail#9
              |   | |   | | +-quantifier=
              |   | |   | | | +-GraphPathPatternQuantifier
              |   | |   | | |   +-lower_bound=
              |   | |   | | |   | +-Literal(type=INT64, value=3)
              |   | |   | | |   +-upper_bound=
              |   | |   | | |     +-Literal(type=INT64, value=3)
              |   | |   | | +-group_variable_list=
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element3#10]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=62-68, label=aml.Person)
              |   | |   |   +-target_element_table_list=[aml.Person]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.$element3#10
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-LimitOffsetScan
              |     +-column_list=$graph_table.[e1#11, e2#12]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=$graph_table.[e1#11, e2#12]
              |     |   +-expr_list=
              |     |   | +-e1#11 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |     |   | +-e2#12 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |     |   +-input_scan=
              |     |     +-GraphRefScan(column_list=$element_table.[a#1, e#6, $element3#10])
              |     +-limit=
              |       +-Literal(type=INT64, value=1)
              +-GraphLinearScan
                +-column_list=[$graph_table.one#23]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.e1#11, $graph_table.e2#12, $element_table.a#13, $path_scan.$head#20, $path_scan.$tail#21, $element_table.$element6#22]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#13, $path_scan.$head#20, $path_scan.$tail#21, $element_table.$element6#22]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#13]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=126-132, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$path_scan.[$head#20, $tail#21]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element4#14]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#15]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element5#16]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#20
                  | |   | | +-tail=$path_scan.$tail#21
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=1)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element4#14, array=$element_table.$element4#17)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#15, array=$element_table.e#18)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element5#16, array=$element_table.$element5#19)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element6#22]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=145-151, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#13
                  | |   +-tail=$element_table.$element6#22
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[e1#11, e2#12])
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.one#23]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.one#23]
                    |   +-expr_list=
                    |   | +-one#23 := Literal(type=INT64, value=1)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$graph_table.e1#11, $graph_table.e2#12, $element_table.a#13, $element_table.$element6#22])
                    +-limit=
                      +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: e1,
--
ERROR: `e1` is not a graph element column and cannot be redeclared [at 9:9]
  MATCH (a:Person)-[e1]->(:Person)
        ^
--
ALTERNATION GROUP: e1,{1} 
--
ERROR: Variable name: e1 cannot be used in both quantified and unquantified patterns [at 9:9]
  MATCH (a:Person)-[e1]->{1} (:Person)
        ^
==

# Same as above, but with WITH
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a:Person)-[e]->{1}(:Person)
  WITH 1 AS one
  RETURN * LIMIT 1

  NEXT

  MATCH (a:Person)-[e]->{1}(:Person)
  WITH 1 AS one
  RETURN * LIMIT 1
) AS g
--

QueryStmt
+-output_column_list=
| +-$graph_table.one#24 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#24]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#24]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#24]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=[$graph_table.one#12]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.$element3#10]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.$element3#10]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphPathScan
              |   | |   | | +-column_list=$path_scan.[$head#8, $tail#9]
              |   | |   | | +-input_scan_list=
              |   | |   | | | +-GraphNodeScan
              |   | |   | | | | +-column_list=[$element_table.$element1#2]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | | +-GraphEdgeScan
              |   | |   | | | | +-column_list=[$element_table.e#3]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | | | +-orientation=RIGHT
              |   | |   | | | +-GraphNodeScan
              |   | |   | | |   +-column_list=[$element_table.$element2#4]
              |   | |   | | |   +-label_expr=
              |   | |   | | |   | +-GraphLabelNaryExpr
              |   | |   | | |   |   +-op=OR
              |   | |   | | |   |   +-operand_list=
              |   | |   | | |   |     +-GraphWildCardLabel
              |   | |   | | |   |     +-GraphLabelNaryExpr
              |   | |   | | |   |       +-op=NOT
              |   | |   | | |   |       +-operand_list=
              |   | |   | | |   |         +-GraphWildCardLabel
              |   | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | +-head=$path_scan.$head#8
              |   | |   | | +-tail=$path_scan.$tail#9
              |   | |   | | +-quantifier=
              |   | |   | | | +-GraphPathPatternQuantifier
              |   | |   | | |   +-lower_bound=
              |   | |   | | |   | +-Literal(type=INT64, value=1)
              |   | |   | | |   +-upper_bound=
              |   | |   | | |     +-Literal(type=INT64, value=1)
              |   | |   | | +-group_variable_list=
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element3#10]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=62-68, label=aml.Person)
              |   | |   |   +-target_element_table_list=[aml.Person]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.$element3#10
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |   | +-column_list=[$graph_table.one#11]
              |   | +-expr_list=
              |   | | +-one#11 := Literal(type=INT64, value=1)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=$element_table.[a#1, $element3#10])
              |   +-LimitOffsetScan
              |     +-column_list=[$graph_table.one#12]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=[$graph_table.one#12]
              |     |   +-expr_list=
              |     |   | +-one#12 := ColumnRef(type=INT64, column=$graph_table.one#11)
              |     |   +-input_scan=
              |     |     +-GraphRefScan(column_list=[$graph_table.one#11])
              |     +-limit=
              |       +-Literal(type=INT64, value=1)
              +-GraphLinearScan
                +-column_list=[$graph_table.one#24]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.one#12, $element_table.a#13, $path_scan.$head#20, $path_scan.$tail#21, $element_table.$element6#22]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#13, $path_scan.$head#20, $path_scan.$tail#21, $element_table.$element6#22]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#13]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=125-131, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$path_scan.[$head#20, $tail#21]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element4#14]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#15]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element5#16]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#20
                  | |   | | +-tail=$path_scan.$tail#21
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=1)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element4#14, array=$element_table.$element4#17)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#15, array=$element_table.e#18)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element5#16, array=$element_table.$element5#19)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element6#22]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=143-149, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#13
                  | |   +-tail=$element_table.$element6#22
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.one#12])
                  +-ProjectScan
                  | +-column_list=[$graph_table.one#23]
                  | +-expr_list=
                  | | +-one#23 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.one#12, $element_table.a#13, $element_table.$element6#22])
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.one#24]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.one#24]
                    |   +-expr_list=
                    |   | +-one#24 := ColumnRef(type=INT64, column=$graph_table.one#23)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$graph_table.one#23])
                    +-limit=
                      +-Literal(type=INT64, value=1)
==

# Ensure the group name list is updated correctly with WITH
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a:Person)-[e]->{3}(:Person)
  WITH e AS e1, e AS e2
  RETURN * LIMIT 1

  NEXT

  MATCH (a:Person)-[{{e|e1}}]->{{|{1} }}(:Person)
  WITH 1 AS one
  RETURN * LIMIT 1
) AS g
--
ALTERNATION GROUP: e,
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#19 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#19]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#19]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#19]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[e1#13, e2#14]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphPathScan
              |   | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
              |   | |   | | +-input_scan_list=
              |   | |   | | | +-GraphNodeScan
              |   | |   | | | | +-column_list=[$element_table.$element1#2]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | | +-GraphEdgeScan
              |   | |   | | | | +-column_list=[$element_table.e#3]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | | | +-orientation=RIGHT
              |   | |   | | | +-GraphNodeScan
              |   | |   | | |   +-column_list=[$element_table.$element2#4]
              |   | |   | | |   +-label_expr=
              |   | |   | | |   | +-GraphLabelNaryExpr
              |   | |   | | |   |   +-op=OR
              |   | |   | | |   |   +-operand_list=
              |   | |   | | |   |     +-GraphWildCardLabel
              |   | |   | | |   |     +-GraphLabelNaryExpr
              |   | |   | | |   |       +-op=NOT
              |   | |   | | |   |       +-operand_list=
              |   | |   | | |   |         +-GraphWildCardLabel
              |   | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | +-head=$path_scan.$head#8
              |   | |   | | +-tail=$path_scan.$tail#9
              |   | |   | | +-quantifier=
              |   | |   | | | +-GraphPathPatternQuantifier
              |   | |   | | |   +-lower_bound=
              |   | |   | | |   | +-Literal(type=INT64, value=3)
              |   | |   | | |   +-upper_bound=
              |   | |   | | |     +-Literal(type=INT64, value=3)
              |   | |   | | +-group_variable_list=
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element3#10]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=62-68, label=aml.Person)
              |   | |   |   +-target_element_table_list=[aml.Person]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.$element3#10
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |   | +-column_list=$graph_table.[e1#11, e2#12]
              |   | +-expr_list=
              |   | | +-e1#11 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |   | | +-e2#12 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=$element_table.[a#1, e#6, $element3#10])
              |   +-LimitOffsetScan
              |     +-column_list=$graph_table.[e1#13, e2#14]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=$graph_table.[e1#13, e2#14]
              |     |   +-expr_list=
              |     |   | +-e1#13 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.e1#11)
              |     |   | +-e2#14 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.e2#12)
              |     |   +-input_scan=
              |     |     +-GraphRefScan(column_list=$graph_table.[e1#11, e2#12])
              |     +-limit=
              |       +-Literal(type=INT64, value=1)
              +-GraphLinearScan
                +-column_list=[$graph_table.one#19]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.e1#13, $graph_table.e2#14, $element_table.a#15, $element_table.e#16, $element_table.$element4#17]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#15, e#16, $element4#17]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#15]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=133-139, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#16]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element4#17]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=148-154, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#15
                  | |   +-tail=$element_table.$element4#17
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[e1#13, e2#14])
                  +-ProjectScan
                  | +-column_list=[$graph_table.one#18]
                  | +-expr_list=
                  | | +-one#18 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.e1#13, $graph_table.e2#14, $element_table.a#15, $element_table.e#16, $element_table.$element4#17])
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.one#19]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.one#19]
                    |   +-expr_list=
                    |   | +-one#19 := ColumnRef(type=INT64, column=$graph_table.one#18)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$graph_table.one#18])
                    +-limit=
                      +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: e,{1} 
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#26 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#26]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#26]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#26]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[e1#13, e2#14]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphPathScan
              |   | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
              |   | |   | | +-input_scan_list=
              |   | |   | | | +-GraphNodeScan
              |   | |   | | | | +-column_list=[$element_table.$element1#2]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | | +-GraphEdgeScan
              |   | |   | | | | +-column_list=[$element_table.e#3]
              |   | |   | | | | +-label_expr=
              |   | |   | | | | | +-GraphLabelNaryExpr
              |   | |   | | | | |   +-op=OR
              |   | |   | | | | |   +-operand_list=
              |   | |   | | | | |     +-GraphWildCardLabel
              |   | |   | | | | |     +-GraphLabelNaryExpr
              |   | |   | | | | |       +-op=NOT
              |   | |   | | | | |       +-operand_list=
              |   | |   | | | | |         +-GraphWildCardLabel
              |   | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | | | +-orientation=RIGHT
              |   | |   | | | +-GraphNodeScan
              |   | |   | | |   +-column_list=[$element_table.$element2#4]
              |   | |   | | |   +-label_expr=
              |   | |   | | |   | +-GraphLabelNaryExpr
              |   | |   | | |   |   +-op=OR
              |   | |   | | |   |   +-operand_list=
              |   | |   | | |   |     +-GraphWildCardLabel
              |   | |   | | |   |     +-GraphLabelNaryExpr
              |   | |   | | |   |       +-op=NOT
              |   | |   | | |   |       +-operand_list=
              |   | |   | | |   |         +-GraphWildCardLabel
              |   | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | | +-head=$path_scan.$head#8
              |   | |   | | +-tail=$path_scan.$tail#9
              |   | |   | | +-quantifier=
              |   | |   | | | +-GraphPathPatternQuantifier
              |   | |   | | |   +-lower_bound=
              |   | |   | | |   | +-Literal(type=INT64, value=3)
              |   | |   | | |   +-upper_bound=
              |   | |   | | |     +-Literal(type=INT64, value=3)
              |   | |   | | +-group_variable_list=
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
              |   | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.$element3#10]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=62-68, label=aml.Person)
              |   | |   |   +-target_element_table_list=[aml.Person]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.$element3#10
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |   | +-column_list=$graph_table.[e1#11, e2#12]
              |   | +-expr_list=
              |   | | +-e1#11 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |   | | +-e2#12 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
              |   | +-input_scan=
              |   |   +-GraphRefScan(column_list=$element_table.[a#1, e#6, $element3#10])
              |   +-LimitOffsetScan
              |     +-column_list=$graph_table.[e1#13, e2#14]
              |     +-input_scan=
              |     | +-ProjectScan
              |     |   +-column_list=$graph_table.[e1#13, e2#14]
              |     |   +-expr_list=
              |     |   | +-e1#13 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.e1#11)
              |     |   | +-e2#14 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.e2#12)
              |     |   +-input_scan=
              |     |     +-GraphRefScan(column_list=$graph_table.[e1#11, e2#12])
              |     +-limit=
              |       +-Literal(type=INT64, value=1)
              +-GraphLinearScan
                +-column_list=[$graph_table.one#26]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.e1#13, $graph_table.e2#14, $element_table.a#15, $path_scan.$head#22, $path_scan.$tail#23, $element_table.$element6#24]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#15, $path_scan.$head#22, $path_scan.$tail#23, $element_table.$element6#24]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#15]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=133-139, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$path_scan.[$head#22, $tail#23]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element4#16]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#17]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element5#18]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#22
                  | |   | | +-tail=$path_scan.$tail#23
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=1)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element4#16, array=$element_table.$element4#19)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#17, array=$element_table.e#20)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element5#18, array=$element_table.$element5#21)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element6#24]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=152-158, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.a#15
                  | |   +-tail=$element_table.$element6#24
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[e1#13, e2#14])
                  +-ProjectScan
                  | +-column_list=[$graph_table.one#25]
                  | +-expr_list=
                  | | +-one#25 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.e1#13, $graph_table.e2#14, $element_table.a#15, $element_table.$element6#24])
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.one#26]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.one#26]
                    |   +-expr_list=
                    |   | +-one#26 := ColumnRef(type=INT64, column=$graph_table.one#25)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$graph_table.one#25])
                    +-limit=
                      +-Literal(type=INT64, value=1)
--
ALTERNATION GROUP: e1,
--
ERROR: `e1` is not a graph element column and cannot be redeclared [at 9:9]
  MATCH (a:Person)-[e1]->(:Person)
        ^
--
ALTERNATION GROUP: e1,{1} 
--
ERROR: Variable name: e1 cannot be used in both quantified and unquantified patterns [at 9:9]
  MATCH (a:Person)-[e1]->{1} (:Person)
        ^

==

[no_enable_literal_replacement]
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+ORDER_BY_IN_AGGREGATE]
select * from graph_table(aml
  let x = [1,2,3]
  let z = ARRAY_AGG(distinct x+1 order by x+1)
  let z2 = ARRAY_AGG(distinct x+1 order by x+1)
  return z, z2
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.z#8 AS z [ARRAY<INT64>]
| +-$graph_table.z2#9 AS z2 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[z#8, z2#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[z#8, z2#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[z#8, z2#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[z#8, z2#9]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#1, z#4]
                  | +-expr_list=
                  | | +-z#4 :=
                  | |   +-ArrayAggregate
                  | |     +-type=ARRAY<INT64>
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<INT64>, column=$graph_table.x#1)
                  | |     +-element_column=$horizontal_aggregate.x#2
                  | |     +-pre_aggregate_computed_column_list=
                  | |     | +-$orderbycol1#3 :=
                  | |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  | |     |     +-ColumnRef(type=INT64, column=$horizontal_aggregate.x#2)
                  | |     |     +-Literal(type=INT64, value=1)
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                  | |         +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#3)
                  | |         +-distinct=TRUE
                  | |         +-order_by_item_list=
                  | |           +-OrderByItem
                  | |             +-column_ref=
                  | |               +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#1])
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#1, z#4, z2#7]
                  | +-expr_list=
                  | | +-z2#7 :=
                  | |   +-ArrayAggregate
                  | |     +-type=ARRAY<INT64>
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<INT64>, column=$graph_table.x#1)
                  | |     +-element_column=$horizontal_aggregate.x#5
                  | |     +-pre_aggregate_computed_column_list=
                  | |     | +-$orderbycol1#6 :=
                  | |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  | |     |     +-ColumnRef(type=INT64, column=$horizontal_aggregate.x#5)
                  | |     |     +-Literal(type=INT64, value=1)
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                  | |         +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
                  | |         +-distinct=TRUE
                  | |         +-order_by_item_list=
                  | |           +-OrderByItem
                  | |             +-column_ref=
                  | |               +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[x#1, z#4])
                  +-ProjectScan
                    +-column_list=$graph_table.[z#8, z2#9]
                    +-expr_list=
                    | +-z#8 := ColumnRef(type=ARRAY<INT64>, column=$graph_table.z#4)
                    | +-z2#9 := ColumnRef(type=ARRAY<INT64>, column=$graph_table.z2#7)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[x#1, z#4, z2#7])
