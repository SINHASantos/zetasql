# Test file for complex multi-level aggregate queries.
[default language_features=MAXIMUM,+MULTILEVEL_AGGREGATION,+WITH_GROUP_ROWS,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ANALYTIC_FUNCTIONS,+QUALIFY,+GROUPING_BUILTIN,+GROUP_BY_STRUCT,+ENFORCE_CONDITIONAL_EVALUATION,+LIKE_ANY_SOME_ALL]
[default show_sqlbuilder_output]

SELECT
  (1
    IN (
      SELECT
        SUM(MIN(int64) GROUP BY bool)
      FROM SimpleTypes
    )
  )
--
QueryStmt
+-output_column_list=
| +-$query.$col1#23 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#23]
    +-expr_list=
    | +-$col1#23 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-Literal(type=INT64, value=1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#22]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#22]
    |             +-input_scan=
    |             | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
    |             +-aggregate_list=
    |               +-$agg1#22 :=
    |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                   +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
    |                   +-group_by_list=
    |                   | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    |                   +-group_by_aggregate_list=
    |                     +-$agg1#21 :=
    |                       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
    |                         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (1 IN (
    SELECT
      SUM(MIN(simpletypes_4.a_2)
        GROUP BY simpletypes_4.a_3) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_2,
          SimpleTypes.bool AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
  )) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  (1 IN (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int64 AS a_2,
         SimpleTypes.bool AS a_3
    |> AS simpletypes_4
    |> AGGREGATE
         SUM(MIN(simpletypes_4.a_2)
           GROUP BY simpletypes_4.a_3) AS a_5)) AS a_1;
==

SELECT
  (SUM(MIN(int64) GROUP BY bool)
    IN (
      SELECT
        SUM(MIN(int64) GROUP BY bool)
      FROM SimpleTypes
    )
  )
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#67 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#67]
    +-expr_list=
    | +-$col1#67 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1#22)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#66]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#66]
    |             +-input_scan=
    |             | +-TableScan(column_list=SimpleTypes.[int64#46, bool#51], table=SimpleTypes, column_index_list=[1, 6])
    |             +-aggregate_list=
    |               +-$agg1#66 :=
    |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                   +-ColumnRef(type=INT64, column=$aggregate.$agg1#65)
    |                   +-group_by_list=
    |                   | +-$groupbymod#64 := ColumnRef(type=BOOL, column=SimpleTypes.bool#51)
    |                   +-group_by_aggregate_list=
    |                     +-$agg1#65 :=
    |                       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
    |                         +-ColumnRef(type=INT64, column=SimpleTypes.int64#46)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ((aggregatescan_5.a_4) IN (
    SELECT
      SUM(MIN(simpletypes_9.a_7)
        GROUP BY simpletypes_9.a_8) AS a_10
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_7,
          SimpleTypes.bool AS a_8
        FROM
          SimpleTypes
      ) AS simpletypes_9
  )) AS a_6
FROM
  (
    SELECT
      SUM(MIN(simpletypes_3.a_1)
        GROUP BY simpletypes_3.a_2) AS a_4
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_1,
          SimpleTypes.bool AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
  ) AS aggregatescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.bool AS a_2
|> AS simpletypes_3
|> AGGREGATE
     SUM(MIN(simpletypes_3.a_1)
       GROUP BY simpletypes_3.a_2) AS a_4
|> AS aggregatescan_5
|> SELECT
     ((aggregatescan_5.a_4) IN (
       FROM
         SimpleTypes
       |> SELECT
            SimpleTypes.int64 AS a_7,
            SimpleTypes.bool AS a_8
       |> AS simpletypes_9
       |> AGGREGATE
            SUM(MIN(simpletypes_9.a_7)
              GROUP BY simpletypes_9.a_8) AS a_10)) AS a_6;
==

SELECT
  EXISTS (
    SELECT
      SUM(MIN(int64) GROUP BY bool)
    FROM SimpleTypes
  )
--
QueryStmt
+-output_column_list=
| +-$query.$col1#23 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#23]
    +-expr_list=
    | +-$col1#23 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=EXISTS
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#22]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#22]
    |             +-input_scan=
    |             | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
    |             +-aggregate_list=
    |               +-$agg1#22 :=
    |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                   +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
    |                   +-group_by_list=
    |                   | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    |                   +-group_by_aggregate_list=
    |                     +-$agg1#21 :=
    |                       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
    |                         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  EXISTS(
    SELECT
      SUM(MIN(simpletypes_4.a_2)
        GROUP BY simpletypes_4.a_3) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_2,
          SimpleTypes.bool AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
  ) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  EXISTS(
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int64 AS a_2,
         SimpleTypes.bool AS a_3
    |> AS simpletypes_4
    |> AGGREGATE
         SUM(MIN(simpletypes_4.a_2)
           GROUP BY simpletypes_4.a_3) AS a_5) AS a_1;
==

SELECT
  'corba' LIKE ANY ((
    SELECT
      ARRAY_AGG(string GROUP BY string)[OFFSET(0)]
    FROM SimpleTypes
  ))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#23 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#23]
    +-expr_list=
    | +-$col1#23 :=
    |   +-FunctionCall(ZetaSQL:$like_any(STRING, repeated(1) STRING) -> BOOL)
    |     +-Literal(type=STRING, value="corba")
    |     +-SubqueryExpr
    |       +-type=STRING
    |       +-subquery_type=SCALAR
    |       +-subquery=
    |         +-ProjectScan
    |           +-column_list=[$expr_subquery.$col1#22]
    |           +-expr_list=
    |           | +-$col1#22 :=
    |           |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<STRING>, INT64) -> STRING)
    |           |     +-ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg1#21)
    |           |     +-Literal(type=INT64, value=0)
    |           +-input_scan=
    |             +-AggregateScan
    |               +-column_list=[$aggregate.$agg1#21]
    |               +-input_scan=
    |               | +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
    |               +-aggregate_list=
    |                 +-$agg1#21 :=
    |                   +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
    |                     +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#20)
    |                     +-group_by_list=
    |                       +-$groupbymod#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  "corba" LIKE ANY((
      SELECT
        aggregatescan_5.a_4[OFFSET(0)] AS a_6
      FROM
        (
          SELECT
            ARRAY_AGG(simpletypes_3.a_2
              GROUP BY simpletypes_3.a_2) AS a_4
          FROM
            (
              SELECT
                SimpleTypes.string AS a_2
              FROM
                SimpleTypes
            ) AS simpletypes_3
        ) AS aggregatescan_5
    )) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  "corba" LIKE ANY((
      FROM
        SimpleTypes
      |> SELECT
           SimpleTypes.string AS a_2
      |> AS simpletypes_3
      |> AGGREGATE
           ARRAY_AGG(simpletypes_3.a_2
             GROUP BY simpletypes_3.a_2) AS a_4
      |> AS aggregatescan_5
      |> SELECT
           aggregatescan_5.a_4[OFFSET(0)] AS a_6
    )) AS a_1;
==

SELECT
  ARRAY(
    SELECT SUM(MIN(int64) GROUP BY bool)
    FROM SimpleTypes
  )
--
QueryStmt
+-output_column_list=
| +-$query.$col1#23 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#23]
    +-expr_list=
    | +-$col1#23 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=ARRAY
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#22]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#22]
    |             +-input_scan=
    |             | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
    |             +-aggregate_list=
    |               +-$agg1#22 :=
    |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                   +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
    |                   +-group_by_list=
    |                   | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    |                   +-group_by_aggregate_list=
    |                     +-$agg1#21 :=
    |                       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
    |                         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY(
    SELECT
      SUM(MIN(simpletypes_4.a_2)
        GROUP BY simpletypes_4.a_3) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_2,
          SimpleTypes.bool AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
  ) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY(
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int64 AS a_2,
         SimpleTypes.bool AS a_3
    |> AS simpletypes_4
    |> AGGREGATE
         SUM(MIN(simpletypes_4.a_2)
           GROUP BY simpletypes_4.a_3) AS a_5) AS a_1;
==

SELECT
 ((
    SELECT
      SUM(MIN(int64) GROUP BY bool)
    FROM SimpleTypes
 )) IN (SELECT 1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#24 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#24]
    +-expr_list=
    | +-$col1#24 :=
    |   +-SubqueryExpr
    |     +-type=BOOL
    |     +-subquery_type=IN
    |     +-in_expr=
    |     | +-SubqueryExpr
    |     |   +-type=INT64
    |     |   +-subquery_type=SCALAR
    |     |   +-subquery=
    |     |     +-ProjectScan
    |     |       +-column_list=[$aggregate.$agg1#22]
    |     |       +-input_scan=
    |     |         +-AggregateScan
    |     |           +-column_list=[$aggregate.$agg1#22]
    |     |           +-input_scan=
    |     |           | +-TableScan(column_list=SimpleTypes.[int64#2, bool#7], table=SimpleTypes, column_index_list=[1, 6])
    |     |           +-aggregate_list=
    |     |             +-$agg1#22 :=
    |     |               +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |     |                 +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
    |     |                 +-group_by_list=
    |     |                 | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
    |     |                 +-group_by_aggregate_list=
    |     |                   +-$agg1#21 :=
    |     |                     +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
    |     |                       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#23]
    |         +-expr_list=
    |         | +-$col1#23 := Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-SingleRowScan
    +-input_scan=
      +-SingleRowScan

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ((
    SELECT
      SUM(MIN(simpletypes_4.a_2)
        GROUP BY simpletypes_4.a_3) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_2,
          SimpleTypes.bool AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
  ) IN (
    SELECT
      1 AS a_6
  )) AS a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ((
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int64 AS a_2,
         SimpleTypes.bool AS a_3
    |> AS simpletypes_4
    |> AGGREGATE
         SUM(MIN(simpletypes_4.a_2)
           GROUP BY simpletypes_4.a_3) AS a_5) IN (
    SELECT
      1 AS a_6
  )) AS a_1;
==

SELECT
  1 IN (SUM(int32 + MIN(int64) GROUP BY bool)),
  1 IN UNNEST([SUM(int32 + MIN(int64) GROUP BY bool)])
FROM SimpleTypes
GROUP BY int32;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#29 AS `$col1` [BOOL]
| +-$query.$col2#30 AS `$col2` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#29, $col2#30]
    +-expr_list=
    | +-$col1#29 :=
    | | +-FunctionCall(ZetaSQL:$in(INT64, repeated(1) INT64) -> BOOL)
    | |   +-Literal(type=INT64, value=1)
    | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
    | +-$col2#30 :=
    |   +-FunctionCall(ZetaSQL:$in_array(INT64, ARRAY<INT64>) -> BOOL)
    |     +-Literal(type=INT64, value=1)
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(1) INT64) -> ARRAY<INT64>)
    |       +-ColumnRef(type=INT64, column=$aggregate.$agg2#28)
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#24, $agg2#28]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, bool#7], table=SimpleTypes, column_index_list=[0, 1, 6])
        +-group_by_list=
        | +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        +-aggregate_list=
          +-$agg1#24 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |     +-Cast(INT32 -> INT64)
          |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#21)
          |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#23)
          |   +-group_by_list=
          |   | +-$groupbymod#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |   | +-$groupbymod#22 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
          |   +-group_by_aggregate_list=
          |     +-$agg1#23 :=
          |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
          |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          +-$agg2#28 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-Cast(INT32 -> INT64)
                | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#25)
                +-ColumnRef(type=INT64, column=$aggregate.$agg1#27)
              +-group_by_list=
              | +-$groupbymod#25 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              | +-$groupbymod#26 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
              +-group_by_aggregate_list=
                +-$agg1#27 :=
                  +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 IN (aggregatescan_7.a_5) AS a_8,
  1 IN UNNEST(ARRAY< INT64 >[aggregatescan_7.a_6]) AS a_9
FROM
  (
    SELECT
      SUM(CAST(simpletypes_4.a_1 AS INT64) + (MIN(simpletypes_4.a_2))
        GROUP BY simpletypes_4.a_1, simpletypes_4.a_3) AS a_5,
      SUM(CAST(simpletypes_4.a_1 AS INT64) + (MIN(simpletypes_4.a_2))
        GROUP BY simpletypes_4.a_1, simpletypes_4.a_3) AS a_6
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2,
          SimpleTypes.bool AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
    GROUP BY simpletypes_4.a_1
  ) AS aggregatescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(simpletypes_4.a_1 AS INT64) + (MIN(simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_1, simpletypes_4.a_3) AS a_5,
  SUM(CAST(simpletypes_4.a_1 AS INT64) + (MIN(simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_1, simpletypes_4.a_3) AS a_6
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.bool AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_1
|> AS aggregatescan_7
|> SELECT
     1 IN (aggregatescan_7.a_5) AS a_8,
     1 IN UNNEST(ARRAY< INT64 >[aggregatescan_7.a_6]) AS a_9;
==

SELECT
  'corba' IN (STRING_AGG(string GROUP BY bool)),
  'corba' IN UNNEST([STRING_AGG(string GROUP BY bool)])
FROM SimpleTypes
GROUP BY string;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#27 AS `$col1` [BOOL]
| +-$query.$col2#28 AS `$col2` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#27, $col2#28]
    +-expr_list=
    | +-$col1#27 :=
    | | +-FunctionCall(ZetaSQL:$in(STRING, repeated(1) STRING) -> BOOL)
    | |   +-Literal(type=STRING, value="corba")
    | |   +-ColumnRef(type=STRING, column=$aggregate.$agg1#23)
    | +-$col2#28 :=
    |   +-FunctionCall(ZetaSQL:$in_array(STRING, ARRAY<STRING>) -> BOOL)
    |     +-Literal(type=STRING, value="corba")
    |     +-FunctionCall(ZetaSQL:$make_array(repeated(1) STRING) -> ARRAY<STRING>)
    |       +-ColumnRef(type=STRING, column=$aggregate.$agg2#26)
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#23, $agg2#26]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[string#5, bool#7], table=SimpleTypes, column_index_list=[4, 6])
        +-group_by_list=
        | +-string#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
        +-aggregate_list=
          +-$agg1#23 :=
          | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
          |   +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#21)
          |   +-group_by_list=
          |     +-$groupbymod#21 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
          |     +-$groupbymod#22 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
          +-$agg2#26 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#24)
              +-group_by_list=
                +-$groupbymod#24 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
                +-$groupbymod#25 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  "corba" IN (aggregatescan_6.a_4) AS a_7,
  "corba" IN UNNEST(ARRAY< STRING >[aggregatescan_6.a_5]) AS a_8
FROM
  (
    SELECT
      STRING_AGG(simpletypes_3.a_1
        GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4,
      STRING_AGG(simpletypes_3.a_1
        GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_5
    FROM
      (
        SELECT
          SimpleTypes.string AS a_1,
          SimpleTypes.bool AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
    GROUP BY simpletypes_3.a_1
  ) AS aggregatescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  STRING_AGG(simpletypes_3.a_1
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_4,
  STRING_AGG(simpletypes_3.a_1
    GROUP BY simpletypes_3.a_1, simpletypes_3.a_2) AS a_5
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.string AS a_1,
         SimpleTypes.bool AS a_2
    |> AS simpletypes_3
  )
GROUP BY simpletypes_3.a_1
|> AS aggregatescan_6
|> SELECT
     "corba" IN (aggregatescan_6.a_4) AS a_7,
     "corba" IN UNNEST(ARRAY< STRING >[aggregatescan_6.a_5]) AS a_8;
==

# Correlated columns with multi-level aggregates.
SELECT
  SUM(1),
  (
    SELECT AS STRUCT
      SUM(AVG(S2.double) + S1.int64 GROUP BY S2.string) AS v1,
      MIN(AVG(S1.int64) + S2.int32 GROUP BY S2.int32) AS v2
    FROM SimpleTypes AS S2
    GROUP BY S1.int64, S1.int32
  )
FROM SimpleTypes AS S1
GROUP BY S1.int64, S1.int32;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
| +-$query.$col2#87 AS `$col2` [STRUCT<v1 DOUBLE, v2 DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20, $query.$col2#87]
    +-expr_list=
    | +-$col2#87 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<v1 DOUBLE, v2 DOUBLE>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=$groupby.int64#53)
    |     | +-ColumnRef(type=INT32, column=$groupby.int32#54)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#86]
    |         +-expr_list=
    |         | +-$struct#86 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<v1 DOUBLE, v2 DOUBLE>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=DOUBLE, column=$aggregate.v1#80)
    |         |       +-ColumnRef(type=DOUBLE, column=$aggregate.v2#85)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$aggregate.[v1#80, v2#85]
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=$aggregate.[v1#80, v2#85]
    |                 +-input_scan=
    |                 | +-TableScan(column_list=SimpleTypes.[int32#55, string#59, double#63], table=SimpleTypes, column_index_list=[0, 4, 8], alias="S2")
    |                 +-group_by_list=
    |                 | +-int64#74 := ColumnRef(type=INT64, column=$groupby.int64#53, is_correlated=TRUE)
    |                 | +-int32#75 := ColumnRef(type=INT32, column=$groupby.int32#54, is_correlated=TRUE)
    |                 +-aggregate_list=
    |                   +-v1#80 :=
    |                   | +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
    |                   |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |                   |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#79)
    |                   |     +-Cast(INT64 -> DOUBLE)
    |                   |       +-ColumnRef(type=INT64, column=$groupby.int64#53, is_correlated=TRUE)
    |                   |   +-group_by_list=
    |                   |   | +-$groupbymod#78 := ColumnRef(type=STRING, column=SimpleTypes.string#59)
    |                   |   +-group_by_aggregate_list=
    |                   |     +-$agg1#79 :=
    |                   |       +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
    |                   |         +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#63)
    |                   +-v2#85 :=
    |                     +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
    |                       +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |                         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#84)
    |                         +-Cast(INT32 -> DOUBLE)
    |                           +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#83)
    |                       +-group_by_list=
    |                       | +-$groupbymod#83 := ColumnRef(type=INT32, column=SimpleTypes.int32#55)
    |                       +-group_by_aggregate_list=
    |                         +-$agg1#84 :=
    |                           +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
    |                             +-ColumnRef(type=INT64, column=$groupby.int64#53, is_correlated=TRUE)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.int64#53, $groupby.int32#54, $aggregate.$agg1#20]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1], alias="S1")
        +-group_by_list=
        | +-int64#53 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | +-int32#54 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        +-aggregate_list=
          +-$agg1#20 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-Literal(type=INT64, value=1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_7.a_6 AS a_6,
  (
    SELECT
      STRUCT< v1 DOUBLE, v2 DOUBLE > (projectscan_15.a_13, projectscan_15.a_14) AS a_16
    FROM
      (
        SELECT
          SUM((AVG(simpletypes_12.a_11)) + CAST(aggregatescan_7.a_4 AS DOUBLE)
            GROUP BY simpletypes_12.a_10) AS a_13,
          MIN((AVG(aggregatescan_7.a_4)) + CAST(simpletypes_12.a_9 AS DOUBLE)
            GROUP BY simpletypes_12.a_9) AS a_14
        FROM
          (
            SELECT
              SimpleTypes.int32 AS a_9,
              SimpleTypes.string AS a_10,
              SimpleTypes.double AS a_11
            FROM
              SimpleTypes
          ) AS simpletypes_12
        GROUP BY aggregatescan_7.a_4, aggregatescan_7.a_5
      ) AS projectscan_15
  ) AS a_8
FROM
  (
    SELECT
      simpletypes_3.a_2 AS a_4,
      simpletypes_3.a_1 AS a_5,
      SUM(1) AS a_6
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1,
          SimpleTypes.int64 AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
    GROUP BY 1, 2
  ) AS aggregatescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2
|> AS simpletypes_3
|> EXTEND
     simpletypes_3.a_2 AS a_4,
     simpletypes_3.a_1 AS a_5
|> AGGREGATE
     SUM(1) AS a_6
   GROUP BY a_4, a_5
|> AS aggregatescan_7
|> SELECT
     aggregatescan_7.a_6 AS a_6,
     (
       SELECT
         SUM((AVG(simpletypes_12.a_11)) + CAST(aggregatescan_7.a_4 AS DOUBLE)
           GROUP BY simpletypes_12.a_10) AS a_13,
         MIN((AVG(aggregatescan_7.a_4)) + CAST(simpletypes_12.a_9 AS DOUBLE)
           GROUP BY simpletypes_12.a_9) AS a_14
       FROM
         (
           FROM
             SimpleTypes
           |> SELECT
                SimpleTypes.int32 AS a_9,
                SimpleTypes.string AS a_10,
                SimpleTypes.double AS a_11
           |> AS simpletypes_12
         )
       GROUP BY aggregatescan_7.a_4, aggregatescan_7.a_5
       |> AS aggregatescan_15
       |> SELECT
            aggregatescan_15.a_13 AS a_13,
            aggregatescan_15.a_14 AS a_14
       |> AS projectscan_16
       |> SELECT
            STRUCT< v1 DOUBLE, v2 DOUBLE > (projectscan_16.a_13, projectscan_16.a_14) AS a_17
     ) AS a_8;
==

# Correlated expression subquery as a multi-level aggregate argument
SELECT
  SUM(
    (
      SELECT
        SUM(AVG(S2.double) + S1.int64 GROUP BY S2.string)
      FROM SimpleTypes AS S2
      GROUP BY S1.int64, S1.int32, S2.bool
    )
  GROUP BY S1.string),
FROM SimpleTypes AS S1
GROUP BY S1.int64, S1.int32;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#53 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#53]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#53]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5], table=SimpleTypes, column_index_list=[0, 1, 4], alias="S1")
        +-group_by_list=
        | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        | +-int32#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        +-aggregate_list=
          +-$agg1#53 :=
            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              +-SubqueryExpr
                +-type=DOUBLE
                +-subquery_type=SCALAR
                +-parameter_list=
                | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22)
                | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#23)
                +-subquery=
                  +-ProjectScan
                    +-column_list=[$aggregate.$agg1#52]
                    +-input_scan=
                      +-AggregateScan
                        +-column_list=[$aggregate.$agg1#52]
                        +-input_scan=
                        | +-TableScan(column_list=SimpleTypes.[string#29, bool#31, double#33], table=SimpleTypes, column_index_list=[4, 6, 8], alias="S2")
                        +-group_by_list=
                        | +-int64#44 := ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22, is_correlated=TRUE)
                        | +-int32#45 := ColumnRef(type=INT32, column=$group_by_list.$groupbymod#23, is_correlated=TRUE)
                        | +-bool#46 := ColumnRef(type=BOOL, column=SimpleTypes.bool#31)
                        +-aggregate_list=
                          +-$agg1#52 :=
                            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
                              +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                                +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#51)
                                +-Cast(INT64 -> DOUBLE)
                                  +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22, is_correlated=TRUE)
                              +-group_by_list=
                              | +-$groupbymod#49 := ColumnRef(type=BOOL, column=SimpleTypes.bool#31)
                              | +-$groupbymod#50 := ColumnRef(type=STRING, column=SimpleTypes.string#29)
                              +-group_by_aggregate_list=
                                +-$agg1#51 :=
                                  +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
                                    +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#33)
              +-group_by_list=
                +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                +-$groupbymod#23 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                +-$groupbymod#24 := ColumnRef(type=STRING, column=SimpleTypes.string#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM((
      SELECT
        SUM((AVG(simpletypes_8.a_7)) + CAST(simpletypes_4.a_2 AS DOUBLE)
          GROUP BY simpletypes_8.a_6, simpletypes_8.a_5) AS a_9
      FROM
        (
          SELECT
            SimpleTypes.string AS a_5,
            SimpleTypes.bool AS a_6,
            SimpleTypes.double AS a_7
          FROM
            SimpleTypes
        ) AS simpletypes_8
      GROUP BY simpletypes_4.a_2, simpletypes_4.a_1, simpletypes_8.a_6
    )
    GROUP BY simpletypes_4.a_2, simpletypes_4.a_1, simpletypes_4.a_3) AS a_10
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.string AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_2, simpletypes_4.a_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM((
      SELECT
        SUM((AVG(simpletypes_8.a_7)) + CAST(simpletypes_4.a_2 AS DOUBLE)
          GROUP BY simpletypes_8.a_6, simpletypes_8.a_5) AS a_9
      FROM
        (
          FROM
            SimpleTypes
          |> SELECT
               SimpleTypes.string AS a_5,
               SimpleTypes.bool AS a_6,
               SimpleTypes.double AS a_7
          |> AS simpletypes_8
        )
      GROUP BY simpletypes_4.a_2, simpletypes_4.a_1, simpletypes_8.a_6
      |> AS aggregatescan_10
      |> SELECT
           aggregatescan_10.a_9 AS a_9
    )
    GROUP BY simpletypes_4.a_2, simpletypes_4.a_1, simpletypes_4.a_3) AS a_11
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.string AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_2, simpletypes_4.a_1
|> AS aggregatescan_12
|> SELECT
     aggregatescan_12.a_11 AS a_11;
==

# Correlated path expressions with multi-level aggregates, and correlated
# columns in the ORDER BY aggregate modifier.
SELECT
  (
    SELECT
      ARRAY_AGG(
        D1.doubly_nested_struct.f.d.a
        GROUP BY D1.doubly_nested_struct.f.d.a
        ORDER BY D1.doubly_nested_struct.f.d.a
      )
    FROM DoublyNestedStructTable AS D2
  )
FROM DoublyNestedStructTable AS D1
GROUP BY D1.doubly_nested_struct.f;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#12 AS `$col1` [ARRAY<INT32>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#12]
    +-expr_list=
    | +-$col1#12 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT32>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#7)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#11]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#11]
    |             +-input_scan=
    |             | +-TableScan(table=DoublyNestedStructTable, alias="D2")
    |             +-aggregate_list=
    |               +-$agg1#11 :=
    |                 +-AggregateFunctionCall(ZetaSQL:array_agg(INT32) -> ARRAY<INT32>)
    |                   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#10)
    |                   +-order_by_item_list=
    |                   | +-OrderByItem
    |                   |   +-column_ref=
    |                   |     +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#10)
    |                   +-group_by_list=
    |                     +-$groupbymod#10 :=
    |                       +-GetStructField
    |                         +-type=INT32
    |                         +-expr=
    |                         | +-GetStructField
    |                         |   +-type=STRUCT<a INT32, b STRING>
    |                         |   +-expr=
    |                         |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#7, is_correlated=TRUE)
    |                         |   +-field_idx=1
    |                         +-field_idx=0
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.f#7]
        +-input_scan=
        | +-TableScan(column_list=[DoublyNestedStructTable.doubly_nested_struct#2], table=DoublyNestedStructTable, column_index_list=[1], alias="D1")
        +-group_by_list=
          +-f#7 :=
            +-GetStructField
              +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
              +-expr=
              | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
              +-field_idx=1

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      ARRAY_AGG(aggregatescan_4.a_3.d.a
        GROUP BY aggregatescan_4.a_3.d.a
        ORDER BY aggregatescan_4.a_3.d.a) AS a_6
    FROM
      DoublyNestedStructTable
  ) AS a_5
FROM
  (
    SELECT
      doublynestedstructtable_2.a_1.f AS a_3
    FROM
      (
        SELECT
          DoublyNestedStructTable.doubly_nested_struct AS a_1
        FROM
          DoublyNestedStructTable
      ) AS doublynestedstructtable_2
    GROUP BY 1
  ) AS aggregatescan_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  DoublyNestedStructTable
|> SELECT
     DoublyNestedStructTable.doubly_nested_struct AS a_1
|> AS doublynestedstructtable_2
|> EXTEND
     doublynestedstructtable_2.a_1.f AS a_3
|> AGGREGATE
   GROUP BY a_3
|> AS aggregatescan_4
|> SELECT
     (
       FROM
         DoublyNestedStructTable
       |> AGGREGATE
            ARRAY_AGG(aggregatescan_4.a_3.d.a
              GROUP BY aggregatescan_4.a_3.d.a
              ORDER BY aggregatescan_4.a_3.d.a) AS a_6) AS a_5;
==

# Correlated path expressions with multi-level aggregates, and correlated
# columns in the ORDER BY aggregate modifier.
SELECT
  SUM(1),
  (
    SELECT AS STRUCT
      ARRAY_AGG(
        AVG(D2.doubly_nested_struct.f.c) + D1.doubly_nested_struct.f.d.a
        GROUP BY D1.doubly_nested_struct.f.d.a
        ORDER BY D1.doubly_nested_struct.f.d.a
      ) AS v1,
      MIN(
        AVG(D1.doubly_nested_struct.f.d.a) + D2.doubly_nested_struct.e
        GROUP BY D1.doubly_nested_struct.f.d
      ) AS v2
    FROM DoublyNestedStructTable AS D2
    GROUP BY D1.doubly_nested_struct.f.d.b, D2.doubly_nested_struct.e
    ORDER BY D1.doubly_nested_struct.f.d.b, MAX(D1.doubly_nested_struct.f.d.b)
  )
FROM DoublyNestedStructTable AS D1
GROUP BY D1.doubly_nested_struct.f;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
| +-$query.$col2#39 AS `$col2` [STRUCT<v1 ARRAY<DOUBLE>, v2 DOUBLE>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3, $query.$col2#39]
    +-expr_list=
    | +-$col2#39 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<v1 ARRAY<DOUBLE>, v2 DOUBLE>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#38]
    |         +-expr_list=
    |         | +-$struct#38 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<v1 ARRAY<DOUBLE>, v2 DOUBLE>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=ARRAY<DOUBLE>, column=$aggregate.v1#30)
    |         |       +-ColumnRef(type=DOUBLE, column=$aggregate.v2#35)
    |         +-input_scan=
    |           +-OrderByScan
    |             +-column_list=$aggregate.[v1#30, v2#35]
    |             +-is_ordered=TRUE
    |             +-input_scan=
    |             | +-ProjectScan
    |             |   +-column_list=[$aggregate.v1#30, $aggregate.v2#35, $aggregate.$agg3#36, $orderby.$orderbycol1#37]
    |             |   +-expr_list=
    |             |   | +-$orderbycol1#37 :=
    |             |   |   +-GetStructField
    |             |   |     +-type=STRING
    |             |   |     +-expr=
    |             |   |     | +-GetStructField
    |             |   |     |   +-type=STRUCT<a INT32, b STRING>
    |             |   |     |   +-expr=
    |             |   |     |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |   |     |   +-field_idx=1
    |             |   |     +-field_idx=1
    |             |   +-input_scan=
    |             |     +-AggregateScan
    |             |       +-column_list=$aggregate.[v1#30, v2#35, $agg3#36]
    |             |       +-input_scan=
    |             |       | +-TableScan(column_list=[DoublyNestedStructTable.doubly_nested_struct#23], table=DoublyNestedStructTable, column_index_list=[1], alias="D2")
    |             |       +-group_by_list=
    |             |       | +-b#24 :=
    |             |       | | +-GetStructField
    |             |       | |   +-type=STRING
    |             |       | |   +-expr=
    |             |       | |   | +-GetStructField
    |             |       | |   |   +-type=STRUCT<a INT32, b STRING>
    |             |       | |   |   +-expr=
    |             |       | |   |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |       | |   |   +-field_idx=1
    |             |       | |   +-field_idx=1
    |             |       | +-e#25 :=
    |             |       |   +-GetStructField
    |             |       |     +-type=INT32
    |             |       |     +-expr=
    |             |       |     | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#23)
    |             |       |     +-field_idx=0
    |             |       +-aggregate_list=
    |             |         +-v1#30 :=
    |             |         | +-AggregateFunctionCall(ZetaSQL:array_agg(DOUBLE) -> ARRAY<DOUBLE>)
    |             |         |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |             |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#29)
    |             |         |     +-Cast(INT32 -> DOUBLE)
    |             |         |       +-GetStructField
    |             |         |         +-type=INT32
    |             |         |         +-expr=
    |             |         |         | +-GetStructField
    |             |         |         |   +-type=STRUCT<a INT32, b STRING>
    |             |         |         |   +-expr=
    |             |         |         |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |         |         |   +-field_idx=1
    |             |         |         +-field_idx=0
    |             |         |   +-order_by_item_list=
    |             |         |   | +-OrderByItem
    |             |         |   |   +-column_ref=
    |             |         |   |     +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#28)
    |             |         |   +-group_by_list=
    |             |         |   | +-$groupbymod#27 :=
    |             |         |   | | +-GetStructField
    |             |         |   | |   +-type=INT32
    |             |         |   | |   +-expr=
    |             |         |   | |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#23)
    |             |         |   | |   +-field_idx=0
    |             |         |   | +-$groupbymod#28 :=
    |             |         |   |   +-GetStructField
    |             |         |   |     +-type=INT32
    |             |         |   |     +-expr=
    |             |         |   |     | +-GetStructField
    |             |         |   |     |   +-type=STRUCT<a INT32, b STRING>
    |             |         |   |     |   +-expr=
    |             |         |   |     |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |         |   |     |   +-field_idx=1
    |             |         |   |     +-field_idx=0
    |             |         |   +-group_by_aggregate_list=
    |             |         |     +-$agg1#29 :=
    |             |         |       +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
    |             |         |         +-Cast(INT32 -> INT64)
    |             |         |           +-GetStructField
    |             |         |             +-type=INT32
    |             |         |             +-expr=
    |             |         |             | +-GetStructField
    |             |         |             |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
    |             |         |             |   +-expr=
    |             |         |             |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#23)
    |             |         |             |   +-field_idx=1
    |             |         |             +-field_idx=0
    |             |         +-v2#35 :=
    |             |         | +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
    |             |         |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
    |             |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#34)
    |             |         |     +-Cast(INT32 -> DOUBLE)
    |             |         |       +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#32)
    |             |         |   +-group_by_list=
    |             |         |   | +-$groupbymod#32 :=
    |             |         |   | | +-GetStructField
    |             |         |   | |   +-type=INT32
    |             |         |   | |   +-expr=
    |             |         |   | |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#23)
    |             |         |   | |   +-field_idx=0
    |             |         |   | +-$groupbymod#33 :=
    |             |         |   |   +-GetStructField
    |             |         |   |     +-type=STRUCT<a INT32, b STRING>
    |             |         |   |     +-expr=
    |             |         |   |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |         |   |     +-field_idx=1
    |             |         |   +-group_by_aggregate_list=
    |             |         |     +-$agg1#34 :=
    |             |         |       +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
    |             |         |         +-Cast(INT32 -> INT64)
    |             |         |           +-GetStructField
    |             |         |             +-type=INT32
    |             |         |             +-expr=
    |             |         |             | +-GetStructField
    |             |         |             |   +-type=STRUCT<a INT32, b STRING>
    |             |         |             |   +-expr=
    |             |         |             |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |         |             |   +-field_idx=1
    |             |         |             +-field_idx=0
    |             |         +-$agg3#36 :=
    |             |           +-AggregateFunctionCall(ZetaSQL:max(STRING) -> STRING)
    |             |             +-GetStructField
    |             |               +-type=STRING
    |             |               +-expr=
    |             |               | +-GetStructField
    |             |               |   +-type=STRUCT<a INT32, b STRING>
    |             |               |   +-expr=
    |             |               |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$groupby.f#21, is_correlated=TRUE)
    |             |               |   +-field_idx=1
    |             |               +-field_idx=1
    |             +-order_by_item_list=
    |               +-OrderByItem
    |               | +-column_ref=
    |               |   +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#37)
    |               +-OrderByItem
    |                 +-column_ref=
    |                   +-ColumnRef(type=STRING, column=$aggregate.$agg3#36)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.f#21, $aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(column_list=[DoublyNestedStructTable.doubly_nested_struct#2], table=DoublyNestedStructTable, column_index_list=[1], alias="D1")
        +-group_by_list=
        | +-f#21 :=
        |   +-GetStructField
        |     +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=DoublyNestedStructTable.doubly_nested_struct#2)
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-Literal(type=INT64, value=1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_5.a_4 AS a_4,
  (
    SELECT
      STRUCT< v1 ARRAY< DOUBLE >, v2 DOUBLE > (orderbyscan_15.a_9, orderbyscan_15.a_10) AS a_16
    FROM
      (
        SELECT
          projectscan_14.a_9 AS a_9,
          projectscan_14.a_10 AS a_10
        FROM
          (
            SELECT
              aggregatescan_12.a_9 AS a_9,
              aggregatescan_12.a_10 AS a_10,
              aggregatescan_12.a_11 AS a_11,
              aggregatescan_5.a_3.d.b AS a_13
            FROM
              (
                SELECT
                  ARRAY_AGG((AVG(CAST(doublynestedstructtable_8.a_7.f.c AS INT64))) + CAST(aggregatescan_5.a_3.d.a AS DOUBLE)
                    GROUP BY doublynestedstructtable_8.a_7.e, aggregatescan_5.a_3.d.a
                    ORDER BY aggregatescan_5.a_3.d.a) AS a_9,
                  MIN((AVG(CAST(aggregatescan_5.a_3.d.a AS INT64))) + CAST(doublynestedstructtable_8.a_7.e AS DOUBLE)
                    GROUP BY doublynestedstructtable_8.a_7.e, aggregatescan_5.a_3.d) AS a_10,
                  MAX(aggregatescan_5.a_3.d.b) AS a_11
                FROM
                  (
                    SELECT
                      DoublyNestedStructTable.doubly_nested_struct AS a_7
                    FROM
                      DoublyNestedStructTable
                  ) AS doublynestedstructtable_8
                GROUP BY aggregatescan_5.a_3.d.b, doublynestedstructtable_8.a_7.e
              ) AS aggregatescan_12
          ) AS projectscan_14
        ORDER BY projectscan_14.a_13, projectscan_14.a_11
      ) AS orderbyscan_15
  ) AS a_6
FROM
  (
    SELECT
      doublynestedstructtable_2.a_1.f AS a_3,
      SUM(1) AS a_4
    FROM
      (
        SELECT
          DoublyNestedStructTable.doubly_nested_struct AS a_1
        FROM
          DoublyNestedStructTable
      ) AS doublynestedstructtable_2
    GROUP BY 1
  ) AS aggregatescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  DoublyNestedStructTable
|> SELECT
     DoublyNestedStructTable.doubly_nested_struct AS a_1
|> AS doublynestedstructtable_2
|> EXTEND
     doublynestedstructtable_2.a_1.f AS a_3
|> AGGREGATE
     SUM(1) AS a_4
   GROUP BY a_3
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS a_4,
     (
       SELECT
         ARRAY_AGG((AVG(CAST(doublynestedstructtable_8.a_7.f.c AS INT64))) + CAST(aggregatescan_5.a_3.d.a AS DOUBLE)
           GROUP BY doublynestedstructtable_8.a_7.e, aggregatescan_5.a_3.d.a
           ORDER BY aggregatescan_5.a_3.d.a) AS a_9,
         MIN((AVG(CAST(aggregatescan_5.a_3.d.a AS INT64))) + CAST(doublynestedstructtable_8.a_7.e AS DOUBLE)
           GROUP BY doublynestedstructtable_8.a_7.e, aggregatescan_5.a_3.d) AS a_10,
         MAX(aggregatescan_5.a_3.d.b) AS a_11
       FROM
         (
           FROM
             DoublyNestedStructTable
           |> SELECT
                DoublyNestedStructTable.doubly_nested_struct AS a_7
           |> AS doublynestedstructtable_8
         )
       GROUP BY aggregatescan_5.a_3.d.b, doublynestedstructtable_8.a_7.e
       |> AS aggregatescan_12
       |> SELECT
            aggregatescan_12.a_9 AS a_9,
            aggregatescan_12.a_10 AS a_10,
            aggregatescan_12.a_11 AS a_11,
            aggregatescan_5.a_3.d.b AS a_13
       |> AS projectscan_14
       |> ORDER BY projectscan_14.a_13, projectscan_14.a_11
       |> SELECT
            projectscan_14.a_9 AS a_9,
            projectscan_14.a_10 AS a_10
       |> AS orderbyscan_15
       |> SELECT
            STRUCT< v1 ARRAY< DOUBLE >, v2 DOUBLE > (orderbyscan_15.a_9, orderbyscan_15.a_10) AS a_16
     ) AS a_6;
==

# Complex multi-level aggregates
SELECT
  SUM(
    double + int32 +
    ANY_VALUE(
      double + int64 + int32 + MAX(int64)
    GROUP BY int64)
  GROUP BY int32)
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#28 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#28]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#28]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#28 :=
            +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#21)
                | +-Cast(INT32 -> DOUBLE)
                |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
                +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
              +-group_by_list=
              | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#27 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(DOUBLE) -> DOUBLE)
                    +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                      +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                      | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                      | | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#23)
                      | | +-Cast(INT64 -> DOUBLE)
                      | |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#25)
                      | +-Cast(INT32 -> DOUBLE)
                      |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#24)
                      +-Cast(INT64 -> DOUBLE)
                        +-ColumnRef(type=INT64, column=$aggregate.$agg1#26)
                    +-group_by_list=
                    | +-$groupbymod#23 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                    | +-$groupbymod#24 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                    | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                    +-group_by_aggregate_list=
                      +-$agg1#26 :=
                        +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                          +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_4.a_3) + CAST(simpletypes_4.a_1 AS DOUBLE)) + (ANY_VALUE((((simpletypes_4.a_3) + CAST(simpletypes_4.a_2 AS DOUBLE)) +
      CAST(simpletypes_4.a_1 AS DOUBLE)) + CAST(MAX(simpletypes_4.a_2) AS DOUBLE)
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_5
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(((simpletypes_4.a_3) + CAST(simpletypes_4.a_1 AS DOUBLE)) + (ANY_VALUE((((simpletypes_4.a_3) + CAST(simpletypes_4.a_2 AS DOUBLE)) +
      CAST(simpletypes_4.a_1 AS DOUBLE)) + CAST(MAX(simpletypes_4.a_2) AS DOUBLE)
      GROUP BY simpletypes_4.a_3, simpletypes_4.a_1, simpletypes_4.a_2))
    GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_5
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.double AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_3
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5;
==

# Complex multi-level aggregates
SELECT
  SUM(int32 + AVG(int64 + int32 + MAX(uint32) GROUP BY int64) GROUP BY int32),
  SUM(int32 + ANY_VALUE(int64) + COUNT(*) GROUP BY int32)
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#28 AS `$col1` [DOUBLE]
| +-$aggregate.$agg2#33 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#28, $agg2#33]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#28, $agg2#33]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, double#9], table=SimpleTypes, column_index_list=[0, 1, 2, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#28 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
          |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
          |     +-Cast(INT32 -> DOUBLE)
          |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
          |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
          |   +-group_by_list=
          |   | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |   | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |   +-group_by_aggregate_list=
          |     +-$agg1#27 :=
          |       +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
          |         +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |           +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |           | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#25)
          |           | +-Cast(INT32 -> INT64)
          |           |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#24)
          |           +-Cast(UINT32 -> INT64)
          |             +-ColumnRef(type=UINT32, column=$aggregate.$agg1#26)
          |         +-group_by_list=
          |         | +-$groupbymod#23 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |         | +-$groupbymod#24 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |         | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          |         +-group_by_aggregate_list=
          |           +-$agg1#26 :=
          |             +-AggregateFunctionCall(ZetaSQL:max(UINT32) -> UINT32)
          |               +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
          +-$agg2#33 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | +-Cast(INT32 -> INT64)
                | | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#30)
                | +-ColumnRef(type=INT64, column=$aggregate.$agg1#31)
                +-ColumnRef(type=INT64, column=$aggregate.$agg2#32)
              +-group_by_list=
              | +-$groupbymod#29 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#30 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#31 :=
                | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                +-$agg2#32 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(simpletypes_5.a_1 AS DOUBLE) + (AVG(((simpletypes_5.a_2) + CAST(simpletypes_5.a_1 AS INT64)) +
      CAST(MAX(simpletypes_5.a_3) AS INT64)
      GROUP BY simpletypes_5.a_4, simpletypes_5.a_1, simpletypes_5.a_2))
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_1) AS a_6,
  SUM((CAST(simpletypes_5.a_1 AS INT64) + (ANY_VALUE(simpletypes_5.a_2))) + (COUNT(*))
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_1) AS a_7
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.uint32 AS a_3,
      SimpleTypes.double AS a_4
    FROM
      SimpleTypes
  ) AS simpletypes_5
GROUP BY simpletypes_5.a_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(simpletypes_5.a_1 AS DOUBLE) + (AVG(((simpletypes_5.a_2) + CAST(simpletypes_5.a_1 AS INT64)) +
      CAST(MAX(simpletypes_5.a_3) AS INT64)
      GROUP BY simpletypes_5.a_4, simpletypes_5.a_1, simpletypes_5.a_2))
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_1) AS a_6,
  SUM((CAST(simpletypes_5.a_1 AS INT64) + (ANY_VALUE(simpletypes_5.a_2))) + (COUNT(*))
    GROUP BY simpletypes_5.a_4, simpletypes_5.a_1) AS a_7
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.uint32 AS a_3,
         SimpleTypes.double AS a_4
    |> AS simpletypes_5
  )
GROUP BY simpletypes_5.a_4
|> AS aggregatescan_8
|> SELECT
     aggregatescan_8.a_6 AS a_6,
     aggregatescan_8.a_7 AS a_7;
==

# Complex multi-level aggregates, with multi-level aggregates inside the
# ORDER BY clause as well.
SELECT
  ARRAY_AGG(
    int32 + AVG(int64 + int32 + MAX(uint32) GROUP BY int64)
    GROUP BY int32
    ORDER BY double, int32 DESC, MIN(uint32),
      STRING_AGG(
        ANY_VALUE(string)
        GROUP BY int64
        ORDER BY double DESC, int32, int64
      )
  ),
  ARRAY_AGG(
    int32 + ANY_VALUE(int64) + COUNT(*)
    GROUP BY int32
    ORDER BY
      double, int32, MAX(int32 + int64 + MIN(int64) GROUP BY int64), COUNT(*)
  )
FROM SimpleTypes
GROUP BY double;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#34 AS `$col1` [ARRAY<DOUBLE>]
| +-$aggregate.$agg2#45 AS `$col2` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#34, $agg2#45]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#34, $agg2#45]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 2, 4, 8])
        +-group_by_list=
        | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        +-aggregate_list=
          +-$agg1#34 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(DOUBLE) -> ARRAY<DOUBLE>)
          |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
          |     +-Cast(INT32 -> DOUBLE)
          |     | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
          |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
          |   +-order_by_item_list=
          |   | +-OrderByItem
          |   | | +-column_ref=
          |   | |   +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#21)
          |   | +-OrderByItem
          |   | | +-column_ref=
          |   | | | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
          |   | | +-is_descending=TRUE
          |   | +-OrderByItem
          |   | | +-column_ref=
          |   | |   +-ColumnRef(type=UINT32, column=$aggregate.$agg2#28)
          |   | +-OrderByItem
          |   |   +-column_ref=
          |   |     +-ColumnRef(type=STRING, column=$aggregate.$agg3#33)
          |   +-group_by_list=
          |   | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |   | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |   +-group_by_aggregate_list=
          |     +-$agg1#27 :=
          |     | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
          |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |     |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |     |     | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#25)
          |     |     | +-Cast(INT32 -> INT64)
          |     |     |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#24)
          |     |     +-Cast(UINT32 -> INT64)
          |     |       +-ColumnRef(type=UINT32, column=$aggregate.$agg1#26)
          |     |   +-group_by_list=
          |     |   | +-$groupbymod#23 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |     |   | +-$groupbymod#24 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |     |   | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          |     |   +-group_by_aggregate_list=
          |     |     +-$agg1#26 :=
          |     |       +-AggregateFunctionCall(ZetaSQL:max(UINT32) -> UINT32)
          |     |         +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
          |     +-$agg2#28 :=
          |     | +-AggregateFunctionCall(ZetaSQL:min(UINT32) -> UINT32)
          |     |   +-ColumnRef(type=UINT32, column=SimpleTypes.uint32#3)
          |     +-$agg3#33 :=
          |       +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
          |         +-ColumnRef(type=STRING, column=$aggregate.$agg1#32)
          |         +-order_by_item_list=
          |         | +-OrderByItem
          |         | | +-column_ref=
          |         | | | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#29)
          |         | | +-is_descending=TRUE
          |         | +-OrderByItem
          |         | | +-column_ref=
          |         | |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#30)
          |         | +-OrderByItem
          |         |   +-column_ref=
          |         |     +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#31)
          |         +-group_by_list=
          |         | +-$groupbymod#29 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
          |         | +-$groupbymod#30 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
          |         | +-$groupbymod#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          |         +-group_by_aggregate_list=
          |           +-$agg1#32 :=
          |             +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
          |               +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
          +-$agg2#45 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                | +-Cast(INT32 -> INT64)
                | | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#36)
                | +-ColumnRef(type=INT64, column=$aggregate.$agg1#37)
                +-ColumnRef(type=INT64, column=$aggregate.$agg2#38)
              +-order_by_item_list=
              | +-OrderByItem
              | | +-column_ref=
              | |   +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#35)
              | +-OrderByItem
              | | +-column_ref=
              | |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#36)
              | +-OrderByItem
              | | +-column_ref=
              | |   +-ColumnRef(type=INT64, column=$aggregate.$agg3#43)
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$aggregate.$agg4#44)
              +-group_by_list=
              | +-$groupbymod#35 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
              | +-$groupbymod#36 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#37 :=
                | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                +-$agg2#38 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                +-$agg3#43 :=
                | +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                |     | +-Cast(INT32 -> INT64)
                |     | | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#40)
                |     | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#41)
                |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#42)
                |   +-group_by_list=
                |   | +-$groupbymod#39 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                |   | +-$groupbymod#40 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                |   | +-$groupbymod#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                |   +-group_by_aggregate_list=
                |     +-$agg1#42 :=
                |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
                |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                +-$agg4#44 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(CAST(simpletypes_6.a_1 AS DOUBLE) + (AVG(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) +
      CAST(MAX(simpletypes_6.a_3) AS INT64)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_1, simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_5, simpletypes_6.a_1
    ORDER BY simpletypes_6.a_5, simpletypes_6.a_1 DESC, MIN(simpletypes_6.a_3), STRING_AGG(ANY_VALUE(simpletypes_6.a_4)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_1, simpletypes_6.a_2
      ORDER BY simpletypes_6.a_5 DESC, simpletypes_6.a_1, simpletypes_6.a_2)) AS a_7,
  ARRAY_AGG((CAST(simpletypes_6.a_1 AS INT64) + (ANY_VALUE(simpletypes_6.a_2))) + (COUNT(*))
    GROUP BY simpletypes_6.a_5, simpletypes_6.a_1
    ORDER BY simpletypes_6.a_5, simpletypes_6.a_1, MAX((CAST(simpletypes_6.a_1 AS INT64) + (simpletypes_6.a_2)) +
      (MIN(simpletypes_6.a_2))
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_1, simpletypes_6.a_2), COUNT(*)) AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.uint32 AS a_3,
      SimpleTypes.string AS a_4,
      SimpleTypes.double AS a_5
    FROM
      SimpleTypes
  ) AS simpletypes_6
GROUP BY simpletypes_6.a_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(CAST(simpletypes_6.a_1 AS DOUBLE) + (AVG(((simpletypes_6.a_2) + CAST(simpletypes_6.a_1 AS INT64)) +
      CAST(MAX(simpletypes_6.a_3) AS INT64)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_1, simpletypes_6.a_2))
    GROUP BY simpletypes_6.a_5, simpletypes_6.a_1
    ORDER BY simpletypes_6.a_5, simpletypes_6.a_1 DESC, MIN(simpletypes_6.a_3), STRING_AGG(ANY_VALUE(simpletypes_6.a_4)
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_1, simpletypes_6.a_2
      ORDER BY simpletypes_6.a_5 DESC, simpletypes_6.a_1, simpletypes_6.a_2)) AS a_7,
  ARRAY_AGG((CAST(simpletypes_6.a_1 AS INT64) + (ANY_VALUE(simpletypes_6.a_2))) + (COUNT(*))
    GROUP BY simpletypes_6.a_5, simpletypes_6.a_1
    ORDER BY simpletypes_6.a_5, simpletypes_6.a_1, MAX((CAST(simpletypes_6.a_1 AS INT64) + (simpletypes_6.a_2)) +
      (MIN(simpletypes_6.a_2))
      GROUP BY simpletypes_6.a_5, simpletypes_6.a_1, simpletypes_6.a_2), COUNT(*)) AS a_8
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.uint32 AS a_3,
         SimpleTypes.string AS a_4,
         SimpleTypes.double AS a_5
    |> AS simpletypes_6
  )
GROUP BY simpletypes_6.a_5
|> AS aggregatescan_9
|> SELECT
     aggregatescan_9.a_7 AS a_7,
     aggregatescan_9.a_8 AS a_8;
==

# Multi-level aggregates inside the PARTITION BY and ORDER BY clause of analytic
# functions
SELECT
  SUM(double) OVER (
    PARTITION BY SUM(int64 + ANY_VALUE(int32) GROUP BY int64)
    ORDER BY AVG(double + int32 + MIN(int64) GROUP BY int32)
  ) AS window_result
FROM SimpleTypes
GROUP BY double
QUALIFY
  window_result <
  AVG(double) OVER (
    PARTITION BY SUM(int64 + MAX(int32) GROUP BY int64)
    ORDER BY MAX(double + int64 + MIN(int32) GROUP BY int64)
  );
--
QueryStmt
+-output_column_list=
| +-$analytic.window_result#30 AS window_result [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.window_result#30]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.double#20, $aggregate.$agg1#24, $aggregate.$agg2#28, $aggregate.$agg3#34, $aggregate.$agg4#38, $analytic.window_result#30, $analytic.$analytic2#39]
        +-input_scan=
        | +-AnalyticScan
        |   +-column_list=[$groupby.double#20, $aggregate.$agg1#24, $aggregate.$agg2#28, $aggregate.$agg3#34, $aggregate.$agg4#38, $analytic.window_result#30, $analytic.$analytic2#39]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$groupby.double#20, $aggregate.$agg1#24, $aggregate.$agg2#28, $aggregate.$agg3#34, $aggregate.$agg4#38]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
        |   |   +-group_by_list=
        |   |   | +-double#20 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |   +-aggregate_list=
        |   |     +-$agg1#24 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     |     +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#22)
        |   |     |     +-Cast(INT32 -> INT64)
        |   |     |       +-ColumnRef(type=INT32, column=$aggregate.$agg1#23)
        |   |     |   +-group_by_list=
        |   |     |   | +-$groupbymod#21 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |     |   | +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |     |   +-group_by_aggregate_list=
        |   |     |     +-$agg1#23 :=
        |   |     |       +-AggregateFunctionCall(ZetaSQL:any_value(INT32) -> INT32)
        |   |     |         +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   |     +-$agg2#28 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
        |   |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |   |     |     +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |   |     |     | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#25)
        |   |     |     | +-Cast(INT32 -> DOUBLE)
        |   |     |     |   +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#26)
        |   |     |     +-Cast(INT64 -> DOUBLE)
        |   |     |       +-ColumnRef(type=INT64, column=$aggregate.$agg1#27)
        |   |     |   +-group_by_list=
        |   |     |   | +-$groupbymod#25 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |     |   | +-$groupbymod#26 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   |     |   +-group_by_aggregate_list=
        |   |     |     +-$agg1#27 :=
        |   |     |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
        |   |     |         +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |     +-$agg3#34 :=
        |   |     | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   |     |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     |     +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#32)
        |   |     |     +-Cast(INT32 -> INT64)
        |   |     |       +-ColumnRef(type=INT32, column=$aggregate.$agg1#33)
        |   |     |   +-group_by_list=
        |   |     |   | +-$groupbymod#31 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |     |   | +-$groupbymod#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |     |   +-group_by_aggregate_list=
        |   |     |     +-$agg1#33 :=
        |   |     |       +-AggregateFunctionCall(ZetaSQL:max(INT32) -> INT32)
        |   |     |         +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   |     +-$agg4#38 :=
        |   |       +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
        |   |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |   |           +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        |   |           | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#35)
        |   |           | +-Cast(INT64 -> DOUBLE)
        |   |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#36)
        |   |           +-Cast(INT32 -> DOUBLE)
        |   |             +-ColumnRef(type=INT32, column=$aggregate.$agg1#37)
        |   |         +-group_by_list=
        |   |         | +-$groupbymod#35 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
        |   |         | +-$groupbymod#36 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |         +-group_by_aggregate_list=
        |   |           +-$agg1#37 :=
        |   |             +-AggregateFunctionCall(ZetaSQL:min(INT32) -> INT32)
        |   |               +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-function_group_list=
        |     +-AnalyticFunctionGroup
        |     | +-partition_by=
        |     | | +-WindowPartitioning
        |     | |   +-partition_by_list=
        |     | |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
        |     | +-order_by=
        |     | | +-WindowOrdering
        |     | |   +-order_by_item_list=
        |     | |     +-OrderByItem
        |     | |       +-column_ref=
        |     | |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#28)
        |     | +-analytic_function_list=
        |     |   +-window_result#30 :=
        |     |     +-AnalyticFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
        |     |       +-ColumnRef(type=DOUBLE, column=$groupby.double#20)
        |     |       +-window_frame=
        |     |         +-WindowFrame(frame_unit=RANGE)
        |     |           +-start_expr=
        |     |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |     |           +-end_expr=
        |     |             +-WindowFrameExpr(boundary_type=CURRENT ROW)
        |     +-AnalyticFunctionGroup
        |       +-partition_by=
        |       | +-WindowPartitioning
        |       |   +-partition_by_list=
        |       |     +-ColumnRef(type=INT64, column=$aggregate.$agg3#34)
        |       +-order_by=
        |       | +-WindowOrdering
        |       |   +-order_by_item_list=
        |       |     +-OrderByItem
        |       |       +-column_ref=
        |       |         +-ColumnRef(type=DOUBLE, column=$aggregate.$agg4#38)
        |       +-analytic_function_list=
        |         +-$analytic2#39 :=
        |           +-AnalyticFunctionCall(ZetaSQL:avg(DOUBLE) -> DOUBLE)
        |             +-ColumnRef(type=DOUBLE, column=$groupby.double#20)
        |             +-window_frame=
        |               +-WindowFrame(frame_unit=RANGE)
        |                 +-start_expr=
        |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                 +-end_expr=
        |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$less(DOUBLE, DOUBLE) -> BOOL)
            +-ColumnRef(type=DOUBLE, column=$analytic.window_result#30)
            +-ColumnRef(type=DOUBLE, column=$analytic.$analytic2#39)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  analyticscan_13.a_11 AS window_result
FROM
  (
    SELECT
      aggregatescan_10.a_5 AS a_5,
      aggregatescan_10.a_6 AS a_6,
      aggregatescan_10.a_7 AS a_7,
      aggregatescan_10.a_8 AS a_8,
      aggregatescan_10.a_9 AS a_9,
      SUM(aggregatescan_10.a_5) OVER (PARTITION BY aggregatescan_10.a_6
        ORDER BY aggregatescan_10.a_7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_11,
      AVG(aggregatescan_10.a_5) OVER (PARTITION BY aggregatescan_10.a_8
        ORDER BY aggregatescan_10.a_9 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_12
    FROM
      (
        SELECT
          simpletypes_4.a_3 AS a_5,
          SUM((simpletypes_4.a_2) + CAST(ANY_VALUE(simpletypes_4.a_1) AS INT64)
            GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_6,
          AVG(((simpletypes_4.a_3) + CAST(simpletypes_4.a_1 AS DOUBLE)) + CAST(MIN(simpletypes_4.a_2) AS DOUBLE)
            GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_7,
          SUM((simpletypes_4.a_2) + CAST(MAX(simpletypes_4.a_1) AS INT64)
            GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_8,
          MAX(((simpletypes_4.a_3) + CAST(simpletypes_4.a_2 AS DOUBLE)) + CAST(MIN(simpletypes_4.a_1) AS DOUBLE)
            GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_9
        FROM
          (
            SELECT
              SimpleTypes.int32 AS a_1,
              SimpleTypes.int64 AS a_2,
              SimpleTypes.double AS a_3
            FROM
              SimpleTypes
          ) AS simpletypes_4
        GROUP BY 1
      ) AS aggregatescan_10
  ) AS analyticscan_13
WHERE
  (analyticscan_13.a_11) < (analyticscan_13.a_12);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.double AS a_3
|> AS simpletypes_4
|> EXTEND
     simpletypes_4.a_3 AS a_5
|> AGGREGATE
     SUM((simpletypes_4.a_2) + CAST(ANY_VALUE(simpletypes_4.a_1) AS INT64)
       GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_6,
     AVG(((simpletypes_4.a_3) + CAST(simpletypes_4.a_1 AS DOUBLE)) + CAST(MIN(simpletypes_4.a_2) AS DOUBLE)
       GROUP BY simpletypes_4.a_3, simpletypes_4.a_1) AS a_7,
     SUM((simpletypes_4.a_2) + CAST(MAX(simpletypes_4.a_1) AS INT64)
       GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_8,
     MAX(((simpletypes_4.a_3) + CAST(simpletypes_4.a_2 AS DOUBLE)) + CAST(MIN(simpletypes_4.a_1) AS DOUBLE)
       GROUP BY simpletypes_4.a_3, simpletypes_4.a_2) AS a_9
   GROUP BY a_5
|> AS aggregatescan_10
|> SELECT
     aggregatescan_10.a_5 AS a_5,
     aggregatescan_10.a_6 AS a_6,
     aggregatescan_10.a_7 AS a_7,
     aggregatescan_10.a_8 AS a_8,
     aggregatescan_10.a_9 AS a_9,
     SUM(aggregatescan_10.a_5) OVER (PARTITION BY aggregatescan_10.a_6
       ORDER BY aggregatescan_10.a_7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_11,
     AVG(aggregatescan_10.a_5) OVER (PARTITION BY aggregatescan_10.a_8
       ORDER BY aggregatescan_10.a_9 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_12
|> AS analyticscan_13
|> WHERE
     (analyticscan_13.a_11) < (analyticscan_13.a_12)
|> SELECT
     analyticscan_13.a_11 AS window_result;
==

[language_features=NONE,+MATCH_RECOGNIZE,+MULTILEVEL_AGGREGATION,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ANALYTIC_FUNCTIONS,+QUALIFY,+GROUPING_BUILTIN,+GROUP_BY_STRUCT]
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  ORDER BY string
  MEASURES
    MAX(double + SUM(double + int64 + MIN(int32) GROUP BY int64) GROUP BY double) AS max_agg,
    ARRAY_AGG(string GROUP BY string ORDER BY MIN(double)) AS array_agg
  PATTERN (A B)
  DEFINE
    A AS int64 < 10,
    B AS int32 >= 10
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.max_agg#29 AS max_agg [DOUBLE]
| +-$match_recognize.array_agg#33 AS array_agg [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[max_agg#29, array_agg#33]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[max_agg#29, array_agg#33]
        +-expr_list=
        | +-max_agg#29 := ColumnRef(type=DOUBLE, column=$aggregate.$agg1#28)
        | +-array_agg#33 := ColumnRef(type=ARRAY<STRING>, column=$aggregate.$agg2#32)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=$aggregate.[$agg1#28, $agg2#32]
            +-input_scan=
            | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, string#5, double#9], table=SimpleTypes, column_index_list=[0, 1, 4, 8])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
            | |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            | |     +-Literal(type=INT64, value=10)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT32, INT32) -> BOOL)
            |       +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |       +-Literal(type=INT32, value=10)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternVariableRef(name="A")
            |     +-MatchRecognizePatternVariableRef(name="B")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#28 :=
            |     | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
            |     |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |     +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#23)
            |     |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#23 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#27 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
            |     |         +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |           +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
            |     |           | +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#24)
            |     |           | +-Cast(INT64 -> DOUBLE)
            |     |           |   +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#25)
            |     |           +-Cast(INT32 -> DOUBLE)
            |     |             +-ColumnRef(type=INT32, column=$aggregate.$agg1#26)
            |     |         +-group_by_list=
            |     |         | +-$groupbymod#24 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            |     |         | +-$groupbymod#25 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |     |         +-group_by_aggregate_list=
            |     |           +-$agg1#26 :=
            |     |             +-AggregateFunctionCall(ZetaSQL:min(INT32) -> INT32)
            |     |               +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
            |     +-$agg2#32 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
            |         +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#30)
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#31)
            |         +-group_by_list=
            |         | +-$groupbymod#30 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
            |         +-group_by_aggregate_list=
            |           +-$agg1#31 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
            |               +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
            +-match_number_column=$match_recognize.$match_number#20
            +-match_row_number_column=$match_recognize.$match_row_number#21
            +-classifier_column=$match_recognize.$classifier#22

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_9.a_6 AS max_agg,
  matchrecognizescan_9.a_7 AS array_agg
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.string AS a_3,
      SimpleTypes.double AS a_4
    FROM
      SimpleTypes
  ) AS simpletypes_5 MATCH_RECOGNIZE(
    ORDER BY simpletypes_5.a_3
    MEASURES
      MAX((simpletypes_5.a_4) + (SUM(((simpletypes_5.a_4) + CAST(simpletypes_5.a_2 AS DOUBLE)) + CAST(MIN(simpletypes_5.a_1) AS DOUBLE)
          GROUP BY simpletypes_5.a_4, simpletypes_5.a_2))
        GROUP BY simpletypes_5.a_4) AS a_6,
      ARRAY_AGG(simpletypes_5.a_3
        GROUP BY simpletypes_5.a_3
        ORDER BY MIN(simpletypes_5.a_4)) AS a_7,
      MATCH_NUMBER() AS a_8
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A  B))
    DEFINE
      A AS(simpletypes_5.a_2) < 10,
      B AS(simpletypes_5.a_1) >= CAST(10 AS INT32)
  )
  AS matchrecognizescan_9;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1,
     SimpleTypes.int64 AS a_2,
     SimpleTypes.string AS a_3,
     SimpleTypes.double AS a_4
|> AS simpletypes_5
|> MATCH_RECOGNIZE(
     ORDER BY simpletypes_5.a_3
     MEASURES
       MAX((simpletypes_5.a_4) + (SUM(((simpletypes_5.a_4) + CAST(simpletypes_5.a_2 AS DOUBLE)) + CAST(MIN(simpletypes_5.a_1) AS DOUBLE)
           GROUP BY simpletypes_5.a_4, simpletypes_5.a_2))
         GROUP BY simpletypes_5.a_4) AS a_6,
       ARRAY_AGG(simpletypes_5.a_3
         GROUP BY simpletypes_5.a_3
         ORDER BY MIN(simpletypes_5.a_4)) AS a_7,
       MATCH_NUMBER() AS a_8
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A  B))
     DEFINE
       A AS(simpletypes_5.a_2) < 10,
       B AS(simpletypes_5.a_1) >= CAST(10 AS INT32)
   )
   AS matchrecognizescan_9
|> SELECT
     matchrecognizescan_9.a_6 AS max_agg,
     matchrecognizescan_9.a_7 AS array_agg;
==

# Inner-most ORDER BY creates a column to compute before aggregation.
SELECT
  ARRAY_AGG(
    bool
    GROUP BY bool
    ORDER BY STRING_AGG(string ORDER BY CONCAT(string, string))
  )
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#23 AS `$col1` [ARRAY<BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#23]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#23]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypes.string#5, SimpleTypes.bool#7, $orderby.$orderbycol1#21]
        |   +-expr_list=
        |   | +-$orderbycol1#21 :=
        |   |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |   |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   +-input_scan=
        |     +-TableScan(column_list=SimpleTypes.[string#5, bool#7], table=SimpleTypes, column_index_list=[4, 6])
        +-aggregate_list=
          +-$agg1#23 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(BOOL) -> ARRAY<BOOL>)
              +-ColumnRef(type=BOOL, column=$group_by_list.$groupbymod#20)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=STRING, column=$aggregate.$agg1#22)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
              +-group_by_aggregate_list=
                +-$agg1#22 :=
                  +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
                    +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#21)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(projectscan_5.a_2
    GROUP BY projectscan_5.a_2
    ORDER BY STRING_AGG(projectscan_5.a_1
      ORDER BY projectscan_5.a_4)) AS a_6
FROM
  (
    SELECT
      simpletypes_3.a_1 AS a_1,
      simpletypes_3.a_2 AS a_2,
      CONCAT(simpletypes_3.a_1, simpletypes_3.a_1) AS a_4
    FROM
      (
        SELECT
          SimpleTypes.string AS a_1,
          SimpleTypes.bool AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
  ) AS projectscan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.string AS a_1,
     SimpleTypes.bool AS a_2
|> AS simpletypes_3
|> SELECT
     simpletypes_3.a_1 AS a_1,
     simpletypes_3.a_2 AS a_2,
     CONCAT(simpletypes_3.a_1, simpletypes_3.a_1) AS a_4
|> AS projectscan_5
|> AGGREGATE
     ARRAY_AGG(projectscan_5.a_2
       GROUP BY projectscan_5.a_2
       ORDER BY STRING_AGG(projectscan_5.a_1
         ORDER BY projectscan_5.a_4)) AS a_6;
==

# Inner-most ORDER BY creates a column to compute before aggregation.
SELECT
  ARRAY_AGG(
    COUNT(
      STRING_AGG(
        string
        ORDER BY CONCAT(string, "1")
      )
      GROUP BY int64
    )
    GROUP BY string
    ORDER BY STRING_AGG(string ORDER BY CONCAT(string, "2"))
  )
FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#28 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#28]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#28]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypes.string#5, $orderby.$orderbycol1#23, $orderby.$orderbycol1#26]
        |   +-expr_list=
        |   | +-$orderbycol1#23 :=
        |   | | +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |   | |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   | |   +-Literal(type=STRING, value="1")
        |   | +-$orderbycol1#26 :=
        |   |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |   |     +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   |     +-Literal(type=STRING, value="2")
        |   +-input_scan=
        |     +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        +-aggregate_list=
          +-$agg1#28 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#25)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=STRING, column=$aggregate.$agg2#27)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#25 :=
                | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
                |   +-ColumnRef(type=STRING, column=$aggregate.$agg1#24)
                |   +-group_by_list=
                |   | +-$groupbymod#21 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
                |   | +-$groupbymod#22 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                |   +-group_by_aggregate_list=
                |     +-$agg1#24 :=
                |       +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
                |         +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
                |         +-order_by_item_list=
                |           +-OrderByItem
                |             +-column_ref=
                |               +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#23)
                +-$agg2#27 :=
                  +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
                    +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#26)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(COUNT(STRING_AGG(projectscan_6.a_2
        ORDER BY projectscan_6.a_4)
      GROUP BY projectscan_6.a_2, projectscan_6.a_1)
    GROUP BY projectscan_6.a_2
    ORDER BY STRING_AGG(projectscan_6.a_2
      ORDER BY projectscan_6.a_5)) AS a_7
FROM
  (
    SELECT
      simpletypes_3.a_1 AS a_1,
      simpletypes_3.a_2 AS a_2,
      CONCAT(simpletypes_3.a_2, "1") AS a_4,
      CONCAT(simpletypes_3.a_2, "2") AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_1,
          SimpleTypes.string AS a_2
        FROM
          SimpleTypes
      ) AS simpletypes_3
  ) AS projectscan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.string AS a_2
|> AS simpletypes_3
|> SELECT
     simpletypes_3.a_1 AS a_1,
     simpletypes_3.a_2 AS a_2,
     CONCAT(simpletypes_3.a_2, "1") AS a_4,
     CONCAT(simpletypes_3.a_2, "2") AS a_5
|> AS projectscan_6
|> AGGREGATE
     ARRAY_AGG(COUNT(STRING_AGG(projectscan_6.a_2
           ORDER BY projectscan_6.a_4)
         GROUP BY projectscan_6.a_2, projectscan_6.a_1)
       GROUP BY projectscan_6.a_2
       ORDER BY STRING_AGG(projectscan_6.a_2
         ORDER BY projectscan_6.a_5)) AS a_7;
==

# Multi-level aggregation on an aggregate function with more than 1 argument.
SELECT
  CORR(
    int32 + int64 + CAST(MAX(double) AS INT64),
    CORR(
      double,
      MIN(double)
      GROUP BY double
    )
    GROUP BY int32
  )
FROM SimpleTypes
GROUP BY int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#29]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, double#9], table=SimpleTypes, column_index_list=[0, 1, 8])
        +-group_by_list=
        | +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
              +-Cast(INT64 -> DOUBLE)
              | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |   | +-Cast(INT32 -> INT64)
              |   | | +-ColumnRef(type=INT32, column=$group_by_list.$groupbymod#22)
              |   | +-ColumnRef(type=INT64, column=$group_by_list.$groupbymod#21)
              |   +-Cast(DOUBLE -> INT64)
              |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#23)
              +-ColumnRef(type=DOUBLE, column=$aggregate.$agg2#28)
              +-group_by_list=
              | +-$groupbymod#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
              | +-$groupbymod#22 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
              +-group_by_aggregate_list=
                +-$agg1#23 :=
                | +-AggregateFunctionCall(ZetaSQL:max(DOUBLE) -> DOUBLE)
                |   +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                +-$agg2#28 :=
                  +-AggregateFunctionCall(ZetaSQL:corr(DOUBLE, DOUBLE) -> DOUBLE)
                    +-ColumnRef(type=DOUBLE, column=$group_by_list.$groupbymod#26)
                    +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#27)
                    +-group_by_list=
                    | +-$groupbymod#24 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
                    | +-$groupbymod#25 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
                    | +-$groupbymod#26 := ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)
                    +-group_by_aggregate_list=
                      +-$agg1#27 :=
                        +-AggregateFunctionCall(ZetaSQL:min(DOUBLE) -> DOUBLE)
                          +-ColumnRef(type=DOUBLE, column=SimpleTypes.double#9)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  CORR(CAST((CAST(simpletypes_4.a_1 AS INT64) + (simpletypes_4.a_2)) + CAST(MAX(simpletypes_4.a_3) AS INT64) AS DOUBLE),
    CORR(simpletypes_4.a_3, MIN(simpletypes_4.a_3)
      GROUP BY simpletypes_4.a_2, simpletypes_4.a_1, simpletypes_4.a_3)
    GROUP BY simpletypes_4.a_2, simpletypes_4.a_1) AS a_5
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.int64 AS a_2,
      SimpleTypes.double AS a_3
    FROM
      SimpleTypes
  ) AS simpletypes_4
GROUP BY simpletypes_4.a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  CORR(CAST((CAST(simpletypes_4.a_1 AS INT64) + (simpletypes_4.a_2)) + CAST(MAX(simpletypes_4.a_3) AS INT64) AS DOUBLE),
    CORR(simpletypes_4.a_3, MIN(simpletypes_4.a_3)
      GROUP BY simpletypes_4.a_2, simpletypes_4.a_1, simpletypes_4.a_3)
    GROUP BY simpletypes_4.a_2, simpletypes_4.a_1) AS a_5
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.int64 AS a_2,
         SimpleTypes.double AS a_3
    |> AS simpletypes_4
  )
GROUP BY simpletypes_4.a_2
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5;
==

SELECT
  SUM(MIN(int32) GROUP BY bool)
FROM SimpleTypes
GROUP BY (int32 IN (SELECT 1))
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#25 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#25]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#25]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int32#1, bool#7], table=SimpleTypes, column_index_list=[0, 6])
        +-group_by_list=
        | +-$groupbycol1#21 :=
        |   +-SubqueryExpr
        |     +-type=BOOL
        |     +-subquery_type=IN
        |     +-in_expr=
        |     | +-Cast(INT32 -> INT64)
        |     |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#20]
        |         +-expr_list=
        |         | +-$col1#20 := Literal(type=INT64, value=1)
        |         +-input_scan=
        |           +-SingleRowScan
        +-aggregate_list=
          +-$agg1#25 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-Cast(INT32 -> INT64)
                +-ColumnRef(type=INT32, column=$aggregate.$agg1#24)
              +-group_by_list=
              | +-$groupbymod#23 := ColumnRef(type=BOOL, column=SimpleTypes.bool#7)
              +-group_by_aggregate_list=
                +-$agg1#24 :=
                  +-AggregateFunctionCall(ZetaSQL:min(INT32) -> INT32)
                    +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(MIN(simpletypes_3.a_1) AS INT64)
    GROUP BY simpletypes_3.a_2) AS a_5
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_1,
      SimpleTypes.bool AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3
GROUP BY (CAST(simpletypes_3.a_1 AS INT64) IN (
    SELECT
      1 AS a_4
  ));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  SUM(CAST(MIN(simpletypes_3.a_1) AS INT64)
    GROUP BY simpletypes_3.a_2) AS a_5
FROM
  (
    FROM
      SimpleTypes
    |> SELECT
         SimpleTypes.int32 AS a_1,
         SimpleTypes.bool AS a_2
    |> AS simpletypes_3
  )
GROUP BY (CAST(simpletypes_3.a_1 AS INT64) IN (
    SELECT
      1 AS a_4
  ))
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5;
