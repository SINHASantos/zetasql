[default language_features=NONE,+PIPES,+OMIT_INSERT_COLUMN_LIST]
FROM KeyValue
|> INSERT INTO KeyValue
--
ERROR: Pipe INSERT not supported [at 2:1]
|> INSERT INTO KeyValue
^
==

# INSERT is allowed only if both QUERY and GENERALIZED_QUERY
# statement kinds are enabled.
# TODO SQLBuilder doesn't work for pipe EXPORT DATA yet.
[default no_run_sqlbuilder]
[default language_features=NONE,+PIPES,+PIPE_INSERT,+PIPE_FORK,+PIPE_TEE,+PIPE_IF,+OMIT_INSERT_COLUMN_LIST,+ENABLE_MEASURES,+INSERT_ON_CONFLICT_CLAUSE,+DML_RETURNING]
[supported_statement_kinds={{QUERY|GENERALIZED_QUERY|QUERY,GENERALIZED_QUERY|INSERT}}]
FROM KeyValue
|> INSERT INTO KeyValue
--
ALTERNATION GROUP: QUERY
--
ERROR: Generalized query statements are not supported so pipe INSERT cannot be used [at 2:1]
|> INSERT INTO KeyValue
^
--
ALTERNATION GROUPS:
    GENERALIZED_QUERY
    INSERT
--
ERROR: Statement not supported: QueryStatement [at 1:1]
FROM KeyValue
^
--
ALTERNATION GROUP: QUERY,GENERALIZED_QUERY
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
==

FROM KeyValue
|> INSERT INTO KeyValue
|> WHERE true
--
ERROR: Additional pipe operators cannot follow the terminal pipe operator INSERT [at 3:1]
|> WHERE true
^
==

# We show one simple rewrite here at the top.
# Most of the rewrites aren't very interesting so we don't have them
# on for the whole file, and just enable them lower down for more
# complex queries with CTEs, IF, TEE, etc.
[enabled_ast_rewrites=DEFAULTS]
SELECT 5 key, "abc" value
|> INSERT INTO KeyValue {{|(key, value)}}
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-ProjectScan
        |   +-column_list=$query.[key#1, value#2]
        |   +-expr_list=
        |   | +-key#1 := Literal(type=INT64, value=5)
        |   | +-value#2 := Literal(type=STRING, value="abc")
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=$query.[key#1, value#2]
        +-column_access_list=WRITE,WRITE


[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=KeyValue.[Key#3, Value#4]
+-query=
| +-ProjectScan
|   +-column_list=$query.[key#1, value#2]
|   +-expr_list=
|   | +-key#1 := Literal(type=INT64, value=5)
|   | +-value#2 := Literal(type=STRING, value="abc")
|   +-input_scan=
|     +-SingleRowScan
+-query_output_column_list=$query.[key#1, value#2]
+-column_access_list=WRITE,WRITE
==

# Columns in the wrong order.
SELECT "abc" value, 5 key
|> INSERT INTO KeyValue{{| (key, value)| (value, key)}}
--
ALTERNATION GROUP: <empty>
--
ERROR: Query column 1 has type STRING which cannot be inserted into column Key, which has type INT64 [at 2:4]
|> INSERT INTO KeyValue
   ^
--
ALTERNATION GROUP:  (key, value)
--
ERROR: Query column 1 has type STRING which cannot be inserted into column Key, which has type INT64 [at 2:4]
|> INSERT INTO KeyValue (key, value)
   ^
--
ALTERNATION GROUP:  (value, key)
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Value#4, Key#3]
        +-query=
        | +-ProjectScan
        |   +-column_list=$query.[value#1, key#2]
        |   +-expr_list=
        |   | +-value#1 := Literal(type=STRING, value="abc")
        |   | +-key#2 := Literal(type=INT64, value=5)
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=$query.[value#1, key#2]
        +-column_access_list=WRITE,WRITE
==

SELECT 5, "value"
|> INSERT INTO KeyValue
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-ProjectScan
        |   +-column_list=$query.[$col1#1, $col2#2]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=5)
        |   | +-$col2#2 := Literal(type=STRING, value="value")
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=$query.[$col1#1, $col2#2]
        +-column_access_list=WRITE,WRITE
==

SELECT "abc", 7.5
|> INSERT INTO KeyValue
--
ERROR: Query column 1 has type STRING which cannot be inserted into column Key, which has type INT64 [at 2:4]
|> INSERT INTO KeyValue
   ^
==

SELECT "abc"
|> INSERT INTO KeyValue{{| (key,value)| (value)}}
--
ALTERNATION GROUP: <empty>
--
ERROR: Inserted row has wrong column count; Has 1, expected 2 [at 2:4]
|> INSERT INTO KeyValue
   ^
--
ALTERNATION GROUP:  (key,value)
--
ERROR: Inserted row has wrong column count; Has 1, expected 2 [at 2:4]
|> INSERT INTO KeyValue (key,value)
   ^
--
ALTERNATION GROUP:  (value)
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=[KeyValue.Value#3], table=KeyValue, column_index_list=[1])
        +-insert_column_list=[KeyValue.Value#3]
        +-query=
        | +-ProjectScan
        |   +-column_list=[$query.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=STRING, value="abc")
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=[$query.$col1#1]
        +-column_access_list=WRITE
==

SELECT 5, "abc", 7.5
|> INSERT INTO KeyValue{{| (key,value)| (key,value,Key)}}
--
ALTERNATION GROUP: <empty>
--
ERROR: Inserted row has wrong column count; Has 3, expected 2 [at 2:4]
|> INSERT INTO KeyValue
   ^
--
ALTERNATION GROUP:  (key,value)
--
ERROR: Inserted row has wrong column count; Has 3, expected 2 [at 2:4]
|> INSERT INTO KeyValue (key,value)
   ^
--
ALTERNATION GROUP:  (key,value,Key)
--
ERROR: INSERT has columns with duplicate name: Key [at 2:36]
|> INSERT INTO KeyValue (key,value,Key)
                                   ^
==

# Non-nested INSERTs don't allow generalized paths.
FROM KeyValue
|> INSERT INTO TwoIntegers{{.(a.b)|[2]|.a[2]}}
--
ALTERNATION GROUP: .(a.b)
--
ERROR: Non-nested INSERT statement requires a table name [at 2:29]
|> INSERT INTO TwoIntegers.(a.b)
                            ^
--
ALTERNATION GROUP: [2]
--
ERROR: Non-nested INSERT statement requires a table name [at 2:28]
|> INSERT INTO TwoIntegers[2]
                           ^
--
ALTERNATION GROUP: .a[2]
--
ERROR: Non-nested INSERT statement requires a table name [at 2:30]
|> INSERT INTO TwoIntegers.a[2]
                             ^
==

# Error on non-writable columns.
SELECT 1, NULL
|> INSERT INTO AllNonKeysNonWritable (Key, ProtoValue)
--
ERROR: Cannot INSERT value on non-writable column: ProtoValue [at 2:44]
|> INSERT INTO AllNonKeysNonWritable (Key, ProtoValue)
                                           ^
==

# Insert into a pseudo-column.
SELECT "name"
|> INSERT INTO EnumTable (Filename)
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=[EnumTable.Filename#5], table=EnumTable, column_index_list=[3])
        +-insert_column_list=[EnumTable.Filename#5]
        +-query=
        | +-ProjectScan
        |   +-column_list=[$query.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=STRING, value="name")
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=[$query.$col1#1]
        +-column_access_list=WRITE
==

# This requires adding a cast.
FROM KeyValue
|> SELECT CAST(key AS int32), "abc"
|> INSERT INTO KeyValue
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Key#5, Value#6]
        +-query=
        | +-ProjectScan
        |   +-column_list=[$insert_cast.$col1#7, $pipe_select.$col2#4]
        |   +-expr_list=
        |   | +-$col1#7 :=
        |   |   +-Cast(INT32 -> INT64)
        |   |     +-ColumnRef(type=INT32, column=$pipe_select.$col1#3)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=$pipe_select.[$col1#3, $col2#4]
        |       +-expr_list=
        |       | +-$col1#3 :=
        |       | | +-Cast(INT64 -> INT32)
        |       | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       | +-$col2#4 := Literal(type=STRING, value="abc")
        |       +-input_scan=
        |         +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-query_output_column_list=[$insert_cast.$col1#7, $pipe_select.$col2#4]
        +-column_access_list=WRITE,WRITE
==

# This does an assignment cast (a downcast).
FROM SimpleTypes
|> SELECT int64
|> INSERT INTO SimpleTypes (int32)
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=[SimpleTypes.int32#20], table=SimpleTypes, column_index_list=[0])
        +-insert_column_list=[SimpleTypes.int32#20]
        +-query=
        | +-ProjectScan
        |   +-column_list=[$insert_cast.int64#39]
        |   +-expr_list=
        |   | +-int64#39 :=
        |   |   +-Cast(INT64 -> INT32)
        |   |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[SimpleTypes.int64#2]
        |       +-input_scan=
        |         +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-query_output_column_list=[$insert_cast.int64#39]
        +-column_access_list=WRITE
==

# Literal NULL type inference works across the pipe operator like it
# does for NULLs in a SELECT query.
SELECT NULL, NULL
|> INSERT INTO KeyValue
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-ProjectScan
        |   +-column_list=[$query.$col1#1, $insert_cast.$col2#5]
        |   +-expr_list=
        |   | +-$col2#5 := Literal(type=STRING, value=NULL)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=$query.[$col1#1, $col2#2]
        |       +-expr_list=
        |       | +-$col1#1 := Literal(type=INT64, value=NULL)
        |       | +-$col2#2 := Literal(type=INT64, value=NULL)
        |       +-input_scan=
        |         +-SingleRowScan
        +-query_output_column_list=[$query.$col1#1, $insert_cast.$col2#5]
        +-column_access_list=WRITE,WRITE
==

# Literal NULL type inference doesn't work when there's another
# pipe operator in between.
SELECT NULL, NULL
|> WHERE true
|> INSERT INTO KeyValue
--
ERROR: Query column 2 has type INT64 which cannot be inserted into column Value, which has type STRING [at 3:4]
|> INSERT INTO KeyValue
   ^
==

# Insert into a value table.
FROM TestExtraValueTable
|> INSERT INTO TestExtraValueTable
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=[TestExtraValueTable.value#4], table=TestExtraValueTable, column_index_list=[0])
        +-insert_column_list=[TestExtraValueTable.value#4]
        +-query=
        | +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
        +-query_output_column_list=[TestExtraValueTable.value#1]
        +-column_access_list=WRITE
==

# Insert a one-column table into a value table.
FROM TestExtraValueTable AS value
|> SELECT value
|> INSERT INTO TestExtraValueTable
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=[TestExtraValueTable.value#4], table=TestExtraValueTable, column_index_list=[0])
        +-insert_column_list=[TestExtraValueTable.value#4]
        +-query=
        | +-ProjectScan
        |   +-column_list=[TestExtraValueTable.value#1]
        |   +-input_scan=
        |     +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0], alias="value")
        +-query_output_column_list=[TestExtraValueTable.value#1]
        +-column_access_list=WRITE
==

# Insert wrong type into a value table.
SELECT {{|AS VALUE}} 123 x
|> INSERT INTO TestExtraValueTable
--
ERROR: Query column 1 has type INT64 which cannot be inserted into column value, which has type zetasql_test__.TestExtraPB [at 2:4]
|> INSERT INTO TestExtraValueTable
   ^
==

# INSERT OR X modifiers
FROM KeyValue
|> INSERT {{OR IGNORE|OR REPLACE|OR UPDATE}} INTO KeyValue
--
ALTERNATION GROUP: OR IGNORE
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_mode=OR IGNORE
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
--
ALTERNATION GROUP: OR REPLACE
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_mode=OR REPLACE
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
--
ALTERNATION GROUP: OR UPDATE
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_mode=OR UPDATE
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
==

# INSERT with hint on the target table
FROM KeyValue
|> INSERT INTO KeyValue @{hint=1}
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan
        |   +-column_list=KeyValue.[Key#3, Value#4]
        |   +-hint_list=
        |   | +-hint := Literal(type=INT64, value=1)
        |   +-table=KeyValue
        |   +-column_index_list=[0, 1]
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
==

# ASSERT_ROWS_MODIFIED modifier
FROM KeyValue
|> INSERT INTO KeyValue
   ASSERT_ROWS_MODIFIED 100
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-assert_rows_modified=
        | +-AssertRowsModified
        |   +-rows=
        |     +-Literal(type=INT64, value=100)
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
==

# ON CONFLICT modifer
FROM KeyValue
|> INSERT INTO KeyValue
   ON CONFLICT DO NOTHING
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
        +-insert_column_list=KeyValue.[Key#3, Value#4]
        +-query=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-query_output_column_list=KeyValue.[Key#1, Value#2]
        +-column_access_list=WRITE,WRITE
        +-on_conflict_clause=
          +-OnConflictClause(conflict_action=NOTHING)
==

# THEN RETURN modifer, which isn't supported yet.
FROM KeyValue
|> INSERT INTO KeyValue
   THEN RETURN *
--
ERROR: Pipe INSERT does not support THEN RETURN [at 3:4]
   THEN RETURN *
   ^
==

# Rewrites are enabled for queries below this point, to show
# rewriter behavior on the more complex cases.
[default enabled_ast_rewrites=DEFAULTS,+INSERT_DML_VALUES]

FROM KeyValue
|> INSERT INTO KeyValue
   THEN RETURN WITH ACTION key
--
ERROR: Pipe INSERT does not support THEN RETURN [at 3:4]
   THEN RETURN WITH ACTION key
   ^
==

# THEN RETURN could potentially make INSERT non-terminal, but that's not
# supported yet.
FROM KeyValue
|> INSERT INTO KeyValue
   THEN RETURN *
|> WHERE true
--
ERROR: Pipe INSERT does not support THEN RETURN [at 3:4]
   THEN RETURN *
   ^
==

# Test a case where there's a duplicate input column, inserted into two
# target columns. This tests output_column_list mappings work.
FROM KeyValue
|> SELECT key, key
|> INSERT INTO TwoIntegers (key, value)
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=TwoIntegers.[key#3, value#4], table=TwoIntegers, column_index_list=[0, 1])
        +-insert_column_list=TwoIntegers.[key#3, value#4]
        +-query=
        | +-ProjectScan
        |   +-column_list=KeyValue.[Key#1, Key#1]
        |   +-input_scan=
        |     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-query_output_column_list=KeyValue.[Key#1, Key#1]
        +-column_access_list=WRITE,WRITE


[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=TwoIntegers.[key#3, value#4], table=TwoIntegers, column_index_list=[0, 1])
+-insert_column_list=TwoIntegers.[key#3, value#4]
+-query=
| +-ProjectScan
|   +-column_list=KeyValue.[Key#1, Key#1]
|   +-input_scan=
|     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-query_output_column_list=KeyValue.[Key#1, Key#1]
+-column_access_list=WRITE,WRITE
==

# TODO No measures in java.
[no_java]
FROM MeasureTable_SingleKey
|> SELECT key, measure_count_star
|> INSERT INTO MeasureTable_SingleKey (key, measure_count_star)
--
ERROR: Cannot INSERT value on non-writable column: measure_count_star [at 3:45]
|> INSERT INTO MeasureTable_SingleKey (key, measure_count_star)
                                            ^
==

# INSERT inside an IF
FROM KeyValue
|> IF {{TestConstantTrue|TestConstantFalse}} THEN (
     |> SELECT key
     |> INSERT KeyValue (key)
   ) ELSE (
     |> SELECT value
     |> INSERT KeyValue (value)
   )
--
ALTERNATION GROUP: TestConstantTrue
--
GeneralizedQueryStmt
+-query=
  +-PipeIfScan
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    +-selected_case=0
    +-if_case_list=
      +-PipeIfCase
      | +-condition=
      | | +-Constant(TestConstantTrue, type=BOOL, value=true)
      | +-subpipeline_sql="(\n     |> SELECT key\n     |> INSERT KeyValue (key)\n   )"
      | +-subpipeline=
      |   +-Subpipeline
      |     +-scan=
      |       +-PipeInsertScan
      |         +-insert_stmt=
      |           +-InsertStmt
      |             +-table_scan=
      |             | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
      |             +-insert_column_list=[KeyValue.Key#3]
      |             +-query=
      |             | +-ProjectScan
      |             |   +-column_list=[KeyValue.Key#1]
      |             |   +-input_scan=
      |             |     +-SubpipelineInputScan(column_list=[KeyValue.Key#1])
      |             +-query_output_column_list=[KeyValue.Key#1]
      |             +-column_access_list=WRITE
      +-PipeIfCase(subpipeline_sql="(\n     |> SELECT value\n     |> INSERT KeyValue (value)\n   )")


[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
+-insert_column_list=[KeyValue.Key#3]
+-query=
| +-ProjectScan
|   +-column_list=[KeyValue.Key#1]
|   +-input_scan=
|     +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-query_output_column_list=[KeyValue.Key#1]
+-column_access_list=WRITE
--
ALTERNATION GROUP: TestConstantFalse
--
GeneralizedQueryStmt
+-query=
  +-PipeIfScan
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-selected_case=1
    +-if_case_list=
      +-PipeIfCase
      | +-condition=
      | | +-Constant(TestConstantFalse, type=BOOL, value=false)
      | +-subpipeline_sql="(\n     |> SELECT key\n     |> INSERT KeyValue (key)\n   )"
      +-PipeIfCase
        +-subpipeline_sql="(\n     |> SELECT value\n     |> INSERT KeyValue (value)\n   )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-PipeInsertScan
                +-insert_stmt=
                  +-InsertStmt
                    +-table_scan=
                    | +-TableScan(column_list=[KeyValue.Value#4], table=KeyValue, column_index_list=[1])
                    +-insert_column_list=[KeyValue.Value#4]
                    +-query=
                    | +-ProjectScan
                    |   +-column_list=[KeyValue.Value#2]
                    |   +-input_scan=
                    |     +-SubpipelineInputScan(column_list=[KeyValue.Value#2])
                    +-query_output_column_list=[KeyValue.Value#2]
                    +-column_access_list=WRITE


[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Value#4], table=KeyValue, column_index_list=[1])
+-insert_column_list=[KeyValue.Value#4]
+-query=
| +-ProjectScan
|   +-column_list=[KeyValue.Value#2]
|   +-input_scan=
|     +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
+-query_output_column_list=[KeyValue.Value#2]
+-column_access_list=WRITE
==

# INSERT inside FORK or TEE.
FROM KeyValue
|> {{FORK|TEE}} (
     |> SELECT key
     |> INSERT INTO KeyValue (key)
    )
--
ALTERNATION GROUP: FORK
--
GeneralizedQueryStmt
+-query=
  +-PipeForkScan
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    +-subpipeline_list=
      +-GeneralizedQuerySubpipeline
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-PipeInsertScan
                +-insert_stmt=
                  +-InsertStmt
                    +-table_scan=
                    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
                    +-insert_column_list=[KeyValue.Key#3]
                    +-query=
                    | +-ProjectScan
                    |   +-column_list=[KeyValue.Key#1]
                    |   +-input_scan=
                    |     +-SubpipelineInputScan(column_list=[KeyValue.Key#1])
                    +-query_output_column_list=[KeyValue.Key#1]
                    +-column_access_list=WRITE


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$fork_cte_1"
  |     +-with_subquery=
  |       +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
  +-InsertStmt
    +-table_scan=
    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
    +-insert_column_list=[KeyValue.Key#3]
    +-query=
    | +-ProjectScan
    |   +-column_list=[KeyValue.Key#1]
    |   +-input_scan=
    |     +-WithRefScan(column_list=[KeyValue.Key#1], with_query_name="$fork_cte_1")
    +-query_output_column_list=[KeyValue.Key#1]
    +-column_access_list=WRITE
--
ALTERNATION GROUP: TEE
--
GeneralizedQueryStmt
+-output_schema=
| +-OutputSchema
|   +-output_column_list=
|     +-KeyValue.Key#1 AS Key [INT64]
|     +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-PipeTeeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-subpipeline_list=
      +-GeneralizedQuerySubpipeline
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-PipeInsertScan
                +-insert_stmt=
                  +-InsertStmt
                    +-table_scan=
                    | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
                    +-insert_column_list=[KeyValue.Key#3]
                    +-query=
                    | +-ProjectScan
                    |   +-column_list=[KeyValue.Key#1]
                    |   +-input_scan=
                    |     +-SubpipelineInputScan(column_list=[KeyValue.Key#1])
                    +-query_output_column_list=[KeyValue.Key#1]
                    +-column_access_list=WRITE


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$tee_cte_1"
  |     +-with_subquery=
  |       +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
  +-InsertStmt
  | +-table_scan=
  | | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0])
  | +-insert_column_list=[KeyValue.Key#3]
  | +-query=
  | | +-ProjectScan
  | |   +-column_list=[KeyValue.Key#1]
  | |   +-input_scan=
  | |     +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$tee_cte_1")
  | +-query_output_column_list=[KeyValue.Key#1]
  | +-column_access_list=WRITE
  +-QueryStmt
    +-output_column_list=
    | +-KeyValue.Key#1 AS Key [INT64]
    | +-KeyValue.Value#2 AS Value [STRING]
    +-query=
      +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$tee_cte_1")
==

FROM KeyValue, (select 5 |> INSERT INTO KeyValue)
--
ERROR: INSERT is only allowed as part of the outermost query in a statement [at 1:26]
FROM KeyValue, (select 5 |> INSERT INTO KeyValue)
                         ^
==

SELECT (select 5 |> INSERT INTO KeyValue)
--
ERROR: INSERT is only allowed as part of the outermost query in a statement [at 1:18]
SELECT (select 5 |> INSERT INTO KeyValue)
                 ^
==

WITH cte AS (FROM KeyValue |> INSERT INTO KeyValue)
FROM cte
--
ERROR: INSERT is only allowed as part of the outermost query in a statement [at 1:28]
WITH cte AS (FROM KeyValue |> INSERT INTO KeyValue)
                           ^
==

# Note the rewrite for this.  It has to move the WithScan inside
# the InsertStmt's input_scan.  The rewrite produces just an InsertStmt, not
# a MultiStmt.
WITH cte AS (FROM KeyValue)
FROM cte
|> INSERT INTO KeyValue
--
GeneralizedQueryStmt
+-query=
  +-WithScan
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="cte"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-PipeInsertScan
        +-insert_stmt=
          +-InsertStmt
            +-table_scan=
            | +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1])
            +-insert_column_list=KeyValue.[Key#5, Value#6]
            +-query=
            | +-WithRefScan(column_list=cte.[Key#3, Value#4], with_query_name="cte")
            +-query_output_column_list=cte.[Key#3, Value#4]
            +-column_access_list=WRITE,WRITE


[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1])
+-insert_column_list=KeyValue.[Key#5, Value#6]
+-query=
| +-WithScan
|   +-column_list=cte.[Key#3, Value#4]
|   +-with_entry_list=
|   | +-WithEntry
|   |   +-with_query_name="cte"
|   |   +-with_subquery=
|   |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
|   +-query=
|     +-WithRefScan(column_list=cte.[Key#3, Value#4], with_query_name="cte")
+-query_output_column_list=cte.[Key#3, Value#4]
+-column_access_list=WRITE,WRITE
==

CREATE VIEW v AS
FROM KeyValue
|> INSERT INTO KeyValue
--
ERROR: INSERT is only allowed as part of the outermost query in a statement [at 3:1]
|> INSERT INTO KeyValue
^
==

# Pipe INSERT inside a query inside an EXPLAIN.
# The statement gets rewritten inside the EXPLAIN.
EXPLAIN
FROM KeyValue
|> INSERT INTO KeyValue
--
ExplainStmt
+-statement=
  +-GeneralizedQueryStmt
    +-query=
      +-PipeInsertScan
        +-insert_stmt=
          +-InsertStmt
            +-table_scan=
            | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
            +-insert_column_list=KeyValue.[Key#3, Value#4]
            +-query=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-query_output_column_list=KeyValue.[Key#1, Value#2]
            +-column_access_list=WRITE,WRITE


[REWRITTEN AST]
ExplainStmt
+-statement=
  +-InsertStmt
    +-table_scan=
    | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1])
    +-insert_column_list=KeyValue.[Key#3, Value#4]
    +-query=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query_output_column_list=KeyValue.[Key#1, Value#2]
    +-column_access_list=WRITE,WRITE
==

# Test with a table with generated columns.
# This expresses reads and writes of unreferenced target columns.
# TODO: Add java support for generated expressions.
[no_java]
SELECT 3
|> INSERT INTO TableWithGeneratedColumn (C)
--
GeneralizedQueryStmt
+-query=
  +-PipeInsertScan
    +-insert_stmt=
      +-InsertStmt
        +-table_scan=
        | +-TableScan(column_list=TableWithGeneratedColumn.[A#2, B#3, C#4], table=TableWithGeneratedColumn, column_index_list=[0, 1, 2])
        +-insert_column_list=[TableWithGeneratedColumn.C#4]
        +-query=
        | +-ProjectScan
        |   +-column_list=[$query.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-SingleRowScan
        +-query_output_column_list=[$query.$col1#1]
        +-column_access_list=READ,READ,READ_WRITE
        +-topologically_sorted_generated_column_id_list=[3, 2, 5]
        +-generated_column_expr_list=
          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#4)
          | +-Literal(type=INT64, value=1)
          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.B#3)
          | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#4)
          +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.A#2)
            | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.B#3)
            +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#4)


[REWRITTEN AST]
InsertStmt
+-table_scan=
| +-TableScan(column_list=TableWithGeneratedColumn.[A#2, B#3, C#4], table=TableWithGeneratedColumn, column_index_list=[0, 1, 2])
+-insert_column_list=[TableWithGeneratedColumn.C#4]
+-query=
| +-ProjectScan
|   +-column_list=[$query.$col1#1]
|   +-expr_list=
|   | +-$col1#1 := Literal(type=INT64, value=3)
|   +-input_scan=
|     +-SingleRowScan
+-query_output_column_list=[$query.$col1#1]
+-column_access_list=READ,READ,READ_WRITE
+-topologically_sorted_generated_column_id_list=[3, 2, 5]
+-generated_column_expr_list=
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
  | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#4)
  | +-Literal(type=INT64, value=1)
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
  | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.B#3)
  | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#4)
  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.A#2)
    | +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.B#3)
    +-ColumnRef(type=INT64, column=TableWithGeneratedColumn.C#4)
==

# Pipe INSERT inside an INSERT statement.  This is not allowed.
# The parser has an ambiguity about where ASSERT_ROWS_MODIFIED binds,
# but all possible variations are rejected anyway.
INSERT INTO KeyValue
FROM KeyValue
|> INSERT INTO KeyValue
{{| ASSERT_ROWS_MODIFIED 100}}{{| ASSERT_ROWS_MODIFIED 100}}
--
ERROR: INSERT is only allowed as part of the outermost query in a statement [at 3:1]
|> INSERT INTO KeyValue
^
==

# Pipe INSERT inside an INSERT statement.  This is not allowed.
# The parser has an ambiguity about where THEN RETURN binds,
# but all possible variations are rejected anyway.
INSERT INTO KeyValue
FROM KeyValue
|> INSERT INTO KeyValue
{{| THEN RETURN *}}{{| THEN RETURN *}}
--
ERROR: INSERT is only allowed as part of the outermost query in a statement [at 3:1]
|> INSERT INTO KeyValue
^
