# This file tests various kinds of constant expressions in pipe IF.
# Literal replacement doesn't work because parameters don't work as constants
# in the IF conditions yet.
[default language_features=MAXIMUM,+PIPES,+PIPE_IF,+PIPE_STATIC_DESCRIBE]
[default no_enable_literal_replacement]

# Literal constants
FROM KeyValue
|> IF true THEN ( |> SELECT key )
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-PipeIfScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
    +-selected_case=0
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-Literal(type=BOOL, value=true)
        +-subpipeline_sql="( |> SELECT key )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-ProjectScan
                +-column_list=[KeyValue.Key#1]
                +-input_scan=
                  +-SubpipelineInputScan(column_list=[KeyValue.Key#1])
==

# SimpleConstants from the sample catalog
FROM KeyValue
|> IF TestConstantFalse THEN ( |> SELECT key )
   ELSEIF TestConstantNullBool THEN ( |> SELECT key*2 )
   ELSEIF TestConstantTrue THEN ( |> SELECT value )
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-selected_case=2
    +-if_case_list=
      +-PipeIfCase
      | +-condition=
      | | +-Constant(TestConstantFalse, type=BOOL, value=false)
      | +-subpipeline_sql="( |> SELECT key )"
      +-PipeIfCase
      | +-condition=
      | | +-Constant(TestConstantNullBool, type=BOOL, value=NULL)
      | +-subpipeline_sql="( |> SELECT key*2 )"
      +-PipeIfCase
        +-condition=
        | +-Constant(TestConstantTrue, type=BOOL, value=true)
        +-subpipeline_sql="( |> SELECT value )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-ProjectScan
                +-column_list=[KeyValue.Value#2]
                +-input_scan=
                  +-SubpipelineInputScan(column_list=[KeyValue.Value#2])
==

FROM KeyValue
|> IF TestConstantString THEN ( |> WHERE true )
--
ERROR: Pipe IF condition expression should return type BOOL, but returns STRING [at 2:7]
|> IF TestConstantString THEN ( |> WHERE true )
      ^
==

# Test some SQLConstants.
# They have types available but don't have values available yet.
# These are also tested in execute_query tests where values are evaluated.
[prepare_database=db]
create constant local_constant_true = 1>0;
--
CreateConstantStmt
+-name_path=local_constant_true
+-expr=
  +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    +-Literal(type=INT64, value=1)
    +-Literal(type=INT64, value=0)
==

[prepare_database=db]
create constant local_constant_error = error("error")>0
--
CreateConstantStmt
+-name_path=local_constant_error
+-expr=
  +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    +-FunctionCall(ZetaSQL:error(STRING) -> INT64)
    | +-Literal(type=STRING, value="error")
    +-Literal(type=INT64, value=0)
==

[use_database=db]
from KeyValue
|> IF local_constant_true THEN ( |> EXTEND 5 )
--
ERROR: Constant local_constant_true in pipe IF condition expression doesn't have a value available at analysis time [at 2:7]
|> IF local_constant_true THEN ( |> EXTEND 5 )
      ^
==

[use_database=db]
from KeyValue
|> IF local_constant_error THEN ( |> EXTEND 5 )
--
ERROR: Constant local_constant_error in pipe IF condition expression doesn't have a value available at analysis time [at 2:7]
|> IF local_constant_error THEN ( |> EXTEND 5 )
      ^
==

# Parameter
from KeyValue
|> IF @test_param_bool THEN ( |> SELECT key )
--
ERROR: Pipe IF condition expression must be evaluated to a constant value at analysis time; Only literals and constants are currently supported [at 2:7]
|> IF @test_param_bool THEN ( |> SELECT key )
      ^
==

# System variable
from KeyValue
|> IF @@bool_system_variable THEN ( |> SELECT key )
--
ERROR: Pipe IF condition expression must be evaluated to a constant value at analysis time; Only literals and constants are currently supported [at 2:7]
|> IF @@bool_system_variable THEN ( |> SELECT key )
      ^
==

# Expression
from KeyValue
|> IF 1=1 THEN ( |> SELECT key )
--
ERROR: Pipe IF condition expression must be evaluated to a constant value at analysis time; Only literals and constants are currently supported [at 2:7]
|> IF 1=1 THEN ( |> SELECT key )
      ^
==

# NOT expressions work as constants, and invert the condition.
FROM KeyValue
|> IF NOT {{true|false|null|5}}
   THEN ( |> SELECT value )
--
ALTERNATION GROUP: true
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-selected_case=-1
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |   +-Literal(type=BOOL, value=true)
        +-subpipeline_sql="( |> SELECT value )"
--
ALTERNATION GROUP: false
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-selected_case=0
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |   +-Literal(type=BOOL, value=false)
        +-subpipeline_sql="( |> SELECT value )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-ProjectScan
                +-column_list=[KeyValue.Value#2]
                +-input_scan=
                  +-SubpipelineInputScan(column_list=[KeyValue.Value#2])
--
ALTERNATION GROUP: null
--
ERROR: Operands of NOT cannot be literal NULL [at 2:11]
|> IF NOT null
          ^
--
ALTERNATION GROUP: 5
--
ERROR: No matching signature for operator NOT
  Argument types: INT64
  Signature: NOT (BOOL)
    Argument 1: Unable to coerce type INT64 to expected type BOOL [at 2:7]
|> IF NOT 5
      ^
==

# `NOT null` is still null.
FROM KeyValue
|> IF {{NOT|}} TestConstantNullBool THEN ( |> SELECT bad )
--
ALTERNATION GROUP: NOT
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-selected_case=-1
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |   +-Constant(TestConstantNullBool, type=BOOL, value=NULL)
        +-subpipeline_sql="( |> SELECT bad )"
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-selected_case=-1
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-Constant(TestConstantNullBool, type=BOOL, value=NULL)
        +-subpipeline_sql="( |> SELECT bad )"
==

# NOT with parentheses
FROM KeyValue
|> IF (NOT (false)) THEN ( |> SELECT value )
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-selected_case=0
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |   +-Literal(type=BOOL, value=false)
        +-subpipeline_sql="( |> SELECT value )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-ProjectScan
                +-column_list=[KeyValue.Value#2]
                +-input_scan=
                  +-SubpipelineInputScan(column_list=[KeyValue.Value#2])
==

# Recursive application of NOT works.
FROM KeyValue
|> IF NOT NOT NOT false THEN ( |> SELECT 1 )
--
QueryStmt
+-output_column_list=
| +-$pipe_select.$col1#3 AS `$col1` [INT64]
+-query=
  +-PipeIfScan
    +-column_list=[$pipe_select.$col1#3]
    +-input_scan=
    | +-TableScan(table=KeyValue)
    +-selected_case=0
    +-if_case_list=
      +-PipeIfCase
        +-condition=
        | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |   +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |       +-Literal(type=BOOL, value=false)
        +-subpipeline_sql="( |> SELECT 1 )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-ProjectScan
                +-column_list=[$pipe_select.$col1#3]
                +-expr_list=
                | +-$col1#3 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-SubpipelineInputScan
==

# NOT in ELSEIF
FROM KeyValue
|> IF NOT TestConstantTrue THEN ( |> SELECT key )
   ELSEIF NOT TestConstantFalse THEN ( |> SELECT value )
   ELSE ( |> SELECT bad )
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-PipeIfScan
    +-column_list=[KeyValue.Value#2]
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-selected_case=1
    +-if_case_list=
      +-PipeIfCase
      | +-condition=
      | | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
      | |   +-Constant(TestConstantTrue, type=BOOL, value=true)
      | +-subpipeline_sql="( |> SELECT key )"
      +-PipeIfCase
      | +-condition=
      | | +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
      | |   +-Constant(TestConstantFalse, type=BOOL, value=false)
      | +-subpipeline_sql="( |> SELECT value )"
      | +-subpipeline=
      |   +-Subpipeline
      |     +-scan=
      |       +-ProjectScan
      |         +-column_list=[KeyValue.Value#2]
      |         +-input_scan=
      |           +-SubpipelineInputScan(column_list=[KeyValue.Value#2])
      +-PipeIfCase(subpipeline_sql="( |> SELECT bad )")
==

# Make sure the code handles the NOT FunctionCall from NOT LIKE safely.
FROM KeyValue
|> IF value NOT LIKE 'abc%' THEN ( |> SELECT key )
--
ERROR: Pipe IF condition expression must be a constant expression [at 2:7]
|> IF value NOT LIKE 'abc%' THEN ( |> SELECT key )
      ^
==

# Here the error location for not-constant points at the
# expression inside the NOT.
FROM KeyValue
|> IF NOT 1=2 THEN ( |> SELECT 1 )
--
ERROR: Pipe IF condition expression must be evaluated to a constant value at analysis time; Only literals and constants are currently supported [at 2:11]
|> IF NOT 1=2 THEN ( |> SELECT 1 )
          ^
