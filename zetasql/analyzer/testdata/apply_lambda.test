[default language_features=NONE]
[default enabled_ast_rewrites=DEFAULTS]

select apply(10, x->x+1)
--
ERROR: Lambda is not supported [at 1:18]
select apply(10, x->x+1)
                 ^
==

# Need both language features or the function doesn't show up.
[language_features=NONE,+NAMED_ARGUMENTS{{|,+INLINE_LAMBDA_ARGUMENT}}{{|,+CHAINED_FUNCTION_CALLS}}]
select apply()
--
ALTERNATION GROUPS:
    <empty>
    ,+CHAINED_FUNCTION_CALLS
    ,+INLINE_LAMBDA_ARGUMENT,
--
ERROR: Function not found: APPLY [at 1:8]
select apply()
       ^
--
ALTERNATION GROUP: ,+INLINE_LAMBDA_ARGUMENT,,+CHAINED_FUNCTION_CALLS
--
ERROR: No matching signature for function APPLY with no arguments
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Signature requires at least 2 arguments, found 0 arguments [at 1:8]
select apply()
       ^
==

[default language_features=NONE,+INLINE_LAMBDA_ARGUMENT,+CHAINED_FUNCTION_CALLS,+NAMED_ARGUMENTS]

select apply(10, x->x+1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:apply(INT64 value, FUNCTION<INT64->INT64> transform) -> INT64)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=INT64, value=10)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#1]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |               +-ColumnRef(type=INT64, column=$lambda_arg.x#1)
    |               +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=$subquery1.value#3)
    |         |     +-Literal(type=INT64, value=1)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#3]
    |             +-expr_list=
    |             | +-value#3 := Literal(type=INT64, value=10)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# The input is computed once, and then referenced twice in the lambda body.
select apply(concat("abc"), x->concat(x, "def", x))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:apply(STRING value, FUNCTION<STRING->STRING> transform) -> STRING)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(0) STRING) -> STRING)
    |     |     +-Literal(type=STRING, value="abc")
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#1]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
    |               +-ColumnRef(type=STRING, column=$lambda_arg.x#1)
    |               +-Literal(type=STRING, value="def")
    |               +-ColumnRef(type=STRING, column=$lambda_arg.x#1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
    |         |     +-ColumnRef(type=STRING, column=$subquery1.value#3)
    |         |     +-Literal(type=STRING, value="def")
    |         |     +-ColumnRef(type=STRING, column=$subquery1.value#3)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#3]
    |             +-expr_list=
    |             | +-value#3 :=
    |             |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(0) STRING) -> STRING)
    |             |     +-Literal(type=STRING, value="abc")
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# Show rewriter output when the lambda doesn't use it's input value.
select apply(rand(), x->1234)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:apply(DOUBLE value, FUNCTION<DOUBLE->INT64> transform) -> INT64)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:rand() -> DOUBLE)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#1]
    |           +-body=
    |             +-Literal(type=INT64, value=1234)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 := Literal(type=INT64, value=1234)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#3]
    |             +-expr_list=
    |             | +-value#3 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select apply("abc", x->x+1)
--
ERROR: No matching signature for function APPLY
  Argument types: STRING, LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: failed to resolve lambda body, error: No matching signature for operator +
      Argument types: STRING, INT64
      Signature: INT64 + INT64
        Argument 1: Unable to coerce type STRING to expected type INT64
      Signature: UINT64 + UINT64
        Argument 1: Unable to coerce type STRING to expected type UINT64
      Signature: DOUBLE + DOUBLE
        Argument 1: Unable to coerce type STRING to expected type DOUBLE [at 1:8]
select apply("abc", x->x+1)
       ^
==

# Inferring the type for an empty array from the lambda doesn't work.
select apply({{[]|["abc"]}}, x->array_length(x))
--
ALTERNATION GROUP: []
--
ERROR: No matching signature for function APPLY
  Argument types: [], LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: failed to infer type for 0-th argument (x) of lambda from other untyped arguments [at 1:8]
select apply([], x->array_length(x))
       ^
--
ALTERNATION GROUP: ["abc"]
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:apply(ARRAY<STRING> value, FUNCTION<ARRAY<STRING>->INT64> transform) -> INT64)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<STRING>, value=["abc"])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#1]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |               +-ColumnRef(type=ARRAY<STRING>, column=$lambda_arg.x#1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
    |         |     +-ColumnRef(type=ARRAY<STRING>, column=$subquery1.value#3)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#3]
    |             +-expr_list=
    |             | +-value#3 := Literal(type=ARRAY<STRING>, value=["abc"])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

select apply(null, x->100)
--
ERROR: No matching signature for function APPLY
  Argument types: NULL, LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: failed to infer type for 0-th argument (x) of lambda from other untyped arguments [at 1:8]
select apply(null, x->100)
       ^
==

select apply(10, (x,y)->x+y)
--
ERROR: No matching signature for function APPLY
  Argument types: INT64, LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: lambda requires 1 arguments but 2 is provided [at 1:8]
select apply(10, (x,y)->x+y)
       ^
==

select apply(10, ()->rand())
--
ERROR: No matching signature for function APPLY
  Argument types: INT64, LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: lambda requires 1 arguments but 0 is provided [at 1:8]
select apply(10, ()->rand())
       ^
==

# SAFE.APPLY has a different rewrite to add IFERROR.
# IFERROR covers the APPLY computation but not computing its input.
[language_features=NONE,+INLINE_LAMBDA_ARGUMENT,+CHAINED_FUNCTION_CALLS{{|,+SAFE_FUNCTION_CALL}}{{|,+SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS}}]
select safe.apply(sqrt(-10), x->sqrt(x))
--
ALTERNATION GROUPS:
    <empty>
    ,+SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS
--
ERROR: Function calls with SAFE are not supported [at 1:8]
select safe.apply(sqrt(-10), x->sqrt(x))
       ^
--
ALTERNATION GROUP: ,+SAFE_FUNCTION_CALL,
--
ERROR: Function apply does not support SAFE error mode [at 1:8]
select safe.apply(sqrt(-10), x->sqrt(x))
       ^
--
ALTERNATION GROUP: ,+SAFE_FUNCTION_CALL,,+SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall({SAFE_ERROR_MODE} ZetaSQL:apply(DOUBLE value, FUNCTION<DOUBLE->DOUBLE> transform) -> DOUBLE)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     |     +-Literal(type=DOUBLE, value=-10)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#1]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |               +-ColumnRef(type=DOUBLE, column=$lambda_arg.x#1)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=DOUBLE
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 :=
    |         |   +-FunctionCall(ZetaSQL:iferror(DOUBLE, DOUBLE) -> DOUBLE)
    |         |     +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |         |     | +-ColumnRef(type=DOUBLE, column=$subquery1.value#3)
    |         |     +-Literal(type=DOUBLE, value=NULL, has_explicit_type=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#3]
    |             +-expr_list=
    |             | +-value#3 :=
    |             |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |             |     +-Literal(type=DOUBLE, value=-10)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

# The args have names in the signature but are only allowed positionally.
select apply(10, transfrom=>x->x+1)
--
ERROR: No matching signature for function APPLY
  Argument types: INT64, transfrom => LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Named argument `transfrom` does not exist in signature [at 1:8]
select apply(10, transfrom=>x->x+1)
       ^
==

select apply(x->x+1, value=>10)
--
ERROR: No matching signature for function APPLY
  Argument types: LAMBDA, value => INT64
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Named argument `value` does not exist in signature [at 1:8]
select apply(x->x+1, value=>10)
       ^
==

select apply(x->x+1, 10)
--
ERROR: No matching signature for function APPLY
  Argument types: LAMBDA, INT64
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 1: expected T1, found LAMBDA [at 1:8]
select apply(x->x+1, 10)
       ^
==

# Multi-arg apply is not implemented.
select apply(10, 20, (x,y)->x+y)
--
ERROR: No matching signature for function APPLY
  Argument types: INT64, INT64, LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Signature accepts at most 2 arguments, found 3 arguments [at 1:8]
select apply(10, 20, (x,y)->x+y)
       ^
==

# Multi-arg with zero args is not implemented.
select apply(x->rand())
--
ERROR: No matching signature for function APPLY
  Argument types: LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Signature requires at least 2 arguments, found 1 argument [at 1:8]
select apply(x->rand())
       ^
==

# Using APPLY in a chained call.
select (key * 2).apply(x -> x + 3),
       (value).apply(x -> cast(x AS bytes))
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
| +-$query.$col2#6 AS `$col2` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#5, $col2#6]
    +-expr_list=
    | +-$col1#5 :=
    | | +-FunctionCall(ZetaSQL:apply(INT64 value, FUNCTION<INT64->INT64> transform) -> INT64)
    | |   +-FunctionArgument
    | |   | +-expr=
    | |   |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
    | |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | |   |     +-Literal(type=INT64, value=2)
    | |   +-FunctionArgument
    | |     +-inline_lambda=
    | |       +-InlineLambda
    | |         +-argument_list=[$lambda_arg.x#3]
    | |         +-body=
    | |           +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |             +-ColumnRef(type=INT64, column=$lambda_arg.x#3)
    | |             +-Literal(type=INT64, value=3)
    | +-$col2#6 :=
    |   +-FunctionCall(ZetaSQL:apply(STRING value, FUNCTION<STRING->BYTES> transform) -> BYTES)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#4]
    |           +-body=
    |             +-Cast(STRING -> BYTES)
    |               +-ColumnRef(type=STRING, column=$lambda_arg.x#4)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
| +-$query.$col2#6 AS `$col2` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#5, $col2#6]
    +-expr_list=
    | +-$col1#5 :=
    | | +-SubqueryExpr
    | |   +-type=INT64
    | |   +-subquery_type=SCALAR
    | |   +-parameter_list=
    | |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    | |   +-subquery=
    | |     +-ProjectScan
    | |       +-column_list=[$expr_subquery.$col1#8]
    | |       +-expr_list=
    | |       | +-$col1#8 :=
    | |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |       |     +-ColumnRef(type=INT64, column=$subquery1.value#7)
    | |       |     +-Literal(type=INT64, value=3)
    | |       +-input_scan=
    | |         +-ProjectScan
    | |           +-column_list=[$subquery1.value#7]
    | |           +-expr_list=
    | |           | +-value#7 :=
    | |           |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
    | |           |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    | |           |     +-Literal(type=INT64, value=2)
    | |           +-input_scan=
    | |             +-SingleRowScan
    | +-$col2#6 :=
    |   +-SubqueryExpr
    |     +-type=BYTES
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#10]
    |         +-expr_list=
    |         | +-$col1#10 :=
    |         |   +-Cast(STRING -> BYTES)
    |         |     +-ColumnRef(type=STRING, column=$subquery1.value#9)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#9]
    |             +-expr_list=
    |             | +-value#9 := ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Using APPLY in a sequence of chained calls.
SELECT (123)
          .apply(x->x+1)
          .apply(x->sqrt(x))
          .apply(abc->cast(abc AS string))
          .substr(1, 3)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |     +-FunctionCall(ZetaSQL:apply(DOUBLE value, FUNCTION<DOUBLE->STRING> transform) -> STRING)
    |     | +-FunctionArgument
    |     | | +-expr=
    |     | |   +-FunctionCall(ZetaSQL:apply(INT64 value, FUNCTION<INT64->DOUBLE> transform) -> DOUBLE)
    |     | |     +-FunctionArgument
    |     | |     | +-expr=
    |     | |     |   +-FunctionCall(ZetaSQL:apply(INT64 value, FUNCTION<INT64->INT64> transform) -> INT64)
    |     | |     |     +-FunctionArgument
    |     | |     |     | +-expr=
    |     | |     |     |   +-Literal(type=INT64, value=123)
    |     | |     |     +-FunctionArgument
    |     | |     |       +-inline_lambda=
    |     | |     |         +-InlineLambda
    |     | |     |           +-argument_list=[$lambda_arg.x#1]
    |     | |     |           +-body=
    |     | |     |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     | |     |               +-ColumnRef(type=INT64, column=$lambda_arg.x#1)
    |     | |     |               +-Literal(type=INT64, value=1)
    |     | |     +-FunctionArgument
    |     | |       +-inline_lambda=
    |     | |         +-InlineLambda
    |     | |           +-argument_list=[$lambda_arg.x#2]
    |     | |           +-body=
    |     | |             +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     | |               +-Cast(INT64 -> DOUBLE)
    |     | |                 +-ColumnRef(type=INT64, column=$lambda_arg.x#2)
    |     | +-FunctionArgument
    |     |   +-inline_lambda=
    |     |     +-InlineLambda
    |     |       +-argument_list=[$lambda_arg.abc#3]
    |     |       +-body=
    |     |         +-Cast(DOUBLE -> STRING)
    |     |           +-ColumnRef(type=DOUBLE, column=$lambda_arg.abc#3)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=3)
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |     +-SubqueryExpr
    |     | +-type=STRING
    |     | +-subquery_type=SCALAR
    |     | +-subquery=
    |     |   +-ProjectScan
    |     |     +-column_list=[$expr_subquery.$col1#10]
    |     |     +-expr_list=
    |     |     | +-$col1#10 :=
    |     |     |   +-Cast(DOUBLE -> STRING)
    |     |     |     +-ColumnRef(type=DOUBLE, column=$subquery1.value#9)
    |     |     +-input_scan=
    |     |       +-ProjectScan
    |     |         +-column_list=[$subquery1.value#9]
    |     |         +-expr_list=
    |     |         | +-value#9 :=
    |     |         |   +-SubqueryExpr
    |     |         |     +-type=DOUBLE
    |     |         |     +-subquery_type=SCALAR
    |     |         |     +-subquery=
    |     |         |       +-ProjectScan
    |     |         |         +-column_list=[$expr_subquery.$col1#8]
    |     |         |         +-expr_list=
    |     |         |         | +-$col1#8 :=
    |     |         |         |   +-FunctionCall(ZetaSQL:sqrt(DOUBLE) -> DOUBLE)
    |     |         |         |     +-Cast(INT64 -> DOUBLE)
    |     |         |         |       +-ColumnRef(type=INT64, column=$subquery1.value#7)
    |     |         |         +-input_scan=
    |     |         |           +-ProjectScan
    |     |         |             +-column_list=[$subquery1.value#7]
    |     |         |             +-expr_list=
    |     |         |             | +-value#7 :=
    |     |         |             |   +-SubqueryExpr
    |     |         |             |     +-type=INT64
    |     |         |             |     +-subquery_type=SCALAR
    |     |         |             |     +-subquery=
    |     |         |             |       +-ProjectScan
    |     |         |             |         +-column_list=[$expr_subquery.$col1#6]
    |     |         |             |         +-expr_list=
    |     |         |             |         | +-$col1#6 :=
    |     |         |             |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     |         |             |         |     +-ColumnRef(type=INT64, column=$subquery1.value#5)
    |     |         |             |         |     +-Literal(type=INT64, value=1)
    |     |         |             |         +-input_scan=
    |     |         |             |           +-ProjectScan
    |     |         |             |             +-column_list=[$subquery1.value#5]
    |     |         |             |             +-expr_list=
    |     |         |             |             | +-value#5 := Literal(type=INT64, value=123)
    |     |         |             |             +-input_scan=
    |     |         |             |               +-SingleRowScan
    |     |         |             +-input_scan=
    |     |         |               +-SingleRowScan
    |     |         +-input_scan=
    |     |           +-SingleRowScan
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=3)
    +-input_scan=
      +-SingleRowScan
==

# Nested APPLY with chained calls.
SELECT (value)
          .lower()
          .apply(x -> (x)
                        .substr(1, 5)
                        .apply(y -> cast(y as int64)))
FROM KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-FunctionCall(ZetaSQL:apply(STRING value, FUNCTION<STRING->INT64> transform) -> INT64)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-FunctionCall(ZetaSQL:lower(STRING) -> STRING)
    |     |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#3]
    |           +-body=
    |             +-FunctionCall(ZetaSQL:apply(STRING value, FUNCTION<STRING->INT64> transform) -> INT64)
    |               +-FunctionArgument
    |               | +-expr=
    |               |   +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |               |     +-ColumnRef(type=STRING, column=$lambda_arg.x#3)
    |               |     +-Literal(type=INT64, value=1)
    |               |     +-Literal(type=INT64, value=5)
    |               +-FunctionArgument
    |                 +-inline_lambda=
    |                   +-InlineLambda
    |                     +-argument_list=[$lambda_arg.y#4]
    |                     +-body=
    |                       +-Cast(STRING -> INT64)
    |                         +-ColumnRef(type=STRING, column=$lambda_arg.y#4)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#9]
    |         +-expr_list=
    |         | +-$col1#9 :=
    |         |   +-SubqueryExpr
    |         |     +-type=INT64
    |         |     +-subquery_type=SCALAR
    |         |     +-parameter_list=
    |         |     | +-ColumnRef(type=STRING, column=$subquery1.value#8)
    |         |     +-subquery=
    |         |       +-ProjectScan
    |         |         +-column_list=[$expr_subquery.$col1#10]
    |         |         +-expr_list=
    |         |         | +-$col1#10 :=
    |         |         |   +-Cast(STRING -> INT64)
    |         |         |     +-ColumnRef(type=STRING, column=$subquery1.value#11)
    |         |         +-input_scan=
    |         |           +-ProjectScan
    |         |             +-column_list=[$subquery1.value#11]
    |         |             +-expr_list=
    |         |             | +-value#11 :=
    |         |             |   +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
    |         |             |     +-ColumnRef(type=STRING, column=$subquery1.value#8, is_correlated=TRUE)
    |         |             |     +-Literal(type=INT64, value=1)
    |         |             |     +-Literal(type=INT64, value=5)
    |         |             +-input_scan=
    |         |               +-SingleRowScan
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#8]
    |             +-expr_list=
    |             | +-value#8 :=
    |             |   +-FunctionCall(ZetaSQL:lower(STRING) -> STRING)
    |             |     +-ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

# An APPLY that ignores its input.
SELECT (123).apply(x->"abc")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-FunctionCall(ZetaSQL:apply(INT64 value, FUNCTION<INT64->STRING> transform) -> STRING)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=INT64, value=123)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#1]
    |           +-body=
    |             +-Literal(type=STRING, value="abc")
    +-input_scan=
      +-SingleRowScan

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#2]
    +-expr_list=
    | +-$col1#2 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#4]
    |         +-expr_list=
    |         | +-$col1#4 := Literal(type=STRING, value="abc")
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#3]
    |             +-expr_list=
    |             | +-value#3 := Literal(type=INT64, value=123)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-SingleRowScan
==

SELECT (123).apply(x->substr(x,1,2))
--
ERROR: No matching signature for function APPLY
  Argument types: INT64 (from chained function call input), LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: failed to resolve lambda body, error: No matching signature for function SUBSTR
      Argument types: INT64, INT64, INT64
      Signature: SUBSTR(STRING, INT64, [INT64])
        Argument 1: Unable to coerce type INT64 to expected type STRING
      Signature: SUBSTR(BYTES, INT64, [INT64])
        Argument 1: Unable to coerce type INT64 to expected type BYTES [at 1:14]
SELECT (123).apply(x->substr(x,1,2))
             ^
==

SELECT (123).apply(()->"abc")
--
ERROR: No matching signature for function APPLY
  Argument types: INT64 (from chained function call input), LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: lambda requires 1 arguments but 0 is provided [at 1:14]
SELECT (123).apply(()->"abc")
             ^
==

SELECT (123).apply((x,y)->"abc")
--
ERROR: No matching signature for function APPLY
  Argument types: INT64 (from chained function call input), LAMBDA
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: lambda requires 1 arguments but 2 is provided [at 1:14]
SELECT (123).apply((x,y)->"abc")
             ^
==

select (123).apply(456)
--
ERROR: No matching signature for function APPLY
  Argument types: INT64 (from chained function call input), INT64
  Signature: APPLY(T1, FUNCTION<T1->T2>)
    Argument 2: expected FUNCTION<T1->T2>, found INT64 [at 1:14]
select (123).apply(456)
             ^
==

# Correlated reference in apply lambda.
select (key).apply(x -> value)
from KeyValue
--
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-FunctionCall(ZetaSQL:apply(INT64 value, FUNCTION<INT64->STRING> transform) -> STRING)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.x#3]
    |           +-parameter_list=
    |           | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |           +-body=
    |             +-ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#4 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#4]
    +-expr_list=
    | +-$col1#4 :=
    |   +-SubqueryExpr
    |     +-type=STRING
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#6]
    |         +-expr_list=
    |         | +-$col1#6 := ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.value#5]
    |             +-expr_list=
    |             | +-value#5 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
