# Tests for the pipe TABLESAMPLE operator.
# This isn't testing all the error cases, which are covered
# in tablesample.test.
# It's just testing that the pipe operator works, and that
# name scoping on pipe inputs works as expected.

[default language_features=NONE]
[language_features=NONE,+PIPES]
from TestTable
|> TABLESAMPLE BERNOULLI (10 PERCENT)
--
ERROR: TABLESAMPLE not supported [at 2:4]
|> TABLESAMPLE BERNOULLI (10 PERCENT)
   ^
==

[default language_features=NONE,+PIPES,+TABLESAMPLE,+STRATIFIED_RESERVOIR_TABLESAMPLE]

from TestTable
|> TABLESAMPLE BERNOULLI (10.5 PERCENT)
|> TABLESAMPLE RESERVOIR (10 ROWS)
|> TABLESAMPLE SYSTEM (10 ROWS) REPEATABLE(50)
|> TABLESAMPLE xxxxx (@test_param_int32 ROWS) REPEATABLE(@test_param_int32)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-SampleScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
    | +-SampleScan
    |   +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    |   +-input_scan=
    |   | +-SampleScan
    |   |   +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    |   |   +-input_scan=
    |   |   | +-SampleScan
    |   |   |   +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    |   |   |   +-input_scan=
    |   |   |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
    |   |   |   +-method="bernoulli"
    |   |   |   +-size=
    |   |   |   | +-Literal(type=DOUBLE, value=10.5)
    |   |   |   +-unit=PERCENT
    |   |   +-method="reservoir"
    |   |   +-size=
    |   |   | +-Literal(type=INT64, value=10)
    |   |   +-unit=ROWS
    |   +-method="system"
    |   +-size=
    |   | +-Literal(type=INT64, value=10)
    |   +-unit=ROWS
    |   +-repeatable_argument=
    |     +-Literal(type=INT64, value=50)
    +-method="xxxxx"
    +-size=
    | +-Cast(INT32 -> INT64)
    |   +-Parameter(type=INT32, name="test_param_int32")
    +-unit=ROWS
    +-repeatable_argument=
      +-Cast(INT32 -> INT64)
        +-Parameter(type=INT32, name="test_param_int32")
==

FROM TestTable
|> TABLESAMPLE RESERVOIR (10 ROWS PARTITION BY key)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-SampleScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
    | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
    +-method="reservoir"
    +-size=
    | +-Literal(type=INT64, value=10)
    +-unit=ROWS
    +-partition_by_list=
      +-ColumnRef(type=INT32, column=TestTable.key#1)
==

# This adds a column `w`.
# The psuedo-column `filename` also survives.
FROM EnumTable
|> TABLESAMPLE RESERVOIR (100 ROWS) WITH WEIGHT w
|> WHERE w >= 10.0
|> WHERE key = 5
|> WHERE filename = 'abc'
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
| +-$sample_weight.w#6 AS w [DOUBLE]
+-query=
  +-FilterScan
    +-column_list=[EnumTable.key#1, EnumTable.TestEnum#2, EnumTable.AnotherTestEnum#3, EnumTable.Filename#4, $sample_weight.w#6]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=[EnumTable.key#1, EnumTable.TestEnum#2, EnumTable.AnotherTestEnum#3, EnumTable.Filename#4, $sample_weight.w#6]
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=[EnumTable.key#1, EnumTable.TestEnum#2, EnumTable.AnotherTestEnum#3, EnumTable.Filename#4, $sample_weight.w#6]
    |   |   +-input_scan=
    |   |   | +-SampleScan
    |   |   |   +-column_list=[EnumTable.key#1, EnumTable.TestEnum#2, EnumTable.AnotherTestEnum#3, EnumTable.Filename#4, $sample_weight.w#6]
    |   |   |   +-input_scan=
    |   |   |   | +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4], table=EnumTable, column_index_list=[0, 1, 2, 3])
    |   |   |   +-method="reservoir"
    |   |   |   +-size=
    |   |   |   | +-Literal(type=INT64, value=100)
    |   |   |   +-unit=ROWS
    |   |   |   +-weight_column=
    |   |   |     +-ColumnHolder(column=$sample_weight.w#6)
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$greater_or_equal(DOUBLE, DOUBLE) -> BOOL)
    |   |       +-ColumnRef(type=DOUBLE, column=$sample_weight.w#6)
    |   |       +-Literal(type=DOUBLE, value=10)
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
    |       +-ColumnRef(type=INT32, column=EnumTable.key#1)
    |       +-Literal(type=INT32, value=5)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        +-ColumnRef(type=STRING, column=EnumTable.Filename#4)
        +-Literal(type=STRING, value="abc")
==

# Value table makes it through, with its pseudo-column `filename`.
FROM TestExtraValueTable vt
|> TABLESAMPLE RESERVOIR (12 ROWS PARTITION BY int32_val1, vt.int32_val2)
|> where str_value is not null
|> where vt.str_value is not null
|> where filename = 'abc'
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-FilterScan
    +-column_list=TestExtraValueTable.[value#1, Filename#2]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=TestExtraValueTable.[value#1, Filename#2]
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=TestExtraValueTable.[value#1, Filename#2]
    |   |   +-input_scan=
    |   |   | +-SampleScan
    |   |   |   +-column_list=TestExtraValueTable.[value#1, Filename#2]
    |   |   |   +-input_scan=
    |   |   |   | +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2], table=TestExtraValueTable, column_index_list=[0, 1], alias="vt")
    |   |   |   +-method="reservoir"
    |   |   |   +-size=
    |   |   |   | +-Literal(type=INT64, value=12)
    |   |   |   +-unit=ROWS
    |   |   |   +-partition_by_list=
    |   |   |     +-GetProtoField
    |   |   |     | +-type=INT32
    |   |   |     | +-expr=
    |   |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |   |   |     | +-field_descriptor=int32_val1
    |   |   |     | +-default_value=0
    |   |   |     +-GetProtoField
    |   |   |       +-type=INT32
    |   |   |       +-expr=
    |   |   |       | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |   |   |       +-field_descriptor=int32_val2
    |   |   |       +-default_value=0
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |   |         +-GetProtoField
    |   |           +-type=ARRAY<STRING>
    |   |           +-expr=
    |   |           | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |   |           +-field_descriptor=str_value
    |   |           +-default_value=[]
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |         +-GetProtoField
    |           +-type=ARRAY<STRING>
    |           +-expr=
    |           | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |           +-field_descriptor=str_value
    |           +-default_value=[]
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        +-ColumnRef(type=STRING, column=TestExtraValueTable.Filename#2)
        +-Literal(type=STRING, value="abc")
==

# When we add the `weight` column, the output is no longer a value table, but
# it still contains the value table.
FROM TestExtraValueTable vt
|> TABLESAMPLE BERNOULLI (12 PERCENT) WITH WEIGHT
|> where str_value is not null
|> where vt.str_value is not null
|> where filename = 'abc'
|> where weight > 1.5
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS vt [PROTO<zetasql_test__.TestExtraPB>]
| +-$sample_weight.weight#4 AS weight [DOUBLE]
+-query=
  +-FilterScan
    +-column_list=[TestExtraValueTable.value#1, TestExtraValueTable.Filename#2, $sample_weight.weight#4]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=[TestExtraValueTable.value#1, TestExtraValueTable.Filename#2, $sample_weight.weight#4]
    |   +-input_scan=
    |   | +-FilterScan
    |   |   +-column_list=[TestExtraValueTable.value#1, TestExtraValueTable.Filename#2, $sample_weight.weight#4]
    |   |   +-input_scan=
    |   |   | +-FilterScan
    |   |   |   +-column_list=[TestExtraValueTable.value#1, TestExtraValueTable.Filename#2, $sample_weight.weight#4]
    |   |   |   +-input_scan=
    |   |   |   | +-SampleScan
    |   |   |   |   +-column_list=[TestExtraValueTable.value#1, TestExtraValueTable.Filename#2, $sample_weight.weight#4]
    |   |   |   |   +-input_scan=
    |   |   |   |   | +-TableScan(column_list=TestExtraValueTable.[value#1, Filename#2], table=TestExtraValueTable, column_index_list=[0, 1], alias="vt")
    |   |   |   |   +-method="bernoulli"
    |   |   |   |   +-size=
    |   |   |   |   | +-Literal(type=INT64, value=12)
    |   |   |   |   +-unit=PERCENT
    |   |   |   |   +-weight_column=
    |   |   |   |     +-ColumnHolder(column=$sample_weight.weight#4)
    |   |   |   +-filter_expr=
    |   |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |   |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |   |   |         +-GetProtoField
    |   |   |           +-type=ARRAY<STRING>
    |   |   |           +-expr=
    |   |   |           | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |   |   |           +-field_descriptor=str_value
    |   |   |           +-default_value=[]
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
    |   |         +-GetProtoField
    |   |           +-type=ARRAY<STRING>
    |   |           +-expr=
    |   |           | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |   |           +-field_descriptor=str_value
    |   |           +-default_value=[]
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |       +-ColumnRef(type=STRING, column=TestExtraValueTable.Filename#2)
    |       +-Literal(type=STRING, value="abc")
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
        +-ColumnRef(type=DOUBLE, column=$sample_weight.weight#4)
        +-Literal(type=DOUBLE, value=1.5)
==

# Range variables make it through TABLESAMPLE.
FROM TestTable t1 JOIN TestTable t2 USING (key)
|> TABLESAMPLE BERNOULLI (10 ROWS)  WITH WEIGHT ww
|> SELECT key, t1.key, t2.key, t1, t2.*, ww, *
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.key#4 AS key [INT32]
| +-$pipe_select.t1#9 AS t1 [STRUCT<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, KitchenSink PROTO<zetasql_test__.KitchenSinkPB>>]
| +-TestTable.key#4 AS key [INT32]
| +-TestTable.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$sample_weight.ww#7 AS ww [DOUBLE]
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-TestTable.TestEnum#5 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#6 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$sample_weight.ww#7 AS ww [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.key#1, TestTable.key#4, $pipe_select.t1#9, TestTable.key#4, TestTable.TestEnum#5, TestTable.KitchenSink#6, $sample_weight.ww#7, TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, TestTable.TestEnum#5, TestTable.KitchenSink#6, $sample_weight.ww#7]
    +-expr_list=
    | +-t1#9 :=
    |   +-MakeStruct
    |     +-type=STRUCT<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, KitchenSink PROTO<zetasql_test__.KitchenSinkPB>>
    |     +-field_list=
    |       +-ColumnRef(type=INT32, column=TestTable.key#1)
    |       +-ColumnRef(type=ENUM<zetasql_test__.TestEnum>, column=TestTable.TestEnum#2)
    |       +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    +-input_scan=
      +-SampleScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, TestTable.key#4, TestTable.TestEnum#5, TestTable.KitchenSink#6, $sample_weight.ww#7]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3, key#4, TestEnum#5, KitchenSink#6]
        |   +-left_scan=
        |   | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2], alias="t1")
        |   +-right_scan=
        |   | +-TableScan(column_list=TestTable.[key#4, TestEnum#5, KitchenSink#6], table=TestTable, column_index_list=[0, 1, 2], alias="t2")
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |   |   +-ColumnRef(type=INT32, column=TestTable.key#1)
        |   |   +-ColumnRef(type=INT32, column=TestTable.key#4)
        |   +-has_using=TRUE
        +-method="bernoulli"
        +-size=
        | +-Literal(type=INT64, value=10)
        +-unit=ROWS
        +-weight_column=
          +-ColumnHolder(column=$sample_weight.ww#7)
==

# Test for SQLBuilder, of a TABLESAMPLE operator after unusual preceding scans.
[show_sqlbuilder_output]
FROM TestTable
|> AGGREGATE COUNT(*) c GROUP BY key
|> {{LIMIT 10|EXTEND 123}}
|> TABLESAMPLE BERNOULLI (10 ROWS){{| WITH WEIGHT ww}}
--
ALTERNATION GROUP: LIMIT 10,
--
QueryStmt
+-output_column_list=
| +-$groupby.key#5 AS key [INT32]
| +-$aggregate.c#4 AS c [INT64]
+-query=
  +-SampleScan
    +-column_list=[$groupby.key#5, $aggregate.c#4]
    +-input_scan=
    | +-LimitOffsetScan
    |   +-column_list=[$groupby.key#5, $aggregate.c#4]
    |   +-input_scan=
    |   | +-AggregateScan
    |   |   +-column_list=[$groupby.key#5, $aggregate.c#4]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    |   |   +-group_by_list=
    |   |   | +-key#5 := ColumnRef(type=INT32, column=TestTable.key#1)
    |   |   +-aggregate_list=
    |   |     +-c#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |   +-limit=
    |     +-Literal(type=INT64, value=10)
    +-method="bernoulli"
    +-size=
    | +-Literal(type=INT64, value=10)
    +-unit=ROWS

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  limitoffsetscan_5.a_3 AS key,
  limitoffsetscan_5.a_4 AS c
FROM
  (
    SELECT
      testtable_2.a_1 AS a_3,
      COUNT(*) AS a_4
    FROM
      (
        SELECT
          TestTable.key AS a_1
        FROM
          TestTable
      ) AS testtable_2
    GROUP BY 1
    LIMIT 10
  ) AS limitoffsetscan_5 TABLESAMPLE bernoulli(10 ROWS);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1
|> AS testtable_2
|> EXTEND
     testtable_2.a_1 AS a_3
|> AGGREGATE
     COUNT(*) AS a_4
   GROUP BY a_3
|> LIMIT 10
|> AS limitoffsetscan_5
|> TABLESAMPLE bernoulli(10 ROWS)
|> SELECT
     limitoffsetscan_5.a_3 AS key,
     limitoffsetscan_5.a_4 AS c;
--
ALTERNATION GROUP: LIMIT 10, WITH WEIGHT ww
--
QueryStmt
+-output_column_list=
| +-$groupby.key#5 AS key [INT32]
| +-$aggregate.c#4 AS c [INT64]
| +-$sample_weight.ww#6 AS ww [DOUBLE]
+-query=
  +-SampleScan
    +-column_list=[$groupby.key#5, $aggregate.c#4, $sample_weight.ww#6]
    +-input_scan=
    | +-LimitOffsetScan
    |   +-column_list=[$groupby.key#5, $aggregate.c#4]
    |   +-input_scan=
    |   | +-AggregateScan
    |   |   +-column_list=[$groupby.key#5, $aggregate.c#4]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    |   |   +-group_by_list=
    |   |   | +-key#5 := ColumnRef(type=INT32, column=TestTable.key#1)
    |   |   +-aggregate_list=
    |   |     +-c#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |   +-limit=
    |     +-Literal(type=INT64, value=10)
    +-method="bernoulli"
    +-size=
    | +-Literal(type=INT64, value=10)
    +-unit=ROWS
    +-weight_column=
      +-ColumnHolder(column=$sample_weight.ww#6)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  limitoffsetscan_5.a_3 AS key,
  limitoffsetscan_5.a_4 AS c,
  a_6 AS ww
FROM
  (
    SELECT
      testtable_2.a_1 AS a_3,
      COUNT(*) AS a_4
    FROM
      (
        SELECT
          TestTable.key AS a_1
        FROM
          TestTable
      ) AS testtable_2
    GROUP BY 1
    LIMIT 10
  ) AS limitoffsetscan_5 TABLESAMPLE bernoulli(10 ROWS) WITH WEIGHT AS a_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1
|> AS testtable_2
|> EXTEND
     testtable_2.a_1 AS a_3
|> AGGREGATE
     COUNT(*) AS a_4
   GROUP BY a_3
|> LIMIT 10
|> AS limitoffsetscan_5
|> TABLESAMPLE bernoulli(10 ROWS) WITH WEIGHT AS a_6
|> SELECT
     limitoffsetscan_5.a_3 AS key,
     limitoffsetscan_5.a_4 AS c,
     a_6 AS ww;
--
ALTERNATION GROUP: EXTEND 123,
--
QueryStmt
+-output_column_list=
| +-$groupby.key#5 AS key [INT32]
| +-$aggregate.c#4 AS c [INT64]
| +-$pipe_extend.$col1#6 AS `$col1` [INT64]
+-query=
  +-SampleScan
    +-column_list=[$groupby.key#5, $aggregate.c#4, $pipe_extend.$col1#6]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$groupby.key#5, $aggregate.c#4, $pipe_extend.$col1#6]
    |   +-expr_list=
    |   | +-$col1#6 := Literal(type=INT64, value=123)
    |   +-input_scan=
    |     +-AggregateScan
    |       +-column_list=[$groupby.key#5, $aggregate.c#4]
    |       +-input_scan=
    |       | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    |       +-group_by_list=
    |       | +-key#5 := ColumnRef(type=INT32, column=TestTable.key#1)
    |       +-aggregate_list=
    |         +-c#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-method="bernoulli"
    +-size=
    | +-Literal(type=INT64, value=10)
    +-unit=ROWS

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_7.a_3 AS key,
  projectscan_7.a_4 AS c,
  projectscan_7.a_6 AS a_6
FROM
  (
    SELECT
      aggregatescan_5.a_3 AS a_3,
      aggregatescan_5.a_4 AS a_4,
      123 AS a_6
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_3,
          COUNT(*) AS a_4
        FROM
          (
            SELECT
              TestTable.key AS a_1
            FROM
              TestTable
          ) AS testtable_2
        GROUP BY 1
      ) AS aggregatescan_5
  ) AS projectscan_7 TABLESAMPLE bernoulli(10 ROWS);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1
|> AS testtable_2
|> EXTEND
     testtable_2.a_1 AS a_3
|> AGGREGATE
     COUNT(*) AS a_4
   GROUP BY a_3
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_3 AS a_3,
     aggregatescan_5.a_4 AS a_4,
     123 AS a_6
|> AS projectscan_7
|> TABLESAMPLE bernoulli(10 ROWS)
|> SELECT
     projectscan_7.a_3 AS key,
     projectscan_7.a_4 AS c,
     projectscan_7.a_6 AS a_6;
--
ALTERNATION GROUP: EXTEND 123, WITH WEIGHT ww
--
QueryStmt
+-output_column_list=
| +-$groupby.key#5 AS key [INT32]
| +-$aggregate.c#4 AS c [INT64]
| +-$pipe_extend.$col1#6 AS `$col1` [INT64]
| +-$sample_weight.ww#7 AS ww [DOUBLE]
+-query=
  +-SampleScan
    +-column_list=[$groupby.key#5, $aggregate.c#4, $pipe_extend.$col1#6, $sample_weight.ww#7]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$groupby.key#5, $aggregate.c#4, $pipe_extend.$col1#6]
    |   +-expr_list=
    |   | +-$col1#6 := Literal(type=INT64, value=123)
    |   +-input_scan=
    |     +-AggregateScan
    |       +-column_list=[$groupby.key#5, $aggregate.c#4]
    |       +-input_scan=
    |       | +-TableScan(column_list=[TestTable.key#1], table=TestTable, column_index_list=[0])
    |       +-group_by_list=
    |       | +-key#5 := ColumnRef(type=INT32, column=TestTable.key#1)
    |       +-aggregate_list=
    |         +-c#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-method="bernoulli"
    +-size=
    | +-Literal(type=INT64, value=10)
    +-unit=ROWS
    +-weight_column=
      +-ColumnHolder(column=$sample_weight.ww#7)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_7.a_3 AS key,
  projectscan_7.a_4 AS c,
  projectscan_7.a_6 AS a_6,
  a_8 AS ww
FROM
  (
    SELECT
      aggregatescan_5.a_3 AS a_3,
      aggregatescan_5.a_4 AS a_4,
      123 AS a_6
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_3,
          COUNT(*) AS a_4
        FROM
          (
            SELECT
              TestTable.key AS a_1
            FROM
              TestTable
          ) AS testtable_2
        GROUP BY 1
      ) AS aggregatescan_5
  ) AS projectscan_7 TABLESAMPLE bernoulli(10 ROWS) WITH WEIGHT AS a_8;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1
|> AS testtable_2
|> EXTEND
     testtable_2.a_1 AS a_3
|> AGGREGATE
     COUNT(*) AS a_4
   GROUP BY a_3
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_3 AS a_3,
     aggregatescan_5.a_4 AS a_4,
     123 AS a_6
|> AS projectscan_7
|> TABLESAMPLE bernoulli(10 ROWS) WITH WEIGHT AS a_8
|> SELECT
     projectscan_7.a_3 AS key,
     projectscan_7.a_4 AS c,
     projectscan_7.a_6 AS a_6,
     a_8 AS ww;
