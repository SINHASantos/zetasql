[default language_features=MAXIMUM,+PIPES,+PIPE_STATIC_DESCRIBE]

(SELECT * FROM KeyValue) AS kv
|> STATIC_DESCRIBE
|> WHERE key is null
|> WHERE kv.value is null
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-FilterScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |   | +-StaticDescribeScan
    |   |   +-column_list=KeyValue.[Key#1, Value#2]
    |   |   +-describe_text=
    |   |   |   """
    |   |   |   NameList:
    |   |   |     Key INT64 KeyValue.Key#1
    |   |   |     Value STRING KeyValue.Value#2
    |   |   |   NameScope:
    |   |   |     Names:
    |   |   |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |   |   |       Value -> STRING (KeyValue.Value#2) (implicit)
    |   |   |     Range variables:
    |   |   |       kv -> RANGE_VARIABLE<Key,Value>
    |   |   |   """
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=KeyValue.[Key#1, Value#2]
    |   |       +-input_scan=
    |   |         +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-filter_expr=
    |     +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

(FROM KeyValue) AS kv
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-describe_text=
    |   """
    |   NameList:
    |     Key INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |     Range variables:
    |       kv -> RANGE_VARIABLE<Key,Value>
    |   """
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

(select 1 x
 union all
 select 2 y) AS t
|> STATIC_DESCRIBE
|> where x = 5 and t.x = 5
--
QueryStmt
+-output_column_list=
| +-$union_all.x#3 AS x [INT64]
+-query=
  +-FilterScan
    +-column_list=[$union_all.x#3]
    +-input_scan=
    | +-StaticDescribeScan
    |   +-column_list=[$union_all.x#3]
    |   +-describe_text=
    |   |   """
    |   |   NameList:
    |   |     x INT64 $union_all.x#3
    |   |   NameScope:
    |   |     Names:
    |   |       x -> INT64 ($union_all.x#3)
    |   |     Range variables:
    |   |       t -> RANGE_VARIABLE<x>
    |   |   """
    |   +-input_scan=
    |     +-SetOperationScan
    |       +-column_list=[$union_all.x#3]
    |       +-op_type=UNION_ALL
    |       +-input_item_list=
    |         +-SetOperationItem
    |         | +-scan=
    |         | | +-ProjectScan
    |         | |   +-column_list=[$union_all1.x#1]
    |         | |   +-expr_list=
    |         | |   | +-x#1 := Literal(type=INT64, value=1)
    |         | |   +-input_scan=
    |         | |     +-SingleRowScan
    |         | +-output_column_list=[$union_all1.x#1]
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[$union_all2.y#2]
    |           |   +-expr_list=
    |           |   | +-y#2 := Literal(type=INT64, value=2)
    |           |   +-input_scan=
    |           |     +-SingleRowScan
    |           +-output_column_list=[$union_all2.y#2]
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        | +-ColumnRef(type=INT64, column=$union_all.x#3)
        | +-Literal(type=INT64, value=5)
        +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
          +-ColumnRef(type=INT64, column=$union_all.x#3)
          +-Literal(type=INT64, value=5)
==

((select *
  from KeyValue
 )
 order by key
 limit 10) AS qq
|> static_describe
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-is_ordered=TRUE
    +-describe_text=
    |   """
    |   NameList:
    |     Key INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |     Range variables:
    |       qq -> RANGE_VARIABLE<Key,Value>
    |
    |   Result is ordered.
    |   """
    +-input_scan=
      +-LimitOffsetScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-OrderByScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-is_ordered=TRUE
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=KeyValue.[Key#1, Value#2]
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-order_by_item_list=
        |     +-OrderByItem
        |       +-column_ref=
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-limit=
          +-Literal(type=INT64, value=10)
==

# Value table
(FROM TestExtraValueTable) AS vt
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-StaticDescribeScan
    +-column_list=[TestExtraValueTable.value#1]
    +-describe_text=
    |   """
    |   NameList (is_value_table = true):
    |     vt zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
    |   NameScope:
    |     Names:
    |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
    |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
    |     Range variables:
    |       vt -> RANGE_VARIABLE<$value>
    |     Value table columns:
    |       TestExtraValueTable.value#1
    |   """
    +-input_scan=
      +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
==

# Table with psuedo-columns.
(FROM EnumTable) AS t
|> STATIC_DESCRIBE
|> WHERE RowId is NULL
|> SELECT *
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3]
    +-input_scan=
      +-FilterScan
        +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, RowId#5]
        +-input_scan=
        | +-StaticDescribeScan
        |   +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, RowId#5]
        |   +-describe_text=
        |   |   """
        |   |   NameList:
        |   |     key INT32 EnumTable.key#1
        |   |     TestEnum zetasql_test__.TestEnum EnumTable.TestEnum#2
        |   |     AnotherTestEnum zetasql_test__.AnotherTestEnum EnumTable.AnotherTestEnum#3
        |   |   NameScope:
        |   |     Names:
        |   |       AnotherTestEnum -> zetasql_test__.AnotherTestEnum (EnumTable.AnotherTestEnum#3) (implicit)
        |   |       Filename -> STRING (EnumTable.Filename#4) (implicit) (pseudo-column)
        |   |       RowId -> BYTES (EnumTable.RowId#5) (implicit) (pseudo-column)
        |   |       TestEnum -> zetasql_test__.TestEnum (EnumTable.TestEnum#2) (implicit)
        |   |       key -> INT32 (EnumTable.key#1) (implicit)
        |   |     Range variables:
        |   |       t -> RANGE_VARIABLE<key,TestEnum,AnotherTestEnum>
        |   |   """
        |   +-input_scan=
        |     +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 4])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
            +-ColumnRef(type=BYTES, column=EnumTable.RowId#5)
==

# Multiple layers.  The outer layers don't affect the aliases.
(((SELECT 1 x, 2 y) AS t))
|> STATIC_DESCRIBE
|> SELECT x, t.y
--
QueryStmt
+-output_column_list=
| +-t.x#1 AS x [INT64]
| +-t.y#2 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=t.[x#1, y#2]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=t.[x#1, y#2]
        +-describe_text=
        |   """
        |   NameList:
        |     x INT64 t.x#1
        |     y INT64 t.y#2
        |   NameScope:
        |     Names:
        |       x -> INT64 (t.x#1)
        |       y -> INT64 (t.y#2)
        |     Range variables:
        |       t -> RANGE_VARIABLE<x,y>
        |   """
        +-input_scan=
          +-ProjectScan
            +-column_list=t.[x#1, y#2]
            +-expr_list=
            | +-x#1 := Literal(type=INT64, value=1)
            | +-y#2 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
==

# Multiple layers.  The outer layers hide the inner layers.
(((SELECT 1 x, 2 y) AS t1) AS t2) AS t3
|> STATIC_DESCRIBE
|> SELECT x, {{t3|t2|t1}}.y
--
ALTERNATION GROUP: t3
--
QueryStmt
+-output_column_list=
| +-t1.x#1 AS x [INT64]
| +-t1.y#2 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=t1.[x#1, y#2]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=t1.[x#1, y#2]
        +-describe_text=
        |   """
        |   NameList:
        |     x INT64 t1.x#1
        |     y INT64 t1.y#2
        |   NameScope:
        |     Names:
        |       x -> INT64 (t1.x#1)
        |       y -> INT64 (t1.y#2)
        |     Range variables:
        |       t3 -> RANGE_VARIABLE<x,y>
        |   """
        +-input_scan=
          +-ProjectScan
            +-column_list=t1.[x#1, y#2]
            +-expr_list=
            | +-x#1 := Literal(type=INT64, value=1)
            | +-y#2 := Literal(type=INT64, value=2)
            +-input_scan=
              +-SingleRowScan
--
ALTERNATION GROUP: t2
--
ERROR: Unrecognized name: t2 [at 3:14]
|> SELECT x, t2.y
             ^
--
ALTERNATION GROUP: t1
--
ERROR: Unrecognized name: t1 [at 3:14]
|> SELECT x, t1.y
             ^
==

# Existing table aliases are removed.
(FROM KeyValue kv1 JOIN KeyValue kv2 USING (key)) AS t
|> STATIC_DESCRIBE
|> SELECT key, {{t.key|t.value|value|kv1.value|kv1.key}}
--
ALTERNATION GROUP: t.key
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Key#1]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=KeyValue.[Key#1, Key#3]
        +-describe_text=
        |   """
        |   NameList:
        |     key INT64 KeyValue.Key#1
        |     Value STRING KeyValue.Value#2
        |     Value STRING KeyValue.Value#4
        |   NameScope:
        |     Names:
        |       Value -> ambiguous
        |       key -> INT64 (KeyValue.Key#1)
        |     Range variables:
        |       t -> RANGE_VARIABLE<key,Value,Value>
        |   """
        +-input_scan=
          +-JoinScan
            +-column_list=KeyValue.[Key#1, Key#3]
            +-left_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0], alias="kv1")
            +-right_scan=
            | +-TableScan(column_list=[KeyValue.Key#3], table=KeyValue, column_index_list=[0], alias="kv2")
            +-join_expr=
            | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#3)
            +-has_using=TRUE
--
ALTERNATION GROUP: t.value
--
ERROR: Name value is ambiguous inside t [at 3:18]
|> SELECT key, t.value
                 ^
--
ALTERNATION GROUP: value
--
ERROR: Column name value is ambiguous [at 3:16]
|> SELECT key, value
               ^
--
ALTERNATION GROUP: kv1.value
--
ERROR: Unrecognized name: kv1 [at 3:16]
|> SELECT key, kv1.value
               ^
--
ALTERNATION GROUP: kv1.key
--
ERROR: Unrecognized name: kv1 [at 3:16]
|> SELECT key, kv1.key
               ^
==

# The user-requested pattern where a pipe join can be written,
# and both input queries can be aliased with AS.
(SELECT 1 x, 2 y) AS t1
|> JOIN
   (SELECT 1 x, 3 z) AS t2
   USING (x)
|> STATIC_DESCRIBE
|> SELECT x, t1.x, t2.z
--
QueryStmt
+-output_column_list=
| +-t1.x#1 AS x [INT64]
| +-t1.x#1 AS x [INT64]
| +-t2.z#4 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[t1.x#1, t1.x#1, t2.z#4]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=[t1.x#1, t1.y#2, t2.x#3, t2.z#4]
        +-describe_text=
        |   """
        |   NameList:
        |     x INT64 t1.x#1
        |     y INT64 t1.y#2
        |     z INT64 t2.z#4
        |   NameScope:
        |     Names:
        |       x -> INT64 (t1.x#1)
        |       y -> INT64 (t1.y#2)
        |       z -> INT64 (t2.z#4)
        |     Range variables:
        |       t1 -> RANGE_VARIABLE<x,y>
        |       t2 -> RANGE_VARIABLE<x,z>
        |   """
        +-input_scan=
          +-JoinScan
            +-column_list=[t1.x#1, t1.y#2, t2.x#3, t2.z#4]
            +-left_scan=
            | +-ProjectScan
            |   +-column_list=t1.[x#1, y#2]
            |   +-expr_list=
            |   | +-x#1 := Literal(type=INT64, value=1)
            |   | +-y#2 := Literal(type=INT64, value=2)
            |   +-input_scan=
            |     +-SingleRowScan
            +-right_scan=
            | +-ProjectScan
            |   +-column_list=t2.[x#3, z#4]
            |   +-expr_list=
            |   | +-x#3 := Literal(type=INT64, value=1)
            |   | +-z#4 := Literal(type=INT64, value=3)
            |   +-input_scan=
            |     +-SingleRowScan
            +-join_expr=
            | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   +-ColumnRef(type=INT64, column=t1.x#1)
            |   +-ColumnRef(type=INT64, column=t2.x#3)
            +-has_using=TRUE
==

# Alias on a standard syntax query expression before LIMIT.
# The alias survives.
(select 1 x, 2 y) AS q
LIMIT 10
|> STATIC_DESCRIBE
|> SELECT x, q.y
--
QueryStmt
+-output_column_list=
| +-q.x#1 AS x [INT64]
| +-q.y#2 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=q.[x#1, y#2]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=q.[x#1, y#2]
        +-describe_text=
        |   """
        |   NameList:
        |     x INT64 q.x#1
        |     y INT64 q.y#2
        |   NameScope:
        |     Names:
        |       x -> INT64 (q.x#1)
        |       y -> INT64 (q.y#2)
        |     Range variables:
        |       q -> RANGE_VARIABLE<x,y>
        |   """
        +-input_scan=
          +-LimitOffsetScan
            +-column_list=q.[x#1, y#2]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=q.[x#1, y#2]
            |   +-expr_list=
            |   | +-x#1 := Literal(type=INT64, value=1)
            |   | +-y#2 := Literal(type=INT64, value=2)
            |   +-input_scan=
            |     +-SingleRowScan
            +-limit=
              +-Literal(type=INT64, value=10)
==

# Aliases on standard syntax query expression with UNION.
# The input table aliases do not survive.
(select 1 x, 2 y) AS q1
UNION ALL
(select 3 z, 4 zz) AS q2
|> STATIC_DESCRIBE
|> SELECT x, {{y|q1.y|q2.y}}
--
ALTERNATION GROUP: y
--
QueryStmt
+-output_column_list=
| +-$union_all.x#5 AS x [INT64]
| +-$union_all.y#6 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=$union_all.[x#5, y#6]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=$union_all.[x#5, y#6]
        +-describe_text=
        |   """
        |   NameList:
        |     x INT64 $union_all.x#5
        |     y INT64 $union_all.y#6
        |   NameScope:
        |     Names:
        |       x -> INT64 ($union_all.x#5)
        |       y -> INT64 ($union_all.y#6)
        |   """
        +-input_scan=
          +-SetOperationScan
            +-column_list=$union_all.[x#5, y#6]
            +-op_type=UNION_ALL
            +-input_item_list=
              +-SetOperationItem
              | +-scan=
              | | +-ProjectScan
              | |   +-column_list=q1.[x#1, y#2]
              | |   +-expr_list=
              | |   | +-x#1 := Literal(type=INT64, value=1)
              | |   | +-y#2 := Literal(type=INT64, value=2)
              | |   +-input_scan=
              | |     +-SingleRowScan
              | +-output_column_list=q1.[x#1, y#2]
              +-SetOperationItem
                +-scan=
                | +-ProjectScan
                |   +-column_list=q2.[z#3, zz#4]
                |   +-expr_list=
                |   | +-z#3 := Literal(type=INT64, value=3)
                |   | +-zz#4 := Literal(type=INT64, value=4)
                |   +-input_scan=
                |     +-SingleRowScan
                +-output_column_list=q2.[z#3, zz#4]
--
ALTERNATION GROUP: q1.y
--
ERROR: Unrecognized name: q1 [at 5:14]
|> SELECT x, q1.y
             ^
--
ALTERNATION GROUP: q2.y
--
ERROR: Unrecognized name: q2 [at 5:14]
|> SELECT x, q2.y
             ^
==

# Test that ExtractTableNames understands tt is a range variable.
(FROM TestTable) AS tt
|> JOIN tt.KitchenSink.repeated_int32_val
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$array.repeated_int32_val#4 AS repeated_int32_val [INT32]
+-query=
  +-ArrayScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $array.repeated_int32_val#4]
    +-input_scan=
    | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
    +-array_expr_list=
    | +-GetProtoField
    |   +-type=ARRAY<INT32>
    |   +-expr=
    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |   +-field_descriptor=repeated_int32_val
    |   +-default_value=[]
    +-element_column_list=[$array.repeated_int32_val#4]
