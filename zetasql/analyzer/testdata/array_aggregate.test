[default language_features=NONE,+ORDER_BY_IN_AGGREGATE]
[default enabled_ast_rewrites=DEFAULTS,+ORDER_BY_AND_LIMIT_IN_AGGREGATE]
[default show_sqlbuilder_output]

[no_enable_literal_replacement]
[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE]
# Simple ARRAY_AGG with ORDER BY with all the features.
# no_enable_literal_replacement: Distinct and ORDER BY must match exactly, we
# cannot replace just one literal with parameter
SELECT ARRAY_AGG(DISTINCT a + 1 IGNORE NULLS HAVING MAX 3 ORDER BY a + 1 LIMIT 10)
FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a, TestTable.KitchenSink.repeated_uint64_val as b
GROUP BY CAST(a AS UINT64) - b
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=$array.a#4)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
        |       +-input_scan=
        |       | +-ArrayScan
        |       |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |       |   +-array_expr_list=
        |       |   | +-GetProtoField
        |       |   |   +-type=ARRAY<INT64>
        |       |   |   +-expr=
        |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   |   +-field_descriptor=repeated_int64_val
        |       |   |   +-default_value=[]
        |       |   +-element_column_list=[$array.a#4]
        |       +-array_expr_list=
        |       | +-GetProtoField
        |       |   +-type=ARRAY<UINT64>
        |       |   +-expr=
        |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   +-field_descriptor=repeated_uint64_val
        |       |   +-default_value=[]
        |       +-element_column_list=[$array.b#5]
        +-group_by_list=
        | +-$groupbycol1#8 :=
        |   +-FunctionCall(ZetaSQL:$subtract(UINT64, UINT64) -> INT64)
        |     +-Cast(INT64 -> UINT64)
        |     | +-ColumnRef(type=INT64, column=$array.a#4)
        |     +-ColumnRef(type=UINT64, column=$array.b#5)
        +-aggregate_list=
          +-$agg1#7 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
              +-distinct=TRUE
              +-null_handling_modifier=IGNORE_NULLS
              +-having_modifier=
              | +-AggregateHavingModifier
              |   +-kind=MAX
              |   +-having_expr=
              |     +-Literal(type=INT64, value=3)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
              +-limit=
                +-Literal(type=INT64, value=10)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(DISTINCT projectscan_7.a_6 IGNORE NULLS
    HAVING MAX 3
    ORDER BY projectscan_7.a_6
    LIMIT 10) AS a_8
FROM
  (
    SELECT
      arrayscan_4.a_1 AS a_1,
      arrayscan_4.a_3 AS a_3,
      a_5 AS a_5,
      (arrayscan_4.a_3) + 1 AS a_6
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_1,
          a_3 AS a_3
        FROM
          (
            SELECT
              TestTable.KitchenSink AS a_1
            FROM
              TestTable
          ) AS testtable_2
          JOIN
          UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
      ) AS arrayscan_4
      JOIN
      UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
  ) AS projectscan_7
GROUP BY CAST(projectscan_7.a_3 AS UINT64) - (projectscan_7.a_5);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(DISTINCT projectscan_7.a_6 IGNORE NULLS
    HAVING MAX 3
    ORDER BY projectscan_7.a_6
    LIMIT 10) AS a_8
FROM
  (
    FROM
      TestTable
    |> SELECT
         TestTable.KitchenSink AS a_1
    |> AS testtable_2
    |> JOIN
       UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
    |> SELECT
         testtable_2.a_1 AS a_1,
         a_3 AS a_3
    |> AS arrayscan_4
    |> JOIN
       UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
    |> SELECT
         arrayscan_4.a_1 AS a_1,
         arrayscan_4.a_3 AS a_3,
         a_5 AS a_5,
         (arrayscan_4.a_3) + 1 AS a_6
    |> AS projectscan_7
  )
GROUP BY CAST(projectscan_7.a_3 AS UINT64) - (projectscan_7.a_5)
|> AS aggregatescan_9
|> SELECT
     aggregatescan_9.a_8 AS a_8;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#7]
        +-expr_list=
        | +-$agg1#7 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` INT64>>, column=$agg_rewriter.$array#10)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#14]
        |         +-expr_list=
        |         | +-injected#14 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#13)
        |         |     | +-Literal(type=INT64, value=1)
        |         |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#13)
        |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[null_if_empty_array.$out#13]
        |             +-expr_list=
        |             | +-$out#13 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<INT64>
        |             |     +-subquery_type=ARRAY
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` INT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-LimitOffsetScan
        |             |         +-column_list=[$agg_rewriter.distinct.arg#12]
        |             |         +-is_ordered=TRUE
        |             |         +-input_scan=
        |             |         | +-OrderByScan
        |             |         |   +-column_list=[$agg_rewriter.distinct.arg#12]
        |             |         |   +-is_ordered=TRUE
        |             |         |   +-input_scan=
        |             |         |   | +-AggregateScan
        |             |         |   |   +-column_list=[$agg_rewriter.distinct.arg#12]
        |             |         |   |   +-input_scan=
        |             |         |   |   | +-FilterScan
        |             |         |   |   |   +-column_list=[$agg_rewriter.$orderbycol1#9]
        |             |         |   |   |   +-input_scan=
        |             |         |   |   |   | +-ProjectScan
        |             |         |   |   |   |   +-column_list=[$agg_rewriter.$orderbycol1#9]
        |             |         |   |   |   |   +-expr_list=
        |             |         |   |   |   |   | +-$orderbycol1#9 :=
        |             |         |   |   |   |   |   +-GetStructField
        |             |         |   |   |   |   |     +-type=INT64
        |             |         |   |   |   |   |     +-expr=
        |             |         |   |   |   |   |     | +-ColumnRef(type=STRUCT<`$orderbycol1_0` INT64>, column=$agg_rewriter.$struct#11)
        |             |         |   |   |   |   |     +-field_idx=0
        |             |         |   |   |   |   +-input_scan=
        |             |         |   |   |   |     +-ArrayScan
        |             |         |   |   |   |       +-column_list=[$agg_rewriter.$struct#11]
        |             |         |   |   |   |       +-array_expr_list=
        |             |         |   |   |   |       | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` INT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        |             |         |   |   |   |       +-element_column_list=[$agg_rewriter.$struct#11]
        |             |         |   |   |   +-filter_expr=
        |             |         |   |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |             |         |   |   |       +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |             |         |   |   |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#9)
        |             |         |   |   +-group_by_list=
        |             |         |   |     +-distinct.arg#12 := ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#9)
        |             |         |   +-order_by_item_list=
        |             |         |     +-OrderByItem
        |             |         |       +-column_ref=
        |             |         |         +-ColumnRef(type=INT64, column=$agg_rewriter.distinct.arg#12)
        |             |         +-limit=
        |             |         | +-Literal(type=INT64, value=10)
        |             |         +-offset=
        |             |           +-Literal(type=INT64, value=0)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$agg_rewriter.$array#10]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5, $orderby.$orderbycol1#6]
            |   +-expr_list=
            |   | +-$orderbycol1#6 :=
            |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   |     +-ColumnRef(type=INT64, column=$array.a#4)
            |   |     +-Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-ArrayScan
            |       +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
            |       +-input_scan=
            |       | +-ArrayScan
            |       |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |       |   +-input_scan=
            |       |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |       |   +-array_expr_list=
            |       |   | +-GetProtoField
            |       |   |   +-type=ARRAY<INT64>
            |       |   |   +-expr=
            |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   |   +-field_descriptor=repeated_int64_val
            |       |   |   +-default_value=[]
            |       |   +-element_column_list=[$array.a#4]
            |       +-array_expr_list=
            |       | +-GetProtoField
            |       |   +-type=ARRAY<UINT64>
            |       |   +-expr=
            |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   +-field_descriptor=repeated_uint64_val
            |       |   +-default_value=[]
            |       +-element_column_list=[$array.b#5]
            +-group_by_list=
            | +-$groupbycol1#8 :=
            |   +-FunctionCall(ZetaSQL:$subtract(UINT64, UINT64) -> INT64)
            |     +-Cast(INT64 -> UINT64)
            |     | +-ColumnRef(type=INT64, column=$array.a#4)
            |     +-ColumnRef(type=UINT64, column=$array.b#5)
            +-aggregate_list=
              +-$array#10 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<`$orderbycol1_0` INT64>) -> ARRAY<STRUCT<`$orderbycol1_0` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<`$orderbycol1_0` INT64>
                    +-field_list=
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
                  +-having_modifier=
                    +-AggregateHavingModifier
                      +-kind=MAX
                      +-having_expr=
                        +-Literal(type=INT64, value=3)
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_17.a_11)) >= 1, projectscan_17.a_11, CAST(NULL AS ARRAY< INT64 >)) AS a_18
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              aggregatescan_16.a_15 AS a_15
            FROM
              (
                SELECT
                  projectscan_14.a_13 AS a_15
                FROM
                  (
                    SELECT
                      a_12.`$orderbycol1_0` AS a_13
                    FROM
                      UNNEST(aggregatescan_9.a_8) AS a_12
                  ) AS projectscan_14
                WHERE
                  NOT((projectscan_14.a_13) IS NULL)
                GROUP BY 1
              ) AS aggregatescan_16
            ORDER BY aggregatescan_16.a_15
            LIMIT 10 OFFSET 0) AS a_11
      ) AS projectscan_17
  ) AS a_10
FROM
  (
    SELECT
      ARRAY_AGG(STRUCT< `$orderbycol1_0` INT64 > (projectscan_7.a_6)
        HAVING MAX 3) AS a_8
    FROM
      (
        SELECT
          arrayscan_4.a_1 AS a_1,
          arrayscan_4.a_3 AS a_3,
          a_5 AS a_5,
          (arrayscan_4.a_3) + 1 AS a_6
        FROM
          (
            SELECT
              testtable_2.a_1 AS a_1,
              a_3 AS a_3
            FROM
              (
                SELECT
                  TestTable.KitchenSink AS a_1
                FROM
                  TestTable
              ) AS testtable_2
              JOIN
              UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
          ) AS arrayscan_4
          JOIN
          UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
      ) AS projectscan_7
    GROUP BY CAST(projectscan_7.a_3 AS UINT64) - (projectscan_7.a_5)
  ) AS aggregatescan_9;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(STRUCT< `$orderbycol1_0` INT64 > (projectscan_7.a_6)
    HAVING MAX 3) AS a_8
FROM
  (
    FROM
      TestTable
    |> SELECT
         TestTable.KitchenSink AS a_1
    |> AS testtable_2
    |> JOIN
       UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
    |> SELECT
         testtable_2.a_1 AS a_1,
         a_3 AS a_3
    |> AS arrayscan_4
    |> JOIN
       UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
    |> SELECT
         arrayscan_4.a_1 AS a_1,
         arrayscan_4.a_3 AS a_3,
         a_5 AS a_5,
         (arrayscan_4.a_3) + 1 AS a_6
    |> AS projectscan_7
  )
GROUP BY CAST(projectscan_7.a_3 AS UINT64) - (projectscan_7.a_5)
|> AS aggregatescan_9
|> SELECT
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_9.a_8) AS a_12
           |> SELECT
                a_12.`$orderbycol1_0` AS a_13
           |> AS projectscan_14
           |> WHERE
                NOT((projectscan_14.a_13) IS NULL)
           |> EXTEND
                projectscan_14.a_13 AS a_15
           |> AGGREGATE
              GROUP BY a_15
           |> AS aggregatescan_16
           |> ORDER BY aggregatescan_16.a_15
           |> SELECT
                aggregatescan_16.a_15 AS a_15
           |> LIMIT 10 OFFSET 0) AS a_11
       |> AS projectscan_17
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_17.a_11)) >= 1, projectscan_17.a_11, CAST(NULL AS ARRAY< INT64 >)) AS a_18
     ) AS a_10;
==

# Duplicate ARRAY_AGGs in the same AggregateScan
SELECT ARRAY_AGG(a ORDER BY a), ARRAY_AGG(a ORDER BY a)
FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int64_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.a#4]
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=$array.a#4)
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=INT64, column=$array.a#4)
          +-$agg2#6 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$array.a#4)
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=INT64, column=$array.a#4)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(a_3
    ORDER BY a_3) AS a_4,
  ARRAY_AGG(a_3
    ORDER BY a_3) AS a_5
FROM
  (
    SELECT
      TestTable.KitchenSink AS a_1
    FROM
      TestTable
  ) AS testtable_2
  JOIN
  UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> AGGREGATE
     ARRAY_AGG(a_3
       ORDER BY a_3) AS a_4,
     ARRAY_AGG(a_3
       ORDER BY a_3) AS a_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<INT64>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#8)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#15]
        | |       +-expr_list=
        | |       | +-injected#15 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        | |       |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |       |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#10)
        | |       |     | +-Literal(type=INT64, value=1)
        | |       |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#10)
        | |       |     +-Literal(type=ARRAY<INT64>, value=NULL)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[null_if_empty_array.$out#10]
        | |           +-expr_list=
        | |           | +-$out#10 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<INT64>
        | |           |     +-subquery_type=ARRAY
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#8, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-OrderByScan
        | |           |         +-column_list=[$agg_rewriter.a#7]
        | |           |         +-is_ordered=TRUE
        | |           |         +-input_scan=
        | |           |         | +-ProjectScan
        | |           |         |   +-column_list=[$agg_rewriter.a#7]
        | |           |         |   +-expr_list=
        | |           |         |   | +-a#7 :=
        | |           |         |   |   +-GetStructField
        | |           |         |   |     +-type=INT64
        | |           |         |   |     +-expr=
        | |           |         |   |     | +-ColumnRef(type=STRUCT<a_0 INT64>, column=$agg_rewriter.$struct#9)
        | |           |         |   |     +-field_idx=0
        | |           |         |   +-input_scan=
        | |           |         |     +-ArrayScan
        | |           |         |       +-column_list=[$agg_rewriter.$struct#9]
        | |           |         |       +-array_expr_list=
        | |           |         |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#8, is_correlated=TRUE)
        | |           |         |       +-element_column_list=[$agg_rewriter.$struct#9]
        | |           |         +-order_by_item_list=
        | |           |           +-OrderByItem
        | |           |             +-column_ref=
        | |           |               +-ColumnRef(type=INT64, column=$agg_rewriter.a#7)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#6 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#12)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#16]
        |         +-expr_list=
        |         | +-injected#16 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#14)
        |         |     | +-Literal(type=INT64, value=1)
        |         |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#14)
        |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[null_if_empty_array.$out#14]
        |             +-expr_list=
        |             | +-$out#14 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<INT64>
        |             |     +-subquery_type=ARRAY
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-OrderByScan
        |             |         +-column_list=[$agg_rewriter.a#11]
        |             |         +-is_ordered=TRUE
        |             |         +-input_scan=
        |             |         | +-ProjectScan
        |             |         |   +-column_list=[$agg_rewriter.a#11]
        |             |         |   +-expr_list=
        |             |         |   | +-a#11 :=
        |             |         |   |   +-GetStructField
        |             |         |   |     +-type=INT64
        |             |         |   |     +-expr=
        |             |         |   |     | +-ColumnRef(type=STRUCT<a_0 INT64>, column=$agg_rewriter.$struct#13)
        |             |         |   |     +-field_idx=0
        |             |         |   +-input_scan=
        |             |         |     +-ArrayScan
        |             |         |       +-column_list=[$agg_rewriter.$struct#13]
        |             |         |       +-array_expr_list=
        |             |         |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        |             |         |       +-element_column_list=[$agg_rewriter.$struct#13]
        |             |         +-order_by_item_list=
        |             |           +-OrderByItem
        |             |             +-column_ref=
        |             |               +-ColumnRef(type=INT64, column=$agg_rewriter.a#11)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#8, $array#12]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |   +-input_scan=
            |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |   +-array_expr_list=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<INT64>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=repeated_int64_val
            |   |   +-default_value=[]
            |   +-element_column_list=[$array.a#4]
            +-aggregate_list=
              +-$array#8 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64>) -> ARRAY<STRUCT<a_0 INT64>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 INT64>
              |     +-field_list=
              |       +-ColumnRef(type=INT64, column=$array.a#4)
              +-$array#12 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64>) -> ARRAY<STRUCT<a_0 INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 INT64>
                    +-field_list=
                      +-ColumnRef(type=INT64, column=$array.a#4)
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_12.a_8)) >= 1, projectscan_12.a_8, CAST(NULL AS ARRAY< INT64 >)) AS a_13
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_11.a_10 AS a_10
            FROM
              (
                SELECT
                  a_9.a_0 AS a_10
                FROM
                  UNNEST(aggregatescan_6.a_4) AS a_9
              ) AS projectscan_11
            ORDER BY projectscan_11.a_10) AS a_8
      ) AS projectscan_12
  ) AS a_7,
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_19.a_15)) >= 1, projectscan_19.a_15, CAST(NULL AS ARRAY< INT64 >)) AS a_20
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_18.a_17 AS a_17
            FROM
              (
                SELECT
                  a_16.a_0 AS a_17
                FROM
                  UNNEST(aggregatescan_6.a_5) AS a_16
              ) AS projectscan_18
            ORDER BY projectscan_18.a_17) AS a_15
      ) AS projectscan_19
  ) AS a_14
FROM
  (
    SELECT
      ARRAY_AGG(STRUCT< a_0 INT64 > (a_3)) AS a_4,
      ARRAY_AGG(STRUCT< a_0 INT64 > (a_3)) AS a_5
    FROM
      (
        SELECT
          TestTable.KitchenSink AS a_1
        FROM
          TestTable
      ) AS testtable_2
      JOIN
      UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
  ) AS aggregatescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> AGGREGATE
     ARRAY_AGG(STRUCT< a_0 INT64 > (a_3)) AS a_4,
     ARRAY_AGG(STRUCT< a_0 INT64 > (a_3)) AS a_5
|> AS aggregatescan_6
|> SELECT
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_6.a_4) AS a_9
           |> SELECT
                a_9.a_0 AS a_10
           |> AS projectscan_11
           |> ORDER BY projectscan_11.a_10
           |> SELECT
                projectscan_11.a_10 AS a_10
         ) AS a_8
       |> AS projectscan_12
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_12.a_8)) >= 1, projectscan_12.a_8, CAST(NULL AS ARRAY< INT64 >)) AS a_13
     ) AS a_7,
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_6.a_5) AS a_16
           |> SELECT
                a_16.a_0 AS a_17
           |> AS projectscan_18
           |> ORDER BY projectscan_18.a_17
           |> SELECT
                projectscan_18.a_17 AS a_17
         ) AS a_15
       |> AS projectscan_19
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_19.a_15)) >= 1, projectscan_19.a_15, CAST(NULL AS ARRAY< INT64 >)) AS a_20
     ) AS a_14;

==

# Slight different ARRAY_AGGs in the same AggregateScan
SELECT ARRAY_AGG(a ORDER BY b), ARRAY_AGG(b ORDER BY a)
FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a, TestTable.KitchenSink.repeated_uint64_val as b
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#7 AS `$col2` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#6, $agg2#7]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
        |   +-input_scan=
        |   | +-ArrayScan
        |   |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   |   +-array_expr_list=
        |   |   | +-GetProtoField
        |   |   |   +-type=ARRAY<INT64>
        |   |   |   +-expr=
        |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   |   +-field_descriptor=repeated_int64_val
        |   |   |   +-default_value=[]
        |   |   +-element_column_list=[$array.a#4]
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<UINT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_uint64_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.b#5]
        +-aggregate_list=
          +-$agg1#6 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=$array.a#4)
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=UINT64, column=$array.b#5)
          +-$agg2#7 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(UINT64) -> ARRAY<UINT64>)
              +-ColumnRef(type=UINT64, column=$array.b#5)
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=INT64, column=$array.a#4)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(arrayscan_4.a_3
    ORDER BY a_5) AS a_6,
  ARRAY_AGG(a_5
    ORDER BY arrayscan_4.a_3) AS a_7
FROM
  (
    SELECT
      testtable_2.a_1 AS a_1,
      a_3 AS a_3
    FROM
      (
        SELECT
          TestTable.KitchenSink AS a_1
        FROM
          TestTable
      ) AS testtable_2
      JOIN
      UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
  ) AS arrayscan_4
  JOIN
  UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> SELECT
     testtable_2.a_1 AS a_1,
     a_3 AS a_3
|> AS arrayscan_4
|> JOIN
   UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
|> AGGREGATE
     ARRAY_AGG(arrayscan_4.a_3
       ORDER BY a_5) AS a_6,
     ARRAY_AGG(a_5
       ORDER BY arrayscan_4.a_3) AS a_7;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#7 AS `$col2` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#6, $agg2#7]
        +-expr_list=
        | +-$agg1#6 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<INT64>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#10)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#18]
        | |       +-expr_list=
        | |       | +-injected#18 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        | |       |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |       |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#12)
        | |       |     | +-Literal(type=INT64, value=1)
        | |       |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#12)
        | |       |     +-Literal(type=ARRAY<INT64>, value=NULL)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[null_if_empty_array.$out#12]
        | |           +-expr_list=
        | |           | +-$out#12 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<INT64>
        | |           |     +-subquery_type=ARRAY
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-OrderByScan
        | |           |         +-column_list=[$agg_rewriter.a#8]
        | |           |         +-is_ordered=TRUE
        | |           |         +-input_scan=
        | |           |         | +-ProjectScan
        | |           |         |   +-column_list=$agg_rewriter.[a#8, b#9]
        | |           |         |   +-expr_list=
        | |           |         |   | +-a#8 :=
        | |           |         |   | | +-GetStructField
        | |           |         |   | |   +-type=INT64
        | |           |         |   | |   +-expr=
        | |           |         |   | |   | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#11)
        | |           |         |   | |   +-field_idx=0
        | |           |         |   | +-b#9 :=
        | |           |         |   |   +-GetStructField
        | |           |         |   |     +-type=UINT64
        | |           |         |   |     +-expr=
        | |           |         |   |     | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#11)
        | |           |         |   |     +-field_idx=1
        | |           |         |   +-input_scan=
        | |           |         |     +-ArrayScan
        | |           |         |       +-column_list=[$agg_rewriter.$struct#11]
        | |           |         |       +-array_expr_list=
        | |           |         |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |           |         |       +-element_column_list=[$agg_rewriter.$struct#11]
        | |           |         +-order_by_item_list=
        | |           |           +-OrderByItem
        | |           |             +-column_ref=
        | |           |               +-ColumnRef(type=UINT64, column=$agg_rewriter.b#9)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#7 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<UINT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#15)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#19]
        |         +-expr_list=
        |         | +-injected#19 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<UINT64>, ARRAY<UINT64>) -> ARRAY<UINT64>)
        |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<UINT64>) -> INT64)
        |         |     | | +-ColumnRef(type=ARRAY<UINT64>, column=null_if_empty_array.$out#17)
        |         |     | +-Literal(type=INT64, value=1)
        |         |     +-ColumnRef(type=ARRAY<UINT64>, column=null_if_empty_array.$out#17)
        |         |     +-Literal(type=ARRAY<UINT64>, value=NULL)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[null_if_empty_array.$out#17]
        |             +-expr_list=
        |             | +-$out#17 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<UINT64>
        |             |     +-subquery_type=ARRAY
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#15, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-OrderByScan
        |             |         +-column_list=[$agg_rewriter.b#14]
        |             |         +-is_ordered=TRUE
        |             |         +-input_scan=
        |             |         | +-ProjectScan
        |             |         |   +-column_list=$agg_rewriter.[a#13, b#14]
        |             |         |   +-expr_list=
        |             |         |   | +-a#13 :=
        |             |         |   | | +-GetStructField
        |             |         |   | |   +-type=INT64
        |             |         |   | |   +-expr=
        |             |         |   | |   | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#16)
        |             |         |   | |   +-field_idx=0
        |             |         |   | +-b#14 :=
        |             |         |   |   +-GetStructField
        |             |         |   |     +-type=UINT64
        |             |         |   |     +-expr=
        |             |         |   |     | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#16)
        |             |         |   |     +-field_idx=1
        |             |         |   +-input_scan=
        |             |         |     +-ArrayScan
        |             |         |       +-column_list=[$agg_rewriter.$struct#16]
        |             |         |       +-array_expr_list=
        |             |         |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#15, is_correlated=TRUE)
        |             |         |       +-element_column_list=[$agg_rewriter.$struct#16]
        |             |         +-order_by_item_list=
        |             |           +-OrderByItem
        |             |             +-column_ref=
        |             |               +-ColumnRef(type=INT64, column=$agg_rewriter.a#13)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#10, $array#15]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
            |   +-input_scan=
            |   | +-ArrayScan
            |   |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |   |   +-array_expr_list=
            |   |   | +-GetProtoField
            |   |   |   +-type=ARRAY<INT64>
            |   |   |   +-expr=
            |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   |   +-field_descriptor=repeated_int64_val
            |   |   |   +-default_value=[]
            |   |   +-element_column_list=[$array.a#4]
            |   +-array_expr_list=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<UINT64>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=repeated_uint64_val
            |   |   +-default_value=[]
            |   +-element_column_list=[$array.b#5]
            +-aggregate_list=
              +-$array#10 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64, b_1 UINT64>) -> ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 INT64, b_1 UINT64>
              |     +-field_list=
              |       +-ColumnRef(type=INT64, column=$array.a#4)
              |       +-ColumnRef(type=UINT64, column=$array.b#5)
              +-$array#15 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64, b_1 UINT64>) -> ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 INT64, b_1 UINT64>
                    +-field_list=
                      +-ColumnRef(type=INT64, column=$array.a#4)
                      +-ColumnRef(type=UINT64, column=$array.b#5)
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_15.a_10)) >= 1, projectscan_15.a_10, CAST(NULL AS ARRAY< INT64 >)) AS a_16
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_14.a_12 AS a_12
            FROM
              (
                SELECT
                  a_11.a_0 AS a_12,
                  a_11.b_1 AS a_13
                FROM
                  UNNEST(aggregatescan_8.a_6) AS a_11
              ) AS projectscan_14
            ORDER BY projectscan_14.a_13) AS a_10
      ) AS projectscan_15
  ) AS a_9,
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_23.a_18)) >= 1, projectscan_23.a_18, CAST(NULL AS ARRAY< UINT64 >)) AS a_24
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_22.a_21 AS a_21
            FROM
              (
                SELECT
                  a_19.a_0 AS a_20,
                  a_19.b_1 AS a_21
                FROM
                  UNNEST(aggregatescan_8.a_7) AS a_19
              ) AS projectscan_22
            ORDER BY projectscan_22.a_20) AS a_18
      ) AS projectscan_23
  ) AS a_17
FROM
  (
    SELECT
      ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)) AS a_6,
      ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)) AS a_7
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_1,
          a_3 AS a_3
        FROM
          (
            SELECT
              TestTable.KitchenSink AS a_1
            FROM
              TestTable
          ) AS testtable_2
          JOIN
          UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
      ) AS arrayscan_4
      JOIN
      UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
  ) AS aggregatescan_8;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> SELECT
     testtable_2.a_1 AS a_1,
     a_3 AS a_3
|> AS arrayscan_4
|> JOIN
   UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
|> AGGREGATE
     ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)) AS a_6,
     ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)) AS a_7
|> AS aggregatescan_8
|> SELECT
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_8.a_6) AS a_11
           |> SELECT
                a_11.a_0 AS a_12,
                a_11.b_1 AS a_13
           |> AS projectscan_14
           |> ORDER BY projectscan_14.a_13
           |> SELECT
                projectscan_14.a_12 AS a_12
         ) AS a_10
       |> AS projectscan_15
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_15.a_10)) >= 1, projectscan_15.a_10, CAST(NULL AS ARRAY< INT64 >)) AS a_16
     ) AS a_9,
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_8.a_7) AS a_19
           |> SELECT
                a_19.a_0 AS a_20,
                a_19.b_1 AS a_21
           |> AS projectscan_22
           |> ORDER BY projectscan_22.a_20
           |> SELECT
                projectscan_22.a_21 AS a_21
         ) AS a_18
       |> AS projectscan_23
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_23.a_18)) >= 1, projectscan_23.a_18, CAST(NULL AS ARRAY< UINT64 >)) AS a_24
     ) AS a_17;

==

[language_features=NONE,+HAVING_IN_AGGREGATE,+ORDER_BY_IN_AGGREGATE]
# Two ARRAY_AGGs in the same AggregateScan along with other aggregates
SELECT ARRAY_AGG(a HAVING MAX CAST(a AS UINT64) - b ORDER BY b), SUM(a), COUNT(b), ARRAY_AGG(b HAVING MIN 3 ORDER BY a)
FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a, TestTable.KitchenSink.repeated_uint64_val as b
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#7 AS `$col2` [INT64]
| +-$aggregate.$agg3#8 AS `$col3` [INT64]
| +-$aggregate.$agg4#9 AS `$col4` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#7, $agg3#8, $agg4#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#6, $agg2#7, $agg3#8, $agg4#9]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
        |   +-input_scan=
        |   | +-ArrayScan
        |   |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   |   +-array_expr_list=
        |   |   | +-GetProtoField
        |   |   |   +-type=ARRAY<INT64>
        |   |   |   +-expr=
        |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   |   +-field_descriptor=repeated_int64_val
        |   |   |   +-default_value=[]
        |   |   +-element_column_list=[$array.a#4]
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<UINT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_uint64_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.b#5]
        +-aggregate_list=
          +-$agg1#6 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=$array.a#4)
          |   +-having_modifier=
          |   | +-AggregateHavingModifier
          |   |   +-kind=MAX
          |   |   +-having_expr=
          |   |     +-FunctionCall(ZetaSQL:$subtract(UINT64, UINT64) -> INT64)
          |   |       +-Cast(INT64 -> UINT64)
          |   |       | +-ColumnRef(type=INT64, column=$array.a#4)
          |   |       +-ColumnRef(type=UINT64, column=$array.b#5)
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=UINT64, column=$array.b#5)
          +-$agg2#7 :=
          | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=$array.a#4)
          +-$agg3#8 :=
          | +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
          |   +-ColumnRef(type=UINT64, column=$array.b#5)
          +-$agg4#9 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(UINT64) -> ARRAY<UINT64>)
              +-ColumnRef(type=UINT64, column=$array.b#5)
              +-having_modifier=
              | +-AggregateHavingModifier
              |   +-kind=MIN
              |   +-having_expr=
              |     +-Literal(type=INT64, value=3)
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=INT64, column=$array.a#4)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(arrayscan_4.a_3
    HAVING MAX CAST(arrayscan_4.a_3 AS UINT64) - a_5
    ORDER BY a_5) AS a_6,
  SUM(arrayscan_4.a_3) AS a_7,
  COUNT(a_5) AS a_8,
  ARRAY_AGG(a_5
    HAVING MIN 3
    ORDER BY arrayscan_4.a_3) AS a_9
FROM
  (
    SELECT
      testtable_2.a_1 AS a_1,
      a_3 AS a_3
    FROM
      (
        SELECT
          TestTable.KitchenSink AS a_1
        FROM
          TestTable
      ) AS testtable_2
      JOIN
      UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
  ) AS arrayscan_4
  JOIN
  UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> SELECT
     testtable_2.a_1 AS a_1,
     a_3 AS a_3
|> AS arrayscan_4
|> JOIN
   UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
|> AGGREGATE
     ARRAY_AGG(arrayscan_4.a_3
       HAVING MAX CAST(arrayscan_4.a_3 AS UINT64) - a_5
       ORDER BY a_5) AS a_6,
     SUM(arrayscan_4.a_3) AS a_7,
     COUNT(a_5) AS a_8,
     ARRAY_AGG(a_5
       HAVING MIN 3
       ORDER BY arrayscan_4.a_3) AS a_9;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#7 AS `$col2` [INT64]
| +-$aggregate.$agg3#8 AS `$col3` [INT64]
| +-$aggregate.$agg4#9 AS `$col4` [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#7, $agg3#8, $agg4#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#6, $agg2#7, $agg3#8, $agg4#9]
        +-expr_list=
        | +-$agg1#6 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<INT64>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#12)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#20]
        | |       +-expr_list=
        | |       | +-injected#20 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        | |       |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |       |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#14)
        | |       |     | +-Literal(type=INT64, value=1)
        | |       |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#14)
        | |       |     +-Literal(type=ARRAY<INT64>, value=NULL)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[null_if_empty_array.$out#14]
        | |           +-expr_list=
        | |           | +-$out#14 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<INT64>
        | |           |     +-subquery_type=ARRAY
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-OrderByScan
        | |           |         +-column_list=[$agg_rewriter.a#10]
        | |           |         +-is_ordered=TRUE
        | |           |         +-input_scan=
        | |           |         | +-ProjectScan
        | |           |         |   +-column_list=$agg_rewriter.[a#10, b#11]
        | |           |         |   +-expr_list=
        | |           |         |   | +-a#10 :=
        | |           |         |   | | +-GetStructField
        | |           |         |   | |   +-type=INT64
        | |           |         |   | |   +-expr=
        | |           |         |   | |   | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#13)
        | |           |         |   | |   +-field_idx=0
        | |           |         |   | +-b#11 :=
        | |           |         |   |   +-GetStructField
        | |           |         |   |     +-type=UINT64
        | |           |         |   |     +-expr=
        | |           |         |   |     | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#13)
        | |           |         |   |     +-field_idx=1
        | |           |         |   +-input_scan=
        | |           |         |     +-ArrayScan
        | |           |         |       +-column_list=[$agg_rewriter.$struct#13]
        | |           |         |       +-array_expr_list=
        | |           |         |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        | |           |         |       +-element_column_list=[$agg_rewriter.$struct#13]
        | |           |         +-order_by_item_list=
        | |           |           +-OrderByItem
        | |           |             +-column_ref=
        | |           |               +-ColumnRef(type=UINT64, column=$agg_rewriter.b#11)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg4#9 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<UINT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#17)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#21]
        |         +-expr_list=
        |         | +-injected#21 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<UINT64>, ARRAY<UINT64>) -> ARRAY<UINT64>)
        |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<UINT64>) -> INT64)
        |         |     | | +-ColumnRef(type=ARRAY<UINT64>, column=null_if_empty_array.$out#19)
        |         |     | +-Literal(type=INT64, value=1)
        |         |     +-ColumnRef(type=ARRAY<UINT64>, column=null_if_empty_array.$out#19)
        |         |     +-Literal(type=ARRAY<UINT64>, value=NULL)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[null_if_empty_array.$out#19]
        |             +-expr_list=
        |             | +-$out#19 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<UINT64>
        |             |     +-subquery_type=ARRAY
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#17, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-OrderByScan
        |             |         +-column_list=[$agg_rewriter.b#16]
        |             |         +-is_ordered=TRUE
        |             |         +-input_scan=
        |             |         | +-ProjectScan
        |             |         |   +-column_list=$agg_rewriter.[a#15, b#16]
        |             |         |   +-expr_list=
        |             |         |   | +-a#15 :=
        |             |         |   | | +-GetStructField
        |             |         |   | |   +-type=INT64
        |             |         |   | |   +-expr=
        |             |         |   | |   | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#18)
        |             |         |   | |   +-field_idx=0
        |             |         |   | +-b#16 :=
        |             |         |   |   +-GetStructField
        |             |         |   |     +-type=UINT64
        |             |         |   |     +-expr=
        |             |         |   |     | +-ColumnRef(type=STRUCT<a_0 INT64, b_1 UINT64>, column=$agg_rewriter.$struct#18)
        |             |         |   |     +-field_idx=1
        |             |         |   +-input_scan=
        |             |         |     +-ArrayScan
        |             |         |       +-column_list=[$agg_rewriter.$struct#18]
        |             |         |       +-array_expr_list=
        |             |         |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>, column=$agg_rewriter.$array#17, is_correlated=TRUE)
        |             |         |       +-element_column_list=[$agg_rewriter.$struct#18]
        |             |         +-order_by_item_list=
        |             |           +-OrderByItem
        |             |             +-column_ref=
        |             |               +-ColumnRef(type=INT64, column=$agg_rewriter.a#15)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$agg_rewriter.$array#12, $aggregate.$agg2#7, $aggregate.$agg3#8, $agg_rewriter.$array#17]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
            |   +-input_scan=
            |   | +-ArrayScan
            |   |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |   |   +-array_expr_list=
            |   |   | +-GetProtoField
            |   |   |   +-type=ARRAY<INT64>
            |   |   |   +-expr=
            |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   |   +-field_descriptor=repeated_int64_val
            |   |   |   +-default_value=[]
            |   |   +-element_column_list=[$array.a#4]
            |   +-array_expr_list=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<UINT64>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=repeated_uint64_val
            |   |   +-default_value=[]
            |   +-element_column_list=[$array.b#5]
            +-aggregate_list=
              +-$array#12 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64, b_1 UINT64>) -> ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 INT64, b_1 UINT64>
              |     +-field_list=
              |       +-ColumnRef(type=INT64, column=$array.a#4)
              |       +-ColumnRef(type=UINT64, column=$array.b#5)
              |   +-having_modifier=
              |     +-AggregateHavingModifier
              |       +-kind=MAX
              |       +-having_expr=
              |         +-FunctionCall(ZetaSQL:$subtract(UINT64, UINT64) -> INT64)
              |           +-Cast(INT64 -> UINT64)
              |           | +-ColumnRef(type=INT64, column=$array.a#4)
              |           +-ColumnRef(type=UINT64, column=$array.b#5)
              +-$agg2#7 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$array.a#4)
              +-$agg3#8 :=
              | +-AggregateFunctionCall(ZetaSQL:count(UINT64) -> INT64)
              |   +-ColumnRef(type=UINT64, column=$array.b#5)
              +-$array#17 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64, b_1 UINT64>) -> ARRAY<STRUCT<a_0 INT64, b_1 UINT64>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 INT64, b_1 UINT64>
                    +-field_list=
                      +-ColumnRef(type=INT64, column=$array.a#4)
                      +-ColumnRef(type=UINT64, column=$array.b#5)
                  +-having_modifier=
                    +-AggregateHavingModifier
                      +-kind=MIN
                      +-having_expr=
                        +-Literal(type=INT64, value=3)
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_17.a_12)) >= 1, projectscan_17.a_12, CAST(NULL AS ARRAY< INT64 >)) AS a_18
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_16.a_14 AS a_14
            FROM
              (
                SELECT
                  a_13.a_0 AS a_14,
                  a_13.b_1 AS a_15
                FROM
                  UNNEST(aggregatescan_10.a_6) AS a_13
              ) AS projectscan_16
            ORDER BY projectscan_16.a_15) AS a_12
      ) AS projectscan_17
  ) AS a_11,
  aggregatescan_10.a_7 AS a_7,
  aggregatescan_10.a_8 AS a_8,
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_25.a_20)) >= 1, projectscan_25.a_20, CAST(NULL AS ARRAY< UINT64 >)) AS a_26
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_24.a_23 AS a_23
            FROM
              (
                SELECT
                  a_21.a_0 AS a_22,
                  a_21.b_1 AS a_23
                FROM
                  UNNEST(aggregatescan_10.a_9) AS a_21
              ) AS projectscan_24
            ORDER BY projectscan_24.a_22) AS a_20
      ) AS projectscan_25
  ) AS a_19
FROM
  (
    SELECT
      ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)
        HAVING MAX CAST(arrayscan_4.a_3 AS UINT64) - a_5) AS a_6,
      SUM(arrayscan_4.a_3) AS a_7,
      COUNT(a_5) AS a_8,
      ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)
        HAVING MIN 3) AS a_9
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_1,
          a_3 AS a_3
        FROM
          (
            SELECT
              TestTable.KitchenSink AS a_1
            FROM
              TestTable
          ) AS testtable_2
          JOIN
          UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
      ) AS arrayscan_4
      JOIN
      UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
  ) AS aggregatescan_10;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> SELECT
     testtable_2.a_1 AS a_1,
     a_3 AS a_3
|> AS arrayscan_4
|> JOIN
   UNNEST(arrayscan_4.a_1.repeated_uint64_val) AS a_5
|> AGGREGATE
     ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)
       HAVING MAX CAST(arrayscan_4.a_3 AS UINT64) - a_5) AS a_6,
     SUM(arrayscan_4.a_3) AS a_7,
     COUNT(a_5) AS a_8,
     ARRAY_AGG(STRUCT< a_0 INT64, b_1 UINT64 > (arrayscan_4.a_3, a_5)
       HAVING MIN 3) AS a_9
|> AS aggregatescan_10
|> SELECT
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_10.a_6) AS a_13
           |> SELECT
                a_13.a_0 AS a_14,
                a_13.b_1 AS a_15
           |> AS projectscan_16
           |> ORDER BY projectscan_16.a_15
           |> SELECT
                projectscan_16.a_14 AS a_14
         ) AS a_12
       |> AS projectscan_17
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_17.a_12)) >= 1, projectscan_17.a_12, CAST(NULL AS ARRAY< INT64 >)) AS a_18
     ) AS a_11,
     aggregatescan_10.a_7 AS a_7,
     aggregatescan_10.a_8 AS a_8,
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_10.a_9) AS a_21
           |> SELECT
                a_21.a_0 AS a_22,
                a_21.b_1 AS a_23
           |> AS projectscan_24
           |> ORDER BY projectscan_24.a_22
           |> SELECT
                projectscan_24.a_23 AS a_23
         ) AS a_20
       |> AS projectscan_25
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_25.a_20)) >= 1, projectscan_25.a_20, CAST(NULL AS ARRAY< UINT64 >)) AS a_26
     ) AS a_19;

==

# No ORDER BYs, so the ARRAY_AGG rewriter shouldn't mess up the tree
SELECT ARRAY_AGG(a), ARRAY_AGG(a + 2)
FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<INT64>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_int64_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.a#4]
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=$array.a#4)
          +-$agg2#6 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                +-ColumnRef(type=INT64, column=$array.a#4)
                +-Literal(type=INT64, value=2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(a_3) AS a_4,
  ARRAY_AGG(a_3 + 2) AS a_5
FROM
  (
    SELECT
      TestTable.KitchenSink AS a_1
    FROM
      TestTable
  ) AS testtable_2
  JOIN
  UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> AGGREGATE
     ARRAY_AGG(a_3) AS a_4,
     ARRAY_AGG(a_3 + 2) AS a_5;

==

[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE]

# ARRAY_AGG with limits
SELECT ARRAY_AGG(a LIMIT 2), ARRAY_AGG(a ORDER BY a+1 LIMIT 3)
FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#7 AS `$col2` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=$array.a#4)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |       +-input_scan=
        |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |       +-array_expr_list=
        |       | +-GetProtoField
        |       |   +-type=ARRAY<INT64>
        |       |   +-expr=
        |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   +-field_descriptor=repeated_int64_val
        |       |   +-default_value=[]
        |       +-element_column_list=[$array.a#4]
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
          |   +-ColumnRef(type=INT64, column=$array.a#4)
          |   +-limit=
          |     +-Literal(type=INT64, value=2)
          +-$agg2#7 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
              +-ColumnRef(type=INT64, column=$array.a#4)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
              +-limit=
                +-Literal(type=INT64, value=3)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(projectscan_5.a_3
    LIMIT 2) AS a_6,
  ARRAY_AGG(projectscan_5.a_3
    ORDER BY projectscan_5.a_4
    LIMIT 3) AS a_7
FROM
  (
    SELECT
      testtable_2.a_1 AS a_1,
      a_3 AS a_3,
      a_3 + 1 AS a_4
    FROM
      (
        SELECT
          TestTable.KitchenSink AS a_1
        FROM
          TestTable
      ) AS testtable_2
      JOIN
      UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
  ) AS projectscan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> SELECT
     testtable_2.a_1 AS a_1,
     a_3 AS a_3,
     a_3 + 1 AS a_4
|> AS projectscan_5
|> AGGREGATE
     ARRAY_AGG(projectscan_5.a_3
       LIMIT 2) AS a_6,
     ARRAY_AGG(projectscan_5.a_3
       ORDER BY projectscan_5.a_4
       LIMIT 3) AS a_7;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<INT64>]
| +-$aggregate.$agg2#7 AS `$col2` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<INT64>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#9)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#17]
        | |       +-expr_list=
        | |       | +-injected#17 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        | |       |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |       |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        | |       |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#11)
        | |       |     | +-Literal(type=INT64, value=1)
        | |       |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#11)
        | |       |     +-Literal(type=ARRAY<INT64>, value=NULL)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[null_if_empty_array.$out#11]
        | |           +-expr_list=
        | |           | +-$out#11 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<INT64>
        | |           |     +-subquery_type=ARRAY
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-LimitOffsetScan
        | |           |         +-column_list=[$agg_rewriter.a#8]
        | |           |         +-input_scan=
        | |           |         | +-ProjectScan
        | |           |         |   +-column_list=[$agg_rewriter.a#8]
        | |           |         |   +-input_scan=
        | |           |         |     +-ProjectScan
        | |           |         |       +-column_list=[$agg_rewriter.a#8]
        | |           |         |       +-expr_list=
        | |           |         |       | +-a#8 :=
        | |           |         |       |   +-GetStructField
        | |           |         |       |     +-type=INT64
        | |           |         |       |     +-expr=
        | |           |         |       |     | +-ColumnRef(type=STRUCT<a_0 INT64>, column=$agg_rewriter.$struct#10)
        | |           |         |       |     +-field_idx=0
        | |           |         |       +-input_scan=
        | |           |         |         +-ArrayScan
        | |           |         |           +-column_list=[$agg_rewriter.$struct#10]
        | |           |         |           +-array_expr_list=
        | |           |         |           | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |           |         |           +-element_column_list=[$agg_rewriter.$struct#10]
        | |           |         +-limit=
        | |           |         | +-Literal(type=INT64, value=2)
        | |           |         +-offset=
        | |           |           +-Literal(type=INT64, value=0)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#7 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#18]
        |         +-expr_list=
        |         | +-injected#18 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#16)
        |         |     | +-Literal(type=INT64, value=1)
        |         |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#16)
        |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[null_if_empty_array.$out#16]
        |             +-expr_list=
        |             | +-$out#16 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<INT64>
        |             |     +-subquery_type=ARRAY
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-LimitOffsetScan
        |             |         +-column_list=[$agg_rewriter.a#12]
        |             |         +-is_ordered=TRUE
        |             |         +-input_scan=
        |             |         | +-OrderByScan
        |             |         |   +-column_list=[$agg_rewriter.a#12]
        |             |         |   +-is_ordered=TRUE
        |             |         |   +-input_scan=
        |             |         |   | +-ProjectScan
        |             |         |   |   +-column_list=$agg_rewriter.[a#12, $orderbycol1#13]
        |             |         |   |   +-expr_list=
        |             |         |   |   | +-a#12 :=
        |             |         |   |   | | +-GetStructField
        |             |         |   |   | |   +-type=INT64
        |             |         |   |   | |   +-expr=
        |             |         |   |   | |   | +-ColumnRef(type=STRUCT<a_0 INT64, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#15)
        |             |         |   |   | |   +-field_idx=0
        |             |         |   |   | +-$orderbycol1#13 :=
        |             |         |   |   |   +-GetStructField
        |             |         |   |   |     +-type=INT64
        |             |         |   |   |     +-expr=
        |             |         |   |   |     | +-ColumnRef(type=STRUCT<a_0 INT64, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#15)
        |             |         |   |   |     +-field_idx=1
        |             |         |   |   +-input_scan=
        |             |         |   |     +-ArrayScan
        |             |         |   |       +-column_list=[$agg_rewriter.$struct#15]
        |             |         |   |       +-array_expr_list=
        |             |         |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14, is_correlated=TRUE)
        |             |         |   |       +-element_column_list=[$agg_rewriter.$struct#15]
        |             |         |   +-order_by_item_list=
        |             |         |     +-OrderByItem
        |             |         |       +-column_ref=
        |             |         |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#13)
        |             |         +-limit=
        |             |         | +-Literal(type=INT64, value=3)
        |             |         +-offset=
        |             |           +-Literal(type=INT64, value=0)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#9, $array#14]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $orderby.$orderbycol1#6]
            |   +-expr_list=
            |   | +-$orderbycol1#6 :=
            |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   |     +-ColumnRef(type=INT64, column=$array.a#4)
            |   |     +-Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-ArrayScan
            |       +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |       +-input_scan=
            |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |       +-array_expr_list=
            |       | +-GetProtoField
            |       |   +-type=ARRAY<INT64>
            |       |   +-expr=
            |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   +-field_descriptor=repeated_int64_val
            |       |   +-default_value=[]
            |       +-element_column_list=[$array.a#4]
            +-aggregate_list=
              +-$array#9 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64>) -> ARRAY<STRUCT<a_0 INT64>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 INT64>
              |     +-field_list=
              |       +-ColumnRef(type=INT64, column=$array.a#4)
              +-$array#14 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 INT64, `$orderbycol1_1` INT64>
                    +-field_list=
                      +-ColumnRef(type=INT64, column=$array.a#4)
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_13.a_10)) >= 1, projectscan_13.a_10, CAST(NULL AS ARRAY< INT64 >)) AS a_14
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              a_11.a_0 AS a_12
            FROM
              UNNEST(aggregatescan_8.a_6) AS a_11
            LIMIT 2 OFFSET 0) AS a_10
      ) AS projectscan_13
  ) AS a_9,
  (
    SELECT
      `IF`((ARRAY_LENGTH(projectscan_21.a_16)) >= 1, projectscan_21.a_16, CAST(NULL AS ARRAY< INT64 >)) AS a_22
    FROM
      (
        SELECT
          ARRAY(
            SELECT
              projectscan_20.a_18 AS a_18
            FROM
              (
                SELECT
                  a_17.a_0 AS a_18,
                  a_17.`$orderbycol1_1` AS a_19
                FROM
                  UNNEST(aggregatescan_8.a_7) AS a_17
              ) AS projectscan_20
            ORDER BY projectscan_20.a_19
            LIMIT 3 OFFSET 0) AS a_16
      ) AS projectscan_21
  ) AS a_15
FROM
  (
    SELECT
      ARRAY_AGG(STRUCT< a_0 INT64 > (projectscan_5.a_3)) AS a_6,
      ARRAY_AGG(STRUCT< a_0 INT64, `$orderbycol1_1` INT64 > (projectscan_5.a_3, projectscan_5.a_4)) AS a_7
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_1,
          a_3 AS a_3,
          a_3 + 1 AS a_4
        FROM
          (
            SELECT
              TestTable.KitchenSink AS a_1
            FROM
              TestTable
          ) AS testtable_2
          JOIN
          UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
      ) AS projectscan_5
  ) AS aggregatescan_8;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS testtable_2
|> JOIN
   UNNEST(testtable_2.a_1.repeated_int64_val) AS a_3
|> SELECT
     testtable_2.a_1 AS a_1,
     a_3 AS a_3,
     a_3 + 1 AS a_4
|> AS projectscan_5
|> AGGREGATE
     ARRAY_AGG(STRUCT< a_0 INT64 > (projectscan_5.a_3)) AS a_6,
     ARRAY_AGG(STRUCT< a_0 INT64, `$orderbycol1_1` INT64 > (projectscan_5.a_3, projectscan_5.a_4)) AS a_7
|> AS aggregatescan_8
|> SELECT
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_8.a_6) AS a_11
           |> SELECT
                a_11.a_0 AS a_12
           |> LIMIT 2 OFFSET 0) AS a_10
       |> AS projectscan_13
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_13.a_10)) >= 1, projectscan_13.a_10, CAST(NULL AS ARRAY< INT64 >)) AS a_14
     ) AS a_9,
     (
       SELECT
         ARRAY(
           FROM
             UNNEST(aggregatescan_8.a_7) AS a_17
           |> SELECT
                a_17.a_0 AS a_18,
                a_17.`$orderbycol1_1` AS a_19
           |> AS projectscan_20
           |> ORDER BY projectscan_20.a_19
           |> SELECT
                projectscan_20.a_18 AS a_18
           |> LIMIT 3 OFFSET 0) AS a_16
       |> AS projectscan_21
       |> SELECT
            `IF`((ARRAY_LENGTH(projectscan_21.a_16)) >= 1, projectscan_21.a_16, CAST(NULL AS ARRAY< INT64 >)) AS a_22
     ) AS a_15;

==

[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE]

# Correlated variable only in HAVING clause
WITH t AS (SELECT 1 AS correlated)
SELECT (SELECT ARRAY_AGG(a HAVING MAX t.correlated ORDER BY a+1 LIMIT 3) FROM TestTable, TestTable.KitchenSink.repeated_int64_val as a)
FROM t
--
QueryStmt
+-output_column_list=
| +-$query.$col1#9 AS `$col1` [ARRAY<INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#9]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.correlated#1]
    |       +-expr_list=
    |       | +-correlated#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#9]
        +-expr_list=
        | +-$col1#9 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t.correlated#2)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$aggregate.$agg1#8]
        |         +-input_scan=
        |           +-AggregateScan
        |             +-column_list=[$aggregate.$agg1#8]
        |             +-input_scan=
        |             | +-ProjectScan
        |             |   +-column_list=[TestTable.KitchenSink#5, $array.a#6, $orderby.$orderbycol1#7]
        |             |   +-expr_list=
        |             |   | +-$orderbycol1#7 :=
        |             |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |             |   |     +-ColumnRef(type=INT64, column=$array.a#6)
        |             |   |     +-Literal(type=INT64, value=1)
        |             |   +-input_scan=
        |             |     +-ArrayScan
        |             |       +-column_list=[TestTable.KitchenSink#5, $array.a#6]
        |             |       +-input_scan=
        |             |       | +-TableScan(column_list=[TestTable.KitchenSink#5], table=TestTable, column_index_list=[2])
        |             |       +-array_expr_list=
        |             |       | +-GetProtoField
        |             |       |   +-type=ARRAY<INT64>
        |             |       |   +-expr=
        |             |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#5)
        |             |       |   +-field_descriptor=repeated_int64_val
        |             |       |   +-default_value=[]
        |             |       +-element_column_list=[$array.a#6]
        |             +-aggregate_list=
        |               +-$agg1#8 :=
        |                 +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
        |                   +-ColumnRef(type=INT64, column=$array.a#6)
        |                   +-having_modifier=
        |                   | +-AggregateHavingModifier
        |                   |   +-kind=MAX
        |                   |   +-having_expr=
        |                   |     +-ColumnRef(type=INT64, column=t.correlated#2, is_correlated=TRUE)
        |                   +-order_by_item_list=
        |                   | +-OrderByItem
        |                   |   +-column_ref=
        |                   |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#7)
        |                   +-limit=
        |                     +-Literal(type=INT64, value=3)
        +-input_scan=
          +-WithRefScan(column_list=[t.correlated#2], with_query_name="t")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1
  )
SELECT
  (
    SELECT
      ARRAY_AGG(projectscan_8.a_6
        HAVING MAX withrefscan_2.a_1
        ORDER BY projectscan_8.a_7
        LIMIT 3) AS a_9
    FROM
      (
        SELECT
          testtable_5.a_4 AS a_4,
          a_6 AS a_6,
          a_6 + 1 AS a_7
        FROM
          (
            SELECT
              TestTable.KitchenSink AS a_4
            FROM
              TestTable
          ) AS testtable_5
          JOIN
          UNNEST(testtable_5.a_4.repeated_int64_val) AS a_6
      ) AS projectscan_8
  ) AS a_3
FROM
  t AS withrefscan_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1
  )
FROM
  t AS withrefscan_2
|> SELECT
     (
       FROM
         TestTable
       |> SELECT
            TestTable.KitchenSink AS a_4
       |> AS testtable_5
       |> JOIN
          UNNEST(testtable_5.a_4.repeated_int64_val) AS a_6
       |> SELECT
            testtable_5.a_4 AS a_4,
            a_6 AS a_6,
            a_6 + 1 AS a_7
       |> AS projectscan_8
       |> AGGREGATE
            ARRAY_AGG(projectscan_8.a_6
              HAVING MAX withrefscan_2.a_1
              ORDER BY projectscan_8.a_7
              LIMIT 3) AS a_9) AS a_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#9 AS `$col1` [ARRAY<INT64>]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#9]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t.correlated#1]
    |       +-expr_list=
    |       | +-correlated#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#9]
        +-expr_list=
        | +-$col1#9 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=t.correlated#2)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$aggregate.$agg1#8]
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$aggregate.$agg1#8]
        |             +-expr_list=
        |             | +-$agg1#8 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<INT64>
        |             |     +-subquery_type=SCALAR
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#12)
        |             |     +-subquery=
        |             |       +-ProjectScan
        |             |         +-column_list=[$with_expr.injected#15]
        |             |         +-expr_list=
        |             |         | +-injected#15 :=
        |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        |             |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |             |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        |             |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#14)
        |             |         |     | +-Literal(type=INT64, value=1)
        |             |         |     +-ColumnRef(type=ARRAY<INT64>, column=null_if_empty_array.$out#14)
        |             |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
        |             |         +-input_scan=
        |             |           +-ProjectScan
        |             |             +-column_list=[null_if_empty_array.$out#14]
        |             |             +-expr_list=
        |             |             | +-$out#14 :=
        |             |             |   +-SubqueryExpr
        |             |             |     +-type=ARRAY<INT64>
        |             |             |     +-subquery_type=ARRAY
        |             |             |     +-parameter_list=
        |             |             |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        |             |             |     +-subquery=
        |             |             |       +-LimitOffsetScan
        |             |             |         +-column_list=[$agg_rewriter.a#10]
        |             |             |         +-is_ordered=TRUE
        |             |             |         +-input_scan=
        |             |             |         | +-OrderByScan
        |             |             |         |   +-column_list=[$agg_rewriter.a#10]
        |             |             |         |   +-is_ordered=TRUE
        |             |             |         |   +-input_scan=
        |             |             |         |   | +-ProjectScan
        |             |             |         |   |   +-column_list=$agg_rewriter.[a#10, $orderbycol1#11]
        |             |             |         |   |   +-expr_list=
        |             |             |         |   |   | +-a#10 :=
        |             |             |         |   |   | | +-GetStructField
        |             |             |         |   |   | |   +-type=INT64
        |             |             |         |   |   | |   +-expr=
        |             |             |         |   |   | |   | +-ColumnRef(type=STRUCT<a_0 INT64, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#13)
        |             |             |         |   |   | |   +-field_idx=0
        |             |             |         |   |   | +-$orderbycol1#11 :=
        |             |             |         |   |   |   +-GetStructField
        |             |             |         |   |   |     +-type=INT64
        |             |             |         |   |   |     +-expr=
        |             |             |         |   |   |     | +-ColumnRef(type=STRUCT<a_0 INT64, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#13)
        |             |             |         |   |   |     +-field_idx=1
        |             |             |         |   |   +-input_scan=
        |             |             |         |   |     +-ArrayScan
        |             |             |         |   |       +-column_list=[$agg_rewriter.$struct#13]
        |             |             |         |   |       +-array_expr_list=
        |             |             |         |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        |             |             |         |   |       +-element_column_list=[$agg_rewriter.$struct#13]
        |             |             |         |   +-order_by_item_list=
        |             |             |         |     +-OrderByItem
        |             |             |         |       +-column_ref=
        |             |             |         |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#11)
        |             |             |         +-limit=
        |             |             |         | +-Literal(type=INT64, value=3)
        |             |             |         +-offset=
        |             |             |           +-Literal(type=INT64, value=0)
        |             |             +-input_scan=
        |             |               +-SingleRowScan
        |             +-input_scan=
        |               +-AggregateScan
        |                 +-column_list=[$agg_rewriter.$array#12]
        |                 +-input_scan=
        |                 | +-ProjectScan
        |                 |   +-column_list=[TestTable.KitchenSink#5, $array.a#6, $orderby.$orderbycol1#7]
        |                 |   +-expr_list=
        |                 |   | +-$orderbycol1#7 :=
        |                 |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |                 |   |     +-ColumnRef(type=INT64, column=$array.a#6)
        |                 |   |     +-Literal(type=INT64, value=1)
        |                 |   +-input_scan=
        |                 |     +-ArrayScan
        |                 |       +-column_list=[TestTable.KitchenSink#5, $array.a#6]
        |                 |       +-input_scan=
        |                 |       | +-TableScan(column_list=[TestTable.KitchenSink#5], table=TestTable, column_index_list=[2])
        |                 |       +-array_expr_list=
        |                 |       | +-GetProtoField
        |                 |       |   +-type=ARRAY<INT64>
        |                 |       |   +-expr=
        |                 |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#5)
        |                 |       |   +-field_descriptor=repeated_int64_val
        |                 |       |   +-default_value=[]
        |                 |       +-element_column_list=[$array.a#6]
        |                 +-aggregate_list=
        |                   +-$array#12 :=
        |                     +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 INT64, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<a_0 INT64, `$orderbycol1_1` INT64>>)
        |                       +-MakeStruct
        |                         +-type=STRUCT<a_0 INT64, `$orderbycol1_1` INT64>
        |                         +-field_list=
        |                           +-ColumnRef(type=INT64, column=$array.a#6)
        |                           +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#7)
        |                       +-having_modifier=
        |                         +-AggregateHavingModifier
        |                           +-kind=MAX
        |                           +-having_expr=
        |                             +-ColumnRef(type=INT64, column=t.correlated#2, is_correlated=TRUE)
        +-input_scan=
          +-WithRefScan(column_list=[t.correlated#2], with_query_name="t")
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1
  )
SELECT
  (
    SELECT
      (
        SELECT
          `IF`((ARRAY_LENGTH(projectscan_17.a_12)) >= 1, projectscan_17.a_12, CAST(NULL AS ARRAY< INT64 >)) AS a_18
        FROM
          (
            SELECT
              ARRAY(
                SELECT
                  projectscan_16.a_14 AS a_14
                FROM
                  (
                    SELECT
                      a_13.a_0 AS a_14,
                      a_13.`$orderbycol1_1` AS a_15
                    FROM
                      UNNEST(aggregatescan_10.a_9) AS a_13
                  ) AS projectscan_16
                ORDER BY projectscan_16.a_15
                LIMIT 3 OFFSET 0) AS a_12
          ) AS projectscan_17
      ) AS a_11
    FROM
      (
        SELECT
          ARRAY_AGG(STRUCT< a_0 INT64, `$orderbycol1_1` INT64 > (projectscan_8.a_6, projectscan_8.a_7)
            HAVING MAX withrefscan_2.a_1) AS a_9
        FROM
          (
            SELECT
              testtable_5.a_4 AS a_4,
              a_6 AS a_6,
              a_6 + 1 AS a_7
            FROM
              (
                SELECT
                  TestTable.KitchenSink AS a_4
                FROM
                  TestTable
              ) AS testtable_5
              JOIN
              UNNEST(testtable_5.a_4.repeated_int64_val) AS a_6
          ) AS projectscan_8
      ) AS aggregatescan_10
  ) AS a_3
FROM
  t AS withrefscan_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      1 AS a_1
  )
FROM
  t AS withrefscan_2
|> SELECT
     (
       FROM
         TestTable
       |> SELECT
            TestTable.KitchenSink AS a_4
       |> AS testtable_5
       |> JOIN
          UNNEST(testtable_5.a_4.repeated_int64_val) AS a_6
       |> SELECT
            testtable_5.a_4 AS a_4,
            a_6 AS a_6,
            a_6 + 1 AS a_7
       |> AS projectscan_8
       |> AGGREGATE
            ARRAY_AGG(STRUCT< a_0 INT64, `$orderbycol1_1` INT64 > (projectscan_8.a_6, projectscan_8.a_7)
              HAVING MAX withrefscan_2.a_1) AS a_9
       |> AS aggregatescan_10
       |> SELECT
            (
              SELECT
                ARRAY(
                  FROM
                    UNNEST(aggregatescan_10.a_9) AS a_13
                  |> SELECT
                       a_13.a_0 AS a_14,
                       a_13.`$orderbycol1_1` AS a_15
                  |> AS projectscan_16
                  |> ORDER BY projectscan_16.a_15
                  |> SELECT
                       projectscan_16.a_14 AS a_14
                  |> LIMIT 3 OFFSET 0) AS a_12
              |> AS projectscan_17
              |> SELECT
                   `IF`((ARRAY_LENGTH(projectscan_17.a_12)) >= 1, projectscan_17.a_12, CAST(NULL AS ARRAY< INT64 >)) AS a_18
            ) AS a_11
     ) AS a_3;
