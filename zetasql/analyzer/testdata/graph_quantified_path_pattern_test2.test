[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]
[default no_test_extract_table_names]

# Traversal hints from a quantified path
select * from graph_table(
  aml
  MATCH ((a)-[b]->(c)){1, 3}@{key=val}->(d)
  COLUMNS(1 AS One)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#11 AS One [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.One#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.One#11]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.$element1#9, $element_table.d#10]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.$element1#9, $element_table.d#10]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       | | +-column_list=$path_scan.[$head#7, $tail#8]
        |       | | +-input_scan_list=
        |       | | | +-GraphNodeScan
        |       | | | | +-column_list=[$element_table.a#1]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | | +-GraphEdgeScan
        |       | | | | +-column_list=[$element_table.b#2]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | | | +-orientation=RIGHT
        |       | | | +-GraphNodeScan
        |       | | |   +-column_list=[$element_table.c#3]
        |       | | |   +-label_expr=
        |       | | |   | +-GraphLabelNaryExpr
        |       | | |   |   +-op=OR
        |       | | |   |   +-operand_list=
        |       | | |   |     +-GraphWildCardLabel
        |       | | |   |     +-GraphLabelNaryExpr
        |       | | |   |       +-op=NOT
        |       | | |   |       +-operand_list=
        |       | | |   |         +-GraphWildCardLabel
        |       | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | +-head=$path_scan.$head#7
        |       | | +-tail=$path_scan.$tail#8
        |       | | +-quantifier=
        |       | | | +-GraphPathPatternQuantifier
        |       | | |   +-lower_bound=
        |       | | |   | +-Literal(type=INT64, value=1)
        |       | | |   +-upper_bound=
        |       | | |     +-Literal(type=INT64, value=3)
        |       | | +-group_variable_list=
        |       | |   +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.b#2, array=$element_table.b#5)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.c#3, array=$element_table.c#6)
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#9]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-lhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="val")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.d#10]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$path_scan.$head#7
        |       +-tail=$element_table.d#10
        +-shape_expr_list=
          +-One#11 := Literal(type=INT64, value=1)
==

# (b/335209424) Edge quantifier with outer filter
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH (-[b]->{1, 3} WHERE 20 > 10)
  COLUMNS(1 AS one)
  )
--

QueryStmt
+-output_column_list=
| +-$graph_table.one#9 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#9]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$path_scan.[$head#7, $tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$path_scan.[$head#7, $tail#8]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       |   +-column_list=$path_scan.[$head#7, $tail#8]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.$element1#1]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.b#2]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | +-GraphNodeScan
        |       |   |   +-column_list=[$element_table.$element2#3]
        |       |   |   +-label_expr=
        |       |   |   | +-GraphLabelNaryExpr
        |       |   |   |   +-op=OR
        |       |   |   |   +-operand_list=
        |       |   |   |     +-GraphWildCardLabel
        |       |   |   |     +-GraphLabelNaryExpr
        |       |   |   |       +-op=NOT
        |       |   |   |       +-operand_list=
        |       |   |   |         +-GraphWildCardLabel
        |       |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   +-head=$path_scan.$head#7
        |       |   +-tail=$path_scan.$tail#8
        |       |   +-quantifier=
        |       |   | +-GraphPathPatternQuantifier
        |       |   |   +-lower_bound=
        |       |   |   | +-Literal(type=INT64, value=1)
        |       |   |   +-upper_bound=
        |       |   |     +-Literal(type=INT64, value=3)
        |       |   +-group_variable_list=
        |       |     +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
        |       |     +-GraphMakeArrayVariable(element=$element_table.b#2, array=$element_table.b#5)
        |       |     +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
        |       +-filter_expr=
        |       | +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |       |   +-Literal(type=INT64, value=20)
        |       |   +-Literal(type=INT64, value=10)
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        +-shape_expr_list=
          +-one#9 := Literal(type=INT64, value=1)
==

# (b/335288693) Consecutive unlabeled edge quantifiers
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH ->{2}->{4}
  COLUMNS(1 AS one)
  )
--

QueryStmt
+-output_column_list=
| +-$graph_table.one#17 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#17]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#17]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$path_scan.[$head#7, $tail#8, $head#15, $tail#16]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$path_scan.[$head#7, $tail#8, $head#15, $tail#16]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       | | +-column_list=$path_scan.[$head#7, $tail#8]
        |       | | +-input_scan_list=
        |       | | | +-GraphNodeScan
        |       | | | | +-column_list=[$element_table.$element1#1]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | | +-GraphEdgeScan
        |       | | | | +-column_list=[$element_table.$element2#2]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | | | +-orientation=RIGHT
        |       | | | +-GraphNodeScan
        |       | | |   +-column_list=[$element_table.$element3#3]
        |       | | |   +-label_expr=
        |       | | |   | +-GraphLabelNaryExpr
        |       | | |   |   +-op=OR
        |       | | |   |   +-operand_list=
        |       | | |   |     +-GraphWildCardLabel
        |       | | |   |     +-GraphLabelNaryExpr
        |       | | |   |       +-op=NOT
        |       | | |   |       +-operand_list=
        |       | | |   |         +-GraphWildCardLabel
        |       | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | +-head=$path_scan.$head#7
        |       | | +-tail=$path_scan.$tail#8
        |       | | +-quantifier=
        |       | | | +-GraphPathPatternQuantifier
        |       | | |   +-lower_bound=
        |       | | |   | +-Literal(type=INT64, value=2)
        |       | | |   +-upper_bound=
        |       | | |     +-Literal(type=INT64, value=2)
        |       | | +-group_variable_list=
        |       | |   +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.$element2#2, array=$element_table.$element2#5)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.$element3#3, array=$element_table.$element3#6)
        |       | +-GraphPathScan
        |       |   +-column_list=$path_scan.[$head#15, $tail#16]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.$element4#9]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.$element5#10]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | +-GraphNodeScan
        |       |   |   +-column_list=[$element_table.$element6#11]
        |       |   |   +-label_expr=
        |       |   |   | +-GraphLabelNaryExpr
        |       |   |   |   +-op=OR
        |       |   |   |   +-operand_list=
        |       |   |   |     +-GraphWildCardLabel
        |       |   |   |     +-GraphLabelNaryExpr
        |       |   |   |       +-op=NOT
        |       |   |   |       +-operand_list=
        |       |   |   |         +-GraphWildCardLabel
        |       |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   +-head=$path_scan.$head#15
        |       |   +-tail=$path_scan.$tail#16
        |       |   +-quantifier=
        |       |   | +-GraphPathPatternQuantifier
        |       |   |   +-lower_bound=
        |       |   |   | +-Literal(type=INT64, value=4)
        |       |   |   +-upper_bound=
        |       |   |     +-Literal(type=INT64, value=4)
        |       |   +-group_variable_list=
        |       |     +-GraphMakeArrayVariable(element=$element_table.$element4#9, array=$element_table.$element4#12)
        |       |     +-GraphMakeArrayVariable(element=$element_table.$element5#10, array=$element_table.$element5#13)
        |       |     +-GraphMakeArrayVariable(element=$element_table.$element6#11, array=$element_table.$element6#14)
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#16
        +-shape_expr_list=
          +-one#17 := Literal(type=INT64, value=1)
==

# Querying aml_multi since there's just one node table
SELECT * FROM GRAPH_TABLE(
  aml_multi
  MATCH (head)((a)-[e]->(b)){1,3}(tail)
  RETURN head.value as head, tail.value as tail
)
--
ERROR: Graph query with GQL extension is not supported [at 3:3]
  MATCH (head)((a)-[e]->(b)){1,3}(tail)
  ^

==

# Ensure that the internal '$head' and '$tail' variables of a quantified path do
# not conflict with user-provided identifiers called `$head`\`$tail`
# TODO: Blocked by incorrect IsInternalAlias behavior for quoted
#                    identifiers. This test should pass once fixed.
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (`$head`)((a)-[b]->(c)){1, 3}(`$tail`) WHERE `$head` = `$tail`
  COLUMNS(1 AS One)
  )
--
ERROR: Unrecognized name: `$head`; Did you mean @@`where`? [at 3:54]
  MATCH (`$head`)((a)-[b]->(c)){1, 3}(`$tail`) WHERE `$head` = `$tail`
                                                     ^
==

# Ensure that the internal 'head' variable isn't accidentally exposed
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH ((a)-[b]->(c)){1, 3}
  COLUMNS(`$head` AS head_output)
  )
--

ERROR: Unrecognized name: `$head`; Did you mean @@`where`? [at 4:11]
  COLUMNS(`$head` AS head_output)
          ^
==

# Ensure that the internal 'tail' variable isn't accidentally exposed
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH ((a)-[b]->(c)){1, 3}
  COLUMNS(`$tail` AS tail_output)
  )
--

ERROR: Unrecognized name: `$tail` [at 4:11]
  COLUMNS(`$tail` AS tail_output)
          ^
==

# Bounded path quantifier with omitted lower bound.
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH((a)-[b]->(c)){, 3}
  COLUMNS(1 AS one)
  )
--
ERROR: Minimum node count of path pattern cannot be 0 [at 3:8]
  MATCH((a)-[b]->(c)){, 3}
       ^
==

# Pure quantified edge with omitted lower bound
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH -[b]->{, 3}
  COLUMNS(1 AS one)
  )
--
ERROR: Minimum node count of path pattern cannot be 0 [at 3:9]
  MATCH -[b]->{, 3}
        ^
==

# Pure quantified edge with a 0 lower-bound
select * from graph_table(
  aml
  MATCH -[b]->{0, 3}
  COLUMNS(1 AS One)
)
--
ERROR: Minimum node count of path pattern cannot be 0 [at 3:9]
  MATCH -[b]->{0, 3}
        ^
==

# Quantifier pattern with minimum path length of 0
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH((a)){1, 3}
  COLUMNS(1 AS one)
  )
--
ERROR: Minimum path length of a path-primary within a quantified path pattern cannot be 0 [at 3:8]
  MATCH((a)){1, 3}
       ^
==

# Multiple concatenated quantified patterns with 0 lower bound
select * from graph_table(
  aml
  MATCH ((a)-[b]->(c)){0, 3}((x)-[y]->(z)){0, 2}
  COLUMNS (1 AS One)
)
--
ERROR: Minimum node count of path pattern cannot be 0 [at 3:9]
  MATCH ((a)-[b]->(c)){0, 3}((x)-[y]->(z)){0, 2}
        ^
==

# Invalid case of lower bound greater than upper bound
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH((a)-[b]->(c)){3, 1}
  COLUMNS(1 AS one)
  )
--
ERROR: Invalid ast_lower_quantifier: lower bound cannot be greater than upper bound: 3 > 1 [at 3:23]
  MATCH((a)-[b]->(c)){3, 1}
                      ^
==

# Upper bound cannot be 0
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH (x)((a)-[b]->(c)){0, 0}
  COLUMNS(1 AS one)
  )
--
ERROR: Value of upper bound must be greater than zero [at 3:30]
  MATCH (x)((a)-[b]->(c)){0, 0}
                             ^
==

# Nested quantifiers
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH ((a)-[b]->((x)-[e]->(z)){2}){2, 3}
  COLUMNS(1 AS one)
  )
--
ERROR: Nested quantifiers are not allowed [at 3:9]
  MATCH ((a)-[b]->((x)-[e]->(z)){2}){2, 3}
        ^
==

# Begin group variables tests

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

select * from graph_table(
  aml
  match (-[e]-){3}
  return e[OFFSET(0)].amount as first_amount
)
--

QueryStmt
+-output_column_list=
| +-$graph_table.first_amount#9 AS first_amount [UINT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.first_amount#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.first_amount#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.first_amount#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.first_amount#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$path_scan.$head#7
                  | |   +-tail=$path_scan.$tail#8
                  | |   +-quantifier=
                  | |   | +-GraphPathPatternQuantifier
                  | |   |   +-lower_bound=
                  | |   |   | +-Literal(type=INT64, value=3)
                  | |   |   +-upper_bound=
                  | |   |     +-Literal(type=INT64, value=3)
                  | |   +-group_variable_list=
                  | |     +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
                  | |     +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
                  | |     +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.first_amount#9]
                    +-expr_list=
                    | +-first_amount#9 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, INT64) -> GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                    |     |   +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5)
                    |     |   +-Literal(type=INT64, value=0)
                    |     +-property=amount(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.e#5])
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

select * from graph_table(
  aml
  match ((a)-[e]-(b)){1,3}
  return ARRAY_LENGTH(a) as a_len, ARRAY_LENGTH(ARRAY_CONCAT(a, b)) as a_and_b_len
)
# COMMENT FROM MISSING PART

--
QueryStmt
+-output_column_list=
| +-$graph_table.a_len#9 AS a_len [INT64]
| +-$graph_table.a_and_b_len#10 AS a_and_b_len [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[a_len#9, a_and_b_len#10]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[a_len#9, a_and_b_len#10]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[a_len#9, a_and_b_len#10]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[a_len#9, a_and_b_len#10]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$path_scan.$head#7, $element_table.a#4, $element_table.b#6, $path_scan.$tail#8]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$path_scan.$head#7, $element_table.a#4, $element_table.b#6, $path_scan.$tail#8]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$path_scan.$head#7
                  | |   +-tail=$path_scan.$tail#8
                  | |   +-quantifier=
                  | |   | +-GraphPathPatternQuantifier
                  | |   |   +-lower_bound=
                  | |   |   | +-Literal(type=INT64, value=1)
                  | |   |   +-upper_bound=
                  | |   |     +-Literal(type=INT64, value=3)
                  | |   +-group_variable_list=
                  | |     +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
                  | |     +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
                  | |     +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[a_len#9, a_and_b_len#10]
                    +-expr_list=
                    | +-a_len#9 :=
                    | | +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
                    | |   +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.a#4)
                    | +-a_and_b_len#10 :=
                    |   +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
                    |     +-FunctionCall(ZetaSQL:array_concat(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, repeated(1) ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>)
                    |       +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.a#4)
                    |       +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.b#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[a#4, b#6])
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Joining to a quantified path with group variables
select * from graph_table(
  aml
  match ((head) ((a)-[e]-(b)){1,3})
  return ARRAY_LENGTH(a) as a_len
)
# COMMENT FROM MISSING PART

--
QueryStmt
+-output_column_list=
| +-$graph_table.a_len#10 AS a_len [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.a_len#10]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a_len#10]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a_len#10]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a_len#10]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.head#1, $path_scan.$head#8, $element_table.a#5, $path_scan.$tail#9]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.head#1, $path_scan.$head#8, $element_table.a#5, $path_scan.$tail#9]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.head#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   |   +-column_list=[$path_scan.$head#8, $element_table.a#5, $path_scan.$tail#9]
                  | |   |   +-input_scan_list=
                  | |   |   | +-GraphNodeScan
                  | |   |   | | +-column_list=[$element_table.a#2]
                  | |   |   | | +-label_expr=
                  | |   |   | | | +-GraphLabelNaryExpr
                  | |   |   | | |   +-op=OR
                  | |   |   | | |   +-operand_list=
                  | |   |   | | |     +-GraphWildCardLabel
                  | |   |   | | |     +-GraphLabelNaryExpr
                  | |   |   | | |       +-op=NOT
                  | |   |   | | |       +-operand_list=
                  | |   |   | | |         +-GraphWildCardLabel
                  | |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   |   | +-GraphEdgeScan
                  | |   |   | | +-column_list=[$element_table.e#3]
                  | |   |   | | +-label_expr=
                  | |   |   | | | +-GraphLabelNaryExpr
                  | |   |   | | |   +-op=OR
                  | |   |   | | |   +-operand_list=
                  | |   |   | | |     +-GraphWildCardLabel
                  | |   |   | | |     +-GraphLabelNaryExpr
                  | |   |   | | |       +-op=NOT
                  | |   |   | | |       +-operand_list=
                  | |   |   | | |         +-GraphWildCardLabel
                  | |   |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   |   | | +-orientation=ANY
                  | |   |   | +-GraphNodeScan
                  | |   |   |   +-column_list=[$element_table.b#4]
                  | |   |   |   +-label_expr=
                  | |   |   |   | +-GraphLabelNaryExpr
                  | |   |   |   |   +-op=OR
                  | |   |   |   |   +-operand_list=
                  | |   |   |   |     +-GraphWildCardLabel
                  | |   |   |   |     +-GraphLabelNaryExpr
                  | |   |   |   |       +-op=NOT
                  | |   |   |   |       +-operand_list=
                  | |   |   |   |         +-GraphWildCardLabel
                  | |   |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   |   +-head=$path_scan.$head#8
                  | |   |   +-tail=$path_scan.$tail#9
                  | |   |   +-quantifier=
                  | |   |   | +-GraphPathPatternQuantifier
                  | |   |   |   +-lower_bound=
                  | |   |   |   | +-Literal(type=INT64, value=1)
                  | |   |   |   +-upper_bound=
                  | |   |   |     +-Literal(type=INT64, value=3)
                  | |   |   +-group_variable_list=
                  | |   |     +-GraphMakeArrayVariable(element=$element_table.a#2, array=$element_table.a#5)
                  | |   |     +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   |     +-GraphMakeArrayVariable(element=$element_table.b#4, array=$element_table.b#7)
                  | |   +-head=$element_table.head#1
                  | |   +-tail=$path_scan.$tail#9
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.a_len#10]
                    +-expr_list=
                    | +-a_len#10 :=
                    |   +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
                    |     +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.a#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[head#1, a#5])
==

[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]

# Not allowed to multiply declare group variables
select * from graph_table(
  aml
  match ((a) - ((a)-[e]-(b)){1,3})
  return ARRAY_LENGTH(a) as a_len
)
--
ERROR: `a` is not a graph element column and cannot be redeclared [at 4:9]
  match ((a) - ((a)-[e]-(b)){1,3})
        ^

==

# Not allowed to multiply declare group variables take 2
select * from graph_table(
  aml
  match (a)
  match ((a)-[e]-(b)){1,3}
  return ARRAY_LENGTH(a) as a_len
)
--
ERROR: Variable name: a cannot be used in both quantified and unquantified patterns [at 4:9]
  match ((a)-[e]-(b)){1,3}
        ^

==

# Not allowed to multiply declare group variables take 3
select * from graph_table(
  aml
  match ((a)-[]-()){1,3}
  match ((a)-[e]-(b)){1,3}
  return ARRAY_LENGTH(a) as a_len
)
--
ERROR: Group variable a is multiply declared [at 4:9]
  match ((a)-[e]-(b)){1,3}
        ^

==

select * from graph_table(
  aml
  match (-[e]-){3}
  return e[OFFSET(0)] as first_element
)
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
select * from graph_table(
^
==

# multiply declared let statement
select * from graph_table(
  aml
  let x = 4
  match (a)-(x)
  return a.name as name
)
--
ERROR: `x` is not a graph element column and cannot be redeclared [at 4:9]
  match (a)-(x)
        ^

==

# multiply declared let statement and quantified path
select * from graph_table(
  aml
  let x = 4
  match (a)-((x)-[]-){1,3}
  return a.name as name
)
--
ERROR: Variable name: x cannot be used in both quantified and unquantified patterns [at 4:9]
  match (a)-((x)-[]-){1,3}
        ^

==

# Next four tests have all combinations of two matches of the same single
# and group variable

select * from graph_table(
  aml
  match (-[e]-){3}
  match (-[e]-)
  return e[OFFSET(0)].amount as a
)

--

ERROR: Variable name: e cannot be used in both quantified and unquantified patterns [at 4:9]
  match (-[e]-)
        ^

==

select * from graph_table(
  aml
  match (-[e]-){3}, (-[e]-)
  return e[OFFSET(0)].amount as a
)

--

ERROR: `e` is not a graph element column and cannot be redeclared [at 3:9]
  match (-[e]-){3}, (-[e]-)
        ^

==

select * from graph_table(
  aml
  match (-[e]-)
  match (-[e]-){3}
  return e[OFFSET(0)].amount as a
)

--

ERROR: Variable name: e cannot be used in both quantified and unquantified patterns [at 4:9]
  match (-[e]-){3}
        ^

==

select * from graph_table(
  aml
  match (-[e]-), (-[e]-){3}
  return e[OFFSET(0)].amount as a
)

--

ERROR: `e` is not a graph element column and cannot be redeclared [at 3:9]
  match (-[e]-), (-[e]-){3}
        ^

==

# Next two tests are the same group variable in separate/distinct matches
select * from graph_table(
  aml
  match (-[e]-){3}
  match (-[e]-){2}
  return e[OFFSET(0)].amount as a
)

--

ERROR: Group variable e is multiply declared [at 4:9]
  match (-[e]-){2}
        ^

==

select * from graph_table(
  aml
  match (-[e]-){3}, (-[e]-){2}
  return e[OFFSET(0)].amount as a
)

--

ERROR: Variable name: e is ambiguous group variable in the GraphPattern [at 3:9]
  match (-[e]-){3}, (-[e]-){2}
        ^

==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+ORDER_BY_IN_AGGREGATE{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Simple group variable access
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH ((a:Account)-[e:Transfer]->(b:Account)){1,3}
  COLUMNS(ARRAY_LENGTH(e) AS x)
)
# POST-COMMENT FROM MISSING PART

--
QueryStmt
+-output_column_list=
| +-$graph_table.x#9 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#9]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=76-83, label=aml.Account)
        |       | | +-target_element_table_list=[aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=88-96, label=aml.Transfer)
        |       | | +-target_element_table_list=[aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=102-109, label=aml.Account)
        |       |   +-target_element_table_list=[aml.Account]
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-quantifier=
        |       | +-GraphPathPatternQuantifier
        |       |   +-lower_bound=
        |       |   | +-Literal(type=INT64, value=1)
        |       |   +-upper_bound=
        |       |     +-Literal(type=INT64, value=3)
        |       +-group_variable_list=
        |         +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |         +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
        |         +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
        +-shape_expr_list=
          +-x#9 :=
            +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>) -> INT64)
              +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>, column=$element_table.e#5)
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+ORDER_BY_IN_AGGREGATE{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Without restricting the types
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH ((a)-[e]->(b)){1,3}
  COLUMNS(ARRAY_LENGTH(e) AS x)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#9 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#9]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-quantifier=
        |       | +-GraphPathPatternQuantifier
        |       |   +-lower_bound=
        |       |   | +-Literal(type=INT64, value=1)
        |       |   +-upper_bound=
        |       |     +-Literal(type=INT64, value=3)
        |       +-group_variable_list=
        |         +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |         +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
        |         +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
        +-shape_expr_list=
          +-x#9 :=
            +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
              +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5)

==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+ORDER_BY_IN_AGGREGATE{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Using all the group variables
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH ((a)-[e]->(b)){1,3}
  COLUMNS(ARRAY_LENGTH(a) + ARRAY_LENGTH(e) + ARRAY_LENGTH(b) AS x)
)
# POST-COMMENT FROM MISSING PART

--
QueryStmt
+-output_column_list=
| +-$graph_table.x#9 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#9]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $element_table.a#4, $element_table.e#5, $element_table.b#6, $path_scan.$tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $element_table.a#4, $element_table.e#5, $element_table.b#6, $path_scan.$tail#8]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-quantifier=
        |       | +-GraphPathPatternQuantifier
        |       |   +-lower_bound=
        |       |   | +-Literal(type=INT64, value=1)
        |       |   +-upper_bound=
        |       |     +-Literal(type=INT64, value=3)
        |       +-group_variable_list=
        |         +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |         +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
        |         +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
        +-shape_expr_list=
          +-x#9 :=
            +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              | +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
              | | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.a#4)
              | +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
              |   +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5)
              +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
                +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.b#6)
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+ORDER_BY_IN_AGGREGATE{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Using group variables in horizontal aggregation
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a)(-[e:Transfer]->){1,3}(b)
  LET avg = AVG(e.amount)
  LET total = SUM(e.amount)
  RETURN a.id as a, b.id as b, avg, total
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.a#15 AS a [INT64]
| +-$graph_table.b#16 AS b [INT64]
| +-$graph_table.avg#17 AS avg [DOUBLE]
| +-$graph_table.total#18 AS total [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[a#15, b#16, avg#17, total#18]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[a#15, b#16, avg#17, total#18]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[a#15, b#16, avg#17, total#18]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[a#15, b#16, avg#17, total#18]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.b#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.b#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabel(parse_location=99-107, label=aml.Transfer)
                  | |   | | | | +-target_element_table_list=[aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=3)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#6, $element_table.b#10, $graph_table.avg#12]
                  | +-expr_list=
                  | | +-avg#12 :=
                  | |   +-ArrayAggregate
                  | |     +-type=DOUBLE
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>, column=$element_table.e#6)
                  | |     +-element_column=$horizontal_aggregate.e#11
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:avg(UINT64) -> DOUBLE)
                  | |         +-GraphGetElementProperty
                  | |           +-type=UINT64
                  | |           +-expr=
                  | |           | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$horizontal_aggregate.e#11)
                  | |           +-property=amount(UINT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[a#1, e#6, b#10])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#6, $element_table.b#10, $graph_table.avg#12, $graph_table.total#14]
                  | +-expr_list=
                  | | +-total#14 :=
                  | |   +-ArrayAggregate
                  | |     +-type=UINT64
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>, column=$element_table.e#6)
                  | |     +-element_column=$horizontal_aggregate.e#13
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  | |         +-GraphGetElementProperty
                  | |           +-type=UINT64
                  | |           +-expr=
                  | |           | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$horizontal_aggregate.e#13)
                  | |           +-property=amount(UINT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#6, $element_table.b#10, $graph_table.avg#12])
                  +-ProjectScan
                    +-column_list=$graph_table.[a#15, b#16, avg#17, total#18]
                    +-expr_list=
                    | +-a#15 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    | |   +-property=id(INT64)
                    | +-b#16 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#10)
                    | |   +-property=id(INT64)
                    | +-avg#17 := ColumnRef(type=DOUBLE, column=$graph_table.avg#12)
                    | +-total#18 := ColumnRef(type=UINT64, column=$graph_table.total#14)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#6, $element_table.b#10, $graph_table.avg#12, $graph_table.total#14])

==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+ORDER_BY_IN_AGGREGATE{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Using group variables in horizontal aggregation in filter
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a)((giver)-[e:Transfer]->){1,3}(b)
  FILTER LOGICAL_AND(giver.id > 50) and AVG(e.amount) > 50
  LET total = SUM(e.amount)
  LET givers = ARRAY_AGG(giver.id)
  RETURN a.id as a, b.id as b, total, givers
)
# POST-COMMENT FROM MISSING PART

--
QueryStmt
+-output_column_list=
| +-$graph_table.a#17 AS a [INT64]
| +-$graph_table.b#18 AS b [INT64]
| +-$graph_table.total#19 AS total [UINT64]
| +-$graph_table.givers#20 AS givers [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[a#17, b#18, total#19, givers#20]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[a#17, b#18, total#19, givers#20]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[a#17, b#18, total#19, givers#20]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[a#17, b#18, total#19, givers#20]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.giver#5, $element_table.e#6, $path_scan.$tail#9, $element_table.b#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $element_table.giver#5, $element_table.e#6, $path_scan.$tail#9, $element_table.b#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.giver#5, $element_table.e#6, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.giver#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabel(parse_location=116-124, label=aml.Transfer)
                  | |   | | | | +-target_element_table_list=[aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element1#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=3)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.giver#2, array=$element_table.giver#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#4, array=$element_table.$element1#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-FilterScan
                  | +-column_list=$element_table.[a#1, giver#5, e#6, b#10]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[a#1, giver#5, e#6, b#10])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  |     +-ArrayAggregate
                  |     | +-type=BOOL
                  |     | +-array=
                  |     | | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.giver#5)
                  |     | +-element_column=$horizontal_aggregate.giver#11
                  |     | +-aggregate=
                  |     |   +-AggregateFunctionCall(ZetaSQL:logical_and(BOOL) -> BOOL)
                  |     |     +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     |       +-GraphGetElementProperty
                  |     |       | +-type=INT64
                  |     |       | +-expr=
                  |     |       | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$horizontal_aggregate.giver#11)
                  |     |       | +-property=id(INT64)
                  |     |       +-Literal(type=INT64, value=50)
                  |     +-FunctionCall(ZetaSQL:$greater(DOUBLE, DOUBLE) -> BOOL)
                  |       +-ArrayAggregate
                  |       | +-type=DOUBLE
                  |       | +-array=
                  |       | | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |       | +-element_column=$horizontal_aggregate.e#12
                  |       | +-aggregate=
                  |       |   +-AggregateFunctionCall(ZetaSQL:avg(UINT64) -> DOUBLE)
                  |       |     +-GraphGetElementProperty
                  |       |       +-type=UINT64
                  |       |       +-expr=
                  |       |       | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$horizontal_aggregate.e#12)
                  |       |       +-property=amount(UINT64)
                  |       +-Literal(type=DOUBLE, value=50)
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.giver#5, $element_table.e#6, $element_table.b#10, $graph_table.total#14]
                  | +-expr_list=
                  | | +-total#14 :=
                  | |   +-ArrayAggregate
                  | |     +-type=UINT64
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>, column=$element_table.e#6)
                  | |     +-element_column=$horizontal_aggregate.e#13
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  | |         +-GraphGetElementProperty
                  | |           +-type=UINT64
                  | |           +-expr=
                  | |           | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$horizontal_aggregate.e#13)
                  | |           +-property=amount(UINT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[a#1, giver#5, e#6, b#10])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.giver#5, $element_table.e#6, $element_table.b#10, $graph_table.total#14, $graph_table.givers#16]
                  | +-expr_list=
                  | | +-givers#16 :=
                  | |   +-ArrayAggregate
                  | |     +-type=ARRAY<INT64>
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$element_table.giver#5)
                  | |     +-element_column=$horizontal_aggregate.giver#15
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
                  | |         +-GraphGetElementProperty
                  | |           +-type=INT64
                  | |           +-expr=
                  | |           | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$horizontal_aggregate.giver#15)
                  | |           +-property=id(INT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.giver#5, $element_table.e#6, $element_table.b#10, $graph_table.total#14])
                  +-ProjectScan
                    +-column_list=$graph_table.[a#17, b#18, total#19, givers#20]
                    +-expr_list=
                    | +-a#17 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    | |   +-property=id(INT64)
                    | +-b#18 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#10)
                    | |   +-property=id(INT64)
                    | +-total#19 := ColumnRef(type=UINT64, column=$graph_table.total#14)
                    | +-givers#20 := ColumnRef(type=ARRAY<INT64>, column=$graph_table.givers#16)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.giver#5, $element_table.e#6, $element_table.b#10, $graph_table.total#14, $graph_table.givers#16])
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+ORDER_BY_IN_AGGREGATE{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]

# Querying aml_multi since there's just one node table
SELECT * FROM GRAPH_TABLE(
  aml_multi
  MATCH (head)((a)-[e]->(b)){1,3}(tail)
  FILTER ARRAY_LENGTH(a) < 100
  LET x = STRING_AGG(a.value, ", "),
      y = STRING_AGG(e.value, ""),
      z = STRING_AGG(b.value, "-")
  RETURN head.value as head, CONCAT(x, y, z) as values
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.head#17 AS head [STRING]
| +-$graph_table.values#18 AS values [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[head#17, values#18]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[head#17, values#18]
        +-property_graph=aml_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[head#17, values#18]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[head#17, values#18]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.head#1, $path_scan.$head#8, $element_table.a#5, $element_table.e#6, $element_table.b#7, $path_scan.$tail#9, $element_table.tail#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.head#1, $path_scan.$head#8, $element_table.a#5, $element_table.e#6, $element_table.b#7, $path_scan.$tail#9, $element_table.tail#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.head#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_multi.Entity]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.a#5, $element_table.e#6, $element_table.b#7, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.a#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml_multi.Entity]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml_multi.Relation]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.b#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml_multi.Entity]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=3)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.a#2, array=$element_table.a#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.b#4, array=$element_table.b#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.tail#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_multi.Entity]
                  | |   +-head=$element_table.head#1
                  | |   +-tail=$element_table.tail#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-FilterScan
                  | +-column_list=$element_table.[head#1, a#5, e#6, b#7, tail#10]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[head#1, a#5, e#6, b#7, tail#10])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
                  |     +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml_multi)<value STRING>>) -> INT64)
                  |     | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml_multi)<value STRING>>, column=$element_table.a#5)
                  |     +-Literal(type=INT64, value=100)
                  +-ProjectScan
                  | +-column_list=[$element_table.head#1, $element_table.a#5, $element_table.e#6, $element_table.b#7, $element_table.tail#10, $graph_table.x#12, $graph_table.y#14, $graph_table.z#16]
                  | +-expr_list=
                  | | +-x#12 :=
                  | | | +-ArrayAggregate
                  | | |   +-type=STRING
                  | | |   +-array=
                  | | |   | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml_multi)<value STRING>>, column=$element_table.a#5)
                  | | |   +-element_column=$horizontal_aggregate.a#11
                  | | |   +-aggregate=
                  | | |     +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
                  | | |       +-GraphGetElementProperty
                  | | |       | +-type=STRING
                  | | |       | +-expr=
                  | | |       | | +-ColumnRef(type=GRAPH_NODE(aml_multi)<value STRING>, column=$horizontal_aggregate.a#11)
                  | | |       | +-property=value(STRING)
                  | | |       +-Literal(type=STRING, value=", ")
                  | | +-y#14 :=
                  | | | +-ArrayAggregate
                  | | |   +-type=STRING
                  | | |   +-array=
                  | | |   | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml_multi)<value STRING>>, column=$element_table.e#6)
                  | | |   +-element_column=$horizontal_aggregate.e#13
                  | | |   +-aggregate=
                  | | |     +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
                  | | |       +-GraphGetElementProperty
                  | | |       | +-type=STRING
                  | | |       | +-expr=
                  | | |       | | +-ColumnRef(type=GRAPH_EDGE(aml_multi)<value STRING>, column=$horizontal_aggregate.e#13)
                  | | |       | +-property=value(STRING)
                  | | |       +-Literal(type=STRING, value="")
                  | | +-z#16 :=
                  | |   +-ArrayAggregate
                  | |     +-type=STRING
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml_multi)<value STRING>>, column=$element_table.b#7)
                  | |     +-element_column=$horizontal_aggregate.b#15
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
                  | |         +-GraphGetElementProperty
                  | |         | +-type=STRING
                  | |         | +-expr=
                  | |         | | +-ColumnRef(type=GRAPH_NODE(aml_multi)<value STRING>, column=$horizontal_aggregate.b#15)
                  | |         | +-property=value(STRING)
                  | |         +-Literal(type=STRING, value="-")
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[head#1, a#5, e#6, b#7, tail#10])
                  +-ProjectScan
                    +-column_list=$graph_table.[head#17, values#18]
                    +-expr_list=
                    | +-head#17 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml_multi)<value STRING>, column=$element_table.head#1)
                    | |   +-property=value(STRING)
                    | +-values#18 :=
                    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
                    |     +-ColumnRef(type=STRING, column=$graph_table.x#12)
                    |     +-ColumnRef(type=STRING, column=$graph_table.y#14)
                    |     +-ColumnRef(type=STRING, column=$graph_table.z#16)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.head#1, $element_table.a#5, $element_table.e#6, $element_table.b#7, $element_table.tail#10, $graph_table.x#12, $graph_table.y#14, $graph_table.z#16])

==

# (b/337082533): Quantified path with empty RHS join_expr
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH -[e]->{3}((a IS Person)((b IS Account)))
  COLUMNS(1 AS one)
  )
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#11 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#11]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.a#9, $element_table.b#10]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.a#9, $element_table.b#10]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       | | +-column_list=$path_scan.[$head#7, $tail#8]
        |       | | +-input_scan_list=
        |       | | | +-GraphNodeScan
        |       | | | | +-column_list=[$element_table.$element1#1]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | | +-GraphEdgeScan
        |       | | | | +-column_list=[$element_table.e#2]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | | | +-orientation=RIGHT
        |       | | | +-GraphNodeScan
        |       | | |   +-column_list=[$element_table.$element2#3]
        |       | | |   +-label_expr=
        |       | | |   | +-GraphLabelNaryExpr
        |       | | |   |   +-op=OR
        |       | | |   |   +-operand_list=
        |       | | |   |     +-GraphWildCardLabel
        |       | | |   |     +-GraphLabelNaryExpr
        |       | | |   |       +-op=NOT
        |       | | |   |       +-operand_list=
        |       | | |   |         +-GraphWildCardLabel
        |       | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | +-head=$path_scan.$head#7
        |       | | +-tail=$path_scan.$tail#8
        |       | | +-quantifier=
        |       | | | +-GraphPathPatternQuantifier
        |       | | |   +-lower_bound=
        |       | | |   | +-Literal(type=INT64, value=3)
        |       | | |   +-upper_bound=
        |       | | |     +-Literal(type=INT64, value=3)
        |       | | +-group_variable_list=
        |       | |   +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
        |       | +-GraphPathScan
        |       |   +-column_list=$element_table.[a#9, b#10]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.a#9]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabel(parse_location=59-65, label=aml.Person)
        |       |   | | +-target_element_table_list=[aml.Person]
        |       |   | +-GraphPathScan
        |       |   |   +-column_list=[$element_table.b#10]
        |       |   |   +-input_scan_list=
        |       |   |   | +-GraphNodeScan
        |       |   |   |   +-column_list=[$element_table.b#10]
        |       |   |   |   +-label_expr=
        |       |   |   |   | +-GraphLabel(parse_location=73-80, label=aml.Account)
        |       |   |   |   +-target_element_table_list=[aml.Account]
        |       |   |   +-head=$element_table.b#10
        |       |   |   +-tail=$element_table.b#10
        |       |   +-head=$element_table.a#9
        |       |   +-tail=$element_table.b#10
        |       +-head=$path_scan.$head#7
        |       +-tail=$element_table.b#10
        +-shape_expr_list=
          +-one#11 := Literal(type=INT64, value=1)
==

# (b/337082533): Quantified path with empty element label set
SELECT one FROM GRAPH_TABLE(
  aml
  MATCH ((a IS !%)-[e]->(b)){1, 5}
  COLUMNS(1 AS one)
  )
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#9 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#9]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$path_scan.[$head#7, $tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$path_scan.[$head#7, $tail#8]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-parse_location=50-52
        |       | | |   +-op=NOT
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel(parse_location=51-52)
        |       | | +-target_element_table_list=[]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.e#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.b#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-quantifier=
        |       | +-GraphPathPatternQuantifier
        |       |   +-lower_bound=
        |       |   | +-Literal(type=INT64, value=1)
        |       |   +-upper_bound=
        |       |     +-Literal(type=INT64, value=5)
        |       +-group_variable_list=
        |         +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |         +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
        |         +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
        +-shape_expr_list=
          +-one#9 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+UNNEST_AND_FLATTEN_ARRAYS]
# Flattening group variable
select gt.* from
graph_table(aml
  match -[e]->{1, 3}
  let amounts = FLATTEN(e.amount)
  return amounts, FLATTEN(e.amount) as amounts2
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.amounts#10 AS amounts [ARRAY<UINT64>]
| +-$graph_table.amounts2#11 AS amounts2 [ARRAY<UINT64>]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[amounts#10, amounts2#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[amounts#10, amounts2#11]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[amounts#10, amounts2#11]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[amounts#10, amounts2#11]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$path_scan.$head#7
                  | |   +-tail=$path_scan.$tail#8
                  | |   +-quantifier=
                  | |   | +-GraphPathPatternQuantifier
                  | |   |   +-lower_bound=
                  | |   |   | +-Literal(type=INT64, value=1)
                  | |   |   +-upper_bound=
                  | |   |     +-Literal(type=INT64, value=3)
                  | |   +-group_variable_list=
                  | |     +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
                  | |     +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
                  | |     +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.e#5, $graph_table.amounts#9]
                  | +-expr_list=
                  | | +-amounts#9 :=
                  | |   +-Flatten
                  | |     +-type=ARRAY<UINT64>
                  | |     +-expr=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5)
                  | |     +-get_field_list=
                  | |       +-GraphGetElementProperty
                  | |         +-type=UINT64
                  | |         +-expr=
                  | |         | +-FlattenedArg(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                  | |         +-property=amount(UINT64)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.e#5])
                  +-ProjectScan
                    +-column_list=$graph_table.[amounts#10, amounts2#11]
                    +-expr_list=
                    | +-amounts#10 := ColumnRef(type=ARRAY<UINT64>, column=$graph_table.amounts#9)
                    | +-amounts2#11 :=
                    |   +-Flatten
                    |     +-type=ARRAY<UINT64>
                    |     +-expr=
                    |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5)
                    |     +-get_field_list=
                    |       +-GraphGetElementProperty
                    |         +-type=UINT64
                    |         +-expr=
                    |         | +-FlattenedArg(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                    |         +-property=amount(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.e#5, $graph_table.amounts#9])
==

# Quantified paths implicitly exposing group variables through optional columns
SELECT ARRAY_LENGTH(e) AS e_arr
  from graph_table(
    aml
    match ((a:Account)-[e:Transfer]->(b:Account)){3}
  )
--

QueryStmt
+-output_column_list=
| +-$query.e_arr#9 AS e_arr [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.e_arr#9]
    +-expr_list=
    | +-e_arr#9 :=
    |   +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>) -> INT64)
    |     +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>>, column=$element_table.e#5)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$element_table.[a#4, e#5, b#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=[$path_scan.$head#7, $element_table.a#4, $element_table.e#5, $element_table.b#6, $path_scan.$tail#8]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=[$path_scan.$head#7, $element_table.a#4, $element_table.e#5, $element_table.b#6, $path_scan.$tail#8]
                +-input_scan_list=
                | +-GraphNodeScan
                | | +-column_list=[$element_table.a#1]
                | | +-label_expr=
                | | | +-GraphLabel(parse_location=74-81, label=aml.Account)
                | | +-target_element_table_list=[aml.Account]
                | +-GraphEdgeScan
                | | +-column_list=[$element_table.e#2]
                | | +-label_expr=
                | | | +-GraphLabel(parse_location=86-94, label=aml.Transfer)
                | | +-target_element_table_list=[aml.Transfer]
                | | +-orientation=RIGHT
                | +-GraphNodeScan
                |   +-column_list=[$element_table.b#3]
                |   +-label_expr=
                |   | +-GraphLabel(parse_location=100-107, label=aml.Account)
                |   +-target_element_table_list=[aml.Account]
                +-head=$path_scan.$head#7
                +-tail=$path_scan.$tail#8
                +-quantifier=
                | +-GraphPathPatternQuantifier
                |   +-lower_bound=
                |   | +-Literal(type=INT64, value=3)
                |   +-upper_bound=
                |     +-Literal(type=INT64, value=3)
                +-group_variable_list=
                  +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
                  +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
                  +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
==

# Leading path to quantified path with optional columns
SELECT ARRAY_LENGTH(e) AS e_arr
  from graph_table(
    aml
    match (x)-[y]->(z)((a)-[e]->(b)){3}
  )
--
QueryStmt
+-output_column_list=
| +-$query.e_arr#12 AS e_arr [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.e_arr#12]
    +-expr_list=
    | +-e_arr#12 :=
    |   +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
    |     +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#8)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$element_table.[x#1, y#2, z#3, a#7, e#8, b#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=[$element_table.x#1, $element_table.y#2, $element_table.z#3, $path_scan.$head#10, $element_table.a#7, $element_table.e#8, $element_table.b#9, $path_scan.$tail#11]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=[$element_table.x#1, $element_table.y#2, $element_table.z#3, $path_scan.$head#10, $element_table.a#7, $element_table.e#8, $element_table.b#9, $path_scan.$tail#11]
                +-input_scan_list=
                | +-GraphNodeScan
                | | +-column_list=[$element_table.x#1]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                | +-GraphEdgeScan
                | | +-column_list=[$element_table.y#2]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                | | +-orientation=RIGHT
                | +-GraphNodeScan
                | | +-column_list=[$element_table.z#3]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                | +-GraphPathScan
                |   +-column_list=[$path_scan.$head#10, $element_table.a#7, $element_table.e#8, $element_table.b#9, $path_scan.$tail#11]
                |   +-input_scan_list=
                |   | +-GraphNodeScan
                |   | | +-column_list=[$element_table.a#4]
                |   | | +-label_expr=
                |   | | | +-GraphLabelNaryExpr
                |   | | |   +-op=OR
                |   | | |   +-operand_list=
                |   | | |     +-GraphWildCardLabel
                |   | | |     +-GraphLabelNaryExpr
                |   | | |       +-op=NOT
                |   | | |       +-operand_list=
                |   | | |         +-GraphWildCardLabel
                |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                |   | +-GraphEdgeScan
                |   | | +-column_list=[$element_table.e#5]
                |   | | +-label_expr=
                |   | | | +-GraphLabelNaryExpr
                |   | | |   +-op=OR
                |   | | |   +-operand_list=
                |   | | |     +-GraphWildCardLabel
                |   | | |     +-GraphLabelNaryExpr
                |   | | |       +-op=NOT
                |   | | |       +-operand_list=
                |   | | |         +-GraphWildCardLabel
                |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                |   | | +-orientation=RIGHT
                |   | +-GraphNodeScan
                |   |   +-column_list=[$element_table.b#6]
                |   |   +-label_expr=
                |   |   | +-GraphLabelNaryExpr
                |   |   |   +-op=OR
                |   |   |   +-operand_list=
                |   |   |     +-GraphWildCardLabel
                |   |   |     +-GraphLabelNaryExpr
                |   |   |       +-op=NOT
                |   |   |       +-operand_list=
                |   |   |         +-GraphWildCardLabel
                |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                |   +-head=$path_scan.$head#10
                |   +-tail=$path_scan.$tail#11
                |   +-quantifier=
                |   | +-GraphPathPatternQuantifier
                |   |   +-lower_bound=
                |   |   | +-Literal(type=INT64, value=3)
                |   |   +-upper_bound=
                |   |     +-Literal(type=INT64, value=3)
                |   +-group_variable_list=
                |     +-GraphMakeArrayVariable(element=$element_table.a#4, array=$element_table.a#7)
                |     +-GraphMakeArrayVariable(element=$element_table.e#5, array=$element_table.e#8)
                |     +-GraphMakeArrayVariable(element=$element_table.b#6, array=$element_table.b#9)
                +-head=$element_table.x#1
                +-tail=$path_scan.$tail#11
==

# (b/342415537): Make sure the first column after the quantified path does not
# accidentally map to an internal $cost column
SELECT 1 FROM (
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (x)((a)-[b]->(c)){1, 3}(y)
  ))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#11 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#11]
    +-expr_list=
    | +-$col1#11 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=$element_table.[x#1, a#5, b#6, c#7, y#10]
        +-input_scan=
          +-GraphTableScan
            +-column_list=$element_table.[x#1, a#5, b#6, c#7, y#10]
            +-property_graph=aml
            +-input_scan=
              +-GraphScan
                +-column_list=[$element_table.x#1, $path_scan.$head#8, $element_table.a#5, $element_table.b#6, $element_table.c#7, $path_scan.$tail#9, $element_table.y#10]
                +-input_scan_list=
                  +-GraphPathScan
                    +-column_list=[$element_table.x#1, $path_scan.$head#8, $element_table.a#5, $element_table.b#6, $element_table.c#7, $path_scan.$tail#9, $element_table.y#10]
                    +-input_scan_list=
                    | +-GraphNodeScan
                    | | +-column_list=[$element_table.x#1]
                    | | +-label_expr=
                    | | | +-GraphLabelNaryExpr
                    | | |   +-op=OR
                    | | |   +-operand_list=
                    | | |     +-GraphWildCardLabel
                    | | |     +-GraphLabelNaryExpr
                    | | |       +-op=NOT
                    | | |       +-operand_list=
                    | | |         +-GraphWildCardLabel
                    | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    | +-GraphPathScan
                    | | +-column_list=[$path_scan.$head#8, $element_table.a#5, $element_table.b#6, $element_table.c#7, $path_scan.$tail#9]
                    | | +-input_scan_list=
                    | | | +-GraphNodeScan
                    | | | | +-column_list=[$element_table.a#2]
                    | | | | +-label_expr=
                    | | | | | +-GraphLabelNaryExpr
                    | | | | |   +-op=OR
                    | | | | |   +-operand_list=
                    | | | | |     +-GraphWildCardLabel
                    | | | | |     +-GraphLabelNaryExpr
                    | | | | |       +-op=NOT
                    | | | | |       +-operand_list=
                    | | | | |         +-GraphWildCardLabel
                    | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    | | | +-GraphEdgeScan
                    | | | | +-column_list=[$element_table.b#3]
                    | | | | +-label_expr=
                    | | | | | +-GraphLabelNaryExpr
                    | | | | |   +-op=OR
                    | | | | |   +-operand_list=
                    | | | | |     +-GraphWildCardLabel
                    | | | | |     +-GraphLabelNaryExpr
                    | | | | |       +-op=NOT
                    | | | | |       +-operand_list=
                    | | | | |         +-GraphWildCardLabel
                    | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                    | | | | +-orientation=RIGHT
                    | | | +-GraphNodeScan
                    | | |   +-column_list=[$element_table.c#4]
                    | | |   +-label_expr=
                    | | |   | +-GraphLabelNaryExpr
                    | | |   |   +-op=OR
                    | | |   |   +-operand_list=
                    | | |   |     +-GraphWildCardLabel
                    | | |   |     +-GraphLabelNaryExpr
                    | | |   |       +-op=NOT
                    | | |   |       +-operand_list=
                    | | |   |         +-GraphWildCardLabel
                    | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    | | +-head=$path_scan.$head#8
                    | | +-tail=$path_scan.$tail#9
                    | | +-quantifier=
                    | | | +-GraphPathPatternQuantifier
                    | | |   +-lower_bound=
                    | | |   | +-Literal(type=INT64, value=1)
                    | | |   +-upper_bound=
                    | | |     +-Literal(type=INT64, value=3)
                    | | +-group_variable_list=
                    | |   +-GraphMakeArrayVariable(element=$element_table.a#2, array=$element_table.a#5)
                    | |   +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
                    | |   +-GraphMakeArrayVariable(element=$element_table.c#4, array=$element_table.c#7)
                    | +-GraphNodeScan
                    |   +-column_list=[$element_table.y#10]
                    |   +-label_expr=
                    |   | +-GraphLabelNaryExpr
                    |   |   +-op=OR
                    |   |   +-operand_list=
                    |   |     +-GraphWildCardLabel
                    |   |     +-GraphLabelNaryExpr
                    |   |       +-op=NOT
                    |   |       +-operand_list=
                    |   |         +-GraphWildCardLabel
                    |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    +-head=$element_table.x#1
                    +-tail=$element_table.y#10
