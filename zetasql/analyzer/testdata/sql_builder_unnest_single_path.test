[default language_features=NONE,+UNNEST_AND_FLATTEN_ARRAYS,+SINGLE_TABLE_NAME_ARRAY_PATH]
[default show_sqlbuilder_output]
[default no_show_resolved_ast]

# Path expression pattern: table.array
select *
from ArrayTypes.ProtoArray
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2.int32_val1 AS int32_val1,
  a_2.int32_val2 AS int32_val2,
  a_2.str_value AS str_value
FROM
  ArrayTypes.ProtoArray AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  ArrayTypes.ProtoArray AS a_2
|> SELECT
     a_2.int32_val1 AS int32_val1,
     a_2.int32_val2 AS int32_val2,
     a_2.str_value AS str_value;
==

# Path expression pattern: table.proto.array
SELECT * FROM TestTable.KitchenSink.repeated_int32_val AS e
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS e
FROM
  TestTable.KitchenSink.repeated_int32_val AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable.KitchenSink.repeated_int32_val AS a_2
|> SELECT
     a_2 AS e;
==

# Path expression pattern:
#   table.struct.array
SELECT 1 FROM StructWithKitchenSinkTable.t.b
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_3
FROM
  StructWithKitchenSinkTable.t.b AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  StructWithKitchenSinkTable.t.b AS a_2
|> SELECT
     1 AS a_3;
==

# Path expression pattern: table.array.json_field
select *
from ArrayTypes.JsonArray.json_field
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS json_field
FROM
  ArrayTypes.JsonArray.json_field AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  ArrayTypes.JsonArray.json_field AS a_2
|> SELECT
     a_2 AS json_field;
==

# Path expression pattern:
#   table.array.has_field
#   table.array.field
# The resolved AST contains FLATTEN with a field list of a single FlattenedArg.
select *
from ArrayTypes.ProtoArray.{{has_int32_val1|int32_val1}}
--
ALTERNATION GROUP: has_int32_val1
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS has_int32_val1
FROM
  ArrayTypes.ProtoArray.has_int32_val1 AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  ArrayTypes.ProtoArray.has_int32_val1 AS a_2
|> SELECT
     a_2 AS has_int32_val1;
--
ALTERNATION GROUP: int32_val1
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS int32_val1
FROM
  ArrayTypes.ProtoArray.int32_val1 AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  ArrayTypes.ProtoArray.int32_val1 AS a_2
|> SELECT
     a_2 AS int32_val1;
==

# Path expression pattern:
#   table.proto.array.array.field
# The resolved AST contains FLATTEN with a field list of multiple FlattenedArgs.
select *
from TestTable.KitchenSink.repeated_holder.repeated_field.int32_val1 value
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS value
FROM
  TestTable.KitchenSink.repeated_holder.repeated_field.int32_val1 AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable.KitchenSink.repeated_holder.repeated_field.int32_val1 AS a_2
|> SELECT
     a_2 AS value;
==

# Path expression pattern:
#   table.proto.field.array.field
[show_resolved_ast]
select *
from TestTable.KitchenSink.optional_group.OptionalGroupNested.int64_val;
--
QueryStmt
+-output_column_list=
| +-$array.int64_val#4 AS int64_val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$array.int64_val#4]
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.int64_val#4]
        +-node_source="single_table_array_name_path"
        +-input_scan=
        | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-array_expr_list=
        | +-Flatten
        |   +-type=ARRAY<INT64>
        |   +-expr=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<PROTO<zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested>>
        |   |   +-expr=
        |   |   | +-GetProtoField
        |   |   |   +-type=PROTO<zetasql_test__.KitchenSinkPB.OptionalGroup>
        |   |   |   +-expr=
        |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   |   +-field_descriptor=optional_group
        |   |   |   +-default_value=NULL
        |   |   +-field_descriptor=optionalgroupnested
        |   |   +-default_value=[]
        |   +-get_field_list=
        |     +-GetProtoField
        |       +-type=INT64
        |       +-expr=
        |       | +-FlattenedArg(type=PROTO<zetasql_test__.KitchenSinkPB.OptionalGroup.OptionalGroupNested>)
        |       +-field_descriptor=int64_val
        +-element_column_list=[$array.int64_val#4]

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS int64_val
FROM
  TestTable.KitchenSink.optional_group.optionalgroupnested.int64_val AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable.KitchenSink.optional_group.optionalgroupnested.int64_val AS a_2
|> SELECT
     a_2 AS int64_val;
==

# Path expression pattern that is arbitrary long:
#   table.proto.array.array.array.field.array.field
select value
from RecursivePBTable.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val value
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS value
FROM
  RecursivePBTable.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  RecursivePBTable.RecursivePB.repeated_recursive_pb.repeated_recursive_pb.repeated_recursive_pb.recursive_pb.repeated_recursive_pb.int64_val AS a_2
|> SELECT
     a_2 AS value;
==

# Table name array path expression FROM clause nested under a subquery.
SELECT {{*|original_alias}} FROM (
 SELECT *
 FROM TestTable.KitchenSink.repeated_int32_val AS original_alias
)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS original_alias
FROM
  TestTable.KitchenSink.repeated_int32_val AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable.KitchenSink.repeated_int32_val AS a_2
|> SELECT
     a_2 AS original_alias;
==

# This is to demontrate that this feature does not work with correlated subquery.
# So SQL builder should not output a single correlated array path expression in
# FROM clause.
select (select e from KeyValue, subq.KitchenSink.nested_repeated_value.nested_repeated_int64 AS e)
from (select KitchenSink from TestTable) subq
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      a_5 AS a_5
    FROM
      (
        SELECT
          NULL
        FROM
          KeyValue
      ) AS keyvalue_4
      JOIN
      UNNEST(FLATTEN((projectscan_2.a_1.nested_repeated_value).nested_repeated_int64)) AS a_5
  ) AS a_3
FROM
  (
    SELECT
      TestTable.KitchenSink AS a_1
    FROM
      TestTable
  ) AS projectscan_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.KitchenSink AS a_1
|> AS projectscan_2
|> SELECT
     (
       FROM
         KeyValue
       |> SELECT
            NULL
       |> AS keyvalue_4
       |> JOIN
          UNNEST(FLATTEN((projectscan_2.a_1.nested_repeated_value).nested_repeated_int64)) AS a_5
       |> SELECT
            a_5 AS a_5
     ) AS a_3;
==

# This is to demonstrate that this feature does not work with correlated subquery.
# So SQL builder should not output a single correlated array path expression in
# FROM clause.
[show_resolved_ast]
select *
from TestTable
where EXISTS(select 1 from TestTable.KitchenSink.repeated_int32_val)
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
    +-input_scan=
      +-FilterScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-input_scan=
        | +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-parameter_list=
            | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            +-subquery=
              +-ProjectScan
                +-column_list=[$expr_subquery.$col1#5]
                +-expr_list=
                | +-$col1#5 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-ArrayScan
                    +-array_expr_list=
                    | +-GetProtoField
                    |   +-type=ARRAY<INT32>
                    |   +-expr=
                    |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3, is_correlated=TRUE)
                    |   +-field_descriptor=repeated_int32_val
                    |   +-default_value=[]
                    +-element_column_list=[$array.repeated_int32_val#4]

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  TestTable.key AS key,
  TestTable.TestEnum AS TestEnum,
  TestTable.KitchenSink AS KitchenSink
FROM
  TestTable
WHERE
  EXISTS(
    SELECT
      1 AS a_5
    FROM
      UNNEST(TestTable.KitchenSink.repeated_int32_val) AS a_4
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> WHERE
     EXISTS(
       FROM
         UNNEST(TestTable.KitchenSink.repeated_int32_val) AS a_4
       |> SELECT
            1 AS a_5
     )
|> SELECT
     TestTable.key AS key,
     TestTable.TestEnum AS TestEnum,
     TestTable.KitchenSink AS KitchenSink;
==

# Path expression pattern:
#   catalog.table.proto.field.array
# Java does not support recursive catalog.
# SQL builder does not support building fully qualified table path that starts
# from the root catalog.
[no_java]
select ri
from recursive_catalog.recursive_catalog.TestTable.KitchenSink.nested_value.nested_repeated_int64 ri;
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2 AS ri
FROM
  TestTable.KitchenSink.nested_value.nested_repeated_int64 AS a_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable.KitchenSink.nested_value.nested_repeated_int64 AS a_2
|> SELECT
     a_2 AS ri;
==

