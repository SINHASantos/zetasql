[default language_features=NONE]
[default no_test_extract_table_names]
[default show_sqlbuilder_output]

################################################################################
# Element Table
#  1. table identifiers must be globally unique in the graph
#  2. input table must exist in the catalog and have primary key defined
#  3. element table keys must be explicitly defined or the table should have
#     primay keys defined in catalog.
#  4. edge table must have source/destination references and node table cannot
#  5. referenced node table must have been defined, edge table columns and referenced
#     node table columns must exist
# NOTE:
#  - if no alias is specified, identifier of a Table defaults to table name
################################################################################
# Create a property graph with one NodeTable.
create {{|or replace}} property graph {{|if not exists}} catalog.aml
{{|options(opt1='v1', opt2='v2')}} node tables(person)
--
ALTERNATION GROUP: <empty>
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=813-813
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=813-813
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=813-813
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=813-813
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=813-813
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=813-813
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=813-813
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=813-813, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=813-813, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=813-813, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=813-813, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=813-813, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=813-813, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=813-813, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=813-813, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
--
ALTERNATION GROUP: options(opt1='v1', opt2='v2')
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=842-842
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=842-842
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=842-842
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=842-842
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=842-842
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=842-842
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=842-842
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=842-842, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
| +-GraphPropertyDeclaration(parse_location=842-842, name="id", type=INT64)
| +-GraphPropertyDeclaration(parse_location=842-842, name="name", type=STRING)
| +-GraphPropertyDeclaration(parse_location=842-842, name="gender", type=STRING)
| +-GraphPropertyDeclaration(parse_location=842-842, name="birthday", type=DATE)
| +-GraphPropertyDeclaration(parse_location=842-842, name="email", type=STRING)
| +-GraphPropertyDeclaration(parse_location=842-842, name="age", type=UINT32)
| +-GraphPropertyDeclaration(parse_location=842-842, name="data", type=BYTES)
+-option_list=
  +-opt1 := Literal(type=STRING, value="v1")
  +-opt2 := Literal(type=STRING, value="v2")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
OPTIONS(opt1 = "v1", opt2 = "v2")
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
OPTIONS(opt1 = "v1", opt2 = "v2")
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
--
ALTERNATION GROUP: if not exists,
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-create_mode=CREATE_IF_NOT_EXISTS
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=826-826
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=826-826
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=826-826
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=826-826
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=826-826
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=826-826
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=826-826
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=826-826, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=826-826, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=826-826, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=826-826, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=826-826, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=826-826, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=826-826, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=826-826, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH IF NOT EXISTS catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH IF NOT EXISTS catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
--
ALTERNATION GROUP: if not exists,options(opt1='v1', opt2='v2')
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-create_mode=CREATE_IF_NOT_EXISTS
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=855-855
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=855-855
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=855-855
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=855-855
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=855-855
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=855-855
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=855-855
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=855-855, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
| +-GraphPropertyDeclaration(parse_location=855-855, name="id", type=INT64)
| +-GraphPropertyDeclaration(parse_location=855-855, name="name", type=STRING)
| +-GraphPropertyDeclaration(parse_location=855-855, name="gender", type=STRING)
| +-GraphPropertyDeclaration(parse_location=855-855, name="birthday", type=DATE)
| +-GraphPropertyDeclaration(parse_location=855-855, name="email", type=STRING)
| +-GraphPropertyDeclaration(parse_location=855-855, name="age", type=UINT32)
| +-GraphPropertyDeclaration(parse_location=855-855, name="data", type=BYTES)
+-option_list=
  +-opt1 := Literal(type=STRING, value="v1")
  +-opt2 := Literal(type=STRING, value="v2")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH IF NOT EXISTS catalog.aml
OPTIONS(opt1 = "v1", opt2 = "v2")
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH IF NOT EXISTS catalog.aml
OPTIONS(opt1 = "v1", opt2 = "v2")
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
--
ALTERNATION GROUP: or replace,,
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-create_mode=CREATE_OR_REPLACE
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=823-823
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=823-823
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=823-823
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=823-823
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=823-823
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=823-823
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=823-823
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=823-823, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=823-823, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=823-823, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=823-823, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=823-823, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=823-823, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=823-823, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=823-823, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE OR REPLACE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE OR REPLACE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
--
ALTERNATION GROUP: or replace,,options(opt1='v1', opt2='v2')
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-create_mode=CREATE_OR_REPLACE
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=852-852
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=852-852
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=852-852
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=852-852
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=852-852
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=852-852
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=852-852
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=852-852, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
| +-GraphPropertyDeclaration(parse_location=852-852, name="id", type=INT64)
| +-GraphPropertyDeclaration(parse_location=852-852, name="name", type=STRING)
| +-GraphPropertyDeclaration(parse_location=852-852, name="gender", type=STRING)
| +-GraphPropertyDeclaration(parse_location=852-852, name="birthday", type=DATE)
| +-GraphPropertyDeclaration(parse_location=852-852, name="email", type=STRING)
| +-GraphPropertyDeclaration(parse_location=852-852, name="age", type=UINT32)
| +-GraphPropertyDeclaration(parse_location=852-852, name="data", type=BYTES)
+-option_list=
  +-opt1 := Literal(type=STRING, value="v1")
  +-opt2 := Literal(type=STRING, value="v2")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE OR REPLACE PROPERTY GRAPH catalog.aml
OPTIONS(opt1 = "v1", opt2 = "v2")
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE OR REPLACE PROPERTY GRAPH catalog.aml
OPTIONS(opt1 = "v1", opt2 = "v2")
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
--
ALTERNATION GROUPS:
    or replace,if not exists,
    or replace,if not exists,options(opt1='v1', opt2='v2')
--
ERROR: CREATE PROPERTY GRAPH cannot have both OR REPLACE and IF NOT EXISTS [at 14:1]
create or replace property graph if not exists catalog.aml
^
==

# Create a property graph with multiple NodeTables from distinct underlying
# tables.
create property graph catalog.aml node tables(person, account)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[person]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=52-52
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[account]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=61-61
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Account.id#8)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=61-61
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Account.name#9)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|       +-parse_location=61-61
|       +-expr=
|       | +-ColumnRef(type=UINT64, column=Account.balance#10)
|       +-sql="balance"
|       +-property_declaration_name="balance"
+-label_list=
| +-GraphElementLabel(parse_location=52-52, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=61-61, name="account", property_declaration_name_list=[id, name, balance])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=52-52, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=52-52, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=52-52, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=52-52, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=52-52, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=52-52, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=52-52, name="data", type=BYTES)
  +-GraphPropertyDeclaration(parse_location=61-61, name="balance", type=UINT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id,
        name,
        balance)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id,
        name,
        balance)
  );
==

# Create a property graph with multiple NodeTables from distinct underlying
# tables with distinct aliases.
create property graph catalog.aml
node tables(person as p, account as acc)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="p"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[p]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=57-57
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=57-57
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=57-57
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=57-57
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=57-57
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=57-57
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=57-57
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="acc"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[acc]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=73-73
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Account.id#8)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=73-73
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Account.name#9)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|       +-parse_location=73-73
|       +-expr=
|       | +-ColumnRef(type=UINT64, column=Account.balance#10)
|       +-sql="balance"
|       +-property_declaration_name="balance"
+-label_list=
| +-GraphElementLabel(parse_location=57-57, name="p", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=73-73, name="acc", property_declaration_name_list=[id, name, balance])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=57-57, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=57-57, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=57-57, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=57-57, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=57-57, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=57-57, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=57-57, name="data", type=BYTES)
  +-GraphPropertyDeclaration(parse_location=73-73, name="balance", type=UINT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p
      KEY(id)
      LABEL p PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS acc
      KEY(id)
      LABEL acc PROPERTIES(
        id,
        name,
        balance)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p
      KEY(id)
      LABEL p PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS acc
      KEY(id)
      LABEL acc PROPERTIES(
        id,
        name,
        balance)
  );
==

# Create a property graph with multiple NodeTables from the same underlying
# table but distinct aliases. This is permitted.
create property graph catalog.aml
node tables(person as p1, person as p2, person as p3)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="p1"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[p1]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=58-58
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=58-58
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=58-58
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=58-58
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=58-58
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=58-58
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=58-58
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
| | +-alias="p2"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#8, name#9, gender#10, birthday#11, email#12, age#13, data#14], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#8)
| | +-label_name_list=[p2]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=72-72
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#8)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=72-72
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#9)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=72-72
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#10)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=72-72
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#11)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=72-72
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#12)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=72-72
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#13)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=72-72
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#14)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="p3"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#15, name#16, gender#17, birthday#18, email#19, age#20, data#21], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#15)
|   +-label_name_list=[p3]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=86-86
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#15)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=86-86
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#16)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=86-86
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#17)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=86-86
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#18)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=86-86
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#19)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=86-86
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#20)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=86-86
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#21)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=58-58, name="p1", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=72-72, name="p2", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=86-86, name="p3", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=58-58, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=58-58, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=58-58, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=58-58, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=58-58, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=58-58, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=58-58, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p1
      KEY(id)
      LABEL p1 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Person AS p2
      KEY(id)
      LABEL p2 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Person AS p3
      KEY(id)
      LABEL p3 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p1
      KEY(id)
      LABEL p1 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Person AS p2
      KEY(id)
      LABEL p2 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Person AS p3
      KEY(id)
      LABEL p3 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
==

# Create a property graph with multiple NodeTables and EdgeTables.
# Some referenced node tables inferred its keys from primary key.
# Edge's source/destination reference using node table alias
[show_sqlbuilder_output]
create property graph catalog.aml
node tables(person, account as acc)
edge tables(
  transfer as t key(TXNID)
  source key(fromAccountId) references acc(ID)
  destination key(toAccountId) references acc,
  personownaccount as own key(personId, accountId)
  source key(personId) references person(id)
  destination key(accountId) references acc)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[person]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=52-52
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=52-52
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="acc"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[acc]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=68-68
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Account.id#8)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=68-68
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Account.name#9)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|       +-parse_location=68-68
|       +-expr=
|       | +-ColumnRef(type=UINT64, column=Account.balance#10)
|       +-sql="balance"
|       +-property_declaration_name="balance"
+-edge_table_list=
| +-GraphElementTable
| | +-alias="t"
| | +-input_scan=
| | | +-TableScan(column_list=Transfer.[txnId#11, fromAccountId#12, toAccountId#13, time#14, amount#15], table=Transfer, column_index_list=[0, 1, 2, 3, 4])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Transfer.txnId#11)
| | +-source_node_reference=
| | | +-GraphNodeTableReference
| | |   +-node_table_identifier="acc"
| | |   +-edge_table_column_list=
| | |   | +-ColumnRef(type=INT64, column=Transfer.fromAccountId#12)
| | |   +-node_table_column_list=
| | |     +-ColumnRef(type=INT64, column=Account.id#8)
| | +-dest_node_reference=
| | | +-GraphNodeTableReference
| | |   +-node_table_identifier="acc"
| | |   +-edge_table_column_list=
| | |   | +-ColumnRef(type=INT64, column=Transfer.toAccountId#13)
| | |   +-node_table_column_list=
| | |     +-ColumnRef(type=INT64, column=Account.id#8)
| | +-label_name_list=[t]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=202-202
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Transfer.txnId#11)
| |   | +-sql="txnId"
| |   | +-property_declaration_name="txnId"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=202-202
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Transfer.fromAccountId#12)
| |   | +-sql="fromAccountId"
| |   | +-property_declaration_name="fromAccountId"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=202-202
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Transfer.toAccountId#13)
| |   | +-sql="toAccountId"
| |   | +-property_declaration_name="toAccountId"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=202-202
| |   | +-expr=
| |   | | +-ColumnRef(type=TIMESTAMP, column=Transfer.time#14)
| |   | +-sql="time"
| |   | +-property_declaration_name="time"
| |   +-GraphPropertyDefinition
| |     +-parse_location=202-202
| |     +-expr=
| |     | +-ColumnRef(type=UINT64, column=Transfer.amount#15)
| |     +-sql="amount"
| |     +-property_declaration_name="amount"
| +-GraphElementTable
|   +-alias="own"
|   +-input_scan=
|   | +-TableScan(column_list=PersonOwnAccount.[personId#16, accountId#17, startDate#18], table=PersonOwnAccount, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#16)
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#17)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="person"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#16)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Person.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="acc"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#17)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[own]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=343-343
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#16)
|     | +-sql="personId"
|     | +-property_declaration_name="personId"
|     +-GraphPropertyDefinition
|     | +-parse_location=343-343
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#17)
|     | +-sql="accountId"
|     | +-property_declaration_name="accountId"
|     +-GraphPropertyDefinition
|       +-parse_location=343-343
|       +-expr=
|       | +-ColumnRef(type=TIMESTAMP, column=PersonOwnAccount.startDate#18)
|       +-sql="startDate"
|       +-property_declaration_name="startDate"
+-label_list=
| +-GraphElementLabel(parse_location=52-52, name="person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=68-68, name="acc", property_declaration_name_list=[id, name, balance])
| +-GraphElementLabel(parse_location=202-202, name="t", property_declaration_name_list=[txnId, fromAccountId, toAccountId, time, amount])
| +-GraphElementLabel(parse_location=343-343, name="own", property_declaration_name_list=[personId, accountId, startDate])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=52-52, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=52-52, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=52-52, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=52-52, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=52-52, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=52-52, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=52-52, name="data", type=BYTES)
  +-GraphPropertyDeclaration(parse_location=68-68, name="balance", type=UINT64)
  +-GraphPropertyDeclaration(parse_location=202-202, name="txnId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=202-202, name="fromAccountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=202-202, name="toAccountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=202-202, name="time", type=TIMESTAMP)
  +-GraphPropertyDeclaration(parse_location=202-202, name="amount", type=UINT64)
  +-GraphPropertyDeclaration(parse_location=343-343, name="personId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=343-343, name="accountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=343-343, name="startDate", type=TIMESTAMP)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS acc
      KEY(id)
      LABEL acc PROPERTIES(
        id,
        name,
        balance)
  )
  EDGE TABLES(
    Transfer AS t
      KEY(txnId)
      SOURCE KEY(fromAccountId) REFERENCES acc(id)
      DESTINATION KEY(toAccountId) REFERENCES acc(id)
      LABEL t PROPERTIES(
        txnId,
        fromAccountId,
        toAccountId,
        time,
        amount),

    PersonOwnAccount AS own
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES person(id)
      DESTINATION KEY(accountId) REFERENCES acc(id)
      LABEL own PROPERTIES(
        personId,
        accountId,
        startDate)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS acc
      KEY(id)
      LABEL acc PROPERTIES(
        id,
        name,
        balance)
  )
  EDGE TABLES(
    Transfer AS t
      KEY(txnId)
      SOURCE KEY(fromAccountId) REFERENCES acc(id)
      DESTINATION KEY(toAccountId) REFERENCES acc(id)
      LABEL t PROPERTIES(
        txnId,
        fromAccountId,
        toAccountId,
        time,
        amount),

    PersonOwnAccount AS own
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES person(id)
      DESTINATION KEY(accountId) REFERENCES acc(id)
      LABEL own PROPERTIES(
        personId,
        accountId,
        startDate)
  );
==

# Schema prefixed node table
[no_run_sqlbuilder]
create property graph catalog.aml node tables(pg.place key(zip))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="place"
|   +-input_scan=
|   | +-TableScan(column_list=Place.[city#1, country#2, zip#3], table=pg.Place, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=STRING, column=Place.zip#3)
|   +-label_name_list=[place]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Place.city#1)
|     | +-sql="city"
|     | +-property_declaration_name="city"
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Place.country#2)
|     | +-sql="country"
|     | +-property_declaration_name="country"
|     +-GraphPropertyDefinition
|       +-parse_location=63-63
|       +-expr=
|       | +-ColumnRef(type=STRING, column=Place.zip#3)
|       +-sql="zip"
|       +-property_declaration_name="zip"
+-label_list=
| +-GraphElementLabel(parse_location=63-63, name="place", property_declaration_name_list=[city, country, zip])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=63-63, name="city", type=STRING)
  +-GraphPropertyDeclaration(parse_location=63-63, name="country", type=STRING)
  +-GraphPropertyDeclaration(parse_location=63-63, name="zip", type=STRING)
==

# Create a property graph that already exists in property graph name space
# using if not exists mode
create property graph if not exists aml node tables(person as node)
--
CreatePropertyGraphStmt
+-name_path=aml
+-create_mode=CREATE_IF_NOT_EXISTS
+-node_table_list=
| +-GraphElementTable
|   +-alias="node"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[node]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=66-66
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=66-66, name="node", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=66-66, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=66-66, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=66-66, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=66-66, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=66-66, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=66-66, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=66-66, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH IF NOT EXISTS aml
  NODE TABLES(
    Person AS node
      KEY(id)
      LABEL node PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH IF NOT EXISTS aml
  NODE TABLES(
    Person AS node
      KEY(id)
      LABEL node PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
==

# Create or replace a property graph already existing in property graph name space
create or replace property graph aml node tables(person as node)
--
CreatePropertyGraphStmt
+-name_path=aml
+-create_mode=CREATE_OR_REPLACE
+-node_table_list=
| +-GraphElementTable
|   +-alias="node"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[node]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=DATE, column=Person.birthday#4)
|     | +-sql="birthday"
|     | +-property_declaration_name="birthday"
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.email#5)
|     | +-sql="email"
|     | +-property_declaration_name="email"
|     +-GraphPropertyDefinition
|     | +-parse_location=63-63
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=63-63
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=63-63, name="node", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=63-63, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=63-63, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=63-63, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=63-63, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=63-63, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=63-63, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=63-63, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE OR REPLACE PROPERTY GRAPH aml
  NODE TABLES(
    Person AS node
      KEY(id)
      LABEL node PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE OR REPLACE PROPERTY GRAPH aml
  NODE TABLES(
    Person AS node
      KEY(id)
      LABEL node PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data)
  );
==

# Property graph with all or no properties specified is allowed.
[language_features=NONE,+PROPERTY_GRAPH_ENFORCE_EXPLICIT_PROPERTIES]
CREATE PROPERTY GRAPH catalog.aml
NODE TABLES (
  person
    DEFAULT LABEL PROPERTIES (id)
    LABEL no_properties NO PROPERTIES,
  account PROPERTIES (id)
)
EDGE TABLES (
  PersonOwnAccount KEY(personId, accountId)
    SOURCE KEY(personId) REFERENCES person(id)
    DESTINATION KEY(accountId) REFERENCES account(id)
    DEFAULT LABEL PROPERTIES (personId, accountId)
    LABEL no_properties NO PROPERTIES
)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[person, no_properties]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |     +-parse_location=87-89
| |     +-expr=
| |     | +-ColumnRef(type=INT64, column=Person.id#1)
| |     +-sql="id"
| |     +-property_declaration_name="id"
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[account]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|       +-parse_location=152-154
|       +-expr=
|       | +-ColumnRef(type=INT64, column=Account.id#8)
|       +-sql="id"
|       +-property_declaration_name="id"
+-edge_table_list=
| +-GraphElementTable
|   +-alias="PersonOwnAccount"
|   +-input_scan=
|   | +-TableScan(column_list=PersonOwnAccount.[personId#11, accountId#12, startDate#13], table=PersonOwnAccount, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="person"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Person.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="account"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[PersonOwnAccount, no_properties]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=347-355
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|     | +-sql="personId"
|     | +-property_declaration_name="personId"
|     +-GraphPropertyDefinition
|       +-parse_location=357-366
|       +-expr=
|       | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|       +-sql="accountId"
|       +-property_declaration_name="accountId"
+-label_list=
| +-GraphElementLabel(parse_location=61-90, name="person", property_declaration_name_list=[id])
| +-GraphElementLabel(parse_location=95-128, name="no_properties")
| +-GraphElementLabel(parse_location=140-155, name="account", property_declaration_name_list=[id])
| +-GraphElementLabel(parse_location=321-367, name="PersonOwnAccount", property_declaration_name_list=[personId, accountId])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=87-89, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=347-355, name="personId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=357-366, name="accountId", type=INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id)
      LABEL no_properties NO PROPERTIES,

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id)
  )
  EDGE TABLES(
    PersonOwnAccount
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES person(id)
      DESTINATION KEY(accountId) REFERENCES account(id)
      LABEL PersonOwnAccount PROPERTIES(
        personId,
        accountId)
      LABEL no_properties NO PROPERTIES
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id)
      LABEL no_properties NO PROPERTIES,

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id)
  )
  EDGE TABLES(
    PersonOwnAccount
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES person(id)
      DESTINATION KEY(accountId) REFERENCES account(id)
      LABEL PersonOwnAccount PROPERTIES(
        personId,
        accountId)
      LABEL no_properties NO PROPERTIES
  );
==

################################################################################
# Label and properties
#  1. implicit and explicit default label and property clause
#  2. properties with except ColumnList
#  3. derived property w/o alias
#  4. Label with same name in different element table have same property declaration.
#  5. property declaration with different property definition in different element table
################################################################################
# Create a property graph with various label and properties
[show_sqlbuilder_output]
create property graph catalog.aml
node tables(
person as p
label x1 properties(id, name as n)
label x2,
account properties(id, balance)
)
edge tables(
personownaccount as own
source key(personId) references p(id)
destination key(accountId) references account
default label no properties
label x3 properties all columns
)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="p"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[x1, x2]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=79-81
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=83-92
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="n"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=102-102
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=102-102
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=102-102
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=102-102
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=102-102
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=102-102
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[account]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=123-125
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Account.id#8)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|       +-parse_location=127-134
|       +-expr=
|       | +-ColumnRef(type=UINT64, column=Account.balance#10)
|       +-sql="balance"
|       +-property_declaration_name="balance"
+-edge_table_list=
| +-GraphElementTable
|   +-alias="own"
|   +-input_scan=
|   | +-TableScan(column_list=PersonOwnAccount.[personId#11, accountId#12, startDate#13], table=PersonOwnAccount, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="p"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Person.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="account"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[own, x3]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=296-318
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|     | +-sql="personId"
|     | +-property_declaration_name="personId"
|     +-GraphPropertyDefinition
|     | +-parse_location=296-318
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|     | +-sql="accountId"
|     | +-property_declaration_name="accountId"
|     +-GraphPropertyDefinition
|       +-parse_location=296-318
|       +-expr=
|       | +-ColumnRef(type=TIMESTAMP, column=PersonOwnAccount.startDate#13)
|       +-sql="startDate"
|       +-property_declaration_name="startDate"
+-label_list=
| +-GraphElementLabel(parse_location=59-93, name="x1", property_declaration_name_list=[id, n])
| +-GraphElementLabel(parse_location=94-102, name="x2", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=112-135, name="account", property_declaration_name_list=[id, balance])
| +-GraphElementLabel(parse_location=259-286, name="own")
| +-GraphElementLabel(parse_location=287-318, name="x3", property_declaration_name_list=[personId, accountId, startDate])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=79-81, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=83-92, name="n", type=STRING)
  +-GraphPropertyDeclaration(parse_location=102-102, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=102-102, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=102-102, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=102-102, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=102-102, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=102-102, name="data", type=BYTES)
  +-GraphPropertyDeclaration(parse_location=127-134, name="balance", type=UINT64)
  +-GraphPropertyDeclaration(parse_location=296-318, name="personId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=296-318, name="accountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=296-318, name="startDate", type=TIMESTAMP)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p
      KEY(id)
      LABEL x1 PROPERTIES(
        id,
        name AS n)
      LABEL x2 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id,
        balance)
  )
  EDGE TABLES(
    PersonOwnAccount AS own
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES p(id)
      DESTINATION KEY(accountId) REFERENCES account(id)
      LABEL own NO PROPERTIES
      LABEL x3 PROPERTIES(
        personId,
        accountId,
        startDate)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p
      KEY(id)
      LABEL x1 PROPERTIES(
        id,
        name AS n)
      LABEL x2 PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id,
        balance)
  )
  EDGE TABLES(
    PersonOwnAccount AS own
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES p(id)
      DESTINATION KEY(accountId) REFERENCES account(id)
      LABEL own NO PROPERTIES
      LABEL x3 PROPERTIES(
        personId,
        accountId,
        startDate)
  );
==

# Create a property graph with a node table that exposes all but specified
# columns as properties.
create property graph catalog.aml node tables(person properties are all columns except(birthday, email))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[person]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=53-103
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Person.id#1)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=53-103
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.name#2)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|     | +-parse_location=53-103
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Person.gender#3)
|     | +-sql="gender"
|     | +-property_declaration_name="gender"
|     +-GraphPropertyDefinition
|     | +-parse_location=53-103
|     | +-expr=
|     | | +-ColumnRef(type=UINT32, column=Person.age#6)
|     | +-sql="age"
|     | +-property_declaration_name="age"
|     +-GraphPropertyDefinition
|       +-parse_location=53-103
|       +-expr=
|       | +-ColumnRef(type=BYTES, column=Person.data#7)
|       +-sql="data"
|       +-property_declaration_name="data"
+-label_list=
| +-GraphElementLabel(parse_location=53-103, name="person", property_declaration_name_list=[id, name, gender, age, data])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=53-103, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=53-103, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=53-103, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=53-103, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=53-103, name="data", type=BYTES)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        age,
        data)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL person PROPERTIES(
        id,
        name,
        gender,
        age,
        data)
  );
==

# Create a property graph with node tables with more complicated derived properties
# BinaryExpression
# UnaryExpression
# Parenthesized expression
# FunctionCallExpression
create property graph catalog.aml
node tables(
account label x1 properties(balance+balance as doublemoney)
        label x2 properties((-id) as fakeid, CONCAT("s1", "s2") AS sliteral)
        label x3 properties(POWER(balance, 2) as asset))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#1, name#2, balance#3], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#1)
|   +-label_name_list=[x1, x2, x3]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=75-105
|     | +-expr=
|     | | +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
|     | |   +-ColumnRef(type=UINT64, column=Account.balance#3)
|     | |   +-ColumnRef(type=UINT64, column=Account.balance#3)
|     | +-sql="balance+balance"
|     | +-property_declaration_name="doublemoney"
|     +-GraphPropertyDefinition
|     | +-parse_location=135-150
|     | +-expr=
|     | | +-FunctionCall(ZetaSQL:$unary_minus(INT64) -> INT64)
|     | |   +-ColumnRef(type=INT64, column=Account.id#1)
|     | +-sql="-id"
|     | +-property_declaration_name="fakeid"
|     +-GraphPropertyDefinition
|     | +-parse_location=152-182
|     | +-expr=
|     | | +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
|     | |   +-Literal(type=STRING, value="s1")
|     | |   +-Literal(type=STRING, value="s2")
|     | +-sql='CONCAT("s1", "s2")'
|     | +-property_declaration_name="sliteral"
|     +-GraphPropertyDefinition
|       +-parse_location=212-238
|       +-expr=
|       | +-FunctionCall(ZetaSQL:pow(DOUBLE, DOUBLE) -> DOUBLE)
|       |   +-Cast(UINT64 -> DOUBLE)
|       |   | +-ColumnRef(type=UINT64, column=Account.balance#3)
|       |   +-Literal(type=DOUBLE, value=2)
|       +-sql="POWER(balance, 2)"
|       +-property_declaration_name="asset"
+-label_list=
| +-GraphElementLabel(parse_location=55-106, name="x1", property_declaration_name_list=[doublemoney])
| +-GraphElementLabel(parse_location=115-183, name="x2", property_declaration_name_list=[fakeid, sliteral])
| +-GraphElementLabel(parse_location=192-239, name="x3", property_declaration_name_list=[asset])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=75-105, name="doublemoney", type=UINT64)
  +-GraphPropertyDeclaration(parse_location=135-150, name="fakeid", type=INT64)
  +-GraphPropertyDeclaration(parse_location=152-182, name="sliteral", type=STRING)
  +-GraphPropertyDeclaration(parse_location=212-238, name="asset", type=DOUBLE)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Account AS account
      KEY(id)
      LABEL x1 PROPERTIES(
        balance + balance AS doublemoney)
      LABEL x2 PROPERTIES(
        -id AS fakeid,
        CONCAT("s1", "s2") AS sliteral)
      LABEL x3 PROPERTIES(
        POWER(balance, 2) AS asset)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Account AS account
      KEY(id)
      LABEL x1 PROPERTIES(
        balance + balance AS doublemoney)
      LABEL x2 PROPERTIES(
        -id AS fakeid,
        CONCAT("s1", "s2") AS sliteral)
      LABEL x3 PROPERTIES(
        POWER(balance, 2) AS asset)
  );
==

# Property declaration exists with equivalent property definition ResolvedExpr
[no_enable_literal_replacement]
create property graph catalog.aml
node tables(person label x1 properties(id+1 as uid) label x2 properties(id+1 as uid))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="person"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[x1, x2]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|       +-parse_location=73-84
|       +-expr=
|       | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   +-ColumnRef(type=INT64, column=Person.id#1)
|       |   +-Literal(type=INT64, value=1)
|       +-sql="id+1"
|       +-property_declaration_name="uid"
+-label_list=
| +-GraphElementLabel(parse_location=53-85, name="x1", property_declaration_name_list=[uid])
| +-GraphElementLabel(parse_location=86-118, name="x2", property_declaration_name_list=[uid])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=73-84, name="uid", type=INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL x1 PROPERTIES(
        id + 1 AS uid)
      LABEL x2 PROPERTIES(
        id + 1 AS uid)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL x1 PROPERTIES(
        id + 1 AS uid)
      LABEL x2 PROPERTIES(
        id + 1 AS uid)
  );
==

# Create a property graph with same property declaration with different property
# definition in different element Table
create property graph catalog.aml
node tables(person label x1 properties(id), account)
edge tables(
personownaccount as own
source key(personId) references person(id)
destination key(accountId) references account
label x1 properties(personId+accountId as id)
)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[x1]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |     +-parse_location=73-75
| |     +-expr=
| |     | +-ColumnRef(type=INT64, column=Person.id#1)
| |     +-sql="id"
| |     +-property_declaration_name="id"
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[account]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=85-85
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Account.id#8)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=85-85
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Account.name#9)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|       +-parse_location=85-85
|       +-expr=
|       | +-ColumnRef(type=UINT64, column=Account.balance#10)
|       +-sql="balance"
|       +-property_declaration_name="balance"
+-edge_table_list=
| +-GraphElementTable
|   +-alias="own"
|   +-input_scan=
|   | +-TableScan(column_list=PersonOwnAccount.[personId#11, accountId#12, startDate#13], table=PersonOwnAccount, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="person"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Person.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="account"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[x1]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|       +-parse_location=233-257
|       +-expr=
|       | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#11)
|       |   +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#12)
|       +-sql="personId+accountId"
|       +-property_declaration_name="id"
+-label_list=
| +-GraphElementLabel(parse_location=53-76, name="x1", property_declaration_name_list=[id])
| +-GraphElementLabel(parse_location=85-85, name="account", property_declaration_name_list=[id, name, balance])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=73-75, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=85-85, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=85-85, name="balance", type=UINT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL x1 PROPERTIES(
        id),

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id,
        name,
        balance)
  )
  EDGE TABLES(
    PersonOwnAccount AS own
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES person(id)
      DESTINATION KEY(accountId) REFERENCES account(id)
      LABEL x1 PROPERTIES(
        personId + accountId AS id)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS person
      KEY(id)
      LABEL x1 PROPERTIES(
        id),

    Account AS account
      KEY(id)
      LABEL account PROPERTIES(
        id,
        name,
        balance)
  )
  EDGE TABLES(
    PersonOwnAccount AS own
      KEY(personId, accountId)
      SOURCE KEY(personId) REFERENCES person(id)
      DESTINATION KEY(accountId) REFERENCES account(id)
      LABEL x1 PROPERTIES(
        personId + accountId AS id)
  );
==

# except list exclude all columns, equivalant to NO PROPERTIES
[show_sqlbuilder_output]
create property graph catalog.aml
node tables(account label x1 properties all columns except(id, name, balance))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#1, name#2, balance#3], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#1)
|   +-label_name_list=[x1]
+-label_list=
  +-GraphElementLabel(parse_location=54-111, name="x1")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Account AS account
      KEY(id)
      LABEL x1 NO PROPERTIES
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Account AS account
      KEY(id)
      LABEL x1 NO PROPERTIES
  );
==

################################################################################
# Element Table Negative test
################################################################################
# Create a property graph already existing in property graph name space
create property graph aml node tables(person as node)
--
ERROR: A property graph with the same name is already defined. Please use a different name [at 1:23]
create property graph aml node tables(person as node)
                      ^
==

# Create a property graph already existing in table name space
create property graph transfer node tables(person as node)
--
ERROR: The property graph's name is used by a table under the same name. Please use a different name [at 1:23]
create property graph transfer node tables(person as node)
                      ^
==

# Create a property graph with multiple NodeTables from distinct underlying
# tables but the same alias.
create property graph catalog.aml node tables(
  person as node properties(id), account as NODE properties(id))
--
ERROR: The node table 'NODE' is defined more than once; use a unique name [at 2:34]
  person as node properties(id), account as NODE properties(id))
                                 ^
==

# No table exist with the name
create property graph catalog.aml node tables(nonexist)
--
ERROR: Table not found: nonexist [at 1:47]
create property graph catalog.aml node tables(nonexist)
                                              ^
==

# Node table doesn't have primary keys nor key list defined
create property graph catalog.aml node tables(pg.place)
--
ERROR: The node table 'pg.Place' does not have primary key defined; graph element table keys must be explicitly defined [at 1:47]
create property graph catalog.aml node tables(pg.place)
                                              ^
==

# `ScanTable` has two columns (key, value), key is the primary key.
# `ScanTableView` is defined on top of `ScanTable`, directly projecting its two columns (key, value) as (a, b).
# Since views have no primary keys, we must declare the ScanTableView node table's element keys explicitly.
# java doesn't support because SQLView is not serialized.
[no_java]
create property graph catalog.aml node tables(ScanTableView)
--
ERROR: The node table 'ScanTableView' does not have primary key defined; graph element table keys must be explicitly defined [at 1:47]
create property graph catalog.aml node tables(ScanTableView)
                                              ^
==

# Similar to the above test, but ScanTableView node is defined with key column KEY(a).
# java doesn't support because SQLView is not serialized.
[no_java]
create property graph catalog.aml node tables(ScanTableView KEY(a))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
|   +-alias="ScanTableView"
|   +-input_scan=
|   | +-TableScan(column_list=ScanTableView.[a#1, b#2], table=ScanTableView, column_index_list=[0, 1])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=ScanTableView.a#1)
|   +-label_name_list=[ScanTableView]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=66-66
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=ScanTableView.a#1)
|     | +-sql="a"
|     | +-property_declaration_name="a"
|     +-GraphPropertyDefinition
|       +-parse_location=66-66
|       +-expr=
|       | +-ColumnRef(type=INT64, column=ScanTableView.b#2)
|       +-sql="b"
|       +-property_declaration_name="b"
+-label_list=
| +-GraphElementLabel(parse_location=66-66, name="ScanTableView", property_declaration_name_list=[a, b])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=66-66, name="a", type=INT64)
  +-GraphPropertyDeclaration(parse_location=66-66, name="b", type=INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    ScanTableView
      KEY(a)
      LABEL ScanTableView PROPERTIES(
        a,
        b)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    ScanTableView
      KEY(a)
      LABEL ScanTableView PROPERTIES(
        a,
        b)
  );
==

# Column not found in element table key clause
create property graph catalog.aml node tables(person key(nonexisting))
--
ERROR: Column 'nonexisting' not found in table 'Person' [at 1:58]
create property graph catalog.aml node tables(person key(nonexisting))
                                                         ^
==

# Column not found in edge table
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  source key(nonexisting) references acc(id)
  destination key(toAccountId) references acc)
--
ERROR: Column 'nonexisting' not found in table 'Transfer' [at 5:14]
  source key(nonexisting) references acc(id)
             ^
==

# node table not defined in source/destination node table reference
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  source key(fromAccountId) references nonexisting(id)
  destination key(toAccountId) references acc)
--
ERROR: The referenced node table 'nonexisting' is not defined in the property graph [at 5:40]
  source key(fromAccountId) references nonexisting(id)
                                       ^
==

# column not defined in referenced node table
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  source key(fromAccountId) references acc(nonexist)
  destination key(toAccountId) references acc)
--
ERROR: Column 'nonexist' not found in table 'Account' [at 5:44]
  source key(fromAccountId) references acc(nonexist)
                                           ^
==

# duplicate column in referenced node table
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  source key(fromAccountId, toAccountId) references acc(id, id)
  destination key(toAccountId) references acc)
--
ERROR: Duplicate column 'id' in the referenced column list [at 5:61]
  source key(fromAccountId, toAccountId) references acc(id, id)
                                                            ^
==

# Referencing columns in edge table don't match referenced column size in node table
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  source key(fromAccountId, toAccountId) references acc(id)
  destination key(toAccountId) references acc)
--
ERROR: The number of referencing columns in the edge table does not match that of referenced columns in the node table; the former has a size of 2 but the latter has a size of 1 [at 5:3]
  source key(fromAccountId, toAccountId) references acc(id)
  ^
==

# Referencing columns in edge table don't match referenced column type in node table
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  source key(fromAccountId) references acc(name)
  destination key(toAccountId) references acc)
--
ERROR: Data types of the referencing columns in the edge table do not match those of the referenced columns in the node table [at 5:3]
  source key(fromAccountId) references acc(name)
  ^
==

# node table can't have source or destination reference defined
create property graph catalog.aml
node tables(
  account as acc,
  transfer as t key(txnId)
  source key(fromAccountId) references acc(id)
  destination key(toAccountId) references acc)
--
ERROR: Node table cannot have source or destination references [at 4:3]
  transfer as t key(txnId)
  ^
==

# edge table must have both source and destination references defined
create property graph catalog.aml
node tables(person as p, account as acc)
edge tables(
  transfer as t key(txnId)
  destination key(toAccountId) references acc
)
--
ERROR: Edge table must have its destination node reference defined [at 4:3]
  transfer as t key(txnId)
  ^
==

################################################################################
# Label and Properties Negative test
################################################################################
# Redefinition of the same LABEL for the same NodeTable not allowed
create property graph catalog.aml
node tables(person label x1 label x1 properties(id, name))
--
ERROR: Duplicate label name 'x1' in the same element table 'person' [at 2:13]
node tables(person label x1 label x1 properties(id, name))
            ^
==

# label with same name in different element table must have same number of
# property declarations
create property graph catalog.aml
node tables(
person label x1 properties(id),
account)
edge tables(
personownaccount as own
source key(personId) references person(id)
destination key(accountId) references account
label x1 properties(personId, accountId)
)
--
ERROR: The label 'x1' is defined with different properties. One definition of the label has 2 property declarations: '[personId, accountId]'. Another definition has  1 property declarations: '[id]'. You need to use the same set of property declarations under the same label [at 9:1]
label x1 properties(personId, accountId)
^
==

# Label already defined in the property graph with different property declaration
create property graph catalog.aml
node tables(
person label x1 properties(id),
account)
edge tables(
personownaccount as own
source key(personId) references person(id)
destination key(accountId) references account
label x1 properties(personId)
)
--
ERROR: The label 'x1' is defined with different property declarations. There is one instance of this label defined with properties of '[personId]'. Another instance is defined with properties of '[id]'. You need to use the same set of property names under the same label [at 9:1]
label x1 properties(personId)
^
==

# Duplicate property name in the same label
create property graph catalog.aml
node tables(person label x1 properties(id as n1, name as N1))
--
ERROR: Duplicate property name 'N1' in the same label 'x1' [at 2:20]
node tables(person label x1 properties(id as n1, name as N1))
                   ^
==

# Property declaration already exists with a different property definition in
# the same element table
create property graph catalog.aml
node tables(person, account)
edge tables(
personownaccount as own
source key(personId) references person(id)
destination key(accountId) references account
label x1 properties(personId as id)
label x2 properties(personId+accountId as id)
)
--
ERROR: Property 'id' has more than one definition in the element table; use the same property definition or assign different property names [at 8:21]
label x2 properties(personId+accountId as id)
                    ^
==

# Non-existing column name
create property graph catalog.aml
node tables(person label x1 properties(nonexisting*2 as num1))
--
ERROR: Unrecognized name: nonexisting [at 2:40]
node tables(person label x1 properties(nonexisting*2 as num1))
                                       ^
==

# Property declaration already exists with a different type
create property graph catalog.aml
node tables(person label x1 properties(id as uid), account label x2 properties(name as uid))
--
ERROR: The property declaration of 'uid' has type conflicts. There is an existing declaration of type STRING. There is a conflicting one of type INT64 [at 2:80]
...properties(id as uid), account label x2 properties(name as uid))
                                                      ^
==

# Non ColumnRef without alias not allowed
create property graph catalog.aml node tables(account properties(balance*2))
--
ERROR: Without `AS` alias, the property expression must be a simple reference to a column name [at 1:66]
create property graph catalog.aml node tables(account properties(balance*2))
                                                                 ^
==

# Column not found in except list
create property graph catalog.aml
node tables(person label x1 properties all columns except(nonexisting))
--
ERROR: Column 'nonexisting' in the EXCEPT list is not found in the input table [at 2:59]
node tables(person label x1 properties all columns except(nonexisting))
                                                          ^
==

# Duplicate column in except list
create property graph catalog.aml
node tables(person label x1 properties all columns except(id, id))
--
ERROR: Duplicate column 'id' is used in the property definition EXCEPT list. [at 2:63]
node tables(person label x1 properties all columns except(id, id))
                                                              ^
==

# Property declaration exists with equivalent property definition ResolvedExpr
# now it reports error, should be fixed later
[no_enable_literal_replacement]
create property graph catalog.aml
node tables(person label x1 properties(id+1 as uid) label x2 properties(1+id as uid))
--
ERROR: Property 'uid' has more than one definition in the element table; use the same property definition or assign different property names [at 2:73]
...x1 properties(id+1 as uid) label x2 properties(1+id as uid))
                                                  ^
==

# Create a property graph with same label in different element table.
# Label with same name must have same property declarations set, it reports
# error for now, should be fixed later
# TODO When two labels are equivalent within the same element
# table, just the order of property declaration is different: like L(a, b)
# is equivalent to L(b, a),  the resolvedast generated by original sql
# could be different from resolvedast generated by unparsed sql in property
# definition order. basically we'll canonicalize the label representation in
# ResolvedAST so unparser can result into different order of property
# definitions.
[no_run_sqlbuilder]
create property graph catalog.aml
node tables(
person label x1 properties(id, name),
account label x1 properties(name, id))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[x1]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=74-76
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |     +-parse_location=78-82
| |     +-expr=
| |     | +-ColumnRef(type=STRING, column=Person.name#2)
| |     +-sql="name"
| |     +-property_declaration_name="name"
| +-GraphElementTable
|   +-alias="account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[x1]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=113-117
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Account.name#9)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|       +-parse_location=119-121
|       +-expr=
|       | +-ColumnRef(type=INT64, column=Account.id#8)
|       +-sql="id"
|       +-property_declaration_name="id"
+-label_list=
| +-GraphElementLabel(parse_location=54-83, name="x1", property_declaration_name_list=[id, name])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=74-76, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=78-82, name="name", type=STRING)
==

[disallow_duplicate_options]
create property graph catalog.aml
options(opt1='v1', opt1='v2') node tables(person)
--
ERROR: Duplicate option specified for 'opt1' [at 2:20]
options(opt1='v1', opt1='v2') node tables(person)
                   ^
==

# Query expression like `select 1` is not allowed in property value expression.
create property graph catalog.aml
node tables(person label x1 properties( ((select 1) + 1) AS two ))
--
ERROR: Property value expression cannot contain a subquery [at 2:42]
node tables(person label x1 properties( ((select 1) + 1) AS two ))
                                         ^
==

# Nondeterministic functions like `rand()` is not allowed in property value
# expression.
create property graph catalog.aml
node tables(person label x1 properties (CONCAT("a", CAST((2 * rand()) AS STRING)) AS random))
--
ERROR: Property value expression cannot use volatile or non-deterministic functions [at 2:41]
node tables(person label x1 properties (CONCAT("a", CAST((2 * rand()) AS STRI...
                                        ^
==

# Test that names within graph queries are treated as case-insensitive.
# Here, although the property "id" is used in both lower and upper case, they
# refer to the same "id" property present in the Person table. (b/301335149)
create property graph catalog.aml
node tables(person as p1 label x properties(id), person as p2 label y properties(ID))
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="p1"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[x]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |     +-parse_location=78-80
| |     +-expr=
| |     | +-ColumnRef(type=INT64, column=Person.id#1)
| |     +-sql="id"
| |     +-property_declaration_name="id"
| +-GraphElementTable
|   +-alias="p2"
|   +-input_scan=
|   | +-TableScan(column_list=Person.[id#8, name#9, gender#10, birthday#11, email#12, age#13, data#14], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Person.id#8)
|   +-label_name_list=[y]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|       +-parse_location=115-117
|       +-expr=
|       | +-ColumnRef(type=INT64, column=Person.id#8)
|       +-sql="ID"
|       +-property_declaration_name="ID"
+-label_list=
| +-GraphElementLabel(parse_location=59-81, name="x", property_declaration_name_list=[id])
| +-GraphElementLabel(parse_location=96-118, name="y", property_declaration_name_list=[ID])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=78-80, name="id", type=INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p1
      KEY(id)
      LABEL x PROPERTIES(
        id),

    Person AS p2
      KEY(id)
      LABEL y PROPERTIES(
        ID)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person AS p1
      KEY(id)
      LABEL x PROPERTIES(
        id),

    Person AS p2
      KEY(id)
      LABEL y PROPERTIES(
        ID)
  );
==

drop property graph catalog.aml
--
DropStmt(object_type="PROPERTY GRAPH", is_if_exists=FALSE, name_path=catalog.aml)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
DROP PROPERTY GRAPH catalog.aml;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
DROP PROPERTY GRAPH catalog.aml;
==

drop property graph if exists catalog.aml
--
DropStmt(object_type="PROPERTY GRAPH", is_if_exists=TRUE, name_path=catalog.aml)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
DROP PROPERTY GRAPH IF EXISTS catalog.aml;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
DROP PROPERTY GRAPH IF EXISTS catalog.aml;
==

create property graph g
node tables(TestTableWithSameColumnName properties(TestTableWithSameColumnName as TestTableWithSameColumnName))

--
CreatePropertyGraphStmt
+-name_path=g
+-node_table_list=
| +-GraphElementTable
|   +-alias="TestTableWithSameColumnName"
|   +-input_scan=
|   | +-TableScan(column_list=TestTableWithSameColumnName.[id#1, TestTableWithSameColumnName#2], table=TestTableWithSameColumnName, column_index_list=[0, 1])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=TestTableWithSameColumnName.id#1)
|   +-label_name_list=[TestTableWithSameColumnName]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|       +-parse_location=75-133
|       +-expr=
|       | +-ColumnRef(type=STRING, column=TestTableWithSameColumnName.TestTableWithSameColumnName#2)
|       +-sql="TestTableWithSameColumnName"
|       +-property_declaration_name="TestTableWithSameColumnName"
+-label_list=
| +-GraphElementLabel(parse_location=64-134, name="TestTableWithSameColumnName", property_declaration_name_list=[TestTableWithSameColumnName])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=75-133, name="TestTableWithSameColumnName", type=STRING)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH g
  NODE TABLES(
    TestTableWithSameColumnName
      KEY(id)
      LABEL TestTableWithSameColumnName PROPERTIES(
        TestTableWithSameColumnName)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH g
  NODE TABLES(
    TestTableWithSameColumnName
      KEY(id)
      LABEL TestTableWithSameColumnName PROPERTIES(
        TestTableWithSameColumnName)
  );
==

create property graph g
node tables(TestValueTableWithSameColumnName properties(TestValueTableWithSameColumnName as TestValueTableWithSameColumnName))
--
CreatePropertyGraphStmt
+-name_path=g
+-node_table_list=
| +-GraphElementTable
|   +-alias="TestValueTableWithSameColumnName"
|   +-input_scan=
|   | +-TableScan(column_list=TestValueTableWithSameColumnName.[id#1, TestValueTableWithSameColumnName#2], table=TestValueTableWithSameColumnName, column_index_list=[0, 1])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=TestValueTableWithSameColumnName.id#1)
|   +-label_name_list=[TestValueTableWithSameColumnName]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|       +-parse_location=80-148
|       +-expr=
|       | +-ColumnRef(type=STRING, column=TestValueTableWithSameColumnName.TestValueTableWithSameColumnName#2)
|       +-sql="TestValueTableWithSameColumnName"
|       +-property_declaration_name="TestValueTableWithSameColumnName"
+-label_list=
| +-GraphElementLabel(parse_location=69-149, name="TestValueTableWithSameColumnName", property_declaration_name_list=[TestValueTableWithSameColumnName])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=80-148, name="TestValueTableWithSameColumnName", type=STRING)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH g
  NODE TABLES(
    TestValueTableWithSameColumnName
      KEY(id)
      LABEL TestValueTableWithSameColumnName PROPERTIES(
        TestValueTableWithSameColumnName)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH g
  NODE TABLES(
    TestValueTableWithSameColumnName
      KEY(id)
      LABEL TestValueTableWithSameColumnName PROPERTIES(
        TestValueTableWithSameColumnName)
  );
==

# Disallow PROPERTIES ALL COLUMNS for node table.
[language_features=NONE,+PROPERTY_GRAPH_ENFORCE_EXPLICIT_PROPERTIES]
CREATE PROPERTY GRAPH catalog.aml
NODE TABLES (account {{|DEFAULT LABEL}} {{|PROPERTIES ALL COLUMNS|PROPERTIES ARE ALL COLUMNS|PROPERTIES ALL COLUMNS EXCEPT (id)}})
--
ALTERNATION GROUP: <empty>
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:21]
NODE TABLES (account  )
                    ^
--
ALTERNATION GROUP: PROPERTIES ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:23]
NODE TABLES (account  PROPERTIES ALL COLUMNS)
                      ^
--
ALTERNATION GROUP: PROPERTIES ARE ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:23]
NODE TABLES (account  PROPERTIES ARE ALL COLUMNS)
                      ^
--
ALTERNATION GROUP: PROPERTIES ALL COLUMNS EXCEPT (id)
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:23]
NODE TABLES (account  PROPERTIES ALL COLUMNS EXCEPT (id))
                      ^
--
ALTERNATION GROUP: DEFAULT LABEL,
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:35]
NODE TABLES (account DEFAULT LABEL )
                                  ^
--
ALTERNATION GROUP: DEFAULT LABEL,PROPERTIES ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:36]
NODE TABLES (account DEFAULT LABEL PROPERTIES ALL COLUMNS)
                                   ^
--
ALTERNATION GROUP: DEFAULT LABEL,PROPERTIES ARE ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:36]
NODE TABLES (account DEFAULT LABEL PROPERTIES ARE ALL COLUMNS)
                                   ^
--
ALTERNATION GROUP: DEFAULT LABEL,PROPERTIES ALL COLUMNS EXCEPT (id)
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 2:36]
NODE TABLES (account DEFAULT LABEL PROPERTIES ALL COLUMNS EXCEPT (id))
                                   ^
==

# Disallow PROPERTIES ALL COLUMNS for edge table.
[language_features=NONE,+PROPERTY_GRAPH_ENFORCE_EXPLICIT_PROPERTIES]
CREATE PROPERTY GRAPH catalog.aml
NODE TABLES (account DEFAULT LABEL PROPERTIES (id))
EDGE TABLES (
  transfer KEY (txnId)
    SOURCE KEY (fromAccountId) REFERENCES account(id)
    DESTINATION KEY (toAccountId) REFERENCES account(id)
    {{|DEFAULT LABEL}} {{|PROPERTIES ALL COLUMNS|PROPERTIES ARE ALL COLUMNS|PROPERTIES ALL COLUMNS EXCEPT (txnId)}})
--
ALTERNATION GROUP: <empty>
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 6:57]
    DESTINATION KEY (toAccountId) REFERENCES account(id)
                                                        ^
--
ALTERNATION GROUP: PROPERTIES ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:6]
     PROPERTIES ALL COLUMNS)
     ^
--
ALTERNATION GROUP: PROPERTIES ARE ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:6]
     PROPERTIES ARE ALL COLUMNS)
     ^
--
ALTERNATION GROUP: PROPERTIES ALL COLUMNS EXCEPT (txnId)
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:6]
     PROPERTIES ALL COLUMNS EXCEPT (txnId))
     ^
--
ALTERNATION GROUP: DEFAULT LABEL,
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:18]
    DEFAULT LABEL )
                 ^
--
ALTERNATION GROUP: DEFAULT LABEL,PROPERTIES ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:19]
    DEFAULT LABEL PROPERTIES ALL COLUMNS)
                  ^
--
ALTERNATION GROUP: DEFAULT LABEL,PROPERTIES ARE ALL COLUMNS
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:19]
    DEFAULT LABEL PROPERTIES ARE ALL COLUMNS)
                  ^
--
ALTERNATION GROUP: DEFAULT LABEL,PROPERTIES ALL COLUMNS EXCEPT (txnId)
--
ERROR: Properties list must be explicitly specified using syntax PROPERTIES (...). [at 7:19]
    DEFAULT LABEL PROPERTIES ALL COLUMNS EXCEPT (txnId))
                  ^

==

CREATE PROPERTY GRAPH catalog.aml
NODE TABLES (
  Person,
  `Group` AS `From`
    KEY (`group`)
    PROPERTIES (`group` AS `group`, `group` + 1 AS group_plus_one)
)
EDGE TABLES (
  `Group` AS `Select`
    SOURCE KEY(`group`) REFERENCES `From`(`group`)
    DESTINATION KEY(id) REFERENCES Person(id)
)
--
CreatePropertyGraphStmt
+-name_path=catalog.aml
+-node_table_list=
| +-GraphElementTable
| | +-alias="Person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[Person]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=56-56
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=56-56
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=56-56
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=56-56
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=56-56
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=56-56
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=56-56
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="From"
|   +-input_scan=
|   | +-TableScan(column_list=Group.[id#8, group#9], table=Group, column_index_list=[0, 1])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Group.group#9)
|   +-label_name_list=[`From`]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=112-130
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Group.group#9)
|     | +-sql="`group`"
|     | +-property_declaration_name="group"
|     +-GraphPropertyDefinition
|       +-parse_location=132-161
|       +-expr=
|       | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|       |   +-ColumnRef(type=INT64, column=Group.group#9)
|       |   +-Literal(type=INT64, value=1)
|       +-sql="`group` + 1"
|       +-property_declaration_name="group_plus_one"
+-edge_table_list=
| +-GraphElementTable
|   +-alias="Select"
|   +-input_scan=
|   | +-TableScan(column_list=Group.[id#10, group#11], table=Group, column_index_list=[0, 1])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Group.id#10)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="From"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=Group.group#11)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Group.group#9)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="Person"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=Group.id#10)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Person.id#1)
|   +-label_name_list=[`Select`]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=297-297
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Group.id#10)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|       +-parse_location=297-297
|       +-expr=
|       | +-ColumnRef(type=INT64, column=Group.group#11)
|       +-sql="`group`"
|       +-property_declaration_name="group"
+-label_list=
| +-GraphElementLabel(parse_location=56-56, name="Person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=100-162, name="From", property_declaration_name_list=[`group`, group_plus_one])
| +-GraphElementLabel(parse_location=297-297, name="Select", property_declaration_name_list=[id, `group`])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=56-56, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=56-56, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=56-56, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=56-56, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=56-56, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=56-56, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=56-56, name="data", type=BYTES)
  +-GraphPropertyDeclaration(parse_location=112-130, name="group", type=INT64)
  +-GraphPropertyDeclaration(parse_location=132-161, name="group_plus_one", type=INT64)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person
      KEY(id)
      LABEL Person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    `Group` AS `From`
      KEY(`group`)
      LABEL `From` PROPERTIES(
        `group` AS `group`,
        `group` + 1 AS group_plus_one)
  )
  EDGE TABLES(
    `Group` AS `Select`
      KEY(id)
      SOURCE KEY(`group`) REFERENCES `From`(`group`)
      DESTINATION KEY(id) REFERENCES Person(id)
      LABEL `Select` PROPERTIES(
        id,
        `group` AS `group`)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH catalog.aml
  NODE TABLES(
    Person
      KEY(id)
      LABEL Person PROPERTIES(
        id,
        name,
        gender,
        birthday,
        email,
        age,
        data),

    `Group` AS `From`
      KEY(`group`)
      LABEL `From` PROPERTIES(
        `group` AS `group`,
        `group` + 1 AS group_plus_one)
  )
  EDGE TABLES(
    `Group` AS `Select`
      KEY(id)
      SOURCE KEY(`group`) REFERENCES `From`(`group`)
      DESTINATION KEY(id) REFERENCES Person(id)
      LABEL `Select` PROPERTIES(
        id,
        `group` AS `group`)
  );

==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_static_dynamic_node
  node tables(
    DynamicGraphNode
     KEY(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL Entity PROPERTIES(code)
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_static_dynamic_node
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode, Entity]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=114-136
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=114-136
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=114-136
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=114-136
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
+-label_list=
| +-GraphElementLabel(parse_location=100-136, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=142-171, name="Entity", property_declaration_name_list=[code])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=114-136, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=114-136, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=114-136, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=114-136, name="nodeJsonProp", type=JSON)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_node
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC LABEL (nodeLabelCol)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_node
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC LABEL (nodeLabelCol)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_static_dynamic_both
  node tables(
    DynamicGraphNode
     KEY(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL Entity PROPERTIES(code)
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
  edge tables(
    DynamicGraphEdge
     KEY(id)
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL CONNECTION Properties (category)
     DYNAMIC LABEL (edgeLabelCol)
     DYNAMIC PROPERTIES (edgeJsonProp)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_static_dynamic_both
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode, Entity]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=114-136
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=114-136
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=114-136
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=114-136
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
+-edge_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphEdge"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphEdge.[id#5, dst_id#6, edgeLabelCol#7, category#8, edgeJsonProp#9], table=DynamicGraphEdge, column_index_list=[0, 1, 2, 3, 4])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphEdge.id#5)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicGraphEdge.id#5)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicGraphEdge.dst_id#6)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphEdge, CONNECTION]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=430-452
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphEdge.id#5)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=430-452
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphEdge.dst_id#6)
|   | | +-sql="dst_id"
|   | | +-property_declaration_name="dst_id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=430-452
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphEdge.edgeLabelCol#7)
|   | | +-sql="edgeLabelCol"
|   | | +-property_declaration_name="edgeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=430-452
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphEdge.category#8)
|   | | +-sql="category"
|   | | +-property_declaration_name="category"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=430-452
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphEdge.edgeJsonProp#9)
|   |   +-sql="edgeJsonProp"
|   |   +-property_declaration_name="edgeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=STRING, column=DynamicGraphEdge.edgeLabelCol#7)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicGraphEdge.edgeJsonProp#9)
+-label_list=
| +-GraphElementLabel(parse_location=100-136, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=142-171, name="Entity", property_declaration_name_list=[code])
| +-GraphElementLabel(parse_location=416-452, name="DynamicGraphEdge", property_declaration_name_list=[id, dst_id, edgeLabelCol, category, edgeJsonProp])
| +-GraphElementLabel(parse_location=458-496, name="CONNECTION", property_declaration_name_list=[category])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=114-136, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=114-136, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=114-136, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=114-136, name="nodeJsonProp", type=JSON)
  +-GraphPropertyDeclaration(parse_location=430-452, name="dst_id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=430-452, name="edgeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=430-452, name="category", type=STRING)
  +-GraphPropertyDeclaration(parse_location=430-452, name="edgeJsonProp", type=JSON)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_both
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC LABEL (nodeLabelCol)
      DYNAMIC PROPERTIES (nodeJsonProp)
  )
  EDGE TABLES(
    DynamicGraphEdge
      KEY(id)
      SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
      DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
      LABEL DynamicGraphEdge PROPERTIES(
        id,
        dst_id,
        edgeLabelCol,
        category,
        edgeJsonProp)
      LABEL CONNECTION PROPERTIES(
        category)
      DYNAMIC LABEL (edgeLabelCol)
      DYNAMIC PROPERTIES (edgeJsonProp)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_both
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC LABEL (nodeLabelCol)
      DYNAMIC PROPERTIES (nodeJsonProp)
  )
  EDGE TABLES(
    DynamicGraphEdge
      KEY(id)
      SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
      DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
      LABEL DynamicGraphEdge PROPERTIES(
        id,
        dst_id,
        edgeLabelCol,
        category,
        edgeJsonProp)
      LABEL CONNECTION PROPERTIES(
        category)
      DYNAMIC LABEL (edgeLabelCol)
      DYNAMIC PROPERTIES (edgeJsonProp)
  );
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_static_dynamic_only_label
  node tables(
    DynamicGraphNode
     KEY(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL Entity PROPERTIES(code)
     DYNAMIC LABEL (nodeLabelCol)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_static_dynamic_only_label
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode, Entity]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=120-142
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=120-142
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=120-142
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=120-142
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|     +-GraphDynamicLabelSpecification
|       +-label_expr=
|         +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
+-label_list=
| +-GraphElementLabel(parse_location=106-142, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=148-177, name="Entity", property_declaration_name_list=[code])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=120-142, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=120-142, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=120-142, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=120-142, name="nodeJsonProp", type=JSON)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_only_label
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC LABEL (nodeLabelCol)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_only_label
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC LABEL (nodeLabelCol)
  );
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_static_dynamic_only_props
  node tables(
    DynamicGraphNode
     KEY(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL Entity PROPERTIES(code)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_static_dynamic_only_props
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode, Entity]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=120-142
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=120-142
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=120-142
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=120-142
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
+-label_list=
| +-GraphElementLabel(parse_location=106-142, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=148-177, name="Entity", property_declaration_name_list=[code])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=120-142, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=120-142, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=120-142, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=120-142, name="nodeJsonProp", type=JSON)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_only_props
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_static_dynamic_only_props
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      LABEL Entity PROPERTIES(
        code)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_pure_dynamic
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--
CreatePropertyGraphStmt
+-name_path=aml_pure_dynamic
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=74-74
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=74-74
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=74-74
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=74-74
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
+-label_list=
| +-GraphElementLabel(parse_location=74-74, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=74-74, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=74-74, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=74-74, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=74-74, name="nodeJsonProp", type=JSON)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_pure_dynamic
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      DYNAMIC LABEL (nodeLabelCol)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_pure_dynamic
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      DYNAMIC LABEL (nodeLabelCol)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
# Property graph with dynamic properties but no dynamic labels.
create property graph aml_only_dynamic_props
  node tables(
    DynamicGraphNode
     KEY(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_only_dynamic_props
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=177-199
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=177-199
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=177-199
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=177-199
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
+-label_list=
| +-GraphElementLabel(parse_location=163-199, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=177-199, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=177-199, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=177-199, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=177-199, name="nodeJsonProp", type=JSON)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_only_dynamic_props
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE PROPERTY GRAPH aml_only_dynamic_props
  NODE TABLES(
    DynamicGraphNode
      KEY(id)
      LABEL DynamicGraphNode PROPERTIES(
        id,
        nodeLabelCol,
        code,
        nodeJsonProp)
      DYNAMIC PROPERTIES (nodeJsonProp)
  );
==

[default no_run_sqlbuilder]

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_static_node_dynamic_edge
  node tables(
    DynamicGraphNode
     KEY(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL Entity PROPERTIES(code)
  )
  edge tables(
    DynamicGraphEdge
     KEY(id)
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL CONNECTION Properties (category)
     DYNAMIC LABEL (edgeLabelCol)
     DYNAMIC PROPERTIES (edgeJsonProp)
  )
--
ERROR: If a dynamically labeled edge table exists, any defined node table must also be dynamically labeled [at 1:1]
create property graph aml_static_node_dynamic_edge
^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_dynamic_node_static_edge
  node tables(
    DynamicGraphNode
     KEY(id)
     DYNAMIC LABEL (nodeLabelCol)
  )
  edge tables(
    DynamicGraphEdge
     KEY(id)
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
     DEFAULT LABEL PROPERTIES ALL COLUMNS
     LABEL CONNECTION Properties (category)
  )
--
ERROR: If a dynamically labeled node table exists, any defined edge table must also be dynamically labeled [at 1:1]
create property graph aml_dynamic_node_static_edge
^
==

# b/391906588: Single Dynamic Node with multiple Static Edges (Allowed)
[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_LABEL_EXTENSION_IN_DDL]
create property graph aml_dynamic_node_static_edges
  node tables(
    DynamicGraphNode
     KEY(id)
     DYNAMIC LABEL (nodeLabelCol)
  )
  edge tables(
    Transfer
     KEY(txnId)
     SOURCE KEY(fromAccountId) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(toAccountId) REFERENCES DynamicGraphNode(id),
    PersonOwnAccount
     KEY(personId, accountId)
     SOURCE KEY(personId) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(accountId) REFERENCES DynamicGraphNode(id)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_dynamic_node_static_edges
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[DynamicGraphNode]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=100-100
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=100-100
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=100-100
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=100-100
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|     +-GraphDynamicLabelSpecification
|       +-label_expr=
|         +-ColumnRef(type=STRING, column=DynamicGraphNode.nodeLabelCol#2)
+-edge_table_list=
| +-GraphElementTable
| | +-alias="Transfer"
| | +-input_scan=
| | | +-TableScan(column_list=Transfer.[txnId#5, fromAccountId#6, toAccountId#7, time#8, amount#9], table=Transfer, column_index_list=[0, 1, 2, 3, 4])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Transfer.txnId#5)
| | +-source_node_reference=
| | | +-GraphNodeTableReference
| | |   +-node_table_identifier="DynamicGraphNode"
| | |   +-edge_table_column_list=
| | |   | +-ColumnRef(type=INT64, column=Transfer.fromAccountId#6)
| | |   +-node_table_column_list=
| | |     +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
| | +-dest_node_reference=
| | | +-GraphNodeTableReference
| | |   +-node_table_identifier="DynamicGraphNode"
| | |   +-edge_table_column_list=
| | |   | +-ColumnRef(type=INT64, column=Transfer.toAccountId#7)
| | |   +-node_table_column_list=
| | |     +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
| | +-label_name_list=[Transfer]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=311-311
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Transfer.txnId#5)
| |   | +-sql="txnId"
| |   | +-property_declaration_name="txnId"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=311-311
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Transfer.fromAccountId#6)
| |   | +-sql="fromAccountId"
| |   | +-property_declaration_name="fromAccountId"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=311-311
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Transfer.toAccountId#7)
| |   | +-sql="toAccountId"
| |   | +-property_declaration_name="toAccountId"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=311-311
| |   | +-expr=
| |   | | +-ColumnRef(type=TIMESTAMP, column=Transfer.time#8)
| |   | +-sql="time"
| |   | +-property_declaration_name="time"
| |   +-GraphPropertyDefinition
| |     +-parse_location=311-311
| |     +-expr=
| |     | +-ColumnRef(type=UINT64, column=Transfer.amount#9)
| |     +-sql="amount"
| |     +-property_declaration_name="amount"
| +-GraphElementTable
|   +-alias="PersonOwnAccount"
|   +-input_scan=
|   | +-TableScan(column_list=PersonOwnAccount.[personId#10, accountId#11, startDate#12], table=PersonOwnAccount, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#10)
|   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#11)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#10)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#11)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicGraphNode.id#1)
|   +-label_name_list=[PersonOwnAccount]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=485-485
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.personId#10)
|     | +-sql="personId"
|     | +-property_declaration_name="personId"
|     +-GraphPropertyDefinition
|     | +-parse_location=485-485
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=PersonOwnAccount.accountId#11)
|     | +-sql="accountId"
|     | +-property_declaration_name="accountId"
|     +-GraphPropertyDefinition
|       +-parse_location=485-485
|       +-expr=
|       | +-ColumnRef(type=TIMESTAMP, column=PersonOwnAccount.startDate#12)
|       +-sql="startDate"
|       +-property_declaration_name="startDate"
+-label_list=
| +-GraphElementLabel(parse_location=100-100, name="DynamicGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=311-311, name="Transfer", property_declaration_name_list=[txnId, fromAccountId, toAccountId, time, amount])
| +-GraphElementLabel(parse_location=485-485, name="PersonOwnAccount", property_declaration_name_list=[personId, accountId, startDate])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=100-100, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=100-100, name="nodeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=100-100, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=100-100, name="nodeJsonProp", type=JSON)
  +-GraphPropertyDeclaration(parse_location=311-311, name="txnId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=311-311, name="fromAccountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=311-311, name="toAccountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=311-311, name="time", type=TIMESTAMP)
  +-GraphPropertyDeclaration(parse_location=311-311, name="amount", type=UINT64)
  +-GraphPropertyDeclaration(parse_location=485-485, name="personId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=485-485, name="accountId", type=INT64)
  +-GraphPropertyDeclaration(parse_location=485-485, name="startDate", type=TIMESTAMP)
==

# b/391906588: Multiple static Nodes with single Dynamic Edge (Allowed)
[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_LABEL_EXTENSION_IN_DDL]
create property graph aml_static_nodes_dynamic_edge
  node tables(
    Person,
    Account
  )
  edge tables(
    DynamicGraphEdge
     KEY(id)
     SOURCE KEY(id) REFERENCES Person(id)
     DESTINATION KEY(dst_id) REFERENCES Account(id)
     DYNAMIC LABEL (edgeLabelCol)
  )
--

CreatePropertyGraphStmt
+-name_path=aml_static_nodes_dynamic_edge
+-node_table_list=
| +-GraphElementTable
| | +-alias="Person"
| | +-input_scan=
| | | +-TableScan(column_list=Person.[id#1, name#2, gender#3, birthday#4, email#5, age#6, data#7], table=Person, column_index_list=[0, 1, 2, 3, 4, 5, 6])
| | +-key_list=
| | | +-ColumnRef(type=INT64, column=Person.id#1)
| | +-label_name_list=[Person]
| | +-property_definition_list=
| |   +-GraphPropertyDefinition
| |   | +-parse_location=77-77
| |   | +-expr=
| |   | | +-ColumnRef(type=INT64, column=Person.id#1)
| |   | +-sql="id"
| |   | +-property_declaration_name="id"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=77-77
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.name#2)
| |   | +-sql="name"
| |   | +-property_declaration_name="name"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=77-77
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.gender#3)
| |   | +-sql="gender"
| |   | +-property_declaration_name="gender"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=77-77
| |   | +-expr=
| |   | | +-ColumnRef(type=DATE, column=Person.birthday#4)
| |   | +-sql="birthday"
| |   | +-property_declaration_name="birthday"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=77-77
| |   | +-expr=
| |   | | +-ColumnRef(type=STRING, column=Person.email#5)
| |   | +-sql="email"
| |   | +-property_declaration_name="email"
| |   +-GraphPropertyDefinition
| |   | +-parse_location=77-77
| |   | +-expr=
| |   | | +-ColumnRef(type=UINT32, column=Person.age#6)
| |   | +-sql="age"
| |   | +-property_declaration_name="age"
| |   +-GraphPropertyDefinition
| |     +-parse_location=77-77
| |     +-expr=
| |     | +-ColumnRef(type=BYTES, column=Person.data#7)
| |     +-sql="data"
| |     +-property_declaration_name="data"
| +-GraphElementTable
|   +-alias="Account"
|   +-input_scan=
|   | +-TableScan(column_list=Account.[id#8, name#9, balance#10], table=Account, column_index_list=[0, 1, 2])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[Account]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=90-90
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=Account.id#8)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=90-90
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=Account.name#9)
|     | +-sql="name"
|     | +-property_declaration_name="name"
|     +-GraphPropertyDefinition
|       +-parse_location=90-90
|       +-expr=
|       | +-ColumnRef(type=UINT64, column=Account.balance#10)
|       +-sql="balance"
|       +-property_declaration_name="balance"
+-edge_table_list=
| +-GraphElementTable
|   +-alias="DynamicGraphEdge"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicGraphEdge.[id#11, dst_id#12, edgeLabelCol#13, category#14, edgeJsonProp#15], table=DynamicGraphEdge, column_index_list=[0, 1, 2, 3, 4])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicGraphEdge.id#11)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="Person"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicGraphEdge.id#11)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Person.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="Account"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicGraphEdge.dst_id#12)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=Account.id#8)
|   +-label_name_list=[DynamicGraphEdge]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=237-237
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphEdge.id#11)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=237-237
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicGraphEdge.dst_id#12)
|   | | +-sql="dst_id"
|   | | +-property_declaration_name="dst_id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=237-237
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphEdge.edgeLabelCol#13)
|   | | +-sql="edgeLabelCol"
|   | | +-property_declaration_name="edgeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=237-237
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicGraphEdge.category#14)
|   | | +-sql="category"
|   | | +-property_declaration_name="category"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=237-237
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicGraphEdge.edgeJsonProp#15)
|   |   +-sql="edgeJsonProp"
|   |   +-property_declaration_name="edgeJsonProp"
|   +-dynamic_label=
|     +-GraphDynamicLabelSpecification
|       +-label_expr=
|         +-ColumnRef(type=STRING, column=DynamicGraphEdge.edgeLabelCol#13)
+-label_list=
| +-GraphElementLabel(parse_location=77-77, name="Person", property_declaration_name_list=[id, name, gender, birthday, email, age, data])
| +-GraphElementLabel(parse_location=90-90, name="Account", property_declaration_name_list=[id, name, balance])
| +-GraphElementLabel(parse_location=237-237, name="DynamicGraphEdge", property_declaration_name_list=[id, dst_id, edgeLabelCol, category, edgeJsonProp])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=77-77, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=77-77, name="name", type=STRING)
  +-GraphPropertyDeclaration(parse_location=77-77, name="gender", type=STRING)
  +-GraphPropertyDeclaration(parse_location=77-77, name="birthday", type=DATE)
  +-GraphPropertyDeclaration(parse_location=77-77, name="email", type=STRING)
  +-GraphPropertyDeclaration(parse_location=77-77, name="age", type=UINT32)
  +-GraphPropertyDeclaration(parse_location=77-77, name="data", type=BYTES)
  +-GraphPropertyDeclaration(parse_location=90-90, name="balance", type=UINT64)
  +-GraphPropertyDeclaration(parse_location=237-237, name="dst_id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=237-237, name="edgeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=237-237, name="category", type=STRING)
  +-GraphPropertyDeclaration(parse_location=237-237, name="edgeJsonProp", type=JSON)
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_multiple_nodes_with_dynamic
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (nodeLabelCol),
    Person
  )
--
ERROR: Cannot define more than one node table when using dynamic labels [at 2:14]
  node tables(
             ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_multiple_edges_with_dynamic
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
  edge tables(
    DynamicGraphEdge
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
     DYNAMIC LABEL (edgeLabelCol),
    Transfer
     SOURCE KEY(fromAccountId) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(toAccountId) REFERENCES DynamicGraphNode(id)
  )
--
ERROR: Cannot define more than one edge table when using dynamic labels [at 7:14]
  edge tables(
             ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
# Non-string dynamic labels are not allowed.
create property graph aml_bad_dynamic_label_type
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (code)
  )
--

ERROR: DYNAMIC LABEL clause must hold expression of type STRING or ARRAY<STRING>, but was of type INT64 [at 5:21]
     DYNAMIC LABEL (code)
                    ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
# Non-JSON type dynamic properties are not allowed.
create property graph aml_bad_dynamic_props_type
  node tables(
    DynamicGraphNode
     DYNAMIC PROPERTIES (code)
  )
--

ERROR: DYNAMIC PROPERTIES clause must hold expression of type JSON, but was of type INT64 [at 5:26]
     DYNAMIC PROPERTIES (code)
                         ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
# Dynamic label with expression
create property graph aml_dynamic_label_with_expr
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (CONCAT(nodeLabelCol, "suffix"))
  )
--

ERROR: DYNAMIC LABEL clause must hold direct column reference [at 5:21]
     DYNAMIC LABEL (CONCAT(nodeLabelCol, "suffix"))
                    ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
create property graph aml_dynamic_properties_with_expr
  node tables(
    DynamicGraphNode
     DYNAMIC PROPERTIES (nodeJsonProp.name)
  )
--

ERROR: DYNAMIC PROPERTIES clause must hold direct column reference [at 4:26]
     DYNAMIC PROPERTIES (nodeJsonProp.name)
                         ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
# Multiple node tables with dynamic labels are not allowed in the same graph.
create property graph aml_bad_dynamic_label_type
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (nodeLabelCol),
    DynamicGraphEdge
     DYNAMIC LABEL (edgeLabelCol)
  )
--
ERROR: Only one node table can be assigned a dynamic label [at 7:21]
     DYNAMIC LABEL (edgeLabelCol)
                    ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL]
# Multiple edge tables with dynamic labels are not allowed in the same graph.
create property graph aml_bad_dynamic_label_type
  node tables(
    DynamicGraphNode
  )
  edge tables(
    DynamicGraphNode
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(id) REFERENCES DynamicGraphNode(id)
     DYNAMIC LABEL (nodeLabelCol),
    DynamicGraphEdge
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
     DYNAMIC LABEL (edgeLabelCol)
  )
--
ERROR: Only one edge table can be assigned a dynamic label [at 14:21]
     DYNAMIC LABEL (edgeLabelCol)
                    ^
==

# Dynamic label without flag
create property graph aml_dynamic_label_no_flag
  node tables(
    DynamicGraphNode
     DYNAMIC LABEL (nodeLabelCol)
  )
--
ERROR: Dynamic label is not supported [at 4:21]
     DYNAMIC LABEL (nodeLabelCol)
                    ^
==

# Dynamic properties without flag
create property graph aml_dynamic_props_no_flag
  node tables(
    DynamicGraphNode
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--
ERROR: Dynamic properties are not supported [at 4:26]
     DYNAMIC PROPERTIES (nodeJsonProp)
                         ^

==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
# Dynamic multi label node only.
create property graph aml_pure_dynamic_multi
  node tables(
    DynamicMultiLabelGraphNode
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--
CreatePropertyGraphStmt
+-name_path=aml_pure_dynamic_multi
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicMultiLabelGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicMultiLabelGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicMultiLabelGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-label_name_list=[DynamicMultiLabelGraphNode]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=123-123
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=123-123
|   | | +-expr=
|   | | | +-ColumnRef(type=ARRAY<STRING>, column=DynamicMultiLabelGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=123-123
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=123-123
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicMultiLabelGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=ARRAY<STRING>, column=DynamicMultiLabelGraphNode.nodeLabelCol#2)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicMultiLabelGraphNode.nodeJsonProp#4)
+-label_list=
| +-GraphElementLabel(parse_location=123-123, name="DynamicMultiLabelGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=123-123, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=123-123, name="nodeLabelCol", type=ARRAY<STRING>)
  +-GraphPropertyDeclaration(parse_location=123-123, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=123-123, name="nodeJsonProp", type=JSON)

==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
# Dynamic multi label node and dynamic single label edge.
create property graph aml_pure_dynamic_multi
  node tables(
    DynamicMultiLabelGraphNode
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
  edge tables(
    DynamicSingleLabelGraphEdge
     SOURCE KEY(id) REFERENCES DynamicMultiLabelGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicMultiLabelGraphNode(id)
     DYNAMIC LABEL (edgeLabelCol)
     DYNAMIC PROPERTIES (edgeJsonProp)
  )
--
CreatePropertyGraphStmt
+-name_path=aml_pure_dynamic_multi
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicMultiLabelGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicMultiLabelGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicMultiLabelGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-label_name_list=[DynamicMultiLabelGraphNode]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=148-148
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=148-148
|   | | +-expr=
|   | | | +-ColumnRef(type=ARRAY<STRING>, column=DynamicMultiLabelGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=148-148
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=148-148
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicMultiLabelGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=ARRAY<STRING>, column=DynamicMultiLabelGraphNode.nodeLabelCol#2)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicMultiLabelGraphNode.nodeJsonProp#4)
+-edge_table_list=
| +-GraphElementTable
|   +-alias="DynamicSingleLabelGraphEdge"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicSingleLabelGraphEdge.[id#5, dst_id#6, edgeLabelCol#7, category#8, edgeJsonProp#9], table=DynamicSingleLabelGraphEdge, column_index_list=[0, 1, 2, 3, 4])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.id#5)
|   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.dst_id#6)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicMultiLabelGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.id#5)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicMultiLabelGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.dst_id#6)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-label_name_list=[DynamicSingleLabelGraphEdge]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=405-405
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.id#5)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=405-405
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.dst_id#6)
|   | | +-sql="dst_id"
|   | | +-property_declaration_name="dst_id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=405-405
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicSingleLabelGraphEdge.edgeLabelCol#7)
|   | | +-sql="edgeLabelCol"
|   | | +-property_declaration_name="edgeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=405-405
|   | | +-expr=
|   | | | +-ColumnRef(type=STRING, column=DynamicSingleLabelGraphEdge.category#8)
|   | | +-sql="category"
|   | | +-property_declaration_name="category"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=405-405
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicSingleLabelGraphEdge.edgeJsonProp#9)
|   |   +-sql="edgeJsonProp"
|   |   +-property_declaration_name="edgeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=STRING, column=DynamicSingleLabelGraphEdge.edgeLabelCol#7)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicSingleLabelGraphEdge.edgeJsonProp#9)
+-label_list=
| +-GraphElementLabel(parse_location=148-148, name="DynamicMultiLabelGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=405-405, name="DynamicSingleLabelGraphEdge", property_declaration_name_list=[id, dst_id, edgeLabelCol, category, edgeJsonProp])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=148-148, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=148-148, name="nodeLabelCol", type=ARRAY<STRING>)
  +-GraphPropertyDeclaration(parse_location=148-148, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=148-148, name="nodeJsonProp", type=JSON)
  +-GraphPropertyDeclaration(parse_location=405-405, name="dst_id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=405-405, name="edgeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=405-405, name="category", type=STRING)
  +-GraphPropertyDeclaration(parse_location=405-405, name="edgeJsonProp", type=JSON)

==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES,+SQL_GRAPH_DYNAMIC_LABEL_EXTENSION_IN_DDL]
# Dynamic multi label node and static label edge.
create property graph aml_pure_dynamic_multi
  node tables(
    DynamicMultiLabelGraphNode
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
  edge tables(
    DynamicSingleLabelGraphEdge
     SOURCE KEY(id) REFERENCES DynamicMultiLabelGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicMultiLabelGraphNode(id)
  )
--
CreatePropertyGraphStmt
+-name_path=aml_pure_dynamic_multi
+-node_table_list=
| +-GraphElementTable
|   +-alias="DynamicMultiLabelGraphNode"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicMultiLabelGraphNode.[id#1, nodeLabelCol#2, code#3, nodeJsonProp#4], table=DynamicMultiLabelGraphNode, column_index_list=[0, 1, 2, 3])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-label_name_list=[DynamicMultiLabelGraphNode]
|   +-property_definition_list=
|   | +-GraphPropertyDefinition
|   | | +-parse_location=140-140
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   | | +-sql="id"
|   | | +-property_declaration_name="id"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=140-140
|   | | +-expr=
|   | | | +-ColumnRef(type=ARRAY<STRING>, column=DynamicMultiLabelGraphNode.nodeLabelCol#2)
|   | | +-sql="nodeLabelCol"
|   | | +-property_declaration_name="nodeLabelCol"
|   | +-GraphPropertyDefinition
|   | | +-parse_location=140-140
|   | | +-expr=
|   | | | +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.code#3)
|   | | +-sql="code"
|   | | +-property_declaration_name="code"
|   | +-GraphPropertyDefinition
|   |   +-parse_location=140-140
|   |   +-expr=
|   |   | +-ColumnRef(type=JSON, column=DynamicMultiLabelGraphNode.nodeJsonProp#4)
|   |   +-sql="nodeJsonProp"
|   |   +-property_declaration_name="nodeJsonProp"
|   +-dynamic_label=
|   | +-GraphDynamicLabelSpecification
|   |   +-label_expr=
|   |     +-ColumnRef(type=ARRAY<STRING>, column=DynamicMultiLabelGraphNode.nodeLabelCol#2)
|   +-dynamic_properties=
|     +-GraphDynamicPropertiesSpecification
|       +-property_expr=
|         +-ColumnRef(type=JSON, column=DynamicMultiLabelGraphNode.nodeJsonProp#4)
+-edge_table_list=
| +-GraphElementTable
|   +-alias="DynamicSingleLabelGraphEdge"
|   +-input_scan=
|   | +-TableScan(column_list=DynamicSingleLabelGraphEdge.[id#5, dst_id#6, edgeLabelCol#7, category#8, edgeJsonProp#9], table=DynamicSingleLabelGraphEdge, column_index_list=[0, 1, 2, 3, 4])
|   +-key_list=
|   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.id#5)
|   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.dst_id#6)
|   +-source_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicMultiLabelGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.id#5)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-dest_node_reference=
|   | +-GraphNodeTableReference
|   |   +-node_table_identifier="DynamicMultiLabelGraphNode"
|   |   +-edge_table_column_list=
|   |   | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.dst_id#6)
|   |   +-node_table_column_list=
|   |     +-ColumnRef(type=INT64, column=DynamicMultiLabelGraphNode.id#1)
|   +-label_name_list=[DynamicSingleLabelGraphEdge]
|   +-property_definition_list=
|     +-GraphPropertyDefinition
|     | +-parse_location=397-397
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.id#5)
|     | +-sql="id"
|     | +-property_declaration_name="id"
|     +-GraphPropertyDefinition
|     | +-parse_location=397-397
|     | +-expr=
|     | | +-ColumnRef(type=INT64, column=DynamicSingleLabelGraphEdge.dst_id#6)
|     | +-sql="dst_id"
|     | +-property_declaration_name="dst_id"
|     +-GraphPropertyDefinition
|     | +-parse_location=397-397
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=DynamicSingleLabelGraphEdge.edgeLabelCol#7)
|     | +-sql="edgeLabelCol"
|     | +-property_declaration_name="edgeLabelCol"
|     +-GraphPropertyDefinition
|     | +-parse_location=397-397
|     | +-expr=
|     | | +-ColumnRef(type=STRING, column=DynamicSingleLabelGraphEdge.category#8)
|     | +-sql="category"
|     | +-property_declaration_name="category"
|     +-GraphPropertyDefinition
|       +-parse_location=397-397
|       +-expr=
|       | +-ColumnRef(type=JSON, column=DynamicSingleLabelGraphEdge.edgeJsonProp#9)
|       +-sql="edgeJsonProp"
|       +-property_declaration_name="edgeJsonProp"
+-label_list=
| +-GraphElementLabel(parse_location=140-140, name="DynamicMultiLabelGraphNode", property_declaration_name_list=[id, nodeLabelCol, code, nodeJsonProp])
| +-GraphElementLabel(parse_location=397-397, name="DynamicSingleLabelGraphEdge", property_declaration_name_list=[id, dst_id, edgeLabelCol, category, edgeJsonProp])
+-property_declaration_list=
  +-GraphPropertyDeclaration(parse_location=140-140, name="id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=140-140, name="nodeLabelCol", type=ARRAY<STRING>)
  +-GraphPropertyDeclaration(parse_location=140-140, name="code", type=INT64)
  +-GraphPropertyDeclaration(parse_location=140-140, name="nodeJsonProp", type=JSON)
  +-GraphPropertyDeclaration(parse_location=397-397, name="dst_id", type=INT64)
  +-GraphPropertyDeclaration(parse_location=397-397, name="edgeLabelCol", type=STRING)
  +-GraphPropertyDeclaration(parse_location=397-397, name="category", type=STRING)
  +-GraphPropertyDeclaration(parse_location=397-397, name="edgeJsonProp", type=JSON)

==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
# Dynamic multi label edges will report error.
# Use the node table to fake an edge table to trigger the error.
create property graph aml_pure_dynamic_multi
  node tables(
    DynamicGraphNode
  )
  edge tables(
    DynamicMultiLabelGraphNode AS edge
     SOURCE KEY(id) REFERENCES DynamicGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicGraphNode(id)
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--
ERROR: DYNAMIC LABEL clause must hold expression of type STRING for edge tables. ARRAY<STRING> expression for edge tables is not supported [at 11:21]
     DYNAMIC LABEL (nodeLabelCol)
                    ^
==

[language_features=NONE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
# Dynamic multi label edges will report error.
# Use the node table to fake an edge table to trigger the error.
create property graph aml_pure_dynamic_multi
  node tables(
    DynamicMultiLabelGraphNode
  )
  edge tables(
    DynamicMultiLabelGraphNode AS edge
     SOURCE KEY(id) REFERENCES DynamicMultiLabelGraphNode(id)
     DESTINATION KEY(dst_id) REFERENCES DynamicMultiLabelGraphNode(id)
     DYNAMIC LABEL (nodeLabelCol)
     DYNAMIC PROPERTIES (nodeJsonProp)
  )
--
ERROR: DYNAMIC LABEL clause must hold expression of type STRING for edge tables. ARRAY<STRING> expression for edge tables is not supported [at 11:21]
     DYNAMIC LABEL (nodeLabelCol)
                    ^
==
