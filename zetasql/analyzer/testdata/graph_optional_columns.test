[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
[default no_test_extract_table_names]

# Property reference on exported graph element
SELECT a.id
  from graph_table(
    aml
    match (a IS Account)
  )
--
QueryStmt
+-output_column_list=
| +-$query.id#2 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#2]
    +-expr_list=
    | +-id#2 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
    |     +-property=id(INT64)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$element_table.a#1]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=[$element_table.a#1]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=[$element_table.a#1]
                +-input_scan_list=
                | +-GraphNodeScan
                |   +-column_list=[$element_table.a#1]
                |   +-label_expr=
                |   | +-GraphLabel(parse_location=103-110, label=aml.Account)
                |   +-target_element_table_list=[aml.Account]
                +-head=$element_table.a#1
                +-tail=$element_table.a#1
==

# Empty COLUMNS clause
SELECT a.id
  from graph_table(
    aml
    match (a IS Account)
    COLUMNS()
  )
--
ERROR: Syntax error: Unexpected ")" [at 5:13]
    COLUMNS()
            ^
==

# Graph element projected out of subquery
SELECT a.name as name FROM
(SELECT a FROM
(SELECT *
  from graph_table(
    aml
    match (a IS Person)
  )
)
)
--
QueryStmt
+-output_column_list=
| +-$query.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.name#2]
    +-expr_list=
    | +-name#2 :=
    |   +-GraphGetElementProperty
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
    |     +-property=name(STRING)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$element_table.a#1]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$element_table.a#1]
            +-input_scan=
              +-GraphTableScan
                +-column_list=[$element_table.a#1]
                +-property_graph=aml
                +-input_scan=
                  +-GraphScan
                    +-column_list=[$element_table.a#1]
                    +-input_scan_list=
                      +-GraphPathScan
                        +-column_list=[$element_table.a#1]
                        +-input_scan_list=
                        | +-GraphNodeScan
                        |   +-column_list=[$element_table.a#1]
                        |   +-label_expr=
                        |   | +-GraphLabel(parse_location=96-102, label=aml.Person)
                        |   +-target_element_table_list=[aml.Person]
                        +-head=$element_table.a#1
                        +-tail=$element_table.a#1
==

# Dotstar expansion on GRAPH_TABLE, `a` is multiply declared here
SELECT 1 FROM (
SELECT * from graph_table(
    aml
    match (a)-[b]-(a), (c)-[d]-(a)))
--
QueryStmt
+-output_column_list=
| +-$query.$col1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#7]
    +-expr_list=
    | +-$col1#7 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=$element_table.[a#1, b#2, c#4, d#5]
        +-input_scan=
          +-GraphTableScan
            +-column_list=$element_table.[a#1, b#2, c#4, d#5]
            +-property_graph=aml
            +-input_scan=
              +-GraphScan
                +-column_list=$element_table.[a#1, b#2, a#3, c#4, d#5, a#6]
                +-input_scan_list=
                | +-GraphPathScan
                | | +-column_list=$element_table.[a#1, b#2, a#3]
                | | +-input_scan_list=
                | | | +-GraphNodeScan
                | | | | +-column_list=[$element_table.a#1]
                | | | | +-label_expr=
                | | | | | +-GraphLabelNaryExpr
                | | | | |   +-op=AND
                | | | | |   +-operand_list=
                | | | | |     +-GraphLabelNaryExpr
                | | | | |     | +-op=AND
                | | | | |     | +-operand_list=
                | | | | |     |   +-GraphLabelNaryExpr
                | | | | |     |   | +-op=OR
                | | | | |     |   | +-operand_list=
                | | | | |     |   |   +-GraphWildCardLabel
                | | | | |     |   |   +-GraphLabelNaryExpr
                | | | | |     |   |     +-op=NOT
                | | | | |     |   |     +-operand_list=
                | | | | |     |   |       +-GraphWildCardLabel
                | | | | |     |   +-GraphLabelNaryExpr
                | | | | |     |     +-op=OR
                | | | | |     |     +-operand_list=
                | | | | |     |       +-GraphWildCardLabel
                | | | | |     |       +-GraphLabelNaryExpr
                | | | | |     |         +-op=NOT
                | | | | |     |         +-operand_list=
                | | | | |     |           +-GraphWildCardLabel
                | | | | |     +-GraphLabelNaryExpr
                | | | | |       +-op=OR
                | | | | |       +-operand_list=
                | | | | |         +-GraphWildCardLabel
                | | | | |         +-GraphLabelNaryExpr
                | | | | |           +-op=NOT
                | | | | |           +-operand_list=
                | | | | |             +-GraphWildCardLabel
                | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                | | | +-GraphEdgeScan
                | | | | +-column_list=[$element_table.b#2]
                | | | | +-label_expr=
                | | | | | +-GraphLabelNaryExpr
                | | | | |   +-op=OR
                | | | | |   +-operand_list=
                | | | | |     +-GraphWildCardLabel
                | | | | |     +-GraphLabelNaryExpr
                | | | | |       +-op=NOT
                | | | | |       +-operand_list=
                | | | | |         +-GraphWildCardLabel
                | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                | | | | +-orientation=ANY
                | | | +-GraphNodeScan
                | | |   +-column_list=[$element_table.a#3]
                | | |   +-label_expr=
                | | |   | +-GraphLabelNaryExpr
                | | |   |   +-op=AND
                | | |   |   +-operand_list=
                | | |   |     +-GraphLabelNaryExpr
                | | |   |     | +-op=AND
                | | |   |     | +-operand_list=
                | | |   |     |   +-GraphLabelNaryExpr
                | | |   |     |   | +-op=OR
                | | |   |     |   | +-operand_list=
                | | |   |     |   |   +-GraphWildCardLabel
                | | |   |     |   |   +-GraphLabelNaryExpr
                | | |   |     |   |     +-op=NOT
                | | |   |     |   |     +-operand_list=
                | | |   |     |   |       +-GraphWildCardLabel
                | | |   |     |   +-GraphLabelNaryExpr
                | | |   |     |     +-op=OR
                | | |   |     |     +-operand_list=
                | | |   |     |       +-GraphWildCardLabel
                | | |   |     |       +-GraphLabelNaryExpr
                | | |   |     |         +-op=NOT
                | | |   |     |         +-operand_list=
                | | |   |     |           +-GraphWildCardLabel
                | | |   |     +-GraphLabelNaryExpr
                | | |   |       +-op=OR
                | | |   |       +-operand_list=
                | | |   |         +-GraphWildCardLabel
                | | |   |         +-GraphLabelNaryExpr
                | | |   |           +-op=NOT
                | | |   |           +-operand_list=
                | | |   |             +-GraphWildCardLabel
                | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                | | +-filter_expr=
                | | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                | | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                | | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#3)
                | | +-head=$element_table.a#1
                | | +-tail=$element_table.a#3
                | +-GraphPathScan
                |   +-column_list=$element_table.[c#4, d#5, a#6]
                |   +-input_scan_list=
                |   | +-GraphNodeScan
                |   | | +-column_list=[$element_table.c#4]
                |   | | +-label_expr=
                |   | | | +-GraphLabelNaryExpr
                |   | | |   +-op=OR
                |   | | |   +-operand_list=
                |   | | |     +-GraphWildCardLabel
                |   | | |     +-GraphLabelNaryExpr
                |   | | |       +-op=NOT
                |   | | |       +-operand_list=
                |   | | |         +-GraphWildCardLabel
                |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                |   | +-GraphEdgeScan
                |   | | +-column_list=[$element_table.d#5]
                |   | | +-label_expr=
                |   | | | +-GraphLabelNaryExpr
                |   | | |   +-op=OR
                |   | | |   +-operand_list=
                |   | | |     +-GraphWildCardLabel
                |   | | |     +-GraphLabelNaryExpr
                |   | | |       +-op=NOT
                |   | | |       +-operand_list=
                |   | | |         +-GraphWildCardLabel
                |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                |   | | +-orientation=ANY
                |   | +-GraphNodeScan
                |   |   +-column_list=[$element_table.a#6]
                |   |   +-label_expr=
                |   |   | +-GraphLabelNaryExpr
                |   |   |   +-op=AND
                |   |   |   +-operand_list=
                |   |   |     +-GraphLabelNaryExpr
                |   |   |     | +-op=AND
                |   |   |     | +-operand_list=
                |   |   |     |   +-GraphLabelNaryExpr
                |   |   |     |   | +-op=OR
                |   |   |     |   | +-operand_list=
                |   |   |     |   |   +-GraphWildCardLabel
                |   |   |     |   |   +-GraphLabelNaryExpr
                |   |   |     |   |     +-op=NOT
                |   |   |     |   |     +-operand_list=
                |   |   |     |   |       +-GraphWildCardLabel
                |   |   |     |   +-GraphLabelNaryExpr
                |   |   |     |     +-op=OR
                |   |   |     |     +-operand_list=
                |   |   |     |       +-GraphWildCardLabel
                |   |   |     |       +-GraphLabelNaryExpr
                |   |   |     |         +-op=NOT
                |   |   |     |         +-operand_list=
                |   |   |     |           +-GraphWildCardLabel
                |   |   |     +-GraphLabelNaryExpr
                |   |   |       +-op=OR
                |   |   |       +-operand_list=
                |   |   |         +-GraphWildCardLabel
                |   |   |         +-GraphLabelNaryExpr
                |   |   |           +-op=NOT
                |   |   |           +-operand_list=
                |   |   |             +-GraphWildCardLabel
                |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                |   +-head=$element_table.c#4
                |   +-tail=$element_table.a#6
                +-filter_expr=
                  +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                    +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#6)
==

# Graph element referenced in COLUMNS clause
SELECT a.name
  from graph_table(
    aml
    match (a IS Person)
    COLUMNS(a)
  )
--
QueryStmt
+-output_column_list=
| +-$query.name#3 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.name#3]
    +-expr_list=
    | +-name#3 :=
    |   +-GraphGetElementProperty
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$graph_table.a#2)
    |     +-property=name(STRING)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#2]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.a#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.a#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.a#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=58-64, label=aml.Person)
        |       |   +-target_element_table_list=[aml.Person]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.a#1
        +-shape_expr_list=
          +-a#2 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
==

# Graph element referenced in WHERE clause subquery
SELECT a.id FROM GRAPH_TABLE(
aml
MATCH (a WHERE EXISTS(SELECT a))
)
--
QueryStmt
+-output_column_list=
| +-$query.id#3 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#3]
    +-expr_list=
    | +-id#3 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    |     +-property=id(INT64)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$element_table.a#1]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=[$element_table.a#1]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=[$element_table.a#1]
                +-input_scan_list=
                | +-GraphNodeScan
                |   +-column_list=[$element_table.a#1]
                |   +-filter_expr=
                |   | +-SubqueryExpr
                |   |   +-type=BOOL
                |   |   +-subquery_type=EXISTS
                |   |   +-parameter_list=
                |   |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                |   |   +-subquery=
                |   |     +-ProjectScan
                |   |       +-column_list=[$expr_subquery.a#2]
                |   |       +-expr_list=
                |   |       | +-a#2 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1, is_correlated=TRUE)
                |   |       +-input_scan=
                |   |         +-SingleRowScan
                |   +-label_expr=
                |   | +-GraphLabelNaryExpr
                |   |   +-op=OR
                |   |   +-operand_list=
                |   |     +-GraphWildCardLabel
                |   |     +-GraphLabelNaryExpr
                |   |       +-op=NOT
                |   |       +-operand_list=
                |   |         +-GraphWildCardLabel
                |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                +-head=$element_table.a#1
                +-tail=$element_table.a#1
==

# Dotstar expansion on GRAPH_TABLE
SELECT a.id FROM (
SELECT gt.*
  from graph_table(
    aml
    match (a)-[b]-(c)
  ) gt )
--
QueryStmt
+-output_column_list=
| +-$query.id#4 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#4]
    +-expr_list=
    | +-id#4 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    |     +-property=id(INT64)
    +-input_scan=
      +-ProjectScan
        +-column_list=$element_table.[a#1, b#2, c#3]
        +-input_scan=
          +-GraphTableScan
            +-column_list=$element_table.[a#1, b#2, c#3]
            +-property_graph=aml
            +-input_scan=
              +-GraphScan
                +-column_list=$element_table.[a#1, b#2, c#3]
                +-input_scan_list=
                  +-GraphPathScan
                    +-column_list=$element_table.[a#1, b#2, c#3]
                    +-input_scan_list=
                    | +-GraphNodeScan
                    | | +-column_list=[$element_table.a#1]
                    | | +-label_expr=
                    | | | +-GraphLabelNaryExpr
                    | | |   +-op=OR
                    | | |   +-operand_list=
                    | | |     +-GraphWildCardLabel
                    | | |     +-GraphLabelNaryExpr
                    | | |       +-op=NOT
                    | | |       +-operand_list=
                    | | |         +-GraphWildCardLabel
                    | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    | +-GraphEdgeScan
                    | | +-column_list=[$element_table.b#2]
                    | | +-label_expr=
                    | | | +-GraphLabelNaryExpr
                    | | |   +-op=OR
                    | | |   +-operand_list=
                    | | |     +-GraphWildCardLabel
                    | | |     +-GraphLabelNaryExpr
                    | | |       +-op=NOT
                    | | |       +-operand_list=
                    | | |         +-GraphWildCardLabel
                    | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                    | | +-orientation=ANY
                    | +-GraphNodeScan
                    |   +-column_list=[$element_table.c#3]
                    |   +-label_expr=
                    |   | +-GraphLabelNaryExpr
                    |   |   +-op=OR
                    |   |   +-operand_list=
                    |   |     +-GraphWildCardLabel
                    |   |     +-GraphLabelNaryExpr
                    |   |       +-op=NOT
                    |   |       +-operand_list=
                    |   |         +-GraphWildCardLabel
                    |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    +-head=$element_table.a#1
                    +-tail=$element_table.c#3
==

# Dotstar expansion on graph element returns a list of all its properties
SELECT a.*
  from graph_table(
    aml
    match (a)
  )
--
QueryStmt
+-output_column_list=
| +-$query.age#2 AS age [UINT32]
| +-$query.balance#3 AS balance [UINT64]
| +-$query.birthday#4 AS birthday [DATE]
| +-$query.data#5 AS data [BYTES]
| +-$query.id#6 AS id [INT64]
| +-$query.name#7 AS name [STRING]
| +-$query.syndicateData#8 AS syndicateData [ARRAY<INT64>]
| +-$query.syndicateId#9 AS syndicateId [INT64]
| +-$query.syndicateName#10 AS syndicateName [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[age#2, balance#3, birthday#4, data#5, id#6, name#7, syndicateData#8, syndicateId#9, syndicateName#10]
    +-expr_list=
    | +-age#2 :=
    | | +-GraphGetElementProperty
    | |   +-type=UINT32
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=age(UINT32)
    | +-balance#3 :=
    | | +-GraphGetElementProperty
    | |   +-type=UINT64
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=balance(UINT64)
    | +-birthday#4 :=
    | | +-GraphGetElementProperty
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=birthday(DATE)
    | +-data#5 :=
    | | +-GraphGetElementProperty
    | |   +-type=BYTES
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=data(BYTES)
    | +-id#6 :=
    | | +-GraphGetElementProperty
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=id(INT64)
    | +-name#7 :=
    | | +-GraphGetElementProperty
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=name(STRING)
    | +-syndicateData#8 :=
    | | +-GraphGetElementProperty
    | |   +-type=ARRAY<INT64>
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=syndicateData(ARRAY<INT64>)
    | +-syndicateId#9 :=
    | | +-GraphGetElementProperty
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-property=syndicateId(INT64)
    | +-syndicateName#10 :=
    |   +-GraphGetElementProperty
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    |     +-property=syndicateName(STRING)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$element_table.a#1]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=[$element_table.a#1]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=[$element_table.a#1]
                +-input_scan_list=
                | +-GraphNodeScan
                |   +-column_list=[$element_table.a#1]
                |   +-label_expr=
                |   | +-GraphLabelNaryExpr
                |   |   +-op=OR
                |   |   +-operand_list=
                |   |     +-GraphWildCardLabel
                |   |     +-GraphLabelNaryExpr
                |   |       +-op=NOT
                |   |       +-operand_list=
                |   |         +-GraphWildCardLabel
                |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                +-head=$element_table.a#1
                +-tail=$element_table.a#1
==

# Functions that explicitly define graph element typed arguments are permitted
SELECT SAME(a,c) as same, PROPERTY_EXISTS(a, name) as prop_exists,
a IS SOURCE of B as is_src_of
  from graph_table(
    aml
    match (a)-[b]-(c)
  )
--
QueryStmt
+-output_column_list=
| +-$query.same#4 AS same [BOOL]
| +-$query.prop_exists#5 AS prop_exists [BOOL]
| +-$query.is_src_of#6 AS is_src_of [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$query.[same#4, prop_exists#5, is_src_of#6]
    +-expr_list=
    | +-same#4 :=
    | | +-FunctionCall(ZetaSQL:same(repeated(2) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
    | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.c#3)
    | +-prop_exists#5 :=
    | | +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, STRING) -> BOOL)
    | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    | |   +-Literal(type=STRING, value="name")
    | +-is_src_of#6 :=
    |   +-FunctionCall(ZetaSQL:$is_source_node(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
    |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#2)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$element_table.[a#1, b#2, c#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=$element_table.[a#1, b#2, c#3]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=$element_table.[a#1, b#2, c#3]
                +-input_scan_list=
                | +-GraphNodeScan
                | | +-column_list=[$element_table.a#1]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                | +-GraphEdgeScan
                | | +-column_list=[$element_table.b#2]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                | | +-orientation=ANY
                | +-GraphNodeScan
                |   +-column_list=[$element_table.c#3]
                |   +-label_expr=
                |   | +-GraphLabelNaryExpr
                |   |   +-op=OR
                |   |   +-operand_list=
                |   |     +-GraphWildCardLabel
                |   |     +-GraphLabelNaryExpr
                |   |       +-op=NOT
                |   |       +-operand_list=
                |   |         +-GraphWildCardLabel
                |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                +-head=$element_table.a#1
                +-tail=$element_table.c#3
==

# Comparison operators on graph elements
SELECT a = c as col1
  from graph_table(
    aml
    match (a)-[b]-(c)
  )
--
QueryStmt
+-output_column_list=
| +-$query.col1#4 AS col1 [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.col1#4]
    +-expr_list=
    | +-col1#4 :=
    |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
    |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
    |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.c#3)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$element_table.[a#1, b#2, c#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=$element_table.[a#1, b#2, c#3]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=$element_table.[a#1, b#2, c#3]
                +-input_scan_list=
                | +-GraphNodeScan
                | | +-column_list=[$element_table.a#1]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                | +-GraphEdgeScan
                | | +-column_list=[$element_table.b#2]
                | | +-label_expr=
                | | | +-GraphLabelNaryExpr
                | | |   +-op=OR
                | | |   +-operand_list=
                | | |     +-GraphWildCardLabel
                | | |     +-GraphLabelNaryExpr
                | | |       +-op=NOT
                | | |       +-operand_list=
                | | |         +-GraphWildCardLabel
                | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                | | +-orientation=ANY
                | +-GraphNodeScan
                |   +-column_list=[$element_table.c#3]
                |   +-label_expr=
                |   | +-GraphLabelNaryExpr
                |   |   +-op=OR
                |   |   +-operand_list=
                |   |     +-GraphWildCardLabel
                |   |     +-GraphLabelNaryExpr
                |   |       +-op=NOT
                |   |       +-operand_list=
                |   |         +-GraphWildCardLabel
                |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                +-head=$element_table.a#1
                +-tail=$element_table.c#3
==

# Ordering by graph element is an error
SELECT a.id FROM GRAPH_TABLE(
aml
MATCH (a)-[e]-(b)
)
ORDER BY a
--
ERROR: ORDER BY does not support expressions of type GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...> [at 5:10]
ORDER BY a
         ^
==

# Grouping by graph element is supported
SELECT SUM(a.id) FROM
graph_table(
  aml
  match (a IS Account)
)
GROUP BY a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=[$element_table.a#1]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphScan
        |       +-column_list=[$element_table.a#1]
        |       +-input_scan_list=
        |         +-GraphPathScan
        |           +-column_list=[$element_table.a#1]
        |           +-input_scan_list=
        |           | +-GraphNodeScan
        |           |   +-column_list=[$element_table.a#1]
        |           |   +-label_expr=
        |           |   | +-GraphLabel(parse_location=55-62, label=aml.Account)
        |           |   +-target_element_table_list=[aml.Account]
        |           +-head=$element_table.a#1
        |           +-tail=$element_table.a#1
        +-group_by_list=
        | +-a#3 := ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
        +-aggregate_list=
          +-$agg1#2 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-GraphGetElementProperty
                +-type=INT64
                +-expr=
                | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
                +-property=id(INT64)
==

# UNION ALL between compatible graph elements produces a supertype
# Disable unparser because SQLBuilder will build explicit casting which is not
# syntactically allowed.
[no_run_sqlbuilder]
SELECT a.id, a.name, a.birthday FROM
(
SELECT a, e, b FROM GRAPH_TABLE(
aml
MATCH (a IS Person)-[e]-(b)
)
UNION ALL
SELECT x, y, z FROM GRAPH_TABLE(
aml
MATCH (x IS Account)-[y]-(z))
)
--
QueryStmt
+-output_column_list=
| +-$query.id#12 AS id [INT64]
| +-$query.name#13 AS name [STRING]
| +-$query.birthday#14 AS birthday [DATE]
+-query=
  +-ProjectScan
    +-column_list=$query.[id#12, name#13, birthday#14]
    +-expr_list=
    | +-id#12 :=
    | | +-GraphGetElementProperty
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$union_all.a#7)
    | |   +-property=id(INT64)
    | +-name#13 :=
    | | +-GraphGetElementProperty
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$union_all.a#7)
    | |   +-property=name(STRING)
    | +-birthday#14 :=
    |   +-GraphGetElementProperty
    |     +-type=DATE
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, column=$union_all.a#7)
    |     +-property=birthday(DATE)
    +-input_scan=
      +-SetOperationScan
        +-column_list=$union_all.[a#7, e#8, b#9]
        +-op_type=UNION_ALL
        +-input_item_list=
          +-SetOperationItem
          | +-scan=
          | | +-ProjectScan
          | |   +-column_list=[$union_all1_cast.a#10, $element_table.e#2, $element_table.b#3]
          | |   +-expr_list=
          | |   | +-a#10 :=
          | |   |   +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
          | |   |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
          | |   +-input_scan=
          | |     +-ProjectScan
          | |       +-column_list=$element_table.[a#1, e#2, b#3]
          | |       +-input_scan=
          | |         +-GraphTableScan
          | |           +-column_list=$element_table.[a#1, e#2, b#3]
          | |           +-property_graph=aml
          | |           +-input_scan=
          | |             +-GraphScan
          | |               +-column_list=$element_table.[a#1, e#2, b#3]
          | |               +-input_scan_list=
          | |                 +-GraphPathScan
          | |                   +-column_list=$element_table.[a#1, e#2, b#3]
          | |                   +-input_scan_list=
          | |                   | +-GraphNodeScan
          | |                   | | +-column_list=[$element_table.a#1]
          | |                   | | +-label_expr=
          | |                   | | | +-GraphLabel(parse_location=88-94, label=aml.Person)
          | |                   | | +-target_element_table_list=[aml.Person]
          | |                   | +-GraphEdgeScan
          | |                   | | +-column_list=[$element_table.e#2]
          | |                   | | +-label_expr=
          | |                   | | | +-GraphLabelNaryExpr
          | |                   | | |   +-op=OR
          | |                   | | |   +-operand_list=
          | |                   | | |     +-GraphWildCardLabel
          | |                   | | |     +-GraphLabelNaryExpr
          | |                   | | |       +-op=NOT
          | |                   | | |       +-operand_list=
          | |                   | | |         +-GraphWildCardLabel
          | |                   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
          | |                   | | +-orientation=ANY
          | |                   | +-GraphNodeScan
          | |                   |   +-column_list=[$element_table.b#3]
          | |                   |   +-label_expr=
          | |                   |   | +-GraphLabelNaryExpr
          | |                   |   |   +-op=OR
          | |                   |   |   +-operand_list=
          | |                   |   |     +-GraphWildCardLabel
          | |                   |   |     +-GraphLabelNaryExpr
          | |                   |   |       +-op=NOT
          | |                   |   |       +-operand_list=
          | |                   |   |         +-GraphWildCardLabel
          | |                   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
          | |                   +-head=$element_table.a#1
          | |                   +-tail=$element_table.b#3
          | +-output_column_list=[$union_all1_cast.a#10, $element_table.e#2, $element_table.b#3]
          +-SetOperationItem
            +-scan=
            | +-ProjectScan
            |   +-column_list=[$union_all2_cast.x#11, $element_table.y#5, $element_table.z#6]
            |   +-expr_list=
            |   | +-x#11 :=
            |   |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
            |   |     +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.x#4)
            |   +-input_scan=
            |     +-ProjectScan
            |       +-column_list=$element_table.[x#4, y#5, z#6]
            |       +-input_scan=
            |         +-GraphTableScan
            |           +-column_list=$element_table.[x#4, y#5, z#6]
            |           +-property_graph=aml
            |           +-input_scan=
            |             +-GraphScan
            |               +-column_list=$element_table.[x#4, y#5, z#6]
            |               +-input_scan_list=
            |                 +-GraphPathScan
            |                   +-column_list=$element_table.[x#4, y#5, z#6]
            |                   +-input_scan_list=
            |                   | +-GraphNodeScan
            |                   | | +-column_list=[$element_table.x#4]
            |                   | | +-label_expr=
            |                   | | | +-GraphLabel(parse_location=165-172, label=aml.Account)
            |                   | | +-target_element_table_list=[aml.Account]
            |                   | +-GraphEdgeScan
            |                   | | +-column_list=[$element_table.y#5]
            |                   | | +-label_expr=
            |                   | | | +-GraphLabelNaryExpr
            |                   | | |   +-op=OR
            |                   | | |   +-operand_list=
            |                   | | |     +-GraphWildCardLabel
            |                   | | |     +-GraphLabelNaryExpr
            |                   | | |       +-op=NOT
            |                   | | |       +-operand_list=
            |                   | | |         +-GraphWildCardLabel
            |                   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
            |                   | | +-orientation=ANY
            |                   | +-GraphNodeScan
            |                   |   +-column_list=[$element_table.z#6]
            |                   |   +-label_expr=
            |                   |   | +-GraphLabelNaryExpr
            |                   |   |   +-op=OR
            |                   |   |   +-operand_list=
            |                   |   |     +-GraphWildCardLabel
            |                   |   |     +-GraphLabelNaryExpr
            |                   |   |       +-op=NOT
            |                   |   |       +-operand_list=
            |                   |   |         +-GraphWildCardLabel
            |                   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
            |                   +-head=$element_table.x#4
            |                   +-tail=$element_table.z#6
            +-output_column_list=[$union_all2_cast.x#11, $element_table.y#5, $element_table.z#6]
==

# Node and edge cannot create supertype
SELECT a.name FROM
(
SELECT a FROM GRAPH_TABLE(
aml
MATCH (a)-[e]-(b)
)
UNION ALL
SELECT y FROM GRAPH_TABLE(
aml
MATCH (x)-[y]-(z))
)
--
ERROR: Column 1 in UNION ALL has incompatible types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...> [at 8:1]
SELECT y FROM GRAPH_TABLE(
^
==

# Graph element must reference the same graph in catalog to be union compatible
SELECT a.name FROM
(
SELECT a FROM GRAPH_TABLE(
aml
MATCH (a)
)
UNION ALL
SELECT x FROM GRAPH_TABLE(
aml_multi
MATCH (x))
)
--
ERROR: Column 1 in UNION ALL has incompatible types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_NODE(aml_multi)<value STRING> [at 8:1]
SELECT x FROM GRAPH_TABLE(
^
==

[no_run_sqlbuilder]
# Disable unparsing since literals of GRAPH_ELEMENT_TYPE are not defined
# e.g. STRUCT<n GRAPH_NODE(aml)<birthday DATE...>
# Graph elements as STRUCT field
SELECT x.n.id FROM (
SELECT struct(a AS n) AS x from
GRAPH_TABLE(
aml
MATCH (a)
))
--
QueryStmt
+-output_column_list=
| +-$query.id#3 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#3]
    +-expr_list=
    | +-id#3 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-GetStructField
    |     |   +-type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>
    |     |   +-expr=
    |     |   | +-ColumnRef(type=STRUCT<n GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$subquery1.x#2)
    |     |   +-field_idx=0
    |     +-property=id(INT64)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.x#2]
        +-expr_list=
        | +-x#2 :=
        |   +-MakeStruct
        |     +-type=STRUCT<n GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>
        |     +-field_list=
        |       +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
        +-input_scan=
          +-GraphTableScan
            +-column_list=[$element_table.a#1]
            +-property_graph=aml
            +-input_scan=
              +-GraphScan
                +-column_list=[$element_table.a#1]
                +-input_scan_list=
                  +-GraphPathScan
                    +-column_list=[$element_table.a#1]
                    +-input_scan_list=
                    | +-GraphNodeScan
                    |   +-column_list=[$element_table.a#1]
                    |   +-label_expr=
                    |   | +-GraphLabelNaryExpr
                    |   |   +-op=OR
                    |   |   +-operand_list=
                    |   |     +-GraphWildCardLabel
                    |   |     +-GraphLabelNaryExpr
                    |   |       +-op=NOT
                    |   |       +-operand_list=
                    |   |         +-GraphWildCardLabel
                    |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    +-head=$element_table.a#1
                    +-tail=$element_table.a#1
==

[language_features=NONE,+SQL_GRAPH]
# Without SQL_GRAPH_EXPOSE_GRAPH_ELEMENT, omitting the COLUMNS
# clause is an error
SELECT *
  from graph_table(
    aml
    match (a)
  )
--
ERROR: Graph query without COLUMNS clause is not supported [at 4:8]
  from graph_table(
       ^
==

[language_features=NONE,+SQL_GRAPH]
# Without SQL_GRAPH_EXPOSE_GRAPH_ELEMENT, direct reference to graph
# elements in the COLUMNS clause is not allowed
SELECT *
  from graph_table(
    aml
    match (a)
    columns(a as export_a)
  )
--
ERROR: Graph element typed expression is not allowed here [at 7:13]
    columns(a as export_a)
            ^
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_ADVANCED_QUERY]
# With SQL_GRAPH_ADVANCED_QUERY, graph element typed column is allowed in
# the final RETURN clause
SELECT a.id
FROM GRAPH_TABLE(
  aml
  MATCH (a) -[e]-> (b)
  RETURN (a)
)
--
QueryStmt
+-output_column_list=
| +-$query.id#5 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#5]
    +-expr_list=
    | +-id#5 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#4)
    |     +-property=id(INT64)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, e#2, b#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#1, e#2, b#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.a#4]
                    +-expr_list=
                    | +-a#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[a#1, e#2, b#3])
==

# Only named columns should be exported. Columns generated for implicit node
# patterns with internal names should be excluded.
SELECT e.accountId
from (
  select * from
  graph_table(
    aml
    match -[e IS Transfer]-
  ))
--
QueryStmt
+-output_column_list=
| +-$query.accountId#4 AS accountId [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.accountId#4]
    +-expr_list=
    | +-accountId#4 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
    |     +-property=accountId(INT64)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$element_table.e#2]
        +-input_scan=
          +-GraphTableScan
            +-column_list=[$element_table.e#2]
            +-property_graph=aml
            +-input_scan=
              +-GraphScan
                +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                +-input_scan_list=
                  +-GraphPathScan
                    +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                    +-input_scan_list=
                    | +-GraphNodeScan
                    | | +-column_list=[$element_table.$element1#1]
                    | | +-label_expr=
                    | | | +-GraphLabelNaryExpr
                    | | |   +-op=OR
                    | | |   +-operand_list=
                    | | |     +-GraphWildCardLabel
                    | | |     +-GraphLabelNaryExpr
                    | | |       +-op=NOT
                    | | |       +-operand_list=
                    | | |         +-GraphWildCardLabel
                    | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    | +-GraphEdgeScan
                    | | +-column_list=[$element_table.e#2]
                    | | +-label_expr=
                    | | | +-GraphLabel(parse_location=82-90, label=aml.Transfer)
                    | | +-target_element_table_list=[aml.Transfer]
                    | | +-orientation=ANY
                    | +-GraphNodeScan
                    |   +-column_list=[$element_table.$element2#3]
                    |   +-label_expr=
                    |   | +-GraphLabelNaryExpr
                    |   |   +-op=OR
                    |   |   +-operand_list=
                    |   |     +-GraphWildCardLabel
                    |   |     +-GraphLabelNaryExpr
                    |   |       +-op=NOT
                    |   |       +-operand_list=
                    |   |         +-GraphWildCardLabel
                    |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    +-head=$element_table.$element1#1
                    +-tail=$element_table.$element2#3
==

# Backticked identifier as name for graph element
# TODO: Fix IsInternalAlias behavior for quoted identifiers
SELECT e.accountId
from (
  select *
  from graph_table(
    aml
    match (`$n1`)-[e IS Transfer]-()
  ))
--
QueryStmt
+-output_column_list=
| +-$query.accountId#4 AS accountId [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.accountId#4]
    +-expr_list=
    | +-accountId#4 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>, column=$element_table.e#2)
    |     +-property=accountId(INT64)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$element_table.e#2]
        +-input_scan=
          +-GraphTableScan
            +-column_list=[$element_table.e#2]
            +-property_graph=aml
            +-input_scan=
              +-GraphScan
                +-column_list=$element_table.[$n1#1, e#2, $element1#3]
                +-input_scan_list=
                  +-GraphPathScan
                    +-column_list=$element_table.[$n1#1, e#2, $element1#3]
                    +-input_scan_list=
                    | +-GraphNodeScan
                    | | +-column_list=[$element_table.$n1#1]
                    | | +-label_expr=
                    | | | +-GraphLabelNaryExpr
                    | | |   +-op=OR
                    | | |   +-operand_list=
                    | | |     +-GraphWildCardLabel
                    | | |     +-GraphLabelNaryExpr
                    | | |       +-op=NOT
                    | | |       +-operand_list=
                    | | |         +-GraphWildCardLabel
                    | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    | +-GraphEdgeScan
                    | | +-column_list=[$element_table.e#2]
                    | | +-label_expr=
                    | | | +-GraphLabel(parse_location=89-97, label=aml.Transfer)
                    | | +-target_element_table_list=[aml.Transfer]
                    | | +-orientation=ANY
                    | +-GraphNodeScan
                    |   +-column_list=[$element_table.$element1#3]
                    |   +-label_expr=
                    |   | +-GraphLabelNaryExpr
                    |   |   +-op=OR
                    |   |   +-operand_list=
                    |   |     +-GraphWildCardLabel
                    |   |     +-GraphLabelNaryExpr
                    |   |       +-op=NOT
                    |   |       +-operand_list=
                    |   |         +-GraphWildCardLabel
                    |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                    +-head=$element_table.$n1#1
                    +-tail=$element_table.$element1#3
==

# Graph type not allowed in query statement output
select *
  from graph_table(
    aml
    match (a is Person)
  )
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
select *
^
==

# STRUCT type with graph type not allowed in query statement output
select struct(a AS a)
  from graph_table(
    aml
    match (a is Person)
  )
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
select struct(a AS a)
^
==

# Nested STRUCT type with graph type not allowed in query statement output
select struct(struct(struct(a AS a)) as field)
  from graph_table(
    aml
    match (a is Person)
  )
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
select struct(struct(struct(a AS a)) as field)
^
==

# Graph type not allowed in CREATE TABLE AS SELECT
create table tt
as select *
  from graph_table(
    aml
    match (a is Person)
  )
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
create table tt
^
==

# Graph type not allowed in CREATE VIEW
create view tt
as select *
  from graph_table(
    aml
    match (a is Person)
  )
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
create view tt
^
==

# Graph type not allowed as return type in CREATE FUNCTION
[language_features=NONE,+CREATE_TABLE_FUNCTION,+SQL_GRAPH,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
create table function mytvf()
as (select *
  from graph_table(
    aml
    match (a is Person)
  ))
--
ERROR: Returning expressions of type GRAPH_ELEMENT is not allowed [at 1:1]
create table function mytvf()
^
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_ADVANCED_QUERY]
[run_sqlbuilder]
[show_sqlbuilder_output]
select a.id, one from
  graph_table(aml
    RETURN
      2 AS one,
      1 AS three,
      "string" AS str
    NEXT
    RETURN
      1 AS one,
      1 + 1 AS two,
      str
    NEXT
    MATCH (a) -[e]-> (b)
    RETURN *
  ) g1
--
QueryStmt
+-output_column_list=
| +-$query.id#16 AS id [INT64]
| +-$graph_table.one#10 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#16, $graph_table.one#10]
    +-expr_list=
    | +-id#16 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#13)
    |     +-property=id(INT64)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[one#10, two#11, str#12, a#13, e#14, b#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[one#10, two#11, str#12, a#13, e#14, b#15]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[one#1, three#2, str#3]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[one#1, three#2, str#3]
              |     +-expr_list=
              |     | +-one#1 := Literal(type=INT64, value=2)
              |     | +-three#2 := Literal(type=INT64, value=1)
              |     | +-str#3 := Literal(type=STRING, value="string")
              |     +-input_scan=
              |       +-SingleRowScan
              +-GraphLinearScan
              | +-column_list=$graph_table.[one#4, two#5, str#6]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[one#4, two#5, str#6]
              |     +-expr_list=
              |     | +-one#4 := Literal(type=INT64, value=1)
              |     | +-two#5 :=
              |     | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |     | |   +-Literal(type=INT64, value=1)
              |     | |   +-Literal(type=INT64, value=1)
              |     | +-str#6 := ColumnRef(type=STRING, column=$graph_table.str#3)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$graph_table.[one#1, three#2, str#3])
              +-GraphLinearScan
                +-column_list=$graph_table.[one#10, two#11, str#12, a#13, e#14, b#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$graph_table.one#4, $graph_table.two#5, $graph_table.str#6, $element_table.a#7, $element_table.e#8, $element_table.b#9]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#7, e#8, b#9]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#7]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#8]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#9]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#7
                  | |   +-tail=$element_table.b#9
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[one#4, two#5, str#6])
                  +-ProjectScan
                    +-column_list=$graph_table.[one#10, two#11, str#12, a#13, e#14, b#15]
                    +-expr_list=
                    | +-one#10 := ColumnRef(type=INT64, column=$graph_table.one#4)
                    | +-two#11 := ColumnRef(type=INT64, column=$graph_table.two#5)
                    | +-str#12 := ColumnRef(type=STRING, column=$graph_table.str#6)
                    | +-a#13 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#7)
                    | +-e#14 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#8)
                    | +-b#15 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.one#4, $graph_table.two#5, $graph_table.str#6, $element_table.a#7, $element_table.e#8, $element_table.b#9])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  graphtablescan_17.a_14.id AS id,
  graphtablescan_17.a_11 AS one
FROM
  (
    SELECT
      aml_1.a_11 AS a_11,
      aml_1.a_12 AS a_12,
      aml_1.a_13 AS a_13,
      aml_1.a_14 AS a_14,
      aml_1.a_15 AS a_15,
      aml_1.a_16 AS a_16
    FROM
      GRAPH_TABLE(
        aml
        RETURN
          2 AS a_2,
          1 AS a_3,
          "string" AS a_4
        NEXT
        RETURN
          1 AS a_5,
          1 + 1 AS a_6,
          a_4 AS a_7
        NEXT
        MATCH
          (a_8
          IS (% | ! %))
          -[a_9
          IS (% | ! %)]->
          (a_10
          IS (% | ! %))
        RETURN
          a_5 AS a_11,
          a_6 AS a_12,
          a_7 AS a_13,
          a_8 AS a_14,
          a_9 AS a_15,
          a_10 AS a_16
      ) AS aml_1
  ) AS graphtablescan_17;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    RETURN
      2 AS a_2,
      1 AS a_3,
      "string" AS a_4
    NEXT
    RETURN
      1 AS a_5,
      1 + 1 AS a_6,
      a_4 AS a_7
    NEXT
    MATCH
      (a_8
      IS (% | ! %))
      -[a_9
      IS (% | ! %)]->
      (a_10
      IS (% | ! %))
    RETURN
      a_5 AS a_11,
      a_6 AS a_12,
      a_7 AS a_13,
      a_8 AS a_14,
      a_9 AS a_15,
      a_10 AS a_16
  ) AS aml_1
|> SELECT
     aml_1.a_11 AS a_11,
     aml_1.a_12 AS a_12,
     aml_1.a_13 AS a_13,
     aml_1.a_14 AS a_14,
     aml_1.a_15 AS a_15,
     aml_1.a_16 AS a_16
|> AS graphtablescan_17
|> SELECT
     graphtablescan_17.a_14.id AS id,
     graphtablescan_17.a_11 AS one;
==

# Graph elements referenced by RETURN * in intermediate clauses should
# not yet be given an alias, as they may be referenced by their local name
# in subsequent clauses. The final return clause should alias them.
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_ADVANCED_QUERY]
[run_sqlbuilder]
[show_sqlbuilder_output]
select a.id, one_1 from
  graph_table(aml
    MATCH (a) -[e]-> (b)
    RETURN
      *
    NEXT
    RETURN
      a,
      b,
      a.id as id,
      1 as one
    NEXT
    RETURN
      a,
      b.id as bid,
      one as one_1
    NEXT
    RETURN *
  ) g1
--
QueryStmt
+-output_column_list=
| +-$query.id#17 AS id [INT64]
| +-$graph_table.one_1#16 AS one_1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.id#17, $graph_table.one_1#16]
    +-expr_list=
    | +-id#17 :=
    |   +-GraphGetElementProperty
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#14)
    |     +-property=id(INT64)
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[a#14, bid#15, one_1#16]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[a#14, bid#15, one_1#16]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[a#4, e#5, b#6]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[a#1, e#2, b#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[a#1, e#2, b#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.a#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.e#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabelNaryExpr
              |   | |   | | |   +-op=OR
              |   | |   | | |   +-operand_list=
              |   | |   | | |     +-GraphWildCardLabel
              |   | |   | | |     +-GraphLabelNaryExpr
              |   | |   | | |       +-op=NOT
              |   | |   | | |       +-operand_list=
              |   | |   | | |         +-GraphWildCardLabel
              |   | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.b#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabelNaryExpr
              |   | |   |   |   +-op=OR
              |   | |   |   |   +-operand_list=
              |   | |   |   |     +-GraphWildCardLabel
              |   | |   |   |     +-GraphLabelNaryExpr
              |   | |   |   |       +-op=NOT
              |   | |   |   |       +-operand_list=
              |   | |   |   |         +-GraphWildCardLabel
              |   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              |   | |   +-head=$element_table.a#1
              |   | |   +-tail=$element_table.b#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-ProjectScan
              |     +-column_list=$graph_table.[a#4, e#5, b#6]
              |     +-expr_list=
              |     | +-a#4 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
              |     | +-e#5 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
              |     | +-b#6 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#3)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$element_table.[a#1, e#2, b#3])
              +-GraphLinearScan
              | +-column_list=$graph_table.[a#7, b#8, id#9, one#10]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[a#7, b#8, id#9, one#10]
              |     +-expr_list=
              |     | +-a#7 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#4)
              |     | +-b#8 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.b#6)
              |     | +-id#9 :=
              |     | | +-GraphGetElementProperty
              |     | |   +-type=INT64
              |     | |   +-expr=
              |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#4)
              |     | |   +-property=id(INT64)
              |     | +-one#10 := Literal(type=INT64, value=1)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$graph_table.[a#4, e#5, b#6])
              +-GraphLinearScan
              | +-column_list=$graph_table.[a#11, bid#12, one_1#13]
              | +-scan_list=
              |   +-ProjectScan
              |     +-column_list=$graph_table.[a#11, bid#12, one_1#13]
              |     +-expr_list=
              |     | +-a#11 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#7)
              |     | +-bid#12 :=
              |     | | +-GraphGetElementProperty
              |     | |   +-type=INT64
              |     | |   +-expr=
              |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.b#8)
              |     | |   +-property=id(INT64)
              |     | +-one_1#13 := ColumnRef(type=INT64, column=$graph_table.one#10)
              |     +-input_scan=
              |       +-GraphRefScan(column_list=$graph_table.[a#7, b#8, id#9, one#10])
              +-GraphLinearScan
                +-column_list=$graph_table.[a#14, bid#15, one_1#16]
                +-scan_list=
                  +-ProjectScan
                    +-column_list=$graph_table.[a#14, bid#15, one_1#16]
                    +-expr_list=
                    | +-a#14 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.a#11)
                    | +-bid#15 := ColumnRef(type=INT64, column=$graph_table.bid#12)
                    | +-one_1#16 := ColumnRef(type=INT64, column=$graph_table.one_1#13)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[a#11, bid#12, one_1#13])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  graphtablescan_18.a_15.id AS id,
  graphtablescan_18.a_17 AS one_1
FROM
  (
    SELECT
      aml_1.a_15 AS a_15,
      aml_1.a_16 AS a_16,
      aml_1.a_17 AS a_17
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS (% | ! %))
          -[a_3
          IS (% | ! %)]->
          (a_4
          IS (% | ! %))
        RETURN
          a_2 AS a_5,
          a_3 AS a_6,
          a_4 AS a_7
        NEXT
        RETURN
          a_5 AS a_8,
          a_7 AS a_9,
          a_5.id AS a_10,
          1 AS a_11
        NEXT
        RETURN
          a_8 AS a_12,
          a_9.id AS a_13,
          a_11 AS a_14
        NEXT
        RETURN
          a_12 AS a_15,
          a_13 AS a_16,
          a_14 AS a_17
      ) AS aml_1
  ) AS graphtablescan_18;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      a_2 AS a_5,
      a_3 AS a_6,
      a_4 AS a_7
    NEXT
    RETURN
      a_5 AS a_8,
      a_7 AS a_9,
      a_5.id AS a_10,
      1 AS a_11
    NEXT
    RETURN
      a_8 AS a_12,
      a_9.id AS a_13,
      a_11 AS a_14
    NEXT
    RETURN
      a_12 AS a_15,
      a_13 AS a_16,
      a_14 AS a_17
  ) AS aml_1
|> SELECT
     aml_1.a_15 AS a_15,
     aml_1.a_16 AS a_16,
     aml_1.a_17 AS a_17
|> AS graphtablescan_18
|> SELECT
     graphtablescan_18.a_15.id AS id,
     graphtablescan_18.a_17 AS one_1;
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_PATH_TYPE]
SELECT 1 FROM GRAPH_TABLE(
aml
MATCH p=(a) -[e]-> (b)
COLUMNS(p as col1)
)
--
ERROR: Returning graph-typed column is not supported [at 4:9]
COLUMNS(p as col1)
        ^
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_PATH_TYPE]
SELECT 1 FROM GRAPH_TABLE(
aml
MATCH p=(a) -[e]-> (b)
RETURN p as col1
)
--
ERROR: Returning graph-typed column is not supported [at 4:8]
RETURN p as col1
       ^
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]
SELECT 1 FROM GRAPH_TABLE(
aml
MATCH (a) -[e]->{1,3} (b)
RETURN a as col1
)
--
ERROR: Returning graph-typed column is not supported [at 4:8]
RETURN a as col1
       ^

