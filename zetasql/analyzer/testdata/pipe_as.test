[default language_features=MAXIMUM,+PIPES,+PIPE_STATIC_DESCRIBE]
select 1 x, 2 y
|> AS t
|> SELECT t.x, t.y, x, y, *, t.*, t
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
| +-$pipe_select.t#4 AS t [STRUCT<x INT64, y INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#1, $query.y#2, $query.x#1, $query.y#2, $query.x#1, $query.y#2, $query.x#1, $query.y#2, $pipe_select.t#4]
    +-expr_list=
    | +-t#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<x INT64, y INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$query.x#1)
    |       +-ColumnRef(type=INT64, column=$query.y#2)
    +-input_scan=
      +-ProjectScan
        +-column_list=$query.[x#1, y#2]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        | +-y#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

select 1 x, 2 y
|> AS t1
|> AS t2
|> SELECT t2.x, y
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[x#1, y#2]
    +-input_scan=
      +-ProjectScan
        +-column_list=$query.[x#1, y#2]
        +-expr_list=
        | +-x#1 := Literal(type=INT64, value=1)
        | +-y#2 := Literal(type=INT64, value=2)
        +-input_scan=
          +-SingleRowScan
==

select 1 x, 2 y
|> AS t1
|> AS t2
|> SELECT t1.x, t1.y
--
ERROR: Unrecognized name: t1 [at 4:11]
|> SELECT t1.x, t1.y
          ^
==

# t1 is just an alias, not a table, so self-join is not allowed here.
# A workaround for self-join is to use WITH:
#
#   WITH t AS (...)
#   FROM t AS t1
#   |> JOIN t AS t2 USING(...)
#   |> ...
#
# Note, we might add "|> AS TABLE <name>" syntax to support the self-join case.
select 1 x, 2 y
|> AS t1
|> join t1 as t2 using(x)
|> select x, t1.y, t2.y
--
ERROR: Table not found: t1 (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier t1 is in scope but unqualified names cannot be resolved here.) [at 3:9]
|> join t1 as t2 using(x)
        ^
==

# Since t1 is just an alias, it can't be used in correlated subqueries.
select 1 x, 2 y
|> AS t1
|> SELECT (FROM t1)
--
ERROR: Table not found: t1 (Unqualified identifiers in a FROM clause are always resolved as tables. Identifier t1 is in scope but unqualified names cannot be resolved here.) [at 3:17]
|> SELECT (FROM t1)
                ^
==

# Normal table with pseudo columns.
from EnumTable
|> AS t
|> select t.key, t.RowId;
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.RowId#5 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[key#1, RowId#5]
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, RowId#5], table=EnumTable, column_index_list=[0, 4])
==

# Pipe AS operator in subquery won't lose pseudo-columns, and "SELECT *" will
# still work properly.
from (from EnumTable |> AS t)
|> SELECT Key, TestEnum, AnotherTestEnum, Filename, RowId, *
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS Key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
| +-EnumTable.Filename#4 AS Filename [STRING]
| +-EnumTable.RowId#5 AS RowId [BYTES]
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5, key#1, TestEnum#2, AnotherTestEnum#3]
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])

==


from EnumTable
|> AS t
|> select t.*
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
+-query=
  +-ProjectScan
    +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3]
    +-input_scan=
      +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3], table=EnumTable, column_index_list=[0, 1, 2])
==

# Value table will be kept.
# If the value table has an alias, the old alias will be dropped, so accessing
# the old alias would be an error.
from KitchenSinkValueTable {{| AS old_alias}}
|> AS t
|> WHERE int32_val = 5 AND t.int32_val = 5 {{| AND old_alias.int32_val = 5}};
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-KitchenSinkValueTable.value#1 AS `$value` [PROTO<zetasql_test__.KitchenSinkPB>]
+-is_value_table=TRUE
+-query=
  +-FilterScan
    +-column_list=[KitchenSinkValueTable.value#1]
    +-input_scan=
    | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        | +-GetProtoField
        | | +-type=INT32
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        | | +-field_descriptor=int32_val
        | | +-default_value=77
        | +-Literal(type=INT32, value=5)
        +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
          +-GetProtoField
          | +-type=INT32
          | +-expr=
          | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
          | +-field_descriptor=int32_val
          | +-default_value=77
          +-Literal(type=INT32, value=5)
--
ALTERNATION GROUPS:
     AND old_alias.int32_val = 5
     AS old_alias, AND old_alias.int32_val = 5
--
ERROR: Unrecognized name: old_alias [at 3:49]
|> WHERE int32_val = 5 AND t.int32_val = 5  AND old_alias.int32_val = 5;
                                                ^
--
ALTERNATION GROUP:  AS old_alias,
--
QueryStmt
+-output_column_list=
| +-KitchenSinkValueTable.value#1 AS `$value` [PROTO<zetasql_test__.KitchenSinkPB>]
+-is_value_table=TRUE
+-query=
  +-FilterScan
    +-column_list=[KitchenSinkValueTable.value#1]
    +-input_scan=
    | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0], alias="old_alias")
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        | +-GetProtoField
        | | +-type=INT32
        | | +-expr=
        | | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        | | +-field_descriptor=int32_val
        | | +-default_value=77
        | +-Literal(type=INT32, value=5)
        +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
          +-GetProtoField
          | +-type=INT32
          | +-expr=
          | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
          | +-field_descriptor=int32_val
          | +-default_value=77
          +-Literal(type=INT32, value=5)
==

FROM unnest([1,2,3])
|> AS value
|> WHERE value=2
--
QueryStmt
+-output_column_list=
| +-$array.$unnest1#1 AS `$value` [INT64]
+-is_value_table=TRUE
+-query=
  +-FilterScan
    +-column_list=[$array.$unnest1#1]
    +-input_scan=
    | +-ArrayScan
    |   +-column_list=[$array.$unnest1#1]
    |   +-array_expr_list=
    |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |   +-element_column_list=[$array.$unnest1#1]
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$array.$unnest1#1)
        +-Literal(type=INT64, value=2)
==

# Value table in subquery will be kept too.
from (from TestExtraValueTable |> AS t)
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
==

from KitchenSinkValueTable t1
|> AS t2
|> select t2.int64_key_1, string_val
--
QueryStmt
+-output_column_list=
| +-$pipe_select.int64_key_1#2 AS int64_key_1 [INT64]
| +-$pipe_select.string_val#3 AS string_val [STRING]
+-query=
  +-ProjectScan
    +-column_list=$pipe_select.[int64_key_1#2, string_val#3]
    +-expr_list=
    | +-int64_key_1#2 :=
    | | +-GetProtoField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
    | |   +-field_descriptor=int64_key_1
    | +-string_val#3 :=
    |   +-GetProtoField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
    |     +-field_descriptor=string_val
    |     +-default_value="default_name"
    +-input_scan=
      +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0], alias="t1")
==

# The equivalent form is:
#
#   from (
#     from KitchenSinkValueTable t1
#   ) t2
#   |> ...
#
# t1 is in the inner scope, so it's not visible to the follow up pipes.
from KitchenSinkValueTable t1
|> AS t2
|> select t1.int64_key_1, string_val
--
ERROR: Unrecognized name: t1 [at 3:11]
|> select t1.int64_key_1, string_val
          ^
==

# The output column list of the join is [Key, Value, Value], so range variable t
# will be t->RANGE_VARIABLE<Key, Value, Value>, which is ok as long as we don't
# access t.Value.
# Note, we can still output both Value columns using "*".
from KeyValue t1
|> join KeyValue t2 USING(key)
|> AS t
|> select t.key, *;
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Key#1 AS key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Value#4 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Key#1, Value#2, Value#4]
    +-input_scan=
      +-JoinScan
        +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
        +-left_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="t1")
        +-right_scan=
        | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="t2")
        +-join_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        +-has_using=TRUE
==

from KeyValue t1
|> join KeyValue t2 USING(key)
|> AS t
|> select t.key, t.value
--
ERROR: Name value is ambiguous inside t [at 4:20]
|> select t.key, t.value
                   ^
==

# t1 and t2 are in the inner scope, not visible to follow up pipes.
from KeyValue t1
|> join KeyValue2 t2 USING(key)
|> AS t
|> SELECT t1.Value
--
ERROR: Unrecognized name: t1 [at 4:11]
|> SELECT t1.Value
          ^
==

from KitchenSinkValueTable
|> aggregate sum(int32_val) as value group by int64_key_1 as key
|> AS t
|> select t.key, t.value;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#3 AS key [INT64]
| +-$aggregate.value#2 AS value [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#3, $aggregate.value#2]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#3, $aggregate.value#2]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
        +-group_by_list=
        | +-key#3 :=
        |   +-GetProtoField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        |     +-field_descriptor=int64_key_1
        +-aggregate_list=
          +-value#2 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-Cast(INT32 -> INT64)
                +-GetProtoField
                  +-type=INT32
                  +-expr=
                  | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
                  +-field_descriptor=int32_val
                  +-default_value=77
==

# A join unnesting an array that came from an AS alias.
from ArrayTypes
|> AS t
|> CROSS JOIN UNNEST(t.Int32Array) a
|> SELECT t.StringArray, a
--
QueryStmt
+-output_column_list=
| +-ArrayTypes.StringArray#5 AS StringArray [ARRAY<STRING>]
| +-$array.a#21 AS a [INT32]
+-query=
  +-ProjectScan
    +-column_list=[ArrayTypes.StringArray#5, $array.a#21]
    +-input_scan=
      +-ArrayScan
        +-column_list=[ArrayTypes.Int32Array#1, ArrayTypes.StringArray#5, $array.a#21]
        +-input_scan=
        | +-TableScan(column_list=ArrayTypes.[Int32Array#1, StringArray#5], table=ArrayTypes, column_index_list=[0, 4])
        +-array_expr_list=
        | +-ColumnRef(type=ARRAY<INT32>, column=ArrayTypes.Int32Array#1)
        +-element_column_list=[$array.a#21]
==

# TODO Pipe AS leaves value table columns in an inconsistent state
# when AS is used on a result table with multiple columns.
# The column has is_value_table, but value_table_columns is missing.
# Note how SELECT * expands the value table fields, but the fields aren't
# implicitly selectable as they should be.
FROM TestExtraValueTable AS vt
|> EXTEND 5 abc
|> STATIC_DESCRIBE
|> AS evt1
|> STATIC_DESCRIBE
|> SELECT {{*|int32_val1}}
--
ALTERNATION GROUP: *
--
QueryStmt
+-output_column_list=
| +-$pipe_select.int32_val1#5 AS int32_val1 [INT32]
| +-$pipe_select.int32_val2#6 AS int32_val2 [INT32]
| +-$pipe_select.str_value#7 AS str_value [ARRAY<STRING>]
| +-$pipe_extend.abc#4 AS abc [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.int32_val1#5, $pipe_select.int32_val2#6, $pipe_select.str_value#7, $pipe_extend.abc#4]
    +-expr_list=
    | +-int32_val1#5 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=int32_val1
    | |   +-default_value=0
    | +-int32_val2#6 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    | |   +-field_descriptor=int32_val2
    | |   +-default_value=0
    | +-str_value#7 :=
    |   +-GetProtoField
    |     +-type=ARRAY<STRING>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |     +-field_descriptor=str_value
    |     +-default_value=[]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=[TestExtraValueTable.value#1, $pipe_extend.abc#4]
        +-describe_text=
        |   """
        |   NameList:
        |     vt zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
        |     abc INT64 $pipe_extend.abc#4
        |   NameScope:
        |     Names:
        |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
        |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
        |       abc -> INT64 ($pipe_extend.abc#4)
        |       vt -> zetasql_test__.TestExtraPB (TestExtraValueTable.value#1)
        |     Range variables:
        |       evt1 -> RANGE_VARIABLE<vt,abc>
        |   """
        +-input_scan=
          +-StaticDescribeScan
            +-column_list=[TestExtraValueTable.value#1, $pipe_extend.abc#4]
            +-describe_text=
            |   """
            |   NameList:
            |     vt zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
            |     abc INT64 $pipe_extend.abc#4
            |   NameScope:
            |     Names:
            |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
            |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
            |       abc -> INT64 ($pipe_extend.abc#4)
            |     Range variables:
            |       vt -> RANGE_VARIABLE<$value>
            |     Value table columns:
            |       TestExtraValueTable.value#1
            |   """
            +-input_scan=
              +-ProjectScan
                +-column_list=[TestExtraValueTable.value#1, $pipe_extend.abc#4]
                +-expr_list=
                | +-abc#4 := Literal(type=INT64, value=5)
                +-input_scan=
                  +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0], alias="vt")
--
ALTERNATION GROUP: int32_val1
--
ERROR: Unrecognized name: int32_val1 [at 6:11]
|> SELECT int32_val1
          ^
==

# Unlike the query above, this works as expected.
# The value table fields are still implicitly selectable after AS because
# value_table_columns is filled in correctly.
FROM TestExtraValueTable AS vt
|> STATIC_DESCRIBE
|> AS evt1
|> STATIC_DESCRIBE
|> SELECT int32_val1
--
QueryStmt
+-output_column_list=
| +-$pipe_select.int32_val1#4 AS int32_val1 [INT32]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.int32_val1#4]
    +-expr_list=
    | +-int32_val1#4 :=
    |   +-GetProtoField
    |     +-type=INT32
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
    |     +-field_descriptor=int32_val1
    |     +-default_value=0
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=[TestExtraValueTable.value#1]
        +-describe_text=
        |   """
        |   NameList (is_value_table = true):
        |     evt1 zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
        |   NameScope:
        |     Names:
        |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
        |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
        |     Range variables:
        |       evt1 -> RANGE_VARIABLE<$value>
        |     Value table columns:
        |       TestExtraValueTable.value#1
        |   """
        +-input_scan=
          +-StaticDescribeScan
            +-column_list=[TestExtraValueTable.value#1]
            +-describe_text=
            |   """
            |   NameList (is_value_table = true):
            |     vt zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
            |   NameScope:
            |     Names:
            |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
            |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
            |     Range variables:
            |       vt -> RANGE_VARIABLE<$value>
            |     Value table columns:
            |       TestExtraValueTable.value#1
            |   """
            +-input_scan=
              +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0], alias="vt")
