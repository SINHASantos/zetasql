[default language_features=NONE,+PIPES,+PIPE_STATIC_DESCRIBE]
FROM KeyValue
|> STATIC_DESCRIBE
|> RENAME key AS k
|> RENAME k AS k2
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS k2 [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-describe_text=
    |   """
    |   NameList:
    |     k2 INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |       k2 -> INT64 (KeyValue.Key#1) (implicit)
    |     Range variables:
    |       KeyValue -> RANGE_VARIABLE<Key,Value>
    |   """
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-describe_text=
        |   """
        |   NameList:
        |     Key INT64 KeyValue.Key#1
        |     Value STRING KeyValue.Value#2
        |   NameScope:
        |     Names:
        |       Key -> INT64 (KeyValue.Key#1) (implicit)
        |       Value -> STRING (KeyValue.Value#2) (implicit)
        |     Range variables:
        |       KeyValue -> RANGE_VARIABLE<Key,Value>
        |   """
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Swap two columns atomically.
# KeyValue.key is the original `key` before renaming.
# KeyValue expands to the struct for the original row.
FROM KeyValue
|> RENAME key AS value, value AS key
|> WHERE KeyValue.key = value
|> EXTEND KeyValue AS kv
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS value [INT64]
| +-KeyValue.Value#2 AS key [STRING]
| +-$pipe_extend.kv#4 AS kv [STRUCT<Key INT64, Value STRING>]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.kv#4]
    +-expr_list=
    | +-kv#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<Key INT64, Value STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# Rename columns to their original name.  This is allowed.
FROM KeyValue
|> RENAME Key AS Key, Value AS Value
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Rename columns to names that differ by case.
# For the first column, the lhs name has different case but the
# rhs name matches the existing column.
FROM KeyValue
|> RENAME kEy AS Key, vaLUe AS vALUE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS vALUE [STRING]
+-query=
  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# If we make a new range variable, it has the renamed columns.
FROM KeyValue rv1
|> RENAME key AS xxx
|> AS rv2
|> SELECT rv2, rv2.xxx
--
QueryStmt
+-output_column_list=
| +-$pipe_select.rv2#4 AS rv2 [STRUCT<xxx INT64, Value STRING>]
| +-KeyValue.Key#1 AS xxx [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.rv2#4, KeyValue.Key#1]
    +-expr_list=
    | +-rv2#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<xxx INT64, Value STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="rv1")
==

# It's not an error to introduce ambiguous names in the output columns.
# The renamed column is ambiguous with an existing column.
FROM KeyValue
|> EXTEND 1.0 AS xx
|> RENAME key AS xx
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS xx [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.xx#3 AS xx [DOUBLE]
+-query=
  +-StaticDescribeScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.xx#3]
    +-describe_text=
    |   """
    |   NameList:
    |     xx INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |     xx DOUBLE $pipe_extend.xx#3
    |   NameScope:
    |     Names:
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |       xx -> ambiguous
    |     Range variables:
    |       KeyValue -> RANGE_VARIABLE<Key,Value>
    |   """
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.xx#3]
        +-expr_list=
        | +-xx#3 := Literal(type=DOUBLE, value=1)
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Range variables still hide columns, even after the rename.
FROM KeyValue kv
|> RENAME key AS kv
|> STATIC_DESCRIBE
|> EXTEND kv AS kv2
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS kv [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.kv2#4 AS kv2 [STRUCT<Key INT64, Value STRING>]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.kv2#4]
    +-expr_list=
    | +-kv2#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<Key INT64, Value STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-describe_text=
        |   """
        |   NameList:
        |     kv INT64 KeyValue.Key#1
        |     Value STRING KeyValue.Value#2
        |   NameScope:
        |     Names:
        |       Value -> STRING (KeyValue.Value#2) (implicit)
        |     Range variables:
        |       kv -> RANGE_VARIABLE<Key,Value>
        |   """
        +-input_scan=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
==

FROM KeyValue
|> RENAME bad AS y
--
ERROR: Column name in pipe RENAME not found in input table: bad [at 2:11]
|> RENAME bad AS y
          ^
==

FROM KeyValue
|> RENAME kEy AS k1, keY AS k2
--
ERROR: Duplicate column name in pipe RENAME: keY [at 2:22]
|> RENAME kEy AS k1, keY AS k2
                     ^
==

FROM KeyValue
|> RENAME `$abc` AS def
--
ERROR: Cannot use pipe RENAME with internal alias `$abc` [at 2:11]
|> RENAME `$abc` AS def
          ^
==

FROM KeyValue
|> RENAME abc AS `$def`
--
ERROR: Cannot use pipe RENAME with internal alias `$def` [at 2:18]
|> RENAME abc AS `$def`
                 ^
==

FROM KeyValue kv
|> RENAME kv AS xxx
--
ERROR: Name in pipe RENAME is a table alias; RENAME can only rename columns: kv [at 2:11]
|> RENAME kv AS xxx
          ^
==

FROM TestExtraValueTable vt
|> RENAME int32_val1 AS vvv
--
ERROR: Name in pipe RENAME is a field inside a value table; RENAME can only rename columns: int32_val1 [at 2:11]
|> RENAME int32_val1 AS vvv
          ^
==

FROM EnumTable
|> RENAME Filename AS fff
--
ERROR: Name in pipe RENAME is present but is not a column on the pipe input table; RENAME can only rename columns: Filename [at 2:11]
|> RENAME Filename AS fff
          ^
==

SELECT 1 x, 2 x
|> RENAME x AS y
--
ERROR: Column name in pipe RENAME exists more than once in input table: x [at 2:11]
|> RENAME x AS y
          ^
==

# Filename is both a real column and a pseudo-column.
FROM EnumTable
|> EXTEND Filename
|> RENAME Filename AS fff
--
ERROR: Name in pipe RENAME is ambiguous; RENAME can only rename columns: Filename [at 3:11]
|> RENAME Filename AS fff
          ^
==

# `key` is both a column and a range variable.
FROM KeyValue
|> AS key
|> RENAME key AS xxx
--
ERROR: Name in pipe RENAME is a table alias; RENAME can only rename columns: key [at 3:11]
|> RENAME key AS xxx
          ^
==

# Attempt to rename a correlated column reference.
FROM KeyValue
|> EXTEND (SELECT 1 x
           |> RENAME key AS zzz)
--
ERROR: Name in pipe RENAME is present but is not a column on the pipe input table; RENAME can only rename columns: key [at 3:22]
           |> RENAME key AS zzz)
                     ^
==

# After RENAME on a column, the old range variable still points to the
# original row.
FROM KeyValue kv
|> RENAME key AS key2
|> SELECT key2, kv.key, kv
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key2 [INT64]
| +-KeyValue.Key#1 AS key [INT64]
| +-$pipe_select.kv#4 AS kv [STRUCT<Key INT64, Value STRING>]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Key#1, $pipe_select.kv#4]
    +-expr_list=
    | +-kv#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<Key INT64, Value STRING>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv")
==

# Fixed b/437336611 where RENAME was turning columns partially into
# value tables.
from TestTable
|> rename KitchenSink AS ks
|> static_describe
|> select ks.int32_val, *, {{int32_val|}}
--
ALTERNATION GROUP: int32_val
--
ERROR: Unrecognized name: int32_val [at 4:28]
|> select ks.int32_val, *, int32_val
                           ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$pipe_select.int32_val#4 AS int32_val [INT32]
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS ks [PROTO<zetasql_test__.KitchenSinkPB>]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.int32_val#4, TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3]
    +-expr_list=
    | +-int32_val#4 :=
    |   +-GetProtoField
    |     +-type=INT32
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
    |     +-field_descriptor=int32_val
    |     +-default_value=77
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3]
        +-describe_text=
        |   """
        |   NameList:
        |     key INT32 TestTable.key#1
        |     TestEnum zetasql_test__.TestEnum TestTable.TestEnum#2
        |     ks zetasql_test__.KitchenSinkPB TestTable.KitchenSink#3
        |   NameScope:
        |     Names:
        |       TestEnum -> zetasql_test__.TestEnum (TestTable.TestEnum#2) (implicit)
        |       key -> INT32 (TestTable.key#1) (implicit)
        |       ks -> zetasql_test__.KitchenSinkPB (TestTable.KitchenSink#3) (implicit)
        |     Range variables:
        |       TestTable -> RANGE_VARIABLE<key,TestEnum,KitchenSink>
        |   """
        +-input_scan=
          +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
