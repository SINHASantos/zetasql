[default language_features=MAXIMUM,+ORDER_BY_IN_AGGREGATE]
[default enabled_ast_rewrites=DEFAULTS,+ORDER_BY_AND_LIMIT_IN_AGGREGATE]

[no_enable_literal_replacement]
[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+GROUP_BY_ARRAY,+ARRAY_ORDERING]
# Simple ARRAY_AGG with ORDER BY with all the features.
# no_enable_literal_replacement: Distinct and ORDER BY must match exactly, we
# cannot replace just one literal with parameter
SELECT ARRAY_CONCAT_AGG(KitchenSink.repeated_string_val || ["foo"] HAVING MAX 3 ORDER BY KitchenSink.repeated_string_val || ["foo"]LIMIT 10)
FROM TestTable

--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#5]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#4]
        |   +-expr_list=
        |   | +-$orderbycol1#4 :=
        |   |   +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRING>, repeated(1) ARRAY<STRING>) -> ARRAY<STRING>)
        |   |     +-GetProtoField
        |   |     | +-type=ARRAY<STRING>
        |   |     | +-expr=
        |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |     | +-field_descriptor=repeated_string_val
        |   |     | +-default_value=[]
        |   |     +-Literal(type=ARRAY<STRING>, value=["foo"])
        |   +-input_scan=
        |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-aggregate_list=
          +-$agg1#5 :=
            +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<STRING>) -> ARRAY<STRING>)
              +-ColumnRef(type=ARRAY<STRING>, column=$orderby.$orderbycol1#4)
              +-having_modifier=
              | +-AggregateHavingModifier
              |   +-kind=MAX
              |   +-having_expr=
              |     +-Literal(type=INT64, value=3)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=ARRAY<STRING>, column=$orderby.$orderbycol1#4)
              +-limit=
                +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#5]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#5]
        +-expr_list=
        | +-$agg1#5 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<STRING>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` ARRAY<STRING>>>, column=$agg_rewriter.$array#7)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#17]
        |         +-expr_list=
        |         | +-injected#17 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> BOOL)
        |         |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#11)
        |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |         |     +-SubqueryExpr
        |         |       +-type=ARRAY<STRING>
        |         |       +-subquery_type=ARRAY
        |         |       +-parameter_list=
        |         |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#11)
        |         |       +-subquery=
        |         |         +-OrderByScan
        |         |           +-column_list=[$flatten.injected#14]
        |         |           +-is_ordered=TRUE
        |         |           +-input_scan=
        |         |           | +-ArrayScan
        |         |           |   +-column_list=[$flatten.injected#12, $offset.injected#13, $flatten.injected#14, $offset.injected#15]
        |         |           |   +-input_scan=
        |         |           |   | +-ArrayScan
        |         |           |   |   +-column_list=[$flatten.injected#12, $offset.injected#13]
        |         |           |   |   +-array_expr_list=
        |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#11, is_correlated=TRUE)
        |         |           |   |   +-element_column_list=[$flatten.injected#12]
        |         |           |   |   +-array_offset_column=
        |         |           |   |     +-ColumnHolder(column=$offset.injected#13)
        |         |           |   +-array_expr_list=
        |         |           |   | +-GetStructField
        |         |           |   |   +-type=ARRAY<STRING>
        |         |           |   |   +-expr=
        |         |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<STRING>>, column=$flatten.injected#12)
        |         |           |   |   +-field_idx=0
        |         |           |   +-element_column_list=[$flatten.injected#14]
        |         |           |   +-array_offset_column=
        |         |           |     +-ColumnHolder(column=$offset.injected#15)
        |         |           +-order_by_item_list=
        |         |             +-OrderByItem
        |         |             | +-column_ref=
        |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#13)
        |         |             +-OrderByItem
        |         |               +-column_ref=
        |         |                 +-ColumnRef(type=INT64, column=$offset.injected#15)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$flatten_input.injected#11]
        |             +-expr_list=
        |             | +-injected#11 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        |             |     +-subquery_type=SCALAR
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` ARRAY<STRING>>>, column=$agg_rewriter.$array#7, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-ProjectScan
        |             |         +-column_list=[$with_expr.injected#16]
        |             |         +-expr_list=
        |             |         | +-injected#16 :=
        |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<STRING>>>, ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> ARRAY<STRUCT<`array` ARRAY<STRING>>>)
        |             |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |             |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> INT64)
        |             |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#10)
        |             |         |     | +-Literal(type=INT64, value=1)
        |             |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#10)
        |             |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, value=NULL)
        |             |         +-input_scan=
        |             |           +-ProjectScan
        |             |             +-column_list=[null_if_empty_array.$out#10]
        |             |             +-expr_list=
        |             |             | +-$out#10 :=
        |             |             |   +-SubqueryExpr
        |             |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        |             |             |     +-subquery_type=ARRAY
        |             |             |     +-parameter_list=
        |             |             |     | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` ARRAY<STRING>>>, column=$agg_rewriter.$array#7, is_correlated=TRUE)
        |             |             |     +-subquery=
        |             |             |       +-ProjectScan
        |             |             |         +-column_list=[$agg_rewriter.$struct#9]
        |             |             |         +-is_ordered=TRUE
        |             |             |         +-expr_list=
        |             |             |         | +-$struct#9 :=
        |             |             |         |   +-MakeStruct
        |             |             |         |     +-type=STRUCT<`array` ARRAY<STRING>>
        |             |             |         |     +-field_list=
        |             |             |         |       +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$orderbycol1#6)
        |             |             |         +-input_scan=
        |             |             |           +-LimitOffsetScan
        |             |             |             +-column_list=[$agg_rewriter.$orderbycol1#6]
        |             |             |             +-is_ordered=TRUE
        |             |             |             +-input_scan=
        |             |             |             | +-OrderByScan
        |             |             |             |   +-column_list=[$agg_rewriter.$orderbycol1#6]
        |             |             |             |   +-is_ordered=TRUE
        |             |             |             |   +-input_scan=
        |             |             |             |   | +-FilterScan
        |             |             |             |   |   +-column_list=[$agg_rewriter.$orderbycol1#6]
        |             |             |             |   |   +-input_scan=
        |             |             |             |   |   | +-ProjectScan
        |             |             |             |   |   |   +-column_list=[$agg_rewriter.$orderbycol1#6]
        |             |             |             |   |   |   +-expr_list=
        |             |             |             |   |   |   | +-$orderbycol1#6 :=
        |             |             |             |   |   |   |   +-GetStructField
        |             |             |             |   |   |   |     +-type=ARRAY<STRING>
        |             |             |             |   |   |   |     +-expr=
        |             |             |             |   |   |   |     | +-ColumnRef(type=STRUCT<`$orderbycol1_0` ARRAY<STRING>>, column=$agg_rewriter.$struct#8)
        |             |             |             |   |   |   |     +-field_idx=0
        |             |             |             |   |   |   +-input_scan=
        |             |             |             |   |   |     +-ArrayScan
        |             |             |             |   |   |       +-column_list=[$agg_rewriter.$struct#8]
        |             |             |             |   |   |       +-array_expr_list=
        |             |             |             |   |   |       | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` ARRAY<STRING>>>, column=$agg_rewriter.$array#7, is_correlated=TRUE)
        |             |             |             |   |   |       +-element_column_list=[$agg_rewriter.$struct#8]
        |             |             |             |   |   +-filter_expr=
        |             |             |             |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |             |             |             |   |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
        |             |             |             |   |         +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$orderbycol1#6)
        |             |             |             |   +-order_by_item_list=
        |             |             |             |     +-OrderByItem
        |             |             |             |       +-column_ref=
        |             |             |             |         +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$orderbycol1#6)
        |             |             |             +-limit=
        |             |             |             | +-Literal(type=INT64, value=10)
        |             |             |             +-offset=
        |             |             |               +-Literal(type=INT64, value=0)
        |             |             +-input_scan=
        |             |               +-SingleRowScan
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$agg_rewriter.$array#7]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#4]
            |   +-expr_list=
            |   | +-$orderbycol1#4 :=
            |   |   +-FunctionCall(ZetaSQL:array_concat(ARRAY<STRING>, repeated(1) ARRAY<STRING>) -> ARRAY<STRING>)
            |   |     +-GetProtoField
            |   |     | +-type=ARRAY<STRING>
            |   |     | +-expr=
            |   |     | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |     | +-field_descriptor=repeated_string_val
            |   |     | +-default_value=[]
            |   |     +-Literal(type=ARRAY<STRING>, value=["foo"])
            |   +-input_scan=
            |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            +-aggregate_list=
              +-$array#7 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<`$orderbycol1_0` ARRAY<STRING>>) -> ARRAY<STRUCT<`$orderbycol1_0` ARRAY<STRING>>>)
                  +-MakeStruct
                    +-type=STRUCT<`$orderbycol1_0` ARRAY<STRING>>
                    +-field_list=
                      +-ColumnRef(type=ARRAY<STRING>, column=$orderby.$orderbycol1#4)
                  +-having_modifier=
                    +-AggregateHavingModifier
                      +-kind=MAX
                      +-having_expr=
                        +-Literal(type=INT64, value=3)
==

# Duplicate ARRAY_CONCAT_AGGs in the same AggregateScan
SELECT ARRAY_CONCAT_AGG(KitchenSink.repeated_string_val ORDER BY ARRAY_LENGTH(KitchenSink.repeated_string_val))
     , ARRAY_CONCAT_AGG(KitchenSink.repeated_string_val ORDER BY ARRAY_LENGTH(KitchenSink.repeated_string_val))
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<STRING>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#4]
        |   +-expr_list=
        |   | +-$orderbycol1#4 :=
        |   |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |   |     +-GetProtoField
        |   |       +-type=ARRAY<STRING>
        |   |       +-expr=
        |   |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |       +-field_descriptor=repeated_string_val
        |   |       +-default_value=[]
        |   +-input_scan=
        |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<STRING>) -> ARRAY<STRING>)
          |   +-GetProtoField
          |     +-type=ARRAY<STRING>
          |     +-expr=
          |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
          |     +-field_descriptor=repeated_string_val
          |     +-default_value=[]
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
          +-$agg2#6 :=
            +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<STRING>) -> ARRAY<STRING>)
              +-GetProtoField
                +-type=ARRAY<STRING>
                +-expr=
                | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                +-field_descriptor=repeated_string_val
                +-default_value=[]
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<STRING>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<STRING>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#10)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#32]
        | |       +-expr_list=
        | |       | +-injected#32 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |       |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> BOOL)
        | |       |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#21)
        | |       |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |       |     +-SubqueryExpr
        | |       |       +-type=ARRAY<STRING>
        | |       |       +-subquery_type=ARRAY
        | |       |       +-parameter_list=
        | |       |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#21)
        | |       |       +-subquery=
        | |       |         +-OrderByScan
        | |       |           +-column_list=[$flatten.injected#24]
        | |       |           +-is_ordered=TRUE
        | |       |           +-input_scan=
        | |       |           | +-ArrayScan
        | |       |           |   +-column_list=[$flatten.injected#22, $offset.injected#23, $flatten.injected#24, $offset.injected#25]
        | |       |           |   +-input_scan=
        | |       |           |   | +-ArrayScan
        | |       |           |   |   +-column_list=[$flatten.injected#22, $offset.injected#23]
        | |       |           |   |   +-array_expr_list=
        | |       |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#21, is_correlated=TRUE)
        | |       |           |   |   +-element_column_list=[$flatten.injected#22]
        | |       |           |   |   +-array_offset_column=
        | |       |           |   |     +-ColumnHolder(column=$offset.injected#23)
        | |       |           |   +-array_expr_list=
        | |       |           |   | +-GetStructField
        | |       |           |   |   +-type=ARRAY<STRING>
        | |       |           |   |   +-expr=
        | |       |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<STRING>>, column=$flatten.injected#22)
        | |       |           |   |   +-field_idx=0
        | |       |           |   +-element_column_list=[$flatten.injected#24]
        | |       |           |   +-array_offset_column=
        | |       |           |     +-ColumnHolder(column=$offset.injected#25)
        | |       |           +-order_by_item_list=
        | |       |             +-OrderByItem
        | |       |             | +-column_ref=
        | |       |             |   +-ColumnRef(type=INT64, column=$offset.injected#23)
        | |       |             +-OrderByItem
        | |       |               +-column_ref=
        | |       |                 +-ColumnRef(type=INT64, column=$offset.injected#25)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$flatten_input.injected#21]
        | |           +-expr_list=
        | |           | +-injected#21 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        | |           |     +-subquery_type=SCALAR
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-ProjectScan
        | |           |         +-column_list=[$with_expr.injected#31]
        | |           |         +-expr_list=
        | |           |         | +-injected#31 :=
        | |           |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<STRING>>>, ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> ARRAY<STRUCT<`array` ARRAY<STRING>>>)
        | |           |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |           |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> INT64)
        | |           |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#13)
        | |           |         |     | +-Literal(type=INT64, value=1)
        | |           |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#13)
        | |           |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, value=NULL)
        | |           |         +-input_scan=
        | |           |           +-ProjectScan
        | |           |             +-column_list=[null_if_empty_array.$out#13]
        | |           |             +-expr_list=
        | |           |             | +-$out#13 :=
        | |           |             |   +-SubqueryExpr
        | |           |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        | |           |             |     +-subquery_type=ARRAY
        | |           |             |     +-parameter_list=
        | |           |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |           |             |     +-subquery=
        | |           |             |       +-ProjectScan
        | |           |             |         +-column_list=[$agg_rewriter.$struct#12]
        | |           |             |         +-is_ordered=TRUE
        | |           |             |         +-expr_list=
        | |           |             |         | +-$struct#12 :=
        | |           |             |         |   +-MakeStruct
        | |           |             |         |     +-type=STRUCT<`array` ARRAY<STRING>>
        | |           |             |         |     +-field_list=
        | |           |             |         |       +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#7)
        | |           |             |         +-input_scan=
        | |           |             |           +-OrderByScan
        | |           |             |             +-column_list=[$agg_rewriter.$arg#7]
        | |           |             |             +-is_ordered=TRUE
        | |           |             |             +-input_scan=
        | |           |             |             | +-FilterScan
        | |           |             |             |   +-column_list=$agg_rewriter.[KitchenSink#8, $orderbycol1#9, $arg#7]
        | |           |             |             |   +-input_scan=
        | |           |             |             |   | +-ProjectScan
        | |           |             |             |   |   +-column_list=$agg_rewriter.[KitchenSink#8, $orderbycol1#9, $arg#7]
        | |           |             |             |   |   +-expr_list=
        | |           |             |             |   |   | +-$arg#7 :=
        | |           |             |             |   |   |   +-GetProtoField
        | |           |             |             |   |   |     +-type=ARRAY<STRING>
        | |           |             |             |   |   |     +-expr=
        | |           |             |             |   |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=$agg_rewriter.KitchenSink#8)
        | |           |             |             |   |   |     +-field_descriptor=repeated_string_val
        | |           |             |             |   |   |     +-default_value=[]
        | |           |             |             |   |   +-input_scan=
        | |           |             |             |   |     +-ProjectScan
        | |           |             |             |   |       +-column_list=$agg_rewriter.[KitchenSink#8, $orderbycol1#9]
        | |           |             |             |   |       +-expr_list=
        | |           |             |             |   |       | +-KitchenSink#8 :=
        | |           |             |             |   |       | | +-GetStructField
        | |           |             |             |   |       | |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
        | |           |             |             |   |       | |   +-expr=
        | |           |             |             |   |       | |   | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#11)
        | |           |             |             |   |       | |   +-field_idx=0
        | |           |             |             |   |       | +-$orderbycol1#9 :=
        | |           |             |             |   |       |   +-GetStructField
        | |           |             |             |   |       |     +-type=INT64
        | |           |             |             |   |       |     +-expr=
        | |           |             |             |   |       |     | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#11)
        | |           |             |             |   |       |     +-field_idx=1
        | |           |             |             |   |       +-input_scan=
        | |           |             |             |   |         +-ArrayScan
        | |           |             |             |   |           +-column_list=[$agg_rewriter.$struct#11]
        | |           |             |             |   |           +-array_expr_list=
        | |           |             |             |   |           | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |           |             |             |   |           +-element_column_list=[$agg_rewriter.$struct#11]
        | |           |             |             |   +-filter_expr=
        | |           |             |             |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |           |             |             |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
        | |           |             |             |         +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#7)
        | |           |             |             +-order_by_item_list=
        | |           |             |               +-OrderByItem
        | |           |             |                 +-column_ref=
        | |           |             |                   +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#9)
        | |           |             +-input_scan=
        | |           |               +-SingleRowScan
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#6 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<STRING>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#17)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#34]
        |         +-expr_list=
        |         | +-injected#34 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> BOOL)
        |         |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#26)
        |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |         |     +-SubqueryExpr
        |         |       +-type=ARRAY<STRING>
        |         |       +-subquery_type=ARRAY
        |         |       +-parameter_list=
        |         |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#26)
        |         |       +-subquery=
        |         |         +-OrderByScan
        |         |           +-column_list=[$flatten.injected#29]
        |         |           +-is_ordered=TRUE
        |         |           +-input_scan=
        |         |           | +-ArrayScan
        |         |           |   +-column_list=[$flatten.injected#27, $offset.injected#28, $flatten.injected#29, $offset.injected#30]
        |         |           |   +-input_scan=
        |         |           |   | +-ArrayScan
        |         |           |   |   +-column_list=[$flatten.injected#27, $offset.injected#28]
        |         |           |   |   +-array_expr_list=
        |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#26, is_correlated=TRUE)
        |         |           |   |   +-element_column_list=[$flatten.injected#27]
        |         |           |   |   +-array_offset_column=
        |         |           |   |     +-ColumnHolder(column=$offset.injected#28)
        |         |           |   +-array_expr_list=
        |         |           |   | +-GetStructField
        |         |           |   |   +-type=ARRAY<STRING>
        |         |           |   |   +-expr=
        |         |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<STRING>>, column=$flatten.injected#27)
        |         |           |   |   +-field_idx=0
        |         |           |   +-element_column_list=[$flatten.injected#29]
        |         |           |   +-array_offset_column=
        |         |           |     +-ColumnHolder(column=$offset.injected#30)
        |         |           +-order_by_item_list=
        |         |             +-OrderByItem
        |         |             | +-column_ref=
        |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#28)
        |         |             +-OrderByItem
        |         |               +-column_ref=
        |         |                 +-ColumnRef(type=INT64, column=$offset.injected#30)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$flatten_input.injected#26]
        |             +-expr_list=
        |             | +-injected#26 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        |             |     +-subquery_type=SCALAR
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#17, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-ProjectScan
        |             |         +-column_list=[$with_expr.injected#33]
        |             |         +-expr_list=
        |             |         | +-injected#33 :=
        |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<STRING>>>, ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> ARRAY<STRUCT<`array` ARRAY<STRING>>>)
        |             |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |             |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> INT64)
        |             |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#20)
        |             |         |     | +-Literal(type=INT64, value=1)
        |             |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#20)
        |             |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, value=NULL)
        |             |         +-input_scan=
        |             |           +-ProjectScan
        |             |             +-column_list=[null_if_empty_array.$out#20]
        |             |             +-expr_list=
        |             |             | +-$out#20 :=
        |             |             |   +-SubqueryExpr
        |             |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        |             |             |     +-subquery_type=ARRAY
        |             |             |     +-parameter_list=
        |             |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#17, is_correlated=TRUE)
        |             |             |     +-subquery=
        |             |             |       +-ProjectScan
        |             |             |         +-column_list=[$agg_rewriter.$struct#19]
        |             |             |         +-is_ordered=TRUE
        |             |             |         +-expr_list=
        |             |             |         | +-$struct#19 :=
        |             |             |         |   +-MakeStruct
        |             |             |         |     +-type=STRUCT<`array` ARRAY<STRING>>
        |             |             |         |     +-field_list=
        |             |             |         |       +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#14)
        |             |             |         +-input_scan=
        |             |             |           +-OrderByScan
        |             |             |             +-column_list=[$agg_rewriter.$arg#14]
        |             |             |             +-is_ordered=TRUE
        |             |             |             +-input_scan=
        |             |             |             | +-FilterScan
        |             |             |             |   +-column_list=$agg_rewriter.[KitchenSink#15, $orderbycol1#16, $arg#14]
        |             |             |             |   +-input_scan=
        |             |             |             |   | +-ProjectScan
        |             |             |             |   |   +-column_list=$agg_rewriter.[KitchenSink#15, $orderbycol1#16, $arg#14]
        |             |             |             |   |   +-expr_list=
        |             |             |             |   |   | +-$arg#14 :=
        |             |             |             |   |   |   +-GetProtoField
        |             |             |             |   |   |     +-type=ARRAY<STRING>
        |             |             |             |   |   |     +-expr=
        |             |             |             |   |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=$agg_rewriter.KitchenSink#15)
        |             |             |             |   |   |     +-field_descriptor=repeated_string_val
        |             |             |             |   |   |     +-default_value=[]
        |             |             |             |   |   +-input_scan=
        |             |             |             |   |     +-ProjectScan
        |             |             |             |   |       +-column_list=$agg_rewriter.[KitchenSink#15, $orderbycol1#16]
        |             |             |             |   |       +-expr_list=
        |             |             |             |   |       | +-KitchenSink#15 :=
        |             |             |             |   |       | | +-GetStructField
        |             |             |             |   |       | |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
        |             |             |             |   |       | |   +-expr=
        |             |             |             |   |       | |   | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#18)
        |             |             |             |   |       | |   +-field_idx=0
        |             |             |             |   |       | +-$orderbycol1#16 :=
        |             |             |             |   |       |   +-GetStructField
        |             |             |             |   |       |     +-type=INT64
        |             |             |             |   |       |     +-expr=
        |             |             |             |   |       |     | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#18)
        |             |             |             |   |       |     +-field_idx=1
        |             |             |             |   |       +-input_scan=
        |             |             |             |   |         +-ArrayScan
        |             |             |             |   |           +-column_list=[$agg_rewriter.$struct#18]
        |             |             |             |   |           +-array_expr_list=
        |             |             |             |   |           | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#17, is_correlated=TRUE)
        |             |             |             |   |           +-element_column_list=[$agg_rewriter.$struct#18]
        |             |             |             |   +-filter_expr=
        |             |             |             |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |             |             |             |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
        |             |             |             |         +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#14)
        |             |             |             +-order_by_item_list=
        |             |             |               +-OrderByItem
        |             |             |                 +-column_ref=
        |             |             |                   +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#16)
        |             |             +-input_scan=
        |             |               +-SingleRowScan
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#10, $array#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#4]
            |   +-expr_list=
            |   | +-$orderbycol1#4 :=
            |   |   +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   |     +-GetProtoField
            |   |       +-type=ARRAY<STRING>
            |   |       +-expr=
            |   |       | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |       +-field_descriptor=repeated_string_val
            |   |       +-default_value=[]
            |   +-input_scan=
            |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            +-aggregate_list=
              +-$array#10 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>)
              |   +-MakeStruct
              |     +-type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>
              |     +-field_list=
              |       +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              |       +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
              +-$array#17 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>
                    +-field_list=
                      +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)

==

[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE]

# Slight different ARRAY_CONCAT_AGGs in the same AggregateScan
SELECT ARRAY_CONCAT_AGG(KitchenSink.repeated_string_val ORDER BY ARRAY_LENGTH(KitchenSink.repeated_string_val) LIMIT 2),
       ARRAY_CONCAT_AGG(KitchenSink.repeated_bytes_val ORDER BY 3 - ASCII(KitchenSink.repeated_bytes_val[SAFE_OFFSET(0)]))
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<STRING>]
| +-$aggregate.$agg2#7 AS `$col2` [ARRAY<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#4, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#4 :=
        |   | | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |   | |   +-GetProtoField
        |   | |     +-type=ARRAY<STRING>
        |   | |     +-expr=
        |   | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   | |     +-field_descriptor=repeated_string_val
        |   | |     +-default_value=[]
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
        |   |     +-Literal(type=INT64, value=3)
        |   |     +-FunctionCall(ZetaSQL:ascii(BYTES) -> INT64)
        |   |       +-FunctionCall(ZetaSQL:$safe_array_at_offset(ARRAY<BYTES>, INT64) -> BYTES)
        |   |         +-GetProtoField
        |   |         | +-type=ARRAY<BYTES>
        |   |         | +-expr=
        |   |         | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |         | +-field_descriptor=repeated_bytes_val
        |   |         | +-default_value=[]
        |   |         +-Literal(type=INT64, value=0)
        |   +-input_scan=
        |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<STRING>) -> ARRAY<STRING>)
          |   +-GetProtoField
          |     +-type=ARRAY<STRING>
          |     +-expr=
          |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
          |     +-field_descriptor=repeated_string_val
          |     +-default_value=[]
          |   +-order_by_item_list=
          |   | +-OrderByItem
          |   |   +-column_ref=
          |   |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
          |   +-limit=
          |     +-Literal(type=INT64, value=2)
          +-$agg2#7 :=
            +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<BYTES>) -> ARRAY<BYTES>)
              +-GetProtoField
                +-type=ARRAY<BYTES>
                +-expr=
                | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                +-field_descriptor=repeated_bytes_val
                +-default_value=[]
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [ARRAY<STRING>]
| +-$aggregate.$agg2#7 AS `$col2` [ARRAY<BYTES>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<STRING>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#11)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#33]
        | |       +-expr_list=
        | |       | +-injected#33 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |       |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> BOOL)
        | |       |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#22)
        | |       |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |       |     +-SubqueryExpr
        | |       |       +-type=ARRAY<STRING>
        | |       |       +-subquery_type=ARRAY
        | |       |       +-parameter_list=
        | |       |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#22)
        | |       |       +-subquery=
        | |       |         +-OrderByScan
        | |       |           +-column_list=[$flatten.injected#25]
        | |       |           +-is_ordered=TRUE
        | |       |           +-input_scan=
        | |       |           | +-ArrayScan
        | |       |           |   +-column_list=[$flatten.injected#23, $offset.injected#24, $flatten.injected#25, $offset.injected#26]
        | |       |           |   +-input_scan=
        | |       |           |   | +-ArrayScan
        | |       |           |   |   +-column_list=[$flatten.injected#23, $offset.injected#24]
        | |       |           |   |   +-array_expr_list=
        | |       |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#22, is_correlated=TRUE)
        | |       |           |   |   +-element_column_list=[$flatten.injected#23]
        | |       |           |   |   +-array_offset_column=
        | |       |           |   |     +-ColumnHolder(column=$offset.injected#24)
        | |       |           |   +-array_expr_list=
        | |       |           |   | +-GetStructField
        | |       |           |   |   +-type=ARRAY<STRING>
        | |       |           |   |   +-expr=
        | |       |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<STRING>>, column=$flatten.injected#23)
        | |       |           |   |   +-field_idx=0
        | |       |           |   +-element_column_list=[$flatten.injected#25]
        | |       |           |   +-array_offset_column=
        | |       |           |     +-ColumnHolder(column=$offset.injected#26)
        | |       |           +-order_by_item_list=
        | |       |             +-OrderByItem
        | |       |             | +-column_ref=
        | |       |             |   +-ColumnRef(type=INT64, column=$offset.injected#24)
        | |       |             +-OrderByItem
        | |       |               +-column_ref=
        | |       |                 +-ColumnRef(type=INT64, column=$offset.injected#26)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$flatten_input.injected#22]
        | |           +-expr_list=
        | |           | +-injected#22 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        | |           |     +-subquery_type=SCALAR
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#11, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-ProjectScan
        | |           |         +-column_list=[$with_expr.injected#32]
        | |           |         +-expr_list=
        | |           |         | +-injected#32 :=
        | |           |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<STRING>>>, ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> ARRAY<STRUCT<`array` ARRAY<STRING>>>)
        | |           |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |           |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> INT64)
        | |           |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#14)
        | |           |         |     | +-Literal(type=INT64, value=1)
        | |           |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#14)
        | |           |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, value=NULL)
        | |           |         +-input_scan=
        | |           |           +-ProjectScan
        | |           |             +-column_list=[null_if_empty_array.$out#14]
        | |           |             +-expr_list=
        | |           |             | +-$out#14 :=
        | |           |             |   +-SubqueryExpr
        | |           |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        | |           |             |     +-subquery_type=ARRAY
        | |           |             |     +-parameter_list=
        | |           |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#11, is_correlated=TRUE)
        | |           |             |     +-subquery=
        | |           |             |       +-ProjectScan
        | |           |             |         +-column_list=[$agg_rewriter.$struct#13]
        | |           |             |         +-is_ordered=TRUE
        | |           |             |         +-expr_list=
        | |           |             |         | +-$struct#13 :=
        | |           |             |         |   +-MakeStruct
        | |           |             |         |     +-type=STRUCT<`array` ARRAY<STRING>>
        | |           |             |         |     +-field_list=
        | |           |             |         |       +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#8)
        | |           |             |         +-input_scan=
        | |           |             |           +-LimitOffsetScan
        | |           |             |             +-column_list=[$agg_rewriter.$arg#8]
        | |           |             |             +-is_ordered=TRUE
        | |           |             |             +-input_scan=
        | |           |             |             | +-OrderByScan
        | |           |             |             |   +-column_list=[$agg_rewriter.$arg#8]
        | |           |             |             |   +-is_ordered=TRUE
        | |           |             |             |   +-input_scan=
        | |           |             |             |   | +-FilterScan
        | |           |             |             |   |   +-column_list=$agg_rewriter.[KitchenSink#9, $orderbycol1#10, $arg#8]
        | |           |             |             |   |   +-input_scan=
        | |           |             |             |   |   | +-ProjectScan
        | |           |             |             |   |   |   +-column_list=$agg_rewriter.[KitchenSink#9, $orderbycol1#10, $arg#8]
        | |           |             |             |   |   |   +-expr_list=
        | |           |             |             |   |   |   | +-$arg#8 :=
        | |           |             |             |   |   |   |   +-GetProtoField
        | |           |             |             |   |   |   |     +-type=ARRAY<STRING>
        | |           |             |             |   |   |   |     +-expr=
        | |           |             |             |   |   |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=$agg_rewriter.KitchenSink#9)
        | |           |             |             |   |   |   |     +-field_descriptor=repeated_string_val
        | |           |             |             |   |   |   |     +-default_value=[]
        | |           |             |             |   |   |   +-input_scan=
        | |           |             |             |   |   |     +-ProjectScan
        | |           |             |             |   |   |       +-column_list=$agg_rewriter.[KitchenSink#9, $orderbycol1#10]
        | |           |             |             |   |   |       +-expr_list=
        | |           |             |             |   |   |       | +-KitchenSink#9 :=
        | |           |             |             |   |   |       | | +-GetStructField
        | |           |             |             |   |   |       | |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
        | |           |             |             |   |   |       | |   +-expr=
        | |           |             |             |   |   |       | |   | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#12)
        | |           |             |             |   |   |       | |   +-field_idx=0
        | |           |             |             |   |   |       | +-$orderbycol1#10 :=
        | |           |             |             |   |   |       |   +-GetStructField
        | |           |             |             |   |   |       |     +-type=INT64
        | |           |             |             |   |   |       |     +-expr=
        | |           |             |             |   |   |       |     | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#12)
        | |           |             |             |   |   |       |     +-field_idx=1
        | |           |             |             |   |   |       +-input_scan=
        | |           |             |             |   |   |         +-ArrayScan
        | |           |             |             |   |   |           +-column_list=[$agg_rewriter.$struct#12]
        | |           |             |             |   |   |           +-array_expr_list=
        | |           |             |             |   |   |           | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#11, is_correlated=TRUE)
        | |           |             |             |   |   |           +-element_column_list=[$agg_rewriter.$struct#12]
        | |           |             |             |   |   +-filter_expr=
        | |           |             |             |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |           |             |             |   |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
        | |           |             |             |   |         +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#8)
        | |           |             |             |   +-order_by_item_list=
        | |           |             |             |     +-OrderByItem
        | |           |             |             |       +-column_ref=
        | |           |             |             |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#10)
        | |           |             |             +-limit=
        | |           |             |             | +-Literal(type=INT64, value=2)
        | |           |             |             +-offset=
        | |           |             |               +-Literal(type=INT64, value=0)
        | |           |             +-input_scan=
        | |           |               +-SingleRowScan
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#7 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<BYTES>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#18)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#35]
        |         +-expr_list=
        |         | +-injected#35 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BYTES>, ARRAY<BYTES>) -> ARRAY<BYTES>)
        |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<BYTES>>>) -> BOOL)
        |         |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>, column=$flatten_input.injected#27)
        |         |     +-Literal(type=ARRAY<BYTES>, value=NULL)
        |         |     +-SubqueryExpr
        |         |       +-type=ARRAY<BYTES>
        |         |       +-subquery_type=ARRAY
        |         |       +-parameter_list=
        |         |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>, column=$flatten_input.injected#27)
        |         |       +-subquery=
        |         |         +-OrderByScan
        |         |           +-column_list=[$flatten.injected#30]
        |         |           +-is_ordered=TRUE
        |         |           +-input_scan=
        |         |           | +-ArrayScan
        |         |           |   +-column_list=[$flatten.injected#28, $offset.injected#29, $flatten.injected#30, $offset.injected#31]
        |         |           |   +-input_scan=
        |         |           |   | +-ArrayScan
        |         |           |   |   +-column_list=[$flatten.injected#28, $offset.injected#29]
        |         |           |   |   +-array_expr_list=
        |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>, column=$flatten_input.injected#27, is_correlated=TRUE)
        |         |           |   |   +-element_column_list=[$flatten.injected#28]
        |         |           |   |   +-array_offset_column=
        |         |           |   |     +-ColumnHolder(column=$offset.injected#29)
        |         |           |   +-array_expr_list=
        |         |           |   | +-GetStructField
        |         |           |   |   +-type=ARRAY<BYTES>
        |         |           |   |   +-expr=
        |         |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<BYTES>>, column=$flatten.injected#28)
        |         |           |   |   +-field_idx=0
        |         |           |   +-element_column_list=[$flatten.injected#30]
        |         |           |   +-array_offset_column=
        |         |           |     +-ColumnHolder(column=$offset.injected#31)
        |         |           +-order_by_item_list=
        |         |             +-OrderByItem
        |         |             | +-column_ref=
        |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#29)
        |         |             +-OrderByItem
        |         |               +-column_ref=
        |         |                 +-ColumnRef(type=INT64, column=$offset.injected#31)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$flatten_input.injected#27]
        |             +-expr_list=
        |             | +-injected#27 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>
        |             |     +-subquery_type=SCALAR
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#18, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-ProjectScan
        |             |         +-column_list=[$with_expr.injected#34]
        |             |         +-expr_list=
        |             |         | +-injected#34 :=
        |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<BYTES>>>, ARRAY<STRUCT<`array` ARRAY<BYTES>>>) -> ARRAY<STRUCT<`array` ARRAY<BYTES>>>)
        |             |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |             |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<BYTES>>>) -> INT64)
        |             |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>, column=null_if_empty_array.$out#21)
        |             |         |     | +-Literal(type=INT64, value=1)
        |             |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>, column=null_if_empty_array.$out#21)
        |             |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>, value=NULL)
        |             |         +-input_scan=
        |             |           +-ProjectScan
        |             |             +-column_list=[null_if_empty_array.$out#21]
        |             |             +-expr_list=
        |             |             | +-$out#21 :=
        |             |             |   +-SubqueryExpr
        |             |             |     +-type=ARRAY<STRUCT<`array` ARRAY<BYTES>>>
        |             |             |     +-subquery_type=ARRAY
        |             |             |     +-parameter_list=
        |             |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#18, is_correlated=TRUE)
        |             |             |     +-subquery=
        |             |             |       +-ProjectScan
        |             |             |         +-column_list=[$agg_rewriter.$struct#20]
        |             |             |         +-is_ordered=TRUE
        |             |             |         +-expr_list=
        |             |             |         | +-$struct#20 :=
        |             |             |         |   +-MakeStruct
        |             |             |         |     +-type=STRUCT<`array` ARRAY<BYTES>>
        |             |             |         |     +-field_list=
        |             |             |         |       +-ColumnRef(type=ARRAY<BYTES>, column=$agg_rewriter.$arg#15)
        |             |             |         +-input_scan=
        |             |             |           +-OrderByScan
        |             |             |             +-column_list=[$agg_rewriter.$arg#15]
        |             |             |             +-is_ordered=TRUE
        |             |             |             +-input_scan=
        |             |             |             | +-FilterScan
        |             |             |             |   +-column_list=$agg_rewriter.[KitchenSink#16, $orderbycol1#17, $arg#15]
        |             |             |             |   +-input_scan=
        |             |             |             |   | +-ProjectScan
        |             |             |             |   |   +-column_list=$agg_rewriter.[KitchenSink#16, $orderbycol1#17, $arg#15]
        |             |             |             |   |   +-expr_list=
        |             |             |             |   |   | +-$arg#15 :=
        |             |             |             |   |   |   +-GetProtoField
        |             |             |             |   |   |     +-type=ARRAY<BYTES>
        |             |             |             |   |   |     +-expr=
        |             |             |             |   |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=$agg_rewriter.KitchenSink#16)
        |             |             |             |   |   |     +-field_descriptor=repeated_bytes_val
        |             |             |             |   |   |     +-default_value=[]
        |             |             |             |   |   +-input_scan=
        |             |             |             |   |     +-ProjectScan
        |             |             |             |   |       +-column_list=$agg_rewriter.[KitchenSink#16, $orderbycol1#17]
        |             |             |             |   |       +-expr_list=
        |             |             |             |   |       | +-KitchenSink#16 :=
        |             |             |             |   |       | | +-GetStructField
        |             |             |             |   |       | |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
        |             |             |             |   |       | |   +-expr=
        |             |             |             |   |       | |   | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#19)
        |             |             |             |   |       | |   +-field_idx=0
        |             |             |             |   |       | +-$orderbycol1#17 :=
        |             |             |             |   |       |   +-GetStructField
        |             |             |             |   |       |     +-type=INT64
        |             |             |             |   |       |     +-expr=
        |             |             |             |   |       |     | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#19)
        |             |             |             |   |       |     +-field_idx=1
        |             |             |             |   |       +-input_scan=
        |             |             |             |   |         +-ArrayScan
        |             |             |             |   |           +-column_list=[$agg_rewriter.$struct#19]
        |             |             |             |   |           +-array_expr_list=
        |             |             |             |   |           | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#18, is_correlated=TRUE)
        |             |             |             |   |           +-element_column_list=[$agg_rewriter.$struct#19]
        |             |             |             |   +-filter_expr=
        |             |             |             |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |             |             |             |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<BYTES>) -> BOOL)
        |             |             |             |         +-ColumnRef(type=ARRAY<BYTES>, column=$agg_rewriter.$arg#15)
        |             |             |             +-order_by_item_list=
        |             |             |               +-OrderByItem
        |             |             |                 +-column_ref=
        |             |             |                   +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#17)
        |             |             +-input_scan=
        |             |               +-SingleRowScan
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#11, $array#18]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#4, $orderby.$orderbycol1#6]
            |   +-expr_list=
            |   | +-$orderbycol1#4 :=
            |   | | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   | |   +-GetProtoField
            |   | |     +-type=ARRAY<STRING>
            |   | |     +-expr=
            |   | |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   | |     +-field_descriptor=repeated_string_val
            |   | |     +-default_value=[]
            |   | +-$orderbycol1#6 :=
            |   |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
            |   |     +-Literal(type=INT64, value=3)
            |   |     +-FunctionCall(ZetaSQL:ascii(BYTES) -> INT64)
            |   |       +-FunctionCall(ZetaSQL:$safe_array_at_offset(ARRAY<BYTES>, INT64) -> BYTES)
            |   |         +-GetProtoField
            |   |         | +-type=ARRAY<BYTES>
            |   |         | +-expr=
            |   |         | | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |         | +-field_descriptor=repeated_bytes_val
            |   |         | +-default_value=[]
            |   |         +-Literal(type=INT64, value=0)
            |   +-input_scan=
            |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            +-aggregate_list=
              +-$array#11 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>)
              |   +-MakeStruct
              |     +-type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>
              |     +-field_list=
              |       +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              |       +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
              +-$array#18 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>
                    +-field_list=
                      +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
==

[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE]

# ARRAY_CONCAT_AGG with limits
SELECT ARRAY_CONCAT_AGG(KitchenSink.repeated_string_val LIMIT 2),
       ARRAY_CONCAT_AGG(KitchenSink.repeated_string_val ORDER BY ARRAY_LENGTH(KitchenSink.repeated_string_val)+1 LIMIT 3)
FROM TestTable
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [ARRAY<STRING>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#4, $agg2#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#4, $agg2#6]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#5]
        |   +-expr_list=
        |   | +-$orderbycol1#5 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |   |     | +-GetProtoField
        |   |     |   +-type=ARRAY<STRING>
        |   |     |   +-expr=
        |   |     |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |     |   +-field_descriptor=repeated_string_val
        |   |     |   +-default_value=[]
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        +-aggregate_list=
          +-$agg1#4 :=
          | +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<STRING>) -> ARRAY<STRING>)
          |   +-GetProtoField
          |     +-type=ARRAY<STRING>
          |     +-expr=
          |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
          |     +-field_descriptor=repeated_string_val
          |     +-default_value=[]
          |   +-limit=
          |     +-Literal(type=INT64, value=2)
          +-$agg2#6 :=
            +-AggregateFunctionCall(ZetaSQL:array_concat_agg(ARRAY<STRING>) -> ARRAY<STRING>)
              +-GetProtoField
                +-type=ARRAY<STRING>
                +-expr=
                | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                +-field_descriptor=repeated_string_val
                +-default_value=[]
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#5)
              +-limit=
                +-Literal(type=INT64, value=3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [ARRAY<STRING>]
| +-$aggregate.$agg2#6 AS `$col2` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#4, $agg2#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#4, $agg2#6]
        +-expr_list=
        | +-$agg1#4 :=
        | | +-SubqueryExpr
        | |   +-type=ARRAY<STRING>
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>>, column=$agg_rewriter.$array#9)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#31]
        | |       +-expr_list=
        | |       | +-injected#31 :=
        | |       |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |       |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> BOOL)
        | |       |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#20)
        | |       |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |       |     +-SubqueryExpr
        | |       |       +-type=ARRAY<STRING>
        | |       |       +-subquery_type=ARRAY
        | |       |       +-parameter_list=
        | |       |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#20)
        | |       |       +-subquery=
        | |       |         +-OrderByScan
        | |       |           +-column_list=[$flatten.injected#23]
        | |       |           +-is_ordered=TRUE
        | |       |           +-input_scan=
        | |       |           | +-ArrayScan
        | |       |           |   +-column_list=[$flatten.injected#21, $offset.injected#22, $flatten.injected#23, $offset.injected#24]
        | |       |           |   +-input_scan=
        | |       |           |   | +-ArrayScan
        | |       |           |   |   +-column_list=[$flatten.injected#21, $offset.injected#22]
        | |       |           |   |   +-array_expr_list=
        | |       |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#20, is_correlated=TRUE)
        | |       |           |   |   +-element_column_list=[$flatten.injected#21]
        | |       |           |   |   +-array_offset_column=
        | |       |           |   |     +-ColumnHolder(column=$offset.injected#22)
        | |       |           |   +-array_expr_list=
        | |       |           |   | +-GetStructField
        | |       |           |   |   +-type=ARRAY<STRING>
        | |       |           |   |   +-expr=
        | |       |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<STRING>>, column=$flatten.injected#21)
        | |       |           |   |   +-field_idx=0
        | |       |           |   +-element_column_list=[$flatten.injected#23]
        | |       |           |   +-array_offset_column=
        | |       |           |     +-ColumnHolder(column=$offset.injected#24)
        | |       |           +-order_by_item_list=
        | |       |             +-OrderByItem
        | |       |             | +-column_ref=
        | |       |             |   +-ColumnRef(type=INT64, column=$offset.injected#22)
        | |       |             +-OrderByItem
        | |       |               +-column_ref=
        | |       |                 +-ColumnRef(type=INT64, column=$offset.injected#24)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$flatten_input.injected#20]
        | |           +-expr_list=
        | |           | +-injected#20 :=
        | |           |   +-SubqueryExpr
        | |           |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        | |           |     +-subquery_type=SCALAR
        | |           |     +-parameter_list=
        | |           |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |           |     +-subquery=
        | |           |       +-ProjectScan
        | |           |         +-column_list=[$with_expr.injected#30]
        | |           |         +-expr_list=
        | |           |         | +-injected#30 :=
        | |           |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<STRING>>>, ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> ARRAY<STRUCT<`array` ARRAY<STRING>>>)
        | |           |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |           |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> INT64)
        | |           |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#12)
        | |           |         |     | +-Literal(type=INT64, value=1)
        | |           |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#12)
        | |           |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, value=NULL)
        | |           |         +-input_scan=
        | |           |           +-ProjectScan
        | |           |             +-column_list=[null_if_empty_array.$out#12]
        | |           |             +-expr_list=
        | |           |             | +-$out#12 :=
        | |           |             |   +-SubqueryExpr
        | |           |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        | |           |             |     +-subquery_type=ARRAY
        | |           |             |     +-parameter_list=
        | |           |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |           |             |     +-subquery=
        | |           |             |       +-ProjectScan
        | |           |             |         +-column_list=[$agg_rewriter.$struct#11]
        | |           |             |         +-expr_list=
        | |           |             |         | +-$struct#11 :=
        | |           |             |         |   +-MakeStruct
        | |           |             |         |     +-type=STRUCT<`array` ARRAY<STRING>>
        | |           |             |         |     +-field_list=
        | |           |             |         |       +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#7)
        | |           |             |         +-input_scan=
        | |           |             |           +-LimitOffsetScan
        | |           |             |             +-column_list=[$agg_rewriter.$arg#7]
        | |           |             |             +-input_scan=
        | |           |             |             | +-ProjectScan
        | |           |             |             |   +-column_list=[$agg_rewriter.$arg#7]
        | |           |             |             |   +-input_scan=
        | |           |             |             |     +-FilterScan
        | |           |             |             |       +-column_list=$agg_rewriter.[KitchenSink#8, $arg#7]
        | |           |             |             |       +-input_scan=
        | |           |             |             |       | +-ProjectScan
        | |           |             |             |       |   +-column_list=$agg_rewriter.[KitchenSink#8, $arg#7]
        | |           |             |             |       |   +-expr_list=
        | |           |             |             |       |   | +-$arg#7 :=
        | |           |             |             |       |   |   +-GetProtoField
        | |           |             |             |       |   |     +-type=ARRAY<STRING>
        | |           |             |             |       |   |     +-expr=
        | |           |             |             |       |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=$agg_rewriter.KitchenSink#8)
        | |           |             |             |       |   |     +-field_descriptor=repeated_string_val
        | |           |             |             |       |   |     +-default_value=[]
        | |           |             |             |       |   +-input_scan=
        | |           |             |             |       |     +-ProjectScan
        | |           |             |             |       |       +-column_list=[$agg_rewriter.KitchenSink#8]
        | |           |             |             |       |       +-expr_list=
        | |           |             |             |       |       | +-KitchenSink#8 :=
        | |           |             |             |       |       |   +-GetStructField
        | |           |             |             |       |       |     +-type=PROTO<zetasql_test__.KitchenSinkPB>
        | |           |             |             |       |       |     +-expr=
        | |           |             |             |       |       |     | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>, column=$agg_rewriter.$struct#10)
        | |           |             |             |       |       |     +-field_idx=0
        | |           |             |             |       |       +-input_scan=
        | |           |             |             |       |         +-ArrayScan
        | |           |             |             |       |           +-column_list=[$agg_rewriter.$struct#10]
        | |           |             |             |       |           +-array_expr_list=
        | |           |             |             |       |           | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |           |             |             |       |           +-element_column_list=[$agg_rewriter.$struct#10]
        | |           |             |             |       +-filter_expr=
        | |           |             |             |         +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |           |             |             |           +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
        | |           |             |             |             +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#7)
        | |           |             |             +-limit=
        | |           |             |             | +-Literal(type=INT64, value=2)
        | |           |             |             +-offset=
        | |           |             |               +-Literal(type=INT64, value=0)
        | |           |             +-input_scan=
        | |           |               +-SingleRowScan
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#6 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<STRING>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#16)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#33]
        |         +-expr_list=
        |         | +-injected#33 :=
        |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> BOOL)
        |         |     | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#25)
        |         |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |         |     +-SubqueryExpr
        |         |       +-type=ARRAY<STRING>
        |         |       +-subquery_type=ARRAY
        |         |       +-parameter_list=
        |         |       | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#25)
        |         |       +-subquery=
        |         |         +-OrderByScan
        |         |           +-column_list=[$flatten.injected#28]
        |         |           +-is_ordered=TRUE
        |         |           +-input_scan=
        |         |           | +-ArrayScan
        |         |           |   +-column_list=[$flatten.injected#26, $offset.injected#27, $flatten.injected#28, $offset.injected#29]
        |         |           |   +-input_scan=
        |         |           |   | +-ArrayScan
        |         |           |   |   +-column_list=[$flatten.injected#26, $offset.injected#27]
        |         |           |   |   +-array_expr_list=
        |         |           |   |   | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=$flatten_input.injected#25, is_correlated=TRUE)
        |         |           |   |   +-element_column_list=[$flatten.injected#26]
        |         |           |   |   +-array_offset_column=
        |         |           |   |     +-ColumnHolder(column=$offset.injected#27)
        |         |           |   +-array_expr_list=
        |         |           |   | +-GetStructField
        |         |           |   |   +-type=ARRAY<STRING>
        |         |           |   |   +-expr=
        |         |           |   |   | +-ColumnRef(type=STRUCT<`array` ARRAY<STRING>>, column=$flatten.injected#26)
        |         |           |   |   +-field_idx=0
        |         |           |   +-element_column_list=[$flatten.injected#28]
        |         |           |   +-array_offset_column=
        |         |           |     +-ColumnHolder(column=$offset.injected#29)
        |         |           +-order_by_item_list=
        |         |             +-OrderByItem
        |         |             | +-column_ref=
        |         |             |   +-ColumnRef(type=INT64, column=$offset.injected#27)
        |         |             +-OrderByItem
        |         |               +-column_ref=
        |         |                 +-ColumnRef(type=INT64, column=$offset.injected#29)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$flatten_input.injected#25]
        |             +-expr_list=
        |             | +-injected#25 :=
        |             |   +-SubqueryExpr
        |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        |             |     +-subquery_type=SCALAR
        |             |     +-parameter_list=
        |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#16, is_correlated=TRUE)
        |             |     +-subquery=
        |             |       +-ProjectScan
        |             |         +-column_list=[$with_expr.injected#32]
        |             |         +-expr_list=
        |             |         | +-injected#32 :=
        |             |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRUCT<`array` ARRAY<STRING>>>, ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> ARRAY<STRUCT<`array` ARRAY<STRING>>>)
        |             |         |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |             |         |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRUCT<`array` ARRAY<STRING>>>) -> INT64)
        |             |         |     | | +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#19)
        |             |         |     | +-Literal(type=INT64, value=1)
        |             |         |     +-ColumnRef(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, column=null_if_empty_array.$out#19)
        |             |         |     +-Literal(type=ARRAY<STRUCT<`array` ARRAY<STRING>>>, value=NULL)
        |             |         +-input_scan=
        |             |           +-ProjectScan
        |             |             +-column_list=[null_if_empty_array.$out#19]
        |             |             +-expr_list=
        |             |             | +-$out#19 :=
        |             |             |   +-SubqueryExpr
        |             |             |     +-type=ARRAY<STRUCT<`array` ARRAY<STRING>>>
        |             |             |     +-subquery_type=ARRAY
        |             |             |     +-parameter_list=
        |             |             |     | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#16, is_correlated=TRUE)
        |             |             |     +-subquery=
        |             |             |       +-ProjectScan
        |             |             |         +-column_list=[$agg_rewriter.$struct#18]
        |             |             |         +-is_ordered=TRUE
        |             |             |         +-expr_list=
        |             |             |         | +-$struct#18 :=
        |             |             |         |   +-MakeStruct
        |             |             |         |     +-type=STRUCT<`array` ARRAY<STRING>>
        |             |             |         |     +-field_list=
        |             |             |         |       +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#13)
        |             |             |         +-input_scan=
        |             |             |           +-LimitOffsetScan
        |             |             |             +-column_list=[$agg_rewriter.$arg#13]
        |             |             |             +-is_ordered=TRUE
        |             |             |             +-input_scan=
        |             |             |             | +-OrderByScan
        |             |             |             |   +-column_list=[$agg_rewriter.$arg#13]
        |             |             |             |   +-is_ordered=TRUE
        |             |             |             |   +-input_scan=
        |             |             |             |   | +-FilterScan
        |             |             |             |   |   +-column_list=$agg_rewriter.[KitchenSink#14, $orderbycol1#15, $arg#13]
        |             |             |             |   |   +-input_scan=
        |             |             |             |   |   | +-ProjectScan
        |             |             |             |   |   |   +-column_list=$agg_rewriter.[KitchenSink#14, $orderbycol1#15, $arg#13]
        |             |             |             |   |   |   +-expr_list=
        |             |             |             |   |   |   | +-$arg#13 :=
        |             |             |             |   |   |   |   +-GetProtoField
        |             |             |             |   |   |   |     +-type=ARRAY<STRING>
        |             |             |             |   |   |   |     +-expr=
        |             |             |             |   |   |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=$agg_rewriter.KitchenSink#14)
        |             |             |             |   |   |   |     +-field_descriptor=repeated_string_val
        |             |             |             |   |   |   |     +-default_value=[]
        |             |             |             |   |   |   +-input_scan=
        |             |             |             |   |   |     +-ProjectScan
        |             |             |             |   |   |       +-column_list=$agg_rewriter.[KitchenSink#14, $orderbycol1#15]
        |             |             |             |   |   |       +-expr_list=
        |             |             |             |   |   |       | +-KitchenSink#14 :=
        |             |             |             |   |   |       | | +-GetStructField
        |             |             |             |   |   |       | |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
        |             |             |             |   |   |       | |   +-expr=
        |             |             |             |   |   |       | |   | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#17)
        |             |             |             |   |   |       | |   +-field_idx=0
        |             |             |             |   |   |       | +-$orderbycol1#15 :=
        |             |             |             |   |   |       |   +-GetStructField
        |             |             |             |   |   |       |     +-type=INT64
        |             |             |             |   |   |       |     +-expr=
        |             |             |             |   |   |       |     | +-ColumnRef(type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#17)
        |             |             |             |   |   |       |     +-field_idx=1
        |             |             |             |   |   |       +-input_scan=
        |             |             |             |   |   |         +-ArrayScan
        |             |             |             |   |   |           +-column_list=[$agg_rewriter.$struct#17]
        |             |             |             |   |   |           +-array_expr_list=
        |             |             |             |   |   |           | +-ColumnRef(type=ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#16, is_correlated=TRUE)
        |             |             |             |   |   |           +-element_column_list=[$agg_rewriter.$struct#17]
        |             |             |             |   |   +-filter_expr=
        |             |             |             |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |             |             |             |   |       +-FunctionCall(ZetaSQL:$is_null(ARRAY<STRING>) -> BOOL)
        |             |             |             |   |         +-ColumnRef(type=ARRAY<STRING>, column=$agg_rewriter.$arg#13)
        |             |             |             |   +-order_by_item_list=
        |             |             |             |     +-OrderByItem
        |             |             |             |       +-column_ref=
        |             |             |             |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#15)
        |             |             |             +-limit=
        |             |             |             | +-Literal(type=INT64, value=3)
        |             |             |             +-offset=
        |             |             |               +-Literal(type=INT64, value=0)
        |             |             +-input_scan=
        |             |               +-SingleRowScan
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#9, $array#16]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $orderby.$orderbycol1#5]
            |   +-expr_list=
            |   | +-$orderbycol1#5 :=
            |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
            |   |     | +-GetProtoField
            |   |     |   +-type=ARRAY<STRING>
            |   |     |   +-expr=
            |   |     |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |     |   +-field_descriptor=repeated_string_val
            |   |     |   +-default_value=[]
            |   |     +-Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            +-aggregate_list=
              +-$array#9 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>) -> ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>>)
              |   +-MakeStruct
              |     +-type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>>
              |     +-field_list=
              |       +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
              +-$array#16 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<KitchenSink_0 PROTO<zetasql_test__.KitchenSinkPB>, `$orderbycol1_1` INT64>
                    +-field_list=
                      +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#5)
