[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION]
[default no_test_extract_table_names]

[language_features=NONE,+SQL_GRAPH]
# Element pattern hints
SELECT * from GRAPH_TABLE(
  aml
  MATCH (@{key=a} a IS Account) -[@{key=b} b]-> (c IS Account)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, c#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[a#1, b#2, c#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-hint_list=
        |       | | | +-key := Literal(type=STRING, value="a")
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=80-87, label=aml.Account)
        |       | | +-target_element_table_list=[aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#2]
        |       | | +-hint_list=
        |       | | | +-key := Literal(type=STRING, value="b")
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.c#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=111-118, label=aml.Account)
        |       |   +-target_element_table_list=[aml.Account]
        |       +-head=$element_table.a#1
        |       +-tail=$element_table.c#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH]
# Path pattern: Only LHS hint
select * from graph_table(
  aml
  MATCH (alef IS Account) @{key=a_d} -[beta IS Transfer]-> (theta IS Account)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[alef#1, beta#2, theta#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[alef#1, beta#2, theta#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.alef#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=80-87, label=aml.Account)
        |       | | +-target_element_table_list=[aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.beta#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=110-118, label=aml.Transfer)
        |       | | +-target_element_table_list=[aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-lhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="a_d")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.theta#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=132-139, label=aml.Account)
        |       |   +-target_element_table_list=[aml.Account]
        |       +-head=$element_table.alef#1
        |       +-tail=$element_table.theta#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH]
# Path pattern: Only RHS hint
select * from graph_table(
  aml
  MATCH (alef IS Account) -[beta IS Transfer]-> @{key=d_e} (theta IS Account)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[alef#1, beta#2, theta#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[alef#1, beta#2, theta#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.alef#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=80-87, label=aml.Account)
        |       | | +-target_element_table_list=[aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.beta#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=99-107, label=aml.Transfer)
        |       | | +-target_element_table_list=[aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-rhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="d_e")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.theta#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=132-139, label=aml.Account)
        |       |   +-target_element_table_list=[aml.Account]
        |       +-head=$element_table.alef#1
        |       +-tail=$element_table.theta#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH]
# Path pattern: both LHS and RHS hints
SELECT * from GRAPH_TABLE(
  aml
  MATCH (alef IS Person) @{key=a_d} -[beta IS PersonOwnAccount]-> @{key=d_e} (theta IS Account)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[alef#1, beta#2, theta#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[alef#1, beta#2, theta#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.alef#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=89-95, label=aml.Person)
        |       | | +-target_element_table_list=[aml.Person]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.beta#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=118-134, label=aml.PersonOwnAccount)
        |       | | +-target_element_table_list=[aml.PersonOwnAccount]
        |       | | +-orientation=RIGHT
        |       | | +-lhs_hint_list=
        |       | | | +-key := Literal(type=STRING, value="a_d")
        |       | | +-rhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="d_e")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.theta#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=159-166, label=aml.Account)
        |       |   +-target_element_table_list=[aml.Account]
        |       +-head=$element_table.alef#1
        |       +-tail=$element_table.theta#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH]
# Summarized path pattern hints (no explicit edge)
SELECT * from GRAPH_TABLE(
  aml
  MATCH (alef IS Account) @{key=a_d} -> @{key=d_e} (theta IS Account)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[alef#1, $element1#2, theta#3]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[alef#1, $element1#2, theta#3]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.alef#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabel(parse_location=101-108, label=aml.Account)
        |       | | +-target_element_table_list=[aml.Account]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-lhs_hint_list=
        |       | | | +-key := Literal(type=STRING, value="a_d")
        |       | | +-rhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="d_e")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.theta#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabel(parse_location=145-152, label=aml.Account)
        |       |   +-target_element_table_list=[aml.Account]
        |       +-head=$element_table.alef#1
        |       +-tail=$element_table.theta#3
        +-shape_expr_list=
          +-one#4 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH]
# Graph path pattern hint
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (a IS Account ) -[b IS Transfer]-> (c IS Account), @{key=path_path}
        (a IS Account) <-[d IS PersonOwnAccount]- (e IS Person)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#7 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#7]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, c#3, a#4, d#5, e#6]
        |   +-input_scan_list=
        |   | +-GraphPathScan
        |   | | +-column_list=$element_table.[a#1, b#2, c#3]
        |   | | +-input_scan_list=
        |   | | | +-GraphNodeScan
        |   | | | | +-column_list=[$element_table.a#1]
        |   | | | | +-label_expr=
        |   | | | | | +-GraphLabelNaryExpr
        |   | | | | |   +-op=AND
        |   | | | | |   +-operand_list=
        |   | | | | |     +-GraphLabel(parse_location=73-80, label=aml.Account)
        |   | | | | |     +-GraphLabel(parse_location=149-156, label=aml.Account)
        |   | | | | +-target_element_table_list=[aml.Account]
        |   | | | +-GraphEdgeScan
        |   | | | | +-column_list=[$element_table.b#2]
        |   | | | | +-label_expr=
        |   | | | | | +-GraphLabel(parse_location=90-98, label=aml.Transfer)
        |   | | | | +-target_element_table_list=[aml.Transfer]
        |   | | | | +-orientation=RIGHT
        |   | | | +-GraphNodeScan
        |   | | |   +-column_list=[$element_table.c#3]
        |   | | |   +-label_expr=
        |   | | |   | +-GraphLabel(parse_location=108-115, label=aml.Account)
        |   | | |   +-target_element_table_list=[aml.Account]
        |   | | +-head=$element_table.a#1
        |   | | +-tail=$element_table.c#3
        |   | +-GraphPathScan
        |   |   +-column_list=$element_table.[a#4, d#5, e#6]
        |   |   +-input_scan_list=
        |   |   | +-GraphNodeScan
        |   |   | | +-column_list=[$element_table.a#4]
        |   |   | | +-label_expr=
        |   |   | | | +-GraphLabelNaryExpr
        |   |   | | |   +-op=AND
        |   |   | | |   +-operand_list=
        |   |   | | |     +-GraphLabel(parse_location=73-80, label=aml.Account)
        |   |   | | |     +-GraphLabel(parse_location=149-156, label=aml.Account)
        |   |   | | +-target_element_table_list=[aml.Account]
        |   |   | +-GraphEdgeScan
        |   |   | | +-column_list=[$element_table.d#5]
        |   |   | | +-label_expr=
        |   |   | | | +-GraphLabel(parse_location=166-182, label=aml.PersonOwnAccount)
        |   |   | | +-target_element_table_list=[aml.PersonOwnAccount]
        |   |   | | +-orientation=LEFT
        |   |   | +-GraphNodeScan
        |   |   |   +-column_list=[$element_table.e#6]
        |   |   |   +-label_expr=
        |   |   |   | +-GraphLabel(parse_location=191-197, label=aml.Person)
        |   |   |   +-target_element_table_list=[aml.Person]
        |   |   +-head=$element_table.a#4
        |   |   +-tail=$element_table.e#6
        |   |   +-path_hint_list=
        |   |     +-key := Literal(type=STRING, value="path_path")
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<balance UINT64, id INT64>, GRAPH_NODE(aml)<balance UINT64, id INT64>) -> BOOL)
        |       +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
        |       +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#4)
        +-shape_expr_list=
          +-one#7 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH]
# All hint types in the same Query
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH (@{key=a} a IS Account) @{key=a_b} -[@{key=b} b IS Transfer]->
        @{key=b_c} (c IS Account),
        @{key=path_path} (a IS Account) @{key=a_d}
        <-[d IS PersonOwnAccount]- @{key=d_e} (e IS Person)
  COLUMNS (1 AS one)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#7 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#7]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[a#1, b#2, c#3, a#4, d#5, e#6]
        |   +-input_scan_list=
        |   | +-GraphPathScan
        |   | | +-column_list=$element_table.[a#1, b#2, c#3]
        |   | | +-input_scan_list=
        |   | | | +-GraphNodeScan
        |   | | | | +-column_list=[$element_table.a#1]
        |   | | | | +-hint_list=
        |   | | | | | +-key := Literal(type=STRING, value="a")
        |   | | | | +-label_expr=
        |   | | | | | +-GraphLabelNaryExpr
        |   | | | | |   +-op=AND
        |   | | | | |   +-operand_list=
        |   | | | | |     +-GraphLabel(parse_location=91-98, label=aml.Account)
        |   | | | | |     +-GraphLabel(parse_location=205-212, label=aml.Account)
        |   | | | | +-target_element_table_list=[aml.Account]
        |   | | | +-GraphEdgeScan
        |   | | | | +-column_list=[$element_table.b#2]
        |   | | | | +-hint_list=
        |   | | | | | +-key := Literal(type=STRING, value="b")
        |   | | | | +-label_expr=
        |   | | | | | +-GraphLabel(parse_location=127-135, label=aml.Transfer)
        |   | | | | +-target_element_table_list=[aml.Transfer]
        |   | | | | +-orientation=RIGHT
        |   | | | | +-lhs_hint_list=
        |   | | | | | +-key := Literal(type=STRING, value="a_b")
        |   | | | | +-rhs_hint_list=
        |   | | | |   +-key := Literal(type=STRING, value="b_c")
        |   | | | +-GraphNodeScan
        |   | | |   +-column_list=[$element_table.c#3]
        |   | | |   +-label_expr=
        |   | | |   | +-GraphLabel(parse_location=164-171, label=aml.Account)
        |   | | |   +-target_element_table_list=[aml.Account]
        |   | | +-head=$element_table.a#1
        |   | | +-tail=$element_table.c#3
        |   | +-GraphPathScan
        |   |   +-column_list=$element_table.[a#4, d#5, e#6]
        |   |   +-input_scan_list=
        |   |   | +-GraphNodeScan
        |   |   | | +-column_list=[$element_table.a#4]
        |   |   | | +-label_expr=
        |   |   | | | +-GraphLabelNaryExpr
        |   |   | | |   +-op=AND
        |   |   | | |   +-operand_list=
        |   |   | | |     +-GraphLabel(parse_location=91-98, label=aml.Account)
        |   |   | | |     +-GraphLabel(parse_location=205-212, label=aml.Account)
        |   |   | | +-target_element_table_list=[aml.Account]
        |   |   | +-GraphEdgeScan
        |   |   | | +-column_list=[$element_table.d#5]
        |   |   | | +-label_expr=
        |   |   | | | +-GraphLabel(parse_location=241-257, label=aml.PersonOwnAccount)
        |   |   | | +-target_element_table_list=[aml.PersonOwnAccount]
        |   |   | | +-orientation=LEFT
        |   |   | | +-lhs_hint_list=
        |   |   | | | +-key := Literal(type=STRING, value="a_d")
        |   |   | | +-rhs_hint_list=
        |   |   | |   +-key := Literal(type=STRING, value="d_e")
        |   |   | +-GraphNodeScan
        |   |   |   +-column_list=[$element_table.e#6]
        |   |   |   +-label_expr=
        |   |   |   | +-GraphLabel(parse_location=277-283, label=aml.Person)
        |   |   |   +-target_element_table_list=[aml.Person]
        |   |   +-head=$element_table.a#4
        |   |   +-tail=$element_table.e#6
        |   |   +-path_hint_list=
        |   |     +-key := Literal(type=STRING, value="path_path")
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<balance UINT64, id INT64>, GRAPH_NODE(aml)<balance UINT64, id INT64>) -> BOOL)
        |       +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#1)
        |       +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#4)
        +-shape_expr_list=
          +-one#7 := Literal(type=INT64, value=1)
==

# Traversal hints within a quantified path
select * from graph_table(
  aml
  MATCH ((a)-[b]->@{key=val}(c)){1, 3}
  COLUMNS(1 AS One)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#9 AS One [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.One#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.One#9]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$path_scan.[$head#7, $tail#8]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$path_scan.[$head#7, $tail#8]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.a#1]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#2]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-rhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="val")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.c#3]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$path_scan.$head#7
        |       +-tail=$path_scan.$tail#8
        |       +-quantifier=
        |       | +-GraphPathPatternQuantifier
        |       |   +-lower_bound=
        |       |   | +-Literal(type=INT64, value=1)
        |       |   +-upper_bound=
        |       |     +-Literal(type=INT64, value=3)
        |       +-group_variable_list=
        |         +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |         +-GraphMakeArrayVariable(element=$element_table.b#2, array=$element_table.b#5)
        |         +-GraphMakeArrayVariable(element=$element_table.c#3, array=$element_table.c#6)
        +-shape_expr_list=
          +-One#9 := Literal(type=INT64, value=1)
==

# Traversal hints from a quantified path
select * from graph_table(
  aml
  MATCH ((a)-[b]->(c)){1, 3}@{key=val}->(d)
  COLUMNS(1 AS One)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#11 AS One [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.One#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.One#11]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.$element1#9, $element_table.d#10]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.$element1#9, $element_table.d#10]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       | | +-column_list=$path_scan.[$head#7, $tail#8]
        |       | | +-input_scan_list=
        |       | | | +-GraphNodeScan
        |       | | | | +-column_list=[$element_table.a#1]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | | +-GraphEdgeScan
        |       | | | | +-column_list=[$element_table.b#2]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | | | +-orientation=RIGHT
        |       | | | +-GraphNodeScan
        |       | | |   +-column_list=[$element_table.c#3]
        |       | | |   +-label_expr=
        |       | | |   | +-GraphLabelNaryExpr
        |       | | |   |   +-op=OR
        |       | | |   |   +-operand_list=
        |       | | |   |     +-GraphWildCardLabel
        |       | | |   |     +-GraphLabelNaryExpr
        |       | | |   |       +-op=NOT
        |       | | |   |       +-operand_list=
        |       | | |   |         +-GraphWildCardLabel
        |       | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | +-head=$path_scan.$head#7
        |       | | +-tail=$path_scan.$tail#8
        |       | | +-quantifier=
        |       | | | +-GraphPathPatternQuantifier
        |       | | |   +-lower_bound=
        |       | | |   | +-Literal(type=INT64, value=1)
        |       | | |   +-upper_bound=
        |       | | |     +-Literal(type=INT64, value=3)
        |       | | +-group_variable_list=
        |       | |   +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.b#2, array=$element_table.b#5)
        |       | |   +-GraphMakeArrayVariable(element=$element_table.c#3, array=$element_table.c#6)
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.$element1#9]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-lhs_hint_list=
        |       | |   +-key := Literal(type=STRING, value="val")
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.d#10]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$path_scan.$head#7
        |       +-tail=$element_table.d#10
        +-shape_expr_list=
          +-One#11 := Literal(type=INT64, value=1)
==



# Hints on MATCH
GRAPH aml
MATCH@{key=val} (a)->(b)
RETURN 1 AS One
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#4 AS One [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.One#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.One#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.One#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | +-hint_list=
              | | +-key := Literal(type=STRING, value="val")
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element1#2]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.b#3]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.b#3
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.One#4]
                +-expr_list=
                | +-One#4 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
==



# Hints on OPTIONAL MATCH
GRAPH aml
MATCH (a)->(b)
OPTIONAL MATCH@{key=val} (b)->(c)
RETURN 1 AS One
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#7 AS One [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.One#7]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.One#7]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.One#7]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element1#2]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.b#3]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.b#3
              | +-input_scan=
              |   +-SingleRowScan
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3, b#4, $element2#5, c#6]
              | +-hint_list=
              | | +-key := Literal(type=STRING, value="val")
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[b#4, $element2#5, c#6]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.b#4]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element2#5]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.c#6]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.b#4
              | |   +-tail=$element_table.c#6
              | +-filter_expr=
              | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#4)
              | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#3)
              | +-input_scan=
              | | +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
              | +-optional=TRUE
              +-ProjectScan
                +-column_list=[$graph_table.One#7]
                +-expr_list=
                | +-One#7 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3, $element2#5, c#6])
==

# Hints on ORDER BY
GRAPH aml
MATCH (a)->(b)
ORDER@{key=val} BY a.id
RETURN 1 AS One
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#5 AS One [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.One#5]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.One#5]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.One#5]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element1#2]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.b#3]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.b#3
              | +-input_scan=
              |   +-SingleRowScan
              +-OrderByScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | +-hint_list=
              | | +-key := Literal(type=STRING, value="val")
              | +-is_ordered=TRUE
              | +-input_scan=
              | | +-ProjectScan
              | |   +-column_list=[$element_table.a#1, $element_table.$element1#2, $element_table.b#3, $orderby.$orderbycol1#4]
              | |   +-expr_list=
              | |   | +-$orderbycol1#4 :=
              | |   |   +-GraphGetElementProperty
              | |   |     +-type=INT64
              | |   |     +-expr=
              | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
              | |   |     +-property=id(INT64)
              | |   +-input_scan=
              | |     +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
              | +-order_by_item_list=
              |   +-OrderByItem
              |     +-column_ref=
              |       +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#4)
              +-ProjectScan
                +-column_list=[$graph_table.One#5]
                +-expr_list=
                | +-One#5 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
==

# Hints on RETURN ... ORDER BY
GRAPH aml
MATCH (a)->(b)
RETURN a.id AS One
ORDER@{key=val} BY a.id
--

QueryStmt
+-output_column_list=
| +-$graph_table.One#4 AS One [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.One#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.One#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.One#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element1#2]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.b#3]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.b#3
              | +-input_scan=
              |   +-SingleRowScan
              +-OrderByScan
                +-column_list=[$graph_table.One#4]
                +-hint_list=
                | +-key := Literal(type=STRING, value="val")
                +-is_ordered=TRUE
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=[$element_table.a#1, $element_table.$element1#2, $element_table.b#3, $graph_table.One#4, $orderby.$orderbycol1#5]
                |   +-expr_list=
                |   | +-$orderbycol1#5 :=
                |   |   +-GraphGetElementProperty
                |   |     +-type=INT64
                |   |     +-expr=
                |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                |   |     +-property=id(INT64)
                |   +-input_scan=
                |     +-ProjectScan
                |       +-column_list=[$element_table.a#1, $element_table.$element1#2, $element_table.b#3, $graph_table.One#4]
                |       +-expr_list=
                |       | +-One#4 :=
                |       |   +-GraphGetElementProperty
                |       |     +-type=INT64
                |       |     +-expr=
                |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                |       |     +-property=id(INT64)
                |       +-input_scan=
                |         +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
                +-order_by_item_list=
                  +-OrderByItem
                    +-column_ref=
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#5)
==



# Hints on RETURN
GRAPH aml
MATCH (a)->(b)
RETURN@{key=val} 1 AS One
--
QueryStmt
+-output_column_list=
| +-$graph_table.One#4 AS One [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.One#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.One#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.One#4]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element1#2]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.b#3]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.b#3
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.One#4]
                +-hint_list=
                | +-key := Literal(type=STRING, value="val")
                +-input_scan=
                  +-ProjectScan
                    +-column_list=[$graph_table.One#4]
                    +-expr_list=
                    | +-One#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
==

# Hints between a node and a subpath
GRAPH aml
MATCH (a:Account) @{key=val} ((b:Account)-[:Transfer]->(c:Account))
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#5 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#5]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#5]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#5]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, b#2, $element1#3, c#4]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, b#2, $element1#3, c#4]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabel(parse_location=19-26, label=aml.Account)
              | |   | | +-target_element_table_list=[aml.Account]
              | |   | +-GraphPathScan
              | |   |   +-column_list=$element_table.[b#2, $element1#3, c#4]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.b#2]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=43-50, label=aml.Account)
              | |   |   | | +-target_element_table_list=[aml.Account]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element1#3]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=54-62, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.c#4]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=68-75, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$element_table.b#2
              | |   |   +-tail=$element_table.c#4
              | |   |   +-path_hint_list=
              | |   |     +-key := Literal(type=STRING, value="val")
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.c#4
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#5]
                +-expr_list=
                | +-one#5 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[a#1, b#2, $element1#3, c#4])
==

# Hints between a node and a bounded quantified path pattern
GRAPH aml
MATCH (a:Account) @{key=val} ((b:Account)-[:Transfer]->(c:Account)){1,2}
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#10 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#10]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#10]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#10]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabel(parse_location=19-26, label=aml.Account)
              | |   | | +-target_element_table_list=[aml.Account]
              | |   | +-GraphPathScan
              | |   |   +-column_list=$path_scan.[$head#8, $tail#9]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.b#2]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=43-50, label=aml.Account)
              | |   |   | | +-target_element_table_list=[aml.Account]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element1#3]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=54-62, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.c#4]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=68-75, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$path_scan.$head#8
              | |   |   +-tail=$path_scan.$tail#9
              | |   |   +-path_hint_list=
              | |   |   | +-key := Literal(type=STRING, value="val")
              | |   |   +-quantifier=
              | |   |   | +-GraphPathPatternQuantifier
              | |   |   |   +-lower_bound=
              | |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   +-upper_bound=
              | |   |   |     +-Literal(type=INT64, value=2)
              | |   |   +-group_variable_list=
              | |   |     +-GraphMakeArrayVariable(element=$element_table.b#2, array=$element_table.b#5)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element1#3, array=$element_table.$element1#6)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.c#4, array=$element_table.c#7)
              | |   +-head=$element_table.a#1
              | |   +-tail=$path_scan.$tail#9
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#10]
                +-expr_list=
                | +-one#10 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.a#1])
==

# Hints between a node and a bounded quantified edge pattern
GRAPH aml
MATCH (a:Account) @{key=val} -[:Transfer]->{1,2}
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#10 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#10]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#10]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#10]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabel(parse_location=19-26, label=aml.Account)
              | |   | | +-target_element_table_list=[aml.Account]
              | |   | +-GraphPathScan
              | |   |   +-column_list=$path_scan.[$head#8, $tail#9]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.$element1#2]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element2#3]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=42-50, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.$element3#4]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabelNaryExpr
              | |   |   |   |   +-op=OR
              | |   |   |   |   +-operand_list=
              | |   |   |   |     +-GraphWildCardLabel
              | |   |   |   |     +-GraphLabelNaryExpr
              | |   |   |   |       +-op=NOT
              | |   |   |   |       +-operand_list=
              | |   |   |   |         +-GraphWildCardLabel
              | |   |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   +-head=$path_scan.$head#8
              | |   |   +-tail=$path_scan.$tail#9
              | |   |   +-path_hint_list=
              | |   |   | +-key := Literal(type=STRING, value="val")
              | |   |   +-quantifier=
              | |   |   | +-GraphPathPatternQuantifier
              | |   |   |   +-lower_bound=
              | |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   +-upper_bound=
              | |   |   |     +-Literal(type=INT64, value=2)
              | |   |   +-group_variable_list=
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element3#4, array=$element_table.$element3#7)
              | |   +-head=$element_table.a#1
              | |   +-tail=$path_scan.$tail#9
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#10]
                +-expr_list=
                | +-one#10 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.a#1])
==

# Hints between a node and a bounded quantified path pattern with hints in the
# path pattern.
GRAPH aml
MATCH (a:Account) @{key=val} ((:Account)@{key=val}-[:Transfer]->@{key=val}(:Account)){1,2}
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#10 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#10]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#10]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#10]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.a#1, $path_scan.$head#8, $path_scan.$tail#9]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabel(parse_location=19-26, label=aml.Account)
              | |   | | +-target_element_table_list=[aml.Account]
              | |   | +-GraphPathScan
              | |   |   +-column_list=$path_scan.[$head#8, $tail#9]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.$element1#2]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=42-49, label=aml.Account)
              | |   |   | | +-target_element_table_list=[aml.Account]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element2#3]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=63-71, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | | +-lhs_hint_list=
              | |   |   | | | +-key := Literal(type=STRING, value="val")
              | |   |   | | +-rhs_hint_list=
              | |   |   | |   +-key := Literal(type=STRING, value="val")
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.$element3#4]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=86-93, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$path_scan.$head#8
              | |   |   +-tail=$path_scan.$tail#9
              | |   |   +-path_hint_list=
              | |   |   | +-key := Literal(type=STRING, value="val")
              | |   |   +-quantifier=
              | |   |   | +-GraphPathPatternQuantifier
              | |   |   |   +-lower_bound=
              | |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   +-upper_bound=
              | |   |   |     +-Literal(type=INT64, value=2)
              | |   |   +-group_variable_list=
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element3#4, array=$element_table.$element3#7)
              | |   +-head=$element_table.a#1
              | |   +-tail=$path_scan.$tail#9
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#10]
                +-expr_list=
                | +-one#10 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.a#1])
==

# Hints between a bounded quantified path pattern and a node
GRAPH aml
MATCH ((a:Account)-[:Transfer]->(b:Account)){1,2} @{key=val} (c:Account)
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#10 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#10]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#10]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#10]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.c#9]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.c#9]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=$path_scan.[$head#7, $tail#8]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.a#1]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=20-27, label=aml.Account)
              | |   | | | | +-target_element_table_list=[aml.Account]
              | |   | | | +-GraphEdgeScan
              | |   | | | | +-column_list=[$element_table.$element1#2]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=31-39, label=aml.Transfer)
              | |   | | | | +-target_element_table_list=[aml.Transfer]
              | |   | | | | +-orientation=RIGHT
              | |   | | | +-GraphNodeScan
              | |   | | |   +-column_list=[$element_table.b#3]
              | |   | | |   +-label_expr=
              | |   | | |   | +-GraphLabel(parse_location=45-52, label=aml.Account)
              | |   | | |   +-target_element_table_list=[aml.Account]
              | |   | | +-head=$path_scan.$head#7
              | |   | | +-tail=$path_scan.$tail#8
              | |   | | +-quantifier=
              | |   | | | +-GraphPathPatternQuantifier
              | |   | | |   +-lower_bound=
              | |   | | |   | +-Literal(type=INT64, value=1)
              | |   | | |   +-upper_bound=
              | |   | | |     +-Literal(type=INT64, value=2)
              | |   | | +-group_variable_list=
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
              | |   | +-GraphPathScan
              | |   |   +-column_list=[$element_table.c#9]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.c#9]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=74-81, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$element_table.c#9
              | |   |   +-tail=$element_table.c#9
              | |   |   +-path_hint_list=
              | |   |     +-key := Literal(type=STRING, value="val")
              | |   +-head=$path_scan.$head#7
              | |   +-tail=$element_table.c#9
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#10]
                +-expr_list=
                | +-one#10 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.c#9])
==

# Hints between a bounded quantified edge pattern and a node
GRAPH aml
MATCH -[:Transfer]->{1,2} @{key=val} (a:Account)
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#10 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#10]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#10]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#10]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.a#9]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$path_scan.$head#7, $path_scan.$tail#8, $element_table.a#9]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=$path_scan.[$head#7, $tail#8]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.$element1#1]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabelNaryExpr
              | |   | | | | |   +-op=OR
              | |   | | | | |   +-operand_list=
              | |   | | | | |     +-GraphWildCardLabel
              | |   | | | | |     +-GraphLabelNaryExpr
              | |   | | | | |       +-op=NOT
              | |   | | | | |       +-operand_list=
              | |   | | | | |         +-GraphWildCardLabel
              | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | | +-GraphEdgeScan
              | |   | | | | +-column_list=[$element_table.$element2#2]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=19-27, label=aml.Transfer)
              | |   | | | | +-target_element_table_list=[aml.Transfer]
              | |   | | | | +-orientation=RIGHT
              | |   | | | +-GraphNodeScan
              | |   | | |   +-column_list=[$element_table.$element3#3]
              | |   | | |   +-label_expr=
              | |   | | |   | +-GraphLabelNaryExpr
              | |   | | |   |   +-op=OR
              | |   | | |   |   +-operand_list=
              | |   | | |   |     +-GraphWildCardLabel
              | |   | | |   |     +-GraphLabelNaryExpr
              | |   | | |   |       +-op=NOT
              | |   | | |   |       +-operand_list=
              | |   | | |   |         +-GraphWildCardLabel
              | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | +-head=$path_scan.$head#7
              | |   | | +-tail=$path_scan.$tail#8
              | |   | | +-quantifier=
              | |   | | | +-GraphPathPatternQuantifier
              | |   | | |   +-lower_bound=
              | |   | | |   | +-Literal(type=INT64, value=1)
              | |   | | |   +-upper_bound=
              | |   | | |     +-Literal(type=INT64, value=2)
              | |   | | +-group_variable_list=
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#2, array=$element_table.$element2#5)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element3#3, array=$element_table.$element3#6)
              | |   | +-GraphPathScan
              | |   |   +-column_list=[$element_table.a#9]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.a#9]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=50-57, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$element_table.a#9
              | |   |   +-tail=$element_table.a#9
              | |   |   +-path_hint_list=
              | |   |     +-key := Literal(type=STRING, value="val")
              | |   +-head=$path_scan.$head#7
              | |   +-tail=$element_table.a#9
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#10]
                +-expr_list=
                | +-one#10 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.a#9])
==

# Hints between two nodes
GRAPH aml
MATCH (a:Account) @{key=val} (b:Account)
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#3 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#3]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#3]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#3]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, b#2]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, b#2]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.a#1]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabel(parse_location=19-26, label=aml.Account)
              | |   | | +-target_element_table_list=[aml.Account]
              | |   | +-GraphPathScan
              | |   |   +-column_list=[$element_table.b#2]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.b#2]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=42-49, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$element_table.b#2
              | |   |   +-tail=$element_table.b#2
              | |   |   +-path_hint_list=
              | |   |     +-key := Literal(type=STRING, value="val")
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.b#2
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#3]
                +-expr_list=
                | +-one#3 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[a#1, b#2])
==

# Hints between two subpaths
GRAPH aml
MATCH ((a:Account)-[:Transfer]->(b:Account)) @{key=val} ((c:Account)-[:Transfer]->(d:Account))
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#7 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#7]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#7]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#7]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[a#1, $element1#2, b#3, c#4, $element2#5, d#6]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[a#1, $element1#2, b#3, c#4, $element2#5, d#6]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=$element_table.[a#1, $element1#2, b#3]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.a#1]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=20-27, label=aml.Account)
              | |   | | | | +-target_element_table_list=[aml.Account]
              | |   | | | +-GraphEdgeScan
              | |   | | | | +-column_list=[$element_table.$element1#2]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=31-39, label=aml.Transfer)
              | |   | | | | +-target_element_table_list=[aml.Transfer]
              | |   | | | | +-orientation=RIGHT
              | |   | | | +-GraphNodeScan
              | |   | | |   +-column_list=[$element_table.b#3]
              | |   | | |   +-label_expr=
              | |   | | |   | +-GraphLabel(parse_location=45-52, label=aml.Account)
              | |   | | |   +-target_element_table_list=[aml.Account]
              | |   | | +-head=$element_table.a#1
              | |   | | +-tail=$element_table.b#3
              | |   | +-GraphPathScan
              | |   |   +-column_list=$element_table.[c#4, $element2#5, d#6]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.c#4]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=70-77, label=aml.Account)
              | |   |   | | +-target_element_table_list=[aml.Account]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element2#5]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=81-89, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.d#6]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=95-102, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$element_table.c#4
              | |   |   +-tail=$element_table.d#6
              | |   |   +-path_hint_list=
              | |   |     +-key := Literal(type=STRING, value="val")
              | |   +-head=$element_table.a#1
              | |   +-tail=$element_table.d#6
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#7]
                +-expr_list=
                | +-one#7 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3, c#4, $element2#5, d#6])
==

# Hints between two bounded quantified path patterns
GRAPH aml
MATCH ((a:Account)-[:Transfer]->(b:Account)){1,2} @{key=val} ((c:Account)-[:Transfer]->(d:Account)){1,2}
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#17 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#17]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#17]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#17]
            +-scan_list=
              +-GraphScan
              | +-column_list=$path_scan.[$head#7, $tail#8, $head#15, $tail#16]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$path_scan.[$head#7, $tail#8, $head#15, $tail#16]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=$path_scan.[$head#7, $tail#8]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.a#1]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=20-27, label=aml.Account)
              | |   | | | | +-target_element_table_list=[aml.Account]
              | |   | | | +-GraphEdgeScan
              | |   | | | | +-column_list=[$element_table.$element1#2]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=31-39, label=aml.Transfer)
              | |   | | | | +-target_element_table_list=[aml.Transfer]
              | |   | | | | +-orientation=RIGHT
              | |   | | | +-GraphNodeScan
              | |   | | |   +-column_list=[$element_table.b#3]
              | |   | | |   +-label_expr=
              | |   | | |   | +-GraphLabel(parse_location=45-52, label=aml.Account)
              | |   | | |   +-target_element_table_list=[aml.Account]
              | |   | | +-head=$path_scan.$head#7
              | |   | | +-tail=$path_scan.$tail#8
              | |   | | +-quantifier=
              | |   | | | +-GraphPathPatternQuantifier
              | |   | | |   +-lower_bound=
              | |   | | |   | +-Literal(type=INT64, value=1)
              | |   | | |   +-upper_bound=
              | |   | | |     +-Literal(type=INT64, value=2)
              | |   | | +-group_variable_list=
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.a#1, array=$element_table.a#4)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.b#3, array=$element_table.b#6)
              | |   | +-GraphPathScan
              | |   |   +-column_list=$path_scan.[$head#15, $tail#16]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.c#9]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=75-82, label=aml.Account)
              | |   |   | | +-target_element_table_list=[aml.Account]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element2#10]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=86-94, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.d#11]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabel(parse_location=100-107, label=aml.Account)
              | |   |   |   +-target_element_table_list=[aml.Account]
              | |   |   +-head=$path_scan.$head#15
              | |   |   +-tail=$path_scan.$tail#16
              | |   |   +-path_hint_list=
              | |   |   | +-key := Literal(type=STRING, value="val")
              | |   |   +-quantifier=
              | |   |   | +-GraphPathPatternQuantifier
              | |   |   |   +-lower_bound=
              | |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   +-upper_bound=
              | |   |   |     +-Literal(type=INT64, value=2)
              | |   |   +-group_variable_list=
              | |   |     +-GraphMakeArrayVariable(element=$element_table.c#9, array=$element_table.c#12)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element2#10, array=$element_table.$element2#13)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.d#11, array=$element_table.d#14)
              | |   +-head=$path_scan.$head#7
              | |   +-tail=$path_scan.$tail#16
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#17]
                +-expr_list=
                | +-one#17 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan
==

# Hints between two bounded quantified edge patterns
GRAPH aml
MATCH -[:Transfer]->{1,2} @{key=val} -[:Transfer]->{1,2}
RETURN 1 AS one
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#17 AS one [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.one#17]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.one#17]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#17]
            +-scan_list=
              +-GraphScan
              | +-column_list=$path_scan.[$head#7, $tail#8, $head#15, $tail#16]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$path_scan.[$head#7, $tail#8, $head#15, $tail#16]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=$path_scan.[$head#7, $tail#8]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.$element1#1]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabelNaryExpr
              | |   | | | | |   +-op=OR
              | |   | | | | |   +-operand_list=
              | |   | | | | |     +-GraphWildCardLabel
              | |   | | | | |     +-GraphLabelNaryExpr
              | |   | | | | |       +-op=NOT
              | |   | | | | |       +-operand_list=
              | |   | | | | |         +-GraphWildCardLabel
              | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | | +-GraphEdgeScan
              | |   | | | | +-column_list=[$element_table.$element2#2]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabel(parse_location=19-27, label=aml.Transfer)
              | |   | | | | +-target_element_table_list=[aml.Transfer]
              | |   | | | | +-orientation=RIGHT
              | |   | | | +-GraphNodeScan
              | |   | | |   +-column_list=[$element_table.$element3#3]
              | |   | | |   +-label_expr=
              | |   | | |   | +-GraphLabelNaryExpr
              | |   | | |   |   +-op=OR
              | |   | | |   |   +-operand_list=
              | |   | | |   |     +-GraphWildCardLabel
              | |   | | |   |     +-GraphLabelNaryExpr
              | |   | | |   |       +-op=NOT
              | |   | | |   |       +-operand_list=
              | |   | | |   |         +-GraphWildCardLabel
              | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | +-head=$path_scan.$head#7
              | |   | | +-tail=$path_scan.$tail#8
              | |   | | +-quantifier=
              | |   | | | +-GraphPathPatternQuantifier
              | |   | | |   +-lower_bound=
              | |   | | |   | +-Literal(type=INT64, value=1)
              | |   | | |   +-upper_bound=
              | |   | | |     +-Literal(type=INT64, value=2)
              | |   | | +-group_variable_list=
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#2, array=$element_table.$element2#5)
              | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element3#3, array=$element_table.$element3#6)
              | |   | +-GraphPathScan
              | |   |   +-column_list=$path_scan.[$head#15, $tail#16]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.$element4#9]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.$element5#10]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabel(parse_location=50-58, label=aml.Transfer)
              | |   |   | | +-target_element_table_list=[aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.$element6#11]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabelNaryExpr
              | |   |   |   |   +-op=OR
              | |   |   |   |   +-operand_list=
              | |   |   |   |     +-GraphWildCardLabel
              | |   |   |   |     +-GraphLabelNaryExpr
              | |   |   |   |       +-op=NOT
              | |   |   |   |       +-operand_list=
              | |   |   |   |         +-GraphWildCardLabel
              | |   |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   +-head=$path_scan.$head#15
              | |   |   +-tail=$path_scan.$tail#16
              | |   |   +-path_hint_list=
              | |   |   | +-key := Literal(type=STRING, value="val")
              | |   |   +-quantifier=
              | |   |   | +-GraphPathPatternQuantifier
              | |   |   |   +-lower_bound=
              | |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   +-upper_bound=
              | |   |   |     +-Literal(type=INT64, value=2)
              | |   |   +-group_variable_list=
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element4#9, array=$element_table.$element4#12)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element5#10, array=$element_table.$element5#13)
              | |   |     +-GraphMakeArrayVariable(element=$element_table.$element6#11, array=$element_table.$element6#14)
              | |   +-head=$path_scan.$head#7
              | |   +-tail=$path_scan.$tail#16
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.one#17]
                +-expr_list=
                | +-one#17 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan
