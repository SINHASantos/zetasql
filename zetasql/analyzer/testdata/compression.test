[default language_features=MAXIMUM,+NAMED_ARGUMENTS]

# ZSTD compress bytes

select zstd_compress(b"bytes");
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_compress(BYTES, optional(1) INT64 level) -> BYTES)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Literal(type=INT64, value=3)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD compress string, with named arg

select zstd_compress("text", level => 22);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_compress(STRING, optional(1) INT64 level) -> BYTES)
    |     +-Literal(type=STRING, value="text")
    |     +-Literal(type=INT64, value=22)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD compress string, with positional arg

select zstd_compress("text", 22);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_compress(STRING, optional(1) INT64 level) -> BYTES)
    |     +-Literal(type=STRING, value="text")
    |     +-Literal(type=INT64, value=22)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD compress bytes, with positional arg

select zstd_compress(b"bytes", 22);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_compress(BYTES, optional(1) INT64 level) -> BYTES)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Literal(type=INT64, value=22)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD decompress to bytes

select zstd_decompress_to_bytes(b"bytes");
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_decompress_to_bytes(BYTES, optional(1) INT64 size_limit) -> BYTES)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Literal(type=INT64, value=1073741824)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD decompress to bytes, with named arg

select zstd_decompress_to_bytes(b"bytes", size_limit => 100);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_decompress_to_bytes(BYTES, optional(1) INT64 size_limit) -> BYTES)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Literal(type=INT64, value=100)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD decompress to bytes, error size_limit arg is named only

select zstd_decompress_to_bytes(b"bytes", 100);
--

ERROR: No matching signature for function ZSTD_DECOMPRESS_TO_BYTES
  Argument types: BYTES, INT64
  Signature: ZSTD_DECOMPRESS_TO_BYTES(BYTES, [size_limit => INT64])
    Positional argument at 2 is invalid because argument `size_limit` can only be referred to by name [at 1:8]
select zstd_decompress_to_bytes(b"bytes", 100);
       ^
==

# ZSTD decompress bytes to string

select zstd_decompress_to_string(b"bytes");
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_decompress_to_string(BYTES, optional(1) INT64 size_limit) -> STRING)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Literal(type=INT64, value=1073741824)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD decompress to string, with named arg

select zstd_decompress_to_string(b"bytes", size_limit => 100);
--

QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:zstd_decompress_to_string(BYTES, optional(1) INT64 size_limit) -> STRING)
    |     +-Literal(type=BYTES, value=b"bytes")
    |     +-Literal(type=INT64, value=100)
    +-input_scan=
      +-SingleRowScan
==

# ZSTD decompress from bytes to string, error size_limit arg is named only

select zstd_decompress_to_string(b"bytes", 100);
--

ERROR: No matching signature for function ZSTD_DECOMPRESS_TO_STRING
  Argument types: BYTES, INT64
  Signature: ZSTD_DECOMPRESS_TO_STRING(BYTES, [size_limit => INT64])
    Positional argument at 2 is invalid because argument `size_limit` can only be referred to by name [at 1:8]
select zstd_decompress_to_string(b"bytes", 100);
       ^
