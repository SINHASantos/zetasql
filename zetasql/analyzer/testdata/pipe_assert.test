[default language_features=NONE]
[language_features=NONE,{{|+PIPES|+PIPE_ASSERT}}]
SELECT * FROM KeyValue
|> ASSERT true
--
ALTERNATION GROUPS:
    <empty>
    +PIPE_ASSERT
--
ERROR: Pipe query syntax not supported [at 2:1]
|> ASSERT true
^
--
ALTERNATION GROUP: +PIPES
--
ERROR: Pipe ASSERT not supported [at 2:1]
|> ASSERT true
^
==

[default language_features=NONE,+PIPES,+PIPE_ASSERT]
[default enabled_ast_rewrites=DEFAULTS,+PIPE_ASSERT]
# ResolvedLiteral strings that didn't come from the query text.

FROM KeyValue
|> ASSERT true
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-condition=
    | +-Literal(type=BOOL, value=true)
    +-message=
      +-Literal(type=STRING, value="true")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-Literal(type=BOOL, value=true)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-Literal(type=STRING, value="true")
==

FROM KeyValue
|> ASSERT key=4
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-condition=
    | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-Literal(type=INT64, value=4)
    +-message=
      +-Literal(type=STRING, value="key=4")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            | +-Literal(type=INT64, value=4)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-Literal(type=STRING, value="key=4")
==

FROM KeyValue
|> ASSERT value='abc'
|> where key=4
|> SELECT *
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-AssertScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-condition=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |   |   +-Literal(type=STRING, value="abc")
        |   +-message=
        |     +-Literal(type=STRING, value="value='abc'")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-Literal(type=INT64, value=4)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-FilterScan
        |       +-column_list=KeyValue.[Key#1, Value#2]
        |       +-input_scan=
        |       | +-BarrierScan
        |       |   +-column_list=KeyValue.[Key#1, Value#2]
        |       |   +-input_scan=
        |       |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |       +-filter_expr=
        |         +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
        |           +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |           | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |           | +-Literal(type=STRING, value="abc")
        |           +-Literal(type=BOOL, value=true)
        |           +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
        |             +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |               +-Literal(type=STRING, value="Assert failed: ")
        |               +-Literal(type=STRING, value="value='abc'")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-Literal(type=INT64, value=4)
==

FROM KeyValue
|> ASSERT 7
--
ERROR: ASSERT condition should return type BOOL, but returns INT64 [at 2:11]
|> ASSERT 7
          ^
==

FROM KeyValue
|> ASSERT SUM(key) > 10
--
ERROR: Aggregate function SUM not allowed in ASSERT condition [at 2:11]
|> ASSERT SUM(key) > 10
          ^
==

# Error in condition expression.
FROM KeyValue
|> ASSERT x=5
--
ERROR: Unrecognized name: x [at 2:11]
|> ASSERT x=5
          ^
==

FROM KeyValue
|> ASSERT key=5, 'oops'
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-condition=
    | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-Literal(type=INT64, value=5)
    +-message=
      +-Literal(type=STRING, value="oops")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            | +-Literal(type=INT64, value=5)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-Literal(type=STRING, value="oops")
==

# A non-string message gets casted to string.
FROM KeyValue
|> ASSERT key=5, key
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-condition=
    | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-Literal(type=INT64, value=5)
    +-message=
      +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
        +-Cast(INT64 -> STRING)
        | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-Literal(type=STRING, value="NULL")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            | +-Literal(type=INT64, value=5)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
                  +-Cast(INT64 -> STRING)
                  | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-Literal(type=STRING, value="NULL")
==

# Multiple message args are joined with CONCAT, with spaces.
# The non-string args are casted.
FROM KeyValue
|> ASSERT key=5, key+1, NULL, 'abc', key*1.5
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-condition=
    | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-Literal(type=INT64, value=5)
    +-message=
      +-FunctionCall(ZetaSQL:concat(STRING, repeated(6) STRING) -> STRING)
        +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
        | +-Cast(INT64 -> STRING)
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | |   +-Literal(type=INT64, value=1)
        | +-Literal(type=STRING, value="NULL")
        +-Literal(type=STRING, value=" ")
        +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
        | +-Literal(type=STRING, value=NULL)
        | +-Literal(type=STRING, value="NULL")
        +-Literal(type=STRING, value=" ")
        +-Literal(type=STRING, value="abc")
        +-Literal(type=STRING, value=" ")
        +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
          +-Cast(DOUBLE -> STRING)
          | +-FunctionCall(ZetaSQL:$multiply(DOUBLE, DOUBLE) -> DOUBLE)
          |   +-Cast(INT64 -> DOUBLE)
          |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-Literal(type=DOUBLE, value=1.5)
          +-Literal(type=STRING, value="NULL")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            | +-Literal(type=INT64, value=5)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-FunctionCall(ZetaSQL:concat(STRING, repeated(6) STRING) -> STRING)
                  +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
                  | +-Cast(INT64 -> STRING)
                  | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  | |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  | |   +-Literal(type=INT64, value=1)
                  | +-Literal(type=STRING, value="NULL")
                  +-Literal(type=STRING, value=" ")
                  +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
                  | +-Literal(type=STRING, value=NULL)
                  | +-Literal(type=STRING, value="NULL")
                  +-Literal(type=STRING, value=" ")
                  +-Literal(type=STRING, value="abc")
                  +-Literal(type=STRING, value=" ")
                  +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
                    +-Cast(DOUBLE -> STRING)
                    | +-FunctionCall(ZetaSQL:$multiply(DOUBLE, DOUBLE) -> DOUBLE)
                    |   +-Cast(INT64 -> DOUBLE)
                    |   | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                    |   +-Literal(type=DOUBLE, value=1.5)
                    +-Literal(type=STRING, value="NULL")
==

FROM KeyValue
|> ASSERT key=5, (key,value)
--
ERROR: ASSERT message value has type STRUCT<INT64, STRING> which cannot be coerced to STRING [at 2:18]
|> ASSERT key=5, (key,value)
                 ^
==

# Error in message expression.
FROM KeyValue
|> ASSERT key=5, key=x
--
ERROR: Unrecognized name: x [at 2:22]
|> ASSERT key=5, key=x
                     ^
==

# Show how internal comments and whitespace are captured in the
# assert message, but leading and trailing are stripped.
FROM KeyValue
|> ASSERT  /* abc */  1  /* def */  =  /* ghi */  2  /* jkl */
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-condition=
    | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   +-Literal(type=INT64, value=1)
    |   +-Literal(type=INT64, value=2)
    +-message=
      +-Literal(type=STRING, value="1  /* def */  =  /* ghi */  2")

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-Literal(type=INT64, value=1)
            | +-Literal(type=INT64, value=2)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-Literal(type=STRING, value="1  /* def */  =  /* ghi */  2")
==

# Newlines inside the assert expression are also kept.
# Line comments could be a particular danger.
FROM KeyValue
|> ASSERT

1 +
2

# comment
\-- comment

= 3

|> where true
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-AssertScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-condition=
    |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   | +-Literal(type=INT64, value=1)
    |   |   | +-Literal(type=INT64, value=2)
    |   |   +-Literal(type=INT64, value=3)
    |   +-message=
    |     +-Literal(type=STRING, value="1 +\n2\n\n# comment\n-- comment\n\n= 3")
    +-filter_expr=
      +-Literal(type=BOOL, value=true)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-BarrierScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |     +-FilterScan
    |       +-column_list=KeyValue.[Key#1, Value#2]
    |       +-input_scan=
    |       | +-BarrierScan
    |       |   +-column_list=KeyValue.[Key#1, Value#2]
    |       |   +-input_scan=
    |       |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
    |           +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |           | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           | | +-Literal(type=INT64, value=1)
    |           | | +-Literal(type=INT64, value=2)
    |           | +-Literal(type=INT64, value=3)
    |           +-Literal(type=BOOL, value=true)
    |           +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
    |             +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |               +-Literal(type=STRING, value="Assert failed: ")
    |               +-Literal(type=STRING, value="1 +\n2\n\n# comment\n-- comment\n\n= 3")
    +-filter_expr=
      +-Literal(type=BOOL, value=true)
==

[show_sqlbuilder_output]
from KeyValue
|> assert key=10
|> assert key=11, value
|> assert key=11, key, value
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-AssertScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-AssertScan
    |   +-column_list=KeyValue.[Key#1, Value#2]
    |   +-input_scan=
    |   | +-AssertScan
    |   |   +-column_list=KeyValue.[Key#1, Value#2]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   +-condition=
    |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   |   |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |   +-Literal(type=INT64, value=10)
    |   |   +-message=
    |   |     +-Literal(type=STRING, value="key=10")
    |   +-condition=
    |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   +-Literal(type=INT64, value=11)
    |   +-message=
    |     +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
    |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-Literal(type=STRING, value="NULL")
    +-condition=
    | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   +-Literal(type=INT64, value=11)
    +-message=
      +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
        +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
        | +-Cast(INT64 -> STRING)
        | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | +-Literal(type=STRING, value="NULL")
        +-Literal(type=STRING, value=" ")
        +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
          +-ColumnRef(type=STRING, column=KeyValue.Value#2)
          +-Literal(type=STRING, value="NULL")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  assertscan_6.a_1 AS Key,
  assertscan_6.a_2 AS Value
FROM
  (
    SELECT
      assertscan_5.a_1 AS a_1,
      assertscan_5.a_2 AS a_2
    FROM
      (
        SELECT
          assertscan_5.a_1 AS a_1,
          assertscan_5.a_2 AS a_2
        FROM
          (
            SELECT
              assertscan_4.a_1 AS a_1,
              assertscan_4.a_2 AS a_2
            FROM
              (
                SELECT
                  assertscan_4.a_1 AS a_1,
                  assertscan_4.a_2 AS a_2
                FROM
                  (
                    SELECT
                      keyvalue_3.a_1 AS a_1,
                      keyvalue_3.a_2 AS a_2
                    FROM
                      (
                        SELECT
                          KeyValue.Key AS a_1,
                          KeyValue.Value AS a_2
                        FROM
                          KeyValue
                        |> AS keyvalue_3
                        |> ASSERT(keyvalue_3.a_1) = 10, "key=10"
                      )
                  ) AS assertscan_4
                |> AS assertscan_4
                |> ASSERT(assertscan_4.a_1) = 11, IFNULL(assertscan_4.a_2, "NULL")
              )
          ) AS assertscan_5
        |> AS assertscan_5
        |> ASSERT(assertscan_5.a_1) = 11, CONCAT(IFNULL(CAST(assertscan_5.a_1 AS STRING), "NULL"), " ", IFNULL(assertscan_5.a_2,
               "NULL"))
      )
  ) AS assertscan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> ASSERT(keyvalue_3.a_1) = 10, "key=10"
|> SELECT
     keyvalue_3.a_1 AS a_1,
     keyvalue_3.a_2 AS a_2
|> AS assertscan_4
|> ASSERT(assertscan_4.a_1) = 11, IFNULL(assertscan_4.a_2, "NULL")
|> SELECT
     assertscan_4.a_1 AS a_1,
     assertscan_4.a_2 AS a_2
|> AS assertscan_5
|> ASSERT(assertscan_5.a_1) = 11, CONCAT(IFNULL(CAST(assertscan_5.a_1 AS STRING), "NULL"), " ", IFNULL(assertscan_5.a_2,
       "NULL"))
|> SELECT
     assertscan_5.a_1 AS Key,
     assertscan_5.a_2 AS Value;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-BarrierScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-BarrierScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-BarrierScan
        |       +-column_list=KeyValue.[Key#1, Value#2]
        |       +-input_scan=
        |         +-FilterScan
        |           +-column_list=KeyValue.[Key#1, Value#2]
        |           +-input_scan=
        |           | +-BarrierScan
        |           |   +-column_list=KeyValue.[Key#1, Value#2]
        |           |   +-input_scan=
        |           |     +-BarrierScan
        |           |       +-column_list=KeyValue.[Key#1, Value#2]
        |           |       +-input_scan=
        |           |         +-FilterScan
        |           |           +-column_list=KeyValue.[Key#1, Value#2]
        |           |           +-input_scan=
        |           |           | +-BarrierScan
        |           |           |   +-column_list=KeyValue.[Key#1, Value#2]
        |           |           |   +-input_scan=
        |           |           |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |           |           +-filter_expr=
        |           |             +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
        |           |               +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           |               | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |           |               | +-Literal(type=INT64, value=10)
        |           |               +-Literal(type=BOOL, value=true)
        |           |               +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
        |           |                 +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |           |                   +-Literal(type=STRING, value="Assert failed: ")
        |           |                   +-Literal(type=STRING, value="key=10")
        |           +-filter_expr=
        |             +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
        |               +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |               | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |               | +-Literal(type=INT64, value=11)
        |               +-Literal(type=BOOL, value=true)
        |               +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
        |                 +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |                   +-Literal(type=STRING, value="Assert failed: ")
        |                   +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
        |                     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        |                     +-Literal(type=STRING, value="NULL")
        +-filter_expr=
          +-FunctionCall(ZetaSQL:if(BOOL, BOOL, BOOL) -> BOOL)
            +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            | +-Literal(type=INT64, value=11)
            +-Literal(type=BOOL, value=true)
            +-FunctionCall(ZetaSQL:error(STRING) -> BOOL)
              +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                +-Literal(type=STRING, value="Assert failed: ")
                +-FunctionCall(ZetaSQL:concat(STRING, repeated(2) STRING) -> STRING)
                  +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
                  | +-Cast(INT64 -> STRING)
                  | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  | +-Literal(type=STRING, value="NULL")
                  +-Literal(type=STRING, value=" ")
                  +-FunctionCall(ZetaSQL:ifnull(STRING, STRING) -> STRING)
                    +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                    +-Literal(type=STRING, value="NULL")
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  barrierscan_5.a_1 AS Key,
  barrierscan_5.a_2 AS Value
FROM
  (
    SELECT
      barrierscan_4.a_1 AS a_1,
      barrierscan_4.a_2 AS a_2
    FROM
      (
        SELECT
          barrierscan_3.a_1 AS a_1,
          barrierscan_3.a_2 AS a_2
        FROM
          (
            SELECT
              KeyValue.Key AS a_1,
              KeyValue.Value AS a_2
            FROM
              KeyValue
          ) AS barrierscan_3
        WHERE
          `IF`((barrierscan_3.a_1) = 10, true, ERROR(CONCAT("Assert failed: ", "key=10")))
      ) AS barrierscan_4
    WHERE
      `IF`((barrierscan_4.a_1) = 11, true, ERROR(CONCAT("Assert failed: ", IFNULL(barrierscan_4.a_2, "NULL"))))
  ) AS barrierscan_5
WHERE
  `IF`((barrierscan_5.a_1) = 11, true, ERROR(CONCAT("Assert failed: ", CONCAT(IFNULL(CAST(barrierscan_5.a_1 AS STRING),
            "NULL"), " ", IFNULL(barrierscan_5.a_2, "NULL")))));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS barrierscan_3
|> WHERE
     `IF`((barrierscan_3.a_1) = 10, true, ERROR(CONCAT("Assert failed: ", "key=10")))
|> SELECT
     barrierscan_3.a_1 AS a_1,
     barrierscan_3.a_2 AS a_2
|> AS barrierscan_4
|> WHERE
     `IF`((barrierscan_4.a_1) = 11, true, ERROR(CONCAT("Assert failed: ", IFNULL(barrierscan_4.a_2, "NULL"))))
|> SELECT
     barrierscan_4.a_1 AS a_1,
     barrierscan_4.a_2 AS a_2
|> AS barrierscan_5
|> WHERE
     `IF`((barrierscan_5.a_1) = 11, true, ERROR(CONCAT("Assert failed: ", CONCAT(IFNULL(CAST(barrierscan_5.a_1 AS STRING),
               "NULL"), " ", IFNULL(barrierscan_5.a_2, "NULL")))))
|> SELECT
     barrierscan_5.a_1 AS Key,
     barrierscan_5.a_2 AS Value;
