# Without SQL_GRAPH_CHEAPEST_PATH, CHEAPEST produces an error.
[default language_features=NONE]
[language_features=NONE,+SQL_GRAPH]
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (a)
  COLUMNS(1 as col)
)
--
ERROR: CHEAPEST search prefix must include at least one edge cost expression [at 3:9]
  MATCH ANY CHEAPEST (a)
        ^
==

# Without SQL_GRAPH_CHEAPEST_PATH, cost expression produces an error.
[language_features=NONE,+SQL_GRAPH]
select * from graph_table(
  aml
  MATCH -[a COST a.amount]->
  COLUMNS(1 as col)
)
--
ERROR: Cost definition is not supported [at 3:18]
  MATCH -[a COST a.amount]->
                 ^
==

[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_CHEAPEST_PATH,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_PATH_TYPE,+SQL_GRAPH_PATH_SEARCH_PREFIX_PATH_COUNT]
[default no_test_extract_table_names]

# All cheapest is not implemented yet
select * from graph_table(
  aml
  MATCH ALL CHEAPEST (a)
  COLUMNS(1 as col)
)
--
ERROR: ALL CHEAPEST search is not supported [at 4:9]
  MATCH ALL CHEAPEST (a)
        ^
==

# Cost definition is not allowed on a graph node
select * from graph_table(
  aml
  MATCH (a COST 1)
  COLUMNS(1 as col)
)
--
ERROR: Cost definition is only allowed on a graph edge pattern [at 3:17]
  MATCH (a COST 1)
                ^
==

# Cost definition is not allowed on multiply declared variables
# Case: First edge defines cost
select * from graph_table(
  aml
  MATCH (a)-[e COST e.amount]->(b)-[e {{|COST e.emount|COST 100}}]->(a)
  COLUMNS(1 as col)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:35]
  MATCH (a)-[e COST e.amount]->(b)-[e ]->(a)
                                  ^
--
ALTERNATION GROUP: COST e.emount
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:35]
  MATCH (a)-[e COST e.amount]->(b)-[e COST e.emount]->(a)
                                  ^
--
ALTERNATION GROUP: COST 100
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:35]
  MATCH (a)-[e COST e.amount]->(b)-[e COST 100]->(a)
                                  ^
==

# Cost definition is not allowed on multiply declared variables
# Case: Second edge defines cost
select * from graph_table(
  aml
  MATCH (a)-[e {{|COST e.emount|COST 100}}]->(b)-[e COST e.amount]->(a)
  COLUMNS(1 as col)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Edge cost expression cannot be redefined for variable: e [at 3:22]
  MATCH (a)-[e ]->(b)-[e COST e.amount]->(a)
                     ^
--
ALTERNATION GROUP: COST e.emount
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:35]
  MATCH (a)-[e COST e.emount]->(b)-[e COST e.amount]->(a)
                                  ^
--
ALTERNATION GROUP: COST 100
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:30]
  MATCH (a)-[e COST 100]->(b)-[e COST e.amount]->(a)
                             ^
==

# Cost re-definition is not allowed on multiply declared variables
# Quoted identifier case
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (a)-[e COST e.amount]->(b)-[`e` cost `e`.amount+1]->(a)
  COLUMNS(1 as col)
)
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:48]
  MATCH ANY CHEAPEST (a)-[e COST e.amount]->(b)-[`e` cost `e`.amount+1]->(a)
                                               ^
==

# Cost on multiply declared vars across path patterns is not allowed
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e COST e.amount]->, {{|SHORTEST 2|CHEAPEST 2}} -[e COST 100]->
  COLUMNS(1 as col)
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:45]
  MATCH ANY CHEAPEST -[e COST e.amount]->,  -[e COST 100]->
                                            ^
--
ALTERNATION GROUP: SHORTEST 2
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:55]
  MATCH ANY CHEAPEST -[e COST e.amount]->, SHORTEST 2 -[e COST 100]->
                                                      ^
--
ALTERNATION GROUP: CHEAPEST 2
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:55]
  MATCH ANY CHEAPEST -[e COST e.amount]->, CHEAPEST 2 -[e COST 100]->
                                                      ^
==

# Cost re-definition is not allowed on multiply declared variables, nested case
# Quoted identifier case
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (a)-[e COST e.amount]->(b)(-[e cost e.amount+1]->(a))
  COLUMNS(1 as col)
)
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: e [at 3:49]
  MATCH ANY CHEAPEST (a)-[e COST e.amount]->(b)(-[e cost e.amount+1]->(a))
                                                ^
==

# Aggregate expression is not allowed in COST clause
select * from graph_table(
  aml
  MATCH -[e COST SUM(e.amount)]->{1,3}
  COLUMNS(1 as col)
)
--
ERROR: Aggregate function SUM not allowed in COST expression [at 3:18]
  MATCH -[e COST SUM(e.amount)]->{1,3}
                 ^
==

# cost expr must be a numerical type
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e COST "abc"]->{1,3}
  RETURN 1 as col
)
--
ERROR: Cost expression must be a numerical type [at 3:31]
  MATCH ANY CHEAPEST -[e COST "abc"]->{1,3}
                              ^
==

# cost expr cannot be NULL literal
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e COST NULL]->{1,3}
  RETURN 1 as col
)
--
ERROR: COST expression cannot be NULL literal [at 3:31]
  MATCH ANY CHEAPEST -[e COST NULL]->{1,3}
                              ^
==

select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e COST NULL + NULL]->{1,3}
  RETURN 1 as col
)
--
ERROR: Operands of + cannot be literal NULL [at 3:31]
  MATCH ANY CHEAPEST -[e COST NULL + NULL]->{1,3}
                              ^
==

select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e COST (NULL)]->{1,3}
  RETURN 1 as col
)
--
ERROR: COST expression cannot be NULL literal [at 3:32]
  MATCH ANY CHEAPEST -[e COST (NULL)]->{1,3}
                               ^
==

# cost expr cannot be NULL literal
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e COST cast(NULL as double)]->{1,3}
  RETURN 1 as col
)
--
ERROR: COST expression cannot be NULL literal [at 3:31]
  MATCH ANY CHEAPEST -[e COST cast(NULL as double)]->{1,3}
                              ^
==

# Using a nonlocal name in cost expr is not allowed
select * from graph_table(
  aml
  LET c = 100
  LET d = 1000
  MATCH ANY CHEAPEST -[e COST e.amount + c]->{1,3}
  RETURN 1 as col
)
--
ERROR: Name 'c', defined in the previous statement, can only be referenced in the outermost WHERE clause of MATCH [at 5:42]
  MATCH ANY CHEAPEST -[e COST e.amount + c]->{1,3}
                                         ^
==

# Using a nonlocal name in cost expr is not allowed
# Test showcases precedence of validation (quantifier is checked first)
select * from graph_table(
  aml
  LET c = 100
  MATCH ANY CHEAPEST -[e COST e.amount + c]->{0}
  RETURN 1 as col
)
--
ERROR: Value of upper bound must be greater than zero [at 4:47]
  MATCH ANY CHEAPEST -[e COST e.amount + c]->{0}
                                              ^
==

# Using a nonlocal name in cost expr is not allowed
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e1]->(n)-[e2 COST e1.amount + 10]->{1,3}
  RETURN 1 as col
)
--
ERROR: Unrecognized name: e1 [at 3:42]
  MATCH ANY CHEAPEST -[e1]->(n)-[e2 COST e1.amount + 10]->{1,3}
                                         ^
==

# cheapest is not allowed on a subpath, only the top level path
select * from graph_table(
  aml
  MATCH (ANY CHEAPEST -[e COST e.amount]->{1,3})
  COLUMNS(1 as col)
)
--
ERROR: Search prefix is not allowed inside a parenthesized path pattern [at 3:9]
  MATCH (ANY CHEAPEST -[e COST e.amount]->{1,3})
        ^
==

# Quoted `COST` fails as expected
select * from graph_table(
  aml
  MATCH (ANY CHEAPEST -[e `COST` e.amount]->{1,3})
  COLUMNS(1 as col)
)
--
ERROR: Syntax error: Expected "]" but got identifier `COST` [at 3:27]
  MATCH (ANY CHEAPEST -[e `COST` e.amount]->{1,3})
                          ^
==

# cheapest without any cost is an error
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (a)
  COLUMNS(1 as col)
)
--
ERROR: CHEAPEST search prefix must include at least one edge cost expression [at 3:9]
  MATCH ANY CHEAPEST (a)
        ^
==

# Quantified edges beneath CHEAPEST must include a cost expression
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[e]->{1,3}-[b COST 100]->(c)
  COLUMNS(1 as col)
)
--
ERROR: Quantified pattern in CHEAPEST must include at least one edge cost expression [at 3:22]
  MATCH ANY CHEAPEST -[e]->{1,3}-[b COST 100]->(c)
                     ^
==

# Quantified subpaths beneath CHEAPEST must include a cost expression
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (a)(-[e COST 1]->{1,3})-[b COST 100]->((a)-[b]-){1,3}
  COLUMNS(1 as col)
)
--
ERROR: Cannot multiply declare variable that previously defined a cost expression in the same path pattern: b [at 3:64]
  MATCH ANY CHEAPEST (a)(-[e COST 1]->{1,3})-[b COST 100]->((a)-[b]-){1,3}
                                                               ^
==

# cost without CHEAPEST (this is functionally a no-op but does create a cost_supertype)
select * from graph_table(
  aml
  MATCH -[a IS % WHERE a.amount <-3 COST a.amount]->
  COLUMNS(1 AS val)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#7 AS val [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.val#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.val#7]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element3#4, a#5, $element4#6]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element3#4, a#5, $element4#6]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element3#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.a#5]
        |       | | +-filter_expr=
        |       | | | +-FunctionCall(ZetaSQL:$less(UINT64, INT64) -> BOOL)
        |       | | |   +-GraphGetElementProperty
        |       | | |   | +-type=UINT64
        |       | | |   | +-expr=
        |       | | |   | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.a#5)
        |       | | |   | +-property=amount(UINT64)
        |       | | |   +-Literal(type=INT64, value=-3)
        |       | | +-label_expr=
        |       | | | +-GraphWildCardLabel(parse_location=48-49)
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-cost_expr=
        |       | |   +-GraphGetElementProperty
        |       | |     +-type=UINT64
        |       | |     +-expr=
        |       | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.a#5)
        |       | |     +-property=amount(UINT64)
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element4#6]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.$element3#4
        |       +-tail=$element_table.$element4#6
        |       +-path_cost=
        |         +-GraphPathCost(cost_supertype=UINT64)
        +-shape_expr_list=
          +-val#7 := Literal(type=INT64, value=1)
==

# cheapest with cost
select * from graph_table(
  aml
  MATCH ANY CHEAPEST -[a COST a.amount]->
  COLUMNS(1 as col)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#7 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#7]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=$element_table.[$element3#4, a#5, $element4#6]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=$element_table.[$element3#4, a#5, $element4#6]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       | | +-column_list=[$element_table.$element3#4]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.a#5]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | | +-cost_expr=
        |       | |   +-GraphGetElementProperty
        |       | |     +-type=UINT64
        |       | |     +-expr=
        |       | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.a#5)
        |       | |     +-property=amount(UINT64)
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.$element4#6]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.$element3#4
        |       +-tail=$element_table.$element4#6
        |       +-search_prefix=
        |       | +-GraphPathSearchPrefix(type=CHEAPEST)
        |       +-path_cost=
        |         +-GraphPathCost(cost_supertype=UINT64)
        +-shape_expr_list=
          +-col#7 := Literal(type=INT64, value=1)
==

# Multiply declared variables across MATCH statements is allowed
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (x)-[e COST e.amount]->(y)
  {{|OPTIONAL }}MATCH {{|ANY CHEAPEST}} (b)-[e cost e.amount + 1]->(a)
  RETURN 1 as col
)
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#13 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#13]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#13]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#13]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.col#13]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[x#4, e#5, y#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.x#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-GraphGetElementProperty
                  | |   | |     +-type=UINT64
                  | |   | |     +-expr=
                  | |   | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | |   | |     +-property=amount(UINT64)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.y#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.x#4
                  | |   +-tail=$element_table.y#6
                  | |   +-search_prefix=
                  | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6, b#10, e#11, a#12]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[b#10, e#11, a#12]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#10]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#11]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
                  | |   | |     +-GraphGetElementProperty
                  | |   | |     | +-type=UINT64
                  | |   | |     | +-expr=
                  | |   | |     | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   | |     | +-property=amount(UINT64)
                  | |   | |     +-Literal(type=UINT64, value=1)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#12]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.b#10
                  | |   +-tail=$element_table.a#12
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[x#4, e#5, y#6])
                  +-ProjectScan
                    +-column_list=[$graph_table.col#13]
                    +-expr_list=
                    | +-col#13 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[x#4, y#6, b#10, e#11, a#12])
--
ALTERNATION GROUP: ANY CHEAPEST
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#13 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#13]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#13]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#13]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.col#13]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[x#4, e#5, y#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.x#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-GraphGetElementProperty
                  | |   | |     +-type=UINT64
                  | |   | |     +-expr=
                  | |   | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | |   | |     +-property=amount(UINT64)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.y#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.x#4
                  | |   +-tail=$element_table.y#6
                  | |   +-search_prefix=
                  | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6, b#10, e#11, a#12]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[b#10, e#11, a#12]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#10]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#11]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
                  | |   | |     +-GraphGetElementProperty
                  | |   | |     | +-type=UINT64
                  | |   | |     | +-expr=
                  | |   | |     | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   | |     | +-property=amount(UINT64)
                  | |   | |     +-Literal(type=UINT64, value=1)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#12]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.b#10
                  | |   +-tail=$element_table.a#12
                  | |   +-search_prefix=
                  | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$element_table.[x#4, e#5, y#6])
                  +-ProjectScan
                    +-column_list=[$graph_table.col#13]
                    +-expr_list=
                    | +-col#13 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[x#4, y#6, b#10, e#11, a#12])
--
ALTERNATION GROUP: OPTIONAL ,
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#13 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#13]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#13]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#13]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.col#13]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[x#4, e#5, y#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.x#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-GraphGetElementProperty
                  | |   | |     +-type=UINT64
                  | |   | |     +-expr=
                  | |   | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | |   | |     +-property=amount(UINT64)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.y#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.x#4
                  | |   +-tail=$element_table.y#6
                  | |   +-search_prefix=
                  | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6, b#10, e#11, a#12]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[b#10, e#11, a#12]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#10]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#11]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
                  | |   | |     +-GraphGetElementProperty
                  | |   | |     | +-type=UINT64
                  | |   | |     | +-expr=
                  | |   | |     | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   | |     | +-property=amount(UINT64)
                  | |   | |     +-Literal(type=UINT64, value=1)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#12]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.b#10
                  | |   +-tail=$element_table.a#12
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[x#4, e#5, y#6])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.col#13]
                    +-expr_list=
                    | +-col#13 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[x#4, e#5, y#6, b#10, a#12])
--
ALTERNATION GROUP: OPTIONAL ,ANY CHEAPEST
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#13 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#13]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#13]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#13]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.col#13]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[x#4, e#5, y#6]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.x#4]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-GraphGetElementProperty
                  | |   | |     +-type=UINT64
                  | |   | |     +-expr=
                  | |   | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | |   | |     +-property=amount(UINT64)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.y#6]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.x#4
                  | |   +-tail=$element_table.y#6
                  | |   +-search_prefix=
                  | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=$element_table.[x#4, e#5, y#6, b#10, e#11, a#12]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[b#10, e#11, a#12]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#10]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#11]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | | +-cost_expr=
                  | |   | |   +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
                  | |   | |     +-GraphGetElementProperty
                  | |   | |     | +-type=UINT64
                  | |   | |     | +-expr=
                  | |   | |     | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   | |     | +-property=amount(UINT64)
                  | |   | |     +-Literal(type=UINT64, value=1)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#12]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.b#10
                  | |   +-tail=$element_table.a#12
                  | |   +-search_prefix=
                  | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
                  | |   +-path_cost=
                  | |     +-GraphPathCost(cost_supertype=UINT64)
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#11)
                  | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#5)
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[x#4, e#5, y#6])
                  | +-optional=TRUE
                  +-ProjectScan
                    +-column_list=[$graph_table.col#13]
                    +-expr_list=
                    | +-col#13 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[x#4, e#5, y#6, b#10, a#12])
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_CHEAPEST_PATH,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+NUMERIC_TYPE]
# cheapest with supertyped cost
select * from graph_table(
  aml
  MATCH ANY CHEAPEST (-[a COST 10 + a.amount]->{1,3})-[b]->(-[c COST 100.0]->(d)-[e COST NUMERIC '1']->(f)){1,2}
  COLUMNS(1 as col)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#43 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#43]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#43]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#28, $path_scan.$tail#29, $element_table.b#30, $path_scan.$head#41, $path_scan.$tail#42]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#28, $path_scan.$tail#29, $element_table.b#30, $path_scan.$head#41, $path_scan.$tail#42]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       | | +-column_list=$path_scan.[$head#28, $tail#29]
        |       | | +-input_scan_list=
        |       | | | +-GraphNodeScan
        |       | | | | +-column_list=[$element_table.$element4#22]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | | +-GraphEdgeScan
        |       | | | | +-column_list=[$element_table.a#23]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | | | +-orientation=RIGHT
        |       | | | | +-cost_expr=
        |       | | | |   +-Cast(UINT64 -> DOUBLE)
        |       | | | |     +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
        |       | | | |       +-Literal(type=UINT64, value=10)
        |       | | | |       +-GraphGetElementProperty
        |       | | | |         +-type=UINT64
        |       | | | |         +-expr=
        |       | | | |         | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.a#23)
        |       | | | |         +-property=amount(UINT64)
        |       | | | +-GraphNodeScan
        |       | | |   +-column_list=[$element_table.$element5#24]
        |       | | |   +-label_expr=
        |       | | |   | +-GraphLabelNaryExpr
        |       | | |   |   +-op=OR
        |       | | |   |   +-operand_list=
        |       | | |   |     +-GraphWildCardLabel
        |       | | |   |     +-GraphLabelNaryExpr
        |       | | |   |       +-op=NOT
        |       | | |   |       +-operand_list=
        |       | | |   |         +-GraphWildCardLabel
        |       | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | +-head=$path_scan.$head#28
        |       | | +-tail=$path_scan.$tail#29
        |       | | +-quantifier=
        |       | | | +-GraphPathPatternQuantifier
        |       | | |   +-lower_bound=
        |       | | |   | +-Literal(type=INT64, value=1)
        |       | | |   +-upper_bound=
        |       | | |     +-Literal(type=INT64, value=3)
        |       | | +-group_variable_list=
        |       | | | +-GraphMakeArrayVariable(element=$element_table.$element4#22, array=$element_table.$element4#25)
        |       | | | +-GraphMakeArrayVariable(element=$element_table.a#23, array=$element_table.a#26)
        |       | | | +-GraphMakeArrayVariable(element=$element_table.$element5#24, array=$element_table.$element5#27)
        |       | | +-path_cost=
        |       | |   +-GraphPathCost(cost_supertype=DOUBLE)
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#30]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphPathScan
        |       |   +-column_list=$path_scan.[$head#41, $tail#42]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.$element6#31]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.c#32]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | | +-cost_expr=
        |       |   | |   +-Literal(type=DOUBLE, value=100, float_literal_id=2)
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.d#33]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.e#34]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | | +-cost_expr=
        |       |   | |   +-Literal(type=DOUBLE, value=1, has_explicit_type=TRUE)
        |       |   | +-GraphNodeScan
        |       |   |   +-column_list=[$element_table.f#35]
        |       |   |   +-label_expr=
        |       |   |   | +-GraphLabelNaryExpr
        |       |   |   |   +-op=OR
        |       |   |   |   +-operand_list=
        |       |   |   |     +-GraphWildCardLabel
        |       |   |   |     +-GraphLabelNaryExpr
        |       |   |   |       +-op=NOT
        |       |   |   |       +-operand_list=
        |       |   |   |         +-GraphWildCardLabel
        |       |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   +-head=$path_scan.$head#41
        |       |   +-tail=$path_scan.$tail#42
        |       |   +-quantifier=
        |       |   | +-GraphPathPatternQuantifier
        |       |   |   +-lower_bound=
        |       |   |   | +-Literal(type=INT64, value=1)
        |       |   |   +-upper_bound=
        |       |   |     +-Literal(type=INT64, value=2)
        |       |   +-group_variable_list=
        |       |   | +-GraphMakeArrayVariable(element=$element_table.$element6#31, array=$element_table.$element6#36)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.c#32, array=$element_table.c#37)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.d#33, array=$element_table.d#38)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.e#34, array=$element_table.e#39)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.f#35, array=$element_table.f#40)
        |       |   +-path_cost=
        |       |     +-GraphPathCost(cost_supertype=DOUBLE)
        |       +-head=$path_scan.$head#28
        |       +-tail=$path_scan.$tail#42
        |       +-search_prefix=
        |       | +-GraphPathSearchPrefix(type=CHEAPEST)
        |       +-path_cost=
        |         +-GraphPathCost(cost_supertype=DOUBLE)
        +-shape_expr_list=
          +-col#43 := Literal(type=INT64, value=1)
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_CHEAPEST_PATH,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+NUMERIC_TYPE,+SQL_GRAPH_PATH_SEARCH_PREFIX_PATH_COUNT]
# cheapest K with supertyped cost
select * from graph_table(
  aml
  MATCH CHEAPEST 4 (-[a COST cast(a.amount as uint32)]->{1,3})-[b]->(-[c COST cast(2 as int32) + cast(4 as int32)]->(d)-[e COST abs(cast(1 as int32))]->(f)){1,2}
  COLUMNS(1 as col)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#43 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.col#43]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.col#43]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$path_scan.$head#28, $path_scan.$tail#29, $element_table.b#30, $path_scan.$head#41, $path_scan.$tail#42]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$path_scan.$head#28, $path_scan.$tail#29, $element_table.b#30, $path_scan.$head#41, $path_scan.$tail#42]
        |       +-input_scan_list=
        |       | +-GraphPathScan
        |       | | +-column_list=$path_scan.[$head#28, $tail#29]
        |       | | +-input_scan_list=
        |       | | | +-GraphNodeScan
        |       | | | | +-column_list=[$element_table.$element4#22]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | | +-GraphEdgeScan
        |       | | | | +-column_list=[$element_table.a#23]
        |       | | | | +-label_expr=
        |       | | | | | +-GraphLabelNaryExpr
        |       | | | | |   +-op=OR
        |       | | | | |   +-operand_list=
        |       | | | | |     +-GraphWildCardLabel
        |       | | | | |     +-GraphLabelNaryExpr
        |       | | | | |       +-op=NOT
        |       | | | | |       +-operand_list=
        |       | | | | |         +-GraphWildCardLabel
        |       | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | | | +-orientation=RIGHT
        |       | | | | +-cost_expr=
        |       | | | |   +-Cast(UINT32 -> INT64)
        |       | | | |     +-Cast(UINT64 -> UINT32)
        |       | | | |       +-GraphGetElementProperty
        |       | | | |         +-type=UINT64
        |       | | | |         +-expr=
        |       | | | |         | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.a#23)
        |       | | | |         +-property=amount(UINT64)
        |       | | | +-GraphNodeScan
        |       | | |   +-column_list=[$element_table.$element5#24]
        |       | | |   +-label_expr=
        |       | | |   | +-GraphLabelNaryExpr
        |       | | |   |   +-op=OR
        |       | | |   |   +-operand_list=
        |       | | |   |     +-GraphWildCardLabel
        |       | | |   |     +-GraphLabelNaryExpr
        |       | | |   |       +-op=NOT
        |       | | |   |       +-operand_list=
        |       | | |   |         +-GraphWildCardLabel
        |       | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       | | +-head=$path_scan.$head#28
        |       | | +-tail=$path_scan.$tail#29
        |       | | +-quantifier=
        |       | | | +-GraphPathPatternQuantifier
        |       | | |   +-lower_bound=
        |       | | |   | +-Literal(type=INT64, value=1)
        |       | | |   +-upper_bound=
        |       | | |     +-Literal(type=INT64, value=3)
        |       | | +-group_variable_list=
        |       | | | +-GraphMakeArrayVariable(element=$element_table.$element4#22, array=$element_table.$element4#25)
        |       | | | +-GraphMakeArrayVariable(element=$element_table.a#23, array=$element_table.a#26)
        |       | | | +-GraphMakeArrayVariable(element=$element_table.$element5#24, array=$element_table.$element5#27)
        |       | | +-path_cost=
        |       | |   +-GraphPathCost(cost_supertype=INT64)
        |       | +-GraphEdgeScan
        |       | | +-column_list=[$element_table.b#30]
        |       | | +-label_expr=
        |       | | | +-GraphLabelNaryExpr
        |       | | |   +-op=OR
        |       | | |   +-operand_list=
        |       | | |     +-GraphWildCardLabel
        |       | | |     +-GraphLabelNaryExpr
        |       | | |       +-op=NOT
        |       | | |       +-operand_list=
        |       | | |         +-GraphWildCardLabel
        |       | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       | | +-orientation=RIGHT
        |       | +-GraphPathScan
        |       |   +-column_list=$path_scan.[$head#41, $tail#42]
        |       |   +-input_scan_list=
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.$element6#31]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.c#32]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | | +-cost_expr=
        |       |   | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       |   | |     +-Literal(type=INT64, value=2, has_explicit_type=TRUE)
        |       |   | |     +-Literal(type=INT64, value=4, has_explicit_type=TRUE)
        |       |   | +-GraphNodeScan
        |       |   | | +-column_list=[$element_table.d#33]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   | +-GraphEdgeScan
        |       |   | | +-column_list=[$element_table.e#34]
        |       |   | | +-label_expr=
        |       |   | | | +-GraphLabelNaryExpr
        |       |   | | |   +-op=OR
        |       |   | | |   +-operand_list=
        |       |   | | |     +-GraphWildCardLabel
        |       |   | | |     +-GraphLabelNaryExpr
        |       |   | | |       +-op=NOT
        |       |   | | |       +-operand_list=
        |       |   | | |         +-GraphWildCardLabel
        |       |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |       |   | | +-orientation=RIGHT
        |       |   | | +-cost_expr=
        |       |   | |   +-Cast(INT32 -> INT64)
        |       |   | |     +-FunctionCall(ZetaSQL:abs(INT32) -> INT32)
        |       |   | |       +-Literal(type=INT32, value=1, has_explicit_type=TRUE)
        |       |   | +-GraphNodeScan
        |       |   |   +-column_list=[$element_table.f#35]
        |       |   |   +-label_expr=
        |       |   |   | +-GraphLabelNaryExpr
        |       |   |   |   +-op=OR
        |       |   |   |   +-operand_list=
        |       |   |   |     +-GraphWildCardLabel
        |       |   |   |     +-GraphLabelNaryExpr
        |       |   |   |       +-op=NOT
        |       |   |   |       +-operand_list=
        |       |   |   |         +-GraphWildCardLabel
        |       |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       |   +-head=$path_scan.$head#41
        |       |   +-tail=$path_scan.$tail#42
        |       |   +-quantifier=
        |       |   | +-GraphPathPatternQuantifier
        |       |   |   +-lower_bound=
        |       |   |   | +-Literal(type=INT64, value=1)
        |       |   |   +-upper_bound=
        |       |   |     +-Literal(type=INT64, value=2)
        |       |   +-group_variable_list=
        |       |   | +-GraphMakeArrayVariable(element=$element_table.$element6#31, array=$element_table.$element6#36)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.c#32, array=$element_table.c#37)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.d#33, array=$element_table.d#38)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.e#34, array=$element_table.e#39)
        |       |   | +-GraphMakeArrayVariable(element=$element_table.f#35, array=$element_table.f#40)
        |       |   +-path_cost=
        |       |     +-GraphPathCost(cost_supertype=INT64)
        |       +-head=$path_scan.$head#28
        |       +-tail=$path_scan.$tail#42
        |       +-search_prefix=
        |       | +-GraphPathSearchPrefix
        |       |   +-type=CHEAPEST
        |       |   +-path_count=
        |       |     +-Literal(type=INT64, value=4)
        |       +-path_cost=
        |         +-GraphPathCost(cost_supertype=INT64)
        +-shape_expr_list=
          +-col#43 := Literal(type=INT64, value=1)
==

# CHEAPEST with path variable assignment and supertyped cost
GRAPH aml
MATCH p = CHEAPEST 3 -[e cost (select sum(x) from unnest([1,2,3]) as x)]->{1,3}-(c)-[e2 cost 1.0]->
RETURN path_length(p) as col
--

QueryStmt
+-output_column_list=
| +-$graph_table.col#33 AS col [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.col#33]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.col#33]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#33]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$path_scan.$head#26, $path_scan.$tail#27, $element_table.$element7#28, $element_table.c#29, $element_table.e2#30, $element_table.$element8#31, $graph_table.p#32]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$path_scan.$head#26, $path_scan.$tail#27, $element_table.$element7#28, $element_table.c#29, $element_table.e2#30, $element_table.$element8#31, $graph_table.p#32]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=[$path_scan.$head#26, $path_scan.$tail#27, $graph_table.$path#22]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.$element5#17]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabelNaryExpr
              | |   | | | | |   +-op=OR
              | |   | | | | |   +-operand_list=
              | |   | | | | |     +-GraphWildCardLabel
              | |   | | | | |     +-GraphLabelNaryExpr
              | |   | | | | |       +-op=NOT
              | |   | | | | |       +-operand_list=
              | |   | | | | |         +-GraphWildCardLabel
              | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | | +-GraphEdgeScan
              | |   | | | | +-column_list=[$element_table.e#18]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabelNaryExpr
              | |   | | | | |   +-op=OR
              | |   | | | | |   +-operand_list=
              | |   | | | | |     +-GraphWildCardLabel
              | |   | | | | |     +-GraphLabelNaryExpr
              | |   | | | | |       +-op=NOT
              | |   | | | | |       +-operand_list=
              | |   | | | | |         +-GraphWildCardLabel
              | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | | | +-orientation=RIGHT
              | |   | | | | +-cost_expr=
              | |   | | | |   +-Cast(INT64 -> DOUBLE)
              | |   | | | |     +-SubqueryExpr
              | |   | | | |       +-type=INT64
              | |   | | | |       +-subquery_type=SCALAR
              | |   | | | |       +-subquery=
              | |   | | | |         +-ProjectScan
              | |   | | | |           +-column_list=[$aggregate.$agg1#20]
              | |   | | | |           +-input_scan=
              | |   | | | |             +-AggregateScan
              | |   | | | |               +-column_list=[$aggregate.$agg1#20]
              | |   | | | |               +-input_scan=
              | |   | | | |               | +-ArrayScan
              | |   | | | |               |   +-column_list=[$array.x#19]
              | |   | | | |               |   +-array_expr_list=
              | |   | | | |               |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
              | |   | | | |               |   +-element_column_list=[$array.x#19]
              | |   | | | |               +-aggregate_list=
              | |   | | | |                 +-$agg1#20 :=
              | |   | | | |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              | |   | | | |                     +-ColumnRef(type=INT64, column=$array.x#19)
              | |   | | | +-GraphNodeScan
              | |   | | |   +-column_list=[$element_table.$element6#21]
              | |   | | |   +-label_expr=
              | |   | | |   | +-GraphLabelNaryExpr
              | |   | | |   |   +-op=OR
              | |   | | |   |   +-operand_list=
              | |   | | |   |     +-GraphWildCardLabel
              | |   | | |   |     +-GraphLabelNaryExpr
              | |   | | |   |       +-op=NOT
              | |   | | |   |       +-operand_list=
              | |   | | |   |         +-GraphWildCardLabel
              | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | +-path=
              | |   | | | +-ColumnHolder(column=$graph_table.$path#22)
              | |   | | +-head=$path_scan.$head#26
              | |   | | +-tail=$path_scan.$tail#27
              | |   | | +-quantifier=
              | |   | | | +-GraphPathPatternQuantifier
              | |   | | |   +-lower_bound=
              | |   | | |   | +-Literal(type=INT64, value=1)
              | |   | | |   +-upper_bound=
              | |   | | |     +-Literal(type=INT64, value=3)
              | |   | | +-group_variable_list=
              | |   | | | +-GraphMakeArrayVariable(element=$element_table.$element5#17, array=$element_table.$element5#23)
              | |   | | | +-GraphMakeArrayVariable(element=$element_table.e#18, array=$element_table.e#24)
              | |   | | | +-GraphMakeArrayVariable(element=$element_table.$element6#21, array=$element_table.$element6#25)
              | |   | | +-path_cost=
              | |   | |   +-GraphPathCost(cost_supertype=DOUBLE)
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.$element7#28]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=ANY
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.c#29]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.e2#30]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | | +-cost_expr=
              | |   | |   +-Literal(type=DOUBLE, value=1)
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.$element8#31]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-path=
              | |   | +-ColumnHolder(column=$graph_table.p#32)
              | |   +-head=$path_scan.$head#26
              | |   +-tail=$element_table.$element8#31
              | |   +-search_prefix=
              | |   | +-GraphPathSearchPrefix
              | |   |   +-type=CHEAPEST
              | |   |   +-path_count=
              | |   |     +-Literal(type=INT64, value=3)
              | |   +-path_cost=
              | |     +-GraphPathCost(cost_supertype=DOUBLE)
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.col#33]
                +-expr_list=
                | +-col#33 :=
                |   +-FunctionCall(ZetaSQL:path_length(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
                |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#32)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.$element7#28, $element_table.c#29, $element_table.e2#30, $element_table.$element8#31, $graph_table.p#32])
==

# Multiple top level selectors including CHEAPEST and SHORTEST

GRAPH aml
MATCH p = CHEAPEST 2 (a)(-[b cost b.amount + 1]->){1,5},
      q = ANY SHORTEST -[e cost e.amount]->{1,4},
      r = ANY CHEAPEST (((a)-[b2 cost 10]->{1,2}))(((c)-[d cost 1.4]->{1,2}))
RETURN 1 as col
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#89 AS col [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.col#89]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.col#89]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#89]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.a#12, $path_scan.$head#20, $path_scan.$tail#21, $graph_table.p#22, $path_scan.$head#40, $path_scan.$tail#41, $graph_table.q#42, $element_table.a#66, $path_scan.$head#74, $path_scan.$tail#75, $element_table.c#77, $path_scan.$head#85, $path_scan.$tail#86, $graph_table.r#88]
              | +-input_scan_list=
              | | +-GraphPathScan
              | | | +-column_list=[$element_table.a#12, $path_scan.$head#20, $path_scan.$tail#21, $graph_table.p#22]
              | | | +-input_scan_list=
              | | | | +-GraphNodeScan
              | | | | | +-column_list=[$element_table.a#12]
              | | | | | +-label_expr=
              | | | | | | +-GraphLabelNaryExpr
              | | | | | |   +-op=AND
              | | | | | |   +-operand_list=
              | | | | | |     +-GraphLabelNaryExpr
              | | | | | |     | +-op=OR
              | | | | | |     | +-operand_list=
              | | | | | |     |   +-GraphWildCardLabel
              | | | | | |     |   +-GraphLabelNaryExpr
              | | | | | |     |     +-op=NOT
              | | | | | |     |     +-operand_list=
              | | | | | |     |       +-GraphWildCardLabel
              | | | | | |     +-GraphLabelNaryExpr
              | | | | | |       +-op=OR
              | | | | | |       +-operand_list=
              | | | | | |         +-GraphWildCardLabel
              | | | | | |         +-GraphLabelNaryExpr
              | | | | | |           +-op=NOT
              | | | | | |           +-operand_list=
              | | | | | |             +-GraphWildCardLabel
              | | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | | | | +-GraphPathScan
              | | | |   +-column_list=[$path_scan.$head#20, $path_scan.$tail#21, $graph_table.$path#16]
              | | | |   +-input_scan_list=
              | | | |   | +-GraphNodeScan
              | | | |   | | +-column_list=[$element_table.$element3#13]
              | | | |   | | +-label_expr=
              | | | |   | | | +-GraphLabelNaryExpr
              | | | |   | | |   +-op=OR
              | | | |   | | |   +-operand_list=
              | | | |   | | |     +-GraphWildCardLabel
              | | | |   | | |     +-GraphLabelNaryExpr
              | | | |   | | |       +-op=NOT
              | | | |   | | |       +-operand_list=
              | | | |   | | |         +-GraphWildCardLabel
              | | | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | | | |   | +-GraphEdgeScan
              | | | |   | | +-column_list=[$element_table.b#14]
              | | | |   | | +-label_expr=
              | | | |   | | | +-GraphLabelNaryExpr
              | | | |   | | |   +-op=OR
              | | | |   | | |   +-operand_list=
              | | | |   | | |     +-GraphWildCardLabel
              | | | |   | | |     +-GraphLabelNaryExpr
              | | | |   | | |       +-op=NOT
              | | | |   | | |       +-operand_list=
              | | | |   | | |         +-GraphWildCardLabel
              | | | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | | | |   | | +-orientation=RIGHT
              | | | |   | | +-cost_expr=
              | | | |   | |   +-FunctionCall(ZetaSQL:$add(UINT64, UINT64) -> UINT64)
              | | | |   | |     +-GraphGetElementProperty
              | | | |   | |     | +-type=UINT64
              | | | |   | |     | +-expr=
              | | | |   | |     | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.b#14)
              | | | |   | |     | +-property=amount(UINT64)
              | | | |   | |     +-Literal(type=UINT64, value=1)
              | | | |   | +-GraphNodeScan
              | | | |   |   +-column_list=[$element_table.$element4#15]
              | | | |   |   +-label_expr=
              | | | |   |   | +-GraphLabelNaryExpr
              | | | |   |   |   +-op=OR
              | | | |   |   |   +-operand_list=
              | | | |   |   |     +-GraphWildCardLabel
              | | | |   |   |     +-GraphLabelNaryExpr
              | | | |   |   |       +-op=NOT
              | | | |   |   |       +-operand_list=
              | | | |   |   |         +-GraphWildCardLabel
              | | | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | | | |   +-path=
              | | | |   | +-ColumnHolder(column=$graph_table.$path#16)
              | | | |   +-head=$path_scan.$head#20
              | | | |   +-tail=$path_scan.$tail#21
              | | | |   +-quantifier=
              | | | |   | +-GraphPathPatternQuantifier
              | | | |   |   +-lower_bound=
              | | | |   |   | +-Literal(type=INT64, value=1)
              | | | |   |   +-upper_bound=
              | | | |   |     +-Literal(type=INT64, value=5)
              | | | |   +-group_variable_list=
              | | | |   | +-GraphMakeArrayVariable(element=$element_table.$element3#13, array=$element_table.$element3#17)
              | | | |   | +-GraphMakeArrayVariable(element=$element_table.b#14, array=$element_table.b#18)
              | | | |   | +-GraphMakeArrayVariable(element=$element_table.$element4#15, array=$element_table.$element4#19)
              | | | |   +-path_cost=
              | | | |     +-GraphPathCost(cost_supertype=UINT64)
              | | | +-path=
              | | | | +-ColumnHolder(column=$graph_table.p#22)
              | | | +-head=$element_table.a#12
              | | | +-tail=$path_scan.$tail#21
              | | | +-search_prefix=
              | | | | +-GraphPathSearchPrefix
              | | | |   +-type=CHEAPEST
              | | | |   +-path_count=
              | | | |     +-Literal(type=INT64, value=2)
              | | | +-path_cost=
              | | |   +-GraphPathCost(cost_supertype=UINT64)
              | | +-GraphPathScan
              | | | +-column_list=[$path_scan.$head#40, $path_scan.$tail#41, $graph_table.q#42]
              | | | +-input_scan_list=
              | | | | +-GraphPathScan
              | | | |   +-column_list=[$path_scan.$head#40, $path_scan.$tail#41, $graph_table.$path#36]
              | | | |   +-input_scan_list=
              | | | |   | +-GraphNodeScan
              | | | |   | | +-column_list=[$element_table.$element7#33]
              | | | |   | | +-label_expr=
              | | | |   | | | +-GraphLabelNaryExpr
              | | | |   | | |   +-op=OR
              | | | |   | | |   +-operand_list=
              | | | |   | | |     +-GraphWildCardLabel
              | | | |   | | |     +-GraphLabelNaryExpr
              | | | |   | | |       +-op=NOT
              | | | |   | | |       +-operand_list=
              | | | |   | | |         +-GraphWildCardLabel
              | | | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | | | |   | +-GraphEdgeScan
              | | | |   | | +-column_list=[$element_table.e#34]
              | | | |   | | +-label_expr=
              | | | |   | | | +-GraphLabelNaryExpr
              | | | |   | | |   +-op=OR
              | | | |   | | |   +-operand_list=
              | | | |   | | |     +-GraphWildCardLabel
              | | | |   | | |     +-GraphLabelNaryExpr
              | | | |   | | |       +-op=NOT
              | | | |   | | |       +-operand_list=
              | | | |   | | |         +-GraphWildCardLabel
              | | | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | | | |   | | +-orientation=RIGHT
              | | | |   | | +-cost_expr=
              | | | |   | |   +-GraphGetElementProperty
              | | | |   | |     +-type=UINT64
              | | | |   | |     +-expr=
              | | | |   | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#34)
              | | | |   | |     +-property=amount(UINT64)
              | | | |   | +-GraphNodeScan
              | | | |   |   +-column_list=[$element_table.$element8#35]
              | | | |   |   +-label_expr=
              | | | |   |   | +-GraphLabelNaryExpr
              | | | |   |   |   +-op=OR
              | | | |   |   |   +-operand_list=
              | | | |   |   |     +-GraphWildCardLabel
              | | | |   |   |     +-GraphLabelNaryExpr
              | | | |   |   |       +-op=NOT
              | | | |   |   |       +-operand_list=
              | | | |   |   |         +-GraphWildCardLabel
              | | | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | | | |   +-path=
              | | | |   | +-ColumnHolder(column=$graph_table.$path#36)
              | | | |   +-head=$path_scan.$head#40
              | | | |   +-tail=$path_scan.$tail#41
              | | | |   +-quantifier=
              | | | |   | +-GraphPathPatternQuantifier
              | | | |   |   +-lower_bound=
              | | | |   |   | +-Literal(type=INT64, value=1)
              | | | |   |   +-upper_bound=
              | | | |   |     +-Literal(type=INT64, value=4)
              | | | |   +-group_variable_list=
              | | | |   | +-GraphMakeArrayVariable(element=$element_table.$element7#33, array=$element_table.$element7#37)
              | | | |   | +-GraphMakeArrayVariable(element=$element_table.e#34, array=$element_table.e#38)
              | | | |   | +-GraphMakeArrayVariable(element=$element_table.$element8#35, array=$element_table.$element8#39)
              | | | |   +-path_cost=
              | | | |     +-GraphPathCost(cost_supertype=UINT64)
              | | | +-path=
              | | | | +-ColumnHolder(column=$graph_table.q#42)
              | | | +-head=$path_scan.$head#40
              | | | +-tail=$path_scan.$tail#41
              | | | +-search_prefix=
              | | | | +-GraphPathSearchPrefix(type=SHORTEST)
              | | | +-path_cost=
              | | |   +-GraphPathCost(cost_supertype=UINT64)
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.a#66, $path_scan.$head#74, $path_scan.$tail#75, $element_table.c#77, $path_scan.$head#85, $path_scan.$tail#86, $graph_table.r#88]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   | | +-column_list=[$element_table.a#66, $path_scan.$head#74, $path_scan.$tail#75, $graph_table.$path#76]
              | |   | | +-input_scan_list=
              | |   | | | +-GraphNodeScan
              | |   | | | | +-column_list=[$element_table.a#66]
              | |   | | | | +-label_expr=
              | |   | | | | | +-GraphLabelNaryExpr
              | |   | | | | |   +-op=AND
              | |   | | | | |   +-operand_list=
              | |   | | | | |     +-GraphLabelNaryExpr
              | |   | | | | |     | +-op=OR
              | |   | | | | |     | +-operand_list=
              | |   | | | | |     |   +-GraphWildCardLabel
              | |   | | | | |     |   +-GraphLabelNaryExpr
              | |   | | | | |     |     +-op=NOT
              | |   | | | | |     |     +-operand_list=
              | |   | | | | |     |       +-GraphWildCardLabel
              | |   | | | | |     +-GraphLabelNaryExpr
              | |   | | | | |       +-op=OR
              | |   | | | | |       +-operand_list=
              | |   | | | | |         +-GraphWildCardLabel
              | |   | | | | |         +-GraphLabelNaryExpr
              | |   | | | | |           +-op=NOT
              | |   | | | | |           +-operand_list=
              | |   | | | | |             +-GraphWildCardLabel
              | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | | +-GraphPathScan
              | |   | | |   +-column_list=[$path_scan.$head#74, $path_scan.$tail#75, $graph_table.$path#70]
              | |   | | |   +-input_scan_list=
              | |   | | |   | +-GraphNodeScan
              | |   | | |   | | +-column_list=[$element_table.$element13#67]
              | |   | | |   | | +-label_expr=
              | |   | | |   | | | +-GraphLabelNaryExpr
              | |   | | |   | | |   +-op=OR
              | |   | | |   | | |   +-operand_list=
              | |   | | |   | | |     +-GraphWildCardLabel
              | |   | | |   | | |     +-GraphLabelNaryExpr
              | |   | | |   | | |       +-op=NOT
              | |   | | |   | | |       +-operand_list=
              | |   | | |   | | |         +-GraphWildCardLabel
              | |   | | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | |   | +-GraphEdgeScan
              | |   | | |   | | +-column_list=[$element_table.b2#68]
              | |   | | |   | | +-label_expr=
              | |   | | |   | | | +-GraphLabelNaryExpr
              | |   | | |   | | |   +-op=OR
              | |   | | |   | | |   +-operand_list=
              | |   | | |   | | |     +-GraphWildCardLabel
              | |   | | |   | | |     +-GraphLabelNaryExpr
              | |   | | |   | | |       +-op=NOT
              | |   | | |   | | |       +-operand_list=
              | |   | | |   | | |         +-GraphWildCardLabel
              | |   | | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | |   | | +-orientation=RIGHT
              | |   | | |   | | +-cost_expr=
              | |   | | |   | |   +-Literal(type=DOUBLE, value=10)
              | |   | | |   | +-GraphNodeScan
              | |   | | |   |   +-column_list=[$element_table.$element14#69]
              | |   | | |   |   +-label_expr=
              | |   | | |   |   | +-GraphLabelNaryExpr
              | |   | | |   |   |   +-op=OR
              | |   | | |   |   |   +-operand_list=
              | |   | | |   |   |     +-GraphWildCardLabel
              | |   | | |   |   |     +-GraphLabelNaryExpr
              | |   | | |   |   |       +-op=NOT
              | |   | | |   |   |       +-operand_list=
              | |   | | |   |   |         +-GraphWildCardLabel
              | |   | | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | | |   +-path=
              | |   | | |   | +-ColumnHolder(column=$graph_table.$path#70)
              | |   | | |   +-head=$path_scan.$head#74
              | |   | | |   +-tail=$path_scan.$tail#75
              | |   | | |   +-quantifier=
              | |   | | |   | +-GraphPathPatternQuantifier
              | |   | | |   |   +-lower_bound=
              | |   | | |   |   | +-Literal(type=INT64, value=1)
              | |   | | |   |   +-upper_bound=
              | |   | | |   |     +-Literal(type=INT64, value=2)
              | |   | | |   +-group_variable_list=
              | |   | | |   | +-GraphMakeArrayVariable(element=$element_table.$element13#67, array=$element_table.$element13#71)
              | |   | | |   | +-GraphMakeArrayVariable(element=$element_table.b2#68, array=$element_table.b2#72)
              | |   | | |   | +-GraphMakeArrayVariable(element=$element_table.$element14#69, array=$element_table.$element14#73)
              | |   | | |   +-path_cost=
              | |   | | |     +-GraphPathCost(cost_supertype=DOUBLE)
              | |   | | +-path=
              | |   | | | +-ColumnHolder(column=$graph_table.$path#76)
              | |   | | +-head=$element_table.a#66
              | |   | | +-tail=$path_scan.$tail#75
              | |   | | +-path_cost=
              | |   | |   +-GraphPathCost(cost_supertype=DOUBLE)
              | |   | +-GraphPathScan
              | |   |   +-column_list=[$element_table.c#77, $path_scan.$head#85, $path_scan.$tail#86, $graph_table.$path#87]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.c#77]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   | +-GraphPathScan
              | |   |   |   +-column_list=[$path_scan.$head#85, $path_scan.$tail#86, $graph_table.$path#81]
              | |   |   |   +-input_scan_list=
              | |   |   |   | +-GraphNodeScan
              | |   |   |   | | +-column_list=[$element_table.$element15#78]
              | |   |   |   | | +-label_expr=
              | |   |   |   | | | +-GraphLabelNaryExpr
              | |   |   |   | | |   +-op=OR
              | |   |   |   | | |   +-operand_list=
              | |   |   |   | | |     +-GraphWildCardLabel
              | |   |   |   | | |     +-GraphLabelNaryExpr
              | |   |   |   | | |       +-op=NOT
              | |   |   |   | | |       +-operand_list=
              | |   |   |   | | |         +-GraphWildCardLabel
              | |   |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   |   | +-GraphEdgeScan
              | |   |   |   | | +-column_list=[$element_table.d#79]
              | |   |   |   | | +-label_expr=
              | |   |   |   | | | +-GraphLabelNaryExpr
              | |   |   |   | | |   +-op=OR
              | |   |   |   | | |   +-operand_list=
              | |   |   |   | | |     +-GraphWildCardLabel
              | |   |   |   | | |     +-GraphLabelNaryExpr
              | |   |   |   | | |       +-op=NOT
              | |   |   |   | | |       +-operand_list=
              | |   |   |   | | |         +-GraphWildCardLabel
              | |   |   |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   |   |   | | +-orientation=RIGHT
              | |   |   |   | | +-cost_expr=
              | |   |   |   | |   +-Literal(type=DOUBLE, value=1.4)
              | |   |   |   | +-GraphNodeScan
              | |   |   |   |   +-column_list=[$element_table.$element16#80]
              | |   |   |   |   +-label_expr=
              | |   |   |   |   | +-GraphLabelNaryExpr
              | |   |   |   |   |   +-op=OR
              | |   |   |   |   |   +-operand_list=
              | |   |   |   |   |     +-GraphWildCardLabel
              | |   |   |   |   |     +-GraphLabelNaryExpr
              | |   |   |   |   |       +-op=NOT
              | |   |   |   |   |       +-operand_list=
              | |   |   |   |   |         +-GraphWildCardLabel
              | |   |   |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   |   +-path=
              | |   |   |   | +-ColumnHolder(column=$graph_table.$path#81)
              | |   |   |   +-head=$path_scan.$head#85
              | |   |   |   +-tail=$path_scan.$tail#86
              | |   |   |   +-quantifier=
              | |   |   |   | +-GraphPathPatternQuantifier
              | |   |   |   |   +-lower_bound=
              | |   |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   |   +-upper_bound=
              | |   |   |   |     +-Literal(type=INT64, value=2)
              | |   |   |   +-group_variable_list=
              | |   |   |   | +-GraphMakeArrayVariable(element=$element_table.$element15#78, array=$element_table.$element15#82)
              | |   |   |   | +-GraphMakeArrayVariable(element=$element_table.d#79, array=$element_table.d#83)
              | |   |   |   | +-GraphMakeArrayVariable(element=$element_table.$element16#80, array=$element_table.$element16#84)
              | |   |   |   +-path_cost=
              | |   |   |     +-GraphPathCost(cost_supertype=DOUBLE)
              | |   |   +-path=
              | |   |   | +-ColumnHolder(column=$graph_table.$path#87)
              | |   |   +-head=$element_table.c#77
              | |   |   +-tail=$path_scan.$tail#86
              | |   |   +-path_cost=
              | |   |     +-GraphPathCost(cost_supertype=DOUBLE)
              | |   +-path=
              | |   | +-ColumnHolder(column=$graph_table.r#88)
              | |   +-head=$element_table.a#66
              | |   +-tail=$path_scan.$tail#86
              | |   +-search_prefix=
              | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
              | |   +-path_cost=
              | |     +-GraphPathCost(cost_supertype=DOUBLE)
              | +-filter_expr=
              | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
              | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#12)
              | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#66)
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.col#89]
                +-expr_list=
                | +-col#89 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.a#12, $graph_table.p#22, $graph_table.q#42, $element_table.c#77, $graph_table.r#88])
==

# COST is complex expression including subquery expr
GRAPH aml
MATCH CHEAPEST 3 -[e cost (select key from KeyValue limit 1) + 20]->{1,3}
RETURN 1 as col
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#21 AS col [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.col#21]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.col#21]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#21]
            +-scan_list=
              +-GraphScan
              | +-column_list=$path_scan.[$head#19, $tail#20]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$path_scan.[$head#19, $tail#20]
              | |   +-input_scan_list=
              | |   | +-GraphPathScan
              | |   |   +-column_list=$path_scan.[$head#19, $tail#20]
              | |   |   +-input_scan_list=
              | |   |   | +-GraphNodeScan
              | |   |   | | +-column_list=[$element_table.$element3#11]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   | +-GraphEdgeScan
              | |   |   | | +-column_list=[$element_table.e#12]
              | |   |   | | +-label_expr=
              | |   |   | | | +-GraphLabelNaryExpr
              | |   |   | | |   +-op=OR
              | |   |   | | |   +-operand_list=
              | |   |   | | |     +-GraphWildCardLabel
              | |   |   | | |     +-GraphLabelNaryExpr
              | |   |   | | |       +-op=NOT
              | |   |   | | |       +-operand_list=
              | |   |   | | |         +-GraphWildCardLabel
              | |   |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   |   | | +-orientation=RIGHT
              | |   |   | | +-cost_expr=
              | |   |   | |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              | |   |   | |     +-SubqueryExpr
              | |   |   | |     | +-type=INT64
              | |   |   | |     | +-subquery_type=SCALAR
              | |   |   | |     | +-subquery=
              | |   |   | |     |   +-LimitOffsetScan
              | |   |   | |     |     +-column_list=[KeyValue.Key#13]
              | |   |   | |     |     +-input_scan=
              | |   |   | |     |     | +-ProjectScan
              | |   |   | |     |     |   +-column_list=[KeyValue.Key#13]
              | |   |   | |     |     |   +-input_scan=
              | |   |   | |     |     |     +-TableScan(column_list=[KeyValue.Key#13], table=KeyValue, column_index_list=[0])
              | |   |   | |     |     +-limit=
              | |   |   | |     |       +-Literal(type=INT64, value=1)
              | |   |   | |     +-Literal(type=INT64, value=20)
              | |   |   | +-GraphNodeScan
              | |   |   |   +-column_list=[$element_table.$element4#15]
              | |   |   |   +-label_expr=
              | |   |   |   | +-GraphLabelNaryExpr
              | |   |   |   |   +-op=OR
              | |   |   |   |   +-operand_list=
              | |   |   |   |     +-GraphWildCardLabel
              | |   |   |   |     +-GraphLabelNaryExpr
              | |   |   |   |       +-op=NOT
              | |   |   |   |       +-operand_list=
              | |   |   |   |         +-GraphWildCardLabel
              | |   |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   |   +-head=$path_scan.$head#19
              | |   |   +-tail=$path_scan.$tail#20
              | |   |   +-quantifier=
              | |   |   | +-GraphPathPatternQuantifier
              | |   |   |   +-lower_bound=
              | |   |   |   | +-Literal(type=INT64, value=1)
              | |   |   |   +-upper_bound=
              | |   |   |     +-Literal(type=INT64, value=3)
              | |   |   +-group_variable_list=
              | |   |   | +-GraphMakeArrayVariable(element=$element_table.$element3#11, array=$element_table.$element3#16)
              | |   |   | +-GraphMakeArrayVariable(element=$element_table.e#12, array=$element_table.e#17)
              | |   |   | +-GraphMakeArrayVariable(element=$element_table.$element4#15, array=$element_table.$element4#18)
              | |   |   +-path_cost=
              | |   |     +-GraphPathCost(cost_supertype=INT64)
              | |   +-head=$path_scan.$head#19
              | |   +-tail=$path_scan.$tail#20
              | |   +-search_prefix=
              | |   | +-GraphPathSearchPrefix
              | |   |   +-type=CHEAPEST
              | |   |   +-path_count=
              | |   |     +-Literal(type=INT64, value=3)
              | |   +-path_cost=
              | |     +-GraphPathCost(cost_supertype=INT64)
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.col#21]
                +-expr_list=
                | +-col#21 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan
==

[no_run_sqlbuilder]
# COST is a GQL value subquery which itself defines costs
GRAPH aml
MATCH CHEAPEST 1 -[e cost VALUE {GRAPH aml MATCH ANY CHEAPEST -[e2 {accountId: 1} cost e2.amount]-> RETURN 1 as col}]->
RETURN 1 as col
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#21 AS col [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.col#21]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.col#21]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#21]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[$element3#11, e#12, $element4#20]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[$element3#11, e#12, $element4#20]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.$element3#11]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.e#12]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=RIGHT
              | |   | | +-cost_expr=
              | |   | |   +-SubqueryExpr
              | |   | |     +-type=INT64
              | |   | |     +-subquery_type=SCALAR
              | |   | |     +-subquery=
              | |   | |       +-GraphTableScan
              | |   | |         +-column_list=[$graph_table.col#19]
              | |   | |         +-property_graph=aml
              | |   | |         +-input_scan=
              | |   | |           +-GraphLinearScan
              | |   | |             +-column_list=[$graph_table.col#19]
              | |   | |             +-scan_list=
              | |   | |               +-GraphLinearScan
              | |   | |                 +-column_list=[$graph_table.col#19]
              | |   | |                 +-scan_list=
              | |   | |                   +-GraphScan
              | |   | |                   | +-column_list=$element_table.[$element3#16, e2#17, $element4#18]
              | |   | |                   | +-input_scan_list=
              | |   | |                   | | +-GraphPathScan
              | |   | |                   | |   +-column_list=$element_table.[$element3#16, e2#17, $element4#18]
              | |   | |                   | |   +-input_scan_list=
              | |   | |                   | |   | +-GraphNodeScan
              | |   | |                   | |   | | +-column_list=[$element_table.$element3#16]
              | |   | |                   | |   | | +-label_expr=
              | |   | |                   | |   | | | +-GraphLabelNaryExpr
              | |   | |                   | |   | | |   +-op=OR
              | |   | |                   | |   | | |   +-operand_list=
              | |   | |                   | |   | | |     +-GraphWildCardLabel
              | |   | |                   | |   | | |     +-GraphLabelNaryExpr
              | |   | |                   | |   | | |       +-op=NOT
              | |   | |                   | |   | | |       +-operand_list=
              | |   | |                   | |   | | |         +-GraphWildCardLabel
              | |   | |                   | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | |                   | |   | +-GraphEdgeScan
              | |   | |                   | |   | | +-column_list=[$element_table.e2#17]
              | |   | |                   | |   | | +-filter_expr=
              | |   | |                   | |   | | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
              | |   | |                   | |   | | |   +-GraphGetElementProperty
              | |   | |                   | |   | | |   | +-type=INT64
              | |   | |                   | |   | | |   | +-expr=
              | |   | |                   | |   | | |   | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e2#17)
              | |   | |                   | |   | | |   | +-property=accountId(INT64)
              | |   | |                   | |   | | |   +-Literal(type=INT64, value=1)
              | |   | |                   | |   | | +-label_expr=
              | |   | |                   | |   | | | +-GraphLabelNaryExpr
              | |   | |                   | |   | | |   +-op=OR
              | |   | |                   | |   | | |   +-operand_list=
              | |   | |                   | |   | | |     +-GraphWildCardLabel
              | |   | |                   | |   | | |     +-GraphLabelNaryExpr
              | |   | |                   | |   | | |       +-op=NOT
              | |   | |                   | |   | | |       +-operand_list=
              | |   | |                   | |   | | |         +-GraphWildCardLabel
              | |   | |                   | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | |                   | |   | | +-orientation=RIGHT
              | |   | |                   | |   | | +-cost_expr=
              | |   | |                   | |   | |   +-GraphGetElementProperty
              | |   | |                   | |   | |     +-type=UINT64
              | |   | |                   | |   | |     +-expr=
              | |   | |                   | |   | |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e2#17)
              | |   | |                   | |   | |     +-property=amount(UINT64)
              | |   | |                   | |   | +-GraphNodeScan
              | |   | |                   | |   |   +-column_list=[$element_table.$element4#18]
              | |   | |                   | |   |   +-label_expr=
              | |   | |                   | |   |   | +-GraphLabelNaryExpr
              | |   | |                   | |   |   |   +-op=OR
              | |   | |                   | |   |   |   +-operand_list=
              | |   | |                   | |   |   |     +-GraphWildCardLabel
              | |   | |                   | |   |   |     +-GraphLabelNaryExpr
              | |   | |                   | |   |   |       +-op=NOT
              | |   | |                   | |   |   |       +-operand_list=
              | |   | |                   | |   |   |         +-GraphWildCardLabel
              | |   | |                   | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | |                   | |   +-head=$element_table.$element3#16
              | |   | |                   | |   +-tail=$element_table.$element4#18
              | |   | |                   | |   +-search_prefix=
              | |   | |                   | |   | +-GraphPathSearchPrefix(type=CHEAPEST)
              | |   | |                   | |   +-path_cost=
              | |   | |                   | |     +-GraphPathCost(cost_supertype=UINT64)
              | |   | |                   | +-input_scan=
              | |   | |                   |   +-SingleRowScan
              | |   | |                   +-ProjectScan
              | |   | |                     +-column_list=[$graph_table.col#19]
              | |   | |                     +-expr_list=
              | |   | |                     | +-col#19 := Literal(type=INT64, value=1)
              | |   | |                     +-input_scan=
              | |   | |                       +-GraphRefScan(column_list=$element_table.[$element3#16, e2#17, $element4#18])
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.$element4#20]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.$element3#11
              | |   +-tail=$element_table.$element4#20
              | |   +-search_prefix=
              | |   | +-GraphPathSearchPrefix
              | |   |   +-type=CHEAPEST
              | |   |   +-path_count=
              | |   |     +-Literal(type=INT64, value=1)
              | |   +-path_cost=
              | |     +-GraphPathCost(cost_supertype=INT64)
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.col#21]
                +-expr_list=
                | +-col#21 := Literal(type=INT64, value=1)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[$element3#11, e#12, $element4#20])
==

[language_features=NONE,+V_1_4_SQL_GRAPH,+V_1_4_SQL_GRAPH_ADVANCED_QUERY,+V_1_4_SQL_GRAPH_PATH_TYPE,+V_1_4_SQL_GRAPH_CHEAPEST_PATH,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
GRAPH aml
MATCH (n), -[e COST 1]-
RETURN n.id as col
--
QueryStmt
+-output_column_list=
| +-$graph_table.col#8 AS col [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.col#8]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.col#8]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.col#8]
            +-scan_list=
              +-GraphScan
              | +-column_list=$element_table.[n#1, $element3#5, e#6, $element4#7]
              | +-input_scan_list=
              | | +-GraphPathScan
              | | | +-column_list=[$element_table.n#1]
              | | | +-input_scan_list=
              | | | | +-GraphNodeScan
              | | | |   +-column_list=[$element_table.n#1]
              | | | |   +-label_expr=
              | | | |   | +-GraphLabelNaryExpr
              | | | |   |   +-op=OR
              | | | |   |   +-operand_list=
              | | | |   |     +-GraphWildCardLabel
              | | | |   |     +-GraphLabelNaryExpr
              | | | |   |       +-op=NOT
              | | | |   |       +-operand_list=
              | | | |   |         +-GraphWildCardLabel
              | | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | | | +-head=$element_table.n#1
              | | | +-tail=$element_table.n#1
              | | +-GraphPathScan
              | |   +-column_list=$element_table.[$element3#5, e#6, $element4#7]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   | | +-column_list=[$element_table.$element3#5]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   | +-GraphEdgeScan
              | |   | | +-column_list=[$element_table.e#6]
              | |   | | +-label_expr=
              | |   | | | +-GraphLabelNaryExpr
              | |   | | |   +-op=OR
              | |   | | |   +-operand_list=
              | |   | | |     +-GraphWildCardLabel
              | |   | | |     +-GraphLabelNaryExpr
              | |   | | |       +-op=NOT
              | |   | | |       +-operand_list=
              | |   | | |         +-GraphWildCardLabel
              | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
              | |   | | +-orientation=ANY
              | |   | | +-cost_expr=
              | |   | |   +-Literal(type=INT64, value=1)
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.$element4#7]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.$element3#5
              | |   +-tail=$element_table.$element4#7
              | |   +-path_cost=
              | |     +-GraphPathCost(cost_supertype=INT64)
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.col#8]
                +-expr_list=
                | +-col#8 :=
                |   +-GraphGetElementProperty
                |     +-type=INT64
                |     +-expr=
                |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                |     +-property=id(INT64)
                +-input_scan=
                  +-GraphRefScan(column_list=$element_table.[n#1, $element3#5, e#6, $element4#7])
