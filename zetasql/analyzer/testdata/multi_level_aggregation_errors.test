# Test file for multi-level aggregate queries that fail because the query is
# invalid.
[default language_features=MAXIMUM,+MULTILEVEL_AGGREGATION,+WITH_GROUP_ROWS,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ANALYTIC_FUNCTIONS,+QUALIFY,+GROUPING_BUILTIN,+GROUP_BY_STRUCT,+ENFORCE_CONDITIONAL_EVALUATION,+GROUPING_SETS,+GROUP_BY_ROLLUP,+PIVOT,+CHAINED_FUNCTION_CALLS]
[default show_sqlbuilder_output]

# GROUP BY modifier not supported on scalar functions.
SELECT
  ABS(ANY_VALUE(int64) GROUP BY string {{HAVING MAX(INT64) > 0|}})
FROM SimpleTypes;
--
ALTERNATION GROUP: HAVING MAX(INT64) > 0
--
ERROR: GROUP BY in arguments is not supported on scalar functions [at 3:24]
  ABS(ANY_VALUE(int64) GROUP BY string HAVING MAX(INT64) > 0)
                       ^
--
ALTERNATION GROUP: <empty>
--
ERROR: GROUP BY in arguments is not supported on scalar functions [at 3:24]
  ABS(ANY_VALUE(int64) GROUP BY string )
                       ^
==

# Display appropriate error message when attempting to group by an expression
# containing GROUP BY modifiers.
SELECT
  ABS(ANY_VALUE(int64) GROUP BY string)
FROM SimpleTypes
GROUP BY 1
--
ERROR: Column 1 contains a GROUP ROWS subquery or a GROUP BY modifier, which is not allowed in GROUP BY [at 4:10]
GROUP BY 1
         ^
==

# Multi-level aggregation fails when language feature is not enabled.
[language_features=NONE]
SELECT
  SUM(ANY_VALUE(int64) GROUP BY string)
FROM SimpleTypes;
--
ERROR: Multi-level aggregation is not yet supported. [at 2:24]
  SUM(ANY_VALUE(int64) GROUP BY string)
                       ^
==

# GROUP BY modifier must be specified when invoking a multi-level aggregate expr
SELECT
  SUM(ANY_VALUE(int64))
FROM SimpleTypes;
--
ERROR: Multi-level aggregation requires the enclosing aggregate function to have one or more GROUP BY modifiers. [at 2:3]
  SUM(ANY_VALUE(int64))
  ^
==

# GROUP BY modifier must be specified when invoking a multi-level aggregate expr
# In this case, SUM is missing a GROUP BY modifier (ANY_VALUE has one).
SELECT
  SUM(
    ANY_VALUE(AVG(int64) GROUP BY bool)
  )
FROM SimpleTypes;
--
ERROR: Multi-level aggregation requires the enclosing aggregate function to have one or more GROUP BY modifiers. [at 2:3]
  SUM(
  ^
==

# Replicate previous error in chained call syntax.  If this was allowed,
# it would show the error location points at SUM.
SELECT
  (int64).AVG().ANY_VALUE(GROUP BY bool).SUM()
FROM SimpleTypes;
--
ERROR: Chained function call cannot use multi-level aggregation [at 2:17]
  (int64).AVG().ANY_VALUE(GROUP BY bool).SUM()
                ^
==

# GROUP BY modifier must be specified when invoking a multi-level aggregate expr
# In this case, ANY_VALUE is missing a GROUP BY modifier (SUM has one).
SELECT
  SUM(
    ANY_VALUE(AVG(int64))
  GROUP BY bool)
FROM SimpleTypes;
--
ERROR: Multi-level aggregation requires the enclosing aggregate function to have one or more GROUP BY modifiers. [at 3:5]
    ANY_VALUE(AVG(int64))
    ^
==

==

# GROUP BY modifier must be a groupable type.
SELECT
  SUM(ANY_VALUE(int64) GROUP BY json)
FROM SimpleTypes;
--
ERROR: GROUP BY modifier has type JSON, which is not groupable. [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY json)
                                ^
==

# GROUP BY modifier cannot contain an aggregate expression
SELECT
  SUM(ANY_VALUE(int64) GROUP BY SUM(double))
FROM SimpleTypes;
--
ERROR: Aggregate function SUM not allowed in GROUP BY inside aggregate [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY SUM(double))
                                ^
==

# GROUP BY modifier cannot contain an aggregate expression
SELECT
  SUM(ANY_VALUE(int64) GROUP BY GROUPING(double))
FROM SimpleTypes
GROUP BY double;
--
ERROR: Aggregate function GROUPING not allowed in GROUP BY inside aggregate [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY GROUPING(double))
                                ^
==

# GROUP BY modifier cannot contain an analytic expression
SELECT
  SUM(ANY_VALUE(int64) GROUP BY SUM(double) OVER ())
FROM SimpleTypes;
--
ERROR: Analytic function not allowed in GROUP BY inside aggregate [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY SUM(double) OVER ())
                                ^
==

# GROUP BY modifier cannot contain an analytic expression
SELECT
  SUM(ANY_VALUE(int64) GROUP BY FIRST_VALUE(double) OVER ())
FROM SimpleTypes;
--
ERROR: Analytic function not allowed in GROUP BY inside aggregate [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY FIRST_VALUE(double) OVER ())
                                ^
==

# GROUP BY modifier cannot be used with HAVING modifier
SELECT
  SUM(ANY_VALUE(int64) HAVING {{MAX|MIN}} double GROUP BY double)
FROM SimpleTypes;
--
ALTERNATION GROUP: MAX
--
ERROR: GROUP BY cannot be used with a HAVING MAX/MIN modifier. [at 2:42]
  SUM(ANY_VALUE(int64) HAVING MAX double GROUP BY double)
                                         ^
--
ALTERNATION GROUP: MIN
--
ERROR: GROUP BY cannot be used with a HAVING MAX/MIN modifier. [at 2:42]
  SUM(ANY_VALUE(int64) HAVING MIN double GROUP BY double)
                                         ^
==

# Analytic expressions cannot be arguments for a multi-level aggregate function
SELECT
  SUM(ANY_VALUE(int64) OVER() GROUP BY double)
FROM SimpleTypes;
--
ERROR: Analytic function not allowed in multi-level aggregate [at 2:7]
  SUM(ANY_VALUE(int64) OVER() GROUP BY double)
      ^
==

# Aliases disallowed for arguments to multi-level aggregate functions
SELECT
  SUM(
    {{ANY_VALUE(int64) AS alias| double + double AS alias}}
  GROUP BY double)
FROM SimpleTypes;
--
ALTERNATION GROUP: ANY_VALUE(int64) AS alias
--
ERROR: Unexpected function call argument alias found at SUM [at 3:22]
    ANY_VALUE(int64) AS alias
                     ^
--
ALTERNATION GROUP:  double + double AS alias
--
ERROR: Unexpected function call argument alias found at SUM [at 3:22]
     double + double AS alias
                     ^
==

# GROUP BY modifier cannot use ordinals
SELECT
  SUM(ANY_VALUE(int64) GROUP BY 1)
FROM SimpleTypes
GROUP BY bool
--
ERROR: GROUP BY modifiers cannot specify ordinals. [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY 1)
                                ^
==

# GROUP BY modifier cannot use NULL
SELECT
  SUM(ANY_VALUE(int64) GROUP BY NULL)
FROM SimpleTypes
GROUP BY bool
--
ERROR: GROUP BY modifiers cannot be literal values. [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY NULL)
                                ^
==

# GROUP BY modifier cannot use an empty group
SELECT
  SUM(ANY_VALUE(int64) GROUP BY ())
FROM SimpleTypes
--
ERROR: GROUP BY () is not supported inside an aggregate function. [at 2:33]
  SUM(ANY_VALUE(int64) GROUP BY ())
                                ^
==

# GROUP BY ALL, ROLLUP, CUBE, GROUPING SETs not supported as a GROUP BY modifier
SELECT
  SUM(ANY_VALUE(int64) GROUP BY
   {{ALL|ROLLUP(bool, double)|CUBE(bool, double)|GROUPING SETS(bool, double)}}
  )
FROM SimpleTypes;
--
ALTERNATION GROUP: ALL
--
ERROR: Syntax error: Unexpected keyword ALL [at 3:4]
   ALL
   ^
--
ALTERNATION GROUP: ROLLUP(bool, double)
--
ERROR: GROUP BY ROLLUP is not supported inside an aggregate function. [at 3:4]
   ROLLUP(bool, double)
   ^
--
ALTERNATION GROUP: CUBE(bool, double)
--
ERROR: GROUP BY CUBE is not supported inside an aggregate function. [at 3:4]
   CUBE(bool, double)
   ^
--
ALTERNATION GROUP: GROUPING SETS(bool, double)
--
ERROR: GROUP BY GROUPING SETS is not supported inside an aggregate function. [at 3:4]
   GROUPING SETS(bool, double)
   ^
==

# GROUP AND ORDER BY is only supported in pipes.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+PIPES]
SELECT
  SUM(ANY_VALUE(int64) GROUP AND ORDER BY bool)
FROM SimpleTypes;
--
ERROR: Syntax error: Expected @ for hint or keyword BY but got keyword AND [at 2:30]
  SUM(ANY_VALUE(int64) GROUP AND ORDER BY bool)
                             ^
==

# GROUP BY can only support order specification in in pipes.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+PIPES]
SELECT
  SUM(ANY_VALUE(int64) GROUP BY double ASC)
FROM SimpleTypes;
--
ERROR: Syntax error: Expected ")" but got keyword ASC [at 2:40]
  SUM(ANY_VALUE(int64) GROUP BY double ASC)
                                       ^
==

# GROUP BY modifiers cannot have aliases
[language_features=NONE,+MULTILEVEL_AGGREGATION,+PIPES]
SELECT
  SUM(ANY_VALUE(int64) GROUP BY bool AS some_alias)
FROM SimpleTypes;
--
ERROR: Syntax error: Expected ")" but got keyword AS [at 2:38]
  SUM(ANY_VALUE(int64) GROUP BY bool AS some_alias)
                                     ^
==

# GROUP BY modifiers not supported on analytic functions.
SELECT
  SUM(ANY_VALUE(int64) GROUP BY bool {{HAVING MAX(int64) > 0|}}) OVER ()
FROM SimpleTypes;
--
ALTERNATION GROUP: HAVING MAX(int64) > 0
--
ERROR: GROUP BY modifiers not supported on analytic function calls. [at 2:3]
  SUM(ANY_VALUE(int64) GROUP BY bool HAVING MAX(int64) > 0) OVER ()
  ^
--
ALTERNATION GROUP: <empty>
--
ERROR: GROUP BY modifiers not supported on analytic function calls. [at 2:3]
  SUM(ANY_VALUE(int64) GROUP BY bool ) OVER ()
  ^
==

# GROUP BY modifiers not supported on analytic functions WITH GROUP ROWS
SELECT
  SUM(ANY_VALUE(X) GROUP BY bool) WITH GROUP ROWS(
    SELECT int64 AS X FROM GROUP_ROWS()
  ) OVER ()
FROM SimpleTypes;
--
ERROR: GROUP BY modifiers not supported on analytic function calls. [at 2:3]
  SUM(ANY_VALUE(X) GROUP BY bool) WITH GROUP ROWS(
  ^
==

# `int64` is not a grouping key within the SUM(...) aggregate function.
SELECT
  SUM(int64 + ANY_VALUE(int64) GROUP BY bool)
FROM SimpleTypes;
--
ERROR: multi-level aggregate expression references column int64 which is neither grouped nor aggregated [at 2:7]
  SUM(int64 + ANY_VALUE(int64) GROUP BY bool)
      ^
==

# `doubly_nested_struct.e` is not a grouping key within the SUM(...) aggregate
# function.
SELECT
  SUM(doubly_nested_struct.e + key GROUP BY key)
FROM DoublyNestedStructTable
GROUP BY {{doubly_nested_struct.f|doubly_nested_struct.f.c|doubly_nested_struct.f.d}};
--
ERROR: multi-level aggregate expression references doubly_nested_struct.e which is neither grouped nor aggregated [at 2:7]
  SUM(doubly_nested_struct.e + key GROUP BY key)
      ^
==

# `doubly_nested_struct.f.d.a` is not a grouping key within the SUM(...)
# aggregate function (it is within the MIN(...) aggregate function though)
SELECT
  SUM(
    MIN(doubly_nested_struct.f.d.a + key GROUP BY doubly_nested_struct.f.d) +
    doubly_nested_struct.f.d.a
  GROUP BY key)
FROM DoublyNestedStructTable
GROUP BY doubly_nested_struct.f.c;
--
ERROR: multi-level aggregate expression references doubly_nested_struct.f.d.a which is neither grouped nor aggregated [at 4:5]
    doubly_nested_struct.f.d.a
    ^
==

# ORDER BY clause cannot use ordinals
SELECT
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY 1)
FROM SimpleTypes;
--
ERROR: Aggregate functions do not allow ORDER BY by index in arguments [at 2:45]
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY 1)
                                            ^
==

# ORDER BY clause cannot reference pre-grouping columns.
SELECT
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY int64)
FROM SimpleTypes;
--
ERROR: multi-level aggregate expression references column int64 which is neither grouped nor aggregated [at 2:54]
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY int64)
                                                     ^
==

# ORDER BY clause cannot use expressions (even if they only reference
# post-grouping columns).
SELECT
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY int32 + int32)
FROM SimpleTypes;
--
ERROR: ORDER BY argument is neither an aggregate function nor a grouping key. [at 2:54]
  ARRAY_AGG(ANY_VALUE(int64) GROUP BY int32 ORDER BY int32 + int32)
                                                     ^
==

# ORDER BY clause cannot use expressions (even if they only reference
# post-grouping columns).
SELECT
  ARRAY_AGG(
    STRING_AGG(
      string
      GROUP BY string
      ORDER BY CONCAT(string, string)
    )
    GROUP BY int64
  )
FROM SimpleTypes;
--
ERROR: ORDER BY argument is neither an aggregate function nor a grouping key. [at 6:16]
      ORDER BY CONCAT(string, string)
               ^
==

# `doubly_nested_struct.e` is not visible post-grouping, and so cannot be
# referenced in the ORDER BY clause.
SELECT
  ARRAY_AGG(key GROUP BY key ORDER BY doubly_nested_struct.e)
FROM DoublyNestedStructTable
GROUP BY {{doubly_nested_struct.f|doubly_nested_struct.f.c|doubly_nested_struct.f.d}};
--
ERROR: multi-level aggregate expression references doubly_nested_struct.e which is neither grouped nor aggregated [at 2:39]
  ARRAY_AGG(key GROUP BY key ORDER BY doubly_nested_struct.e)
                                      ^
==

# `doubly_nested_struct.f.d.a` is not visible post-grouping for the
# ARRAY_AGG(...) aggregate function (it is within the MIN(...) aggregate
# function though)
SELECT
  ARRAY_AGG(
    MIN(doubly_nested_struct.f.d.a + key GROUP BY doubly_nested_struct.f.d) +
    key
  GROUP BY key
  ORDER BY doubly_nested_struct.f.d.a)
FROM DoublyNestedStructTable
GROUP BY doubly_nested_struct.f.c;
--
ERROR: multi-level aggregate expression references doubly_nested_struct.f.d.a which is neither grouped nor aggregated [at 6:12]
  ORDER BY doubly_nested_struct.f.d.a)
           ^
==

# ORDER BY clause cannot use aggregation if GROUP BY modifiers are not specified
SELECT
  ARRAY_AGG(int64 ORDER BY SUM(int64))
FROM SimpleTypes;
--
ERROR: Multi-level aggregation requires the enclosing aggregate function to have one or more GROUP BY modifiers. [at 2:3]
  ARRAY_AGG(int64 ORDER BY SUM(int64))
  ^
==

# Grouping constness across correlated subqueries
SELECT
  SUM(1),
  (
    SELECT
      SUM(AVG(S2.double) + S1.int64 GROUP BY S1.string)
    FROM SimpleTypes AS S2
    GROUP BY S1.int64, S1.int32
  )
FROM SimpleTypes AS S1
GROUP BY S1.int64, S1.int32;
--
ERROR: GROUP BY inside aggregate expression references S1.string which is neither grouped nor aggregated [at 5:46]
      SUM(AVG(S2.double) + S1.int64 GROUP BY S1.string)
                                             ^
==

# GROUPING function cannot be a multi-level aggregate function.
SELECT
  GROUPING(string GROUP BY bool)
FROM SimpleTypes
GROUP BY {{string,int64|ROLLUP(string,int64)|CUBE(string,int64)|GROUPING SETS(string,int64)}}
--
ERROR: GROUPING Function  does not support GROUP BY modifiers [at 2:3]
  GROUPING(string GROUP BY bool)
  ^
==

# TODO: Improve the error message for the ROLLUP/CUBE/SETS
# alternation.
# GROUPING function cannot be used within a multi-level aggregate function.
SELECT
  MIN(GROUPING(string) GROUP BY bool)
FROM SimpleTypes
GROUP BY {{string,int64|ROLLUP(string,int64)|CUBE(string,int64)|GROUPING SETS(string,int64)}}
--
ALTERNATION GROUP: string,int64
--
ERROR: Multi-level aggregate function does not support GROUPING as a nested aggregate function. [at 2:3]
  MIN(GROUPING(string) GROUP BY bool)
  ^
--
ALTERNATION GROUPS:
    ROLLUP(string,int64)
    CUBE(string,int64)
    GROUPING SETS(string,int64)
--
ERROR: GROUPING must have an argument that exists within the group-by expression list. [at 2:7]
  MIN(GROUPING(string) GROUP BY bool)
      ^
==

# GROUPING function cannot be used within a multi-level aggregate function.
SELECT
  MIN(GROUPING(bool) GROUP BY bool)
FROM SimpleTypes
GROUP BY {{string,int64|ROLLUP(string,int64)|CUBE(string,int64)|GROUPING SETS(string,int64)}}
--
ERROR: Multi-level aggregate function does not support GROUPING as a nested aggregate function. [at 2:3]
  MIN(GROUPING(bool) GROUP BY bool)
  ^
==

# GROUPING function cannot be used within a multi-level aggregate function.
SELECT
  ARRAY_AGG(bool GROUP BY bool ORDER BY GROUPING(bool))
FROM SimpleTypes
GROUP BY {{string,int64|ROLLUP(string,int64)|CUBE(string,int64)|GROUPING SETS(string,int64)}};
--
ERROR: GROUPING function not allowed in ORDER BY modifier of a multi-level aggregate. [at 2:32]
  ARRAY_AGG(bool GROUP BY bool ORDER BY GROUPING(bool))
                               ^
==

# Multi-level aggregates in the HAVING clause cannot reference aggregate
# expression aliases from the SELECT list.
SELECT
  SUM(ANY_VALUE(int64) GROUP BY bool) AS multi_level_agg
FROM SimpleTypes
GROUP BY string
HAVING SUM(multi_level_agg GROUP BY int32) > 0
--
ERROR: Aggregations of aggregations are not allowed [at 5:12]
HAVING SUM(multi_level_agg GROUP BY int32) > 0
           ^
==

# Ensure that grouping-constness is checked for aggregate functions in the PIVOT
# clause.
SELECT *
FROM (
  SELECT int64, double, int32, string, bool, bytes FROM SimpleTypes
)
PIVOT(
  SUM(double GROUP BY int64) AS agg1
  FOR int64 IN (0, 1)
);
--
ERROR: multi-level aggregate expression references column double which is neither grouped nor aggregated [at 6:7]
  SUM(double GROUP BY int64) AS agg1
      ^
==

# Ensure that volatile grouping expressions are not considered grouping consts.
# ('KEYS.REWRAP_KEYSET' is a volatile function).
[language_features=NONE,+MULTILEVEL_AGGREGATION,+ENCRYPTION]
SELECT
  SUM(KEYS.REWRAP_KEYSET(string, string, bytes) + ANY_VALUE(int64) GROUP BY int32)
FROM SimpleTypes
GROUP BY KEYS.REWRAP_KEYSET(string, string, bytes)
--
ERROR: multi-level aggregate expression references column string which is neither grouped nor aggregated [at 2:26]
  SUM(KEYS.REWRAP_KEYSET(string, string, bytes) + ANY_VALUE(int64) GROUP BY i...
                         ^
==

# Regression test for b/379931737. Attempt to determine grouping expression
# equality for functions with lambda arguments.
[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+INLINE_LAMBDA_ARGUMENT,+MULTILEVEL_AGGREGATION,+ARRAY_FIND_FUNCTIONS]
SELECT
  ARRAY_AGG(
    1
    GROUP BY
      ARRAY_FIND(ARRAY_SLICE([1, 4, 4, 6], int64, int64+2), (a_4) -> true, 'FIRST'),
      SimpleTypes.bool
    ORDER BY
      ARRAY_FIND(ARRAY_SLICE([1, 4, 4, 6], int64, int64+3), (a_4) -> true, 'FIRST')
    LIMIT 3
  ) AS a_9,
FROM SimpleTypes
GROUP BY double;
--
ERROR: multi-level aggregate expression references column int64 which is neither grouped nor aggregated [at 8:44]
      ARRAY_FIND(ARRAY_SLICE([1, 4, 4, 6], int64, int64+3), (a_4) -> true, 'F...
                                           ^
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+CREATE_AGGREGATE_FUNCTION,+TEMPLATE_FUNCTIONS]

# Error: `VALUE1` is not a grouping-const.
CREATE AGGREGATE FUNCTION InvalidReferenceCase(value1 INT64, key INT64) AS (
  SUM(
    key + VALUE1
    GROUP BY key
  )
);
--
ERROR: multi-level aggregate expression references column VALUE1 which is neither grouped nor aggregated [at 4:11]
    key + VALUE1
          ^
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+CREATE_AGGREGATE_FUNCTION,+TEMPLATE_FUNCTIONS]

# Error: `value1` is not a grouping-const.
CREATE AGGREGATE FUNCTION InvalidUda(value1 {{INT64|ANY TYPE}}, key {{INT64|ANY TYPE}}) AS (
  SUM(
    key + value1
    GROUP BY key
  )
);
--
ALTERNATION GROUP: INT64,INT64
--
ERROR: multi-level aggregate expression references column value1 which is neither grouped nor aggregated [at 4:11]
    key + value1
          ^
--
ALTERNATION GROUP: INT64,ANY TYPE
--
CreateFunctionStmt(name_path=InvalidUda, return_type=STRUCT<>, argument_name_list=[value1, key], signature=(INT64 value1, ANY TYPE key) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(\n    key + value1\n    GROUP BY key\n  )")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidUda(value1 INT64, key ANY TYPE)
AS (
  SUM(key + value1
    GROUP BY key)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidUda(value1 INT64, key ANY TYPE)
AS (
  SUM(key + value1
    GROUP BY key)
);
--
ALTERNATION GROUP: ANY TYPE,INT64
--
CreateFunctionStmt(name_path=InvalidUda, return_type=STRUCT<>, argument_name_list=[value1, key], signature=(ANY TYPE value1, INT64 key) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(\n    key + value1\n    GROUP BY key\n  )")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidUda(value1 ANY TYPE, key INT64)
AS (
  SUM(key + value1
    GROUP BY key)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidUda(value1 ANY TYPE, key INT64)
AS (
  SUM(key + value1
    GROUP BY key)
);
--
ALTERNATION GROUP: ANY TYPE,ANY TYPE
--
CreateFunctionStmt(name_path=InvalidUda, return_type=STRUCT<>, argument_name_list=[value1, key], signature=(ANY TYPE value1, ANY TYPE key) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(\n    key + value1\n    GROUP BY key\n  )")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidUda(value1 ANY TYPE, key ANY TYPE)
AS (
  SUM(key + value1
    GROUP BY key)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidUda(value1 ANY TYPE, key ANY TYPE)
AS (
  SUM(key + value1
    GROUP BY key)
);
==

[language_features=NONE,+CREATE_AGGREGATE_FUNCTION]

# CREATE AGGREGATE FUNCTION with a multi-level aggregate expression returns an
# error if the feature MULTILEVEL_AGGREGATION is not enabled.
CREATE AGGREGATE FUNCTION MyFunc(x INT64) AS (
  SUM(ANY_VALUE(x) GROUP BY x)
);
--
ERROR: Multi-level aggregation is not yet supported. [at 4:20]
  SUM(ANY_VALUE(x) GROUP BY x)
                   ^
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+CREATE_AGGREGATE_FUNCTION]

CREATE AGGREGATE FUNCTION MyFunc(x INT64) AS (
  SUM(ANY_VALUE(x))
);
--
ERROR: Multi-level aggregation requires the enclosing aggregate function to have one or more GROUP BY modifiers. [at 2:3]
  SUM(ANY_VALUE(x))
  ^
==

# This only passes because the aggregate function is templated. Analysis of
# template functions will occur at invocation time.
[language_features=NONE,+CREATE_AGGREGATE_FUNCTION,+TEMPLATE_FUNCTIONS]
CREATE AGGREGATE FUNCTION WrappedMultiLevelAgg(x ANY TYPE) AS (
  SUM(x GROUP BY x)
);
--
CreateFunctionStmt(name_path=WrappedMultiLevelAgg, return_type=STRUCT<>, argument_name_list=[x], signature=(ANY TYPE x) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(x GROUP BY x)")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION WrappedMultiLevelAgg(x ANY TYPE)
AS (
  SUM(x
    GROUP BY x)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION WrappedMultiLevelAgg(x ANY TYPE)
AS (
  SUM(x
    GROUP BY x)
);
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+CREATE_AGGREGATE_FUNCTION,+TEMPLATE_FUNCTIONS]

# Error: `arr` is not a grouping-const, but  `value1` is.
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr {{ARRAY<INT64>|ANY TYPE}}, key {{INT64|ANY TYPE}}) AS (
  SUM(
    key + (SELECT key) + (SELECT SUM(a GROUP BY a) FROM UNNEST(arr) AS a)
    GROUP BY key
  )
);
--
ALTERNATION GROUP: ARRAY<INT64>,INT64
--
ERROR: UNNEST expression references column arr which is neither grouped nor aggregated [at 4:64]
    key + (SELECT key) + (SELECT SUM(a GROUP BY a) FROM UNNEST(arr) AS a)
                                                               ^
--
ALTERNATION GROUP: ARRAY<INT64>,ANY TYPE
--
CreateFunctionStmt(name_path=InvalidArrayAccess, return_type=STRUCT<>, argument_name_list=[arr, key], signature=(ARRAY<INT64> arr, ANY TYPE key) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(\n    key + (SELECT key) + (SELECT SUM(a GROUP BY a) FROM UNNEST(arr) AS a)\n    GROUP BY key\n  )")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr ARRAY< INT64 >, key ANY TYPE)
AS (
  SUM(key + (
      SELECT
        key
    ) + (
      SELECT
        SUM(a
          GROUP BY a)
      FROM
        UNNEST(arr) AS a
    )
    GROUP BY key)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr ARRAY< INT64 >, key ANY TYPE)
AS (
  SUM(key + (
      SELECT
        key
    ) + (
      SELECT
        SUM(a
          GROUP BY a)
      FROM
        UNNEST(arr) AS a
    )
    GROUP BY key)
);
--
ALTERNATION GROUP: ANY TYPE,INT64
--
CreateFunctionStmt(name_path=InvalidArrayAccess, return_type=STRUCT<>, argument_name_list=[arr, key], signature=(ANY TYPE arr, INT64 key) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(\n    key + (SELECT key) + (SELECT SUM(a GROUP BY a) FROM UNNEST(arr) AS a)\n    GROUP BY key\n  )")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr ANY TYPE, key INT64)
AS (
  SUM(key + (
      SELECT
        key
    ) + (
      SELECT
        SUM(a
          GROUP BY a)
      FROM
        UNNEST(arr) AS a
    )
    GROUP BY key)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr ANY TYPE, key INT64)
AS (
  SUM(key + (
      SELECT
        key
    ) + (
      SELECT
        SUM(a
          GROUP BY a)
      FROM
        UNNEST(arr) AS a
    )
    GROUP BY key)
);
--
ALTERNATION GROUP: ANY TYPE,ANY TYPE
--
CreateFunctionStmt(name_path=InvalidArrayAccess, return_type=STRUCT<>, argument_name_list=[arr, key], signature=(ANY TYPE arr, ANY TYPE key) -> ANY TYPE, is_aggregate=TRUE, language="SQL", code="SUM(\n    key + (SELECT key) + (SELECT SUM(a GROUP BY a) FROM UNNEST(arr) AS a)\n    GROUP BY key\n  )")

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr ANY TYPE, key ANY TYPE)
AS (
  SUM(key + (
      SELECT
        key
    ) + (
      SELECT
        SUM(a
          GROUP BY a)
      FROM
        UNNEST(arr) AS a
    )
    GROUP BY key)
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE AGGREGATE FUNCTION InvalidArrayAccess(arr ANY TYPE, key ANY TYPE)
AS (
  SUM(key + (
      SELECT
        key
    ) + (
      SELECT
        SUM(a
          GROUP BY a)
      FROM
        UNNEST(arr) AS a
    )
    GROUP BY key)
);
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+CREATE_AGGREGATE_FUNCTION]
CREATE AGGREGATE FUNCTION InvalidReferenceToUngroupedColumnInSubquery(value1 INT64, key INT64) AS (
  CORR(
    key,
    (SELECT key + value1)
    GROUP BY key
  )
);
--
ERROR: SELECT without FROM clause expression references column value1 which is neither grouped nor aggregated [at 4:19]
    (SELECT key + value1)
                  ^
==

[language_features=NONE,+MULTILEVEL_AGGREGATION,+CREATE_AGGREGATE_FUNCTION]
CREATE AGGREGATE FUNCTION InvalidComplexUda(value1 INT64, value2 INT64, key INT64) AS (
  CORR(
    key + CORR(key, value2 + MAX(value1) GROUP BY value2),
    AVG(
      value2 + MIN(value1)
      GROUP BY value2
    ) + (SELECT MAX(key))
    GROUP BY key
  )
);
--
ERROR: Aggregate function MAX not allowed in SELECT without FROM clause [at 7:17]
    ) + (SELECT MAX(key))
                ^
==

[language_features=NONE,+CREATE_AGGREGATE_FUNCTION,+MULTILEVEL_AGGREGATION,+INLINE_LAMBDA_ARGUMENT]
# `value1` cannot be referenced within lambda body since it is not a grouping
# key.
CREATE AGGREGATE FUNCTION InvalidReferenceToValue1(value1 INT64, key INT64) AS (
  ANY_VALUE(
    ARRAY_INCLUDES([1,2,3], e -> value1 > 3)
    GROUP BY key
  )
);
--
ERROR: No matching signature for function ARRAY_INCLUDES
  Argument types: ARRAY<INT64>, LAMBDA
  Signature: ARRAY_INCLUDES(ARRAY<T1>, T1)
    Argument 2: expected T1, found LAMBDA
  Signature: ARRAY_INCLUDES(ARRAY<T1>, FUNCTION<T1->BOOL>)
    Argument 2: failed to resolve lambda body, error: Lambda expression references column value1 which is neither grouped nor aggregated [at 5:5]
    ARRAY_INCLUDES([1,2,3], e -> value1 > 3)
    ^
==

[language_features=NONE,+CREATE_AGGREGATE_FUNCTION,+MULTILEVEL_AGGREGATION,+INLINE_LAMBDA_ARGUMENT,+WITH_EXPRESSION]
# `arg1` is not a grouping-const, and so is invalid to access.
CREATE AGGREGATE FUNCTION WithExprInvalidAccessingGroupingConst(key INT64, arg1 INT64)
RETURNS INT64 AS (
  SUM(
    WITH(key_times_two AS key * 2, key_times_two + arg1)
    GROUP BY key
  )
);
--
ERROR: WITH expression expression references column arg1 which is neither grouped nor aggregated [at 5:52]
    WITH(key_times_two AS key * 2, key_times_two + arg1)
                                                   ^
==

# GROUP BY on UDA is not supported in the built in aggregate function inliner
[language_features=NONE,+MULTILEVEL_AGGREGATION,+MULTILEVEL_AGGREGATION_ON_UDAS]
[enabled_ast_rewrites=ALL,-WITH_EXPR]
# GROUP BY on UDA is not supported by
SELECT
  SumOfAggregateArgs(MAX(int64) GROUP BY string)
FROM SimpleTypes;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#22 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#22]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#22]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        +-aggregate_list=
          +-$agg1#22 :=
            +-AggregateFunctionCall(Lazy_resolution_function:SumOfAggregateArgs(INT64 agg_arg) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$agg1#21)
              +-group_by_list=
              | +-$groupbymod#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)
              +-group_by_aggregate_list=
                +-$agg1#21 :=
                  +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  SumOfAggregateArgs(MAX(simpletypes_3.a_1)
    GROUP BY simpletypes_3.a_2) AS a_4
FROM
  (
    SELECT
      SimpleTypes.int64 AS a_1,
      SimpleTypes.string AS a_2
    FROM
      SimpleTypes
  ) AS simpletypes_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_1,
     SimpleTypes.string AS a_2
|> AS simpletypes_3
|> AGGREGATE
     SumOfAggregateArgs(MAX(simpletypes_3.a_1)
       GROUP BY simpletypes_3.a_2) AS a_4;

Rewrite ERROR: SQL function inliner cannot inline aggregate function Lazy_resolution_function:SumOfAggregateArgs with GROUP BY modifier
