[default language_features=MAXIMUM,+CORRESPONDING_FULL]
[default no_show_resolved_ast]
[default show_sqlbuilder_output]

# Basic STRICT.
SELECT 1 AS B, 4 AS A
UNION ALL STRICT CORRESPONDING
SELECT 2 AS a, 3 AS b
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  1 AS B,
  4 AS A
) UNION ALL STRICT CORRESPONDING(
SELECT
  2 AS A,
  3 AS B
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
SELECT
  1 AS B,
  4 AS A
) UNION ALL STRICT CORRESPONDING(
SELECT
  2 AS A,
  3 AS B
);
==

# Basic STRICT with multiple expressions.
SELECT int32, int64, float FROM SimpleTypes
UNION ALL STRICT CORRESPONDING
SELECT int64, float, int32 FROM SimpleTypes
UNION ALL STRICT CORRESPONDING
SELECT int64, int32, float FROM SimpleTypes
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS float
FROM
  SimpleTypes
) UNION ALL STRICT CORRESPONDING(
SELECT
  simpletypes_10.a_8 AS int64,
  simpletypes_10.a_9 AS float,
  simpletypes_10.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8,
      SimpleTypes.float AS a_9
    FROM
      SimpleTypes
  ) AS simpletypes_10
) UNION ALL STRICT CORRESPONDING(
SELECT
  simpletypes_14.a_12 AS int64,
  simpletypes_14.a_11 AS int32,
  simpletypes_14.a_13 AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_11,
      SimpleTypes.int64 AS a_12,
      SimpleTypes.float AS a_13
    FROM
      SimpleTypes
  ) AS simpletypes_14
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS int32,
     SimpleTypes.int64 AS int64,
     SimpleTypes.float AS float
) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_7,
     SimpleTypes.int64 AS a_8,
     SimpleTypes.float AS a_9
|> AS simpletypes_10
|> SELECT
     simpletypes_10.a_8 AS int64,
     simpletypes_10.a_9 AS float,
     simpletypes_10.a_7 AS int32
) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_11,
     SimpleTypes.int64 AS a_12,
     SimpleTypes.float AS a_13
|> AS simpletypes_14
|> SELECT
     simpletypes_14.a_12 AS int64,
     simpletypes_14.a_11 AS int32,
     simpletypes_14.a_13 AS float
);
==

# The edge case of SELECT DISTINCT is correctly handled.
[show_resolved_ast]
SELECT DISTINCT int32 AS a, int64, int32 AS b FROM SimpleTypes
UNION ALL STRICT CORRESPONDING
SELECT int32 AS b, int64, int64 AS a FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$union_all.a#41 AS a [INT64]
| +-$union_all.int64#42 AS int64 [INT64]
| +-$union_all.b#43 AS b [INT32]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[a#41, int64#42, b#43]
    +-op_type=UNION_ALL
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=[$union_all1_cast.int32#44, $distinct.int64#21, $distinct.int32#20]
    | | |   +-expr_list=
    | | |   | +-int32#44 :=
    | | |   |   +-Cast(INT32 -> INT64)
    | | |   |     +-ColumnRef(type=INT32, column=$distinct.int32#20)
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[int32#20, int64#21]
    | | |       +-input_scan=
    | | |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
    | | |       +-group_by_list=
    | | |         +-int32#20 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | | |         +-int64#21 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | | +-output_column_list=[$union_all1_cast.int32#44, $distinct.int64#21, $distinct.int32#20]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=SimpleTypes.[int64#23, int64#23, int32#22]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=SimpleTypes.[int32#22, int64#23, int64#23]
    |   |       +-input_scan=
    |   |         +-TableScan(column_list=SimpleTypes.[int32#22, int64#23], table=SimpleTypes, column_index_list=[0, 1])
    |   +-output_column_list=SimpleTypes.[int64#23, int64#23, int32#22]
    +-column_match_mode=CORRESPONDING

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  CAST(aggregatescan_9.a_7 AS INT64) AS a,
  aggregatescan_9.a_8 AS int64,
  aggregatescan_9.a_7 AS b
FROM
  (
    SELECT
      simpletypes_6.a_4 AS a_7,
      simpletypes_6.a_5 AS a_8
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_4,
          SimpleTypes.int64 AS a_5
        FROM
          SimpleTypes
      ) AS simpletypes_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) UNION ALL STRICT CORRESPONDING(
SELECT
  simpletypes_13.a_11 AS b,
  simpletypes_13.a_12 AS a,
  simpletypes_13.a_12 AS int64
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_11,
      SimpleTypes.int64 AS a_12
    FROM
      SimpleTypes
  ) AS simpletypes_13
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_4,
     SimpleTypes.int64 AS a_5
|> AS simpletypes_6
|> EXTEND
     simpletypes_6.a_4 AS a_7,
     simpletypes_6.a_5 AS a_8
|> AGGREGATE
   GROUP BY a_7, a_8
|> AS aggregatescan_9
|> SELECT
     CAST(aggregatescan_9.a_7 AS INT64) AS a,
     aggregatescan_9.a_8 AS int64,
     aggregatescan_9.a_7 AS b
) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_11,
     SimpleTypes.int64 AS a_12
|> AS simpletypes_13
|> SELECT
     simpletypes_13.a_11 AS b,
     simpletypes_13.a_12 AS a,
     simpletypes_13.a_12 AS int64
);
==

# Duplicate column ids in the first query. Alias order is preserved.
SELECT a AS col1, a AS col2, b AS col3, a AS col4
FROM (
  SELECT 1 AS a, 2 AS b
)
UNION ALL STRICT CORRESPONDING
SELECT 1 AS col4, 2 AS COL3, 3 AS COL2, 4 AS COL1

--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  projectscan_7.a_5 AS col1,
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col3,
  projectscan_7.a_5 AS col4
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
) UNION ALL STRICT CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3,
  3 AS col2,
  4 AS col1
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
SELECT
  1 AS a_5,
  2 AS a_6
|> AS projectscan_7
|> SELECT
     projectscan_7.a_5 AS col1,
     projectscan_7.a_5 AS col2,
     projectscan_7.a_6 AS col3,
     projectscan_7.a_5 AS col4
) UNION ALL STRICT CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3,
  3 AS col2,
  4 AS col1
);
==

# Duplicate column ids in the 2nd scan. Alias order is not guaranteed to be
# restored.
SELECT 1 AS a, 2 AS b
UNION ALL STRICT CORRESPONDING
SELECT col AS b, col AS a
FROM (
  SELECT 2 AS col
)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  1 AS a,
  2 AS b
) UNION ALL STRICT CORRESPONDING(
SELECT
  projectscan_6.a_5 AS a,
  projectscan_6.a_5 AS b
FROM
  (
    SELECT
      2 AS a_5
  ) AS projectscan_6
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
SELECT
  1 AS a,
  2 AS b
) UNION ALL STRICT CORRESPONDING(
SELECT
  2 AS a_5
|> AS projectscan_6
|> SELECT
     projectscan_6.a_5 AS a,
     projectscan_6.a_5 AS b
);
==

# SELECT DISTINCT: duplicate common columns in 2nd query.
[show_resolved_ast]
SELECT int64 AS a, int32 AS b, int32 AS c FROM SimpleTypes
STRICT EXCEPT DISTINCT CORRESPONDING
SELECT DISTINCT int64 AS A, int32 AS c, int32 AS b FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$except_distinct.a#41 AS a [INT64]
| +-$except_distinct.b#42 AS b [INT32]
| +-$except_distinct.c#43 AS c [INT32]
+-query=
  +-SetOperationScan
    +-column_list=$except_distinct.[a#41, b#42, c#43]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=SimpleTypes.[int64#2, int32#1, int32#1]
    | | |   +-input_scan=
    | | |     +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1], alias="STRICT")
    | | +-output_column_list=SimpleTypes.[int64#2, int32#1, int32#1]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$distinct.[int64#39, int32#40, int32#40]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-AggregateScan
    |   |       +-column_list=$distinct.[int64#39, int32#40]
    |   |       +-input_scan=
    |   |       | +-TableScan(column_list=SimpleTypes.[int32#20, int64#21], table=SimpleTypes, column_index_list=[0, 1])
    |   |       +-group_by_list=
    |   |         +-int64#39 := ColumnRef(type=INT64, column=SimpleTypes.int64#21)
    |   |         +-int32#40 := ColumnRef(type=INT32, column=SimpleTypes.int32#20)
    |   +-output_column_list=$distinct.[int64#39, int32#40, int32#40]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  simpletypes_6.a_5 AS a,
  simpletypes_6.a_4 AS b,
  simpletypes_6.a_4 AS c
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_4,
      SimpleTypes.int64 AS a_5
    FROM
      SimpleTypes
  ) AS simpletypes_6
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  aggregatescan_13.a_11 AS a,
  aggregatescan_13.a_12 AS b,
  aggregatescan_13.a_12 AS c
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_11,
      simpletypes_10.a_8 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_8,
          SimpleTypes.int64 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
    GROUP BY 1, 2
  ) AS aggregatescan_13
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_4,
     SimpleTypes.int64 AS a_5
|> AS simpletypes_6
|> SELECT
     simpletypes_6.a_5 AS a,
     simpletypes_6.a_4 AS b,
     simpletypes_6.a_4 AS c
) EXCEPT DISTINCT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_8,
     SimpleTypes.int64 AS a_9
|> AS simpletypes_10
|> EXTEND
     simpletypes_10.a_9 AS a_11,
     simpletypes_10.a_8 AS a_12
|> AGGREGATE
   GROUP BY a_11, a_12
|> AS aggregatescan_13
|> SELECT
     aggregatescan_13.a_11 AS a,
     aggregatescan_13.a_12 AS b,
     aggregatescan_13.a_12 AS c
);
==

# STRICT CORRESPONDING as an input to BY_POSITION
SELECT int32, int64 FROM SimpleTypes
UNION ALL (
  SELECT int32, int64 FROM SimpleTypes
  UNION ALL STRICT CORRESPONDING
  SELECT int64, int32 FROM SimpleTypes
)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64
FROM
  SimpleTypes
) UNION ALL((
SELECT
  SimpleTypes.int32 AS a_3,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
) UNION ALL STRICT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_4,
  simpletypes_9.a_7 AS a_3
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS int32,
     SimpleTypes.int64 AS int64
) UNION ALL((
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_3,
     SimpleTypes.int64 AS a_4
) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_7,
     SimpleTypes.int64 AS a_8
|> AS simpletypes_9
|> SELECT
     simpletypes_9.a_8 AS a_4,
     simpletypes_9.a_7 AS a_3
));
==

# STRICT CORRESPONDING as an input to BY_POSITION
(
  SELECT int64, int32 FROM SimpleTypes
  UNION ALL STRICT CORRESPONDING
  SELECT int32, int64 FROM SimpleTypes
)
UNION ALL
SELECT int32, int64 FROM SimpleTypes
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  setoperationscan_8.a_1 AS int64,
  CAST(setoperationscan_8.a_2 AS INT64) AS int32
FROM
  ((
    SELECT
      simpletypes_5.a_4 AS a_1,
      simpletypes_5.a_3 AS a_2
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_3,
          SimpleTypes.int64 AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
    ) UNION ALL STRICT CORRESPONDING(
    SELECT
      SimpleTypes.int32 AS a_2,
      SimpleTypes.int64 AS a_1
    FROM
      SimpleTypes
    )
  ) AS setoperationscan_8
) UNION ALL(
SELECT
  CAST(projectscan_12.a_10 AS INT64) AS a_13,
  projectscan_12.a_11 AS a_11
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_10,
      SimpleTypes.int64 AS a_11
    FROM
      SimpleTypes
  ) AS projectscan_12
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
((
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_3,
     SimpleTypes.int64 AS a_4
|> AS simpletypes_5
|> SELECT
     simpletypes_5.a_4 AS a_1,
     simpletypes_5.a_3 AS a_2
) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_2,
     SimpleTypes.int64 AS a_1
)
|> AS setoperationscan_8
|> SELECT
     setoperationscan_8.a_1 AS int64,
     CAST(setoperationscan_8.a_2 AS INT64) AS int32
) UNION ALL(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_10,
     SimpleTypes.int64 AS a_11
|> AS projectscan_12
|> SELECT
     CAST(projectscan_12.a_10 AS INT64) AS a_13,
     projectscan_12.a_11 AS a_11
);
==

# STRICT CORRESPONDING as an input to CORRESPONDING
SELECT int32 FROM SimpleTypes
UNION ALL CORRESPONDING (
  SELECT int32, INT64 FROM SimpleTypes
  STRICT UNION ALL CORRESPONDING
  SELECT int64, int32 FROM SimpleTypes
)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  SimpleTypes.int32 AS int32
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_4,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS int32
) UNION ALL CORRESPONDING((
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS int32,
     SimpleTypes.int64 AS a_4
) UNION ALL CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_7,
     SimpleTypes.int64 AS a_8
|> AS simpletypes_9
|> SELECT
     simpletypes_9.a_8 AS a_4,
     simpletypes_9.a_7 AS int32
));
==

# STRICT CORRESPONDING as an input to CORRESPONDING.
(
  SELECT int32, int64 FROM SimpleTypes
  STRICT UNION ALL CORRESPONDING
  SELECT int64, INT32 FROM SimpleTypes
)
UNION ALL STRICT CORRESPONDING
SELECT int32, int64 FROM SimpleTypes

--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS int64,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL STRICT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64
FROM
  SimpleTypes
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
((
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS int32,
     SimpleTypes.int64 AS int64
) UNION ALL CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_7,
     SimpleTypes.int64 AS a_8
|> AS simpletypes_9
|> SELECT
     simpletypes_9.a_8 AS int64,
     simpletypes_9.a_7 AS int32
)) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS int32,
     SimpleTypes.int64 AS int64
);
==

# BY_POSITION as an input to STRICT CORRESPONDING
(
  SELECT int32, int64 FROM SimpleTypes
  UNION ALL
  SELECT int64, int32 FROM SimpleTypes
)
UNION ALL STRICT CORRESPONDING
SELECT int64, int32 FROM SimpleTypes

--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
((
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  projectscan_5.a_4 AS int64
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL(
SELECT
  projectscan_10.a_8 AS a_8,
  CAST(projectscan_10.a_7 AS INT64) AS a_11
FROM
  (
    SELECT
      simpletypes_9.a_8 AS a_8,
      simpletypes_9.a_7 AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_7,
          SimpleTypes.int64 AS a_8
        FROM
          SimpleTypes
      ) AS simpletypes_9
  ) AS projectscan_10
)) UNION ALL STRICT CORRESPONDING(
SELECT
  projectscan_15.a_13 AS int64,
  CAST(projectscan_15.a_12 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_14.a_13 AS a_13,
      simpletypes_14.a_12 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_12,
          SimpleTypes.int64 AS a_13
        FROM
          SimpleTypes
      ) AS simpletypes_14
  ) AS projectscan_15
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
((
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_3,
     SimpleTypes.int64 AS a_4
|> AS projectscan_5
|> SELECT
     CAST(projectscan_5.a_3 AS INT64) AS int32,
     projectscan_5.a_4 AS int64
) UNION ALL(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_7,
     SimpleTypes.int64 AS a_8
|> AS simpletypes_9
|> SELECT
     simpletypes_9.a_8 AS a_8,
     simpletypes_9.a_7 AS a_7
|> AS projectscan_10
|> SELECT
     projectscan_10.a_8 AS a_8,
     CAST(projectscan_10.a_7 AS INT64) AS a_11
)) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_12,
     SimpleTypes.int64 AS a_13
|> AS simpletypes_14
|> SELECT
     simpletypes_14.a_13 AS a_13,
     simpletypes_14.a_12 AS a_12
|> AS projectscan_15
|> SELECT
     projectscan_15.a_13 AS int64,
     CAST(projectscan_15.a_12 AS INT64) AS int32
);
==

# BY_POSITION as an input to STRICT CORRESPONDING
SELECT int64, int32 FROM SimpleTypes
UNION ALL STRICT CORRESPONDING
(
  SELECT int32, int64 FROM SimpleTypes
  UNION ALL
  SELECT int64, int32 FROM SimpleTypes
)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  projectscan_6.a_4 AS int64,
  CAST(projectscan_6.a_3 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_5.a_4 AS a_4,
      simpletypes_5.a_3 AS a_3
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_3,
          SimpleTypes.int64 AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
  ) AS projectscan_6
) UNION ALL STRICT CORRESPONDING((
SELECT
  CAST(projectscan_10.a_8 AS INT64) AS int32,
  projectscan_10.a_9 AS int64
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9
    FROM
      SimpleTypes
  ) AS projectscan_10
) UNION ALL(
SELECT
  projectscan_15.a_13 AS a_13,
  CAST(projectscan_15.a_12 AS INT64) AS a_16
FROM
  (
    SELECT
      simpletypes_14.a_13 AS a_13,
      simpletypes_14.a_12 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_12,
          SimpleTypes.int64 AS a_13
        FROM
          SimpleTypes
      ) AS simpletypes_14
  ) AS projectscan_15
));

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_3,
     SimpleTypes.int64 AS a_4
|> AS simpletypes_5
|> SELECT
     simpletypes_5.a_4 AS a_4,
     simpletypes_5.a_3 AS a_3
|> AS projectscan_6
|> SELECT
     projectscan_6.a_4 AS int64,
     CAST(projectscan_6.a_3 AS INT64) AS int32
) UNION ALL STRICT CORRESPONDING((
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_8,
     SimpleTypes.int64 AS a_9
|> AS projectscan_10
|> SELECT
     CAST(projectscan_10.a_8 AS INT64) AS int32,
     projectscan_10.a_9 AS int64
) UNION ALL(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_12,
     SimpleTypes.int64 AS a_13
|> AS simpletypes_14
|> SELECT
     simpletypes_14.a_13 AS a_13,
     simpletypes_14.a_12 AS a_12
|> AS projectscan_15
|> SELECT
     projectscan_15.a_13 AS a_13,
     CAST(projectscan_15.a_12 AS INT64) AS a_16
));
==

# STRICT with type coercion.
[show_resolved_ast]
SELECT int64 AS a, int64 AS b FROM SimpleTypes
UNION ALL STRICT  CORRESPONDING
SELECT double AS b, int32 AS a FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$union_all.a#39 AS a [INT64]
| +-$union_all.b#40 AS b [DOUBLE]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[a#39, b#40]
    +-op_type=UNION_ALL
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=[SimpleTypes.int64#2, $union_all1_cast.int64#41]
    | | |   +-expr_list=
    | | |   | +-int64#41 :=
    | | |   |   +-Cast(INT64 -> DOUBLE)
    | | |   |     +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | | |   +-input_scan=
    | | |     +-ProjectScan
    | | |       +-column_list=SimpleTypes.[int64#2, int64#2]
    | | |       +-input_scan=
    | | |         +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
    | | +-output_column_list=[SimpleTypes.int64#2, $union_all1_cast.int64#41]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$union_all2_cast.int32#42, SimpleTypes.double#28]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=[SimpleTypes.double#28, $union_all2_cast.int32#42]
    |   |       +-expr_list=
    |   |       | +-int32#42 :=
    |   |       |   +-Cast(INT32 -> INT64)
    |   |       |     +-ColumnRef(type=INT32, column=SimpleTypes.int32#20)
    |   |       +-input_scan=
    |   |         +-ProjectScan
    |   |           +-column_list=SimpleTypes.[double#28, int32#20]
    |   |           +-input_scan=
    |   |             +-TableScan(column_list=SimpleTypes.[int32#20, double#28], table=SimpleTypes, column_index_list=[0, 8])
    |   +-output_column_list=[$union_all2_cast.int32#42, SimpleTypes.double#28]
    +-column_match_mode=CORRESPONDING

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
(
SELECT
  projectscan_6.a_3 AS a,
  CAST(projectscan_6.a_3 AS DOUBLE) AS b
FROM
  (
    SELECT
      simpletypes_4.a_3 AS a_3,
      simpletypes_4.a_3 AS a_5
    FROM
      (
        SELECT
          SimpleTypes.int64 AS a_3
        FROM
          SimpleTypes
      ) AS simpletypes_4
  ) AS projectscan_6
) UNION ALL STRICT CORRESPONDING(
SELECT
  projectscan_11.a_9 AS b,
  CAST(projectscan_11.a_8 AS INT64) AS a
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_8 AS a_8
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_8,
          SimpleTypes.double AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_11
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int64 AS a_3
|> AS simpletypes_4
|> SELECT
     simpletypes_4.a_3 AS a_3,
     simpletypes_4.a_3 AS a_5
|> AS projectscan_6
|> SELECT
     projectscan_6.a_3 AS a,
     CAST(projectscan_6.a_3 AS DOUBLE) AS b
) UNION ALL STRICT CORRESPONDING(
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_8,
     SimpleTypes.double AS a_9
|> AS simpletypes_10
|> SELECT
     simpletypes_10.a_9 AS a_9,
     simpletypes_10.a_8 AS a_8
|> AS projectscan_11
|> SELECT
     projectscan_11.a_9 AS b,
     CAST(projectscan_11.a_8 AS INT64) AS a
);
