[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_CALL,+TABLE_VALUED_FUNCTIONS,+ANALYTIC_FUNCTIONS,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_RETURN_EXTENSIONS,+SQL_GRAPH_PATH_TYPE,+GROUP_BY_GRAPH_PATH,+SQL_GRAPH_PATH_MODE,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
[default no_test_extract_table_names]
[default run_sqlbuilder]

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY]
# The language feature is required
select gt.* from
graph_table(aml
  let x = 1
  CALL () {
    RETURN 1 AS one
  }
  return count(*)
) gt
--
ERROR: CALL is not supported [at 5:3]
  CALL () {
  ^
==

# The capture list is required
select gt.* from
graph_table(aml
  let x = 1
  CALL {
    RETURN 1 AS one
  }
  return x
) gt
--
ERROR: CALL with a subquery requires a name capture list [at 4:8]
  CALL {
       ^
==

# Conflict on non-element
select gt.* from
graph_table(aml
  let x = 1
  CALL (x) {
    MATCH (n)
    LET x = 1
    RETURN x, n ORDER BY n.age LIMIT 3

    NEXT
    RETURN x AS x2, n
  }
  return x
) gt
--
ERROR: Variable name: x already exists [at 6:9]
    LET x = 1
        ^
==

# Conflict from RETURN
select gt.* from
graph_table(aml
  let x = 1
  CALL (x) {
    RETURN 2 AS x
  }
  return 1 AS one
) gt
--

ERROR: Variable name: x already exists [at 5:5]
    RETURN 2 AS x
    ^
==

# Conflict from FOR
select gt.* from
graph_table(aml
  let x = 1
  CALL (x) {
    let arr = [1, 2]
    for x in arr
    RETURN 2 AS two
  }
  return x
) gt
--

ERROR: Variable name: x already exists [at 6:9]
    for x in arr
        ^
==

# Conflict from FOR's offset column
select gt.* from
graph_table(aml
  let x = 1
  CALL (x) {
    let arr = [1, 2]
    for e in arr with offset as x
    RETURN 2 AS two
  }
  return x
) gt
--

ERROR: Variable name: x already exists [at 6:33]
    for e in arr with offset as x
                                ^
==

# Conflict on a singleton name
select gt.* from
graph_table(aml
  match (n) -[e]->{1, 3} (m)
  CALL (n, e, m) {
    MATCH (m) -> (x)
    RETURN m, x ORDER BY x.age LIMIT 3
  }
  match (x) -> (y)
  return n.age, x.age, y.age
) gt
--
ERROR: Variable name: m already exists [at 6:5]
    RETURN m, x ORDER BY x.age LIMIT 3
    ^
==

# Conflict on a group name
select gt.* from
graph_table(aml
  match (n) -[outer_g]->{1, 3} (m)
  CALL (m{{|, outer_g}}) {
    MATCH (m) -[inner_g]-> (x)
    RETURN {{m|inner_g}} AS {{n|m|outer_g}}
  }
  return 1 AS one
) gt
--

ALTERNATION GROUPS:
    m,n
    inner_g,n
--
ERROR: Ambiguous name: n [at 4:12]
  CALL (m) {
           ^
--
ALTERNATION GROUPS:
    m,m
    , outer_g,m,m
--
ERROR: Variable name: m already exists [at 6:5]
    RETURN m AS m
    ^
--
ALTERNATION GROUPS:
    m,outer_g
    inner_g,outer_g
--
ERROR: Ambiguous name: outer_g [at 4:12]
  CALL (m) {
           ^
--
ALTERNATION GROUPS:
    inner_g,m
    , outer_g,inner_g,m
--
ERROR: Variable name: m already exists [at 6:5]
    RETURN inner_g AS m
    ^
--
ALTERNATION GROUPS:
    , outer_g,m,n
    , outer_g,inner_g,n
--
ERROR: Ambiguous name: n [at 4:21]
  CALL (m, outer_g) {
                    ^
--
ALTERNATION GROUP: , outer_g,m,outer_g
--
ERROR: Variable name: outer_g already exists [at 6:5]
    RETURN m AS outer_g
    ^
--
ALTERNATION GROUP: , outer_g,inner_g,outer_g
--
ERROR: Variable name: outer_g already exists [at 6:5]
    RETURN inner_g AS outer_g
    ^
==

# Same as above, but with an added nested CALL layer.
select gt.* from
graph_table(aml
  match (n) -[outer_g]->{1, 3} (m)
  CALL (m, outer_g) {
    CALL (m{{|, outer_g}}) {
      MATCH (m) -[inner_g]-> (x)
      RETURN {{m|inner_g}} AS {{n|m|outer_g}}
    }
    RETURN outer_g AS m
  }
  return 1 AS one
) gt
--
ALTERNATION GROUPS:
    m,n
    inner_g,n
    , outer_g,m,n
    , outer_g,inner_g,n
--
ERROR: Variable name: m already exists [at 9:5]
    RETURN outer_g AS m
    ^
--
ALTERNATION GROUPS:
    m,m
    , outer_g,m,m
--
ERROR: Variable name: m already exists [at 7:7]
      RETURN m AS m
      ^
--
ALTERNATION GROUPS:
    m,outer_g
    inner_g,outer_g
--
ERROR: Variable name: outer_g already exists [at 4:21]
  CALL (m, outer_g) {
                    ^
--
ALTERNATION GROUPS:
    inner_g,m
    , outer_g,inner_g,m
--
ERROR: Variable name: m already exists [at 7:7]
      RETURN inner_g AS m
      ^
--
ALTERNATION GROUP: , outer_g,m,outer_g
--
ERROR: Variable name: outer_g already exists [at 7:7]
      RETURN m AS outer_g
      ^
--
ALTERNATION GROUP: , outer_g,inner_g,outer_g
--
ERROR: Variable name: outer_g already exists [at 7:7]
      RETURN inner_g AS outer_g
      ^
==

# Non-element names are not visible if not captured
select gt.* from
graph_table(aml
  let k = 1
  CALL () {
    MATCH (m WHERE m.age > k) -> (x)
    RETURN x ORDER BY x.age LIMIT 3
  }
  return k, x.age
) gt
--

ERROR: Unrecognized name: k [at 5:28]
    MATCH (m WHERE m.age > k) -> (x)
                           ^
==

# CALL subquery as the first statment.
SELECT gt.* FROM
  graph_table(aml
    {{OPTIONAL|}} CALL () {
      RETURN 1 AS one
    }
    return *
  ) gt
--

ALTERNATION GROUP: OPTIONAL
--
ERROR: OPTIONAL CALL is not supported on an input with no columns defined [at 3:5]
    OPTIONAL CALL () {
    ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphCallScan
                  | +-column_list=[$graph_table.one#1]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=[$graph_table.one#1]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=[$graph_table.one#1]
                  | |       +-scan_list=
                  | |         +-GraphLinearScan
                  | |           +-column_list=[$graph_table.one#1]
                  | |           +-scan_list=
                  | |             +-ProjectScan
                  | |               +-column_list=[$graph_table.one#1]
                  | |               +-expr_list=
                  | |               | +-one#1 := Literal(type=INT64, value=1)
                  | |               +-input_scan=
                  | |                 +-SingleRowScan
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := ColumnRef(type=INT64, column=$graph_table.one#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.one#1])
==

# Access a column after the subquery which wasn't passed to the subquery.
select gt.* from
graph_table(aml
  let x = 1, y = 2
  CALL (y) {
    RETURN y+1 AS z
  }
  return x, y, z
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.x#4 AS x [INT64]
| +-$graph_table.y#5 AS y [INT64]
| +-$graph_table.z#6 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#4, y#5, z#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#4, y#5, z#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#4, y#5, z#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#4, y#5, z#6]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#1, y#2]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | | +-y#2 := Literal(type=INT64, value=2)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=$graph_table.[x#1, y#2, z#3]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=[$graph_table.z#3]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=[$graph_table.z#3]
                  | |       +-scan_list=
                  | |         +-GraphLinearScan
                  | |           +-column_list=[$graph_table.z#3]
                  | |           +-scan_list=
                  | |             +-ProjectScan
                  | |               +-column_list=[$graph_table.z#3]
                  | |               +-expr_list=
                  | |               | +-z#3 :=
                  | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                  | |               |     +-ColumnRef(type=INT64, column=$graph_table.y#2, is_correlated=TRUE)
                  | |               |     +-Literal(type=INT64, value=1)
                  | |               +-input_scan=
                  | |                 +-SingleRowScan
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$graph_table.[x#1, y#2])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.y#2)
                  +-ProjectScan
                    +-column_list=$graph_table.[x#4, y#5, z#6]
                    +-expr_list=
                    | +-x#4 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    | +-y#5 := ColumnRef(type=INT64, column=$graph_table.y#2)
                    | +-z#6 := ColumnRef(type=INT64, column=$graph_table.z#3)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[x#1, y#2, z#3])
==

# Element names are multiply-declared, they resolve to the same entities.
select count(*) from
graph_table(aml
  let k = 1
  match (n) -[e]->{1, 3} (m)
  CALL (k, n, e, m)
  {
    MATCH (m) -> (x) WHERE m.age > k
    let hops = count(e)
    RETURN x, hops, m AS m2 ORDER BY x.age LIMIT 3
  }
  match (x) -> (y)
  return n, hops, x, y, m, m2
) gt
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#30 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#30]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#30]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=$graph_table.[n#24, hops#25, x#26, y#27, m#28, m2#29]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=$graph_table.[n#24, hops#25, x#26, y#27, m#28, m2#29]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=$graph_table.[n#24, hops#25, x#26, y#27, m#28, m2#29]
        |           +-scan_list=
        |             +-ProjectScan
        |             | +-column_list=[$graph_table.k#1]
        |             | +-expr_list=
        |             | | +-k#1 := Literal(type=INT64, value=1)
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-GraphScan
        |             | +-column_list=[$graph_table.k#1, $element_table.n#2, $path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $element_table.m#11]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=[$element_table.n#2, $path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $element_table.m#11]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   | | +-column_list=[$element_table.n#2]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | +-GraphPathScan
        |             | |   | | +-column_list=[$path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10]
        |             | |   | | +-input_scan_list=
        |             | |   | | | +-GraphNodeScan
        |             | |   | | | | +-column_list=[$element_table.$element1#3]
        |             | |   | | | | +-label_expr=
        |             | |   | | | | | +-GraphLabelNaryExpr
        |             | |   | | | | |   +-op=OR
        |             | |   | | | | |   +-operand_list=
        |             | |   | | | | |     +-GraphWildCardLabel
        |             | |   | | | | |     +-GraphLabelNaryExpr
        |             | |   | | | | |       +-op=NOT
        |             | |   | | | | |       +-operand_list=
        |             | |   | | | | |         +-GraphWildCardLabel
        |             | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | | | +-GraphEdgeScan
        |             | |   | | | | +-column_list=[$element_table.e#4]
        |             | |   | | | | +-label_expr=
        |             | |   | | | | | +-GraphLabelNaryExpr
        |             | |   | | | | |   +-op=OR
        |             | |   | | | | |   +-operand_list=
        |             | |   | | | | |     +-GraphWildCardLabel
        |             | |   | | | | |     +-GraphLabelNaryExpr
        |             | |   | | | | |       +-op=NOT
        |             | |   | | | | |       +-operand_list=
        |             | |   | | | | |         +-GraphWildCardLabel
        |             | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |   | | | | +-orientation=RIGHT
        |             | |   | | | +-GraphNodeScan
        |             | |   | | |   +-column_list=[$element_table.$element2#5]
        |             | |   | | |   +-label_expr=
        |             | |   | | |   | +-GraphLabelNaryExpr
        |             | |   | | |   |   +-op=OR
        |             | |   | | |   |   +-operand_list=
        |             | |   | | |   |     +-GraphWildCardLabel
        |             | |   | | |   |     +-GraphLabelNaryExpr
        |             | |   | | |   |       +-op=NOT
        |             | |   | | |   |       +-operand_list=
        |             | |   | | |   |         +-GraphWildCardLabel
        |             | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | | +-head=$path_scan.$head#9
        |             | |   | | +-tail=$path_scan.$tail#10
        |             | |   | | +-quantifier=
        |             | |   | | | +-GraphPathPatternQuantifier
        |             | |   | | |   +-lower_bound=
        |             | |   | | |   | +-Literal(type=INT64, value=1)
        |             | |   | | |   +-upper_bound=
        |             | |   | | |     +-Literal(type=INT64, value=3)
        |             | |   | | +-group_variable_list=
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#3, array=$element_table.$element1#6)
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#4, array=$element_table.e#7)
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#5, array=$element_table.$element2#8)
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.m#11]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-head=$element_table.n#2
        |             | |   +-tail=$element_table.m#11
        |             | +-input_scan=
        |             |   +-GraphRefScan(column_list=[$graph_table.k#1])
        |             +-GraphCallScan
        |             | +-column_list=[$graph_table.k#1, $element_table.n#2, $element_table.e#7, $element_table.m#11, $graph_table.x#17, $graph_table.hops#18, $graph_table.m2#19]
        |             | +-optional=FALSE
        |             | +-subquery=
        |             | | +-GraphTableScan
        |             | |   +-column_list=$graph_table.[x#17, hops#18, m2#19]
        |             | |   +-property_graph=aml
        |             | |   +-input_scan=
        |             | |     +-GraphLinearScan
        |             | |       +-column_list=$graph_table.[x#17, hops#18, m2#19]
        |             | |       +-scan_list=
        |             | |         +-GraphLinearScan
        |             | |           +-column_list=$graph_table.[x#17, hops#18, m2#19]
        |             | |           +-scan_list=
        |             | |             +-GraphScan
        |             | |             | +-column_list=$element_table.[m#12, $element3#13, x#14]
        |             | |             | +-input_scan_list=
        |             | |             | | +-GraphPathScan
        |             | |             | |   +-column_list=$element_table.[m#12, $element3#13, x#14]
        |             | |             | |   +-input_scan_list=
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   | | +-column_list=[$element_table.m#12]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   | +-GraphEdgeScan
        |             | |             | |   | | +-column_list=[$element_table.$element3#13]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |             | |   | | +-orientation=RIGHT
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   |   +-column_list=[$element_table.x#14]
        |             | |             | |   |   +-label_expr=
        |             | |             | |   |   | +-GraphLabelNaryExpr
        |             | |             | |   |   |   +-op=OR
        |             | |             | |   |   |   +-operand_list=
        |             | |             | |   |   |     +-GraphWildCardLabel
        |             | |             | |   |   |     +-GraphLabelNaryExpr
        |             | |             | |   |   |       +-op=NOT
        |             | |             | |   |   |       +-operand_list=
        |             | |             | |   |   |         +-GraphWildCardLabel
        |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   +-head=$element_table.m#12
        |             | |             | |   +-tail=$element_table.x#14
        |             | |             | +-filter_expr=
        |             | |             | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |             | |             | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |             | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11, is_correlated=TRUE)
        |             | |             | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
        |             | |             | |   +-FunctionCall(ZetaSQL:$greater(UINT64, INT64) -> BOOL)
        |             | |             | |     +-Cast(UINT32 -> UINT64)
        |             | |             | |     | +-GraphGetElementProperty
        |             | |             | |     |   +-type=UINT32
        |             | |             | |     |   +-expr=
        |             | |             | |     |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11, is_correlated=TRUE)
        |             | |             | |     |   +-property=age(UINT32)
        |             | |             | |     +-ColumnRef(type=INT64, column=$graph_table.k#1, is_correlated=TRUE)
        |             | |             | +-input_scan=
        |             | |             |   +-SingleRowScan
        |             | |             +-ProjectScan
        |             | |             | +-column_list=[$element_table.$element3#13, $element_table.x#14, $graph_table.hops#16]
        |             | |             | +-expr_list=
        |             | |             | | +-hops#16 :=
        |             | |             | |   +-ArrayAggregate
        |             | |             | |     +-type=INT64
        |             | |             | |     +-array=
        |             | |             | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#7, is_correlated=TRUE)
        |             | |             | |     +-element_column=$horizontal_aggregate.e#15
        |             | |             | |     +-aggregate=
        |             | |             | |       +-AggregateFunctionCall(ZetaSQL:count(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> INT64)
        |             | |             | |         +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#15)
        |             | |             | +-input_scan=
        |             | |             |   +-GraphRefScan(column_list=$element_table.[$element3#13, x#14])
        |             | |             +-LimitOffsetScan
        |             | |               +-column_list=$graph_table.[x#17, hops#18, m2#19]
        |             | |               +-is_ordered=TRUE
        |             | |               +-input_scan=
        |             | |               | +-OrderByScan
        |             | |               |   +-column_list=$graph_table.[x#17, hops#18, m2#19]
        |             | |               |   +-is_ordered=TRUE
        |             | |               |   +-input_scan=
        |             | |               |   | +-ProjectScan
        |             | |               |   |   +-column_list=[$element_table.$element3#13, $element_table.x#14, $graph_table.hops#16, $graph_table.x#17, $graph_table.hops#18, $graph_table.m2#19, $orderby.$orderbycol1#20]
        |             | |               |   |   +-expr_list=
        |             | |               |   |   | +-$orderbycol1#20 :=
        |             | |               |   |   |   +-GraphGetElementProperty
        |             | |               |   |   |     +-type=UINT32
        |             | |               |   |   |     +-expr=
        |             | |               |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.x#17)
        |             | |               |   |   |     +-property=age(UINT32)
        |             | |               |   |   +-input_scan=
        |             | |               |   |     +-ProjectScan
        |             | |               |   |       +-column_list=[$element_table.$element3#13, $element_table.x#14, $graph_table.hops#16, $graph_table.x#17, $graph_table.hops#18, $graph_table.m2#19]
        |             | |               |   |       +-expr_list=
        |             | |               |   |       | +-x#17 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#14)
        |             | |               |   |       | +-hops#18 := ColumnRef(type=INT64, column=$graph_table.hops#16)
        |             | |               |   |       | +-m2#19 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11, is_correlated=TRUE)
        |             | |               |   |       +-input_scan=
        |             | |               |   |         +-GraphRefScan(column_list=[$element_table.$element3#13, $element_table.x#14, $graph_table.hops#16])
        |             | |               |   +-order_by_item_list=
        |             | |               |     +-OrderByItem
        |             | |               |       +-column_ref=
        |             | |               |         +-ColumnRef(type=UINT32, column=$orderby.$orderbycol1#20)
        |             | |               +-limit=
        |             | |                 +-Literal(type=INT64, value=3)
        |             | +-input_scan=
        |             | | +-GraphRefScan(column_list=[$graph_table.k#1, $element_table.n#2, $element_table.e#7, $element_table.m#11])
        |             | +-parameter_list=
        |             |   +-ColumnRef(type=INT64, column=$graph_table.k#1)
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
        |             |   +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#7)
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11)
        |             +-GraphScan
        |             | +-column_list=[$graph_table.k#1, $element_table.n#2, $element_table.e#7, $element_table.m#11, $graph_table.x#17, $graph_table.hops#18, $graph_table.m2#19, $element_table.x#21, $element_table.$element4#22, $element_table.y#23]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=$element_table.[x#21, $element4#22, y#23]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   | | +-column_list=[$element_table.x#21]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | +-GraphEdgeScan
        |             | |   | | +-column_list=[$element_table.$element4#22]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |   | | +-orientation=RIGHT
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.y#23]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-head=$element_table.x#21
        |             | |   +-tail=$element_table.y#23
        |             | +-filter_expr=
        |             | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#21)
        |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.x#17)
        |             | +-input_scan=
        |             |   +-GraphRefScan(column_list=[$graph_table.k#1, $element_table.n#2, $element_table.e#7, $element_table.m#11, $graph_table.x#17, $graph_table.hops#18, $graph_table.m2#19])
        |             +-ProjectScan
        |               +-column_list=$graph_table.[n#24, hops#25, x#26, y#27, m#28, m2#29]
        |               +-expr_list=
        |               | +-n#24 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
        |               | +-hops#25 := ColumnRef(type=INT64, column=$graph_table.hops#18)
        |               | +-x#26 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#21)
        |               | +-y#27 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.y#23)
        |               | +-m#28 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11)
        |               | +-m2#29 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m2#19)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=[$graph_table.k#1, $element_table.n#2, $element_table.e#7, $element_table.m#11, $graph_table.hops#18, $graph_table.m2#19, $element_table.x#21, $element_table.$element4#22, $element_table.y#23])
        +-aggregate_list=
          +-$agg1#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Similar but with OPTIONAL.
# Note that we include names that are elements, group vars, scalars from let,
# and paths.
# Multiply-declared variables resolve to the same type, with or without OPTIONAL
select count(*) from
graph_table(aml
  match p = (n) -[e]->{1, 3} (m)
  let c = 1
  OPTIONAL CALL (n, e, m, c, p)
  {
    MATCH p2 = (m) -[e2]-> (x) WHERE m.age > c AND x.age > PATH_LENGTH(p)
    RETURN x, p2 ORDER BY x.age LIMIT 3
  }
  match (x) -> (y)
  return n, e, m, c, x, p, p2
) gt
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#31 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#31]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#31]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=$graph_table.[n#24, e#25, m#26, c#27, x#28, p#29, p2#30]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=$graph_table.[n#24, e#25, m#26, c#27, x#28, p#29, p2#30]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=$graph_table.[n#24, e#25, m#26, c#27, x#28, p#29, p2#30]
        |           +-scan_list=
        |             +-GraphScan
        |             | +-column_list=[$element_table.n#1, $path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $element_table.m#11, $graph_table.p#12]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=[$element_table.n#1, $path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $element_table.m#11, $graph_table.p#12]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   | | +-column_list=[$element_table.n#1]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | +-GraphPathScan
        |             | |   | | +-column_list=[$path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $graph_table.$path#5]
        |             | |   | | +-input_scan_list=
        |             | |   | | | +-GraphNodeScan
        |             | |   | | | | +-column_list=[$element_table.$element1#2]
        |             | |   | | | | +-label_expr=
        |             | |   | | | | | +-GraphLabelNaryExpr
        |             | |   | | | | |   +-op=OR
        |             | |   | | | | |   +-operand_list=
        |             | |   | | | | |     +-GraphWildCardLabel
        |             | |   | | | | |     +-GraphLabelNaryExpr
        |             | |   | | | | |       +-op=NOT
        |             | |   | | | | |       +-operand_list=
        |             | |   | | | | |         +-GraphWildCardLabel
        |             | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | | | +-GraphEdgeScan
        |             | |   | | | | +-column_list=[$element_table.e#3]
        |             | |   | | | | +-label_expr=
        |             | |   | | | | | +-GraphLabelNaryExpr
        |             | |   | | | | |   +-op=OR
        |             | |   | | | | |   +-operand_list=
        |             | |   | | | | |     +-GraphWildCardLabel
        |             | |   | | | | |     +-GraphLabelNaryExpr
        |             | |   | | | | |       +-op=NOT
        |             | |   | | | | |       +-operand_list=
        |             | |   | | | | |         +-GraphWildCardLabel
        |             | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |   | | | | +-orientation=RIGHT
        |             | |   | | | +-GraphNodeScan
        |             | |   | | |   +-column_list=[$element_table.$element2#4]
        |             | |   | | |   +-label_expr=
        |             | |   | | |   | +-GraphLabelNaryExpr
        |             | |   | | |   |   +-op=OR
        |             | |   | | |   |   +-operand_list=
        |             | |   | | |   |     +-GraphWildCardLabel
        |             | |   | | |   |     +-GraphLabelNaryExpr
        |             | |   | | |   |       +-op=NOT
        |             | |   | | |   |       +-operand_list=
        |             | |   | | |   |         +-GraphWildCardLabel
        |             | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | | +-path=
        |             | |   | | | +-ColumnHolder(column=$graph_table.$path#5)
        |             | |   | | +-head=$path_scan.$head#9
        |             | |   | | +-tail=$path_scan.$tail#10
        |             | |   | | +-quantifier=
        |             | |   | | | +-GraphPathPatternQuantifier
        |             | |   | | |   +-lower_bound=
        |             | |   | | |   | +-Literal(type=INT64, value=1)
        |             | |   | | |   +-upper_bound=
        |             | |   | | |     +-Literal(type=INT64, value=3)
        |             | |   | | +-group_variable_list=
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#6)
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#7)
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#8)
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.m#11]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-path=
        |             | |   | +-ColumnHolder(column=$graph_table.p#12)
        |             | |   +-head=$element_table.n#1
        |             | |   +-tail=$element_table.m#11
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-ProjectScan
        |             | +-column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12, $graph_table.c#13]
        |             | +-expr_list=
        |             | | +-c#13 := Literal(type=INT64, value=1)
        |             | +-input_scan=
        |             |   +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12])
        |             +-GraphCallScan
        |             | +-column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12, $graph_table.c#13, $graph_table.x#18, $graph_table.p2#19]
        |             | +-optional=TRUE
        |             | +-subquery=
        |             | | +-GraphTableScan
        |             | |   +-column_list=$graph_table.[x#18, p2#19]
        |             | |   +-property_graph=aml
        |             | |   +-input_scan=
        |             | |     +-GraphLinearScan
        |             | |       +-column_list=$graph_table.[x#18, p2#19]
        |             | |       +-scan_list=
        |             | |         +-GraphLinearScan
        |             | |           +-column_list=$graph_table.[x#18, p2#19]
        |             | |           +-scan_list=
        |             | |             +-GraphScan
        |             | |             | +-column_list=[$element_table.m#14, $element_table.e2#15, $element_table.x#16, $graph_table.p2#17]
        |             | |             | +-input_scan_list=
        |             | |             | | +-GraphPathScan
        |             | |             | |   +-column_list=[$element_table.m#14, $element_table.e2#15, $element_table.x#16, $graph_table.p2#17]
        |             | |             | |   +-input_scan_list=
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   | | +-column_list=[$element_table.m#14]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   | +-GraphEdgeScan
        |             | |             | |   | | +-column_list=[$element_table.e2#15]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |             | |   | | +-orientation=RIGHT
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   |   +-column_list=[$element_table.x#16]
        |             | |             | |   |   +-label_expr=
        |             | |             | |   |   | +-GraphLabelNaryExpr
        |             | |             | |   |   |   +-op=OR
        |             | |             | |   |   |   +-operand_list=
        |             | |             | |   |   |     +-GraphWildCardLabel
        |             | |             | |   |   |     +-GraphLabelNaryExpr
        |             | |             | |   |   |       +-op=NOT
        |             | |             | |   |   |       +-operand_list=
        |             | |             | |   |   |         +-GraphWildCardLabel
        |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   +-path=
        |             | |             | |   | +-ColumnHolder(column=$graph_table.p2#17)
        |             | |             | |   +-head=$element_table.m#14
        |             | |             | |   +-tail=$element_table.x#16
        |             | |             | +-filter_expr=
        |             | |             | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |             | |             | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |             | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11, is_correlated=TRUE)
        |             | |             | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#14)
        |             | |             | |   +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |             | |             | |     +-FunctionCall(ZetaSQL:$greater(UINT64, INT64) -> BOOL)
        |             | |             | |     | +-Cast(UINT32 -> UINT64)
        |             | |             | |     | | +-GraphGetElementProperty
        |             | |             | |     | |   +-type=UINT32
        |             | |             | |     | |   +-expr=
        |             | |             | |     | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11, is_correlated=TRUE)
        |             | |             | |     | |   +-property=age(UINT32)
        |             | |             | |     | +-ColumnRef(type=INT64, column=$graph_table.c#13, is_correlated=TRUE)
        |             | |             | |     +-FunctionCall(ZetaSQL:$greater(UINT64, INT64) -> BOOL)
        |             | |             | |       +-Cast(UINT32 -> UINT64)
        |             | |             | |       | +-GraphGetElementProperty
        |             | |             | |       |   +-type=UINT32
        |             | |             | |       |   +-expr=
        |             | |             | |       |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#16)
        |             | |             | |       |   +-property=age(UINT32)
        |             | |             | |       +-FunctionCall(ZetaSQL:path_length(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
        |             | |             | |         +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#12, is_correlated=TRUE)
        |             | |             | +-input_scan=
        |             | |             |   +-SingleRowScan
        |             | |             +-LimitOffsetScan
        |             | |               +-column_list=$graph_table.[x#18, p2#19]
        |             | |               +-is_ordered=TRUE
        |             | |               +-input_scan=
        |             | |               | +-OrderByScan
        |             | |               |   +-column_list=$graph_table.[x#18, p2#19]
        |             | |               |   +-is_ordered=TRUE
        |             | |               |   +-input_scan=
        |             | |               |   | +-ProjectScan
        |             | |               |   |   +-column_list=[$element_table.e2#15, $element_table.x#16, $graph_table.p2#17, $graph_table.x#18, $graph_table.p2#19, $orderby.$orderbycol1#20]
        |             | |               |   |   +-expr_list=
        |             | |               |   |   | +-$orderbycol1#20 :=
        |             | |               |   |   |   +-GraphGetElementProperty
        |             | |               |   |   |     +-type=UINT32
        |             | |               |   |   |     +-expr=
        |             | |               |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.x#18)
        |             | |               |   |   |     +-property=age(UINT32)
        |             | |               |   |   +-input_scan=
        |             | |               |   |     +-ProjectScan
        |             | |               |   |       +-column_list=[$element_table.e2#15, $element_table.x#16, $graph_table.p2#17, $graph_table.x#18, $graph_table.p2#19]
        |             | |               |   |       +-expr_list=
        |             | |               |   |       | +-x#18 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#16)
        |             | |               |   |       | +-p2#19 := ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p2#17)
        |             | |               |   |       +-input_scan=
        |             | |               |   |         +-GraphRefScan(column_list=[$element_table.e2#15, $element_table.x#16, $graph_table.p2#17])
        |             | |               |   +-order_by_item_list=
        |             | |               |     +-OrderByItem
        |             | |               |       +-column_ref=
        |             | |               |         +-ColumnRef(type=UINT32, column=$orderby.$orderbycol1#20)
        |             | |               +-limit=
        |             | |                 +-Literal(type=INT64, value=3)
        |             | +-input_scan=
        |             | | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12, $graph_table.c#13])
        |             | +-parameter_list=
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
        |             |   +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#7)
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11)
        |             |   +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#12)
        |             |   +-ColumnRef(type=INT64, column=$graph_table.c#13)
        |             +-GraphScan
        |             | +-column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12, $graph_table.c#13, $graph_table.x#18, $graph_table.p2#19, $element_table.x#21, $element_table.$element3#22, $element_table.y#23]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=$element_table.[x#21, $element3#22, y#23]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   | | +-column_list=[$element_table.x#21]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | +-GraphEdgeScan
        |             | |   | | +-column_list=[$element_table.$element3#22]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |   | | +-orientation=RIGHT
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.y#23]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-head=$element_table.x#21
        |             | |   +-tail=$element_table.y#23
        |             | +-filter_expr=
        |             | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#21)
        |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.x#18)
        |             | +-input_scan=
        |             |   +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12, $graph_table.c#13, $graph_table.x#18, $graph_table.p2#19])
        |             +-ProjectScan
        |               +-column_list=$graph_table.[n#24, e#25, m#26, c#27, x#28, p#29, p2#30]
        |               +-expr_list=
        |               | +-n#24 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
        |               | +-e#25 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#7)
        |               | +-m#26 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#11)
        |               | +-c#27 := ColumnRef(type=INT64, column=$graph_table.c#13)
        |               | +-x#28 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#21)
        |               | +-p#29 := ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#12)
        |               | +-p2#30 := ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p2#19)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#7, $element_table.m#11, $graph_table.p#12, $graph_table.c#13, $graph_table.p2#19, $element_table.x#21, $element_table.$element3#22, $element_table.y#23])
        +-aggregate_list=
          +-$agg1#31 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Test dedicated to ensure that OPTIONAL resolves multiply-declared names to
# the LHS just like without it. Note that the type does not change.
select gt.* from
graph_table(aml
  match (n IS Account)
  {{|OPTIONAL }}CALL (n)
  {
    MATCH (n IS Person)
    RETURN n.age
  }
  return n.balance, age
) gt
--
ERROR: Property age is not exposed by element type GRAPH_NODE(aml)<balance UINT64, id INT64> [at 7:14]
    RETURN n.age
             ^
==

# Different graph in the CALL subquery
select gt.* from
graph_table(aml
  match (n)
  {{|OPTIONAL }}CALL ()
  {
    GRAPH aml2
    MATCH (n)
    RETURN n.age
  }
  return n, age
) gt
--
ERROR: CALL subquery cannot specify a graph reference [at 6:11]
    GRAPH aml2
          ^
==

# Horizontal aggregation in the CALL subquery
select count(*) from
graph_table(aml
  match -[e]->{1, 3} (n)
  CALL (n, e) {
    MATCH (n) -> (m)
    LET hops = count(e.accountId)
    RETURN m, hops LIMIT 3
  }
  return n, m, hops
) gt
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=$graph_table.[n#17, m#18, hops#19]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=$graph_table.[n#17, m#18, hops#19]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=$graph_table.[n#17, m#18, hops#19]
        |           +-scan_list=
        |             +-GraphScan
        |             | +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8, $element_table.n#9]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8, $element_table.n#9]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphPathScan
        |             | |   | | +-column_list=[$path_scan.$head#7, $element_table.e#5, $path_scan.$tail#8]
        |             | |   | | +-input_scan_list=
        |             | |   | | | +-GraphNodeScan
        |             | |   | | | | +-column_list=[$element_table.$element1#1]
        |             | |   | | | | +-label_expr=
        |             | |   | | | | | +-GraphLabelNaryExpr
        |             | |   | | | | |   +-op=OR
        |             | |   | | | | |   +-operand_list=
        |             | |   | | | | |     +-GraphWildCardLabel
        |             | |   | | | | |     +-GraphLabelNaryExpr
        |             | |   | | | | |       +-op=NOT
        |             | |   | | | | |       +-operand_list=
        |             | |   | | | | |         +-GraphWildCardLabel
        |             | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | | | +-GraphEdgeScan
        |             | |   | | | | +-column_list=[$element_table.e#2]
        |             | |   | | | | +-label_expr=
        |             | |   | | | | | +-GraphLabelNaryExpr
        |             | |   | | | | |   +-op=OR
        |             | |   | | | | |   +-operand_list=
        |             | |   | | | | |     +-GraphWildCardLabel
        |             | |   | | | | |     +-GraphLabelNaryExpr
        |             | |   | | | | |       +-op=NOT
        |             | |   | | | | |       +-operand_list=
        |             | |   | | | | |         +-GraphWildCardLabel
        |             | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |   | | | | +-orientation=RIGHT
        |             | |   | | | +-GraphNodeScan
        |             | |   | | |   +-column_list=[$element_table.$element2#3]
        |             | |   | | |   +-label_expr=
        |             | |   | | |   | +-GraphLabelNaryExpr
        |             | |   | | |   |   +-op=OR
        |             | |   | | |   |   +-operand_list=
        |             | |   | | |   |     +-GraphWildCardLabel
        |             | |   | | |   |     +-GraphLabelNaryExpr
        |             | |   | | |   |       +-op=NOT
        |             | |   | | |   |       +-operand_list=
        |             | |   | | |   |         +-GraphWildCardLabel
        |             | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | | +-head=$path_scan.$head#7
        |             | |   | | +-tail=$path_scan.$tail#8
        |             | |   | | +-quantifier=
        |             | |   | | | +-GraphPathPatternQuantifier
        |             | |   | | |   +-lower_bound=
        |             | |   | | |   | +-Literal(type=INT64, value=1)
        |             | |   | | |   +-upper_bound=
        |             | |   | | |     +-Literal(type=INT64, value=3)
        |             | |   | | +-group_variable_list=
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#4)
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#5)
        |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#6)
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.n#9]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-head=$path_scan.$head#7
        |             | |   +-tail=$element_table.n#9
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-GraphCallScan
        |             | +-column_list=[$element_table.e#5, $element_table.n#9, $graph_table.m#15, $graph_table.hops#16]
        |             | +-optional=FALSE
        |             | +-subquery=
        |             | | +-GraphTableScan
        |             | |   +-column_list=$graph_table.[m#15, hops#16]
        |             | |   +-property_graph=aml
        |             | |   +-input_scan=
        |             | |     +-GraphLinearScan
        |             | |       +-column_list=$graph_table.[m#15, hops#16]
        |             | |       +-scan_list=
        |             | |         +-GraphLinearScan
        |             | |           +-column_list=$graph_table.[m#15, hops#16]
        |             | |           +-scan_list=
        |             | |             +-GraphScan
        |             | |             | +-column_list=$element_table.[n#10, $element3#11, m#12]
        |             | |             | +-input_scan_list=
        |             | |             | | +-GraphPathScan
        |             | |             | |   +-column_list=$element_table.[n#10, $element3#11, m#12]
        |             | |             | |   +-input_scan_list=
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   | | +-column_list=[$element_table.n#10]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   | +-GraphEdgeScan
        |             | |             | |   | | +-column_list=[$element_table.$element3#11]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |             | |   | | +-orientation=RIGHT
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   |   +-column_list=[$element_table.m#12]
        |             | |             | |   |   +-label_expr=
        |             | |             | |   |   | +-GraphLabelNaryExpr
        |             | |             | |   |   |   +-op=OR
        |             | |             | |   |   |   +-operand_list=
        |             | |             | |   |   |     +-GraphWildCardLabel
        |             | |             | |   |   |     +-GraphLabelNaryExpr
        |             | |             | |   |   |       +-op=NOT
        |             | |             | |   |   |       +-operand_list=
        |             | |             | |   |   |         +-GraphWildCardLabel
        |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   +-head=$element_table.n#10
        |             | |             | |   +-tail=$element_table.m#12
        |             | |             | +-filter_expr=
        |             | |             | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9, is_correlated=TRUE)
        |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#10)
        |             | |             | +-input_scan=
        |             | |             |   +-SingleRowScan
        |             | |             +-ProjectScan
        |             | |             | +-column_list=[$element_table.$element3#11, $element_table.m#12, $graph_table.hops#14]
        |             | |             | +-expr_list=
        |             | |             | | +-hops#14 :=
        |             | |             | |   +-ArrayAggregate
        |             | |             | |     +-type=INT64
        |             | |             | |     +-array=
        |             | |             | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5, is_correlated=TRUE)
        |             | |             | |     +-element_column=$horizontal_aggregate.e#13
        |             | |             | |     +-aggregate=
        |             | |             | |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
        |             | |             | |         +-GraphGetElementProperty
        |             | |             | |           +-type=INT64
        |             | |             | |           +-expr=
        |             | |             | |           | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#13)
        |             | |             | |           +-property=accountId(INT64)
        |             | |             | +-input_scan=
        |             | |             |   +-GraphRefScan(column_list=$element_table.[$element3#11, m#12])
        |             | |             +-LimitOffsetScan
        |             | |               +-column_list=$graph_table.[m#15, hops#16]
        |             | |               +-input_scan=
        |             | |               | +-ProjectScan
        |             | |               |   +-column_list=$graph_table.[m#15, hops#16]
        |             | |               |   +-expr_list=
        |             | |               |   | +-m#15 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#12)
        |             | |               |   | +-hops#16 := ColumnRef(type=INT64, column=$graph_table.hops#14)
        |             | |               |   +-input_scan=
        |             | |               |     +-GraphRefScan(column_list=[$element_table.$element3#11, $element_table.m#12, $graph_table.hops#14])
        |             | |               +-limit=
        |             | |                 +-Literal(type=INT64, value=3)
        |             | +-input_scan=
        |             | | +-GraphRefScan(column_list=$element_table.[e#5, n#9])
        |             | +-parameter_list=
        |             |   +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#5)
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
        |             +-ProjectScan
        |               +-column_list=$graph_table.[n#17, m#18, hops#19]
        |               +-expr_list=
        |               | +-n#17 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
        |               | +-m#18 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$graph_table.m#15)
        |               | +-hops#19 := ColumnRef(type=INT64, column=$graph_table.hops#16)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=[$element_table.e#5, $element_table.n#9, $graph_table.m#15, $graph_table.hops#16])
        +-aggregate_list=
          +-$agg1#20 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Nested CALL is just like JOIN LATERAL .. JOIN LATERAL ..
# Note that if a variable isn't declared through every layer, it creates a
# disconnect, and it shadows the outer variable.
# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
select count(*) from
graph_table(aml
  match (n) -> (m)
  CALL (n, m) {
    MATCH (m) -> (x)
    CALL (n{{|, m}}, x) { # Inner CALL: `m` must be declared here to be used.
      MATCH (x) -> (n)
      RETURN m.age AS m_age
    }
    RETURN m_age, x.age AS x_age
  }
  RETURN n.age AS n_age, m_age, x_age
) AS gt
--

ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: m [at 8:14]
      RETURN m.age AS m_age
             ^
--
ALTERNATION GROUP: , m
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#16]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=$graph_table.[n_age#13, m_age#14, x_age#15]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=$graph_table.[n_age#13, m_age#14, x_age#15]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=$graph_table.[n_age#13, m_age#14, x_age#15]
        |           +-scan_list=
        |             +-GraphScan
        |             | +-column_list=$element_table.[n#1, $element1#2, m#3]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=$element_table.[n#1, $element1#2, m#3]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   | | +-column_list=[$element_table.n#1]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   | +-GraphEdgeScan
        |             | |   | | +-column_list=[$element_table.$element1#2]
        |             | |   | | +-label_expr=
        |             | |   | | | +-GraphLabelNaryExpr
        |             | |   | | |   +-op=OR
        |             | |   | | |   +-operand_list=
        |             | |   | | |     +-GraphWildCardLabel
        |             | |   | | |     +-GraphLabelNaryExpr
        |             | |   | | |       +-op=NOT
        |             | |   | | |       +-operand_list=
        |             | |   | | |         +-GraphWildCardLabel
        |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |   | | +-orientation=RIGHT
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.m#3]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-head=$element_table.n#1
        |             | |   +-tail=$element_table.m#3
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-GraphCallScan
        |             | +-column_list=[$element_table.n#1, $element_table.$element1#2, $element_table.m#3, $graph_table.m_age#11, $graph_table.x_age#12]
        |             | +-optional=FALSE
        |             | +-subquery=
        |             | | +-GraphTableScan
        |             | |   +-column_list=$graph_table.[m_age#11, x_age#12]
        |             | |   +-property_graph=aml
        |             | |   +-input_scan=
        |             | |     +-GraphLinearScan
        |             | |       +-column_list=$graph_table.[m_age#11, x_age#12]
        |             | |       +-scan_list=
        |             | |         +-GraphLinearScan
        |             | |           +-column_list=$graph_table.[m_age#11, x_age#12]
        |             | |           +-scan_list=
        |             | |             +-GraphScan
        |             | |             | +-column_list=$element_table.[m#4, $element2#5, x#6]
        |             | |             | +-input_scan_list=
        |             | |             | | +-GraphPathScan
        |             | |             | |   +-column_list=$element_table.[m#4, $element2#5, x#6]
        |             | |             | |   +-input_scan_list=
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   | | +-column_list=[$element_table.m#4]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   | +-GraphEdgeScan
        |             | |             | |   | | +-column_list=[$element_table.$element2#5]
        |             | |             | |   | | +-label_expr=
        |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |   | | |   +-op=OR
        |             | |             | |   | | |   +-operand_list=
        |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |   | | |       +-op=NOT
        |             | |             | |   | | |       +-operand_list=
        |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |             | |   | | +-orientation=RIGHT
        |             | |             | |   | +-GraphNodeScan
        |             | |             | |   |   +-column_list=[$element_table.x#6]
        |             | |             | |   |   +-label_expr=
        |             | |             | |   |   | +-GraphLabelNaryExpr
        |             | |             | |   |   |   +-op=OR
        |             | |             | |   |   |   +-operand_list=
        |             | |             | |   |   |     +-GraphWildCardLabel
        |             | |             | |   |   |     +-GraphLabelNaryExpr
        |             | |             | |   |   |       +-op=NOT
        |             | |             | |   |   |       +-operand_list=
        |             | |             | |   |   |         +-GraphWildCardLabel
        |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |   +-head=$element_table.m#4
        |             | |             | |   +-tail=$element_table.x#6
        |             | |             | +-filter_expr=
        |             | |             | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3, is_correlated=TRUE)
        |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
        |             | |             | +-input_scan=
        |             | |             |   +-SingleRowScan
        |             | |             +-GraphCallScan
        |             | |             | +-column_list=[$element_table.$element2#5, $element_table.x#6, $graph_table.m_age#10]
        |             | |             | +-optional=FALSE
        |             | |             | +-subquery=
        |             | |             | | +-GraphTableScan
        |             | |             | |   +-column_list=[$graph_table.m_age#10]
        |             | |             | |   +-property_graph=aml
        |             | |             | |   +-input_scan=
        |             | |             | |     +-GraphLinearScan
        |             | |             | |       +-column_list=[$graph_table.m_age#10]
        |             | |             | |       +-scan_list=
        |             | |             | |         +-GraphLinearScan
        |             | |             | |           +-column_list=[$graph_table.m_age#10]
        |             | |             | |           +-scan_list=
        |             | |             | |             +-GraphScan
        |             | |             | |             | +-column_list=$element_table.[x#7, $element3#8, n#9]
        |             | |             | |             | +-input_scan_list=
        |             | |             | |             | | +-GraphPathScan
        |             | |             | |             | |   +-column_list=$element_table.[x#7, $element3#8, n#9]
        |             | |             | |             | |   +-input_scan_list=
        |             | |             | |             | |   | +-GraphNodeScan
        |             | |             | |             | |   | | +-column_list=[$element_table.x#7]
        |             | |             | |             | |   | | +-label_expr=
        |             | |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |             | |   | | |   +-op=OR
        |             | |             | |             | |   | | |   +-operand_list=
        |             | |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |             | |   | | |       +-op=NOT
        |             | |             | |             | |   | | |       +-operand_list=
        |             | |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |             | |   | +-GraphEdgeScan
        |             | |             | |             | |   | | +-column_list=[$element_table.$element3#8]
        |             | |             | |             | |   | | +-label_expr=
        |             | |             | |             | |   | | | +-GraphLabelNaryExpr
        |             | |             | |             | |   | | |   +-op=OR
        |             | |             | |             | |   | | |   +-operand_list=
        |             | |             | |             | |   | | |     +-GraphWildCardLabel
        |             | |             | |             | |   | | |     +-GraphLabelNaryExpr
        |             | |             | |             | |   | | |       +-op=NOT
        |             | |             | |             | |   | | |       +-operand_list=
        |             | |             | |             | |   | | |         +-GraphWildCardLabel
        |             | |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
        |             | |             | |             | |   | | +-orientation=RIGHT
        |             | |             | |             | |   | +-GraphNodeScan
        |             | |             | |             | |   |   +-column_list=[$element_table.n#9]
        |             | |             | |             | |   |   +-label_expr=
        |             | |             | |             | |   |   | +-GraphLabelNaryExpr
        |             | |             | |             | |   |   |   +-op=OR
        |             | |             | |             | |   |   |   +-operand_list=
        |             | |             | |             | |   |   |     +-GraphWildCardLabel
        |             | |             | |             | |   |   |     +-GraphLabelNaryExpr
        |             | |             | |             | |   |   |       +-op=NOT
        |             | |             | |             | |   |   |       +-operand_list=
        |             | |             | |             | |   |   |         +-GraphWildCardLabel
        |             | |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |             | |             | |   +-head=$element_table.x#7
        |             | |             | |             | |   +-tail=$element_table.n#9
        |             | |             | |             | +-filter_expr=
        |             | |             | |             | | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |             | |             | |             | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |             | |             | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
        |             | |             | |             | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#9)
        |             | |             | |             | |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
        |             | |             | |             | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#6, is_correlated=TRUE)
        |             | |             | |             | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#7)
        |             | |             | |             | +-input_scan=
        |             | |             | |             |   +-SingleRowScan
        |             | |             | |             +-ProjectScan
        |             | |             | |               +-column_list=[$graph_table.m_age#10]
        |             | |             | |               +-expr_list=
        |             | |             | |               | +-m_age#10 :=
        |             | |             | |               |   +-GraphGetElementProperty
        |             | |             | |               |     +-type=UINT32
        |             | |             | |               |     +-expr=
        |             | |             | |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3, is_correlated=TRUE)
        |             | |             | |               |     +-property=age(UINT32)
        |             | |             | |               +-input_scan=
        |             | |             | |                 +-GraphRefScan(column_list=[$element_table.$element3#8])
        |             | |             | +-input_scan=
        |             | |             | | +-GraphRefScan(column_list=$element_table.[$element2#5, x#6])
        |             | |             | +-parameter_list=
        |             | |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
        |             | |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3, is_correlated=TRUE)
        |             | |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#6)
        |             | |             +-ProjectScan
        |             | |               +-column_list=$graph_table.[m_age#11, x_age#12]
        |             | |               +-expr_list=
        |             | |               | +-m_age#11 := ColumnRef(type=UINT32, column=$graph_table.m_age#10)
        |             | |               | +-x_age#12 :=
        |             | |               |   +-GraphGetElementProperty
        |             | |               |     +-type=UINT32
        |             | |               |     +-expr=
        |             | |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#6)
        |             | |               |     +-property=age(UINT32)
        |             | |               +-input_scan=
        |             | |                 +-GraphRefScan(column_list=[$element_table.$element2#5, $element_table.x#6, $graph_table.m_age#10])
        |             | +-input_scan=
        |             | | +-GraphRefScan(column_list=$element_table.[n#1, $element1#2, m#3])
        |             | +-parameter_list=
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#3)
        |             +-ProjectScan
        |               +-column_list=$graph_table.[n_age#13, m_age#14, x_age#15]
        |               +-expr_list=
        |               | +-n_age#13 :=
        |               | | +-GraphGetElementProperty
        |               | |   +-type=UINT32
        |               | |   +-expr=
        |               | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
        |               | |   +-property=age(UINT32)
        |               | +-m_age#14 := ColumnRef(type=UINT32, column=$graph_table.m_age#11)
        |               | +-x_age#15 := ColumnRef(type=UINT32, column=$graph_table.x_age#12)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=[$element_table.n#1, $element_table.$element1#2, $element_table.m#3, $graph_table.m_age#11, $graph_table.x_age#12])
        +-aggregate_list=
          +-$agg1#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Simple usage of exposed names
select count(*) from
graph_table(aml
  LET x = 1
  MATCH (n)
  CALL (x, n) {
    RETURN x * 2 AS twice, n.age
  }
  RETURN *
) AS gt
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#9 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#9]
        +-input_scan=
        | +-GraphTableScan
        |   +-column_list=$graph_table.[x#5, n#6, twice#7, age#8]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=$graph_table.[x#5, n#6, twice#7, age#8]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=$graph_table.[x#5, n#6, twice#7, age#8]
        |           +-scan_list=
        |             +-ProjectScan
        |             | +-column_list=[$graph_table.x#1]
        |             | +-expr_list=
        |             | | +-x#1 := Literal(type=INT64, value=1)
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-GraphScan
        |             | +-column_list=[$graph_table.x#1, $element_table.n#2]
        |             | +-input_scan_list=
        |             | | +-GraphPathScan
        |             | |   +-column_list=[$element_table.n#2]
        |             | |   +-input_scan_list=
        |             | |   | +-GraphNodeScan
        |             | |   |   +-column_list=[$element_table.n#2]
        |             | |   |   +-label_expr=
        |             | |   |   | +-GraphLabelNaryExpr
        |             | |   |   |   +-op=OR
        |             | |   |   |   +-operand_list=
        |             | |   |   |     +-GraphWildCardLabel
        |             | |   |   |     +-GraphLabelNaryExpr
        |             | |   |   |       +-op=NOT
        |             | |   |   |       +-operand_list=
        |             | |   |   |         +-GraphWildCardLabel
        |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |             | |   +-head=$element_table.n#2
        |             | |   +-tail=$element_table.n#2
        |             | +-input_scan=
        |             |   +-GraphRefScan(column_list=[$graph_table.x#1])
        |             +-GraphCallScan
        |             | +-column_list=[$graph_table.x#1, $element_table.n#2, $graph_table.twice#3, $graph_table.age#4]
        |             | +-optional=FALSE
        |             | +-subquery=
        |             | | +-GraphTableScan
        |             | |   +-column_list=$graph_table.[twice#3, age#4]
        |             | |   +-property_graph=aml
        |             | |   +-input_scan=
        |             | |     +-GraphLinearScan
        |             | |       +-column_list=$graph_table.[twice#3, age#4]
        |             | |       +-scan_list=
        |             | |         +-GraphLinearScan
        |             | |           +-column_list=$graph_table.[twice#3, age#4]
        |             | |           +-scan_list=
        |             | |             +-ProjectScan
        |             | |               +-column_list=$graph_table.[twice#3, age#4]
        |             | |               +-expr_list=
        |             | |               | +-twice#3 :=
        |             | |               | | +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
        |             | |               | |   +-ColumnRef(type=INT64, column=$graph_table.x#1, is_correlated=TRUE)
        |             | |               | |   +-Literal(type=INT64, value=2)
        |             | |               | +-age#4 :=
        |             | |               |   +-GraphGetElementProperty
        |             | |               |     +-type=UINT32
        |             | |               |     +-expr=
        |             | |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2, is_correlated=TRUE)
        |             | |               |     +-property=age(UINT32)
        |             | |               +-input_scan=
        |             | |                 +-SingleRowScan
        |             | +-input_scan=
        |             | | +-GraphRefScan(column_list=[$graph_table.x#1, $element_table.n#2])
        |             | +-parameter_list=
        |             |   +-ColumnRef(type=INT64, column=$graph_table.x#1)
        |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
        |             +-ProjectScan
        |               +-column_list=$graph_table.[x#5, n#6, twice#7, age#8]
        |               +-expr_list=
        |               | +-x#5 := ColumnRef(type=INT64, column=$graph_table.x#1)
        |               | +-n#6 := ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
        |               | +-twice#7 := ColumnRef(type=INT64, column=$graph_table.twice#3)
        |               | +-age#8 := ColumnRef(type=UINT32, column=$graph_table.age#4)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=[$graph_table.x#1, $element_table.n#2, $graph_table.twice#3, $graph_table.age#4])
        +-aggregate_list=
          +-$agg1#9 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
==

# Outer columns are not visible inside the variable scope list nor the subquery.
# They must be explicitly aliased first.
# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
select (
  select count(*) from
  graph_table(aml
    match (n) -> (m)
    CALL (n, m{{|, outermost_col}}) {
      MATCH (m) -> (x)
      RETURN count(x) + outermost_col AS y
    }
    RETURN n.age AS n_age, y
  ) AS gt
) AS correlated_subquery
FROM (SELECT 1 AS outermost_col) AS t
--
ALTERNATION GROUP: <empty>
--
ERROR: Unrecognized name: outermost_col [at 7:25]
      RETURN count(x) + outermost_col AS y
                        ^
--
ALTERNATION GROUP: , outermost_col
--
QueryStmt
+-output_column_list=
| +-$query.correlated_subquery#13 AS correlated_subquery [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.correlated_subquery#13]
    +-expr_list=
    | +-correlated_subquery#13 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#12]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#12]
    |             +-input_scan=
    |             | +-GraphTableScan
    |             |   +-column_list=$graph_table.[n_age#10, y#11]
    |             |   +-property_graph=aml
    |             |   +-input_scan=
    |             |     +-GraphLinearScan
    |             |       +-column_list=$graph_table.[n_age#10, y#11]
    |             |       +-scan_list=
    |             |         +-GraphLinearScan
    |             |           +-column_list=$graph_table.[n_age#10, y#11]
    |             |           +-scan_list=
    |             |             +-GraphScan
    |             |             | +-column_list=$element_table.[n#2, $element1#3, m#4]
    |             |             | +-input_scan_list=
    |             |             | | +-GraphPathScan
    |             |             | |   +-column_list=$element_table.[n#2, $element1#3, m#4]
    |             |             | |   +-input_scan_list=
    |             |             | |   | +-GraphNodeScan
    |             |             | |   | | +-column_list=[$element_table.n#2]
    |             |             | |   | | +-label_expr=
    |             |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |   | | |   +-op=OR
    |             |             | |   | | |   +-operand_list=
    |             |             | |   | | |     +-GraphWildCardLabel
    |             |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |   | | |       +-op=NOT
    |             |             | |   | | |       +-operand_list=
    |             |             | |   | | |         +-GraphWildCardLabel
    |             |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |   | +-GraphEdgeScan
    |             |             | |   | | +-column_list=[$element_table.$element1#3]
    |             |             | |   | | +-label_expr=
    |             |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |   | | |   +-op=OR
    |             |             | |   | | |   +-operand_list=
    |             |             | |   | | |     +-GraphWildCardLabel
    |             |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |   | | |       +-op=NOT
    |             |             | |   | | |       +-operand_list=
    |             |             | |   | | |         +-GraphWildCardLabel
    |             |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
    |             |             | |   | | +-orientation=RIGHT
    |             |             | |   | +-GraphNodeScan
    |             |             | |   |   +-column_list=[$element_table.m#4]
    |             |             | |   |   +-label_expr=
    |             |             | |   |   | +-GraphLabelNaryExpr
    |             |             | |   |   |   +-op=OR
    |             |             | |   |   |   +-operand_list=
    |             |             | |   |   |     +-GraphWildCardLabel
    |             |             | |   |   |     +-GraphLabelNaryExpr
    |             |             | |   |   |       +-op=NOT
    |             |             | |   |   |       +-operand_list=
    |             |             | |   |   |         +-GraphWildCardLabel
    |             |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |   +-head=$element_table.n#2
    |             |             | |   +-tail=$element_table.m#4
    |             |             | +-input_scan=
    |             |             |   +-SingleRowScan
    |             |             +-GraphCallScan
    |             |             | +-column_list=[$element_table.n#2, $element_table.$element1#3, $element_table.m#4, $graph_table.y#9]
    |             |             | +-optional=FALSE
    |             |             | +-subquery=
    |             |             | | +-GraphTableScan
    |             |             | |   +-column_list=[$graph_table.y#9]
    |             |             | |   +-property_graph=aml
    |             |             | |   +-input_scan=
    |             |             | |     +-GraphLinearScan
    |             |             | |       +-column_list=[$graph_table.y#9]
    |             |             | |       +-scan_list=
    |             |             | |         +-GraphLinearScan
    |             |             | |           +-column_list=[$graph_table.y#9]
    |             |             | |           +-scan_list=
    |             |             | |             +-GraphScan
    |             |             | |             | +-column_list=$element_table.[m#5, $element2#6, x#7]
    |             |             | |             | +-input_scan_list=
    |             |             | |             | | +-GraphPathScan
    |             |             | |             | |   +-column_list=$element_table.[m#5, $element2#6, x#7]
    |             |             | |             | |   +-input_scan_list=
    |             |             | |             | |   | +-GraphNodeScan
    |             |             | |             | |   | | +-column_list=[$element_table.m#5]
    |             |             | |             | |   | | +-label_expr=
    |             |             | |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |             | |   | | |   +-op=OR
    |             |             | |             | |   | | |   +-operand_list=
    |             |             | |             | |   | | |     +-GraphWildCardLabel
    |             |             | |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |             | |   | | |       +-op=NOT
    |             |             | |             | |   | | |       +-operand_list=
    |             |             | |             | |   | | |         +-GraphWildCardLabel
    |             |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |             | |   | +-GraphEdgeScan
    |             |             | |             | |   | | +-column_list=[$element_table.$element2#6]
    |             |             | |             | |   | | +-label_expr=
    |             |             | |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |             | |   | | |   +-op=OR
    |             |             | |             | |   | | |   +-operand_list=
    |             |             | |             | |   | | |     +-GraphWildCardLabel
    |             |             | |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |             | |   | | |       +-op=NOT
    |             |             | |             | |   | | |       +-operand_list=
    |             |             | |             | |   | | |         +-GraphWildCardLabel
    |             |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
    |             |             | |             | |   | | +-orientation=RIGHT
    |             |             | |             | |   | +-GraphNodeScan
    |             |             | |             | |   |   +-column_list=[$element_table.x#7]
    |             |             | |             | |   |   +-label_expr=
    |             |             | |             | |   |   | +-GraphLabelNaryExpr
    |             |             | |             | |   |   |   +-op=OR
    |             |             | |             | |   |   |   +-operand_list=
    |             |             | |             | |   |   |     +-GraphWildCardLabel
    |             |             | |             | |   |   |     +-GraphLabelNaryExpr
    |             |             | |             | |   |   |       +-op=NOT
    |             |             | |             | |   |   |       +-operand_list=
    |             |             | |             | |   |   |         +-GraphWildCardLabel
    |             |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |             | |   +-head=$element_table.m#5
    |             |             | |             | |   +-tail=$element_table.x#7
    |             |             | |             | +-filter_expr=
    |             |             | |             | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
    |             |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
    |             |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#5)
    |             |             | |             | +-input_scan=
    |             |             | |             |   +-SingleRowScan
    |             |             | |             +-ProjectScan
    |             |             | |               +-column_list=[$graph_table.y#9]
    |             |             | |               +-expr_list=
    |             |             | |               | +-y#9 :=
    |             |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |             | |               |     +-ColumnRef(type=INT64, column=$graph_table.$agg1#8)
    |             |             | |               |     +-ColumnRef(type=INT64, column=t.outermost_col#1, is_correlated=TRUE)
    |             |             | |               +-input_scan=
    |             |             | |                 +-AggregateScan
    |             |             | |                   +-column_list=[$graph_table.$agg1#8]
    |             |             | |                   +-input_scan=
    |             |             | |                   | +-GraphRefScan(column_list=$element_table.[$element2#6, x#7])
    |             |             | |                   +-aggregate_list=
    |             |             | |                     +-$agg1#8 :=
    |             |             | |                       +-AggregateFunctionCall(ZetaSQL:count(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> INT64)
    |             |             | |                         +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#7)
    |             |             | +-input_scan=
    |             |             | | +-GraphRefScan(column_list=$element_table.[n#2, $element1#3, m#4])
    |             |             | +-parameter_list=
    |             |             |   +-ColumnRef(type=INT64, column=t.outermost_col#1, is_correlated=TRUE)
    |             |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
    |             |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
    |             |             +-ProjectScan
    |             |               +-column_list=$graph_table.[n_age#10, y#11]
    |             |               +-expr_list=
    |             |               | +-n_age#10 :=
    |             |               | | +-GraphGetElementProperty
    |             |               | |   +-type=UINT32
    |             |               | |   +-expr=
    |             |               | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
    |             |               | |   +-property=age(UINT32)
    |             |               | +-y#11 := ColumnRef(type=INT64, column=$graph_table.y#9)
    |             |               +-input_scan=
    |             |                 +-GraphRefScan(column_list=[$element_table.n#2, $element_table.$element1#3, $element_table.m#4, $graph_table.y#9])
    |             +-aggregate_list=
    |               +-$agg1#12 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-ProjectScan
        +-column_list=[t.outermost_col#1]
        +-expr_list=
        | +-outermost_col#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

# Outer columns are not visible inside the variable scope list nor the subquery.
# They must be explicitly aliased first.
select (
  select count(*) from
  graph_table(aml
    match (n) -> (m)
    LET outer_col = outermost_col
    CALL (n, m, outer_col) {
      MATCH (m) -> (x)
      RETURN count(x) + outer_col AS y
    }
    RETURN n.age AS n_age, y
  ) AS gt
) AS correlated_subquery
FROM (SELECT 1 AS outermost_col) AS t
--
QueryStmt
+-output_column_list=
| +-$query.correlated_subquery#14 AS correlated_subquery [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.correlated_subquery#14]
    +-expr_list=
    | +-correlated_subquery#14 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=t.outermost_col#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#13]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#13]
    |             +-input_scan=
    |             | +-GraphTableScan
    |             |   +-column_list=$graph_table.[n_age#11, y#12]
    |             |   +-property_graph=aml
    |             |   +-input_scan=
    |             |     +-GraphLinearScan
    |             |       +-column_list=$graph_table.[n_age#11, y#12]
    |             |       +-scan_list=
    |             |         +-GraphLinearScan
    |             |           +-column_list=$graph_table.[n_age#11, y#12]
    |             |           +-scan_list=
    |             |             +-GraphScan
    |             |             | +-column_list=$element_table.[n#2, $element1#3, m#4]
    |             |             | +-input_scan_list=
    |             |             | | +-GraphPathScan
    |             |             | |   +-column_list=$element_table.[n#2, $element1#3, m#4]
    |             |             | |   +-input_scan_list=
    |             |             | |   | +-GraphNodeScan
    |             |             | |   | | +-column_list=[$element_table.n#2]
    |             |             | |   | | +-label_expr=
    |             |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |   | | |   +-op=OR
    |             |             | |   | | |   +-operand_list=
    |             |             | |   | | |     +-GraphWildCardLabel
    |             |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |   | | |       +-op=NOT
    |             |             | |   | | |       +-operand_list=
    |             |             | |   | | |         +-GraphWildCardLabel
    |             |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |   | +-GraphEdgeScan
    |             |             | |   | | +-column_list=[$element_table.$element1#3]
    |             |             | |   | | +-label_expr=
    |             |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |   | | |   +-op=OR
    |             |             | |   | | |   +-operand_list=
    |             |             | |   | | |     +-GraphWildCardLabel
    |             |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |   | | |       +-op=NOT
    |             |             | |   | | |       +-operand_list=
    |             |             | |   | | |         +-GraphWildCardLabel
    |             |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
    |             |             | |   | | +-orientation=RIGHT
    |             |             | |   | +-GraphNodeScan
    |             |             | |   |   +-column_list=[$element_table.m#4]
    |             |             | |   |   +-label_expr=
    |             |             | |   |   | +-GraphLabelNaryExpr
    |             |             | |   |   |   +-op=OR
    |             |             | |   |   |   +-operand_list=
    |             |             | |   |   |     +-GraphWildCardLabel
    |             |             | |   |   |     +-GraphLabelNaryExpr
    |             |             | |   |   |       +-op=NOT
    |             |             | |   |   |       +-operand_list=
    |             |             | |   |   |         +-GraphWildCardLabel
    |             |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |   +-head=$element_table.n#2
    |             |             | |   +-tail=$element_table.m#4
    |             |             | +-input_scan=
    |             |             |   +-SingleRowScan
    |             |             +-ProjectScan
    |             |             | +-column_list=[$element_table.n#2, $element_table.$element1#3, $element_table.m#4, $graph_table.outer_col#5]
    |             |             | +-expr_list=
    |             |             | | +-outer_col#5 := ColumnRef(type=INT64, column=t.outermost_col#1, is_correlated=TRUE)
    |             |             | +-input_scan=
    |             |             |   +-GraphRefScan(column_list=$element_table.[n#2, $element1#3, m#4])
    |             |             +-GraphCallScan
    |             |             | +-column_list=[$element_table.n#2, $element_table.$element1#3, $element_table.m#4, $graph_table.outer_col#5, $graph_table.y#10]
    |             |             | +-optional=FALSE
    |             |             | +-subquery=
    |             |             | | +-GraphTableScan
    |             |             | |   +-column_list=[$graph_table.y#10]
    |             |             | |   +-property_graph=aml
    |             |             | |   +-input_scan=
    |             |             | |     +-GraphLinearScan
    |             |             | |       +-column_list=[$graph_table.y#10]
    |             |             | |       +-scan_list=
    |             |             | |         +-GraphLinearScan
    |             |             | |           +-column_list=[$graph_table.y#10]
    |             |             | |           +-scan_list=
    |             |             | |             +-GraphScan
    |             |             | |             | +-column_list=$element_table.[m#6, $element2#7, x#8]
    |             |             | |             | +-input_scan_list=
    |             |             | |             | | +-GraphPathScan
    |             |             | |             | |   +-column_list=$element_table.[m#6, $element2#7, x#8]
    |             |             | |             | |   +-input_scan_list=
    |             |             | |             | |   | +-GraphNodeScan
    |             |             | |             | |   | | +-column_list=[$element_table.m#6]
    |             |             | |             | |   | | +-label_expr=
    |             |             | |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |             | |   | | |   +-op=OR
    |             |             | |             | |   | | |   +-operand_list=
    |             |             | |             | |   | | |     +-GraphWildCardLabel
    |             |             | |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |             | |   | | |       +-op=NOT
    |             |             | |             | |   | | |       +-operand_list=
    |             |             | |             | |   | | |         +-GraphWildCardLabel
    |             |             | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |             | |   | +-GraphEdgeScan
    |             |             | |             | |   | | +-column_list=[$element_table.$element2#7]
    |             |             | |             | |   | | +-label_expr=
    |             |             | |             | |   | | | +-GraphLabelNaryExpr
    |             |             | |             | |   | | |   +-op=OR
    |             |             | |             | |   | | |   +-operand_list=
    |             |             | |             | |   | | |     +-GraphWildCardLabel
    |             |             | |             | |   | | |     +-GraphLabelNaryExpr
    |             |             | |             | |   | | |       +-op=NOT
    |             |             | |             | |   | | |       +-operand_list=
    |             |             | |             | |   | | |         +-GraphWildCardLabel
    |             |             | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
    |             |             | |             | |   | | +-orientation=RIGHT
    |             |             | |             | |   | +-GraphNodeScan
    |             |             | |             | |   |   +-column_list=[$element_table.x#8]
    |             |             | |             | |   |   +-label_expr=
    |             |             | |             | |   |   | +-GraphLabelNaryExpr
    |             |             | |             | |   |   |   +-op=OR
    |             |             | |             | |   |   |   +-operand_list=
    |             |             | |             | |   |   |     +-GraphWildCardLabel
    |             |             | |             | |   |   |     +-GraphLabelNaryExpr
    |             |             | |             | |   |   |       +-op=NOT
    |             |             | |             | |   |   |       +-operand_list=
    |             |             | |             | |   |   |         +-GraphWildCardLabel
    |             |             | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |             | |   +-head=$element_table.m#6
    |             |             | |             | |   +-tail=$element_table.x#8
    |             |             | |             | +-filter_expr=
    |             |             | |             | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
    |             |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4, is_correlated=TRUE)
    |             |             | |             | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#6)
    |             |             | |             | +-input_scan=
    |             |             | |             |   +-SingleRowScan
    |             |             | |             +-ProjectScan
    |             |             | |               +-column_list=[$graph_table.y#10]
    |             |             | |               +-expr_list=
    |             |             | |               | +-y#10 :=
    |             |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |             |             | |               |     +-ColumnRef(type=INT64, column=$graph_table.$agg1#9)
    |             |             | |               |     +-ColumnRef(type=INT64, column=$graph_table.outer_col#5, is_correlated=TRUE)
    |             |             | |               +-input_scan=
    |             |             | |                 +-AggregateScan
    |             |             | |                   +-column_list=[$graph_table.$agg1#9]
    |             |             | |                   +-input_scan=
    |             |             | |                   | +-GraphRefScan(column_list=$element_table.[$element2#7, x#8])
    |             |             | |                   +-aggregate_list=
    |             |             | |                     +-$agg1#9 :=
    |             |             | |                       +-AggregateFunctionCall(ZetaSQL:count(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> INT64)
    |             |             | |                         +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#8)
    |             |             | +-input_scan=
    |             |             | | +-GraphRefScan(column_list=[$element_table.n#2, $element_table.$element1#3, $element_table.m#4, $graph_table.outer_col#5])
    |             |             | +-parameter_list=
    |             |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
    |             |             |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.m#4)
    |             |             |   +-ColumnRef(type=INT64, column=$graph_table.outer_col#5)
    |             |             +-ProjectScan
    |             |               +-column_list=$graph_table.[n_age#11, y#12]
    |             |               +-expr_list=
    |             |               | +-n_age#11 :=
    |             |               | | +-GraphGetElementProperty
    |             |               | |   +-type=UINT32
    |             |               | |   +-expr=
    |             |               | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
    |             |               | |   +-property=age(UINT32)
    |             |               | +-y#12 := ColumnRef(type=INT64, column=$graph_table.y#10)
    |             |               +-input_scan=
    |             |                 +-GraphRefScan(column_list=[$element_table.n#2, $element_table.$element1#3, $element_table.m#4, $graph_table.outer_col#5, $graph_table.y#10])
    |             +-aggregate_list=
    |               +-$agg1#13 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-ProjectScan
        +-column_list=[t.outermost_col#1]
        +-expr_list=
        | +-outermost_col#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

# Group variables maintain their "group" status. They can be used in horizontal
# aggregation in the subquery.
select gt.* from
graph_table(aml
  match (n) -[e]->{1, 3} (m)
  CALL (e) {
    MATCH (m) -> (x)
    LET hops2 = count(e)
    return hops2, x.age
  }
  LET hops1 = count(e)
  RETURN hops1, hops2
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.hops1#20 AS hops1 [INT64]
| +-$graph_table.hops2#21 AS hops2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[hops1#20, hops2#21]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[hops1#20, hops2#21]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[hops1#20, hops2#21]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[hops1#20, hops2#21]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.m#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.m#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=3)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.m#10, $graph_table.hops2#16, $graph_table.age#17]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=$graph_table.[hops2#16, age#17]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=$graph_table.[hops2#16, age#17]
                  | |       +-scan_list=
                  | |         +-GraphLinearScan
                  | |           +-column_list=$graph_table.[hops2#16, age#17]
                  | |           +-scan_list=
                  | |             +-GraphScan
                  | |             | +-column_list=$element_table.[m#11, $element3#12, x#13]
                  | |             | +-input_scan_list=
                  | |             | | +-GraphPathScan
                  | |             | |   +-column_list=$element_table.[m#11, $element3#12, x#13]
                  | |             | |   +-input_scan_list=
                  | |             | |   | +-GraphNodeScan
                  | |             | |   | | +-column_list=[$element_table.m#11]
                  | |             | |   | | +-label_expr=
                  | |             | |   | | | +-GraphLabelNaryExpr
                  | |             | |   | | |   +-op=OR
                  | |             | |   | | |   +-operand_list=
                  | |             | |   | | |     +-GraphWildCardLabel
                  | |             | |   | | |     +-GraphLabelNaryExpr
                  | |             | |   | | |       +-op=NOT
                  | |             | |   | | |       +-operand_list=
                  | |             | |   | | |         +-GraphWildCardLabel
                  | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   | +-GraphEdgeScan
                  | |             | |   | | +-column_list=[$element_table.$element3#12]
                  | |             | |   | | +-label_expr=
                  | |             | |   | | | +-GraphLabelNaryExpr
                  | |             | |   | | |   +-op=OR
                  | |             | |   | | |   +-operand_list=
                  | |             | |   | | |     +-GraphWildCardLabel
                  | |             | |   | | |     +-GraphLabelNaryExpr
                  | |             | |   | | |       +-op=NOT
                  | |             | |   | | |       +-operand_list=
                  | |             | |   | | |         +-GraphWildCardLabel
                  | |             | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |             | |   | | +-orientation=RIGHT
                  | |             | |   | +-GraphNodeScan
                  | |             | |   |   +-column_list=[$element_table.x#13]
                  | |             | |   |   +-label_expr=
                  | |             | |   |   | +-GraphLabelNaryExpr
                  | |             | |   |   |   +-op=OR
                  | |             | |   |   |   +-operand_list=
                  | |             | |   |   |     +-GraphWildCardLabel
                  | |             | |   |   |     +-GraphLabelNaryExpr
                  | |             | |   |   |       +-op=NOT
                  | |             | |   |   |       +-operand_list=
                  | |             | |   |   |         +-GraphWildCardLabel
                  | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   +-head=$element_table.m#11
                  | |             | |   +-tail=$element_table.x#13
                  | |             | +-input_scan=
                  | |             |   +-SingleRowScan
                  | |             +-ProjectScan
                  | |             | +-column_list=[$element_table.m#11, $element_table.$element3#12, $element_table.x#13, $graph_table.hops2#15]
                  | |             | +-expr_list=
                  | |             | | +-hops2#15 :=
                  | |             | |   +-ArrayAggregate
                  | |             | |     +-type=INT64
                  | |             | |     +-array=
                  | |             | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6, is_correlated=TRUE)
                  | |             | |     +-element_column=$horizontal_aggregate.e#14
                  | |             | |     +-aggregate=
                  | |             | |       +-AggregateFunctionCall(ZetaSQL:count(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> INT64)
                  | |             | |         +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#14)
                  | |             | +-input_scan=
                  | |             |   +-GraphRefScan(column_list=$element_table.[m#11, $element3#12, x#13])
                  | |             +-ProjectScan
                  | |               +-column_list=$graph_table.[hops2#16, age#17]
                  | |               +-expr_list=
                  | |               | +-hops2#16 := ColumnRef(type=INT64, column=$graph_table.hops2#15)
                  | |               | +-age#17 :=
                  | |               |   +-GraphGetElementProperty
                  | |               |     +-type=UINT32
                  | |               |     +-expr=
                  | |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.x#13)
                  | |               |     +-property=age(UINT32)
                  | |               +-input_scan=
                  | |                 +-GraphRefScan(column_list=[$element_table.m#11, $element_table.$element3#12, $element_table.x#13, $graph_table.hops2#15])
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[n#1, e#6, m#10])
                  | +-parameter_list=
                  |   +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.m#10, $graph_table.hops2#16, $graph_table.age#17, $graph_table.hops1#19]
                  | +-expr_list=
                  | | +-hops1#19 :=
                  | |   +-ArrayAggregate
                  | |     +-type=INT64
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  | |     +-element_column=$horizontal_aggregate.e#18
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:count(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> INT64)
                  | |         +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#18)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#6, $element_table.m#10, $graph_table.hops2#16, $graph_table.age#17])
                  +-ProjectScan
                    +-column_list=$graph_table.[hops1#20, hops2#21]
                    +-expr_list=
                    | +-hops1#20 := ColumnRef(type=INT64, column=$graph_table.hops1#19)
                    | +-hops2#21 := ColumnRef(type=INT64, column=$graph_table.hops2#16)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#6, $element_table.m#10, $graph_table.hops2#16, $graph_table.age#17, $graph_table.hops1#19])
==

# Group variables maintain their "group" status, especially with multiply-
# declared element resolution.
select gt.* from
graph_table(aml
  match (n) -[e]->{1, 3} (m)
  CALL (e) {
    MATCH (m) -[e]-> (x)
    return x.age
  }
  RETURN age
) gt
--
ERROR: `e` is not a graph element column and cannot be redeclared [at 5:11]
    MATCH (m) -[e]-> (x)
          ^
==

# CALL subquery cannot return names colliding with the input, even with names
# not on the capture list.
select gt.* from
graph_table(aml
  match (n) -[e]->{1, 3} (m)
  CALL (n) {
    match (n) -> (x)
    return count(*) AS {{e|m}}
  }
  RETURN 1 AS one
) gt
--

ALTERNATION GROUP: e
--
ERROR: Ambiguous name: e [at 4:12]
  CALL (n) {
           ^
--
ALTERNATION GROUP: m
--
ERROR: Ambiguous name: m [at 4:12]
  CALL (n) {
           ^
==

# Group variable from the inline subquery maintains its "group" status.
select gt.* from
graph_table(aml
  LET x = 1
  CALL () {
    match (n) -[e]->{3} (x)
    return e
  }
  LET hops = count(e)
  RETURN x, hops
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.x#15 AS x [INT64]
| +-$graph_table.hops#16 AS hops [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#15, hops#16]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#15, hops#16]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#15, hops#16]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#15, hops#16]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=$graph_table.[x#1, e#12]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=[$graph_table.e#12]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=[$graph_table.e#12]
                  | |       +-scan_list=
                  | |         +-GraphLinearScan
                  | |           +-column_list=[$graph_table.e#12]
                  | |           +-scan_list=
                  | |             +-GraphScan
                  | |             | +-column_list=[$element_table.n#2, $path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $element_table.x#11]
                  | |             | +-input_scan_list=
                  | |             | | +-GraphPathScan
                  | |             | |   +-column_list=[$element_table.n#2, $path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10, $element_table.x#11]
                  | |             | |   +-input_scan_list=
                  | |             | |   | +-GraphNodeScan
                  | |             | |   | | +-column_list=[$element_table.n#2]
                  | |             | |   | | +-label_expr=
                  | |             | |   | | | +-GraphLabelNaryExpr
                  | |             | |   | | |   +-op=OR
                  | |             | |   | | |   +-operand_list=
                  | |             | |   | | |     +-GraphWildCardLabel
                  | |             | |   | | |     +-GraphLabelNaryExpr
                  | |             | |   | | |       +-op=NOT
                  | |             | |   | | |       +-operand_list=
                  | |             | |   | | |         +-GraphWildCardLabel
                  | |             | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   | +-GraphPathScan
                  | |             | |   | | +-column_list=[$path_scan.$head#9, $element_table.e#7, $path_scan.$tail#10]
                  | |             | |   | | +-input_scan_list=
                  | |             | |   | | | +-GraphNodeScan
                  | |             | |   | | | | +-column_list=[$element_table.$element1#3]
                  | |             | |   | | | | +-label_expr=
                  | |             | |   | | | | | +-GraphLabelNaryExpr
                  | |             | |   | | | | |   +-op=OR
                  | |             | |   | | | | |   +-operand_list=
                  | |             | |   | | | | |     +-GraphWildCardLabel
                  | |             | |   | | | | |     +-GraphLabelNaryExpr
                  | |             | |   | | | | |       +-op=NOT
                  | |             | |   | | | | |       +-operand_list=
                  | |             | |   | | | | |         +-GraphWildCardLabel
                  | |             | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   | | | +-GraphEdgeScan
                  | |             | |   | | | | +-column_list=[$element_table.e#4]
                  | |             | |   | | | | +-label_expr=
                  | |             | |   | | | | | +-GraphLabelNaryExpr
                  | |             | |   | | | | |   +-op=OR
                  | |             | |   | | | | |   +-operand_list=
                  | |             | |   | | | | |     +-GraphWildCardLabel
                  | |             | |   | | | | |     +-GraphLabelNaryExpr
                  | |             | |   | | | | |       +-op=NOT
                  | |             | |   | | | | |       +-operand_list=
                  | |             | |   | | | | |         +-GraphWildCardLabel
                  | |             | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |             | |   | | | | +-orientation=RIGHT
                  | |             | |   | | | +-GraphNodeScan
                  | |             | |   | | |   +-column_list=[$element_table.$element2#5]
                  | |             | |   | | |   +-label_expr=
                  | |             | |   | | |   | +-GraphLabelNaryExpr
                  | |             | |   | | |   |   +-op=OR
                  | |             | |   | | |   |   +-operand_list=
                  | |             | |   | | |   |     +-GraphWildCardLabel
                  | |             | |   | | |   |     +-GraphLabelNaryExpr
                  | |             | |   | | |   |       +-op=NOT
                  | |             | |   | | |   |       +-operand_list=
                  | |             | |   | | |   |         +-GraphWildCardLabel
                  | |             | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   | | +-head=$path_scan.$head#9
                  | |             | |   | | +-tail=$path_scan.$tail#10
                  | |             | |   | | +-quantifier=
                  | |             | |   | | | +-GraphPathPatternQuantifier
                  | |             | |   | | |   +-lower_bound=
                  | |             | |   | | |   | +-Literal(type=INT64, value=3)
                  | |             | |   | | |   +-upper_bound=
                  | |             | |   | | |     +-Literal(type=INT64, value=3)
                  | |             | |   | | +-group_variable_list=
                  | |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#3, array=$element_table.$element1#6)
                  | |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#4, array=$element_table.e#7)
                  | |             | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#5, array=$element_table.$element2#8)
                  | |             | |   | +-GraphNodeScan
                  | |             | |   |   +-column_list=[$element_table.x#11]
                  | |             | |   |   +-label_expr=
                  | |             | |   |   | +-GraphLabelNaryExpr
                  | |             | |   |   |   +-op=OR
                  | |             | |   |   |   +-operand_list=
                  | |             | |   |   |     +-GraphWildCardLabel
                  | |             | |   |   |     +-GraphLabelNaryExpr
                  | |             | |   |   |       +-op=NOT
                  | |             | |   |   |       +-operand_list=
                  | |             | |   |   |         +-GraphWildCardLabel
                  | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   +-head=$element_table.n#2
                  | |             | |   +-tail=$element_table.x#11
                  | |             | +-input_scan=
                  | |             |   +-SingleRowScan
                  | |             +-ProjectScan
                  | |               +-column_list=[$graph_table.e#12]
                  | |               +-expr_list=
                  | |               | +-e#12 := ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#7)
                  | |               +-input_scan=
                  | |                 +-GraphRefScan(column_list=$element_table.[n#2, e#7, x#11])
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#1])
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#1, e#12, hops#14]
                  | +-expr_list=
                  | | +-hops#14 :=
                  | |   +-ArrayAggregate
                  | |     +-type=INT64
                  | |     +-array=
                  | |     | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.e#12)
                  | |     +-element_column=$horizontal_aggregate.e#13
                  | |     +-aggregate=
                  | |       +-AggregateFunctionCall(ZetaSQL:count(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> INT64)
                  | |         +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#13)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=$graph_table.[x#1, e#12])
                  +-ProjectScan
                    +-column_list=$graph_table.[x#15, hops#16]
                    +-expr_list=
                    | +-x#15 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    | +-hops#16 := ColumnRef(type=INT64, column=$graph_table.hops#14)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[x#1, e#12, hops#14])
==

# CALL on a TVF
select gt.* from
graph_table(aml
  match (n) -[e]->{1, 3} (m)
  {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(n.id)
  RETURN n.id, column_bool
) gt
--

ALTERNATION GROUP: OPTIONAL
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#13 AS id [INT64]
| +-$graph_table.column_bool#14 AS column_bool [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#13, column_bool#14]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#13, column_bool#14]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#13, column_bool#14]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#13, column_bool#14]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.m#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.m#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$path_scan.[$head#8, $tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=3)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$element_table.n#1, $element_table.m#10, tvf_exactly_1_int64_arg.column_bool#11, tvf_exactly_1_int64_arg.column_bytes#12]
                  | +-optional=TRUE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#11, column_bytes#12]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-GraphGetElementProperty
                  | |   |       +-type=INT64
                  | |   |       +-expr=
                  | |   |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
                  | |   |       +-property=id(INT64)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[n#1, m#10])
                  | +-parameter_list=
                  |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#13, column_bool#14]
                    +-expr_list=
                    | +-id#13 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=id(INT64)
                    | +-column_bool#14 := ColumnRef(type=BOOL, column=tvf_exactly_1_int64_arg.column_bool#11)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $element_table.m#10, tvf_exactly_1_int64_arg.column_bool#11, tvf_exactly_1_int64_arg.column_bytes#12])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#13 AS id [INT64]
| +-$graph_table.column_bool#14 AS column_bool [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#13, column_bool#14]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#13, column_bool#14]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#13, column_bool#14]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#13, column_bool#14]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.m#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $path_scan.$head#8, $path_scan.$tail#9, $element_table.m#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=$path_scan.[$head#8, $tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=1)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=3)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.m#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.m#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$element_table.n#1, $element_table.m#10, tvf_exactly_1_int64_arg.column_bool#11, tvf_exactly_1_int64_arg.column_bytes#12]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#11, column_bytes#12]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-GraphGetElementProperty
                  | |   |       +-type=INT64
                  | |   |       +-expr=
                  | |   |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1, is_correlated=TRUE)
                  | |   |       +-property=id(INT64)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[n#1, m#10])
                  | +-parameter_list=
                  |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#13, column_bool#14]
                    +-expr_list=
                    | +-id#13 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=id(INT64)
                    | +-column_bool#14 := ColumnRef(type=BOOL, column=tvf_exactly_1_int64_arg.column_bool#11)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $element_table.m#10, tvf_exactly_1_int64_arg.column_bool#11, tvf_exactly_1_int64_arg.column_bytes#12])
==

# CALL on a TVF needs YIELD to avoid collisions
select gt.* from
graph_table(aml
  LET column_bool = 1
  {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(column_bool){{| YIELD column_bool AS y}}
  RETURN 1 AS one
) gt
--

ALTERNATION GROUP: OPTIONAL,
--
ERROR: Ambiguous name: column_bool [at 4:17]
  OPTIONAL CALL tvf_exactly_1_int64_arg(column_bool)
                ^
--
ALTERNATION GROUP: OPTIONAL, YIELD column_bool AS y
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.column_bool#1]
                  | +-expr_list=
                  | | +-column_bool#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3]
                  | +-optional=TRUE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#2, column_bytes#3]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-ColumnRef(type=INT64, column=$graph_table.column_bool#1, is_correlated=TRUE)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.column_bool#1])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.column_bool#1)
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2])
--
ALTERNATION GROUP: <empty>
--
ERROR: Ambiguous name: column_bool [at 4:9]
   CALL tvf_exactly_1_int64_arg(column_bool)
        ^
--
ALTERNATION GROUP:  YIELD column_bool AS y
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.column_bool#1]
                  | +-expr_list=
                  | | +-column_bool#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#2, column_bytes#3]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-ColumnRef(type=INT64, column=$graph_table.column_bool#1, is_correlated=TRUE)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.column_bool#1])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.column_bool#1)
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2])
==

# YIELD cannot have conflict with the input working table
select gt.* from
graph_table(aml
  LET column_bool = 1
  {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(column_bool)
    YIELD column_bool AS x
  RETURN *
) gt
--

ALTERNATION GROUP: OPTIONAL
--
QueryStmt
+-output_column_list=
| +-$graph_table.column_bool#4 AS column_bool [INT64]
| +-$graph_table.x#5 AS x [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[column_bool#4, x#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[column_bool#4, x#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[column_bool#4, x#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[column_bool#4, x#5]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.column_bool#1]
                  | +-expr_list=
                  | | +-column_bool#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3]
                  | +-optional=TRUE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#2, column_bytes#3]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-ColumnRef(type=INT64, column=$graph_table.column_bool#1, is_correlated=TRUE)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.column_bool#1])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.column_bool#1)
                  +-ProjectScan
                    +-column_list=$graph_table.[column_bool#4, x#5]
                    +-expr_list=
                    | +-column_bool#4 := ColumnRef(type=INT64, column=$graph_table.column_bool#1)
                    | +-x#5 := ColumnRef(type=BOOL, column=tvf_exactly_1_int64_arg.column_bool#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.column_bool#4 AS column_bool [INT64]
| +-$graph_table.x#5 AS x [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[column_bool#4, x#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[column_bool#4, x#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[column_bool#4, x#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[column_bool#4, x#5]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.column_bool#1]
                  | +-expr_list=
                  | | +-column_bool#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#2, column_bytes#3]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-ColumnRef(type=INT64, column=$graph_table.column_bool#1, is_correlated=TRUE)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.column_bool#1])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.column_bool#1)
                  +-ProjectScan
                    +-column_list=$graph_table.[column_bool#4, x#5]
                    +-expr_list=
                    | +-column_bool#4 := ColumnRef(type=INT64, column=$graph_table.column_bool#1)
                    | +-x#5 := ColumnRef(type=BOOL, column=tvf_exactly_1_int64_arg.column_bool#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.column_bool#1, tvf_exactly_1_int64_arg.column_bool#2])
==

# YIELD cannot have duplicates
select gt.* from
graph_table(aml
  LET column_bool = 1
  {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(column_bool) YIELD column_bool, {{column_bool|column_bytes AS column_bool}}
  RETURN *
) gt
--

ALTERNATION GROUP: OPTIONAL,column_bool
--
ERROR: Name column_bool is already specified in the TVF output [at 4:73]
...column_bool) YIELD column_bool, column_bool
                                   ^
--
ALTERNATION GROUP: OPTIONAL,column_bytes AS column_bool
--
ERROR: Name column_bool is already specified in the TVF output [at 4:86]
...column_bool) YIELD column_bool, column_bytes AS column_bool
                                                ^
--
ALTERNATION GROUP: column_bool
--
ERROR: Name column_bool is already specified in the TVF output [at 4:65]
   CALL tvf_exactly_1_int64_arg(column_bool) YIELD column_bool, column_bool
                                                                ^
--
ALTERNATION GROUP: column_bytes AS column_bool
--
ERROR: Name column_bool is already specified in the TVF output [at 4:78]
...column_bool) YIELD column_bool, column_bytes AS column_bool
                                                ^
==

# No table arg is implicitly passed, because there's no PER clause
select gt.* from
graph_table(aml
  LET x = 1
  {{OPTIONAL|}} CALL tvf_one_relation_arg_with_fixed_output() YIELD column_bool
  RETURN *
) gt
--

ALTERNATION GROUP: OPTIONAL
--
ERROR: No matching signature for tvf_one_relation_arg_with_fixed_output with no arguments
  Signature: TVF_ONE_RELATION_ARG_WITH_FIXED_OUTPUT(TABLE)
    Signature requires at least 1 argument, found 0 arguments [at 4:17]
  OPTIONAL CALL tvf_one_relation_arg_with_fixed_output() YIELD column_bool
                ^
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for tvf_one_relation_arg_with_fixed_output with no arguments
  Signature: TVF_ONE_RELATION_ARG_WITH_FIXED_OUTPUT(TABLE)
    Signature requires at least 1 argument, found 0 arguments [at 4:9]
   CALL tvf_one_relation_arg_with_fixed_output() YIELD column_bool
        ^
==

# YIELD can only reference columns from the TVF's output.
SELECT (
  select count(*)
  from graph_table(aml
    LET inner_col = 1
    {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(1) YIELD {{inner_col|outer_col}} AS y
    return *
  ) gt
) FROM (SELECT 1 AS outer_col)
--

ALTERNATION GROUP: OPTIONAL,inner_col
--
ERROR: Name inner_col not found in the TVF output [at 5:52]
    OPTIONAL CALL tvf_exactly_1_int64_arg(1) YIELD inner_col AS y
                                                   ^
--
ALTERNATION GROUP: OPTIONAL,outer_col
--
ERROR: Name outer_col not found in the TVF output [at 5:52]
    OPTIONAL CALL tvf_exactly_1_int64_arg(1) YIELD outer_col AS y
                                                   ^
--
ALTERNATION GROUP: inner_col
--
ERROR: Name inner_col not found in the TVF output [at 5:44]
     CALL tvf_exactly_1_int64_arg(1) YIELD inner_col AS y
                                           ^
--
ALTERNATION GROUP: outer_col
--
ERROR: Name outer_col not found in the TVF output [at 5:44]
     CALL tvf_exactly_1_int64_arg(1) YIELD outer_col AS y
                                           ^
==

# Outer/correlated columns can be used as args.
SELECT (
  select count(*)
  from graph_table(aml
    match (n)
    {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(outer_col)
    return n.age, column_bool
  ) gt
) FROM UNNEST([1, 2]) AS outer_col
--

ALTERNATION GROUP: OPTIONAL
--
QueryStmt
+-output_column_list=
| +-$query.$col1#8 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#8]
    +-expr_list=
    | +-$col1#8 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=$array.outer_col#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#7]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#7]
    |             +-input_scan=
    |             | +-GraphTableScan
    |             |   +-column_list=$graph_table.[age#5, column_bool#6]
    |             |   +-property_graph=aml
    |             |   +-input_scan=
    |             |     +-GraphLinearScan
    |             |       +-column_list=$graph_table.[age#5, column_bool#6]
    |             |       +-scan_list=
    |             |         +-GraphLinearScan
    |             |           +-column_list=$graph_table.[age#5, column_bool#6]
    |             |           +-scan_list=
    |             |             +-GraphScan
    |             |             | +-column_list=[$element_table.n#2]
    |             |             | +-input_scan_list=
    |             |             | | +-GraphPathScan
    |             |             | |   +-column_list=[$element_table.n#2]
    |             |             | |   +-input_scan_list=
    |             |             | |   | +-GraphNodeScan
    |             |             | |   |   +-column_list=[$element_table.n#2]
    |             |             | |   |   +-label_expr=
    |             |             | |   |   | +-GraphLabelNaryExpr
    |             |             | |   |   |   +-op=OR
    |             |             | |   |   |   +-operand_list=
    |             |             | |   |   |     +-GraphWildCardLabel
    |             |             | |   |   |     +-GraphLabelNaryExpr
    |             |             | |   |   |       +-op=NOT
    |             |             | |   |   |       +-operand_list=
    |             |             | |   |   |         +-GraphWildCardLabel
    |             |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |   +-head=$element_table.n#2
    |             |             | |   +-tail=$element_table.n#2
    |             |             | +-input_scan=
    |             |             |   +-SingleRowScan
    |             |             +-GraphCallScan
    |             |             | +-column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4]
    |             |             | +-optional=TRUE
    |             |             | +-subquery=
    |             |             | | +-TVFScan
    |             |             | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4]
    |             |             | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
    |             |             | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
    |             |             | |   +-argument_list=
    |             |             | |   | +-FunctionArgument
    |             |             | |   |   +-expr=
    |             |             | |   |     +-ColumnRef(type=INT64, column=$array.outer_col#1, is_correlated=TRUE)
    |             |             | |   +-column_index_list=[0, 1]
    |             |             | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
    |             |             | +-input_scan=
    |             |             | | +-GraphRefScan(column_list=[$element_table.n#2])
    |             |             | +-parameter_list=
    |             |             |   +-ColumnRef(type=INT64, column=$array.outer_col#1, is_correlated=TRUE)
    |             |             +-ProjectScan
    |             |               +-column_list=$graph_table.[age#5, column_bool#6]
    |             |               +-expr_list=
    |             |               | +-age#5 :=
    |             |               | | +-GraphGetElementProperty
    |             |               | |   +-type=UINT32
    |             |               | |   +-expr=
    |             |               | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
    |             |               | |   +-property=age(UINT32)
    |             |               | +-column_bool#6 := ColumnRef(type=BOOL, column=tvf_exactly_1_int64_arg.column_bool#3)
    |             |               +-input_scan=
    |             |                 +-GraphRefScan(column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4])
    |             +-aggregate_list=
    |               +-$agg1#7 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.outer_col#1]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.outer_col#1]
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#8 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#8]
    +-expr_list=
    | +-$col1#8 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=$array.outer_col#1)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#7]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#7]
    |             +-input_scan=
    |             | +-GraphTableScan
    |             |   +-column_list=$graph_table.[age#5, column_bool#6]
    |             |   +-property_graph=aml
    |             |   +-input_scan=
    |             |     +-GraphLinearScan
    |             |       +-column_list=$graph_table.[age#5, column_bool#6]
    |             |       +-scan_list=
    |             |         +-GraphLinearScan
    |             |           +-column_list=$graph_table.[age#5, column_bool#6]
    |             |           +-scan_list=
    |             |             +-GraphScan
    |             |             | +-column_list=[$element_table.n#2]
    |             |             | +-input_scan_list=
    |             |             | | +-GraphPathScan
    |             |             | |   +-column_list=[$element_table.n#2]
    |             |             | |   +-input_scan_list=
    |             |             | |   | +-GraphNodeScan
    |             |             | |   |   +-column_list=[$element_table.n#2]
    |             |             | |   |   +-label_expr=
    |             |             | |   |   | +-GraphLabelNaryExpr
    |             |             | |   |   |   +-op=OR
    |             |             | |   |   |   +-operand_list=
    |             |             | |   |   |     +-GraphWildCardLabel
    |             |             | |   |   |     +-GraphLabelNaryExpr
    |             |             | |   |   |       +-op=NOT
    |             |             | |   |   |       +-operand_list=
    |             |             | |   |   |         +-GraphWildCardLabel
    |             |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
    |             |             | |   +-head=$element_table.n#2
    |             |             | |   +-tail=$element_table.n#2
    |             |             | +-input_scan=
    |             |             |   +-SingleRowScan
    |             |             +-GraphCallScan
    |             |             | +-column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4]
    |             |             | +-optional=FALSE
    |             |             | +-subquery=
    |             |             | | +-TVFScan
    |             |             | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4]
    |             |             | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
    |             |             | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
    |             |             | |   +-argument_list=
    |             |             | |   | +-FunctionArgument
    |             |             | |   |   +-expr=
    |             |             | |   |     +-ColumnRef(type=INT64, column=$array.outer_col#1, is_correlated=TRUE)
    |             |             | |   +-column_index_list=[0, 1]
    |             |             | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
    |             |             | +-input_scan=
    |             |             | | +-GraphRefScan(column_list=[$element_table.n#2])
    |             |             | +-parameter_list=
    |             |             |   +-ColumnRef(type=INT64, column=$array.outer_col#1, is_correlated=TRUE)
    |             |             +-ProjectScan
    |             |               +-column_list=$graph_table.[age#5, column_bool#6]
    |             |               +-expr_list=
    |             |               | +-age#5 :=
    |             |               | | +-GraphGetElementProperty
    |             |               | |   +-type=UINT32
    |             |               | |   +-expr=
    |             |               | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
    |             |               | |   +-property=age(UINT32)
    |             |               | +-column_bool#6 := ColumnRef(type=BOOL, column=tvf_exactly_1_int64_arg.column_bool#3)
    |             |               +-input_scan=
    |             |                 +-GraphRefScan(column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4])
    |             +-aggregate_list=
    |               +-$agg1#7 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    +-input_scan=
      +-ArrayScan
        +-column_list=[$array.outer_col#1]
        +-array_expr_list=
        | +-Literal(type=ARRAY<INT64>, value=[1, 2])
        +-element_column_list=[$array.outer_col#1]
==

# Names captured in an outer CALL statement count as outer scopes.
select gt.*
from graph_table(aml
  LET x = 1
  CALL (x) {
    match (n)
    {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(x)
    RETURN n.age
  }
  return x, age
) gt
--

ALTERNATION GROUP: OPTIONAL
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#6 AS x [INT64]
| +-$graph_table.age#7 AS age [UINT32]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#6, age#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#6, age#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#6, age#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#6, age#7]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=$graph_table.[x#1, age#5]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=[$graph_table.age#5]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=[$graph_table.age#5]
                  | |       +-scan_list=
                  | |         +-GraphLinearScan
                  | |           +-column_list=[$graph_table.age#5]
                  | |           +-scan_list=
                  | |             +-GraphScan
                  | |             | +-column_list=[$element_table.n#2]
                  | |             | +-input_scan_list=
                  | |             | | +-GraphPathScan
                  | |             | |   +-column_list=[$element_table.n#2]
                  | |             | |   +-input_scan_list=
                  | |             | |   | +-GraphNodeScan
                  | |             | |   |   +-column_list=[$element_table.n#2]
                  | |             | |   |   +-label_expr=
                  | |             | |   |   | +-GraphLabelNaryExpr
                  | |             | |   |   |   +-op=OR
                  | |             | |   |   |   +-operand_list=
                  | |             | |   |   |     +-GraphWildCardLabel
                  | |             | |   |   |     +-GraphLabelNaryExpr
                  | |             | |   |   |       +-op=NOT
                  | |             | |   |   |       +-operand_list=
                  | |             | |   |   |         +-GraphWildCardLabel
                  | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   +-head=$element_table.n#2
                  | |             | |   +-tail=$element_table.n#2
                  | |             | +-input_scan=
                  | |             |   +-SingleRowScan
                  | |             +-GraphCallScan
                  | |             | +-column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4]
                  | |             | +-optional=TRUE
                  | |             | +-subquery=
                  | |             | | +-TVFScan
                  | |             | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4]
                  | |             | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |             | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |             | |   +-argument_list=
                  | |             | |   | +-FunctionArgument
                  | |             | |   |   +-expr=
                  | |             | |   |     +-ColumnRef(type=INT64, column=$graph_table.x#1, is_correlated=TRUE)
                  | |             | |   +-column_index_list=[0, 1]
                  | |             | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |             | +-input_scan=
                  | |             | | +-GraphRefScan(column_list=[$element_table.n#2])
                  | |             | +-parameter_list=
                  | |             |   +-ColumnRef(type=INT64, column=$graph_table.x#1, is_correlated=TRUE)
                  | |             +-ProjectScan
                  | |               +-column_list=[$graph_table.age#5]
                  | |               +-expr_list=
                  | |               | +-age#5 :=
                  | |               |   +-GraphGetElementProperty
                  | |               |     +-type=UINT32
                  | |               |     +-expr=
                  | |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |               |     +-property=age(UINT32)
                  | |               +-input_scan=
                  | |                 +-GraphRefScan(column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4])
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.x#1])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.x#1)
                  +-ProjectScan
                    +-column_list=$graph_table.[x#6, age#7]
                    +-expr_list=
                    | +-x#6 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    | +-age#7 := ColumnRef(type=UINT32, column=$graph_table.age#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[x#1, age#5])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#6 AS x [INT64]
| +-$graph_table.age#7 AS age [UINT32]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#6, age#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#6, age#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#6, age#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#6, age#7]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=$graph_table.[x#1, age#5]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=[$graph_table.age#5]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=[$graph_table.age#5]
                  | |       +-scan_list=
                  | |         +-GraphLinearScan
                  | |           +-column_list=[$graph_table.age#5]
                  | |           +-scan_list=
                  | |             +-GraphScan
                  | |             | +-column_list=[$element_table.n#2]
                  | |             | +-input_scan_list=
                  | |             | | +-GraphPathScan
                  | |             | |   +-column_list=[$element_table.n#2]
                  | |             | |   +-input_scan_list=
                  | |             | |   | +-GraphNodeScan
                  | |             | |   |   +-column_list=[$element_table.n#2]
                  | |             | |   |   +-label_expr=
                  | |             | |   |   | +-GraphLabelNaryExpr
                  | |             | |   |   |   +-op=OR
                  | |             | |   |   |   +-operand_list=
                  | |             | |   |   |     +-GraphWildCardLabel
                  | |             | |   |   |     +-GraphLabelNaryExpr
                  | |             | |   |   |       +-op=NOT
                  | |             | |   |   |       +-operand_list=
                  | |             | |   |   |         +-GraphWildCardLabel
                  | |             | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |             | |   +-head=$element_table.n#2
                  | |             | |   +-tail=$element_table.n#2
                  | |             | +-input_scan=
                  | |             |   +-SingleRowScan
                  | |             +-GraphCallScan
                  | |             | +-column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4]
                  | |             | +-optional=FALSE
                  | |             | +-subquery=
                  | |             | | +-TVFScan
                  | |             | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4]
                  | |             | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |             | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |             | |   +-argument_list=
                  | |             | |   | +-FunctionArgument
                  | |             | |   |   +-expr=
                  | |             | |   |     +-ColumnRef(type=INT64, column=$graph_table.x#1, is_correlated=TRUE)
                  | |             | |   +-column_index_list=[0, 1]
                  | |             | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |             | +-input_scan=
                  | |             | | +-GraphRefScan(column_list=[$element_table.n#2])
                  | |             | +-parameter_list=
                  | |             |   +-ColumnRef(type=INT64, column=$graph_table.x#1, is_correlated=TRUE)
                  | |             +-ProjectScan
                  | |               +-column_list=[$graph_table.age#5]
                  | |               +-expr_list=
                  | |               | +-age#5 :=
                  | |               |   +-GraphGetElementProperty
                  | |               |     +-type=UINT32
                  | |               |     +-expr=
                  | |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#2)
                  | |               |     +-property=age(UINT32)
                  | |               +-input_scan=
                  | |                 +-GraphRefScan(column_list=[$element_table.n#2, tvf_exactly_1_int64_arg.column_bool#3, tvf_exactly_1_int64_arg.column_bytes#4])
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.x#1])
                  | +-parameter_list=
                  |   +-ColumnRef(type=INT64, column=$graph_table.x#1)
                  +-ProjectScan
                    +-column_list=$graph_table.[x#6, age#7]
                    +-expr_list=
                    | +-x#6 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    | +-age#7 := ColumnRef(type=UINT32, column=$graph_table.age#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[x#1, age#5])
==

# TVF where none of the output columns are referenced. Test to ensure we get
# a valid tree and that SqlBuilder runs successfully.
select gt.*
from graph_table(aml
  LET x = 1
  {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(1)
  return x
) gt
--
ALTERNATION GROUP: OPTIONAL
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#4 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.x#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.x#4]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.x#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3]
                  | +-optional=TRUE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#2, column_bytes#3]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(literal INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-Literal(type=INT64, value=1)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#1])
                  +-ProjectScan
                    +-column_list=[$graph_table.x#4]
                    +-expr_list=
                    | +-x#4 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.x#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#4 AS x [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.x#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.x#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.x#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.x#4]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.x#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#2, column_bytes#3]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(literal INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-Literal(type=INT64, value=1)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#1])
                  +-ProjectScan
                    +-column_list=[$graph_table.x#4]
                    +-expr_list=
                    | +-x#4 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.x#1, tvf_exactly_1_int64_arg.column_bool#2, tvf_exactly_1_int64_arg.column_bytes#3])
==

# CALL tvf as the first statment.
SELECT gt.* FROM
  graph_table(aml
    {{OPTIONAL|}} CALL tvf_exactly_1_int64_arg(1)
    return 1 AS one
  ) gt
--

ALTERNATION GROUP: OPTIONAL
--
ERROR: OPTIONAL CALL is not supported on an input with no columns defined [at 3:5]
    OPTIONAL CALL tvf_exactly_1_int64_arg(1)
    ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#3 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#3]
                +-scan_list=
                  +-GraphCallScan
                  | +-column_list=tvf_exactly_1_int64_arg.[column_bool#1, column_bytes#2]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#1, column_bytes#2]
                  | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(literal INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument
                  | |   |   +-expr=
                  | |   |     +-Literal(type=INT64, value=1)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#3]
                    +-expr_list=
                    | +-one#3 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=tvf_exactly_1_int64_arg.[column_bool#1, column_bytes#2])
==

# Ensure DML columns are handled properly through SqlBuilder, and that it is
# consistently handling their aliases.
# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
DELETE FROM KeyValue WHERE
  (
    SELECT gt.* FROM
    graph_table(aml
      CALL tvf_exactly_1_int64_arg(key)
      return true AS b
    ) gt
  )
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=SCALAR
    +-parameter_list=
    | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    +-subquery=
      +-ProjectScan
        +-column_list=[$graph_table.b#5]
        +-input_scan=
          +-GraphTableScan
            +-column_list=[$graph_table.b#5]
            +-property_graph=aml
            +-input_scan=
              +-GraphLinearScan
                +-column_list=[$graph_table.b#5]
                +-scan_list=
                  +-GraphLinearScan
                    +-column_list=[$graph_table.b#5]
                    +-scan_list=
                      +-GraphCallScan
                      | +-column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4]
                      | +-optional=FALSE
                      | +-subquery=
                      | | +-TVFScan
                      | |   +-column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4]
                      | |   +-tvf=tvf_exactly_1_int64_arg((INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                      | |   +-signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                      | |   +-argument_list=
                      | |   | +-FunctionArgument
                      | |   |   +-expr=
                      | |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      | |   +-column_index_list=[0, 1]
                      | |   +-function_call_signature=(INT64) -> TABLE<column_bool BOOL, column_bytes BYTES>
                      | +-input_scan=
                      | | +-SingleRowScan
                      | +-parameter_list=
                      |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      +-ProjectScan
                        +-column_list=[$graph_table.b#5]
                        +-expr_list=
                        | +-b#5 := Literal(type=BOOL, value=true)
                        +-input_scan=
                          +-GraphRefScan(column_list=tvf_exactly_1_int64_arg.[column_bool#3, column_bytes#4])
==

# Same as above, but with Subquery.
# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
DELETE FROM KeyValue WHERE
  (
    SELECT gt.* FROM
    graph_table(aml
      CALL (key) {
        CALL (key) {
          return key + 1 AS other
        }
        return other
      }
      return true AS b
    ) gt
  )
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$graph_table.b#5]
        +-input_scan=
          +-GraphTableScan
            +-column_list=[$graph_table.b#5]
            +-property_graph=aml
            +-input_scan=
              +-GraphLinearScan
                +-column_list=[$graph_table.b#5]
                +-scan_list=
                  +-GraphLinearScan
                    +-column_list=[$graph_table.b#5]
                    +-scan_list=
                      +-GraphCallScan
                      | +-column_list=[$graph_table.other#4]
                      | +-optional=FALSE
                      | +-subquery=
                      | | +-GraphTableScan
                      | |   +-column_list=[$graph_table.other#4]
                      | |   +-property_graph=aml
                      | |   +-input_scan=
                      | |     +-GraphLinearScan
                      | |       +-column_list=[$graph_table.other#4]
                      | |       +-scan_list=
                      | |         +-GraphLinearScan
                      | |           +-column_list=[$graph_table.other#4]
                      | |           +-scan_list=
                      | |             +-GraphCallScan
                      | |             | +-column_list=[$graph_table.other#3]
                      | |             | +-optional=FALSE
                      | |             | +-subquery=
                      | |             | | +-GraphTableScan
                      | |             | |   +-column_list=[$graph_table.other#3]
                      | |             | |   +-property_graph=aml
                      | |             | |   +-input_scan=
                      | |             | |     +-GraphLinearScan
                      | |             | |       +-column_list=[$graph_table.other#3]
                      | |             | |       +-scan_list=
                      | |             | |         +-GraphLinearScan
                      | |             | |           +-column_list=[$graph_table.other#3]
                      | |             | |           +-scan_list=
                      | |             | |             +-ProjectScan
                      | |             | |               +-column_list=[$graph_table.other#3]
                      | |             | |               +-expr_list=
                      | |             | |               | +-other#3 :=
                      | |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      | |             | |               |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      | |             | |               |     +-Literal(type=INT64, value=1)
                      | |             | |               +-input_scan=
                      | |             | |                 +-SingleRowScan
                      | |             | +-input_scan=
                      | |             | | +-SingleRowScan
                      | |             | +-parameter_list=
                      | |             |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      | |             +-ProjectScan
                      | |               +-column_list=[$graph_table.other#4]
                      | |               +-expr_list=
                      | |               | +-other#4 := ColumnRef(type=INT64, column=$graph_table.other#3)
                      | |               +-input_scan=
                      | |                 +-GraphRefScan(column_list=[$graph_table.other#3])
                      | +-input_scan=
                      | | +-SingleRowScan
                      | +-parameter_list=
                      |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      +-ProjectScan
                        +-column_list=[$graph_table.b#5]
                        +-expr_list=
                        | +-b#5 := Literal(type=BOOL, value=true)
                        +-input_scan=
                          +-GraphRefScan(column_list=[$graph_table.other#4])
==

# Same as above, but with Subquery.
# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
DELETE FROM KeyValue WHERE
  (
    SELECT gt.* FROM
    graph_table(aml
      CALL (key) {
        CALL (key) {
          return key + 1 AS other
        }
        return other
      }
      return true AS b
    ) gt
  )
--
DeleteStmt
+-table_scan=
| +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
+-column_access_list=READ
+-where_expr=
  +-SubqueryExpr
    +-type=BOOL
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$graph_table.b#5]
        +-input_scan=
          +-GraphTableScan
            +-column_list=[$graph_table.b#5]
            +-property_graph=aml
            +-input_scan=
              +-GraphLinearScan
                +-column_list=[$graph_table.b#5]
                +-scan_list=
                  +-GraphLinearScan
                    +-column_list=[$graph_table.b#5]
                    +-scan_list=
                      +-GraphCallScan
                      | +-column_list=[$graph_table.other#4]
                      | +-optional=FALSE
                      | +-subquery=
                      | | +-GraphTableScan
                      | |   +-column_list=[$graph_table.other#4]
                      | |   +-property_graph=aml
                      | |   +-input_scan=
                      | |     +-GraphLinearScan
                      | |       +-column_list=[$graph_table.other#4]
                      | |       +-scan_list=
                      | |         +-GraphLinearScan
                      | |           +-column_list=[$graph_table.other#4]
                      | |           +-scan_list=
                      | |             +-GraphCallScan
                      | |             | +-column_list=[$graph_table.other#3]
                      | |             | +-optional=FALSE
                      | |             | +-subquery=
                      | |             | | +-GraphTableScan
                      | |             | |   +-column_list=[$graph_table.other#3]
                      | |             | |   +-property_graph=aml
                      | |             | |   +-input_scan=
                      | |             | |     +-GraphLinearScan
                      | |             | |       +-column_list=[$graph_table.other#3]
                      | |             | |       +-scan_list=
                      | |             | |         +-GraphLinearScan
                      | |             | |           +-column_list=[$graph_table.other#3]
                      | |             | |           +-scan_list=
                      | |             | |             +-ProjectScan
                      | |             | |               +-column_list=[$graph_table.other#3]
                      | |             | |               +-expr_list=
                      | |             | |               | +-other#3 :=
                      | |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                      | |             | |               |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      | |             | |               |     +-Literal(type=INT64, value=1)
                      | |             | |               +-input_scan=
                      | |             | |                 +-SingleRowScan
                      | |             | +-input_scan=
                      | |             | | +-SingleRowScan
                      | |             | +-parameter_list=
                      | |             |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      | |             +-ProjectScan
                      | |               +-column_list=[$graph_table.other#4]
                      | |               +-expr_list=
                      | |               | +-other#4 := ColumnRef(type=INT64, column=$graph_table.other#3)
                      | |               +-input_scan=
                      | |                 +-GraphRefScan(column_list=[$graph_table.other#3])
                      | +-input_scan=
                      | | +-SingleRowScan
                      | +-parameter_list=
                      |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                      +-ProjectScan
                        +-column_list=[$graph_table.b#5]
                        +-expr_list=
                        | +-b#5 := Literal(type=BOOL, value=true)
                        +-input_scan=
                          +-GraphRefScan(column_list=[$graph_table.other#4])
==

# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
UPDATE KeyValue SET
  key=1,
  value=(
    SELECT gt.* FROM
    graph_table(aml
      CALL (key) {
        CALL (key) {
          return key + 1 AS other
        }
        return other
      }
      return "a" AS a
    ) gt
  )
WHERE (
    SELECT gt.* FROM
    graph_table(aml
      CALL (key) {
        CALL (key) {
          return key + 1 AS other
        }
        return other
      }
      return true AS b
    ) gt
  )
--
UpdateStmt
+-table_scan=
| +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
+-column_access_list=READ_WRITE,WRITE
+-where_expr=
| +-SubqueryExpr
|   +-type=BOOL
|   +-subquery_type=SCALAR
|   +-subquery=
|     +-ProjectScan
|       +-column_list=[$graph_table.b#5]
|       +-input_scan=
|         +-GraphTableScan
|           +-column_list=[$graph_table.b#5]
|           +-property_graph=aml
|           +-input_scan=
|             +-GraphLinearScan
|               +-column_list=[$graph_table.b#5]
|               +-scan_list=
|                 +-GraphLinearScan
|                   +-column_list=[$graph_table.b#5]
|                   +-scan_list=
|                     +-GraphCallScan
|                     | +-column_list=[$graph_table.other#4]
|                     | +-optional=FALSE
|                     | +-subquery=
|                     | | +-GraphTableScan
|                     | |   +-column_list=[$graph_table.other#4]
|                     | |   +-property_graph=aml
|                     | |   +-input_scan=
|                     | |     +-GraphLinearScan
|                     | |       +-column_list=[$graph_table.other#4]
|                     | |       +-scan_list=
|                     | |         +-GraphLinearScan
|                     | |           +-column_list=[$graph_table.other#4]
|                     | |           +-scan_list=
|                     | |             +-GraphCallScan
|                     | |             | +-column_list=[$graph_table.other#3]
|                     | |             | +-optional=FALSE
|                     | |             | +-subquery=
|                     | |             | | +-GraphTableScan
|                     | |             | |   +-column_list=[$graph_table.other#3]
|                     | |             | |   +-property_graph=aml
|                     | |             | |   +-input_scan=
|                     | |             | |     +-GraphLinearScan
|                     | |             | |       +-column_list=[$graph_table.other#3]
|                     | |             | |       +-scan_list=
|                     | |             | |         +-GraphLinearScan
|                     | |             | |           +-column_list=[$graph_table.other#3]
|                     | |             | |           +-scan_list=
|                     | |             | |             +-ProjectScan
|                     | |             | |               +-column_list=[$graph_table.other#3]
|                     | |             | |               +-expr_list=
|                     | |             | |               | +-other#3 :=
|                     | |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
|                     | |             | |               |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
|                     | |             | |               |     +-Literal(type=INT64, value=1)
|                     | |             | |               +-input_scan=
|                     | |             | |                 +-SingleRowScan
|                     | |             | +-input_scan=
|                     | |             | | +-SingleRowScan
|                     | |             | +-parameter_list=
|                     | |             |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
|                     | |             +-ProjectScan
|                     | |               +-column_list=[$graph_table.other#4]
|                     | |               +-expr_list=
|                     | |               | +-other#4 := ColumnRef(type=INT64, column=$graph_table.other#3)
|                     | |               +-input_scan=
|                     | |                 +-GraphRefScan(column_list=[$graph_table.other#3])
|                     | +-input_scan=
|                     | | +-SingleRowScan
|                     | +-parameter_list=
|                     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
|                     +-ProjectScan
|                       +-column_list=[$graph_table.b#5]
|                       +-expr_list=
|                       | +-b#5 := Literal(type=BOOL, value=true)
|                       +-input_scan=
|                         +-GraphRefScan(column_list=[$graph_table.other#4])
+-update_item_list=
  +-UpdateItem
  | +-target=
  | | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  | +-set_value=
  |   +-DMLValue
  |     +-value=
  |       +-Literal(type=INT64, value=1)
  +-UpdateItem
    +-target=
    | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    +-set_value=
      +-DMLValue
        +-value=
          +-SubqueryExpr
            +-type=STRING
            +-subquery_type=SCALAR
            +-subquery=
              +-ProjectScan
                +-column_list=[$graph_table.a#8]
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=[$graph_table.a#8]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=[$graph_table.a#8]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=[$graph_table.a#8]
                            +-scan_list=
                              +-GraphCallScan
                              | +-column_list=[$graph_table.other#7]
                              | +-optional=FALSE
                              | +-subquery=
                              | | +-GraphTableScan
                              | |   +-column_list=[$graph_table.other#7]
                              | |   +-property_graph=aml
                              | |   +-input_scan=
                              | |     +-GraphLinearScan
                              | |       +-column_list=[$graph_table.other#7]
                              | |       +-scan_list=
                              | |         +-GraphLinearScan
                              | |           +-column_list=[$graph_table.other#7]
                              | |           +-scan_list=
                              | |             +-GraphCallScan
                              | |             | +-column_list=[$graph_table.other#6]
                              | |             | +-optional=FALSE
                              | |             | +-subquery=
                              | |             | | +-GraphTableScan
                              | |             | |   +-column_list=[$graph_table.other#6]
                              | |             | |   +-property_graph=aml
                              | |             | |   +-input_scan=
                              | |             | |     +-GraphLinearScan
                              | |             | |       +-column_list=[$graph_table.other#6]
                              | |             | |       +-scan_list=
                              | |             | |         +-GraphLinearScan
                              | |             | |           +-column_list=[$graph_table.other#6]
                              | |             | |           +-scan_list=
                              | |             | |             +-ProjectScan
                              | |             | |               +-column_list=[$graph_table.other#6]
                              | |             | |               +-expr_list=
                              | |             | |               | +-other#6 :=
                              | |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                              | |             | |               |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              | |             | |               |     +-Literal(type=INT64, value=1)
                              | |             | |               +-input_scan=
                              | |             | |                 +-SingleRowScan
                              | |             | +-input_scan=
                              | |             | | +-SingleRowScan
                              | |             | +-parameter_list=
                              | |             |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              | |             +-ProjectScan
                              | |               +-column_list=[$graph_table.other#7]
                              | |               +-expr_list=
                              | |               | +-other#7 := ColumnRef(type=INT64, column=$graph_table.other#6)
                              | |               +-input_scan=
                              | |                 +-GraphRefScan(column_list=[$graph_table.other#6])
                              | +-input_scan=
                              | | +-SingleRowScan
                              | +-parameter_list=
                              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              +-ProjectScan
                                +-column_list=[$graph_table.a#8]
                                +-expr_list=
                                | +-a#8 := Literal(type=STRING, value="a")
                                +-input_scan=
                                  +-GraphRefScan(column_list=[$graph_table.other#7])
==

# CALL with a SetOp in the subquery.
SELECT gt.* FROM
  graph_table(aml
    LET x = 1
    CALL () {
      RETURN 1 AS a
      UNION ALL
      RETURN 2 AS a
    }
    return x, a
  ) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#5 AS x [INT64]
| +-$graph_table.a#6 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[x#5, a#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[x#5, a#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[x#5, a#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[x#5, a#6]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=[$graph_table.x#1]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphCallScan
                  | +-column_list=[$graph_table.x#1, $graph_set_op.a#4]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-GraphTableScan
                  | |   +-column_list=[$graph_set_op.a#4]
                  | |   +-property_graph=aml
                  | |   +-input_scan=
                  | |     +-GraphLinearScan
                  | |       +-column_list=[$graph_set_op.a#4]
                  | |       +-scan_list=
                  | |         +-SetOperationScan
                  | |           +-column_list=[$graph_set_op.a#4]
                  | |           +-op_type=UNION_ALL
                  | |           +-input_item_list=
                  | |           | +-SetOperationItem
                  | |           | | +-scan=
                  | |           | | | +-GraphLinearScan
                  | |           | | |   +-column_list=[$graph_table.a#2]
                  | |           | | |   +-scan_list=
                  | |           | | |     +-ProjectScan
                  | |           | | |       +-column_list=[$graph_table.a#2]
                  | |           | | |       +-expr_list=
                  | |           | | |       | +-a#2 := Literal(type=INT64, value=1)
                  | |           | | |       +-input_scan=
                  | |           | | |         +-SingleRowScan
                  | |           | | +-output_column_list=[$graph_table.a#2]
                  | |           | +-SetOperationItem
                  | |           |   +-scan=
                  | |           |   | +-GraphLinearScan
                  | |           |   |   +-column_list=[$graph_table.a#3]
                  | |           |   |   +-scan_list=
                  | |           |   |     +-ProjectScan
                  | |           |   |       +-column_list=[$graph_table.a#3]
                  | |           |   |       +-expr_list=
                  | |           |   |       | +-a#3 := Literal(type=INT64, value=2)
                  | |           |   |       +-input_scan=
                  | |           |   |         +-SingleRowScan
                  | |           |   +-output_column_list=[$graph_table.a#3]
                  | |           +-column_match_mode=CORRESPONDING
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$graph_table.x#1])
                  +-ProjectScan
                    +-column_list=$graph_table.[x#5, a#6]
                    +-expr_list=
                    | +-x#5 := ColumnRef(type=INT64, column=$graph_table.x#1)
                    | +-a#6 := ColumnRef(type=INT64, column=$graph_set_op.a#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.x#1, $graph_set_op.a#4])
==

# CALL tvf as the first statment with a graph input.
SELECT gt.* FROM
  graph_table(aml
    {{LET first_statement = false|}}
    {{OPTIONAL|}} CALL tvf_graph()
    return 1 AS one
  ) gt
--
ALTERNATION GROUP: LET first_statement = false,OPTIONAL
--
ERROR: No matching signature for tvf_graph with no arguments
  Signature: TVF_GRAPH(GRAPH)
    Signature requires at least 1 argument, found 0 arguments [at 4:19]
    OPTIONAL CALL tvf_graph()
                  ^
--
ALTERNATION GROUP: LET first_statement = false,
--
ERROR: No matching signature for tvf_graph with no arguments
  Signature: TVF_GRAPH(GRAPH)
    Signature requires at least 1 argument, found 0 arguments [at 4:11]
     CALL tvf_graph()
          ^

--
ALTERNATION GROUP: OPTIONAL
--
ERROR: OPTIONAL CALL is not supported on an input with no columns defined [at 4:5]
    OPTIONAL CALL tvf_graph()
    ^
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#3 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#3]
                +-scan_list=
                  +-GraphCallScan
                  | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                  | +-optional=FALSE
                  | +-subquery=
                  | | +-TVFScan
                  | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                  | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                  | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | |   +-argument_list=
                  | |   | +-FunctionArgument(graph=aml)
                  | |   +-column_index_list=[0, 1]
                  | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#3]
                    +-expr_list=
                    | +-one#3 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
==

# If TVF's first argument isn't a graph then it doesn't work.
SELECT gt.* FROM
  graph_table(aml
    CALL bad_tvf_graph_not_first_argument(3)
    return 1 AS one
  ) gt
--
ERROR: No matching signature for bad_tvf_graph_not_first_argument
  Argument types: INT64
  Signature: BAD_TVF_GRAPH_NOT_FIRST_ARGUMENT(INT64, GRAPH)
    Signature requires at least 2 arguments, found 1 argument [at 3:10]
    CALL bad_tvf_graph_not_first_argument(3)
         ^

==

# NEXT does not allow for CALL with implicit graph args
SELECT gt.* FROM
  graph_table(aml
    LET a = 1
    RETURN a
    NEXT
    {{OPTIONAL|}} CALL tvf_graph()
    return 1 AS one
  ) gt
--
ALTERNATION GROUP: OPTIONAL
--
ERROR: No matching signature for tvf_graph with no arguments
  Signature: TVF_GRAPH(GRAPH)
    Signature requires at least 1 argument, found 0 arguments [at 6:19]
    OPTIONAL CALL tvf_graph()
                  ^
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for tvf_graph with no arguments
  Signature: TVF_GRAPH(GRAPH)
    Signature requires at least 1 argument, found 0 arguments [at 6:11]
     CALL tvf_graph()
          ^

==

# EXIST queries allow CALL with implicit graph args

[no_run_sqlbuilder]
GRAPH aml
RETURN {{EXISTS|VALUE|ARRAY}} { {{|GRAPH aml}} CALL tvf_graph() RETURN 1 AS one } as val

--
ALTERNATION GROUP: EXISTS,
--
ERROR: Match should be the first operator when the graph reference is omitted [at 2:18]
RETURN EXISTS {  CALL tvf_graph() RETURN 1 AS one } as val
                 ^
--
ALTERNATION GROUP: EXISTS,GRAPH aml
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [BOOL]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 :=
                |   +-SubqueryExpr
                |     +-type=BOOL
                |     +-subquery_type=EXISTS
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.one#3]
                |         +-property_graph=aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.one#3]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.one#3]
                |                 +-scan_list=
                |                   +-GraphCallScan
                |                   | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                |                   | +-optional=FALSE
                |                   | +-subquery=
                |                   | | +-TVFScan
                |                   | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                |                   | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                |                   | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                |                   | |   +-argument_list=
                |                   | |   | +-FunctionArgument(graph=aml)
                |                   | |   +-column_index_list=[0, 1]
                |                   | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.one#3]
                |                     +-expr_list=
                |                     | +-one#3 := Literal(type=INT64, value=1)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
                +-input_scan=
                  +-SingleRowScan
--
ALTERNATION GROUP: VALUE,
--
ERROR: Match should be the first operator when the graph reference is omitted [at 2:17]
RETURN VALUE {  CALL tvf_graph() RETURN 1 AS one } as val
                ^
--
ALTERNATION GROUP: VALUE,GRAPH aml
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 :=
                |   +-SubqueryExpr
                |     +-type=INT64
                |     +-subquery_type=SCALAR
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.one#3]
                |         +-property_graph=aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.one#3]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.one#3]
                |                 +-scan_list=
                |                   +-GraphCallScan
                |                   | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                |                   | +-optional=FALSE
                |                   | +-subquery=
                |                   | | +-TVFScan
                |                   | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                |                   | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                |                   | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                |                   | |   +-argument_list=
                |                   | |   | +-FunctionArgument(graph=aml)
                |                   | |   +-column_index_list=[0, 1]
                |                   | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.one#3]
                |                     +-expr_list=
                |                     | +-one#3 := Literal(type=INT64, value=1)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
                +-input_scan=
                  +-SingleRowScan
--
ALTERNATION GROUP: ARRAY,
--
ERROR: Match should be the first operator when the graph reference is omitted [at 2:17]
RETURN ARRAY {  CALL tvf_graph() RETURN 1 AS one } as val
                ^
--
ALTERNATION GROUP: ARRAY,GRAPH aml
--
QueryStmt
+-output_column_list=
| +-$graph_table.val#4 AS val [ARRAY<INT64>]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.val#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.val#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.val#4]
            +-scan_list=
              +-ProjectScan
                +-column_list=[$graph_table.val#4]
                +-expr_list=
                | +-val#4 :=
                |   +-SubqueryExpr
                |     +-type=ARRAY<INT64>
                |     +-subquery_type=ARRAY
                |     +-subquery=
                |       +-GraphTableScan
                |         +-column_list=[$graph_table.one#3]
                |         +-property_graph=aml
                |         +-input_scan=
                |           +-GraphLinearScan
                |             +-column_list=[$graph_table.one#3]
                |             +-scan_list=
                |               +-GraphLinearScan
                |                 +-column_list=[$graph_table.one#3]
                |                 +-scan_list=
                |                   +-GraphCallScan
                |                   | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                |                   | +-optional=FALSE
                |                   | +-subquery=
                |                   | | +-TVFScan
                |                   | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
                |                   | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                |                   | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                |                   | |   +-argument_list=
                |                   | |   | +-FunctionArgument(graph=aml)
                |                   | |   +-column_index_list=[0, 1]
                |                   | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                |                   | +-input_scan=
                |                   |   +-SingleRowScan
                |                   +-ProjectScan
                |                     +-column_list=[$graph_table.one#3]
                |                     +-expr_list=
                |                     | +-one#3 := Literal(type=INT64, value=1)
                |                     +-input_scan=
                |                       +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
                +-input_scan=
                  +-SingleRowScan

==

# EXIST queries from SQL allow CALL with implicit graph args (to match subqeries
# within GQL)

[no_run_sqlbuilder]
select 1 from (select 1 as a)
where exists { graph aml {{|optional}} call tvf_graph() }
--



ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$query.$col1#5 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#5]
    +-expr_list=
    | +-$col1#5 := Literal(type=INT64, value=1)
    +-input_scan=
      +-FilterScan
        +-column_list=[$subquery1.a#1]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.a#1]
        |   +-expr_list=
        |   | +-a#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=EXISTS
            +-subquery=
              +-GraphTableScan
                +-column_list=[$graph_table.literal_true#4]
                +-property_graph=aml
                +-input_scan=
                  +-GraphLinearScan
                    +-column_list=[$graph_table.literal_true#4]
                    +-scan_list=
                      +-GraphLinearScan
                        +-column_list=[$graph_table.literal_true#4]
                        +-scan_list=
                          +-GraphCallScan
                          | +-column_list=tvf_graph.[column_bool#2, column_bytes#3]
                          | +-optional=FALSE
                          | +-subquery=
                          | | +-TVFScan
                          | |   +-column_list=tvf_graph.[column_bool#2, column_bytes#3]
                          | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                          | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                          | |   +-argument_list=
                          | |   | +-FunctionArgument(graph=aml)
                          | |   +-column_index_list=[0, 1]
                          | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                          | +-input_scan=
                          |   +-SingleRowScan
                          +-ProjectScan
                            +-column_list=[$graph_table.literal_true#4]
                            +-expr_list=
                            | +-literal_true#4 := Literal(type=BOOL, value=true)
                            +-input_scan=
                              +-GraphRefScan(column_list=tvf_graph.[column_bool#2, column_bytes#3])
--
ALTERNATION GROUP: optional
--
ERROR: OPTIONAL CALL is not supported on an input with no columns defined [at 2:26]
where exists { graph aml optional call tvf_graph() }
                         ^
==

# In set operations, CALL is only allowed in the first branch because that is
# the first statement

graph aml
call tvf_graph()
return 1 as a
{{UNION ALL|INTERSECT ALL|EXCEPT ALL}}
{{|call tvf_graph()}}
return 2 as a
--
ALTERNATION GROUP: UNION ALL,
--
QueryStmt
+-output_column_list=
| +-$graph_set_op.a#5 AS a [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_set_op.a#5]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_set_op.a#5]
        +-scan_list=
          +-SetOperationScan
            +-column_list=[$graph_set_op.a#5]
            +-op_type=UNION_ALL
            +-input_item_list=
            | +-SetOperationItem
            | | +-scan=
            | | | +-GraphLinearScan
            | | |   +-column_list=[$graph_table.a#3]
            | | |   +-scan_list=
            | | |     +-GraphCallScan
            | | |     | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | +-optional=FALSE
            | | |     | +-subquery=
            | | |     | | +-TVFScan
            | | |     | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            | | |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | |   +-argument_list=
            | | |     | |   | +-FunctionArgument(graph=aml)
            | | |     | |   +-column_index_list=[0, 1]
            | | |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | +-input_scan=
            | | |     |   +-SingleRowScan
            | | |     +-ProjectScan
            | | |       +-column_list=[$graph_table.a#3]
            | | |       +-expr_list=
            | | |       | +-a#3 := Literal(type=INT64, value=1)
            | | |       +-input_scan=
            | | |         +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
            | | +-output_column_list=[$graph_table.a#3]
            | +-SetOperationItem
            |   +-scan=
            |   | +-GraphLinearScan
            |   |   +-column_list=[$graph_table.a#4]
            |   |   +-scan_list=
            |   |     +-ProjectScan
            |   |       +-column_list=[$graph_table.a#4]
            |   |       +-expr_list=
            |   |       | +-a#4 := Literal(type=INT64, value=2)
            |   |       +-input_scan=
            |   |         +-SingleRowScan
            |   +-output_column_list=[$graph_table.a#4]
            +-column_match_mode=CORRESPONDING
--
ALTERNATION GROUP: UNION ALL,call tvf_graph()
--
QueryStmt
+-output_column_list=
| +-$graph_set_op.a#7 AS a [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_set_op.a#7]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_set_op.a#7]
        +-scan_list=
          +-SetOperationScan
            +-column_list=[$graph_set_op.a#7]
            +-op_type=UNION_ALL
            +-input_item_list=
            | +-SetOperationItem
            | | +-scan=
            | | | +-GraphLinearScan
            | | |   +-column_list=[$graph_table.a#3]
            | | |   +-scan_list=
            | | |     +-GraphCallScan
            | | |     | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | +-optional=FALSE
            | | |     | +-subquery=
            | | |     | | +-TVFScan
            | | |     | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            | | |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | |   +-argument_list=
            | | |     | |   | +-FunctionArgument(graph=aml)
            | | |     | |   +-column_index_list=[0, 1]
            | | |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | +-input_scan=
            | | |     |   +-SingleRowScan
            | | |     +-ProjectScan
            | | |       +-column_list=[$graph_table.a#3]
            | | |       +-expr_list=
            | | |       | +-a#3 := Literal(type=INT64, value=1)
            | | |       +-input_scan=
            | | |         +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
            | | +-output_column_list=[$graph_table.a#3]
            | +-SetOperationItem
            |   +-scan=
            |   | +-GraphLinearScan
            |   |   +-column_list=[$graph_table.a#6]
            |   |   +-scan_list=
            |   |     +-GraphCallScan
            |   |     | +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
            |   |     | +-optional=FALSE
            |   |     | +-subquery=
            |   |     | | +-TVFScan
            |   |     | |   +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
            |   |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            |   |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            |   |     | |   +-argument_list=
            |   |     | |   | +-FunctionArgument(graph=aml)
            |   |     | |   +-column_index_list=[0, 1]
            |   |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            |   |     | +-input_scan=
            |   |     |   +-SingleRowScan
            |   |     +-ProjectScan
            |   |       +-column_list=[$graph_table.a#6]
            |   |       +-expr_list=
            |   |       | +-a#6 := Literal(type=INT64, value=2)
            |   |       +-input_scan=
            |   |         +-GraphRefScan(column_list=tvf_graph.[column_bool#4, column_bytes#5])
            |   +-output_column_list=[$graph_table.a#6]
            +-column_match_mode=CORRESPONDING
--
ALTERNATION GROUP: INTERSECT ALL,
--
QueryStmt
+-output_column_list=
| +-$graph_set_op.a#5 AS a [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_set_op.a#5]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_set_op.a#5]
        +-scan_list=
          +-SetOperationScan
            +-column_list=[$graph_set_op.a#5]
            +-op_type=INTERSECT_ALL
            +-input_item_list=
            | +-SetOperationItem
            | | +-scan=
            | | | +-GraphLinearScan
            | | |   +-column_list=[$graph_table.a#3]
            | | |   +-scan_list=
            | | |     +-GraphCallScan
            | | |     | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | +-optional=FALSE
            | | |     | +-subquery=
            | | |     | | +-TVFScan
            | | |     | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            | | |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | |   +-argument_list=
            | | |     | |   | +-FunctionArgument(graph=aml)
            | | |     | |   +-column_index_list=[0, 1]
            | | |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | +-input_scan=
            | | |     |   +-SingleRowScan
            | | |     +-ProjectScan
            | | |       +-column_list=[$graph_table.a#3]
            | | |       +-expr_list=
            | | |       | +-a#3 := Literal(type=INT64, value=1)
            | | |       +-input_scan=
            | | |         +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
            | | +-output_column_list=[$graph_table.a#3]
            | +-SetOperationItem
            |   +-scan=
            |   | +-GraphLinearScan
            |   |   +-column_list=[$graph_table.a#4]
            |   |   +-scan_list=
            |   |     +-ProjectScan
            |   |       +-column_list=[$graph_table.a#4]
            |   |       +-expr_list=
            |   |       | +-a#4 := Literal(type=INT64, value=2)
            |   |       +-input_scan=
            |   |         +-SingleRowScan
            |   +-output_column_list=[$graph_table.a#4]
            +-column_match_mode=CORRESPONDING
--
ALTERNATION GROUP: INTERSECT ALL,call tvf_graph()
--
QueryStmt
+-output_column_list=
| +-$graph_set_op.a#7 AS a [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_set_op.a#7]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_set_op.a#7]
        +-scan_list=
          +-SetOperationScan
            +-column_list=[$graph_set_op.a#7]
            +-op_type=INTERSECT_ALL
            +-input_item_list=
            | +-SetOperationItem
            | | +-scan=
            | | | +-GraphLinearScan
            | | |   +-column_list=[$graph_table.a#3]
            | | |   +-scan_list=
            | | |     +-GraphCallScan
            | | |     | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | +-optional=FALSE
            | | |     | +-subquery=
            | | |     | | +-TVFScan
            | | |     | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            | | |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | |   +-argument_list=
            | | |     | |   | +-FunctionArgument(graph=aml)
            | | |     | |   +-column_index_list=[0, 1]
            | | |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | +-input_scan=
            | | |     |   +-SingleRowScan
            | | |     +-ProjectScan
            | | |       +-column_list=[$graph_table.a#3]
            | | |       +-expr_list=
            | | |       | +-a#3 := Literal(type=INT64, value=1)
            | | |       +-input_scan=
            | | |         +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
            | | +-output_column_list=[$graph_table.a#3]
            | +-SetOperationItem
            |   +-scan=
            |   | +-GraphLinearScan
            |   |   +-column_list=[$graph_table.a#6]
            |   |   +-scan_list=
            |   |     +-GraphCallScan
            |   |     | +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
            |   |     | +-optional=FALSE
            |   |     | +-subquery=
            |   |     | | +-TVFScan
            |   |     | |   +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
            |   |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            |   |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            |   |     | |   +-argument_list=
            |   |     | |   | +-FunctionArgument(graph=aml)
            |   |     | |   +-column_index_list=[0, 1]
            |   |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            |   |     | +-input_scan=
            |   |     |   +-SingleRowScan
            |   |     +-ProjectScan
            |   |       +-column_list=[$graph_table.a#6]
            |   |       +-expr_list=
            |   |       | +-a#6 := Literal(type=INT64, value=2)
            |   |       +-input_scan=
            |   |         +-GraphRefScan(column_list=tvf_graph.[column_bool#4, column_bytes#5])
            |   +-output_column_list=[$graph_table.a#6]
            +-column_match_mode=CORRESPONDING

--
ALTERNATION GROUP: EXCEPT ALL,
--
QueryStmt
+-output_column_list=
| +-$graph_set_op.a#5 AS a [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_set_op.a#5]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_set_op.a#5]
        +-scan_list=
          +-SetOperationScan
            +-column_list=[$graph_set_op.a#5]
            +-op_type=EXCEPT_ALL
            +-input_item_list=
            | +-SetOperationItem
            | | +-scan=
            | | | +-GraphLinearScan
            | | |   +-column_list=[$graph_table.a#3]
            | | |   +-scan_list=
            | | |     +-GraphCallScan
            | | |     | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | +-optional=FALSE
            | | |     | +-subquery=
            | | |     | | +-TVFScan
            | | |     | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            | | |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | |   +-argument_list=
            | | |     | |   | +-FunctionArgument(graph=aml)
            | | |     | |   +-column_index_list=[0, 1]
            | | |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | +-input_scan=
            | | |     |   +-SingleRowScan
            | | |     +-ProjectScan
            | | |       +-column_list=[$graph_table.a#3]
            | | |       +-expr_list=
            | | |       | +-a#3 := Literal(type=INT64, value=1)
            | | |       +-input_scan=
            | | |         +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
            | | +-output_column_list=[$graph_table.a#3]
            | +-SetOperationItem
            |   +-scan=
            |   | +-GraphLinearScan
            |   |   +-column_list=[$graph_table.a#4]
            |   |   +-scan_list=
            |   |     +-ProjectScan
            |   |       +-column_list=[$graph_table.a#4]
            |   |       +-expr_list=
            |   |       | +-a#4 := Literal(type=INT64, value=2)
            |   |       +-input_scan=
            |   |         +-SingleRowScan
            |   +-output_column_list=[$graph_table.a#4]
            +-column_match_mode=CORRESPONDING
--
ALTERNATION GROUP: EXCEPT ALL,call tvf_graph()
--
QueryStmt
+-output_column_list=
| +-$graph_set_op.a#7 AS a [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_set_op.a#7]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_set_op.a#7]
        +-scan_list=
          +-SetOperationScan
            +-column_list=[$graph_set_op.a#7]
            +-op_type=EXCEPT_ALL
            +-input_item_list=
            | +-SetOperationItem
            | | +-scan=
            | | | +-GraphLinearScan
            | | |   +-column_list=[$graph_table.a#3]
            | | |   +-scan_list=
            | | |     +-GraphCallScan
            | | |     | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | +-optional=FALSE
            | | |     | +-subquery=
            | | |     | | +-TVFScan
            | | |     | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
            | | |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            | | |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | |   +-argument_list=
            | | |     | |   | +-FunctionArgument(graph=aml)
            | | |     | |   +-column_index_list=[0, 1]
            | | |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            | | |     | +-input_scan=
            | | |     |   +-SingleRowScan
            | | |     +-ProjectScan
            | | |       +-column_list=[$graph_table.a#3]
            | | |       +-expr_list=
            | | |       | +-a#3 := Literal(type=INT64, value=1)
            | | |       +-input_scan=
            | | |         +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
            | | +-output_column_list=[$graph_table.a#3]
            | +-SetOperationItem
            |   +-scan=
            |   | +-GraphLinearScan
            |   |   +-column_list=[$graph_table.a#6]
            |   |   +-scan_list=
            |   |     +-GraphCallScan
            |   |     | +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
            |   |     | +-optional=FALSE
            |   |     | +-subquery=
            |   |     | | +-TVFScan
            |   |     | |   +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
            |   |     | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
            |   |     | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            |   |     | |   +-argument_list=
            |   |     | |   | +-FunctionArgument(graph=aml)
            |   |     | |   +-column_index_list=[0, 1]
            |   |     | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
            |   |     | +-input_scan=
            |   |     |   +-SingleRowScan
            |   |     +-ProjectScan
            |   |       +-column_list=[$graph_table.a#6]
            |   |       +-expr_list=
            |   |       | +-a#6 := Literal(type=INT64, value=2)
            |   |       +-input_scan=
            |   |         +-GraphRefScan(column_list=tvf_graph.[column_bool#4, column_bytes#5])
            |   +-output_column_list=[$graph_table.a#6]
            +-column_match_mode=CORRESPONDING
==

# Separate GRAPH_TABLE queries have their own first statements that allow CALL
# with implicit graph args.

select * from GRAPH_TABLE(aml call tvf_graph() return 1 as a),
              GRAPH_TABLE(aml call tvf_graph() return 2 as a)
--
QueryStmt
+-output_column_list=
| +-$graph_table.a#3 AS a [INT64]
| +-$graph_table.a#6 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[a#3, a#6]
    +-input_scan=
      +-JoinScan
        +-column_list=$graph_table.[a#3, a#6]
        +-left_scan=
        | +-GraphTableScan
        |   +-column_list=[$graph_table.a#3]
        |   +-property_graph=aml
        |   +-input_scan=
        |     +-GraphLinearScan
        |       +-column_list=[$graph_table.a#3]
        |       +-scan_list=
        |         +-GraphLinearScan
        |           +-column_list=[$graph_table.a#3]
        |           +-scan_list=
        |             +-GraphCallScan
        |             | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
        |             | +-optional=FALSE
        |             | +-subquery=
        |             | | +-TVFScan
        |             | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
        |             | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
        |             | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
        |             | |   +-argument_list=
        |             | |   | +-FunctionArgument(graph=aml)
        |             | |   +-column_index_list=[0, 1]
        |             | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
        |             | +-input_scan=
        |             |   +-SingleRowScan
        |             +-ProjectScan
        |               +-column_list=[$graph_table.a#3]
        |               +-expr_list=
        |               | +-a#3 := Literal(type=INT64, value=1)
        |               +-input_scan=
        |                 +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
        +-right_scan=
          +-GraphTableScan
            +-column_list=[$graph_table.a#6]
            +-property_graph=aml
            +-input_scan=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#6]
                +-scan_list=
                  +-GraphLinearScan
                    +-column_list=[$graph_table.a#6]
                    +-scan_list=
                      +-GraphCallScan
                      | +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
                      | +-optional=FALSE
                      | +-subquery=
                      | | +-TVFScan
                      | |   +-column_list=tvf_graph.[column_bool#4, column_bytes#5]
                      | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
                      | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                      | |   +-argument_list=
                      | |   | +-FunctionArgument(graph=aml)
                      | |   +-column_index_list=[0, 1]
                      | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
                      | +-input_scan=
                      |   +-SingleRowScan
                      +-ProjectScan
                        +-column_list=[$graph_table.a#6]
                        +-expr_list=
                        | +-a#6 := Literal(type=INT64, value=2)
                        +-input_scan=
                          +-GraphRefScan(column_list=tvf_graph.[column_bool#4, column_bytes#5])

==

# aml as an argument to tvf_graph is not the graph aml, it's a new variable.
graph aml
call tvf_graph(aml)
return 1 as one
--
ERROR: Unrecognized name: aml [at 2:16]
call tvf_graph(aml)
               ^

==

# First statement in call should not allow for implicit graph arg.
graph aml
{{|let first_statement_blocker1 = 1}}
call () {
  {{|let first_statement_blocker2 = 1}}
  call tvf_graph()
  return 1 as x
}
return x
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#4 AS x [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.x#4]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.x#4]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.x#4]
            +-scan_list=
              +-GraphCallScan
              | +-column_list=[$graph_table.x#3]
              | +-optional=FALSE
              | +-subquery=
              | | +-GraphTableScan
              | |   +-column_list=[$graph_table.x#3]
              | |   +-property_graph=aml
              | |   +-input_scan=
              | |     +-GraphLinearScan
              | |       +-column_list=[$graph_table.x#3]
              | |       +-scan_list=
              | |         +-GraphLinearScan
              | |           +-column_list=[$graph_table.x#3]
              | |           +-scan_list=
              | |             +-GraphCallScan
              | |             | +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
              | |             | +-optional=FALSE
              | |             | +-subquery=
              | |             | | +-TVFScan
              | |             | |   +-column_list=tvf_graph.[column_bool#1, column_bytes#2]
              | |             | |   +-tvf=tvf_graph((ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>)
              | |             | |   +-signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
              | |             | |   +-argument_list=
              | |             | |   | +-FunctionArgument(graph=aml)
              | |             | |   +-column_index_list=[0, 1]
              | |             | |   +-function_call_signature=(ANY GRAPH) -> TABLE<column_bool BOOL, column_bytes BYTES>
              | |             | +-input_scan=
              | |             |   +-SingleRowScan
              | |             +-ProjectScan
              | |               +-column_list=[$graph_table.x#3]
              | |               +-expr_list=
              | |               | +-x#3 := Literal(type=INT64, value=1)
              | |               +-input_scan=
              | |                 +-GraphRefScan(column_list=tvf_graph.[column_bool#1, column_bytes#2])
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.x#4]
                +-expr_list=
                | +-x#4 := ColumnRef(type=INT64, column=$graph_table.x#3)
                +-input_scan=
                  +-GraphRefScan(column_list=[$graph_table.x#3])
--
ALTERNATION GROUPS:
    let first_statement_blocker2 = 1
    let first_statement_blocker1 = 1,
    let first_statement_blocker1 = 1,let first_statement_blocker2 = 1
--
ERROR: No matching signature for tvf_graph with no arguments
  Signature: TVF_GRAPH(GRAPH)
    Signature requires at least 1 argument, found 0 arguments [at 5:8]
  call tvf_graph()
       ^
==

# TODO: Reenable once SqlBuilder properly aliases all columns.
[no_run_sqlbuilder]
SELECT * FROM KeyValue WHERE
  (
    SELECT gt.* FROM
    graph_table(aml
      CALL (key) {
        CALL (key) {
          return key + 1 AS other
        }
        return other
      }
      return true AS b
    ) gt
  )
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-ProjectScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-SubqueryExpr
            +-type=BOOL
            +-subquery_type=SCALAR
            +-subquery=
              +-ProjectScan
                +-column_list=[$graph_table.b#5]
                +-input_scan=
                  +-GraphTableScan
                    +-column_list=[$graph_table.b#5]
                    +-property_graph=aml
                    +-input_scan=
                      +-GraphLinearScan
                        +-column_list=[$graph_table.b#5]
                        +-scan_list=
                          +-GraphLinearScan
                            +-column_list=[$graph_table.b#5]
                            +-scan_list=
                              +-GraphCallScan
                              | +-column_list=[$graph_table.other#4]
                              | +-optional=FALSE
                              | +-subquery=
                              | | +-GraphTableScan
                              | |   +-column_list=[$graph_table.other#4]
                              | |   +-property_graph=aml
                              | |   +-input_scan=
                              | |     +-GraphLinearScan
                              | |       +-column_list=[$graph_table.other#4]
                              | |       +-scan_list=
                              | |         +-GraphLinearScan
                              | |           +-column_list=[$graph_table.other#4]
                              | |           +-scan_list=
                              | |             +-GraphCallScan
                              | |             | +-column_list=[$graph_table.other#3]
                              | |             | +-optional=FALSE
                              | |             | +-subquery=
                              | |             | | +-GraphTableScan
                              | |             | |   +-column_list=[$graph_table.other#3]
                              | |             | |   +-property_graph=aml
                              | |             | |   +-input_scan=
                              | |             | |     +-GraphLinearScan
                              | |             | |       +-column_list=[$graph_table.other#3]
                              | |             | |       +-scan_list=
                              | |             | |         +-GraphLinearScan
                              | |             | |           +-column_list=[$graph_table.other#3]
                              | |             | |           +-scan_list=
                              | |             | |             +-ProjectScan
                              | |             | |               +-column_list=[$graph_table.other#3]
                              | |             | |               +-expr_list=
                              | |             | |               | +-other#3 :=
                              | |             | |               |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                              | |             | |               |     +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              | |             | |               |     +-Literal(type=INT64, value=1)
                              | |             | |               +-input_scan=
                              | |             | |                 +-SingleRowScan
                              | |             | +-input_scan=
                              | |             | | +-SingleRowScan
                              | |             | +-parameter_list=
                              | |             |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              | |             +-ProjectScan
                              | |               +-column_list=[$graph_table.other#4]
                              | |               +-expr_list=
                              | |               | +-other#4 := ColumnRef(type=INT64, column=$graph_table.other#3)
                              | |               +-input_scan=
                              | |                 +-GraphRefScan(column_list=[$graph_table.other#3])
                              | +-input_scan=
                              | | +-SingleRowScan
                              | +-parameter_list=
                              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
                              +-ProjectScan
                                +-column_list=[$graph_table.b#5]
                                +-expr_list=
                                | +-b#5 := Literal(type=BOOL, value=true)
                                +-input_scan=
                                  +-GraphRefScan(column_list=[$graph_table.other#4])
==

# Regression test for b/431835239.
graph aml
let a = 1
optional call () { return 2 as x}
return x
--
QueryStmt
+-output_column_list=
| +-$graph_table.x#3 AS x [INT64]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.x#3]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.x#3]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.x#3]
            +-scan_list=
              +-ProjectScan
              | +-expr_list=
              | | +-a#1 := Literal(type=INT64, value=1)
              | +-input_scan=
              |   +-SingleRowScan
              +-GraphCallScan
              | +-column_list=[$graph_table.x#2]
              | +-optional=TRUE
              | +-subquery=
              | | +-GraphTableScan
              | |   +-column_list=[$graph_table.x#2]
              | |   +-property_graph=aml
              | |   +-input_scan=
              | |     +-GraphLinearScan
              | |       +-column_list=[$graph_table.x#2]
              | |       +-scan_list=
              | |         +-GraphLinearScan
              | |           +-column_list=[$graph_table.x#2]
              | |           +-scan_list=
              | |             +-ProjectScan
              | |               +-column_list=[$graph_table.x#2]
              | |               +-expr_list=
              | |               | +-x#2 := Literal(type=INT64, value=2)
              | |               +-input_scan=
              | |                 +-SingleRowScan
              | +-input_scan=
              |   +-GraphRefScan
              +-ProjectScan
                +-column_list=[$graph_table.x#3]
                +-expr_list=
                | +-x#3 := ColumnRef(type=INT64, column=$graph_table.x#2)
                +-input_scan=
                  +-GraphRefScan(column_list=[$graph_table.x#2])
