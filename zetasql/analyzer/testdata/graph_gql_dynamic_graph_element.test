[default language_features=MAXIMUM,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_RETURN_EXTENSIONS,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
[default no_test_extract_table_names]
[default show_sqlbuilder_output]
# Do not run SQLBuilder test due to SQLBuilder visitor not implemented for GraphMakeElement

###############################################################################
# IS LABELED predicate
###############################################################################
# Static label in IS LABELED predicate in a static element table
select gt.* from
graph_table(aml
  match (n)
  return n IS LABELED Person AS is_person
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_person#2 AS is_person [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_person#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_person#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_person#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_person#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_person#2]
                    +-expr_list=
                    | +-is_person#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabel
                    |         +-parse_location=408-414
                    |         +-label=aml.Person
                    |         +-label_name=
                    |           +-Literal(type=STRING, value="Person", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS is_person
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED Person AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED Person AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS is_person;
==

# Static label in IS LABELED predicate in a dynamic element table
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY{{|,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL|,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE|,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES}}]
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED Entity AS is_static_label_entity
) gt
--
ALTERNATION GROUPS:
    aml_dynamic
    ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,aml_dynamic
    ,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,aml_dynamic
--
ERROR: Dynamic label is not supported [at 2:13]
graph_table(aml_dynamic
            ^
--
ALTERNATION GROUPS:
    aml_dynamic_multi
    ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,aml_dynamic_multi
    ,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,aml_dynamic_multi
--
ERROR: Dynamic label is not supported [at 2:13]
graph_table(aml_dynamic_multi
            ^
--
ALTERNATION GROUP: ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES,aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_static_label_entity#2 AS is_static_label_entity [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_static_label_entity#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_static_label_entity#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_static_label_entity#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_static_label_entity#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_static_label_entity#2]
                    +-expr_list=
                    | +-is_static_label_entity#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabel
                    |         +-parse_location=75-81
                    |         +-label=aml_dynamic.Entity
                    |         +-label_name=
                    |           +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_static_label_entity
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED Entity AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED Entity AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_static_label_entity;
--
ALTERNATION GROUP: ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES,aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_static_label_entity#2 AS is_static_label_entity [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_static_label_entity#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_static_label_entity#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_static_label_entity#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_static_label_entity#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_static_label_entity#2]
                    +-expr_list=
                    | +-is_static_label_entity#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabel
                    |         +-parse_location=81-87
                    |         +-label=aml_dynamic_multi.Entity
                    |         +-label_name=
                    |           +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_static_label_entity
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED Entity AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED Entity AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_static_label_entity;
==

# Dynamic label in IS LABELED predicate in a dynamic element table
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY{{|,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL|,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE|,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES}}]
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED DynamicLabelUnknown AS is_dynamic_label_unknown
) gt
--
ALTERNATION GROUPS:
    aml_dynamic
    ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,aml_dynamic
    ,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,aml_dynamic
--
ERROR: Dynamic label is not supported [at 2:13]
graph_table(aml_dynamic
            ^
--
ALTERNATION GROUPS:
    aml_dynamic_multi
    ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,aml_dynamic_multi
    ,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,aml_dynamic_multi
--
ERROR: Dynamic label is not supported [at 2:13]
graph_table(aml_dynamic_multi
            ^
--
ALTERNATION GROUP: ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES,aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_dynamic_label_unknown#2 AS is_dynamic_label_unknown [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_dynamic_label_unknown#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_dynamic_label_unknown#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_dynamic_label_unknown#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_dynamic_label_unknown#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_dynamic_label_unknown#2]
                    +-expr_list=
                    | +-is_dynamic_label_unknown#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabel
                    |         +-label_name=
                    |           +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_dynamic_label_unknown
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED DynamicLabelUnknown AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED DynamicLabelUnknown AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_dynamic_label_unknown;
--
ALTERNATION GROUP: ,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES,aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_dynamic_label_unknown#2 AS is_dynamic_label_unknown [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_dynamic_label_unknown#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_dynamic_label_unknown#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_dynamic_label_unknown#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_dynamic_label_unknown#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_dynamic_label_unknown#2]
                    +-expr_list=
                    | +-is_dynamic_label_unknown#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabel
                    |         +-label_name=
                    |           +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_dynamic_label_unknown
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED DynamicLabelUnknown AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED DynamicLabelUnknown AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_dynamic_label_unknown;
==

# Mixing up static and dynamic label in IS LABELED predicate with OR.
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED (DynamicLabelUnknown | Entity) AS is_or_label
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=76-104
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-parse_location=98-104
                    |             +-label=aml_dynamic.Entity
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=82-110
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-parse_location=104-110
                    |             +-label=aml_dynamic_multi.Entity
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_or_label;
==

# Mixing up static and dynamic label in IS LABELED predicate with AND.
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED (DynamicLabelUnknown & Entity) AS is_or_label
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=76-104
                    |         +-op=AND
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-parse_location=98-104
                    |             +-label=aml_dynamic.Entity
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown & Entity) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown & Entity) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=82-110
                    |         +-op=AND
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-parse_location=104-110
                    |             +-label=aml_dynamic_multi.Entity
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown & Entity) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown & Entity) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_or_label;
==

# Mixing up static and dynamic label in IS LABELED predicate
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED {{%|Entity}} | DynamicLabelUnknown AS is_or_label
) gt
--
ALTERNATION GROUP: aml_dynamic,%
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=75-98
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphWildCardLabel(parse_location=75-76)
                    |           +-GraphLabel
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(% | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(% | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic,Entity
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=75-103
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-parse_location=75-81
                    |           | +-label=aml_dynamic.Entity
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(Entity | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(Entity | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic_multi,%
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=81-104
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphWildCardLabel(parse_location=81-82)
                    |           +-GraphLabel
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(% | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(% | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic_multi,Entity
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=81-109
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-parse_location=81-87
                    |           | +-label=aml_dynamic_multi.Entity
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(Entity | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(Entity | DynamicLabelUnknown) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_or_label;
==

# Mixing up static and dynamic label in IS LABELED predicate, but in a different
# specification order
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED DynamicLabelUnknown | {{%|Entity}}  AS is_or_label
) gt
--
ALTERNATION GROUP: aml_dynamic,%
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=75-98
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphWildCardLabel(parse_location=97-98)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | %) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | %) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic,Entity
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=75-103
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-parse_location=97-103
                    |             +-label=aml_dynamic.Entity
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic_multi,%
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=81-104
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphWildCardLabel(parse_location=103-104)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | %) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | %) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_or_label;
--
ALTERNATION GROUP: aml_dynamic_multi,Entity
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_or_label#2 AS is_or_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_or_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_or_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_or_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_or_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_or_label#2]
                    +-expr_list=
                    | +-is_or_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=81-109
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabel
                    |             +-parse_location=103-109
                    |             +-label=aml_dynamic_multi.Entity
                    |             +-label_name=
                    |               +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_or_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown | Entity) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_or_label;
==

# Mixing up different dynamic labels in IS LABELED predicate
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return n IS LABELED DynamicLabelUnknown |  (Dynamic1 & !Dynamic2) AS is_complex_dynamic_label
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_complex_dynamic_label#2 AS is_complex_dynamic_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_complex_dynamic_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_complex_dynamic_label#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_complex_dynamic_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_complex_dynamic_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_complex_dynamic_label#2]
                    +-expr_list=
                    | +-is_complex_dynamic_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=75-120
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabelNaryExpr
                    |             +-parse_location=99-119
                    |             +-op=AND
                    |             +-operand_list=
                    |               +-GraphLabel
                    |               | +-label_name=
                    |               |   +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                    |               +-GraphLabelNaryExpr
                    |                 +-parse_location=110-119
                    |                 +-op=NOT
                    |                 +-operand_list=
                    |                   +-GraphLabel
                    |                     +-label_name=
                    |                       +-Literal(type=STRING, value="Dynamic2", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS is_complex_dynamic_label
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS is_complex_dynamic_label;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.is_complex_dynamic_label#2 AS is_complex_dynamic_label [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.is_complex_dynamic_label#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.is_complex_dynamic_label#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.is_complex_dynamic_label#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.is_complex_dynamic_label#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.is_complex_dynamic_label#2]
                    +-expr_list=
                    | +-is_complex_dynamic_label#2 :=
                    |   +-GraphIsLabeledPredicate
                    |     +-type=BOOL
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-label_expr=
                    |       +-GraphLabelNaryExpr
                    |         +-parse_location=81-126
                    |         +-op=OR
                    |         +-operand_list=
                    |           +-GraphLabel
                    |           | +-label_name=
                    |           |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                    |           +-GraphLabelNaryExpr
                    |             +-parse_location=105-125
                    |             +-op=AND
                    |             +-operand_list=
                    |               +-GraphLabel
                    |               | +-label_name=
                    |               |   +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                    |               +-GraphLabelNaryExpr
                    |                 +-parse_location=116-125
                    |                 +-op=NOT
                    |                 +-operand_list=
                    |                   +-GraphLabel
                    |                     +-label_name=
                    |                       +-Literal(type=STRING, value="Dynamic2", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS is_complex_dynamic_label
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      a_2 IS LABELED(DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS is_complex_dynamic_label;
==

###############################################################################
# Label expression filter in MATCH
###############################################################################
# Negate with dynamic label `Dynamic1` would still match the DynamicGraphNode
# table as we don't know whether the label is present or not during resolution
# time. However, negating with static label `DynamicGraphNode` will not match
# the table as we know for sure the label is present.
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n: {{!|}}{{Dynamic1|DynamicGraphNode}})
  return 1 AS one
) gt
--
ALTERNATION GROUP: aml_dynamic,!,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=53-62
                  | |   |   |   +-op=NOT
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS ! Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS ! Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic,!,DynamicGraphNode
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=53-70
                  | |   |   |   +-op=NOT
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-parse_location=54-70
                  | |   |   |       +-label=aml_dynamic.DynamicGraphNode
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="DynamicGraphNode", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS ! DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS ! DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic,,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic,,DynamicGraphNode
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-parse_location=53-69
                  | |   |   |   +-label=aml_dynamic.DynamicGraphNode
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicGraphNode", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,!,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=59-68
                  | |   |   |   +-op=NOT
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS ! Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS ! Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,!,DynamicGraphNode
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=59-76
                  | |   |   |   +-op=NOT
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="DynamicGraphNode", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS ! DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS ! DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS Dynamic1)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,,DynamicGraphNode
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicGraphNode", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicGraphNode)
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS one;
==

select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match -[e: {{!|}}{{Dynamic1|DynamicGraphEdge}}]->
  return 1 AS one
) gt
--
ALTERNATION GROUP: aml_dynamic,!,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-parse_location=54-63
                  | |   | | |   +-op=NOT
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabel
                  | |   | | |       +-label_name=
                  | |   | | |         +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic,!,DynamicGraphEdge
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-parse_location=54-71
                  | |   | | |   +-op=NOT
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabel
                  | |   | | |       +-parse_location=55-71
                  | |   | | |       +-label=aml_dynamic.DynamicGraphEdge
                  | |   | | |       +-label_name=
                  | |   | | |         +-Literal(type=STRING, value="DynamicGraphEdge", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic,,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel
                  | |   | | |   +-label_name=
                  | |   | | |     +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic,,DynamicGraphEdge
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel
                  | |   | | |   +-parse_location=54-70
                  | |   | | |   +-label=aml_dynamic.DynamicGraphEdge
                  | |   | | |   +-label_name=
                  | |   | | |     +-Literal(type=STRING, value="DynamicGraphEdge", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,!,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-parse_location=60-69
                  | |   | | |   +-op=NOT
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabel
                  | |   | | |       +-label_name=
                  | |   | | |         +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,!,DynamicGraphEdge
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-parse_location=60-77
                  | |   | | |   +-op=NOT
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphLabel
                  | |   | | |       +-label_name=
                  | |   | | |         +-Literal(type=STRING, value="DynamicGraphEdge", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS ! DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,,Dynamic1
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel
                  | |   | | |   +-label_name=
                  | |   | | |     +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS Dynamic1]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS one;
--
ALTERNATION GROUP: aml_dynamic_multi,,DynamicGraphEdge
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#4 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#4]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel
                  | |   | | |   +-label_name=
                  | |   | | |     +-Literal(type=STRING, value="DynamicGraphEdge", has_explicit_type=TRUE)
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.$element2#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#4]
                    +-expr_list=
                    | +-one#4 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS DynamicGraphEdge]->
      (a_4
      IS (% | ! %))
    RETURN
      1 AS a_5
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS one;
==

# Mixing up different dynamic labels in label expression filter
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n {{:|IS}} DynamicLabelUnknown | (Dynamic1 & !Dynamic2))
  return n.code AS entity_code
) gt
--
ALTERNATION GROUP: aml_dynamic,:
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=54-98
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-parse_location=77-97
                  | |   |   |       +-op=AND
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphLabel
                  | |   |   |         | +-label_name=
                  | |   |   |         |   +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   |         +-GraphLabelNaryExpr
                  | |   |   |           +-parse_location=88-97
                  | |   |   |           +-op=NOT
                  | |   |   |           +-operand_list=
                  | |   |   |             +-GraphLabel
                  | |   |   |               +-label_name=
                  | |   |   |                 +-Literal(type=STRING, value="Dynamic2", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic,IS
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=55-99
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-parse_location=78-98
                  | |   |   |       +-op=AND
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphLabel
                  | |   |   |         | +-label_name=
                  | |   |   |         |   +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   |         +-GraphLabelNaryExpr
                  | |   |   |           +-parse_location=89-98
                  | |   |   |           +-op=NOT
                  | |   |   |           +-operand_list=
                  | |   |   |             +-GraphLabel
                  | |   |   |               +-label_name=
                  | |   |   |                 +-Literal(type=STRING, value="Dynamic2", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic_multi,:
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=60-104
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-parse_location=83-103
                  | |   |   |       +-op=AND
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphLabel
                  | |   |   |         | +-label_name=
                  | |   |   |         |   +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   |         +-GraphLabelNaryExpr
                  | |   |   |           +-parse_location=94-103
                  | |   |   |           +-op=NOT
                  | |   |   |           +-operand_list=
                  | |   |   |             +-GraphLabel
                  | |   |   |               +-label_name=
                  | |   |   |                 +-Literal(type=STRING, value="Dynamic2", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic_multi,IS
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=61-105
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-parse_location=84-104
                  | |   |   |       +-op=AND
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphLabel
                  | |   |   |         | +-label_name=
                  | |   |   |         |   +-Literal(type=STRING, value="Dynamic1", has_explicit_type=TRUE)
                  | |   |   |         +-GraphLabelNaryExpr
                  | |   |   |           +-parse_location=95-104
                  | |   |   |           +-op=NOT
                  | |   |   |           +-operand_list=
                  | |   |   |             +-GraphLabel
                  | |   |   |               +-label_name=
                  | |   |   |                 +-Literal(type=STRING, value="Dynamic2", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown |(Dynamic1 & ! Dynamic2)))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS entity_code;
==

# Mixing up static and dynamic label in label expression filter
# specification order
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n: DynamicLabelUnknown | {{%|Entity}})
  return n.code AS entity_code
) gt
--
ALTERNATION GROUP: aml_dynamic,%
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=53-76
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphWildCardLabel(parse_location=75-76)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown | %))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown | %))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic,Entity
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=53-81
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-parse_location=75-81
                  | |   |   |       +-label=aml_dynamic.Entity
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown | Entity))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (DynamicLabelUnknown | Entity))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic_multi,%
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=59-82
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphWildCardLabel(parse_location=81-82)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown | %))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown | %))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic_multi,Entity
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=59-87
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |     | +-label_name=
                  | |   |   |     |   +-Literal(type=STRING, value="DynamicLabelUnknown", has_explicit_type=TRUE)
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-parse_location=81-87
                  | |   |   |       +-label=aml_dynamic_multi.Entity
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown | Entity))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (DynamicLabelUnknown | Entity))
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS entity_code;
==

###############################################################################
# Property specification in MATCH
# Property access in RETURN
###############################################################################
# Static property specification in a static element table
select gt.* from
graph_table(aml
  match (n:Person {age: 10})
  return n.age AS person_age
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.person_age#2 AS person_age [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.person_age#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.person_age#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.person_age#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.person_age#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(UINT32, UINT32) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=UINT32
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=age(UINT32)
                  | |   |   |   | +-property_name=
                  | |   |   |   |   +-Literal(type=STRING, value="age", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=UINT32, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-parse_location=44-50
                  | |   |   |   +-label=aml.Person
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="Person", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.person_age#2]
                    +-expr_list=
                    | +-person_age#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT32
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=age(UINT32)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="age", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS person_age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person
      WHERE
        (a_2.age) = CAST(10 AS UINT32))
    RETURN
      a_2.age AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person
      WHERE
        (a_2.age) = CAST(10 AS UINT32))
    RETURN
      a_2.age AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS person_age;
==

# Static property specification in a dynamic element table
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:Entity {code: 10})
  return n.code AS entity_code
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=INT64
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-property=code(INT64)
                  | |   |   |   | +-property_name=
                  | |   |   |   |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-parse_location=52-58
                  | |   |   |   +-label=aml_dynamic.Entity
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS Entity
      WHERE
        (a_2.code) = 10)
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS Entity
      WHERE
        (a_2.code) = 10)
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS entity_code;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.entity_code#2 AS entity_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.entity_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.entity_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.entity_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.entity_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=INT64
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-property=code(INT64)
                  | |   |   |   | +-property_name=
                  | |   |   |   |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-parse_location=58-64
                  | |   |   |   +-label=aml_dynamic_multi.Entity
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.entity_code#2]
                    +-expr_list=
                    | +-entity_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS entity_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS Entity
      WHERE
        (a_2.code) = 10)
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS Entity
      WHERE
        (a_2.code) = 10)
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS entity_code;
==

# Dynamic property specification on a non-dynamic graph element
# By using negation we are able to create a non-dynamic graph element
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:!DynamicGraphNode {dynamic_property1:10})
  return 1 as one
) gt
--

ALTERNATION GROUP: aml_dynamic
--
ERROR: Property dynamic_property1 is not exposed by element type GRAPH_NODE(aml_dynamic)<> [at 3:31]
  match (n:!DynamicGraphNode {dynamic_property1:10})
                              ^
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.one#2 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.one#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.one#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.one#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.one#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-parse_location=58-75
                  | |   |   |   +-op=NOT
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphLabel
                  | |   |   |       +-label_name=
                  | |   |   |         +-Literal(type=STRING, value="DynamicGraphNode", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.one#2]
                    +-expr_list=
                    | +-one#2 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS one
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS ! DynamicGraphNode { dynamic_property1 : 10 })
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS ! DynamicGraphNode { dynamic_property1 : 10 })
    RETURN
      1 AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS one;
==

# Dynamic property specification in a dynamic element table with a matching
# target value type
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:DynamicLabel1 {dynamic_property1: {{10|@test_param_bool|@test_param_int32|CAST(10 AS UINT64)|@test_param_float|@test_param_double|"abc"}}})
  return n.code AS dynamic_labeled_code
) gt
--
ALTERNATION GROUP: aml_dynamic,10
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_bool
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, BOOL) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=BOOL, name="test_param_bool")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_int32
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, INT32) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=INT32, name="test_param_int32")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,CAST(10 AS UINT64)
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, UINT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=UINT64, value=10, has_explicit_type=TRUE)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64) })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64) })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_float
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, FLOAT) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=FLOAT, name="test_param_float")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_double
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, DOUBLE) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=DOUBLE, name="test_param_double")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,"abc"
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, STRING) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=STRING, value="abc")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc" })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc" })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,10
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_bool
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, BOOL) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=BOOL, name="test_param_bool")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_int32
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, INT32) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=INT32, name="test_param_int32")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,CAST(10 AS UINT64)
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, UINT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=UINT64, value=10, has_explicit_type=TRUE)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64) })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64) })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_float
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, FLOAT) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=FLOAT, name="test_param_float")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_double
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, DOUBLE) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Parameter(type=DOUBLE, name="test_param_double")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,"abc"
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, STRING) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=STRING, value="abc")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc" })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc" })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
==

# Grouping on dynamic property of node. Regression test for b/408015891
GRAPH aml_dynamic
MATCH {{(n:DynamicLabel1)|-[n:DynamicLabel1]->}}
RETURN n.dynamic_property1, COUNT(*) AS total
{{|GROUP BY n.dynamic_property1}}
--
ALTERNATION GROUPS:
    (n:DynamicLabel1),
    -[n:DynamicLabel1]->,
--
ERROR: Column `dynamic_property1`, which is included in the grouping list by GROUP BY ALL, has type JSON which cannot be used in a grouping key [at 3:8]
RETURN n.dynamic_property1, COUNT(*) AS total
       ^
--
ALTERNATION GROUPS:
    (n:DynamicLabel1),GROUP BY n.dynamic_property1
    -[n:DynamicLabel1]->,GROUP BY n.dynamic_property1
--
ERROR: Grouping by expressions of type JSON is not allowed [at 4:10]
GROUP BY n.dynamic_property1
         ^
==

# Order by dynamic property. Regression test for b/408015891.
GRAPH aml_dynamic
MATCH {{(n:DynamicLabel1)|-[n:DynamicLabel1]->}}
RETURN n.dynamic_property1
{{|GROUP BY n.dynamic_property1}}
ORDER BY n.dynamic_property1
--
ALTERNATION GROUPS:
    (n:DynamicLabel1),
    -[n:DynamicLabel1]->,
--
ERROR: ORDER BY does not support expressions of type JSON [at 5:10]
ORDER BY n.dynamic_property1
         ^
--
ALTERNATION GROUPS:
    (n:DynamicLabel1),GROUP BY n.dynamic_property1
    -[n:DynamicLabel1]->,GROUP BY n.dynamic_property1
--
ERROR: Grouping by expressions of type JSON is not allowed [at 4:10]
GROUP BY n.dynamic_property1
         ^
==

# Dynamic property specification in a dynamic element table with an unexpected
# target value type
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:DynamicLabel1 {dynamic_property1: STRUCT(10)})
  return n.code AS dynamic_labeled_code
) gt
--
ERROR: Unsupported equality comparison between dynamic property and value of type STRUCT<INT64> [at 3:27]
  match (n:DynamicLabel1 {dynamic_property1: STRUCT(10)})
                          ^
==


# Mix static and dynamic property specification together
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:DynamicLabel1 {dynamic_property1: {{10|@test_param_bool|@test_param_int32|CAST(10 AS UINT64)|@test_param_float|@test_param_double|"abc"}}, code: 10})
  return n.code AS dynamic_labeled_code
) gt
--
ALTERNATION GROUP: aml_dynamic,10
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Literal(type=INT64, value=10)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_bool
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, BOOL) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=BOOL, name="test_param_bool")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_int32
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, INT32) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=INT32, name="test_param_int32")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,CAST(10 AS UINT64)
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, UINT64) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Literal(type=UINT64, value=10, has_explicit_type=TRUE)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64), code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64), code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_float
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, FLOAT) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=FLOAT, name="test_param_float")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,@test_param_double
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, DOUBLE) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=DOUBLE, name="test_param_double")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic,"abc"
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, STRING) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Literal(type=STRING, value="abc")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc", code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc", code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,10
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Literal(type=INT64, value=10)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : 10, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_bool
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, BOOL) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=BOOL, name="test_param_bool")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_bool, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_int32
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, INT32) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=INT32, name="test_param_int32")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_int32, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,CAST(10 AS UINT64)
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, UINT64) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Literal(type=UINT64, value=10, has_explicit_type=TRUE)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64), code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : CAST(10 AS UINT64), code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_float
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, FLOAT) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=FLOAT, name="test_param_float")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_float, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,@test_param_double
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, DOUBLE) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Parameter(type=DOUBLE, name="test_param_double")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : @test_param_double, code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
--
ALTERNATION GROUP: aml_dynamic_multi,"abc"
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labeled_code#2 AS dynamic_labeled_code [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labeled_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labeled_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labeled_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labeled_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, STRING) -> BOOL)
                  | |   |   |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   | +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   | +-Literal(type=STRING, value="abc")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=INT64
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |     | +-property=code(INT64)
                  | |   |   |     | +-property_name=
                  | |   |   |     |   +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                  | |   |   |     +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labeled_code#2]
                    +-expr_list=
                    | +-dynamic_labeled_code#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property=code(INT64)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labeled_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc", code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1 { dynamic_property1 : "abc", code : 10 })
    RETURN
      a_2.code AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labeled_code;
==

# Dynamic property access in a dynamic element table
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:DynamicLabel1)
  return n.dynamic_property1 AS dynamic_property1
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_property1#2 AS dynamic_property1 [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_property1#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_property1#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_property1#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_property1#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_property1#2]
                    +-expr_list=
                    | +-dynamic_property1#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=JSON
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_property1
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1)
    RETURN
      a_2.dynamic_property1 AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS DynamicLabel1)
    RETURN
      a_2.dynamic_property1 AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_property1;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_property1#2 AS dynamic_property1 [JSON]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_property1#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_property1#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_property1#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_property1#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel
                  | |   |   |   +-label_name=
                  | |   |   |     +-Literal(type=STRING, value="DynamicLabel1", has_explicit_type=TRUE)
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_property1#2]
                    +-expr_list=
                    | +-dynamic_property1#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=JSON
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-property_name=
                    |       +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_property1
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1)
    RETURN
      a_2.dynamic_property1 AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS DynamicLabel1)
    RETURN
      a_2.dynamic_property1 AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_property1;
==

###############################################################################
# Dot star expansion
###############################################################################
# Static dot star property expansion in a static element table
select gt.* from
graph_table(aml
  match (n:Person)
  columns(n.*)
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.age#2 AS age [UINT32]
| +-$graph_table.birthday#3 AS birthday [DATE]
| +-$graph_table.data#4 AS data [BYTES]
| +-$graph_table.id#5 AS id [INT64]
| +-$graph_table.name#6 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[age#2, birthday#3, data#4, id#5, name#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[age#2, birthday#3, data#4, id#5, name#6]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabel
        |       |   |   +-parse_location=44-50
        |       |   |   +-label=aml.Person
        |       |   |   +-label_name=
        |       |   |     +-Literal(type=STRING, value="Person", has_explicit_type=TRUE)
        |       |   +-target_element_table_list=[aml.Person]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-age#2 :=
          | +-GraphGetElementProperty
          |   +-type=UINT32
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
          |   +-property=age(UINT32)
          |   +-property_name=
          |     +-Literal(type=STRING, value="age", has_explicit_type=TRUE)
          +-birthday#3 :=
          | +-GraphGetElementProperty
          |   +-type=DATE
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
          |   +-property=birthday(DATE)
          |   +-property_name=
          |     +-Literal(type=STRING, value="birthday", has_explicit_type=TRUE)
          +-data#4 :=
          | +-GraphGetElementProperty
          |   +-type=BYTES
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
          |   +-property=data(BYTES)
          |   +-property_name=
          |     +-Literal(type=STRING, value="data", has_explicit_type=TRUE)
          +-id#5 :=
          | +-GraphGetElementProperty
          |   +-type=INT64
          |   +-expr=
          |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
          |   +-property=id(INT64)
          |   +-property_name=
          |     +-Literal(type=STRING, value="id", has_explicit_type=TRUE)
          +-name#6 :=
            +-GraphGetElementProperty
              +-type=STRING
              +-expr=
              | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
              +-property=name(STRING)
              +-property_name=
                +-Literal(type=STRING, value="name", has_explicit_type=TRUE)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS age,
  aml_1.a_4 AS birthday,
  aml_1.a_5 AS data,
  aml_1.a_6 AS id,
  aml_1.a_7 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    COLUMNS(
      a_2.age AS a_3,
      a_2.birthday AS a_4,
      a_2.data AS a_5,
      a_2.id AS a_6,
      a_2.name AS a_7
    )
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    COLUMNS(
      a_2.age AS a_3,
      a_2.birthday AS a_4,
      a_2.data AS a_5,
      a_2.id AS a_6,
      a_2.name AS a_7
    )
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS age,
     aml_1.a_4 AS birthday,
     aml_1.a_5 AS data,
     aml_1.a_6 AS id,
     aml_1.a_7 AS name;
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
select gt.n.* from
graph_table(aml
  match (n:Person)
) gt
--
QueryStmt
+-output_column_list=
| +-$query.age#2 AS age [UINT32]
| +-$query.birthday#3 AS birthday [DATE]
| +-$query.data#4 AS data [BYTES]
| +-$query.id#5 AS id [INT64]
| +-$query.name#6 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=$query.[age#2, birthday#3, data#4, id#5, name#6]
    +-expr_list=
    | +-age#2 :=
    | | +-GraphGetElementProperty
    | |   +-type=UINT32
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
    | |   +-property=age(UINT32)
    | |   +-property_name=
    | |     +-Literal(type=STRING, value="age", has_explicit_type=TRUE)
    | +-birthday#3 :=
    | | +-GraphGetElementProperty
    | |   +-type=DATE
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
    | |   +-property=birthday(DATE)
    | |   +-property_name=
    | |     +-Literal(type=STRING, value="birthday", has_explicit_type=TRUE)
    | +-data#4 :=
    | | +-GraphGetElementProperty
    | |   +-type=BYTES
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
    | |   +-property=data(BYTES)
    | |   +-property_name=
    | |     +-Literal(type=STRING, value="data", has_explicit_type=TRUE)
    | +-id#5 :=
    | | +-GraphGetElementProperty
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
    | |   +-property=id(INT64)
    | |   +-property_name=
    | |     +-Literal(type=STRING, value="id", has_explicit_type=TRUE)
    | +-name#6 :=
    |   +-GraphGetElementProperty
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
    |     +-property=name(STRING)
    |     +-property_name=
    |       +-Literal(type=STRING, value="name", has_explicit_type=TRUE)
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$element_table.n#1]
        +-property_graph=aml
        +-input_scan=
          +-GraphScan
            +-column_list=[$element_table.n#1]
            +-input_scan_list=
              +-GraphPathScan
                +-column_list=[$element_table.n#1]
                +-input_scan_list=
                | +-GraphNodeScan
                |   +-column_list=[$element_table.n#1]
                |   +-label_expr=
                |   | +-GraphLabel
                |   |   +-parse_location=46-52
                |   |   +-label=aml.Person
                |   |   +-label_name=
                |   |     +-Literal(type=STRING, value="Person", has_explicit_type=TRUE)
                |   +-target_element_table_list=[aml.Person]
                +-head=$element_table.n#1
                +-tail=$element_table.n#1

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  a_2.age AS age,
  a_2.birthday AS birthday,
  a_2.data AS data,
  a_2.id AS id,
  a_2.name AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
  ) AS aml_1
|> SELECT
     a_2.age AS age,
     a_2.birthday AS birthday,
     a_2.data AS data,
     a_2.id AS id,
     a_2.name AS name;
==

# Dot star property expansion on a dynamic graph element in select clause
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
select gt.n.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:Person)
) gt
--
ERROR: Dot-star is not supported for dynamic graph element type [at 1:8]
select gt.n.* from
       ^
==

# Dot star property expansion on a dynamic element in columns clause
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n:Person)
  columns(n.*)
) gt
--
ERROR: Dot-star is not supported for dynamic graph elements. [at 4:11]
  columns(n.*)
          ^
==

###############################################################################
# LABELS function call
###############################################################################
# Dynamic graph element as input to LABELS
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n {dynamic_property1: 10})
  return LABELS(n) AS dynamic_labels
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labels#2 AS dynamic_labels [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labels#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labels#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labels#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labels#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labels#2]
                    +-expr_list=
                    | +-dynamic_labels#2 :=
                    |   +-FunctionCall(ZetaSQL:labels(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>) -> ARRAY<STRING>)
                    |     +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS dynamic_labels
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %) { dynamic_property1 : 10 })
    RETURN
      LABELS(a_2) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %) { dynamic_property1 : 10 })
    RETURN
      LABELS(a_2) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS dynamic_labels;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.dynamic_labels#2 AS dynamic_labels [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.dynamic_labels#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.dynamic_labels#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.dynamic_labels#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.dynamic_labels#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$dynamic_property_equals(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING, INT64) -> BOOL)
                  | |   |   |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                  | |   |   |   +-Literal(type=STRING, value="dynamic_property1", has_explicit_type=TRUE)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.dynamic_labels#2]
                    +-expr_list=
                    | +-dynamic_labels#2 :=
                    |   +-FunctionCall(ZetaSQL:labels(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>) -> ARRAY<STRING>)
                    |     +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS dynamic_labels
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %) { dynamic_property1 : 10 })
    RETURN
      LABELS(a_2) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %) { dynamic_property1 : 10 })
    RETURN
      LABELS(a_2) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS dynamic_labels;
==

###############################################################################
# PROPERTY_EXISTS function call
###############################################################################
# Static property used with a dynamic graph element in PROPERTY_EXISTS
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return PROPERTY_EXISTS(n, code) AS has_property_code
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.has_property_code#2 AS has_property_code [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.has_property_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.has_property_code#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.has_property_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.has_property_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.has_property_code#2]
                    +-expr_list=
                    | +-has_property_code#2 :=
                    |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING) -> BOOL)
                    |     +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-Literal(type=STRING, value="code")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS has_property_code
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, code) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, code) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS has_property_code;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.has_property_code#2 AS has_property_code [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.has_property_code#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.has_property_code#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.has_property_code#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.has_property_code#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.has_property_code#2]
                    +-expr_list=
                    | +-has_property_code#2 :=
                    |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING) -> BOOL)
                    |     +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-Literal(type=STRING, value="code")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS has_property_code
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, code) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, code) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS has_property_code;
==

# Undeclared dynamic property used with a dynamic graph element in PROPERTY_EXISTS
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n)
  return PROPERTY_EXISTS(n, dynamic_property1) AS v
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.v#2 AS v [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.v#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.v#2]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.v#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.v#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.v#2]
                    +-expr_list=
                    | +-v#2 :=
                    |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, STRING) -> BOOL)
                    |     +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    |     +-Literal(type=STRING, value="dynamic_property1")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_3 AS v
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, dynamic_property1) AS a_3
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, dynamic_property1) AS a_3
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_3 AS v;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.v#2 AS v [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.v#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.v#2]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.v#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.v#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.v#2]
                    +-expr_list=
                    | +-v#2 :=
                    |   +-FunctionCall(ZetaSQL:property_exists(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, STRING) -> BOOL)
                    |     +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    |     +-Literal(type=STRING, value="dynamic_property1")
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_3 AS v
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, dynamic_property1) AS a_3
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
    RETURN
      PROPERTY_EXISTS(a_2, dynamic_property1) AS a_3
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_3 AS v;
==

###############################################################################
# PROPERTY_NAMES function call
###############################################################################
# Static graph element
select gt.* from
graph_table(aml
  match (n) -[e]-> ()
  return PROPERTY_NAMES(n) AS node_properties, PROPERTY_NAMES(e) AS edge_properties
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_properties#4 AS node_properties [ARRAY<STRING>]
| +-$graph_table.edge_properties#5 AS edge_properties [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_properties#4, edge_properties#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_properties#4, edge_properties#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_properties#4, edge_properties#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_properties#4, edge_properties#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_properties#4, edge_properties#5]
                    +-expr_list=
                    | +-node_properties#4 :=
                    | | +-FunctionCall(ZetaSQL:property_names(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> ARRAY<STRING>)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | +-edge_properties#5 :=
                    |   +-FunctionCall(ZetaSQL:property_names(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> ARRAY<STRING>)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS node_properties,
  aml_1.a_6 AS edge_properties
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      PROPERTY_NAMES(a_2) AS a_5,
      PROPERTY_NAMES(a_3) AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      PROPERTY_NAMES(a_2) AS a_5,
      PROPERTY_NAMES(a_3) AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS node_properties,
     aml_1.a_6 AS edge_properties;
==

# Dynamic graph element
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n) -[e]-> ()
  return PROPERTY_NAMES(n) AS node_properties, PROPERTY_NAMES(e) AS edge_properties
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_properties#4 AS node_properties [ARRAY<STRING>]
| +-$graph_table.edge_properties#5 AS edge_properties [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_properties#4, edge_properties#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_properties#4, edge_properties#5]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_properties#4, edge_properties#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_properties#4, edge_properties#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_properties#4, edge_properties#5]
                    +-expr_list=
                    | +-node_properties#4 :=
                    | | +-FunctionCall(ZetaSQL:property_names(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>) -> ARRAY<STRING>)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    | +-edge_properties#5 :=
                    |   +-FunctionCall(ZetaSQL:property_names(GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>) -> ARRAY<STRING>)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS node_properties,
  aml_dynamic_1.a_6 AS edge_properties
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      PROPERTY_NAMES(a_2) AS a_5,
      PROPERTY_NAMES(a_3) AS a_6
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      PROPERTY_NAMES(a_2) AS a_5,
      PROPERTY_NAMES(a_3) AS a_6
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS node_properties,
     aml_dynamic_1.a_6 AS edge_properties;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_properties#4 AS node_properties [ARRAY<STRING>]
| +-$graph_table.edge_properties#5 AS edge_properties [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_properties#4, edge_properties#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_properties#4, edge_properties#5]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_properties#4, edge_properties#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_properties#4, edge_properties#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_properties#4, edge_properties#5]
                    +-expr_list=
                    | +-node_properties#4 :=
                    | | +-FunctionCall(ZetaSQL:property_names(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>) -> ARRAY<STRING>)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    | +-edge_properties#5 :=
                    |   +-FunctionCall(ZetaSQL:property_names(GRAPH_EDGE(aml_dynamic_multi)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>) -> ARRAY<STRING>)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml_dynamic_multi)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS node_properties,
  aml_dynamic_multi_1.a_6 AS edge_properties
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      PROPERTY_NAMES(a_2) AS a_5,
      PROPERTY_NAMES(a_3) AS a_6
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      PROPERTY_NAMES(a_2) AS a_5,
      PROPERTY_NAMES(a_3) AS a_6
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS node_properties,
     aml_dynamic_multi_1.a_6 AS edge_properties;
==

###############################################################################
# TO_JSON function call
###############################################################################
# Dynamic graph element
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,+JSON_TYPE,+NAMED_ARGUMENTS,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n) -[e]-> ()
  return TO_JSON(n) AS node_json, TO_JSON(e) AS edge_json
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_json#4 AS node_json [JSON]
| +-$graph_table.edge_json#5 AS edge_json [JSON]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_json#4, edge_json#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_json#4, edge_json#5]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_json#4, edge_json#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_json#4, edge_json#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_json#4, edge_json#5]
                    +-expr_list=
                    | +-node_json#4 :=
                    | | +-FunctionCall(ZetaSQL:to_json(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, optional(1) BOOL stringify_wide_numbers) -> JSON)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    | |   +-Literal(type=BOOL, value=false)
                    | +-edge_json#5 :=
                    |   +-FunctionCall(ZetaSQL:to_json(GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, optional(1) BOOL stringify_wide_numbers) -> JSON)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
                    |     +-Literal(type=BOOL, value=false)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS node_json,
  aml_dynamic_1.a_6 AS edge_json
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TO_JSON(a_2, stringify_wide_numbers  => false) AS a_5,
      TO_JSON(a_3, stringify_wide_numbers  => false) AS a_6
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TO_JSON(a_2, stringify_wide_numbers  => false) AS a_5,
      TO_JSON(a_3, stringify_wide_numbers  => false) AS a_6
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS node_json,
     aml_dynamic_1.a_6 AS edge_json;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_json#4 AS node_json [JSON]
| +-$graph_table.edge_json#5 AS edge_json [JSON]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_json#4, edge_json#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_json#4, edge_json#5]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_json#4, edge_json#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_json#4, edge_json#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_json#4, edge_json#5]
                    +-expr_list=
                    | +-node_json#4 :=
                    | | +-FunctionCall(ZetaSQL:to_json(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, optional(1) BOOL stringify_wide_numbers) -> JSON)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    | |   +-Literal(type=BOOL, value=false)
                    | +-edge_json#5 :=
                    |   +-FunctionCall(ZetaSQL:to_json(GRAPH_EDGE(aml_dynamic_multi)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, optional(1) BOOL stringify_wide_numbers) -> JSON)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml_dynamic_multi)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
                    |     +-Literal(type=BOOL, value=false)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS node_json,
  aml_dynamic_multi_1.a_6 AS edge_json
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TO_JSON(a_2, stringify_wide_numbers  => false) AS a_5,
      TO_JSON(a_3, stringify_wide_numbers  => false) AS a_6
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TO_JSON(a_2, stringify_wide_numbers  => false) AS a_5,
      TO_JSON(a_3, stringify_wide_numbers  => false) AS a_6
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS node_json,
     aml_dynamic_multi_1.a_6 AS edge_json;
==

###############################################################################
# TYPEOF function call
###############################################################################
# Dynamic graph element
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+JSON_TYPE,+TYPEOF_FUNCTION,+SQL_GRAPH_DYNAMIC_MULTI_LABEL_NODES]
select gt.* from
graph_table({{aml_dynamic|aml_dynamic_multi}}
  match (n) -[e]-> ()
  return TYPEOF(n) AS node_type, TYPEOF(e) AS edge_type
) gt
--
ALTERNATION GROUP: aml_dynamic
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_type#4 AS node_type [STRING]
| +-$graph_table.edge_type#5 AS edge_type [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_type#4, edge_type#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_type#4, edge_type#5]
        +-property_graph=aml_dynamic
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_type#4, edge_type#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_type#4, edge_type#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_type#4, edge_type#5]
                    +-expr_list=
                    | +-node_type#4 :=
                    | | +-FunctionCall(ZetaSQL:typeof(GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>) -> STRING)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.n#1)
                    | +-edge_type#5 :=
                    |   +-FunctionCall(ZetaSQL:typeof(GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>) -> STRING)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS node_type,
  aml_dynamic_1.a_6 AS edge_type
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TYPEOF(a_2) AS a_5,
      TYPEOF(a_3) AS a_6
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TYPEOF(a_2) AS a_5,
      TYPEOF(a_3) AS a_6
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS node_type,
     aml_dynamic_1.a_6 AS edge_type;
--
ALTERNATION GROUP: aml_dynamic_multi
--
QueryStmt
+-output_column_list=
| +-$graph_table.node_type#4 AS node_type [STRING]
| +-$graph_table.edge_type#5 AS edge_type [STRING]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[node_type#4, edge_type#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[node_type#4, edge_type#5]
        +-property_graph=aml_dynamic_multi
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[node_type#4, edge_type#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[node_type#4, edge_type#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml_dynamic_multi.DynamicSingleLabelGraphEdge]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml_dynamic_multi.DynamicMultiLabelGraphNode]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[node_type#4, edge_type#5]
                    +-expr_list=
                    | +-node_type#4 :=
                    | | +-FunctionCall(ZetaSQL:typeof(GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>) -> STRING)
                    | |   +-ColumnRef(type=GRAPH_NODE(aml_dynamic_multi)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol ARRAY<STRING>, DYNAMIC>, column=$element_table.n#1)
                    | +-edge_type#5 :=
                    |   +-FunctionCall(ZetaSQL:typeof(GRAPH_EDGE(aml_dynamic_multi)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>) -> STRING)
                    |     +-ColumnRef(type=GRAPH_EDGE(aml_dynamic_multi)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_multi_1.a_5 AS node_type,
  aml_dynamic_multi_1.a_6 AS edge_type
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TYPEOF(a_2) AS a_5,
      TYPEOF(a_3) AS a_6
  ) AS aml_dynamic_multi_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic_multi
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      TYPEOF(a_2) AS a_5,
      TYPEOF(a_3) AS a_6
  ) AS aml_dynamic_multi_1
|> SELECT
     aml_dynamic_multi_1.a_5 AS node_type,
     aml_dynamic_multi_1.a_6 AS edge_type;
==

###############################################################################
# Dynamic properties resolution errors
###############################################################################
# RETURN DISTINCT on JSON type is not supported.
SELECT gt.* FROM GRAPH_TABLE(
  aml_dynamic
  MATCH (n)-[e]->()
  RETURN DISTINCT n.dynamic_property
) gt
--

ERROR: Column dynamic_property of type JSON cannot be used in RETURN DISTINCT [at 4:19]
  RETURN DISTINCT n.dynamic_property
                  ^
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,+SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,+SQL_GRAPH_RETURN_EXTENSIONS]
SELECT gt.* FROM GRAPH_TABLE(
  aml_dynamic
  MATCH (n)-[e]->()
  WITH DISTINCT n.dynamic_property
  RETURN dynamic_property
) gt
--
ERROR: Column dynamic_property of type JSON cannot be used in WITH DISTINCT [at 4:17]
  WITH DISTINCT n.dynamic_property
                ^
==

###############################################################################
# Repro
###############################################################################
# Repro b/406227171
GRAPH aml_dynamic
  MATCH -[e]->
  RETURN e
  UNION ALL
  MATCH -[e:Connection]->
  RETURN e
  NEXT
  RETURN
    e.category AS cat,
    e.dynamic_property AS dynamic_property
--
QueryStmt
+-output_column_list=
| +-$graph_table.cat#10 AS cat [STRING]
| +-$graph_table.dynamic_property#11 AS dynamic_property [JSON]
+-query=
  +-GraphTableScan
    +-column_list=$graph_table.[cat#10, dynamic_property#11]
    +-property_graph=aml_dynamic
    +-input_scan=
      +-GraphLinearScan
        +-column_list=$graph_table.[cat#10, dynamic_property#11]
        +-scan_list=
          +-SetOperationScan
          | +-column_list=[$graph_set_op.e#9]
          | +-op_type=UNION_ALL
          | +-input_item_list=
          | | +-SetOperationItem
          | | | +-scan=
          | | | | +-GraphLinearScan
          | | | |   +-column_list=[$graph_table.e#4]
          | | | |   +-scan_list=
          | | | |     +-GraphScan
          | | | |     | +-column_list=$element_table.[$element1#1, e#2, $element2#3]
          | | | |     | +-input_scan_list=
          | | | |     | | +-GraphPathScan
          | | | |     | |   +-column_list=$element_table.[$element1#1, e#2, $element2#3]
          | | | |     | |   +-input_scan_list=
          | | | |     | |   | +-GraphNodeScan
          | | | |     | |   | | +-column_list=[$element_table.$element1#1]
          | | | |     | |   | | +-label_expr=
          | | | |     | |   | | | +-GraphLabelNaryExpr
          | | | |     | |   | | |   +-op=OR
          | | | |     | |   | | |   +-operand_list=
          | | | |     | |   | | |     +-GraphWildCardLabel
          | | | |     | |   | | |     +-GraphLabelNaryExpr
          | | | |     | |   | | |       +-op=NOT
          | | | |     | |   | | |       +-operand_list=
          | | | |     | |   | | |         +-GraphWildCardLabel
          | | | |     | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
          | | | |     | |   | +-GraphEdgeScan
          | | | |     | |   | | +-column_list=[$element_table.e#2]
          | | | |     | |   | | +-label_expr=
          | | | |     | |   | | | +-GraphLabelNaryExpr
          | | | |     | |   | | |   +-op=OR
          | | | |     | |   | | |   +-operand_list=
          | | | |     | |   | | |     +-GraphWildCardLabel
          | | | |     | |   | | |     +-GraphLabelNaryExpr
          | | | |     | |   | | |       +-op=NOT
          | | | |     | |   | | |       +-operand_list=
          | | | |     | |   | | |         +-GraphWildCardLabel
          | | | |     | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
          | | | |     | |   | | +-orientation=RIGHT
          | | | |     | |   | +-GraphNodeScan
          | | | |     | |   |   +-column_list=[$element_table.$element2#3]
          | | | |     | |   |   +-label_expr=
          | | | |     | |   |   | +-GraphLabelNaryExpr
          | | | |     | |   |   |   +-op=OR
          | | | |     | |   |   |   +-operand_list=
          | | | |     | |   |   |     +-GraphWildCardLabel
          | | | |     | |   |   |     +-GraphLabelNaryExpr
          | | | |     | |   |   |       +-op=NOT
          | | | |     | |   |   |       +-operand_list=
          | | | |     | |   |   |         +-GraphWildCardLabel
          | | | |     | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
          | | | |     | |   +-head=$element_table.$element1#1
          | | | |     | |   +-tail=$element_table.$element2#3
          | | | |     | +-input_scan=
          | | | |     |   +-SingleRowScan
          | | | |     +-ProjectScan
          | | | |       +-column_list=[$graph_table.e#4]
          | | | |       +-expr_list=
          | | | |       | +-e#4 := ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#2)
          | | | |       +-input_scan=
          | | | |         +-GraphRefScan(column_list=$element_table.[$element1#1, e#2, $element2#3])
          | | | +-output_column_list=[$graph_table.e#4]
          | | +-SetOperationItem
          | |   +-scan=
          | |   | +-GraphLinearScan
          | |   |   +-column_list=[$graph_table.e#8]
          | |   |   +-scan_list=
          | |   |     +-GraphScan
          | |   |     | +-column_list=$element_table.[$element3#5, e#6, $element4#7]
          | |   |     | +-input_scan_list=
          | |   |     | | +-GraphPathScan
          | |   |     | |   +-column_list=$element_table.[$element3#5, e#6, $element4#7]
          | |   |     | |   +-input_scan_list=
          | |   |     | |   | +-GraphNodeScan
          | |   |     | |   | | +-column_list=[$element_table.$element3#5]
          | |   |     | |   | | +-label_expr=
          | |   |     | |   | | | +-GraphLabelNaryExpr
          | |   |     | |   | | |   +-op=OR
          | |   |     | |   | | |   +-operand_list=
          | |   |     | |   | | |     +-GraphWildCardLabel
          | |   |     | |   | | |     +-GraphLabelNaryExpr
          | |   |     | |   | | |       +-op=NOT
          | |   |     | |   | | |       +-operand_list=
          | |   |     | |   | | |         +-GraphWildCardLabel
          | |   |     | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
          | |   |     | |   | +-GraphEdgeScan
          | |   |     | |   | | +-column_list=[$element_table.e#6]
          | |   |     | |   | | +-label_expr=
          | |   |     | |   | | | +-GraphLabel
          | |   |     | |   | | |   +-parse_location=68-78
          | |   |     | |   | | |   +-label=aml_dynamic.CONNECTION
          | |   |     | |   | | |   +-label_name=
          | |   |     | |   | | |     +-Literal(type=STRING, value="Connection", has_explicit_type=TRUE)
          | |   |     | |   | | +-target_element_table_list=[aml_dynamic.DynamicGraphEdge]
          | |   |     | |   | | +-orientation=RIGHT
          | |   |     | |   | +-GraphNodeScan
          | |   |     | |   |   +-column_list=[$element_table.$element4#7]
          | |   |     | |   |   +-label_expr=
          | |   |     | |   |   | +-GraphLabelNaryExpr
          | |   |     | |   |   |   +-op=OR
          | |   |     | |   |   |   +-operand_list=
          | |   |     | |   |   |     +-GraphWildCardLabel
          | |   |     | |   |   |     +-GraphLabelNaryExpr
          | |   |     | |   |   |       +-op=NOT
          | |   |     | |   |   |       +-operand_list=
          | |   |     | |   |   |         +-GraphWildCardLabel
          | |   |     | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
          | |   |     | |   +-head=$element_table.$element3#5
          | |   |     | |   +-tail=$element_table.$element4#7
          | |   |     | +-input_scan=
          | |   |     |   +-SingleRowScan
          | |   |     +-ProjectScan
          | |   |       +-column_list=[$graph_table.e#8]
          | |   |       +-expr_list=
          | |   |       | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$element_table.e#6)
          | |   |       +-input_scan=
          | |   |         +-GraphRefScan(column_list=$element_table.[$element3#5, e#6, $element4#7])
          | |   +-output_column_list=[$graph_table.e#8]
          | +-column_match_mode=CORRESPONDING
          +-GraphLinearScan
            +-column_list=$graph_table.[cat#10, dynamic_property#11]
            +-scan_list=
              +-ProjectScan
                +-column_list=$graph_table.[cat#10, dynamic_property#11]
                +-expr_list=
                | +-cat#10 :=
                | | +-GraphGetElementProperty
                | |   +-type=STRING
                | |   +-expr=
                | |   | +-ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$graph_set_op.e#9)
                | |   +-property=category(STRING)
                | |   +-property_name=
                | |     +-Literal(type=STRING, value="category", has_explicit_type=TRUE)
                | +-dynamic_property#11 :=
                |   +-GraphGetElementProperty
                |     +-type=JSON
                |     +-expr=
                |     | +-ColumnRef(type=GRAPH_EDGE(aml_dynamic)<category STRING, dst_id INT64, edgeJsonProp JSON, edgeLabelCol STRING, id INT64, DYNAMIC>, column=$graph_set_op.e#9)
                |     +-property_name=
                |       +-Literal(type=STRING, value="dynamic_property", has_explicit_type=TRUE)
                +-input_scan=
                  +-GraphRefScan(column_list=[$graph_set_op.e#9])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_9 AS cat,
  aml_dynamic_1.a_10 AS dynamic_property
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_3
      IS (% | ! %))
      -[a_4
      IS (% | ! %)]->
      (a_5
      IS (% | ! %))
    RETURN
      a_4 AS a_2
    UNION ALL
    MATCH
      (a_6
      IS (% | ! %))
      -[a_7
      IS CONNECTION]->
      (a_8
      IS (% | ! %))
    RETURN
      a_7 AS a_2
    NEXT
    RETURN
      a_2.category AS a_9,
      a_2.dynamic_property AS a_10
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_3
      IS (% | ! %))
      -[a_4
      IS (% | ! %)]->
      (a_5
      IS (% | ! %))
    RETURN
      a_4 AS a_2
    UNION ALL
    MATCH
      (a_6
      IS (% | ! %))
      -[a_7
      IS CONNECTION]->
      (a_8
      IS (% | ! %))
    RETURN
      a_7 AS a_2
    NEXT
    RETURN
      a_2.category AS a_9,
      a_2.dynamic_property AS a_10
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_9 AS cat,
     aml_dynamic_1.a_10 AS dynamic_property;
==

# Repro b/406227171
GRAPH aml_dynamic
  MATCH (a)
  RETURN a
  UNION ALL
  MATCH (a:Entity)
  RETURN a
  NEXT
  RETURN
    a.code AS code,
    a.dynamic_property AS dynamic_property
--
QueryStmt
+-output_column_list=
| +-$graph_table.code#6 AS code [INT64]
| +-$graph_table.dynamic_property#7 AS dynamic_property [JSON]
+-query=
  +-GraphTableScan
    +-column_list=$graph_table.[code#6, dynamic_property#7]
    +-property_graph=aml_dynamic
    +-input_scan=
      +-GraphLinearScan
        +-column_list=$graph_table.[code#6, dynamic_property#7]
        +-scan_list=
          +-SetOperationScan
          | +-column_list=[$graph_set_op.a#5]
          | +-op_type=UNION_ALL
          | +-input_item_list=
          | | +-SetOperationItem
          | | | +-scan=
          | | | | +-GraphLinearScan
          | | | |   +-column_list=[$graph_table.a#2]
          | | | |   +-scan_list=
          | | | |     +-GraphScan
          | | | |     | +-column_list=[$element_table.a#1]
          | | | |     | +-input_scan_list=
          | | | |     | | +-GraphPathScan
          | | | |     | |   +-column_list=[$element_table.a#1]
          | | | |     | |   +-input_scan_list=
          | | | |     | |   | +-GraphNodeScan
          | | | |     | |   |   +-column_list=[$element_table.a#1]
          | | | |     | |   |   +-label_expr=
          | | | |     | |   |   | +-GraphLabelNaryExpr
          | | | |     | |   |   |   +-op=OR
          | | | |     | |   |   |   +-operand_list=
          | | | |     | |   |   |     +-GraphWildCardLabel
          | | | |     | |   |   |     +-GraphLabelNaryExpr
          | | | |     | |   |   |       +-op=NOT
          | | | |     | |   |   |       +-operand_list=
          | | | |     | |   |   |         +-GraphWildCardLabel
          | | | |     | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
          | | | |     | |   +-head=$element_table.a#1
          | | | |     | |   +-tail=$element_table.a#1
          | | | |     | +-input_scan=
          | | | |     |   +-SingleRowScan
          | | | |     +-ProjectScan
          | | | |       +-column_list=[$graph_table.a#2]
          | | | |       +-expr_list=
          | | | |       | +-a#2 := ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.a#1)
          | | | |       +-input_scan=
          | | | |         +-GraphRefScan(column_list=[$element_table.a#1])
          | | | +-output_column_list=[$graph_table.a#2]
          | | +-SetOperationItem
          | |   +-scan=
          | |   | +-GraphLinearScan
          | |   |   +-column_list=[$graph_table.a#4]
          | |   |   +-scan_list=
          | |   |     +-GraphScan
          | |   |     | +-column_list=[$element_table.a#3]
          | |   |     | +-input_scan_list=
          | |   |     | | +-GraphPathScan
          | |   |     | |   +-column_list=[$element_table.a#3]
          | |   |     | |   +-input_scan_list=
          | |   |     | |   | +-GraphNodeScan
          | |   |     | |   |   +-column_list=[$element_table.a#3]
          | |   |     | |   |   +-label_expr=
          | |   |     | |   |   | +-GraphLabel
          | |   |     | |   |   |   +-parse_location=64-70
          | |   |     | |   |   |   +-label=aml_dynamic.Entity
          | |   |     | |   |   |   +-label_name=
          | |   |     | |   |   |     +-Literal(type=STRING, value="Entity", has_explicit_type=TRUE)
          | |   |     | |   |   +-target_element_table_list=[aml_dynamic.DynamicGraphNode]
          | |   |     | |   +-head=$element_table.a#3
          | |   |     | |   +-tail=$element_table.a#3
          | |   |     | +-input_scan=
          | |   |     |   +-SingleRowScan
          | |   |     +-ProjectScan
          | |   |       +-column_list=[$graph_table.a#4]
          | |   |       +-expr_list=
          | |   |       | +-a#4 := ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$element_table.a#3)
          | |   |       +-input_scan=
          | |   |         +-GraphRefScan(column_list=[$element_table.a#3])
          | |   +-output_column_list=[$graph_table.a#4]
          | +-column_match_mode=CORRESPONDING
          +-GraphLinearScan
            +-column_list=$graph_table.[code#6, dynamic_property#7]
            +-scan_list=
              +-ProjectScan
                +-column_list=$graph_table.[code#6, dynamic_property#7]
                +-expr_list=
                | +-code#6 :=
                | | +-GraphGetElementProperty
                | |   +-type=INT64
                | |   +-expr=
                | |   | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$graph_set_op.a#5)
                | |   +-property=code(INT64)
                | |   +-property_name=
                | |     +-Literal(type=STRING, value="code", has_explicit_type=TRUE)
                | +-dynamic_property#7 :=
                |   +-GraphGetElementProperty
                |     +-type=JSON
                |     +-expr=
                |     | +-ColumnRef(type=GRAPH_NODE(aml_dynamic)<code INT64, id INT64, nodeJsonProp JSON, nodeLabelCol STRING, DYNAMIC>, column=$graph_set_op.a#5)
                |     +-property_name=
                |       +-Literal(type=STRING, value="dynamic_property", has_explicit_type=TRUE)
                +-input_scan=
                  +-GraphRefScan(column_list=[$graph_set_op.a#5])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_dynamic_1.a_5 AS code,
  aml_dynamic_1.a_6 AS dynamic_property
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_3
      IS (% | ! %))
    RETURN
      a_3 AS a_2
    UNION ALL
    MATCH
      (a_4
      IS Entity)
    RETURN
      a_4 AS a_2
    NEXT
    RETURN
      a_2.code AS a_5,
      a_2.dynamic_property AS a_6
  ) AS aml_dynamic_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml_dynamic
    MATCH
      (a_3
      IS (% | ! %))
    RETURN
      a_3 AS a_2
    UNION ALL
    MATCH
      (a_4
      IS Entity)
    RETURN
      a_4 AS a_2
    NEXT
    RETURN
      a_2.code AS a_5,
      a_2.dynamic_property AS a_6
  ) AS aml_dynamic_1
|> SELECT
     aml_dynamic_1.a_5 AS code,
     aml_dynamic_1.a_6 AS dynamic_property;
