[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+ANALYTIC_FUNCTIONS,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_RETURN_EXTENSIONS,+SQL_GRAPH_PATH_TYPE,+GROUP_BY_GRAPH_PATH,+SQL_GRAPH_PATH_MODE]
[default no_test_extract_table_names]
[default show_sqlbuilder_output]

# Not allowed on element pattern WHERE clause
select gt.* from
graph_table(aml
  match (n WHERE afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.id) > 5)
          -[e]->()
  return n.id
) gt
--

ERROR: Analytic function not allowed in WHERE clause [at 4:18]
  match (n WHERE afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.id) > 5)
                 ^
==

# Not allowed on MATCH WHERE clause
select gt.* from
graph_table(aml
  match (n)-[e]->()
    WHERE afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.id) > 5
  return n.id
) gt
--

ERROR: Analytic function not allowed in WHERE clause [at 4:11]
    WHERE afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.id) > 5
          ^
==

# Analytic functions in FILTER
select gt.* from
graph_table(aml
  match (n)-[e]->()
  FILTER afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.id) > 5
  return n.id
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.id#7 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AnalyticScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $partitionby.name#5, $orderby.id#6]
                  | |   +-expr_list=
                  | |   | +-name#5 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=STRING
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   | |   +-property=name(STRING)
                  | |   | +-id#6 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=INT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |     +-property=id(INT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                  | +-function_group_list=
                  |   +-AnalyticFunctionGroup
                  |     +-partition_by=
                  |     | +-WindowPartitioning
                  |     |   +-partition_by_list=
                  |     |     +-ColumnRef(type=STRING, column=$partitionby.name#5)
                  |     +-order_by=
                  |     | +-WindowOrdering
                  |     |   +-order_by_item_list=
                  |     |     +-OrderByItem
                  |     |       +-column_ref=
                  |     |         +-ColumnRef(type=INT64, column=$orderby.id#6)
                  |     +-analytic_function_list=
                  |       +-$analytic1#4 :=
                  |         +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=UINT32
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-property=age(UINT32)
                  |           +-window_frame=
                  |             +-WindowFrame(frame_unit=RANGE)
                  |               +-start_expr=
                  |               | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |               +-end_expr=
                  |                 +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#4)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.id#7]
                    +-expr_list=
                    | +-id#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_6 AS id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    LET
      a_5 = AFN_AGG(a_2.age) OVER (PARTITION BY a_2.name
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_5 > 5
    RETURN
      a_2.id AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    LET
      a_5 = AFN_AGG(a_2.age) OVER (PARTITION BY a_2.name
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_5 > 5
    RETURN
      a_2.id AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS id;
==

# Analytic functions in FILTER with horizontal agg
select gt.* from
graph_table(aml
  match (n)-[e]->{3, 5}()
  FILTER afn_agg(sum(e.amount)) OVER (PARTITION BY n.name ORDER BY n.id) > 5
  return n.id
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#15 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#15]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#15]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=3)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=5)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element3#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element3#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AnalyticScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#12]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $partitionby.name#13, $orderby.id#14]
                  | |   +-expr_list=
                  | |   | +-name#13 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=STRING
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   | |   +-property=name(STRING)
                  | |   | +-id#14 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=INT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |     +-property=id(INT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[n#1, e#6, $element3#10])
                  | +-function_group_list=
                  |   +-AnalyticFunctionGroup
                  |     +-partition_by=
                  |     | +-WindowPartitioning
                  |     |   +-partition_by_list=
                  |     |     +-ColumnRef(type=STRING, column=$partitionby.name#13)
                  |     +-order_by=
                  |     | +-WindowOrdering
                  |     |   +-order_by_item_list=
                  |     |     +-OrderByItem
                  |     |       +-column_ref=
                  |     |         +-ColumnRef(type=INT64, column=$orderby.id#14)
                  |     +-analytic_function_list=
                  |       +-$analytic1#12 :=
                  |         +-AnalyticFunctionCall(sample_functions:afn_agg(UINT64) -> INT64)
                  |           +-ArrayAggregate
                  |             +-type=UINT64
                  |             +-array=
                  |             | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |             +-element_column=$horizontal_aggregate.e#11
                  |             +-aggregate=
                  |               +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  |                 +-GraphGetElementProperty
                  |                   +-type=UINT64
                  |                   +-expr=
                  |                   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#11)
                  |                   +-property=amount(UINT64)
                  |           +-window_frame=
                  |             +-WindowFrame(frame_unit=RANGE)
                  |               +-start_expr=
                  |               | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |               +-end_expr=
                  |                 +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#12]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#12])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#12)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.id#15]
                    +-expr_list=
                    | +-id#15 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#6, $element3#10])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_8 AS id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      (
        (a_3
        IS (% | ! %))
        -[a_4
        IS (% | ! %)]->
        (a_5
        IS (% | ! %))
      ) { 3, 5 }
      (a_6
      IS (% | ! %))
    LET
      a_7 = AFN_AGG(SUM(a_4.amount)) OVER (PARTITION BY a_2.name
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_7 > 5
    RETURN
      a_2.id AS a_8
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      (
        (a_3
        IS (% | ! %))
        -[a_4
        IS (% | ! %)]->
        (a_5
        IS (% | ! %))
      ) { 3, 5 }
      (a_6
      IS (% | ! %))
    LET
      a_7 = AFN_AGG(SUM(a_4.amount)) OVER (PARTITION BY a_2.name
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_7 > 5
    RETURN
      a_2.id AS a_8
  ) AS aml_1
|> SELECT
     aml_1.a_8 AS id;
==


# Analytic functions in FILTER still disallow vertical agg
select gt.* from
graph_table(aml
  match (n)-[e]->()
  FILTER afn_agg(sum(e.amount)) OVER (PARTITION BY n.name ORDER BY n.id) > 5
  return n.id
) gt
--

ERROR: Horizontal aggregation without an array-typed variable is not allowed. Normal vertical aggregation is not allowed in this syntactic context [at 4:18]
  FILTER afn_agg(sum(e.amount)) OVER (PARTITION BY n.name ORDER BY n.id) > 5
                 ^
==

# Analytic functions are allowed in LET.
select gt.* from
graph_table(aml
  match (n)-[e]->()
  LET w = afn_agg(n.age) OVER (PARTITION BY SOURCE_NODE_ID(e) ORDER BY n.age)
  return n.id, w
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#8 AS id [INT64]
| +-$graph_table.w#9 AS w [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#8, w#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#8, w#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#8, w#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#8, w#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.w#5]
                  | +-expr_list=
                  | | +-w#5 := ColumnRef(type=INT64, column=$analytic.$analytic1#4)
                  | +-input_scan=
                  |   +-AnalyticScan
                  |     +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4]
                  |     +-input_scan=
                  |     | +-ProjectScan
                  |     |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $partitionby.$partitionbycol1#6, $orderby.age#7]
                  |     |   +-expr_list=
                  |     |   | +-$partitionbycol1#6 :=
                  |     |   | | +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                  |     |   | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |   | +-age#7 :=
                  |     |   |   +-GraphGetElementProperty
                  |     |   |     +-type=UINT32
                  |     |   |     +-expr=
                  |     |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |   |     +-property=age(UINT32)
                  |     |   +-input_scan=
                  |     |     +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                  |     +-function_group_list=
                  |       +-AnalyticFunctionGroup
                  |         +-partition_by=
                  |         | +-WindowPartitioning
                  |         |   +-partition_by_list=
                  |         |     +-ColumnRef(type=STRING, column=$partitionby.$partitionbycol1#6)
                  |         +-order_by=
                  |         | +-WindowOrdering
                  |         |   +-order_by_item_list=
                  |         |     +-OrderByItem
                  |         |       +-column_ref=
                  |         |         +-ColumnRef(type=UINT32, column=$orderby.age#7)
                  |         +-analytic_function_list=
                  |           +-$analytic1#4 :=
                  |             +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |               +-GraphGetElementProperty
                  |                 +-type=UINT32
                  |                 +-expr=
                  |                 | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |                 +-property=age(UINT32)
                  |               +-window_frame=
                  |                 +-WindowFrame(frame_unit=RANGE)
                  |                   +-start_expr=
                  |                   | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |                   +-end_expr=
                  |                     +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#8, w#9]
                    +-expr_list=
                    | +-id#8 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=id(INT64)
                    | +-w#9 := ColumnRef(type=INT64, column=$graph_table.w#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.w#5])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_6 AS id,
  aml_1.a_7 AS w
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    LET
      a_5 = AFN_AGG(a_2.age) OVER (PARTITION BY SOURCE_NODE_ID(a_3)
        ORDER BY a_2.age RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    RETURN
      a_2.id AS a_6,
      a_5 AS a_7
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    LET
      a_5 = AFN_AGG(a_2.age) OVER (PARTITION BY SOURCE_NODE_ID(a_3)
        ORDER BY a_2.age RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    RETURN
      a_2.id AS a_6,
      a_5 AS a_7
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS id,
     aml_1.a_7 AS w;
==

# Analytic functions are allowed in LET with horizontal agg
select gt.* from
graph_table(aml
  match (n)-[e]->{3, 5}()
  LET w = afn_agg(sum(e.amount)) OVER (PARTITION BY SOURCE_NODE_ID(ARRAY_FIRST(e)) ORDER BY n.age)
  return n.id, w
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.id#16 AS id [INT64]
| +-$graph_table.w#17 AS w [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#16, w#17]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#16, w#17]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#16, w#17]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#16, w#17]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=3)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=5)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element3#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element3#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $graph_table.w#13]
                  | +-expr_list=
                  | | +-w#13 := ColumnRef(type=INT64, column=$analytic.$analytic1#12)
                  | +-input_scan=
                  |   +-AnalyticScan
                  |     +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#12]
                  |     +-input_scan=
                  |     | +-ProjectScan
                  |     |   +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $partitionby.$partitionbycol1#14, $orderby.age#15]
                  |     |   +-expr_list=
                  |     |   | +-$partitionbycol1#14 :=
                  |     |   | | +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                  |     |   | |   +-FunctionCall(ZetaSQL:array_first(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>> input_array) -> GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                  |     |   | |     +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |     |   | +-age#15 :=
                  |     |   |   +-GraphGetElementProperty
                  |     |   |     +-type=UINT32
                  |     |   |     +-expr=
                  |     |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |   |     +-property=age(UINT32)
                  |     |   +-input_scan=
                  |     |     +-GraphRefScan(column_list=$element_table.[n#1, e#6, $element3#10])
                  |     +-function_group_list=
                  |       +-AnalyticFunctionGroup
                  |         +-partition_by=
                  |         | +-WindowPartitioning
                  |         |   +-partition_by_list=
                  |         |     +-ColumnRef(type=STRING, column=$partitionby.$partitionbycol1#14)
                  |         +-order_by=
                  |         | +-WindowOrdering
                  |         |   +-order_by_item_list=
                  |         |     +-OrderByItem
                  |         |       +-column_ref=
                  |         |         +-ColumnRef(type=UINT32, column=$orderby.age#15)
                  |         +-analytic_function_list=
                  |           +-$analytic1#12 :=
                  |             +-AnalyticFunctionCall(sample_functions:afn_agg(UINT64) -> INT64)
                  |               +-ArrayAggregate
                  |                 +-type=UINT64
                  |                 +-array=
                  |                 | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |                 +-element_column=$horizontal_aggregate.e#11
                  |                 +-aggregate=
                  |                   +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  |                     +-GraphGetElementProperty
                  |                       +-type=UINT64
                  |                       +-expr=
                  |                       | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#11)
                  |                       +-property=amount(UINT64)
                  |               +-window_frame=
                  |                 +-WindowFrame(frame_unit=RANGE)
                  |                   +-start_expr=
                  |                   | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |                   +-end_expr=
                  |                     +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#16, w#17]
                    +-expr_list=
                    | +-id#16 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=id(INT64)
                    | +-w#17 := ColumnRef(type=INT64, column=$graph_table.w#13)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $graph_table.w#13])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_8 AS id,
  aml_1.a_9 AS w
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      (
        (a_3
        IS (% | ! %))
        -[a_4
        IS (% | ! %)]->
        (a_5
        IS (% | ! %))
      ) { 3, 5 }
      (a_6
      IS (% | ! %))
    LET
      a_7 = AFN_AGG(SUM(a_4.amount)) OVER (PARTITION BY SOURCE_NODE_ID(ARRAY_FIRST(a_4))
        ORDER BY a_2.age RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    RETURN
      a_2.id AS a_8,
      a_7 AS a_9
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      (
        (a_3
        IS (% | ! %))
        -[a_4
        IS (% | ! %)]->
        (a_5
        IS (% | ! %))
      ) { 3, 5 }
      (a_6
      IS (% | ! %))
    LET
      a_7 = AFN_AGG(SUM(a_4.amount)) OVER (PARTITION BY SOURCE_NODE_ID(ARRAY_FIRST(a_4))
        ORDER BY a_2.age RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    RETURN
      a_2.id AS a_8,
      a_7 AS a_9
  ) AS aml_1
|> SELECT
     aml_1.a_8 AS id,
     aml_1.a_9 AS w;
==

# Analytic functions are in LET still disallow vertical agg
select gt.* from
graph_table(aml
  match (n)-[e]->()
  LET w = afn_agg(sum(e.amount)) OVER (PARTITION BY SOURCE_NODE_ID(e) ORDER BY n.age)
  return n.id, w
) gt
--

ERROR: Horizontal aggregation without an array-typed variable is not allowed. Normal vertical aggregation is not allowed in this syntactic context [at 4:19]
  LET w = afn_agg(sum(e.amount)) OVER (PARTITION BY SOURCE_NODE_ID(e) ORDER B...
                  ^
==

# Analytic functions are allowed in RETURN
select gt.* from
graph_table(aml
  match (n)-[e]->()
  return n.id,
         afn_agg(n) OVER (PARTITION BY SOURCE_NODE_ID(e) ORDER BY n.age) AS w
) gt
--

ERROR: No matching signature for aggregate function SAMPLE_FUNCTIONS:AFN_AGG
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>
  Signature: AFN_AGG()
    Signature accepts at most 0 arguments, found 1 argument
  Signature: AFN_AGG(T1)
    Argument 1: expected T1, found GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>: which is not allowed for ANY arguments
  Signature: AFN_AGG(INT64, STRING)
    Signature requires at least 2 arguments, found 1 argument [at 5:10]
         afn_agg(n) OVER (PARTITION BY SOURCE_NODE_ID(e) ORDER BY n.age) AS w
         ^
==

# Vertical aggregation is allowed in window function in RETURN
select gt.* from
graph_table(aml
  match (n)-[e]->()
  return afn_agg(SUM(n.age)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(e)) ORDER BY MIN(n.id)) AS w1
         group by n.name
) gt
--

QueryStmt
+-output_column_list=
| +-$analytic.w1#9 AS w1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.w1#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$analytic.w1#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$analytic.w1#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$analytic.w1#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$analytic.w1#9]
                    +-input_scan=
                      +-AnalyticScan
                        +-column_list=[$graph_table.$agg1#4, $graph_table.$agg2#5, $graph_table.$agg3#6, $analytic.w1#9]
                        +-input_scan=
                        | +-AggregateScan
                        |   +-column_list=$graph_table.[$agg1#4, $agg2#5, $agg3#6]
                        |   +-input_scan=
                        |   | +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                        |   +-group_by_list=
                        |   | +-name#8 :=
                        |   |   +-GraphGetElementProperty
                        |   |     +-type=STRING
                        |   |     +-expr=
                        |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |   |     +-property=name(STRING)
                        |   +-aggregate_list=
                        |     +-$agg1#4 :=
                        |     | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                        |     |   +-Cast(UINT32 -> UINT64)
                        |     |     +-GraphGetElementProperty
                        |     |       +-type=UINT32
                        |     |       +-expr=
                        |     |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |     |       +-property=age(UINT32)
                        |     +-$agg2#5 :=
                        |     | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
                        |     |   +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                        |     |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                        |     +-$agg3#6 :=
                        |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
                        |         +-GraphGetElementProperty
                        |           +-type=INT64
                        |           +-expr=
                        |           | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |           +-property=id(INT64)
                        +-function_group_list=
                          +-AnalyticFunctionGroup
                            +-partition_by=
                            | +-WindowPartitioning
                            |   +-partition_by_list=
                            |     +-ColumnRef(type=STRING, column=$graph_table.$agg2#5)
                            +-order_by=
                            | +-WindowOrdering
                            |   +-order_by_item_list=
                            |     +-OrderByItem
                            |       +-column_ref=
                            |         +-ColumnRef(type=INT64, column=$graph_table.$agg3#6)
                            +-analytic_function_list=
                              +-w1#9 :=
                                +-AnalyticFunctionCall(sample_functions:afn_agg(UINT64) -> INT64)
                                  +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                                  +-window_frame=
                                    +-WindowFrame(frame_unit=RANGE)
                                      +-start_expr=
                                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                                      +-end_expr=
                                        +-WindowFrameExpr(boundary_type=CURRENT ROW)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS w1
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      AFN_AGG(SUM(CAST(a_2.age AS UINT64))) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(a_3))
        ORDER BY MIN(a_2.id) RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_5
    GROUP BY a_2.name
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      AFN_AGG(SUM(CAST(a_2.age AS UINT64))) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(a_3))
        ORDER BY MIN(a_2.id) RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_5
    GROUP BY a_2.name
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS w1;
==

# Regression test where analytic columns referenced on RETURN's ORDER BY  clause
# were not properly handled in SqlBuilder.
select gt.* from
graph_table(aml
  match (n)-[e]->()
  return afn_agg(n.age) OVER (PARTITION BY n.id ORDER BY n.id) AS w1,
         n.id, n.age
         order by w1
) gt
--

QueryStmt
+-output_column_list=
| +-$analytic.w1#5 AS w1 [INT64]
| +-$graph_table.id#6 AS id [INT64]
| +-$graph_table.age#7 AS age [UINT32]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.w1#5, $graph_table.id#6, $graph_table.age#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$analytic.w1#5, $graph_table.id#6, $graph_table.age#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$analytic.w1#5, $graph_table.id#6, $graph_table.age#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$analytic.w1#5, $graph_table.id#6, $graph_table.age#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$analytic.w1#5, $graph_table.id#6, $graph_table.age#7]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-AnalyticScan
                    |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.id#6, $graph_table.age#7, $analytic.w1#5]
                    |   +-input_scan=
                    |   | +-ProjectScan
                    |   |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.id#6, $graph_table.age#7, $partitionby.id#8, $orderby.id#9]
                    |   |   +-expr_list=
                    |   |   | +-id#8 :=
                    |   |   | | +-GraphGetElementProperty
                    |   |   | |   +-type=INT64
                    |   |   | |   +-expr=
                    |   |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |   |   | |   +-property=id(INT64)
                    |   |   | +-id#9 :=
                    |   |   |   +-GraphGetElementProperty
                    |   |   |     +-type=INT64
                    |   |   |     +-expr=
                    |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |   |   |     +-property=id(INT64)
                    |   |   +-input_scan=
                    |   |     +-ProjectScan
                    |   |       +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.id#6, $graph_table.age#7]
                    |   |       +-expr_list=
                    |   |       | +-id#6 :=
                    |   |       | | +-GraphGetElementProperty
                    |   |       | |   +-type=INT64
                    |   |       | |   +-expr=
                    |   |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |   |       | |   +-property=id(INT64)
                    |   |       | +-age#7 :=
                    |   |       |   +-GraphGetElementProperty
                    |   |       |     +-type=UINT32
                    |   |       |     +-expr=
                    |   |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |   |       |     +-property=age(UINT32)
                    |   |       +-input_scan=
                    |   |         +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                    |   +-function_group_list=
                    |     +-AnalyticFunctionGroup
                    |       +-partition_by=
                    |       | +-WindowPartitioning
                    |       |   +-partition_by_list=
                    |       |     +-ColumnRef(type=INT64, column=$partitionby.id#8)
                    |       +-order_by=
                    |       | +-WindowOrdering
                    |       |   +-order_by_item_list=
                    |       |     +-OrderByItem
                    |       |       +-column_ref=
                    |       |         +-ColumnRef(type=INT64, column=$orderby.id#9)
                    |       +-analytic_function_list=
                    |         +-w1#5 :=
                    |           +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                    |             +-GraphGetElementProperty
                    |               +-type=UINT32
                    |               +-expr=
                    |               | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |               +-property=age(UINT32)
                    |             +-window_frame=
                    |               +-WindowFrame(frame_unit=RANGE)
                    |                 +-start_expr=
                    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                    |                 +-end_expr=
                    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=INT64, column=$analytic.w1#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS w1,
  aml_1.a_6 AS id,
  aml_1.a_7 AS age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      AFN_AGG(a_2.age) OVER (PARTITION BY a_2.id
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_5,
      a_2.id AS a_6,
      a_2.age AS a_7
    ORDER BY a_5
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      AFN_AGG(a_2.age) OVER (PARTITION BY a_2.id
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_5,
      a_2.id AS a_6,
      a_2.age AS a_7
    ORDER BY a_5
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS w1,
     aml_1.a_6 AS id,
     aml_1.a_7 AS age;
==

# Analytic function in RETURN still disallows horizontal aggregation
select gt.* from
graph_table(aml
  match (n)-[e]->{3, 5}()
  return n.id, afn_agg(SUM(e.amount)) OVER (PARTITION BY SOURCE_NODE_ID(ANY_VALUE(e)) ORDER BY MIN(n.id)) AS w1
    group by n.name
) gt
--

ERROR: Cannot access field amount on a value with type ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>> [at 4:30]
  return n.id, afn_agg(SUM(e.amount)) OVER (PARTITION BY SOURCE_NODE_ID(ANY_V...
                             ^
==

# Analytic functions are allowed in WITH.
select gt.* from
graph_table(aml
  match (n)-[e]->()
  WITH n,
       afn_agg(n.age) OVER (PARTITION BY SOURCE_NODE_ID(e) ORDER BY n.age) AS w
  return n.id, w
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.id#8 AS id [INT64]
| +-$graph_table.w#9 AS w [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[id#8, w#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[id#8, w#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[id#8, w#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[id#8, w#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.n#1, $analytic.w#5]
                  | +-input_scan=
                  |   +-AnalyticScan
                  |     +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.w#5]
                  |     +-input_scan=
                  |     | +-ProjectScan
                  |     |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $partitionby.$partitionbycol1#6, $orderby.age#7]
                  |     |   +-expr_list=
                  |     |   | +-$partitionbycol1#6 :=
                  |     |   | | +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                  |     |   | |   +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |   | +-age#7 :=
                  |     |   |   +-GraphGetElementProperty
                  |     |   |     +-type=UINT32
                  |     |   |     +-expr=
                  |     |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |   |     +-property=age(UINT32)
                  |     |   +-input_scan=
                  |     |     +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                  |     +-function_group_list=
                  |       +-AnalyticFunctionGroup
                  |         +-partition_by=
                  |         | +-WindowPartitioning
                  |         |   +-partition_by_list=
                  |         |     +-ColumnRef(type=STRING, column=$partitionby.$partitionbycol1#6)
                  |         +-order_by=
                  |         | +-WindowOrdering
                  |         |   +-order_by_item_list=
                  |         |     +-OrderByItem
                  |         |       +-column_ref=
                  |         |         +-ColumnRef(type=UINT32, column=$orderby.age#7)
                  |         +-analytic_function_list=
                  |           +-w#5 :=
                  |             +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |               +-GraphGetElementProperty
                  |                 +-type=UINT32
                  |                 +-expr=
                  |                 | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |                 +-property=age(UINT32)
                  |               +-window_frame=
                  |                 +-WindowFrame(frame_unit=RANGE)
                  |                   +-start_expr=
                  |                   | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |                   +-end_expr=
                  |                     +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-ProjectScan
                    +-column_list=$graph_table.[id#8, w#9]
                    +-expr_list=
                    | +-id#8 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    | |   +-property=id(INT64)
                    | +-w#9 := ColumnRef(type=INT64, column=$analytic.w#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $analytic.w#5])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_8 AS id,
  aml_1.a_9 AS w
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    WITH
      a_2,
      a_3,
      a_4,
      SOURCE_NODE_ID(a_3) AS a_5,
      a_2.age AS a_6
    WITH
      a_2,
      a_3,
      a_4,
      AFN_AGG(a_2.age) OVER (PARTITION BY a_5
        ORDER BY a_6 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_7
    WITH
      a_2,
      a_7
    RETURN
      a_2.id AS a_8,
      a_7 AS a_9
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    WITH
      a_2,
      a_3,
      a_4,
      SOURCE_NODE_ID(a_3) AS a_5,
      a_2.age AS a_6
    WITH
      a_2,
      a_3,
      a_4,
      AFN_AGG(a_2.age) OVER (PARTITION BY a_5
        ORDER BY a_6 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_7
    WITH
      a_2,
      a_7
    RETURN
      a_2.id AS a_8,
      a_7 AS a_9
  ) AS aml_1
|> SELECT
     aml_1.a_8 AS id,
     aml_1.a_9 AS w;
==

# Analytic function in WITH with vertical aggregation
select gt.* from
graph_table(aml
  match (n)-[e]->()
  WITH e, afn_agg(ANY_VALUE(n.age)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(e)) ORDER BY MAX(n.age)) AS w1
    GROUP BY e
  FILTER WHERE w1 < 5
  return e.amount, w1
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.amount#10 AS amount [UINT64]
| +-$graph_table.w1#11 AS w1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[amount#10, w1#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[amount#10, w1#11]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[amount#10, w1#11]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[amount#10, w1#11]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.e#8, $analytic.w1#9]
                  | +-input_scan=
                  |   +-AnalyticScan
                  |     +-column_list=[$graph_table.e#8, $graph_table.$agg1#4, $graph_table.$agg2#5, $graph_table.$agg3#6, $analytic.w1#9]
                  |     +-input_scan=
                  |     | +-AggregateScan
                  |     |   +-column_list=$graph_table.[e#8, $agg1#4, $agg2#5, $agg3#6]
                  |     |   +-input_scan=
                  |     |   | +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                  |     |   +-group_by_list=
                  |     |   | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |   +-aggregate_list=
                  |     |     +-$agg1#4 :=
                  |     |     | +-AggregateFunctionCall(ZetaSQL:any_value(UINT32) -> UINT32)
                  |     |     |   +-GraphGetElementProperty
                  |     |     |     +-type=UINT32
                  |     |     |     +-expr=
                  |     |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |     |     +-property=age(UINT32)
                  |     |     +-$agg2#5 :=
                  |     |     | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
                  |     |     |   +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                  |     |     |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |     +-$agg3#6 :=
                  |     |       +-AggregateFunctionCall(ZetaSQL:max(UINT32) -> UINT32)
                  |     |         +-GraphGetElementProperty
                  |     |           +-type=UINT32
                  |     |           +-expr=
                  |     |           | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |           +-property=age(UINT32)
                  |     +-function_group_list=
                  |       +-AnalyticFunctionGroup
                  |         +-partition_by=
                  |         | +-WindowPartitioning
                  |         |   +-partition_by_list=
                  |         |     +-ColumnRef(type=STRING, column=$graph_table.$agg2#5)
                  |         +-order_by=
                  |         | +-WindowOrdering
                  |         |   +-order_by_item_list=
                  |         |     +-OrderByItem
                  |         |       +-column_ref=
                  |         |         +-ColumnRef(type=UINT32, column=$graph_table.$agg3#6)
                  |         +-analytic_function_list=
                  |           +-w1#9 :=
                  |             +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |               +-ColumnRef(type=UINT32, column=$graph_table.$agg1#4)
                  |               +-window_frame=
                  |                 +-WindowFrame(frame_unit=RANGE)
                  |                   +-start_expr=
                  |                   | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |                   +-end_expr=
                  |                     +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$graph_table.e#8, $analytic.w1#9]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.e#8, $analytic.w1#9])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.w1#9)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=$graph_table.[amount#10, w1#11]
                    +-expr_list=
                    | +-amount#10 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=UINT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$graph_table.e#8)
                    | |   +-property=amount(UINT64)
                    | +-w1#11 := ColumnRef(type=INT64, column=$analytic.w1#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.e#8, $analytic.w1#9])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_10 AS amount,
  aml_1.a_11 AS w1
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    WITH
      a_3 AS a_8,
      ANY_VALUE(a_2.age) AS a_5,
      ANY_VALUE(SOURCE_NODE_ID(a_3)) AS a_6,
      MAX(a_2.age) AS a_7
    WITH
      a_8,
      a_5,
      a_6,
      a_7,
      AFN_AGG(a_5) OVER (PARTITION BY a_6
        ORDER BY a_7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_9
    WITH
      a_8,
      a_9
    FILTER
      WHERE
        a_9 < 5
    RETURN
      a_8.amount AS a_10,
      a_9 AS a_11
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    WITH
      a_3 AS a_8,
      ANY_VALUE(a_2.age) AS a_5,
      ANY_VALUE(SOURCE_NODE_ID(a_3)) AS a_6,
      MAX(a_2.age) AS a_7
    WITH
      a_8,
      a_5,
      a_6,
      a_7,
      AFN_AGG(a_5) OVER (PARTITION BY a_6
        ORDER BY a_7 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_9
    WITH
      a_8,
      a_9
    FILTER
      WHERE
        a_9 < 5
    RETURN
      a_8.amount AS a_10,
      a_9 AS a_11
  ) AS aml_1
|> SELECT
     aml_1.a_10 AS amount,
     aml_1.a_11 AS w1;
==

# Analytic function in WITH still disallows horizontal aggregation
select gt.* from
graph_table(aml
  match (n)-[e]->{3, 5}()
  WITH n, afn_agg(SUM(e.amount)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(e)) ORDER BY MIN(n.id)) AS w1
    group by n.name
  RETURN w1
) gt
--

ERROR: Cannot access field amount on a value with type ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>> [at 4:25]
  WITH n, afn_agg(SUM(e.amount)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(...
                        ^
==

# Analytic function disallowed in FOR
select gt.* from
graph_table(aml
  match (n)
  for x in [afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.age)]
  return n.id, x
) gt
--
ERROR: Analytic function not allowed in FOR [at 4:13]
  for x in [afn_agg(n.age) OVER (PARTITION BY n.name ORDER BY n.age)]
            ^
==

# Analytic functions in FILTER with horizontal agg
[no_run_sqlbuilder]
select gt.* from
graph_table(aml
  match (n)-[e]->{3, 5}()
  LET w = afn_agg(sum(e.amount)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(e)) ORDER BY n.age)
  FILTER afn_agg(sum(e.amount)) OVER (PARTITION BY n.name ORDER BY n.id) > 5
  return n.id
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.id#21 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#21]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#21]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#21]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#21]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $element_table.$element3#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | | | +-column_list=[$element_table.$element1#2]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | | +-GraphEdgeScan
                  | |   | | | | +-column_list=[$element_table.e#3]
                  | |   | | | | +-label_expr=
                  | |   | | | | | +-GraphLabelNaryExpr
                  | |   | | | | |   +-op=OR
                  | |   | | | | |   +-operand_list=
                  | |   | | | | |     +-GraphWildCardLabel
                  | |   | | | | |     +-GraphLabelNaryExpr
                  | |   | | | | |       +-op=NOT
                  | |   | | | | |       +-operand_list=
                  | |   | | | | |         +-GraphWildCardLabel
                  | |   | | | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | | | +-orientation=RIGHT
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.$element2#4]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-head=$path_scan.$head#8
                  | |   | | +-tail=$path_scan.$tail#9
                  | |   | | +-quantifier=
                  | |   | | | +-GraphPathPatternQuantifier
                  | |   | | |   +-lower_bound=
                  | |   | | |   | +-Literal(type=INT64, value=3)
                  | |   | | |   +-upper_bound=
                  | |   | | |     +-Literal(type=INT64, value=5)
                  | |   | | +-group_variable_list=
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element1#2, array=$element_table.$element1#5)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.e#3, array=$element_table.e#6)
                  | |   | |   +-GraphMakeArrayVariable(element=$element_table.$element2#4, array=$element_table.$element2#7)
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element3#10]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element3#10
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=$element_table.[n#1, e#6, $element3#10]
                  | +-expr_list=
                  | | +-w#14 := ColumnRef(type=INT64, column=$analytic.$analytic1#13)
                  | +-input_scan=
                  |   +-AnalyticScan
                  |     +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#13]
                  |     +-input_scan=
                  |     | +-ProjectScan
                  |     |   +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $partitionby.$partitionbycol1#15, $orderby.age#16]
                  |     |   +-expr_list=
                  |     |   | +-$partitionbycol1#15 :=
                  |     |   | | +-ArrayAggregate
                  |     |   | |   +-type=STRING
                  |     |   | |   +-array=
                  |     |   | |   | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |     |   | |   +-element_column=$horizontal_aggregate.e#12
                  |     |   | |   +-aggregate=
                  |     |   | |     +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
                  |     |   | |       +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                  |     |   | |         +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#12)
                  |     |   | +-age#16 :=
                  |     |   |   +-GraphGetElementProperty
                  |     |   |     +-type=UINT32
                  |     |   |     +-expr=
                  |     |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |   |     +-property=age(UINT32)
                  |     |   +-input_scan=
                  |     |     +-GraphRefScan(column_list=$element_table.[n#1, e#6, $element3#10])
                  |     +-function_group_list=
                  |       +-AnalyticFunctionGroup
                  |         +-partition_by=
                  |         | +-WindowPartitioning
                  |         |   +-partition_by_list=
                  |         |     +-ColumnRef(type=STRING, column=$partitionby.$partitionbycol1#15)
                  |         +-order_by=
                  |         | +-WindowOrdering
                  |         |   +-order_by_item_list=
                  |         |     +-OrderByItem
                  |         |       +-column_ref=
                  |         |         +-ColumnRef(type=UINT32, column=$orderby.age#16)
                  |         +-analytic_function_list=
                  |           +-$analytic1#13 :=
                  |             +-AnalyticFunctionCall(sample_functions:afn_agg(UINT64) -> INT64)
                  |               +-ArrayAggregate
                  |                 +-type=UINT64
                  |                 +-array=
                  |                 | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |                 +-element_column=$horizontal_aggregate.e#11
                  |                 +-aggregate=
                  |                   +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  |                     +-GraphGetElementProperty
                  |                       +-type=UINT64
                  |                       +-expr=
                  |                       | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#11)
                  |                       +-property=amount(UINT64)
                  |               +-window_frame=
                  |                 +-WindowFrame(frame_unit=RANGE)
                  |                   +-start_expr=
                  |                   | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |                   +-end_expr=
                  |                     +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-AnalyticScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#18]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $partitionby.name#19, $orderby.id#20]
                  | |   +-expr_list=
                  | |   | +-name#19 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=STRING
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   | |   +-property=name(STRING)
                  | |   | +-id#20 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=INT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |     +-property=id(INT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[n#1, e#6, $element3#10])
                  | +-function_group_list=
                  |   +-AnalyticFunctionGroup
                  |     +-partition_by=
                  |     | +-WindowPartitioning
                  |     |   +-partition_by_list=
                  |     |     +-ColumnRef(type=STRING, column=$partitionby.name#19)
                  |     +-order_by=
                  |     | +-WindowOrdering
                  |     |   +-order_by_item_list=
                  |     |     +-OrderByItem
                  |     |       +-column_ref=
                  |     |         +-ColumnRef(type=INT64, column=$orderby.id#20)
                  |     +-analytic_function_list=
                  |       +-$analytic1#18 :=
                  |         +-AnalyticFunctionCall(sample_functions:afn_agg(UINT64) -> INT64)
                  |           +-ArrayAggregate
                  |             +-type=UINT64
                  |             +-array=
                  |             | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                  |             +-element_column=$horizontal_aggregate.e#17
                  |             +-aggregate=
                  |               +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                  |                 +-GraphGetElementProperty
                  |                   +-type=UINT64
                  |                   +-expr=
                  |                   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$horizontal_aggregate.e#17)
                  |                   +-property=amount(UINT64)
                  |           +-window_frame=
                  |             +-WindowFrame(frame_unit=RANGE)
                  |               +-start_expr=
                  |               | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |               +-end_expr=
                  |                 +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#18]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#6, $element_table.$element3#10, $analytic.$analytic1#18])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#18)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.id#21]
                    +-expr_list=
                    | +-id#21 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#6, $element3#10])
==

[no_run_sqlbuilder]
select gt.* from
graph_table(aml
  match (n)-[e]->()
  return afn_agg(SUM(n.age)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(e)) ORDER BY MIN(n.id)) AS w1
         group by n.name
) gt

--

QueryStmt
+-output_column_list=
| +-$analytic.w1#9 AS w1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.w1#9]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$analytic.w1#9]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$analytic.w1#9]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$analytic.w1#9]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$analytic.w1#9]
                    +-input_scan=
                      +-AnalyticScan
                        +-column_list=[$graph_table.$agg1#4, $graph_table.$agg2#5, $graph_table.$agg3#6, $analytic.w1#9]
                        +-input_scan=
                        | +-AggregateScan
                        |   +-column_list=$graph_table.[$agg1#4, $agg2#5, $agg3#6]
                        |   +-input_scan=
                        |   | +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                        |   +-group_by_list=
                        |   | +-name#8 :=
                        |   |   +-GraphGetElementProperty
                        |   |     +-type=STRING
                        |   |     +-expr=
                        |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |   |     +-property=name(STRING)
                        |   +-aggregate_list=
                        |     +-$agg1#4 :=
                        |     | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                        |     |   +-Cast(UINT32 -> UINT64)
                        |     |     +-GraphGetElementProperty
                        |     |       +-type=UINT32
                        |     |       +-expr=
                        |     |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |     |       +-property=age(UINT32)
                        |     +-$agg2#5 :=
                        |     | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
                        |     |   +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                        |     |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                        |     +-$agg3#6 :=
                        |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
                        |         +-GraphGetElementProperty
                        |           +-type=INT64
                        |           +-expr=
                        |           | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                        |           +-property=id(INT64)
                        +-function_group_list=
                          +-AnalyticFunctionGroup
                            +-partition_by=
                            | +-WindowPartitioning
                            |   +-partition_by_list=
                            |     +-ColumnRef(type=STRING, column=$graph_table.$agg2#5)
                            +-order_by=
                            | +-WindowOrdering
                            |   +-order_by_item_list=
                            |     +-OrderByItem
                            |       +-column_ref=
                            |         +-ColumnRef(type=INT64, column=$graph_table.$agg3#6)
                            +-analytic_function_list=
                              +-w1#9 :=
                                +-AnalyticFunctionCall(sample_functions:afn_agg(UINT64) -> INT64)
                                  +-ColumnRef(type=UINT64, column=$graph_table.$agg1#4)
                                  +-window_frame=
                                    +-WindowFrame(frame_unit=RANGE)
                                      +-start_expr=
                                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                                      +-end_expr=
                                        +-WindowFrameExpr(boundary_type=CURRENT ROW)
==

[no_run_sqlbuilder]
select gt.* from
graph_table(aml
  match (n)-[e]->()
  WITH e, afn_agg(ANY_VALUE(n.age)) OVER (PARTITION BY ANY_VALUE(SOURCE_NODE_ID(e)) ORDER BY MAX(n.age)) AS w1
    GROUP BY e
  FILTER WHERE w1 < 5
  return e.amount, w1
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.amount#10 AS amount [UINT64]
| +-$graph_table.w1#11 AS w1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[amount#10, w1#11]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[amount#10, w1#11]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[amount#10, w1#11]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[amount#10, w1#11]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$graph_table.e#8, $analytic.w1#9]
                  | +-input_scan=
                  |   +-AnalyticScan
                  |     +-column_list=[$graph_table.e#8, $graph_table.$agg1#4, $graph_table.$agg2#5, $graph_table.$agg3#6, $analytic.w1#9]
                  |     +-input_scan=
                  |     | +-AggregateScan
                  |     |   +-column_list=$graph_table.[e#8, $agg1#4, $agg2#5, $agg3#6]
                  |     |   +-input_scan=
                  |     |   | +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                  |     |   +-group_by_list=
                  |     |   | +-e#8 := ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |   +-aggregate_list=
                  |     |     +-$agg1#4 :=
                  |     |     | +-AggregateFunctionCall(ZetaSQL:any_value(UINT32) -> UINT32)
                  |     |     |   +-GraphGetElementProperty
                  |     |     |     +-type=UINT32
                  |     |     |     +-expr=
                  |     |     |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |     |     +-property=age(UINT32)
                  |     |     +-$agg2#5 :=
                  |     |     | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
                  |     |     |   +-FunctionCall(ZetaSQL:source_node_id(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> STRING)
                  |     |     |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  |     |     +-$agg3#6 :=
                  |     |       +-AggregateFunctionCall(ZetaSQL:max(UINT32) -> UINT32)
                  |     |         +-GraphGetElementProperty
                  |     |           +-type=UINT32
                  |     |           +-expr=
                  |     |           | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     |           +-property=age(UINT32)
                  |     +-function_group_list=
                  |       +-AnalyticFunctionGroup
                  |         +-partition_by=
                  |         | +-WindowPartitioning
                  |         |   +-partition_by_list=
                  |         |     +-ColumnRef(type=STRING, column=$graph_table.$agg2#5)
                  |         +-order_by=
                  |         | +-WindowOrdering
                  |         |   +-order_by_item_list=
                  |         |     +-OrderByItem
                  |         |       +-column_ref=
                  |         |         +-ColumnRef(type=UINT32, column=$graph_table.$agg3#6)
                  |         +-analytic_function_list=
                  |           +-w1#9 :=
                  |             +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |               +-ColumnRef(type=UINT32, column=$graph_table.$agg1#4)
                  |               +-window_frame=
                  |                 +-WindowFrame(frame_unit=RANGE)
                  |                   +-start_expr=
                  |                   | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |                   +-end_expr=
                  |                     +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$graph_table.e#8, $analytic.w1#9]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$graph_table.e#8, $analytic.w1#9])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.w1#9)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=$graph_table.[amount#10, w1#11]
                    +-expr_list=
                    | +-amount#10 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=UINT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$graph_table.e#8)
                    | |   +-property=amount(UINT64)
                    | +-w1#11 := ColumnRef(type=INT64, column=$analytic.w1#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$graph_table.e#8, $analytic.w1#9])
==

# PARTITION BY graph element
select gt.* from
graph_table(aml
  match (n)-[e]->()
  FILTER afn_agg(n.age) OVER (PARTITION BY n ORDER BY n.id) > 5
  return n.id
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.id#6 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[n#1, e#2, $element1#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AnalyticScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $orderby.id#5]
                  | |   +-expr_list=
                  | |   | +-id#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=INT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |     +-property=id(INT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])
                  | +-function_group_list=
                  |   +-AnalyticFunctionGroup
                  |     +-partition_by=
                  |     | +-WindowPartitioning
                  |     |   +-partition_by_list=
                  |     |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |     +-order_by=
                  |     | +-WindowOrdering
                  |     |   +-order_by_item_list=
                  |     |     +-OrderByItem
                  |     |       +-column_ref=
                  |     |         +-ColumnRef(type=INT64, column=$orderby.id#5)
                  |     +-analytic_function_list=
                  |       +-$analytic1#4 :=
                  |         +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=UINT32
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-property=age(UINT32)
                  |           +-window_frame=
                  |             +-WindowFrame(frame_unit=RANGE)
                  |               +-start_expr=
                  |               | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |               +-end_expr=
                  |                 +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $analytic.$analytic1#4])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#4)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.id#6]
                    +-expr_list=
                    | +-id#6 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[n#1, e#2, $element1#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_6 AS id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    LET
      a_5 = AFN_AGG(a_2.age) OVER (PARTITION BY a_2
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_5 > 5
    RETURN
      a_2.id AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    LET
      a_5 = AFN_AGG(a_2.age) OVER (PARTITION BY a_2
        ORDER BY a_2.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_5 > 5
    RETURN
      a_2.id AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS id;
==

# PARTITION BY graph path
select gt.* from
graph_table(aml
  match p=(n)-[e]->()
  FILTER afn_agg(n.age) OVER (PARTITION BY p ORDER BY n.id) > 5
  return n.id
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.id#7 AS id [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.id#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.id#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.id#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.id#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.n#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.$element1#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#4)
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.$element1#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-AnalyticScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4, $analytic.$analytic1#5]
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4, $orderby.id#6]
                  | |   +-expr_list=
                  | |   | +-id#6 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=INT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |     +-property=id(INT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4])
                  | +-function_group_list=
                  |   +-AnalyticFunctionGroup
                  |     +-partition_by=
                  |     | +-WindowPartitioning
                  |     |   +-partition_by_list=
                  |     |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
                  |     +-order_by=
                  |     | +-WindowOrdering
                  |     |   +-order_by_item_list=
                  |     |     +-OrderByItem
                  |     |       +-column_ref=
                  |     |         +-ColumnRef(type=INT64, column=$orderby.id#6)
                  |     +-analytic_function_list=
                  |       +-$analytic1#5 :=
                  |         +-AnalyticFunctionCall(sample_functions:afn_agg(UINT32) -> INT64)
                  |           +-GraphGetElementProperty
                  |             +-type=UINT32
                  |             +-expr=
                  |             | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  |             +-property=age(UINT32)
                  |           +-window_frame=
                  |             +-WindowFrame(frame_unit=RANGE)
                  |               +-start_expr=
                  |               | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  |               +-end_expr=
                  |                 +-WindowFrameExpr(boundary_type=CURRENT ROW)
                  +-FilterScan
                  | +-column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4, $analytic.$analytic1#5]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4, $analytic.$analytic1#5])
                  | +-filter_expr=
                  |   +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
                  |     +-ColumnRef(type=INT64, column=$analytic.$analytic1#5)
                  |     +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.id#7]
                    +-expr_list=
                    | +-id#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1, $element_table.e#2, $element_table.$element1#3, $graph_table.p#4])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_7 AS id
FROM
  GRAPH_TABLE(
    aml
    MATCH
      a_2 = (a_3
      IS (% | ! %))
      -[a_4
      IS (% | ! %)]->
      (a_5
      IS (% | ! %))
    LET
      a_6 = AFN_AGG(a_3.age) OVER (PARTITION BY a_2
        ORDER BY a_3.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_6 > 5
    RETURN
      a_3.id AS a_7
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      a_2 = (a_3
      IS (% | ! %))
      -[a_4
      IS (% | ! %)]->
      (a_5
      IS (% | ! %))
    LET
      a_6 = AFN_AGG(a_3.age) OVER (PARTITION BY a_2
        ORDER BY a_3.id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
    FILTER
      WHERE
        a_6 > 5
    RETURN
      a_3.id AS a_7
  ) AS aml_1
|> SELECT
     aml_1.a_7 AS id;
==

# Regression test for b/382069429
# ORDER BY can reference the input columns if there's no DISTINCT nor GROUP BY.
select gt.* from
graph_table(aml
  let x = 1, y = 2
  return x+y AS z ORDER BY x
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.z#3 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.z#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.z#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.z#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.z#3]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#1, y#2]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | | +-y#2 := Literal(type=INT64, value=2)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$graph_table.z#3]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=$graph_table.[x#1, y#2, z#3]
                    |   +-expr_list=
                    |   | +-z#3 :=
                    |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    |   |     +-ColumnRef(type=INT64, column=$graph_table.x#1)
                    |   |     +-ColumnRef(type=INT64, column=$graph_table.y#2)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=$graph_table.[x#1, y#2])
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=INT64, column=$graph_table.x#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_4 AS z
FROM
  GRAPH_TABLE(
    aml
    LET
      a_2 = 1,
      a_3 = 2
    RETURN
      a_2 + a_3 AS a_4
    ORDER BY a_2
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    LET
      a_2 = 1,
      a_3 = 2
    RETURN
      a_2 + a_3 AS a_4
    ORDER BY a_2
  ) AS aml_1
|> SELECT
     aml_1.a_4 AS z;
==

# Regression test for b/382069429
# Same as above, but with a windowing function.
select gt.* from
graph_table(aml
  let x = 1, y = 2
  return sum(x+y) OVER (PARTITION BY x ORDER BY x) AS z ORDER BY x
) gt
--

QueryStmt
+-output_column_list=
| +-$analytic.z#4 AS z [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.z#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$analytic.z#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$analytic.z#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$analytic.z#4]
                +-scan_list=
                  +-ProjectScan
                  | +-column_list=$graph_table.[x#1, y#2]
                  | +-expr_list=
                  | | +-x#1 := Literal(type=INT64, value=1)
                  | | +-y#2 := Literal(type=INT64, value=2)
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$analytic.z#4]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-AnalyticScan
                    |   +-column_list=[$graph_table.x#1, $graph_table.y#2, $analytic.z#4]
                    |   +-input_scan=
                    |   | +-GraphRefScan(column_list=$graph_table.[x#1, y#2])
                    |   +-function_group_list=
                    |     +-AnalyticFunctionGroup
                    |       +-partition_by=
                    |       | +-WindowPartitioning
                    |       |   +-partition_by_list=
                    |       |     +-ColumnRef(type=INT64, column=$graph_table.x#1)
                    |       +-order_by=
                    |       | +-WindowOrdering
                    |       |   +-order_by_item_list=
                    |       |     +-OrderByItem
                    |       |       +-column_ref=
                    |       |         +-ColumnRef(type=INT64, column=$graph_table.x#1)
                    |       +-analytic_function_list=
                    |         +-z#4 :=
                    |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                    |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    |               +-ColumnRef(type=INT64, column=$graph_table.x#1)
                    |               +-ColumnRef(type=INT64, column=$graph_table.y#2)
                    |             +-window_frame=
                    |               +-WindowFrame(frame_unit=RANGE)
                    |                 +-start_expr=
                    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                    |                 +-end_expr=
                    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=INT64, column=$graph_table.x#1)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_4 AS z
FROM
  GRAPH_TABLE(
    aml
    LET
      a_2 = 1,
      a_3 = 2
    RETURN
      SUM(a_2 + a_3) OVER (PARTITION BY a_2
        ORDER BY a_2 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_4
    ORDER BY a_2
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    LET
      a_2 = 1,
      a_3 = 2
    RETURN
      SUM(a_2 + a_3) OVER (PARTITION BY a_2
        ORDER BY a_2 RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS a_4
    ORDER BY a_2
  ) AS aml_1
|> SELECT
     aml_1.a_4 AS z;
==

# Regression test for b/382069429
# Correct error when ORDER BY is attempting to reference an input column but
# the RETURN is DISTINCT.
select gt.* from
graph_table(aml
  let x = 1, y = 2
  return distinct x+y AS z ORDER BY x
) gt
--
ERROR: ORDER BY clause expression references column x which is not visible after SELECT DISTINCT [at 4:37]
  return distinct x+y AS z ORDER BY x
                                    ^
