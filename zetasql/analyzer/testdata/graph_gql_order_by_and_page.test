[default language_features=NONE,+ORDER_BY_COLLATE,+NULLS_FIRST_LAST_IN_ORDER_BY,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY]
[default no_test_extract_table_names]
# No unparser due to SQLBuilder visitor not implemented for GraphMakeElement

###
### Standalone ORDER BY + PAGE statement handling.
###

# Standalone ORDER BY statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p.birthday
  RETURN p.birthday
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#3 AS birthday [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.birthday#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.birthday#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.birthday#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.birthday#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=215-221, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=DATE
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=birthday(DATE)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=DATE, column=$orderby.$orderbycol1#2)
                  +-ProjectScan
                    +-column_list=[$graph_table.birthday#3]
                    +-expr_list=
                    | +-birthday#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=DATE
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=birthday(DATE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# Standalone ORDER BY statement: multiple ordering expressions.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.birthday,
           a.balance DESC
  RETURN p.birthday, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4, $orderby.$orderbycol2#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=DATE
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=birthday(DATE)
                  | |   | +-$orderbycol2#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |   | +-column_ref=
                  |   |   +-ColumnRef(type=DATE, column=$orderby.$orderbycol1#4)
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#5)
                  |     +-is_descending=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-expr_list=
                    | +-birthday#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=DATE
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=birthday(DATE)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
==

# Standalone ORDER BY statement: accepts GQL keywords ASCENDING / DESCENDING.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.birthday ASCENDING,
           a.balance DESCENDING
  RETURN p.birthday, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4, $orderby.$orderbycol2#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=DATE
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=birthday(DATE)
                  | |   | +-$orderbycol2#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |   | +-column_ref=
                  |   |   +-ColumnRef(type=DATE, column=$orderby.$orderbycol1#4)
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#5)
                  |     +-is_descending=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-expr_list=
                    | +-birthday#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=DATE
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=birthday(DATE)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
==

# Standalone ORDER BY statement: accepts COLLATE and NULLS order clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.name COLLATE "en_US" NULLS FIRST,
           a.balance DESC NULLS LAST
  RETURN p.birthday, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4, $orderby.$orderbycol2#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=STRING
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=name(STRING)
                  | |   | +-$orderbycol2#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |   | +-column_ref=
                  |   | | +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#4)
                  |   | +-collation_name=
                  |   | | +-Literal(type=STRING, value="en_US")
                  |   | +-null_order=NULLS_FIRST
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#5)
                  |     +-is_descending=TRUE
                  |     +-null_order=NULLS_LAST
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-expr_list=
                    | +-birthday#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=DATE
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=birthday(DATE)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
==

# Standalone ORDER BY statement with LIMIT and OFFSET clauses.
# Note: This is parsed as a single standalone statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p.name OFFSET 10 LIMIT 20
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=STRING
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=name(STRING)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#2)
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=20)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#3]
                    +-expr_list=
                    | +-name#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# Standalone ORDER BY statement with LIMIT and SKIP clauses.
# Note: This is parsed as a single standalone statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p.name SKIP 10 LIMIT 20
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=STRING
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=name(STRING)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#2)
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=20)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#3]
                    +-expr_list=
                    | +-name#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# Standalone ORDER BY statement with LIMIT and OFFSET clauses.
# Note: This is parsed as two standalone statements. We consider such statements
# as errors after parsing in order to prevent confusion, since in non-graph SQL
# queries, "ORDER BY/LIMIT/OFFSET" statements would have different semantics.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p.name LIMIT 20 OFFSET 10
  RETURN p.name
) gt
--
ERROR: ORDER BY LIMIT OFFSET is not allowed; please use ORDER BY OFFSET LIMIT [at 4:28]
  ORDER BY p.name LIMIT 20 OFFSET 10
                           ^
==

# Consecutive standalone ORDER BY statements. The first is redundant.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.name
  ORDER BY a.balance
  RETURN p.name, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=STRING
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=name(STRING)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#4)
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=UINT64, column=$orderby.$orderbycol1#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#6, balance#7]
                    +-expr_list=
                    | +-name#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=name(STRING)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
==

# Consecutive standalone ORDER BY statements. The first is not redundant.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.name LIMIT 10
  ORDER BY a.balance
  RETURN p.name, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=STRING
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=name(STRING)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#4)
                  +-LimitOffsetScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-limit=
                  |   +-Literal(type=INT64, value=10)
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=UINT64, column=$orderby.$orderbycol1#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#6, balance#7]
                    +-expr_list=
                    | +-name#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=name(STRING)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
==

# Standalone OFFSET/LIMIT statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  OFFSET 10 LIMIT 20
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=20)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# Standalone OFFSET statement.
# When FEATURE_LIMIT_ALL is disabled, this is resolved to a LimitOffset scan
# where the limit clause is assumed to be kint64max/2.
# When FEATURE_LIMIT_ALL is enabled, this is resolved to a LimitOffset scan
# where the limit clause is unset.
[language_features=NONE,+ORDER_BY_COLLATE,+NULLS_FIRST_LAST_IN_ORDER_BY,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,{{+LIMIT_ALL|}}]
select gt.* from
graph_table(aml
  MATCH (p:Person)
  OFFSET 10
  RETURN p.name
) gt
--
ALTERNATION GROUP: +LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# Standalone LIMIT statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  LIMIT 10
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# Two consecutive standalone LIMIT and OFFSET statements.
# Note: They are parsed as two different statements. We do not consider these
# an error.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  LIMIT 10
  OFFSET 20
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  |   +-Literal(type=INT64, value=10)
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=20)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# ORDER BY ordinal standalone statement.
# Note: Ordinal columns are not allowed in GQL so this is an error.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY 1
  RETURN p.name
) gt
--
ERROR: ORDER BY ordinal is not allowed in GQL [at 4:12]
  ORDER BY 1
           ^
==

# ORDER BY expression on standalone statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY LENGTH(p.name) * p.age DESC
  RETURN p.name, p.age
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [UINT32]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
                  | |   |     +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
                  | |   |     | +-GraphGetElementProperty
                  | |   |     |   +-type=STRING
                  | |   |     |   +-expr=
                  | |   |     |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     |   +-property=name(STRING)
                  | |   |     +-Cast(UINT32 -> INT64)
                  | |   |       +-GraphGetElementProperty
                  | |   |         +-type=UINT32
                  | |   |         +-expr=
                  | |   |         | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |         +-property=age(UINT32)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#2)
                  |     +-is_descending=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=name(STRING)
                    | +-age#4 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT32
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=age(UINT32)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])
==

# ORDER BY aggregate not supported on standalone statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY AVG(p.age) DESC
  RETURN p.name, p.age
) gt
--
ERROR: Aggregate function AVG not allowed in GQL standalone ORDER BY [at 4:12]
  ORDER BY AVG(p.age) DESC
           ^
==

###
### ORDER BY + PAGE statement handling after RETURN statements.
###

# ORDER BY statement after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$graph_table.name#2]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $graph_table.name#2, $orderby.$orderbycol1#3]
                    |   +-expr_list=
                    |   | +-$orderbycol1#3 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $graph_table.name#2]
                    |       +-expr_list=
                    |       | +-name#2 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=STRING
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       |     +-property=name(STRING)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=[$element_table.p#1])
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#3)
==

# ORDER BY statement after RETURN statement: multiple ordering expressions.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name, a.balance
  ORDER BY p.name, a.balance DESC
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5, $orderby.$orderbycol1#6, $orderby.$orderbycol2#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#6 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=STRING
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=name(STRING)
                    |   | +-$orderbycol2#7 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-balance#5 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                      | +-column_ref=
                      |   +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#7)
                        +-is_descending=TRUE
==

# ORDER BY statement after RETURN statement:
#   accepts GQL keywords ASCENDING / DESCENDING.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name, a.balance
  ORDER BY p.name ASCENDING, a.balance DESCENDING
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5, $orderby.$orderbycol1#6, $orderby.$orderbycol2#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#6 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=STRING
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=name(STRING)
                    |   | +-$orderbycol2#7 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-balance#5 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                      | +-column_ref=
                      |   +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#7)
                        +-is_descending=TRUE
==

# ORDER BY statement after RETURN statement:
#   accepts COLLATE and NULLS order clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name, a.balance
  ORDER BY p.name COLLATE "en_US" NULLS FIRST, a.balance DESC NULLS LAST
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5, $orderby.$orderbycol1#6, $orderby.$orderbycol2#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#6 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=STRING
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=name(STRING)
                    |   | +-$orderbycol2#7 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-balance#5 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                      | +-column_ref=
                      | | +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
                      | +-collation_name=
                      | | +-Literal(type=STRING, value="en_US")
                      | +-null_order=NULLS_FIRST
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#7)
                        +-is_descending=TRUE
                        +-null_order=NULLS_LAST
==

# ORDER BY statement after RETURN statement with LIMIT and OFFSET clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY p.name OFFSET 10 LIMIT 20
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-OrderByScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-is_ordered=TRUE
                    |   +-input_scan=
                    |   | +-ProjectScan
                    |   |   +-column_list=[$element_table.p#1, $graph_table.name#2, $orderby.$orderbycol1#3]
                    |   |   +-expr_list=
                    |   |   | +-$orderbycol1#3 :=
                    |   |   |   +-GraphGetElementProperty
                    |   |   |     +-type=STRING
                    |   |   |     +-expr=
                    |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |   |     +-property=name(STRING)
                    |   |   +-input_scan=
                    |   |     +-ProjectScan
                    |   |       +-column_list=[$element_table.p#1, $graph_table.name#2]
                    |   |       +-expr_list=
                    |   |       | +-name#2 :=
                    |   |       |   +-GraphGetElementProperty
                    |   |       |     +-type=STRING
                    |   |       |     +-expr=
                    |   |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |       |     +-property=name(STRING)
                    |   |       +-input_scan=
                    |   |         +-GraphRefScan(column_list=[$element_table.p#1])
                    |   +-order_by_item_list=
                    |     +-OrderByItem
                    |       +-column_ref=
                    |         +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#3)
                    +-limit=
                    | +-Literal(type=INT64, value=20)
                    +-offset=
                      +-Literal(type=INT64, value=10)
==

# ORDER BY statement after RETURN statement with LIMIT and SKIP clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY p.name SKIP 10 LIMIT 20
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-OrderByScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-is_ordered=TRUE
                    |   +-input_scan=
                    |   | +-ProjectScan
                    |   |   +-column_list=[$element_table.p#1, $graph_table.name#2, $orderby.$orderbycol1#3]
                    |   |   +-expr_list=
                    |   |   | +-$orderbycol1#3 :=
                    |   |   |   +-GraphGetElementProperty
                    |   |   |     +-type=STRING
                    |   |   |     +-expr=
                    |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |   |     +-property=name(STRING)
                    |   |   +-input_scan=
                    |   |     +-ProjectScan
                    |   |       +-column_list=[$element_table.p#1, $graph_table.name#2]
                    |   |       +-expr_list=
                    |   |       | +-name#2 :=
                    |   |       |   +-GraphGetElementProperty
                    |   |       |     +-type=STRING
                    |   |       |     +-expr=
                    |   |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |       |     +-property=name(STRING)
                    |   |       +-input_scan=
                    |   |         +-GraphRefScan(column_list=[$element_table.p#1])
                    |   +-order_by_item_list=
                    |     +-OrderByItem
                    |       +-column_ref=
                    |         +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#3)
                    +-limit=
                    | +-Literal(type=INT64, value=20)
                    +-offset=
                      +-Literal(type=INT64, value=10)
==

# ORDER BY statement after RETURN statement with LIMIT and OFFSET clauses.
# This is an error because there cannot be more than one order+page statements
# after RETURN.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY p.name LIMIT 20 OFFSET 10
) gt
--
ERROR: Syntax error: Expected ")" or keyword NEXT but got keyword OFFSET [at 5:28]
  ORDER BY p.name LIMIT 20 OFFSET 10
                           ^
==

# Consecutive ORDER BY statements after RETURN statement. This is an error.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name, a.balance
  ORDER BY p.name LIMIT 10
  ORDER BY a.balance
) gt
--
ERROR: Syntax error: Expected ")" or keyword NEXT but got keyword ORDER [at 6:3]
  ORDER BY a.balance
  ^
==

# Consecutive ORDER BY statements after RETURN statement separated by NEXT.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name as name, a.balance as balance
  ORDER BY name LIMIT 10
  NEXT
  ORDER BY balance
  RETURN name, balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[name#4, balance#5]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[p#1, $element1#2, a#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.p#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.$element1#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.a#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
              |   | |   |   +-target_element_table_list=[aml.Account]
              |   | |   +-head=$element_table.p#1
              |   | |   +-tail=$element_table.a#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-LimitOffsetScan
              |     +-column_list=$graph_table.[name#4, balance#5]
              |     +-is_ordered=TRUE
              |     +-input_scan=
              |     | +-OrderByScan
              |     |   +-column_list=$graph_table.[name#4, balance#5]
              |     |   +-is_ordered=TRUE
              |     |   +-input_scan=
              |     |   | +-ProjectScan
              |     |   |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
              |     |   |   +-expr_list=
              |     |   |   | +-name#4 :=
              |     |   |   | | +-GraphGetElementProperty
              |     |   |   | |   +-type=STRING
              |     |   |   | |   +-expr=
              |     |   |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
              |     |   |   | |   +-property=name(STRING)
              |     |   |   | +-balance#5 :=
              |     |   |   |   +-GraphGetElementProperty
              |     |   |   |     +-type=UINT64
              |     |   |   |     +-expr=
              |     |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
              |     |   |   |     +-property=balance(UINT64)
              |     |   |   +-input_scan=
              |     |   |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
              |     |   +-order_by_item_list=
              |     |     +-OrderByItem
              |     |       +-column_ref=
              |     |         +-ColumnRef(type=STRING, column=$graph_table.name#4)
              |     +-limit=
              |       +-Literal(type=INT64, value=10)
              +-GraphLinearScan
                +-column_list=$graph_table.[name#6, balance#7]
                +-scan_list=
                  +-OrderByScan
                  | +-column_list=$graph_table.[name#4, balance#5]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$graph_table.[name#4, balance#5])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=UINT64, column=$graph_table.balance#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#6, balance#7]
                    +-expr_list=
                    | +-name#6 := ColumnRef(type=STRING, column=$graph_table.name#4)
                    | +-balance#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[name#4, balance#5])
==

# OFFSET/LIMIT statement after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  OFFSET 10 LIMIT 20
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-expr_list=
                    |   | +-name#2 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$element_table.p#1])
                    +-limit=
                    | +-Literal(type=INT64, value=20)
                    +-offset=
                      +-Literal(type=INT64, value=10)
==

# OFFSET statement after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  OFFSET 10
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-expr_list=
                    |   | +-name#2 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$element_table.p#1])
                    +-limit=
                    | +-Literal(type=INT64, value=4611686018427387903)
                    +-offset=
                      +-Literal(type=INT64, value=10)
==

# LIMIT statement after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  LIMIT 10
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-expr_list=
                    |   | +-name#2 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$element_table.p#1])
                    +-limit=
                      +-Literal(type=INT64, value=10)
==

# Two consecutive LIMIT and OFFSET statements after RETURN statement.
# Note: This is an error.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  LIMIT 10
  OFFSET 20
) gt
--
ERROR: Syntax error: Expected ")" or keyword NEXT but got keyword OFFSET [at 6:3]
  OFFSET 20
  ^
==

# ORDER BY ordinal statement after RETURN statement.
# Note: Ordinal columns are not allowed in GQL so this is an error.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY 1
) gt
--
ERROR: ORDER BY ordinal is not allowed in GQL [at 5:12]
  ORDER BY 1
           ^
==

# ORDER BY expression after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name AS name, p.age as age, a.balance AS balance
  ORDER BY age * balance DESC
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.age#5 AS age [UINT32]
| +-$graph_table.balance#6 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, age#5, balance#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, age#5, balance#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, age#5, balance#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, age#5, balance#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, age#5, balance#6]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.age#5, $graph_table.balance#6, $orderby.$orderbycol1#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#7 :=
                    |   |   +-FunctionCall(ZetaSQL:$multiply(UINT64, UINT64) -> UINT64)
                    |   |     +-Cast(UINT32 -> UINT64)
                    |   |     | +-ColumnRef(type=UINT32, column=$graph_table.age#5)
                    |   |     +-ColumnRef(type=UINT64, column=$graph_table.balance#6)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.age#5, $graph_table.balance#6]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-age#5 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=UINT32
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=age(UINT32)
                    |       | +-balance#6 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol1#7)
                        +-is_descending=TRUE
==

# ORDER BY functions, aggregates and aliases after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[]-> (a:Account)
  RETURN p.name as name, AVG(p.age) as age, SUM(a.balance) as balance
  GROUP BY name
  ORDER BY LENGTH(name)*AVG(p.age)*balance DESC
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#7 AS name [STRING]
| +-$graph_table.age#4 AS age [DOUBLE]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#7, age#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#7, age#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#7, age#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#7, age#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=61-68, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#7, age#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.name#7, $graph_table.age#4, $graph_table.balance#5, $graph_table.$agg3#8, $orderby.$orderbycol1#9]
                    |   +-expr_list=
                    |   | +-$orderbycol1#9 :=
                    |   |   +-FunctionCall(ZetaSQL:$multiply(DOUBLE, DOUBLE) -> DOUBLE)
                    |   |     +-FunctionCall(ZetaSQL:$multiply(DOUBLE, DOUBLE) -> DOUBLE)
                    |   |     | +-Cast(INT64 -> DOUBLE)
                    |   |     | | +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
                    |   |     | |   +-ColumnRef(type=STRING, column=$graph_table.name#7)
                    |   |     | +-ColumnRef(type=DOUBLE, column=$graph_table.$agg3#8)
                    |   |     +-Cast(UINT64 -> DOUBLE)
                    |   |       +-ColumnRef(type=UINT64, column=$graph_table.balance#5)
                    |   +-input_scan=
                    |     +-AggregateScan
                    |       +-column_list=$graph_table.[name#7, age#4, balance#5, $agg3#8]
                    |       +-input_scan=
                    |       | +-ProjectScan
                    |       |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $pre_groupby.name#6]
                    |       |   +-expr_list=
                    |       |   | +-name#6 :=
                    |       |   |   +-GraphGetElementProperty
                    |       |   |     +-type=STRING
                    |       |   |     +-expr=
                    |       |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       |   |     +-property=name(STRING)
                    |       |   +-input_scan=
                    |       |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    |       +-group_by_list=
                    |       | +-name#7 := ColumnRef(type=STRING, column=$pre_groupby.name#6)
                    |       +-aggregate_list=
                    |         +-age#4 :=
                    |         | +-AggregateFunctionCall(ZetaSQL:avg(UINT64) -> DOUBLE)
                    |         |   +-Cast(UINT32 -> UINT64)
                    |         |     +-GraphGetElementProperty
                    |         |       +-type=UINT32
                    |         |       +-expr=
                    |         |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |         |       +-property=age(UINT32)
                    |         +-balance#5 :=
                    |         | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                    |         |   +-GraphGetElementProperty
                    |         |     +-type=UINT64
                    |         |     +-expr=
                    |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |         |     +-property=balance(UINT64)
                    |         +-$agg3#8 :=
                    |           +-AggregateFunctionCall(ZetaSQL:avg(UINT64) -> DOUBLE)
                    |             +-Cast(UINT32 -> UINT64)
                    |               +-GraphGetElementProperty
                    |                 +-type=UINT32
                    |                 +-expr=
                    |                 | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |                 +-property=age(UINT32)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=DOUBLE, column=$orderby.$orderbycol1#9)
                        +-is_descending=TRUE
==

# ORDER BY aggregation of aggregation is not supported after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[]-> (a:Account)
  RETURN p.name as name, SUM(a.balance) as balance
  GROUP BY name
  ORDER BY SUM(balance) DESC
) gt
--
ERROR: Aggregations of aggregations are not allowed [at 6:16]
  ORDER BY SUM(balance) DESC
               ^
==

###
### Non-GQL cases.
###

# ORDER BY ordinal still functions outside GRAPH_TABLE.
select * from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
)
ORDER BY 1
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-OrderByScan
    +-column_list=[$graph_table.name#2]
    +-is_ordered=TRUE
    +-input_scan=
    | +-GraphTableScan
    |   +-column_list=[$graph_table.name#2]
    |   +-property_graph=aml
    |   +-input_scan=
    |     +-GraphLinearScan
    |       +-column_list=[$graph_table.name#2]
    |       +-scan_list=
    |         +-GraphLinearScan
    |           +-column_list=[$graph_table.name#2]
    |           +-scan_list=
    |             +-GraphScan
    |             | +-column_list=[$element_table.p#1]
    |             | +-input_scan_list=
    |             | | +-GraphPathScan
    |             | |   +-column_list=[$element_table.p#1]
    |             | |   +-input_scan_list=
    |             | |   | +-GraphNodeScan
    |             | |   |   +-column_list=[$element_table.p#1]
    |             | |   |   +-label_expr=
    |             | |   |   | +-GraphLabel(parse_location=41-47, label=aml.Person)
    |             | |   |   +-target_element_table_list=[aml.Person]
    |             | |   +-head=$element_table.p#1
    |             | |   +-tail=$element_table.p#1
    |             | +-input_scan=
    |             |   +-SingleRowScan
    |             +-ProjectScan
    |               +-column_list=[$graph_table.name#2]
    |               +-expr_list=
    |               | +-name#2 :=
    |               |   +-GraphGetElementProperty
    |               |     +-type=STRING
    |               |     +-expr=
    |               |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
    |               |     +-property=name(STRING)
    |               +-input_scan=
    |                 +-GraphRefScan(column_list=[$element_table.p#1])
    +-order_by_item_list=
      +-OrderByItem
        +-column_ref=
          +-ColumnRef(type=STRING, column=$graph_table.name#2)
==

###
### ORDER BY and PAGE SQLBuilder tests
###

[default language_features=NONE,+ORDER_BY_COLLATE,+NULLS_FIRST_LAST_IN_ORDER_BY,+GROUP_BY_ALL,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY]
[default no_test_extract_table_names]
[default run_sqlbuilder]
[default show_sqlbuilder_output]

# Standalone ORDER BY statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p.birthday
  RETURN p.birthday
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#3 AS birthday [DATE]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.birthday#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.birthday#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.birthday#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.birthday#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=77-83, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=DATE
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=birthday(DATE)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=DATE, column=$orderby.$orderbycol1#2)
                  +-ProjectScan
                    +-column_list=[$graph_table.birthday#3]
                    +-expr_list=
                    | +-birthday#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=DATE
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=birthday(DATE)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS birthday
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    ORDER BY a_2.birthday
    RETURN
      a_2.birthday AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    ORDER BY a_2.birthday
    RETURN
      a_2.birthday AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS birthday;
==

# Standalone ORDER BY statement: multiple ordering expressions.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.birthday,
           a.balance DESC
  RETURN p.birthday, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4, $orderby.$orderbycol2#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=DATE
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=birthday(DATE)
                  | |   | +-$orderbycol2#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |   | +-column_ref=
                  |   |   +-ColumnRef(type=DATE, column=$orderby.$orderbycol1#4)
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#5)
                  |     +-is_descending=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-expr_list=
                    | +-birthday#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=DATE
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=birthday(DATE)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS birthday,
  aml_1.a_6 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    ORDER BY a_2.birthday, a_4.balance DESC
    RETURN
      a_2.birthday AS a_5,
      a_4.balance AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    ORDER BY a_2.birthday, a_4.balance DESC
    RETURN
      a_2.birthday AS a_5,
      a_4.balance AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS birthday,
     aml_1.a_6 AS balance;
==

# Standalone ORDER BY statement: accepts COLLATE and NULLS order clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.name COLLATE "en_US" NULLS FIRST,
           a.balance DESC NULLS LAST
  RETURN p.birthday, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.birthday#6 AS birthday [DATE]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[birthday#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[birthday#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[birthday#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[birthday#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4, $orderby.$orderbycol2#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   | | +-GraphGetElementProperty
                  | |   | |   +-type=STRING
                  | |   | |   +-expr=
                  | |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   | |   +-property=name(STRING)
                  | |   | +-$orderbycol2#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |   | +-column_ref=
                  |   | | +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#4)
                  |   | +-collation_name=
                  |   | | +-Literal(type=STRING, value="en_US")
                  |   | +-null_order=NULLS_FIRST
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#5)
                  |     +-is_descending=TRUE
                  |     +-null_order=NULLS_LAST
                  +-ProjectScan
                    +-column_list=$graph_table.[birthday#6, balance#7]
                    +-expr_list=
                    | +-birthday#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=DATE
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=birthday(DATE)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS birthday,
  aml_1.a_6 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    ORDER BY a_2.name COLLATE "en_US" NULLS FIRST, a_4.balance DESC NULLS LAST
    RETURN
      a_2.birthday AS a_5,
      a_4.balance AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    ORDER BY a_2.name COLLATE "en_US" NULLS FIRST, a_4.balance DESC NULLS LAST
    RETURN
      a_2.birthday AS a_5,
      a_4.balance AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS birthday,
     aml_1.a_6 AS balance;
==

# Standalone ORDER BY statement with LIMIT and SKIP clauses.
# Note: This is parsed as a single standalone statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p.name SKIP 10 LIMIT 20
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#3]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#3]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#3]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#3]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=STRING
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=name(STRING)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#2)
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=20)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#3]
                    +-expr_list=
                    | +-name#3 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    ORDER BY a_2.name
    OFFSET 10 LIMIT 20
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    ORDER BY a_2.name
    OFFSET 10 LIMIT 20
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# Consecutive standalone ORDER BY statements.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  ORDER BY p.name
  ORDER BY a.balance
  RETURN p.name, a.balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#6, balance#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#4]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#4 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=STRING
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     +-property=name(STRING)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#4)
                  +-OrderByScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $orderby.$orderbycol1#5]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#5 :=
                  | |   |   +-GraphGetElementProperty
                  | |   |     +-type=UINT64
                  | |   |     +-expr=
                  | |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                  | |   |     +-property=balance(UINT64)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=UINT64, column=$orderby.$orderbycol1#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#6, balance#7]
                    +-expr_list=
                    | +-name#6 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=name(STRING)
                    | +-balance#7 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |     +-property=balance(UINT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name,
  aml_1.a_6 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    ORDER BY a_2.name
    ORDER BY a_4.balance
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    ORDER BY a_2.name
    ORDER BY a_4.balance
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name,
     aml_1.a_6 AS balance;
==

# Standalone OFFSET/LIMIT statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  OFFSET 10 LIMIT 20
  RETURN p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=20)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 20
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 20
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# Standalone OFFSET statement.
# When FEATURE_LIMIT_ALL is disabled, this is resolved to a LimitOffset scan
# where the limit clause is assumed to be kint64max/2. SQLBuilder filters these
# LIMIT clauses out.
# When FEATURE_LIMIT_ALL is enabled, this is resolved to a LimitOffset scan
# where the limit clause is unset.
[language_features=NONE,+ORDER_BY_COLLATE,+NULLS_FIRST_LAST_IN_ORDER_BY,+GROUP_BY_ALL,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,{{+LIMIT_ALL|}}]
select gt.* from
graph_table(aml
  MATCH (p:Person)
  OFFSET 10
  RETURN p.name
) gt
--
ALTERNATION GROUP: +LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# Standalone OFFSET statement/LIMIT statement with kint64max/2.
# When FEATURE_LIMIT_ALL is disabled, the limit is filtered out during
# unparsing, which means that the unparser query would correspond to a different
# AST if re-parsed (with equivalent functionality).
# When FEATURE_LIMIT_ALL is enabled, the limit is not filtered out during
# unparsing, so the unparser query should correspond to the same AST as the
# original query.
[language_features=NONE,+ORDER_BY_COLLATE,+NULLS_FIRST_LAST_IN_ORDER_BY,+GROUP_BY_ALL,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,{{+LIMIT_ALL|}}]
select gt.* from
graph_table(aml
  MATCH (p:Person)
  OFFSET 10 LIMIT 4611686018427387903
  RETURN p.name
) gt
--
ALTERNATION GROUP: +LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 4611686018427387903
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 4611686018427387903
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# Standalone OFFSET/LIMIT statements including kint64max/2.
# When FEATURE_LIMIT_ALL is disabled, the first limit is filtered out during
# unparsing, which means that the unparser query would correspond to a different
# AST if re-parsed (with equivalent functionality).
# When FEATURE_LIMIT_ALL is enabled, the first limit is not filtered out during
# unparsing, so the unparser query should correspond to the same AST as the
# original query.
[language_features=NONE,+ORDER_BY_COLLATE,+NULLS_FIRST_LAST_IN_ORDER_BY,+GROUP_BY_ALL,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,{{+LIMIT_ALL|}}]
select gt.* from
graph_table(aml
  MATCH (p:Person)
  OFFSET 10 LIMIT 4611686018427387903
  LIMIT 5
  RETURN p.name
) gt
--
ALTERNATION GROUP: +LIMIT_ALL
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  |   +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 4611686018427387903
    LIMIT 5
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 4611686018427387903
    LIMIT 5
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  | | +-Literal(type=INT64, value=4611686018427387903)
                  | +-offset=
                  |   +-Literal(type=INT64, value=10)
                  +-LimitOffsetScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-limit=
                  |   +-Literal(type=INT64, value=5)
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 5
    RETURN
      a_2.name AS a_3
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    OFFSET 10 LIMIT 5
    RETURN
      a_2.name AS a_3
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# ORDER BY expression on standalone statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY LENGTH(p.name) * p.age DESC
  RETURN p.name, p.age
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#3 AS name [STRING]
| +-$graph_table.age#4 AS age [UINT32]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#3, age#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#3, age#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#3, age#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#3, age#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                  | +-column_list=[$element_table.p#1]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-ProjectScan
                  | |   +-column_list=[$element_table.p#1, $orderby.$orderbycol1#2]
                  | |   +-expr_list=
                  | |   | +-$orderbycol1#2 :=
                  | |   |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
                  | |   |     +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
                  | |   |     | +-GraphGetElementProperty
                  | |   |     |   +-type=STRING
                  | |   |     |   +-expr=
                  | |   |     |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |     |   +-property=name(STRING)
                  | |   |     +-Cast(UINT32 -> INT64)
                  | |   |       +-GraphGetElementProperty
                  | |   |         +-type=UINT32
                  | |   |         +-expr=
                  | |   |         | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                  | |   |         +-property=age(UINT32)
                  | |   +-input_scan=
                  | |     +-GraphRefScan(column_list=[$element_table.p#1])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |     | +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#2)
                  |     +-is_descending=TRUE
                  +-ProjectScan
                    +-column_list=$graph_table.[name#3, age#4]
                    +-expr_list=
                    | +-name#3 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    | |   +-property=name(STRING)
                    | +-age#4 :=
                    |   +-GraphGetElementProperty
                    |     +-type=UINT32
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |     +-property=age(UINT32)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.p#1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name,
  aml_1.a_4 AS age
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    ORDER BY (LENGTH(a_2.name)) * CAST(a_2.age AS INT64) DESC
    RETURN
      a_2.name AS a_3,
      a_2.age AS a_4
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    ORDER BY (LENGTH(a_2.name)) * CAST(a_2.age AS INT64) DESC
    RETURN
      a_2.name AS a_3,
      a_2.age AS a_4
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name,
     aml_1.a_4 AS age;
==

# ORDER BY statement after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY p.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$graph_table.name#2]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $graph_table.name#2, $orderby.$orderbycol1#3]
                    |   +-expr_list=
                    |   | +-$orderbycol1#3 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $graph_table.name#2]
                    |       +-expr_list=
                    |       | +-name#2 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=STRING
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       |     +-property=name(STRING)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=[$element_table.p#1])
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#3)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    RETURN
      a_2.name AS a_3
    ORDER BY a_2.name
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    RETURN
      a_2.name AS a_3
    ORDER BY a_2.name
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# ORDER BY statement after RETURN statement: multiple ordering expressions.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name, a.balance
  ORDER BY p.name, a.balance DESC
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5, $orderby.$orderbycol1#6, $orderby.$orderbycol2#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#6 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=STRING
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=name(STRING)
                    |   | +-$orderbycol2#7 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-balance#5 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                      | +-column_ref=
                      |   +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#7)
                        +-is_descending=TRUE

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name,
  aml_1.a_6 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
    ORDER BY a_2.name, a_4.balance DESC
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
    ORDER BY a_2.name, a_4.balance DESC
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name,
     aml_1.a_6 AS balance;
==

# ORDER BY statement after RETURN statement:
#   accepts COLLATE and NULLS order clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name, a.balance
  ORDER BY p.name COLLATE "en_US" NULLS FIRST, a.balance DESC NULLS LAST
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5, $orderby.$orderbycol1#6, $orderby.$orderbycol2#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#6 :=
                    |   | | +-GraphGetElementProperty
                    |   | |   +-type=STRING
                    |   | |   +-expr=
                    |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   | |   +-property=name(STRING)
                    |   | +-$orderbycol2#7 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=UINT64
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |   |     +-property=balance(UINT64)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-balance#5 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                      | +-column_ref=
                      | | +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
                      | +-collation_name=
                      | | +-Literal(type=STRING, value="en_US")
                      | +-null_order=NULLS_FIRST
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol2#7)
                        +-is_descending=TRUE
                        +-null_order=NULLS_LAST

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name,
  aml_1.a_6 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
    ORDER BY a_2.name COLLATE "en_US" NULLS FIRST, a_4.balance DESC NULLS LAST
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
    ORDER BY a_2.name COLLATE "en_US" NULLS FIRST, a_4.balance DESC NULLS LAST
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name,
     aml_1.a_6 AS balance;
==

# ORDER BY statement after RETURN statement with LIMIT and OFFSET clauses.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  ORDER BY p.name OFFSET 10 LIMIT 20
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-OrderByScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-is_ordered=TRUE
                    |   +-input_scan=
                    |   | +-ProjectScan
                    |   |   +-column_list=[$element_table.p#1, $graph_table.name#2, $orderby.$orderbycol1#3]
                    |   |   +-expr_list=
                    |   |   | +-$orderbycol1#3 :=
                    |   |   |   +-GraphGetElementProperty
                    |   |   |     +-type=STRING
                    |   |   |     +-expr=
                    |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |   |     +-property=name(STRING)
                    |   |   +-input_scan=
                    |   |     +-ProjectScan
                    |   |       +-column_list=[$element_table.p#1, $graph_table.name#2]
                    |   |       +-expr_list=
                    |   |       | +-name#2 :=
                    |   |       |   +-GraphGetElementProperty
                    |   |       |     +-type=STRING
                    |   |       |     +-expr=
                    |   |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |       |     +-property=name(STRING)
                    |   |       +-input_scan=
                    |   |         +-GraphRefScan(column_list=[$element_table.p#1])
                    |   +-order_by_item_list=
                    |     +-OrderByItem
                    |       +-column_ref=
                    |         +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#3)
                    +-limit=
                    | +-Literal(type=INT64, value=20)
                    +-offset=
                      +-Literal(type=INT64, value=10)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    RETURN
      a_2.name AS a_3
    ORDER BY a_2.name OFFSET 10 LIMIT 20
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    RETURN
      a_2.name AS a_3
    ORDER BY a_2.name OFFSET 10 LIMIT 20
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# Consecutive ORDER BY statements after RETURN statement separated by NEXT.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name as name, a.balance as balance
  ORDER BY name LIMIT 10
  NEXT
  ORDER BY balance
  RETURN name, balance
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#6 AS name [STRING]
| +-$graph_table.balance#7 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#6, balance#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#6, balance#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#6, balance#7]
            +-scan_list=
              +-GraphLinearScan
              | +-column_list=$graph_table.[name#4, balance#5]
              | +-scan_list=
              |   +-GraphScan
              |   | +-column_list=$element_table.[p#1, $element1#2, a#3]
              |   | +-input_scan_list=
              |   | | +-GraphPathScan
              |   | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
              |   | |   +-input_scan_list=
              |   | |   | +-GraphNodeScan
              |   | |   | | +-column_list=[$element_table.p#1]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
              |   | |   | | +-target_element_table_list=[aml.Person]
              |   | |   | +-GraphEdgeScan
              |   | |   | | +-column_list=[$element_table.$element1#2]
              |   | |   | | +-label_expr=
              |   | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
              |   | |   | | +-target_element_table_list=[aml.Transfer]
              |   | |   | | +-orientation=RIGHT
              |   | |   | +-GraphNodeScan
              |   | |   |   +-column_list=[$element_table.a#3]
              |   | |   |   +-label_expr=
              |   | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
              |   | |   |   +-target_element_table_list=[aml.Account]
              |   | |   +-head=$element_table.p#1
              |   | |   +-tail=$element_table.a#3
              |   | +-input_scan=
              |   |   +-SingleRowScan
              |   +-LimitOffsetScan
              |     +-column_list=$graph_table.[name#4, balance#5]
              |     +-is_ordered=TRUE
              |     +-input_scan=
              |     | +-OrderByScan
              |     |   +-column_list=$graph_table.[name#4, balance#5]
              |     |   +-is_ordered=TRUE
              |     |   +-input_scan=
              |     |   | +-ProjectScan
              |     |   |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.balance#5]
              |     |   |   +-expr_list=
              |     |   |   | +-name#4 :=
              |     |   |   | | +-GraphGetElementProperty
              |     |   |   | |   +-type=STRING
              |     |   |   | |   +-expr=
              |     |   |   | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
              |     |   |   | |   +-property=name(STRING)
              |     |   |   | +-balance#5 :=
              |     |   |   |   +-GraphGetElementProperty
              |     |   |   |     +-type=UINT64
              |     |   |   |     +-expr=
              |     |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
              |     |   |   |     +-property=balance(UINT64)
              |     |   |   +-input_scan=
              |     |   |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
              |     |   +-order_by_item_list=
              |     |     +-OrderByItem
              |     |       +-column_ref=
              |     |         +-ColumnRef(type=STRING, column=$graph_table.name#4)
              |     +-limit=
              |       +-Literal(type=INT64, value=10)
              +-GraphLinearScan
                +-column_list=$graph_table.[name#6, balance#7]
                +-scan_list=
                  +-OrderByScan
                  | +-column_list=$graph_table.[name#4, balance#5]
                  | +-is_ordered=TRUE
                  | +-input_scan=
                  | | +-GraphRefScan(column_list=$graph_table.[name#4, balance#5])
                  | +-order_by_item_list=
                  |   +-OrderByItem
                  |     +-column_ref=
                  |       +-ColumnRef(type=UINT64, column=$graph_table.balance#5)
                  +-ProjectScan
                    +-column_list=$graph_table.[name#6, balance#7]
                    +-expr_list=
                    | +-name#6 := ColumnRef(type=STRING, column=$graph_table.name#4)
                    | +-balance#7 := ColumnRef(type=UINT64, column=$graph_table.balance#5)
                    +-input_scan=
                      +-GraphRefScan(column_list=$graph_table.[name#4, balance#5])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_7 AS name,
  aml_1.a_8 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
    ORDER BY a_5 LIMIT 10
    NEXT
    ORDER BY a_6
    RETURN
      a_5 AS a_7,
      a_6 AS a_8
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_4.balance AS a_6
    ORDER BY a_5 LIMIT 10
    NEXT
    ORDER BY a_6
    RETURN
      a_5 AS a_7,
      a_6 AS a_8
  ) AS aml_1
|> SELECT
     aml_1.a_7 AS name,
     aml_1.a_8 AS balance;
==

# OFFSET/LIMIT statement after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person)
  RETURN p.name
  OFFSET 10 LIMIT 20
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.p#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.p#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.p#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.p#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.name#2]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.name#2]
                    |   +-expr_list=
                    |   | +-name#2 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-GraphRefScan(column_list=[$element_table.p#1])
                    +-limit=
                    | +-Literal(type=INT64, value=20)
                    +-offset=
                      +-Literal(type=INT64, value=10)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_3 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    RETURN
      a_2.name AS a_3
    OFFSET 10 LIMIT 20
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
    RETURN
      a_2.name AS a_3
    OFFSET 10 LIMIT 20
  ) AS aml_1
|> SELECT
     aml_1.a_3 AS name;
==

# ORDER BY expression after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name AS name, p.age as age, a.balance AS balance
  ORDER BY age * balance DESC
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.age#5 AS age [UINT32]
| +-$graph_table.balance#6 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, age#5, balance#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, age#5, balance#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, age#5, balance#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, age#5, balance#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#4, age#5, balance#6]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.age#5, $graph_table.balance#6, $orderby.$orderbycol1#7]
                    |   +-expr_list=
                    |   | +-$orderbycol1#7 :=
                    |   |   +-FunctionCall(ZetaSQL:$multiply(UINT64, UINT64) -> UINT64)
                    |   |     +-Cast(UINT32 -> UINT64)
                    |   |     | +-ColumnRef(type=UINT32, column=$graph_table.age#5)
                    |   |     +-ColumnRef(type=UINT64, column=$graph_table.balance#6)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $graph_table.name#4, $graph_table.age#5, $graph_table.balance#6]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=STRING
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=name(STRING)
                    |       | +-age#5 :=
                    |       | | +-GraphGetElementProperty
                    |       | |   +-type=UINT32
                    |       | |   +-expr=
                    |       | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       | |   +-property=age(UINT32)
                    |       | +-balance#6 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=UINT64
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |       |     +-property=balance(UINT64)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=UINT64, column=$orderby.$orderbycol1#7)
                        +-is_descending=TRUE

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name,
  aml_1.a_6 AS age,
  aml_1.a_7 AS balance
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_2.age AS a_6,
      a_4.balance AS a_7
    ORDER BY CAST(a_2.age AS UINT64) * (a_4.balance) DESC
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      a_2.age AS a_6,
      a_4.balance AS a_7
    ORDER BY CAST(a_2.age AS UINT64) * (a_4.balance) DESC
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name,
     aml_1.a_6 AS age,
     aml_1.a_7 AS balance;
==

# ORDER BY functions, aggregates and aliases after RETURN statement.
select gt.* from
graph_table(aml
  MATCH (p:Person) -[:Transfer]-> (a:Account)
  RETURN p.name as name, AVG(p.age) as age, SUM(a.balance) as balance
  GROUP BY name
  ORDER BY LENGTH(name)*AVG(p.age)*balance DESC
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#7 AS name [STRING]
| +-$graph_table.age#4 AS age [DOUBLE]
| +-$graph_table.balance#5 AS balance [UINT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#7, age#4, balance#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#7, age#4, balance#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#7, age#4, balance#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#7, age#4, balance#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[p#1, $element1#2, a#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.p#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=55-63, label=aml.Transfer)
                  | |   | | +-target_element_table_list=[aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=70-77, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-head=$element_table.p#1
                  | |   +-tail=$element_table.a#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=$graph_table.[name#7, age#4, balance#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.name#7, $graph_table.age#4, $graph_table.balance#5, $graph_table.$agg3#8, $orderby.$orderbycol1#9]
                    |   +-expr_list=
                    |   | +-$orderbycol1#9 :=
                    |   |   +-FunctionCall(ZetaSQL:$multiply(DOUBLE, DOUBLE) -> DOUBLE)
                    |   |     +-FunctionCall(ZetaSQL:$multiply(DOUBLE, DOUBLE) -> DOUBLE)
                    |   |     | +-Cast(INT64 -> DOUBLE)
                    |   |     | | +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
                    |   |     | |   +-ColumnRef(type=STRING, column=$graph_table.name#7)
                    |   |     | +-ColumnRef(type=DOUBLE, column=$graph_table.$agg3#8)
                    |   |     +-Cast(UINT64 -> DOUBLE)
                    |   |       +-ColumnRef(type=UINT64, column=$graph_table.balance#5)
                    |   +-input_scan=
                    |     +-AggregateScan
                    |       +-column_list=$graph_table.[name#7, age#4, balance#5, $agg3#8]
                    |       +-input_scan=
                    |       | +-ProjectScan
                    |       |   +-column_list=[$element_table.p#1, $element_table.$element1#2, $element_table.a#3, $pre_groupby.name#6]
                    |       |   +-expr_list=
                    |       |   | +-name#6 :=
                    |       |   |   +-GraphGetElementProperty
                    |       |   |     +-type=STRING
                    |       |   |     +-expr=
                    |       |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |       |   |     +-property=name(STRING)
                    |       |   +-input_scan=
                    |       |     +-GraphRefScan(column_list=$element_table.[p#1, $element1#2, a#3])
                    |       +-group_by_list=
                    |       | +-name#7 := ColumnRef(type=STRING, column=$pre_groupby.name#6)
                    |       +-aggregate_list=
                    |         +-age#4 :=
                    |         | +-AggregateFunctionCall(ZetaSQL:avg(UINT64) -> DOUBLE)
                    |         |   +-Cast(UINT32 -> UINT64)
                    |         |     +-GraphGetElementProperty
                    |         |       +-type=UINT32
                    |         |       +-expr=
                    |         |       | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |         |       +-property=age(UINT32)
                    |         +-balance#5 :=
                    |         | +-AggregateFunctionCall(ZetaSQL:sum(UINT64) -> UINT64)
                    |         |   +-GraphGetElementProperty
                    |         |     +-type=UINT64
                    |         |     +-expr=
                    |         |     | +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.a#3)
                    |         |     +-property=balance(UINT64)
                    |         +-$agg3#8 :=
                    |           +-AggregateFunctionCall(ZetaSQL:avg(UINT64) -> DOUBLE)
                    |             +-Cast(UINT32 -> UINT64)
                    |               +-GraphGetElementProperty
                    |                 +-type=UINT32
                    |                 +-expr=
                    |                 | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.p#1)
                    |                 +-property=age(UINT32)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                        | +-ColumnRef(type=DOUBLE, column=$orderby.$orderbycol1#9)
                        +-is_descending=TRUE

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_8.a_5 AS name,
  projectscan_8.a_6 AS age,
  projectscan_8.a_7 AS balance
FROM
  (
    SELECT
      aml_1.a_6 AS a_6,
      aml_1.a_7 AS a_7,
      aml_1.a_5 AS a_5
    FROM
      GRAPH_TABLE(
        aml
        MATCH
          (a_2
          IS Person)
          -[a_3
          IS Transfer]->
          (a_4
          IS Account)
        RETURN
          a_2.name AS a_5,
          AVG(CAST(a_2.age AS UINT64)) AS a_6,
          SUM(a_4.balance) AS a_7
        GROUP BY a_5
        ORDER BY (CAST(LENGTH(a_2.name) AS DOUBLE) * (AVG(CAST(a_2.age AS UINT64)))) * CAST(SUM(a_4.balance) AS DOUBLE) DESC
      ) AS aml_1
  ) AS projectscan_8;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS Person)
      -[a_3
      IS Transfer]->
      (a_4
      IS Account)
    RETURN
      a_2.name AS a_5,
      AVG(CAST(a_2.age AS UINT64)) AS a_6,
      SUM(a_4.balance) AS a_7
    GROUP BY a_5
    ORDER BY (CAST(LENGTH(a_2.name) AS DOUBLE) * (AVG(CAST(a_2.age AS UINT64)))) * CAST(SUM(a_4.balance) AS DOUBLE) DESC
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS a_6,
     aml_1.a_7 AS a_7,
     aml_1.a_5 AS a_5
|> AS projectscan_8
|> SELECT
     projectscan_8.a_5 AS name,
     projectscan_8.a_6 AS age,
     projectscan_8.a_7 AS balance;
==

# ORDER BY clause on RETURN statement when anonymous variables exist.
select gt.* from
graph_table(aml
  MATCH (a)-[]->(b)
  RETURN a.name
  ORDER BY a.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$graph_table.name#4]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$element_table.a#1, $element_table.$element1#2, $element_table.b#3, $graph_table.name#4, $orderby.$orderbycol1#5]
                    |   +-expr_list=
                    |   | +-$orderbycol1#5 :=
                    |   |   +-GraphGetElementProperty
                    |   |     +-type=STRING
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    |   |     +-property=name(STRING)
                    |   +-input_scan=
                    |     +-ProjectScan
                    |       +-column_list=[$element_table.a#1, $element_table.$element1#2, $element_table.b#3, $graph_table.name#4]
                    |       +-expr_list=
                    |       | +-name#4 :=
                    |       |   +-GraphGetElementProperty
                    |       |     +-type=STRING
                    |       |     +-expr=
                    |       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    |       |     +-property=name(STRING)
                    |       +-input_scan=
                    |         +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      a_2.name AS a_5
    ORDER BY a_2.name
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN
      a_2.name AS a_5
    ORDER BY a_2.name
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name;
==

# ORDER BY clause on RETURN statement with aggregates and anonymous variables.
select gt.* from
graph_table(aml
  MATCH (a)-[]->(b)
  RETURN DISTINCT a.name
  ORDER BY a.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#5 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#1, $element1#2, b#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.$element1#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-OrderByScan
                    +-column_list=[$graph_table.name#5]
                    +-is_ordered=TRUE
                    +-input_scan=
                    | +-AggregateScan
                    |   +-column_list=[$graph_table.name#5]
                    |   +-input_scan=
                    |   | +-ProjectScan
                    |   |   +-column_list=[$element_table.a#1, $element_table.$element1#2, $element_table.b#3, $graph_table.name#4]
                    |   |   +-expr_list=
                    |   |   | +-name#4 :=
                    |   |   |   +-GraphGetElementProperty
                    |   |   |     +-type=STRING
                    |   |   |     +-expr=
                    |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                    |   |   |     +-property=name(STRING)
                    |   |   +-input_scan=
                    |   |     +-GraphRefScan(column_list=$element_table.[a#1, $element1#2, b#3])
                    |   +-group_by_list=
                    |     +-name#5 := ColumnRef(type=STRING, column=$graph_table.name#4)
                    +-order_by_item_list=
                      +-OrderByItem
                        +-column_ref=
                          +-ColumnRef(type=STRING, column=$graph_table.name#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_5 AS name
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN DISTINCT
      a_2.name AS a_5
    ORDER BY a_5
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      (a_2
      IS (% | ! %))
      -[a_3
      IS (% | ! %)]->
      (a_4
      IS (% | ! %))
    RETURN DISTINCT
      a_2.name AS a_5
    ORDER BY a_5
  ) AS aml_1
|> SELECT
     aml_1.a_5 AS name;
==

# ORDER BY graph node is not allowed
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
select gt.* from
graph_table(aml
  MATCH (p:Person)
  ORDER BY p
  RETURN p.birthday
) gt
--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:12]
  ORDER BY p
           ^
--
ALTERNATION GROUP: ,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
ERROR: ORDER BY does not support expressions of type GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...> [at 4:12]
  ORDER BY p
           ^
==

# ORDER BY graph edge is not allowed
[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY{{|,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT}}]
select gt.* from
graph_table(aml
  MATCH -[t:Transfer]->
  ORDER BY t
  RETURN t.PersonId
) gt
--
ALTERNATION GROUP: <empty>
--
ERROR: Graph element typed expression is not allowed here [at 4:12]
  ORDER BY t
           ^
--
ALTERNATION GROUP: ,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT
--
ERROR: ORDER BY does not support expressions of type GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64> [at 4:12]
  ORDER BY t
           ^
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+SQL_GRAPH_PATH_TYPE]
# ORDER BY graph path is not allowed
select gt.* from
graph_table(aml
  MATCH p=()-[:Transfer]->()
  ORDER BY p
  RETURN PATH_LENGTH(p) as len
) gt
--
ERROR: ORDER BY does not support expressions of type PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, targetAccountId INT64>> [at 5:12]
  ORDER BY p
           ^
