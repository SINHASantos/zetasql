# Tests for pipe PIVOT include a subset of tests from pivot.test.
#
# The resolver code is all shared so this doesn't duplicate exhaustive tests
# for the full behavior.
# Since Resolved ASTs are the same, this also doesn't include rewriter output.
# See pivot.test for those details.
#
# Unlike standard PIVOT, here it is unnecessary to test all combinations with
# tables, subqueries, TVFs, UNNEST, etc, since pipe operators are orthogonal
# and independent of where the input table came from.
#
# When PIVOT is used on a single table FROM clause, the behavior is identical
# for the standard syntax suffix operator and the pipe operator.  Several tests
# show this by using an alternation {{ | \|> }} that includes a pipe or not.
[default language_features=MAXIMUM,+PIPES,+PIPE_STATIC_DESCRIBE,+PIVOT]

# Show a pivot, either producing a range variable `pt` or not.
FROM KeyValue
|> PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one, 33)){{| AS pt}}
|> STATIC_DESCRIBE
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot._33#6 AS _33 [INT64]
+-query=
  +-StaticDescribeScan
    +-column_list=$pivot.[zero#4, one#5, _33#6]
    +-describe_text=
    |   """
    |   NameList:
    |     zero INT64 $pivot.zero#4
    |     one INT64 $pivot.one#5
    |     _33 INT64 $pivot._33#6
    |   NameScope:
    |     Names:
    |       _33 -> INT64 ($pivot._33#6)
    |       one -> INT64 ($pivot.one#5)
    |       zero -> INT64 ($pivot.zero#4)
    |   """
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5, _33#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=86-98
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=33, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot._33#6, pivot_expr_index=0, pivot_value_index=2)
--
ALTERNATION GROUP:  AS pt
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
| +-$pivot._33#6 AS _33 [INT64]
+-query=
  +-StaticDescribeScan
    +-column_list=$pivot.[zero#4, one#5, _33#6]
    +-describe_text=
    |   """
    |   NameList:
    |     zero INT64 $pivot.zero#4
    |     one INT64 $pivot.one#5
    |     _33 INT64 $pivot._33#6
    |   NameScope:
    |     Names:
    |       _33 -> INT64 ($pivot._33#6)
    |       one -> INT64 ($pivot.one#5)
    |       zero -> INT64 ($pivot.zero#4)
    |     Range variables:
    |       pt -> RANGE_VARIABLE<zero,one,_33>
    |   """
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5, _33#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=86-98
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=103-106, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        | +-Literal(type=INT64, value=33, preserve_in_literal_remover=TRUE)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)
          +-PivotColumn(column=$pivot._33#6, pivot_expr_index=0, pivot_value_index=2)
==

# In more typical usage, there will be SELECTs or other operators before
# the PIVOT to set up columns, corresponding to a an input subquery in
# standard syntax.
FROM KeyValue
|> SELECT Key, Value
|> PIVOT(COUNT(Value) FOR Key IN (0 AS zero, 1 AS one)) AS pt
|> SELECT zero, pt.one
--
QueryStmt
+-output_column_list=
| +-$pivot.zero#4 AS zero [INT64]
| +-$pivot.one#5 AS one [INT64]
+-query=
  +-ProjectScan
    +-column_list=$pivot.[zero#4, one#5]
    +-input_scan=
      +-PivotScan
        +-column_list=$pivot.[zero#4, one#5]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:count(STRING) -> INT64)
        |   +-parse_location=44-56
        |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-for_expr=
        | +-ColumnRef(parse_location=61-64, type=INT64, column=KeyValue.Key#1)
        +-pivot_value_list=
        | +-Literal(type=INT64, value=0)
        | +-Literal(type=INT64, value=1)
        +-pivot_column_list=
          +-PivotColumn(column=$pivot.zero#4, pivot_expr_index=0, pivot_value_index=0)
          +-PivotColumn(column=$pivot.one#5, pivot_expr_index=0, pivot_value_index=1)
==

# PIVOT on a standard syntax query, feeding output into of a TVF.
# Also has an expression in the aggregate function input.
[language_features=NONE,+PIPES,+TABLE_VALUED_FUNCTIONS,+PIVOT]
SELECT Key, Value
FROM KeyValue
GROUP BY Key, Value
|> PIVOT(COUNT(1+Key) FOR Value IN ('x' AS x, 'y' AS y))
|> CALL tvf_one_relation_arg_output_schema_is_input_schema()
--
QueryStmt
+-output_column_list=
| +-tvf_one_relation_arg_output_schema_is_input_schema.x#8 AS x [INT64]
| +-tvf_one_relation_arg_output_schema_is_input_schema.y#9 AS y [INT64]
+-query=
  +-TVFScan
    +-column_list=tvf_one_relation_arg_output_schema_is_input_schema.[x#8, y#9]
    +-tvf=tvf_one_relation_arg_output_schema_is_input_schema((ANY TABLE) -> ANY TABLE)
    +-signature=(TABLE<x INT64, y INT64>) -> TABLE<x INT64, y INT64>
    +-argument_list=
    | +-FunctionArgument
    |   +-scan=
    |   | +-PivotScan
    |   |   +-column_list=$pivot.[x#6, y#7]
    |   |   +-input_scan=
    |   |   | +-ProjectScan
    |   |   |   +-column_list=$groupby.[Key#3, Value#4]
    |   |   |   +-input_scan=
    |   |   |     +-AggregateScan
    |   |   |       +-column_list=$groupby.[Key#3, Value#4]
    |   |   |       +-input_scan=
    |   |   |       | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |   |       +-group_by_list=
    |   |   |         +-Key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |         +-Value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   |   +-pivot_expr_list=
    |   |   | +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
    |   |   |   +-parse_location=61-73
    |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   |     +-Literal(type=INT64, value=1)
    |   |   |     +-ColumnRef(type=INT64, column=$groupby.Key#3)
    |   |   +-for_expr=
    |   |   | +-ColumnRef(parse_location=78-83, type=STRING, column=$groupby.Value#4)
    |   |   +-pivot_value_list=
    |   |   | +-Literal(type=STRING, value="x")
    |   |   | +-Literal(type=STRING, value="y")
    |   |   +-pivot_column_list=
    |   |     +-PivotColumn(column=$pivot.x#6, pivot_expr_index=0, pivot_value_index=0)
    |   |     +-PivotColumn(column=$pivot.y#7, pivot_expr_index=0, pivot_value_index=1)
    |   +-argument_column_list=$pivot.[x#6, y#7]
    +-column_index_list=[0, 1]
    +-function_call_signature=(ANY TABLE) -> ANY TABLE
==

# PIVOT query with all columns pruned.
SELECT 1 w, 2 x, 3 y, 4 z
|> PIVOT(SUM(x) AS s1, SUM(x) AS s2 FOR y IN (0 AS zero, 1 AS one))
|> SELECT 123
--
QueryStmt
+-output_column_list=
| +-$pipe_select.$col1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.$col1#13]
    +-expr_list=
    | +-$col1#13 := Literal(type=INT64, value=123)
    +-input_scan=
      +-PivotScan
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=$query.[w#1, x#2, y#3, z#4]
        |   +-expr_list=
        |   | +-w#1 := Literal(type=INT64, value=1)
        |   | +-x#2 := Literal(type=INT64, value=2)
        |   | +-y#3 := Literal(type=INT64, value=3)
        |   | +-z#4 := Literal(type=INT64, value=4)
        |   +-input_scan=
        |     +-SingleRowScan
        +-group_by_list=
        | +-w#7 := ColumnRef(type=INT64, column=$query.w#1)
        | +-z#8 := ColumnRef(type=INT64, column=$query.z#4)
        +-pivot_expr_list=
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | | +-parse_location=35-47
        | | +-ColumnRef(type=INT64, column=$query.x#2)
        | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |   +-parse_location=49-61
        |   +-ColumnRef(type=INT64, column=$query.x#2)
        +-for_expr=
        | +-ColumnRef(parse_location=66-67, type=INT64, column=$query.y#3)
        +-pivot_value_list=
          +-Literal(type=INT64, value=0)
          +-Literal(type=INT64, value=1)
