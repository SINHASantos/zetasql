# Basic tests for differential privacy queries with set operations.
[default language_features=NONE,+DIFFERENTIAL_PRIVACY,+NAMED_ARGUMENTS]

[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH DIFFERENTIAL_PRIVACY count(*) as count
from SimpleTypesWithAnonymizationUid
UNION {{ALL|DISTINCT}}
SELECT WITH DIFFERENTIAL_PRIVACY count(*) as count
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$union_all.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.count#27]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-count#13 :=
      | |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-count#26 :=
        |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-output_column_list=[$aggregate.count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$union_all.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_all.count#27]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#30)
      | |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       | +-$group_selection_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
      | |       +-group_selection_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#34)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#37)
        |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       | +-$group_selection_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        |       +-group_selection_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#41)
        +-output_column_list=[$aggregate.count#26]
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$union_distinct.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_distinct.count#27]
    +-op_type=UNION_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-count#13 :=
      | |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-count#26 :=
        |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-output_column_list=[$aggregate.count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$union_distinct.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$union_distinct.count#27]
    +-op_type=UNION_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#30)
      | |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       | +-$group_selection_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
      | |       +-group_selection_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#34)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#37)
        |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       | +-$group_selection_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        |       +-group_selection_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#41)
        +-output_column_list=[$aggregate.count#26]
==

[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH DIFFERENTIAL_PRIVACY count(*) as count
from SimpleTypesWithAnonymizationUid
INTERSECT {{ALL|DISTINCT}}
SELECT WITH DIFFERENTIAL_PRIVACY count(*) as count
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$intersect_all.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_all.count#27]
    +-op_type=INTERSECT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-count#13 :=
      | |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-count#26 :=
        |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-output_column_list=[$aggregate.count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$intersect_all.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_all.count#27]
    +-op_type=INTERSECT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#30)
      | |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       | +-$group_selection_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
      | |       +-group_selection_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#34)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#37)
        |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       | +-$group_selection_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        |       +-group_selection_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#41)
        +-output_column_list=[$aggregate.count#26]
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$intersect_distinct.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_distinct.count#27]
    +-op_type=INTERSECT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-count#13 :=
      | |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-count#26 :=
        |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-output_column_list=[$aggregate.count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$intersect_distinct.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$intersect_distinct.count#27]
    +-op_type=INTERSECT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#30)
      | |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       | +-$group_selection_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
      | |       +-group_selection_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#34)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#37)
        |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       | +-$group_selection_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        |       +-group_selection_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#41)
        +-output_column_list=[$aggregate.count#26]
==

[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
SELECT WITH DIFFERENTIAL_PRIVACY count(*) as count
from SimpleTypesWithAnonymizationUid
EXCEPT {{ALL|DISTINCT}}
SELECT WITH DIFFERENTIAL_PRIVACY count(*) as count
from SimpleTypesWithAnonymizationUid
--
ALTERNATION GROUP: ALL
--
QueryStmt
+-output_column_list=
| +-$except_all.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_all.count#27]
    +-op_type=EXCEPT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-count#13 :=
      | |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-count#26 :=
        |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-output_column_list=[$aggregate.count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$except_all.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_all.count#27]
    +-op_type=EXCEPT_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#30)
      | |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       | +-$group_selection_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
      | |       +-group_selection_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#34)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#37)
        |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       | +-$group_selection_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        |       +-group_selection_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#41)
        +-output_column_list=[$aggregate.count#26]
--
ALTERNATION GROUP: DISTINCT
--
QueryStmt
+-output_column_list=
| +-$except_distinct.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_distinct.count#27]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
      | |       +-aggregate_list=
      | |         +-count#13 :=
      | |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |       +-aggregate_list=
        |         +-count#26 :=
        |           +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |             +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-output_column_list=[$aggregate.count#26]

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$except_distinct.count#27 AS count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=[$except_distinct.count#27]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$aggregate.count#13]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$aggregate.count#13]
      | |       +-input_scan=
      | |       | +-AggregateScan
      | |       |   +-column_list=[$aggregate.count_partial#30, $group_by.$uid#31]
      | |       |   +-input_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#28], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
      | |       |   +-group_by_list=
      | |       |   | +-$uid#31 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#28)
      | |       |   +-aggregate_list=
      | |       |     +-count_partial#30 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |       +-aggregate_list=
      | |       | +-count#13 :=
      | |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#30)
      | |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       | +-$group_selection_threshold_col#34 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=INT64, value=1)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
      | |       +-group_selection_threshold_expr=
      | |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#34)
      | +-output_column_list=[$aggregate.count#13]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$aggregate.count#26]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$aggregate.count#26]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$aggregate.count_partial#37, $group_by.$uid#38]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |       |   +-group_by_list=
        |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
        |       |   +-aggregate_list=
        |       |     +-count_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       +-aggregate_list=
        |       | +-count#26 :=
        |       | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       | |   +-ColumnRef(type=INT64, column=$aggregate.count_partial#37)
        |       | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       | +-$group_selection_threshold_col#41 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=INT64, value=1)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        |       +-group_selection_threshold_expr=
        |         +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#41)
        +-output_column_list=[$aggregate.count#26]
==
