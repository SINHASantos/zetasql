[default language_features=MAXIMUM,+ORDER_BY_IN_AGGREGATE]
[default enabled_ast_rewrites=DEFAULTS,+ORDER_BY_AND_LIMIT_IN_AGGREGATE]

[no_enable_literal_replacement]
[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE]
# Simple ARRAY_AGG with ORDER BY with all the features.
# no_enable_literal_replacement: Distinct and ORDER BY must match exactly, we
# cannot replace just one literal with parameter
SELECT STRING_AGG(DISTINCT a || "extra", ", " HAVING MAX 3 ORDER BY a || "extra" LIMIT 10)
FROM TestTable, TestTable.KitchenSink.repeated_string_val as a, TestTable.KitchenSink.repeated_bytes_val as b
GROUP BY CHAR_LENGTH(a) - BYTE_LENGTH(b)
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |   |     +-ColumnRef(type=STRING, column=$array.a#4)
        |   |     +-Literal(type=STRING, value="extra")
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
        |       +-input_scan=
        |       | +-ArrayScan
        |       |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |       |   +-array_expr_list=
        |       |   | +-GetProtoField
        |       |   |   +-type=ARRAY<STRING>
        |       |   |   +-expr=
        |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   |   +-field_descriptor=repeated_string_val
        |       |   |   +-default_value=[]
        |       |   +-element_column_list=[$array.a#4]
        |       +-array_expr_list=
        |       | +-GetProtoField
        |       |   +-type=ARRAY<BYTES>
        |       |   +-expr=
        |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   +-field_descriptor=repeated_bytes_val
        |       |   +-default_value=[]
        |       +-element_column_list=[$array.b#5]
        +-group_by_list=
        | +-$groupbycol1#8 :=
        |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
        |     +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
        |     | +-ColumnRef(type=STRING, column=$array.a#4)
        |     +-FunctionCall(ZetaSQL:byte_length(BYTES) -> INT64)
        |       +-ColumnRef(type=BYTES, column=$array.b#5)
        +-aggregate_list=
          +-$agg1#7 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
              +-Literal(type=STRING, value=", ")
              +-distinct=TRUE
              +-having_modifier=
              | +-AggregateHavingModifier
              |   +-kind=MAX
              |   +-having_expr=
              |     +-Literal(type=INT64, value=3)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
              +-limit=
                +-Literal(type=INT64, value=10)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#7]
        +-expr_list=
        | +-$agg1#7 :=
        |   +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        |     +-SubqueryExpr
        |     | +-type=ARRAY<STRING>
        |     | +-subquery_type=SCALAR
        |     | +-parameter_list=
        |     | | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` STRING>>, column=$agg_rewriter.$array#10)
        |     | +-subquery=
        |     |   +-ProjectScan
        |     |     +-column_list=[$with_expr.injected#14]
        |     |     +-expr_list=
        |     |     | +-injected#14 :=
        |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |     |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |     |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |     |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#13)
        |     |     |     | +-Literal(type=INT64, value=1)
        |     |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#13)
        |     |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |     |     +-input_scan=
        |     |       +-ProjectScan
        |     |         +-column_list=[null_if_empty_array.$out#13]
        |     |         +-expr_list=
        |     |         | +-$out#13 :=
        |     |         |   +-SubqueryExpr
        |     |         |     +-type=ARRAY<STRING>
        |     |         |     +-subquery_type=ARRAY
        |     |         |     +-parameter_list=
        |     |         |     | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` STRING>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        |     |         |     +-subquery=
        |     |         |       +-LimitOffsetScan
        |     |         |         +-column_list=[$agg_rewriter.distinct.arg#12]
        |     |         |         +-is_ordered=TRUE
        |     |         |         +-input_scan=
        |     |         |         | +-OrderByScan
        |     |         |         |   +-column_list=[$agg_rewriter.distinct.arg#12]
        |     |         |         |   +-is_ordered=TRUE
        |     |         |         |   +-input_scan=
        |     |         |         |   | +-AggregateScan
        |     |         |         |   |   +-column_list=[$agg_rewriter.distinct.arg#12]
        |     |         |         |   |   +-input_scan=
        |     |         |         |   |   | +-FilterScan
        |     |         |         |   |   |   +-column_list=[$agg_rewriter.$orderbycol1#9]
        |     |         |         |   |   |   +-input_scan=
        |     |         |         |   |   |   | +-ProjectScan
        |     |         |         |   |   |   |   +-column_list=[$agg_rewriter.$orderbycol1#9]
        |     |         |         |   |   |   |   +-expr_list=
        |     |         |         |   |   |   |   | +-$orderbycol1#9 :=
        |     |         |         |   |   |   |   |   +-GetStructField
        |     |         |         |   |   |   |   |     +-type=STRING
        |     |         |         |   |   |   |   |     +-expr=
        |     |         |         |   |   |   |   |     | +-ColumnRef(type=STRUCT<`$orderbycol1_0` STRING>, column=$agg_rewriter.$struct#11)
        |     |         |         |   |   |   |   |     +-field_idx=0
        |     |         |         |   |   |   |   +-input_scan=
        |     |         |         |   |   |   |     +-ArrayScan
        |     |         |         |   |   |   |       +-column_list=[$agg_rewriter.$struct#11]
        |     |         |         |   |   |   |       +-array_expr_list=
        |     |         |         |   |   |   |       | +-ColumnRef(type=ARRAY<STRUCT<`$orderbycol1_0` STRING>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        |     |         |         |   |   |   |       +-element_column_list=[$agg_rewriter.$struct#11]
        |     |         |         |   |   |   +-filter_expr=
        |     |         |         |   |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |     |         |         |   |   |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        |     |         |         |   |   |         +-ColumnRef(type=STRING, column=$agg_rewriter.$orderbycol1#9)
        |     |         |         |   |   +-group_by_list=
        |     |         |         |   |     +-distinct.arg#12 := ColumnRef(type=STRING, column=$agg_rewriter.$orderbycol1#9)
        |     |         |         |   +-order_by_item_list=
        |     |         |         |     +-OrderByItem
        |     |         |         |       +-column_ref=
        |     |         |         |         +-ColumnRef(type=STRING, column=$agg_rewriter.distinct.arg#12)
        |     |         |         +-limit=
        |     |         |         | +-Literal(type=INT64, value=10)
        |     |         |         +-offset=
        |     |         |           +-Literal(type=INT64, value=0)
        |     |         +-input_scan=
        |     |           +-SingleRowScan
        |     +-Literal(type=STRING, value=", ")
        +-input_scan=
          +-AggregateScan
            +-column_list=[$agg_rewriter.$array#10]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5, $orderby.$orderbycol1#6]
            |   +-expr_list=
            |   | +-$orderbycol1#6 :=
            |   |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
            |   |     +-ColumnRef(type=STRING, column=$array.a#4)
            |   |     +-Literal(type=STRING, value="extra")
            |   +-input_scan=
            |     +-ArrayScan
            |       +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
            |       +-input_scan=
            |       | +-ArrayScan
            |       |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |       |   +-input_scan=
            |       |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |       |   +-array_expr_list=
            |       |   | +-GetProtoField
            |       |   |   +-type=ARRAY<STRING>
            |       |   |   +-expr=
            |       |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   |   +-field_descriptor=repeated_string_val
            |       |   |   +-default_value=[]
            |       |   +-element_column_list=[$array.a#4]
            |       +-array_expr_list=
            |       | +-GetProtoField
            |       |   +-type=ARRAY<BYTES>
            |       |   +-expr=
            |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   +-field_descriptor=repeated_bytes_val
            |       |   +-default_value=[]
            |       +-element_column_list=[$array.b#5]
            +-group_by_list=
            | +-$groupbycol1#8 :=
            |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
            |     +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
            |     | +-ColumnRef(type=STRING, column=$array.a#4)
            |     +-FunctionCall(ZetaSQL:byte_length(BYTES) -> INT64)
            |       +-ColumnRef(type=BYTES, column=$array.b#5)
            +-aggregate_list=
              +-$array#10 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<`$orderbycol1_0` STRING>) -> ARRAY<STRUCT<`$orderbycol1_0` STRING>>)
                  +-MakeStruct
                    +-type=STRUCT<`$orderbycol1_0` STRING>
                    +-field_list=
                      +-ColumnRef(type=STRING, column=$orderby.$orderbycol1#6)
                  +-having_modifier=
                    +-AggregateHavingModifier
                      +-kind=MAX
                      +-having_expr=
                        +-Literal(type=INT64, value=3)
==

# Duplicate ARRAY_AGGs in the same AggregateScan
SELECT STRING_AGG(a, "x" ORDER BY a), STRING_AGG(a, ", " ORDER BY a)
FROM TestTable, TestTable.KitchenSink.repeated_string_val as a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [STRING]
| +-$aggregate.$agg2#6 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<STRING>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_string_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.a#4]
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
          |   +-ColumnRef(type=STRING, column=$array.a#4)
          |   +-Literal(type=STRING, value="x")
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=STRING, column=$array.a#4)
          +-$agg2#6 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$array.a#4)
              +-Literal(type=STRING, value=", ")
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=STRING, column=$array.a#4)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [STRING]
| +-$aggregate.$agg2#6 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#6]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        | |   +-SubqueryExpr
        | |   | +-type=ARRAY<STRING>
        | |   | +-subquery_type=SCALAR
        | |   | +-parameter_list=
        | |   | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#8)
        | |   | +-subquery=
        | |   |   +-ProjectScan
        | |   |     +-column_list=[$with_expr.injected#15]
        | |   |     +-expr_list=
        | |   |     | +-injected#15 :=
        | |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |   |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |   |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        | |   |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#10)
        | |   |     |     | +-Literal(type=INT64, value=1)
        | |   |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#10)
        | |   |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |   |     +-input_scan=
        | |   |       +-ProjectScan
        | |   |         +-column_list=[null_if_empty_array.$out#10]
        | |   |         +-expr_list=
        | |   |         | +-$out#10 :=
        | |   |         |   +-SubqueryExpr
        | |   |         |     +-type=ARRAY<STRING>
        | |   |         |     +-subquery_type=ARRAY
        | |   |         |     +-parameter_list=
        | |   |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#8, is_correlated=TRUE)
        | |   |         |     +-subquery=
        | |   |         |       +-OrderByScan
        | |   |         |         +-column_list=[$agg_rewriter.a#7]
        | |   |         |         +-is_ordered=TRUE
        | |   |         |         +-input_scan=
        | |   |         |         | +-FilterScan
        | |   |         |         |   +-column_list=[$agg_rewriter.a#7]
        | |   |         |         |   +-input_scan=
        | |   |         |         |   | +-ProjectScan
        | |   |         |         |   |   +-column_list=[$agg_rewriter.a#7]
        | |   |         |         |   |   +-expr_list=
        | |   |         |         |   |   | +-a#7 :=
        | |   |         |         |   |   |   +-GetStructField
        | |   |         |         |   |   |     +-type=STRING
        | |   |         |         |   |   |     +-expr=
        | |   |         |         |   |   |     | +-ColumnRef(type=STRUCT<a_0 STRING>, column=$agg_rewriter.$struct#9)
        | |   |         |         |   |   |     +-field_idx=0
        | |   |         |         |   |   +-input_scan=
        | |   |         |         |   |     +-ArrayScan
        | |   |         |         |   |       +-column_list=[$agg_rewriter.$struct#9]
        | |   |         |         |   |       +-array_expr_list=
        | |   |         |         |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#8, is_correlated=TRUE)
        | |   |         |         |   |       +-element_column_list=[$agg_rewriter.$struct#9]
        | |   |         |         |   +-filter_expr=
        | |   |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |   |         |         |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        | |   |         |         |         +-ColumnRef(type=STRING, column=$agg_rewriter.a#7)
        | |   |         |         +-order_by_item_list=
        | |   |         |           +-OrderByItem
        | |   |         |             +-column_ref=
        | |   |         |               +-ColumnRef(type=STRING, column=$agg_rewriter.a#7)
        | |   |         +-input_scan=
        | |   |           +-SingleRowScan
        | |   +-Literal(type=STRING, value="x")
        | +-$agg2#6 :=
        |   +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        |     +-SubqueryExpr
        |     | +-type=ARRAY<STRING>
        |     | +-subquery_type=SCALAR
        |     | +-parameter_list=
        |     | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#12)
        |     | +-subquery=
        |     |   +-ProjectScan
        |     |     +-column_list=[$with_expr.injected#16]
        |     |     +-expr_list=
        |     |     | +-injected#16 :=
        |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |     |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |     |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |     |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#14)
        |     |     |     | +-Literal(type=INT64, value=1)
        |     |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#14)
        |     |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |     |     +-input_scan=
        |     |       +-ProjectScan
        |     |         +-column_list=[null_if_empty_array.$out#14]
        |     |         +-expr_list=
        |     |         | +-$out#14 :=
        |     |         |   +-SubqueryExpr
        |     |         |     +-type=ARRAY<STRING>
        |     |         |     +-subquery_type=ARRAY
        |     |         |     +-parameter_list=
        |     |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        |     |         |     +-subquery=
        |     |         |       +-OrderByScan
        |     |         |         +-column_list=[$agg_rewriter.a#11]
        |     |         |         +-is_ordered=TRUE
        |     |         |         +-input_scan=
        |     |         |         | +-FilterScan
        |     |         |         |   +-column_list=[$agg_rewriter.a#11]
        |     |         |         |   +-input_scan=
        |     |         |         |   | +-ProjectScan
        |     |         |         |   |   +-column_list=[$agg_rewriter.a#11]
        |     |         |         |   |   +-expr_list=
        |     |         |         |   |   | +-a#11 :=
        |     |         |         |   |   |   +-GetStructField
        |     |         |         |   |   |     +-type=STRING
        |     |         |         |   |   |     +-expr=
        |     |         |         |   |   |     | +-ColumnRef(type=STRUCT<a_0 STRING>, column=$agg_rewriter.$struct#13)
        |     |         |         |   |   |     +-field_idx=0
        |     |         |         |   |   +-input_scan=
        |     |         |         |   |     +-ArrayScan
        |     |         |         |   |       +-column_list=[$agg_rewriter.$struct#13]
        |     |         |         |   |       +-array_expr_list=
        |     |         |         |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#12, is_correlated=TRUE)
        |     |         |         |   |       +-element_column_list=[$agg_rewriter.$struct#13]
        |     |         |         |   +-filter_expr=
        |     |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |     |         |         |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        |     |         |         |         +-ColumnRef(type=STRING, column=$agg_rewriter.a#11)
        |     |         |         +-order_by_item_list=
        |     |         |           +-OrderByItem
        |     |         |             +-column_ref=
        |     |         |               +-ColumnRef(type=STRING, column=$agg_rewriter.a#11)
        |     |         +-input_scan=
        |     |           +-SingleRowScan
        |     +-Literal(type=STRING, value=", ")
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#8, $array#12]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |   +-input_scan=
            |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |   +-array_expr_list=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<STRING>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=repeated_string_val
            |   |   +-default_value=[]
            |   +-element_column_list=[$array.a#4]
            +-aggregate_list=
              +-$array#8 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING>) -> ARRAY<STRUCT<a_0 STRING>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 STRING>
              |     +-field_list=
              |       +-ColumnRef(type=STRING, column=$array.a#4)
              +-$array#12 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING>) -> ARRAY<STRUCT<a_0 STRING>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 STRING>
                    +-field_list=
                      +-ColumnRef(type=STRING, column=$array.a#4)

==

# Slight different ARRAY_AGGs in the same AggregateScan
SELECT STRING_AGG(a, "," ORDER BY b), STRING_AGG(b, b", " ORDER BY a)
FROM TestTable, TestTable.KitchenSink.repeated_string_val as a, TestTable.KitchenSink.repeated_bytes_val as b
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [STRING]
| +-$aggregate.$agg2#7 AS `$col2` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#6, $agg2#7]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
        |   +-input_scan=
        |   | +-ArrayScan
        |   |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |   |   +-array_expr_list=
        |   |   | +-GetProtoField
        |   |   |   +-type=ARRAY<STRING>
        |   |   |   +-expr=
        |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   |   +-field_descriptor=repeated_string_val
        |   |   |   +-default_value=[]
        |   |   +-element_column_list=[$array.a#4]
        |   +-array_expr_list=
        |   | +-GetProtoField
        |   |   +-type=ARRAY<BYTES>
        |   |   +-expr=
        |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |   |   +-field_descriptor=repeated_bytes_val
        |   |   +-default_value=[]
        |   +-element_column_list=[$array.b#5]
        +-aggregate_list=
          +-$agg1#6 :=
          | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
          |   +-ColumnRef(type=STRING, column=$array.a#4)
          |   +-Literal(type=STRING, value=",")
          |   +-order_by_item_list=
          |     +-OrderByItem
          |       +-column_ref=
          |         +-ColumnRef(type=BYTES, column=$array.b#5)
          +-$agg2#7 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(BYTES, BYTES) -> BYTES)
              +-ColumnRef(type=BYTES, column=$array.b#5)
              +-Literal(type=BYTES, value=b", ")
              +-order_by_item_list=
                +-OrderByItem
                  +-column_ref=
                    +-ColumnRef(type=STRING, column=$array.a#4)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#6 AS `$col1` [STRING]
| +-$aggregate.$agg2#7 AS `$col2` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#6, $agg2#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#6, $agg2#7]
        +-expr_list=
        | +-$agg1#6 :=
        | | +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        | |   +-SubqueryExpr
        | |   | +-type=ARRAY<STRING>
        | |   | +-subquery_type=SCALAR
        | |   | +-parameter_list=
        | |   | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>, column=$agg_rewriter.$array#10)
        | |   | +-subquery=
        | |   |   +-ProjectScan
        | |   |     +-column_list=[$with_expr.injected#18]
        | |   |     +-expr_list=
        | |   |     | +-injected#18 :=
        | |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |   |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |   |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        | |   |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#12)
        | |   |     |     | +-Literal(type=INT64, value=1)
        | |   |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#12)
        | |   |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |   |     +-input_scan=
        | |   |       +-ProjectScan
        | |   |         +-column_list=[null_if_empty_array.$out#12]
        | |   |         +-expr_list=
        | |   |         | +-$out#12 :=
        | |   |         |   +-SubqueryExpr
        | |   |         |     +-type=ARRAY<STRING>
        | |   |         |     +-subquery_type=ARRAY
        | |   |         |     +-parameter_list=
        | |   |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |   |         |     +-subquery=
        | |   |         |       +-OrderByScan
        | |   |         |         +-column_list=[$agg_rewriter.a#8]
        | |   |         |         +-is_ordered=TRUE
        | |   |         |         +-input_scan=
        | |   |         |         | +-FilterScan
        | |   |         |         |   +-column_list=$agg_rewriter.[a#8, b#9]
        | |   |         |         |   +-input_scan=
        | |   |         |         |   | +-ProjectScan
        | |   |         |         |   |   +-column_list=$agg_rewriter.[a#8, b#9]
        | |   |         |         |   |   +-expr_list=
        | |   |         |         |   |   | +-a#8 :=
        | |   |         |         |   |   | | +-GetStructField
        | |   |         |         |   |   | |   +-type=STRING
        | |   |         |         |   |   | |   +-expr=
        | |   |         |         |   |   | |   | +-ColumnRef(type=STRUCT<a_0 STRING, b_1 BYTES>, column=$agg_rewriter.$struct#11)
        | |   |         |         |   |   | |   +-field_idx=0
        | |   |         |         |   |   | +-b#9 :=
        | |   |         |         |   |   |   +-GetStructField
        | |   |         |         |   |   |     +-type=BYTES
        | |   |         |         |   |   |     +-expr=
        | |   |         |         |   |   |     | +-ColumnRef(type=STRUCT<a_0 STRING, b_1 BYTES>, column=$agg_rewriter.$struct#11)
        | |   |         |         |   |   |     +-field_idx=1
        | |   |         |         |   |   +-input_scan=
        | |   |         |         |   |     +-ArrayScan
        | |   |         |         |   |       +-column_list=[$agg_rewriter.$struct#11]
        | |   |         |         |   |       +-array_expr_list=
        | |   |         |         |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>, column=$agg_rewriter.$array#10, is_correlated=TRUE)
        | |   |         |         |   |       +-element_column_list=[$agg_rewriter.$struct#11]
        | |   |         |         |   +-filter_expr=
        | |   |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |   |         |         |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        | |   |         |         |         +-ColumnRef(type=STRING, column=$agg_rewriter.a#8)
        | |   |         |         +-order_by_item_list=
        | |   |         |           +-OrderByItem
        | |   |         |             +-column_ref=
        | |   |         |               +-ColumnRef(type=BYTES, column=$agg_rewriter.b#9)
        | |   |         +-input_scan=
        | |   |           +-SingleRowScan
        | |   +-Literal(type=STRING, value=",")
        | +-$agg2#7 :=
        |   +-FunctionCall(ZetaSQL:array_to_string(ARRAY<BYTES>, BYTES) -> BYTES)
        |     +-SubqueryExpr
        |     | +-type=ARRAY<BYTES>
        |     | +-subquery_type=SCALAR
        |     | +-parameter_list=
        |     | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>, column=$agg_rewriter.$array#15)
        |     | +-subquery=
        |     |   +-ProjectScan
        |     |     +-column_list=[$with_expr.injected#19]
        |     |     +-expr_list=
        |     |     | +-injected#19 :=
        |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<BYTES>, ARRAY<BYTES>) -> ARRAY<BYTES>)
        |     |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |     |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<BYTES>) -> INT64)
        |     |     |     | | +-ColumnRef(type=ARRAY<BYTES>, column=null_if_empty_array.$out#17)
        |     |     |     | +-Literal(type=INT64, value=1)
        |     |     |     +-ColumnRef(type=ARRAY<BYTES>, column=null_if_empty_array.$out#17)
        |     |     |     +-Literal(type=ARRAY<BYTES>, value=NULL)
        |     |     +-input_scan=
        |     |       +-ProjectScan
        |     |         +-column_list=[null_if_empty_array.$out#17]
        |     |         +-expr_list=
        |     |         | +-$out#17 :=
        |     |         |   +-SubqueryExpr
        |     |         |     +-type=ARRAY<BYTES>
        |     |         |     +-subquery_type=ARRAY
        |     |         |     +-parameter_list=
        |     |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>, column=$agg_rewriter.$array#15, is_correlated=TRUE)
        |     |         |     +-subquery=
        |     |         |       +-OrderByScan
        |     |         |         +-column_list=[$agg_rewriter.b#14]
        |     |         |         +-is_ordered=TRUE
        |     |         |         +-input_scan=
        |     |         |         | +-FilterScan
        |     |         |         |   +-column_list=$agg_rewriter.[a#13, b#14]
        |     |         |         |   +-input_scan=
        |     |         |         |   | +-ProjectScan
        |     |         |         |   |   +-column_list=$agg_rewriter.[a#13, b#14]
        |     |         |         |   |   +-expr_list=
        |     |         |         |   |   | +-a#13 :=
        |     |         |         |   |   | | +-GetStructField
        |     |         |         |   |   | |   +-type=STRING
        |     |         |         |   |   | |   +-expr=
        |     |         |         |   |   | |   | +-ColumnRef(type=STRUCT<a_0 STRING, b_1 BYTES>, column=$agg_rewriter.$struct#16)
        |     |         |         |   |   | |   +-field_idx=0
        |     |         |         |   |   | +-b#14 :=
        |     |         |         |   |   |   +-GetStructField
        |     |         |         |   |   |     +-type=BYTES
        |     |         |         |   |   |     +-expr=
        |     |         |         |   |   |     | +-ColumnRef(type=STRUCT<a_0 STRING, b_1 BYTES>, column=$agg_rewriter.$struct#16)
        |     |         |         |   |   |     +-field_idx=1
        |     |         |         |   |   +-input_scan=
        |     |         |         |   |     +-ArrayScan
        |     |         |         |   |       +-column_list=[$agg_rewriter.$struct#16]
        |     |         |         |   |       +-array_expr_list=
        |     |         |         |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>, column=$agg_rewriter.$array#15, is_correlated=TRUE)
        |     |         |         |   |       +-element_column_list=[$agg_rewriter.$struct#16]
        |     |         |         |   +-filter_expr=
        |     |         |         |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |     |         |         |       +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
        |     |         |         |         +-ColumnRef(type=BYTES, column=$agg_rewriter.b#14)
        |     |         |         +-order_by_item_list=
        |     |         |           +-OrderByItem
        |     |         |             +-column_ref=
        |     |         |               +-ColumnRef(type=STRING, column=$agg_rewriter.a#13)
        |     |         +-input_scan=
        |     |           +-SingleRowScan
        |     +-Literal(type=BYTES, value=b", ")
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#10, $array#15]
            +-input_scan=
            | +-ArrayScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $array.b#5]
            |   +-input_scan=
            |   | +-ArrayScan
            |   |   +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |   |   +-array_expr_list=
            |   |   | +-GetProtoField
            |   |   |   +-type=ARRAY<STRING>
            |   |   |   +-expr=
            |   |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   |   +-field_descriptor=repeated_string_val
            |   |   |   +-default_value=[]
            |   |   +-element_column_list=[$array.a#4]
            |   +-array_expr_list=
            |   | +-GetProtoField
            |   |   +-type=ARRAY<BYTES>
            |   |   +-expr=
            |   |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |   |   +-field_descriptor=repeated_bytes_val
            |   |   +-default_value=[]
            |   +-element_column_list=[$array.b#5]
            +-aggregate_list=
              +-$array#10 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING, b_1 BYTES>) -> ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 STRING, b_1 BYTES>
              |     +-field_list=
              |       +-ColumnRef(type=STRING, column=$array.a#4)
              |       +-ColumnRef(type=BYTES, column=$array.b#5)
              +-$array#15 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING, b_1 BYTES>) -> ARRAY<STRUCT<a_0 STRING, b_1 BYTES>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 STRING, b_1 BYTES>
                    +-field_list=
                      +-ColumnRef(type=STRING, column=$array.a#4)
                      +-ColumnRef(type=BYTES, column=$array.b#5)
==

[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE]

# STRING_AGG with limits
SELECT STRING_AGG(a, ", " LIMIT 2), STRING_AGG(a, "," ORDER BY CHAR_LENGTH(a)+1 LIMIT 3)
FROM TestTable, TestTable.KitchenSink.repeated_string_val as a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [STRING]
| +-$aggregate.$agg2#7 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
        |   |     | +-ColumnRef(type=STRING, column=$array.a#4)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |       +-input_scan=
        |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |       +-array_expr_list=
        |       | +-GetProtoField
        |       |   +-type=ARRAY<STRING>
        |       |   +-expr=
        |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   +-field_descriptor=repeated_string_val
        |       |   +-default_value=[]
        |       +-element_column_list=[$array.a#4]
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
          |   +-ColumnRef(type=STRING, column=$array.a#4)
          |   +-Literal(type=STRING, value=", ")
          |   +-limit=
          |     +-Literal(type=INT64, value=2)
          +-$agg2#7 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$array.a#4)
              +-Literal(type=STRING, value=",")
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
              +-limit=
                +-Literal(type=INT64, value=3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [STRING]
| +-$aggregate.$agg2#7 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        | |   +-SubqueryExpr
        | |   | +-type=ARRAY<STRING>
        | |   | +-subquery_type=SCALAR
        | |   | +-parameter_list=
        | |   | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#9)
        | |   | +-subquery=
        | |   |   +-ProjectScan
        | |   |     +-column_list=[$with_expr.injected#17]
        | |   |     +-expr_list=
        | |   |     | +-injected#17 :=
        | |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |   |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |   |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        | |   |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#11)
        | |   |     |     | +-Literal(type=INT64, value=1)
        | |   |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#11)
        | |   |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |   |     +-input_scan=
        | |   |       +-ProjectScan
        | |   |         +-column_list=[null_if_empty_array.$out#11]
        | |   |         +-expr_list=
        | |   |         | +-$out#11 :=
        | |   |         |   +-SubqueryExpr
        | |   |         |     +-type=ARRAY<STRING>
        | |   |         |     +-subquery_type=ARRAY
        | |   |         |     +-parameter_list=
        | |   |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |   |         |     +-subquery=
        | |   |         |       +-LimitOffsetScan
        | |   |         |         +-column_list=[$agg_rewriter.a#8]
        | |   |         |         +-input_scan=
        | |   |         |         | +-ProjectScan
        | |   |         |         |   +-column_list=[$agg_rewriter.a#8]
        | |   |         |         |   +-input_scan=
        | |   |         |         |     +-FilterScan
        | |   |         |         |       +-column_list=[$agg_rewriter.a#8]
        | |   |         |         |       +-input_scan=
        | |   |         |         |       | +-ProjectScan
        | |   |         |         |       |   +-column_list=[$agg_rewriter.a#8]
        | |   |         |         |       |   +-expr_list=
        | |   |         |         |       |   | +-a#8 :=
        | |   |         |         |       |   |   +-GetStructField
        | |   |         |         |       |   |     +-type=STRING
        | |   |         |         |       |   |     +-expr=
        | |   |         |         |       |   |     | +-ColumnRef(type=STRUCT<a_0 STRING>, column=$agg_rewriter.$struct#10)
        | |   |         |         |       |   |     +-field_idx=0
        | |   |         |         |       |   +-input_scan=
        | |   |         |         |       |     +-ArrayScan
        | |   |         |         |       |       +-column_list=[$agg_rewriter.$struct#10]
        | |   |         |         |       |       +-array_expr_list=
        | |   |         |         |       |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |   |         |         |       |       +-element_column_list=[$agg_rewriter.$struct#10]
        | |   |         |         |       +-filter_expr=
        | |   |         |         |         +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |   |         |         |           +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        | |   |         |         |             +-ColumnRef(type=STRING, column=$agg_rewriter.a#8)
        | |   |         |         +-limit=
        | |   |         |         | +-Literal(type=INT64, value=2)
        | |   |         |         +-offset=
        | |   |         |           +-Literal(type=INT64, value=0)
        | |   |         +-input_scan=
        | |   |           +-SingleRowScan
        | |   +-Literal(type=STRING, value=", ")
        | +-$agg2#7 :=
        |   +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        |     +-SubqueryExpr
        |     | +-type=ARRAY<STRING>
        |     | +-subquery_type=SCALAR
        |     | +-parameter_list=
        |     | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14)
        |     | +-subquery=
        |     |   +-ProjectScan
        |     |     +-column_list=[$with_expr.injected#18]
        |     |     +-expr_list=
        |     |     | +-injected#18 :=
        |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |     |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |     |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |     |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#16)
        |     |     |     | +-Literal(type=INT64, value=1)
        |     |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#16)
        |     |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |     |     +-input_scan=
        |     |       +-ProjectScan
        |     |         +-column_list=[null_if_empty_array.$out#16]
        |     |         +-expr_list=
        |     |         | +-$out#16 :=
        |     |         |   +-SubqueryExpr
        |     |         |     +-type=ARRAY<STRING>
        |     |         |     +-subquery_type=ARRAY
        |     |         |     +-parameter_list=
        |     |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14, is_correlated=TRUE)
        |     |         |     +-subquery=
        |     |         |       +-LimitOffsetScan
        |     |         |         +-column_list=[$agg_rewriter.a#12]
        |     |         |         +-is_ordered=TRUE
        |     |         |         +-input_scan=
        |     |         |         | +-OrderByScan
        |     |         |         |   +-column_list=[$agg_rewriter.a#12]
        |     |         |         |   +-is_ordered=TRUE
        |     |         |         |   +-input_scan=
        |     |         |         |   | +-FilterScan
        |     |         |         |   |   +-column_list=$agg_rewriter.[a#12, $orderbycol1#13]
        |     |         |         |   |   +-input_scan=
        |     |         |         |   |   | +-ProjectScan
        |     |         |         |   |   |   +-column_list=$agg_rewriter.[a#12, $orderbycol1#13]
        |     |         |         |   |   |   +-expr_list=
        |     |         |         |   |   |   | +-a#12 :=
        |     |         |         |   |   |   | | +-GetStructField
        |     |         |         |   |   |   | |   +-type=STRING
        |     |         |         |   |   |   | |   +-expr=
        |     |         |         |   |   |   | |   | +-ColumnRef(type=STRUCT<a_0 STRING, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#15)
        |     |         |         |   |   |   | |   +-field_idx=0
        |     |         |         |   |   |   | +-$orderbycol1#13 :=
        |     |         |         |   |   |   |   +-GetStructField
        |     |         |         |   |   |   |     +-type=INT64
        |     |         |         |   |   |   |     +-expr=
        |     |         |         |   |   |   |     | +-ColumnRef(type=STRUCT<a_0 STRING, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#15)
        |     |         |         |   |   |   |     +-field_idx=1
        |     |         |         |   |   |   +-input_scan=
        |     |         |         |   |   |     +-ArrayScan
        |     |         |         |   |   |       +-column_list=[$agg_rewriter.$struct#15]
        |     |         |         |   |   |       +-array_expr_list=
        |     |         |         |   |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14, is_correlated=TRUE)
        |     |         |         |   |   |       +-element_column_list=[$agg_rewriter.$struct#15]
        |     |         |         |   |   +-filter_expr=
        |     |         |         |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |     |         |         |   |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        |     |         |         |   |         +-ColumnRef(type=STRING, column=$agg_rewriter.a#12)
        |     |         |         |   +-order_by_item_list=
        |     |         |         |     +-OrderByItem
        |     |         |         |       +-column_ref=
        |     |         |         |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#13)
        |     |         |         +-limit=
        |     |         |         | +-Literal(type=INT64, value=3)
        |     |         |         +-offset=
        |     |         |           +-Literal(type=INT64, value=0)
        |     |         +-input_scan=
        |     |           +-SingleRowScan
        |     +-Literal(type=STRING, value=",")
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#9, $array#14]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $orderby.$orderbycol1#6]
            |   +-expr_list=
            |   | +-$orderbycol1#6 :=
            |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
            |   |     | +-ColumnRef(type=STRING, column=$array.a#4)
            |   |     +-Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-ArrayScan
            |       +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |       +-input_scan=
            |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |       +-array_expr_list=
            |       | +-GetProtoField
            |       |   +-type=ARRAY<STRING>
            |       |   +-expr=
            |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   +-field_descriptor=repeated_string_val
            |       |   +-default_value=[]
            |       +-element_column_list=[$array.a#4]
            +-aggregate_list=
              +-$array#9 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING>) -> ARRAY<STRUCT<a_0 STRING>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 STRING>
              |     +-field_list=
              |       +-ColumnRef(type=STRING, column=$array.a#4)
              +-$array#14 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 STRING, `$orderbycol1_1` INT64>
                    +-field_list=
                      +-ColumnRef(type=STRING, column=$array.a#4)
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)

==

[language_features=NONE,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE]

# STRING_AGG one arg
SELECT STRING_AGG(a LIMIT 2), STRING_AGG(a ORDER BY CHAR_LENGTH(a)+1 LIMIT 3)
FROM TestTable, TestTable.KitchenSink.repeated_string_val as a
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [STRING]
| +-$aggregate.$agg2#7 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
        |   |     | +-ColumnRef(type=STRING, column=$array.a#4)
        |   |     +-Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-ArrayScan
        |       +-column_list=[TestTable.KitchenSink#3, $array.a#4]
        |       +-input_scan=
        |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
        |       +-array_expr_list=
        |       | +-GetProtoField
        |       |   +-type=ARRAY<STRING>
        |       |   +-expr=
        |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |       |   +-field_descriptor=repeated_string_val
        |       |   +-default_value=[]
        |       +-element_column_list=[$array.a#4]
        +-aggregate_list=
          +-$agg1#5 :=
          | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
          |   +-ColumnRef(type=STRING, column=$array.a#4)
          |   +-limit=
          |     +-Literal(type=INT64, value=2)
          +-$agg2#7 :=
            +-AggregateFunctionCall(ZetaSQL:string_agg(STRING) -> STRING)
              +-ColumnRef(type=STRING, column=$array.a#4)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
              +-limit=
                +-Literal(type=INT64, value=3)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#5 AS `$col1` [STRING]
| +-$aggregate.$agg2#7 AS `$col2` [STRING]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#5, $agg2#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#5, $agg2#7]
        +-expr_list=
        | +-$agg1#5 :=
        | | +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        | |   +-SubqueryExpr
        | |   | +-type=ARRAY<STRING>
        | |   | +-subquery_type=SCALAR
        | |   | +-parameter_list=
        | |   | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#9)
        | |   | +-subquery=
        | |   |   +-ProjectScan
        | |   |     +-column_list=[$with_expr.injected#17]
        | |   |     +-expr_list=
        | |   |     | +-injected#17 :=
        | |   |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        | |   |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        | |   |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        | |   |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#11)
        | |   |     |     | +-Literal(type=INT64, value=1)
        | |   |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#11)
        | |   |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        | |   |     +-input_scan=
        | |   |       +-ProjectScan
        | |   |         +-column_list=[null_if_empty_array.$out#11]
        | |   |         +-expr_list=
        | |   |         | +-$out#11 :=
        | |   |         |   +-SubqueryExpr
        | |   |         |     +-type=ARRAY<STRING>
        | |   |         |     +-subquery_type=ARRAY
        | |   |         |     +-parameter_list=
        | |   |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |   |         |     +-subquery=
        | |   |         |       +-LimitOffsetScan
        | |   |         |         +-column_list=[$agg_rewriter.a#8]
        | |   |         |         +-input_scan=
        | |   |         |         | +-ProjectScan
        | |   |         |         |   +-column_list=[$agg_rewriter.a#8]
        | |   |         |         |   +-input_scan=
        | |   |         |         |     +-FilterScan
        | |   |         |         |       +-column_list=[$agg_rewriter.a#8]
        | |   |         |         |       +-input_scan=
        | |   |         |         |       | +-ProjectScan
        | |   |         |         |       |   +-column_list=[$agg_rewriter.a#8]
        | |   |         |         |       |   +-expr_list=
        | |   |         |         |       |   | +-a#8 :=
        | |   |         |         |       |   |   +-GetStructField
        | |   |         |         |       |   |     +-type=STRING
        | |   |         |         |       |   |     +-expr=
        | |   |         |         |       |   |     | +-ColumnRef(type=STRUCT<a_0 STRING>, column=$agg_rewriter.$struct#10)
        | |   |         |         |       |   |     +-field_idx=0
        | |   |         |         |       |   +-input_scan=
        | |   |         |         |       |     +-ArrayScan
        | |   |         |         |       |       +-column_list=[$agg_rewriter.$struct#10]
        | |   |         |         |       |       +-array_expr_list=
        | |   |         |         |       |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING>>, column=$agg_rewriter.$array#9, is_correlated=TRUE)
        | |   |         |         |       |       +-element_column_list=[$agg_rewriter.$struct#10]
        | |   |         |         |       +-filter_expr=
        | |   |         |         |         +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        | |   |         |         |           +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        | |   |         |         |             +-ColumnRef(type=STRING, column=$agg_rewriter.a#8)
        | |   |         |         +-limit=
        | |   |         |         | +-Literal(type=INT64, value=2)
        | |   |         |         +-offset=
        | |   |         |           +-Literal(type=INT64, value=0)
        | |   |         +-input_scan=
        | |   |           +-SingleRowScan
        | |   +-Literal(type=STRING, value=",")
        | +-$agg2#7 :=
        |   +-FunctionCall(ZetaSQL:array_to_string(ARRAY<STRING>, STRING) -> STRING)
        |     +-SubqueryExpr
        |     | +-type=ARRAY<STRING>
        |     | +-subquery_type=SCALAR
        |     | +-parameter_list=
        |     | | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14)
        |     | +-subquery=
        |     |   +-ProjectScan
        |     |     +-column_list=[$with_expr.injected#18]
        |     |     +-expr_list=
        |     |     | +-injected#18 :=
        |     |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<STRING>, ARRAY<STRING>) -> ARRAY<STRING>)
        |     |     |     +-FunctionCall(ZetaSQL:$greater_or_equal(INT64, INT64) -> BOOL)
        |     |     |     | +-FunctionCall(ZetaSQL:array_length(ARRAY<STRING>) -> INT64)
        |     |     |     | | +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#16)
        |     |     |     | +-Literal(type=INT64, value=1)
        |     |     |     +-ColumnRef(type=ARRAY<STRING>, column=null_if_empty_array.$out#16)
        |     |     |     +-Literal(type=ARRAY<STRING>, value=NULL)
        |     |     +-input_scan=
        |     |       +-ProjectScan
        |     |         +-column_list=[null_if_empty_array.$out#16]
        |     |         +-expr_list=
        |     |         | +-$out#16 :=
        |     |         |   +-SubqueryExpr
        |     |         |     +-type=ARRAY<STRING>
        |     |         |     +-subquery_type=ARRAY
        |     |         |     +-parameter_list=
        |     |         |     | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14, is_correlated=TRUE)
        |     |         |     +-subquery=
        |     |         |       +-LimitOffsetScan
        |     |         |         +-column_list=[$agg_rewriter.a#12]
        |     |         |         +-is_ordered=TRUE
        |     |         |         +-input_scan=
        |     |         |         | +-OrderByScan
        |     |         |         |   +-column_list=[$agg_rewriter.a#12]
        |     |         |         |   +-is_ordered=TRUE
        |     |         |         |   +-input_scan=
        |     |         |         |   | +-FilterScan
        |     |         |         |   |   +-column_list=$agg_rewriter.[a#12, $orderbycol1#13]
        |     |         |         |   |   +-input_scan=
        |     |         |         |   |   | +-ProjectScan
        |     |         |         |   |   |   +-column_list=$agg_rewriter.[a#12, $orderbycol1#13]
        |     |         |         |   |   |   +-expr_list=
        |     |         |         |   |   |   | +-a#12 :=
        |     |         |         |   |   |   | | +-GetStructField
        |     |         |         |   |   |   | |   +-type=STRING
        |     |         |         |   |   |   | |   +-expr=
        |     |         |         |   |   |   | |   | +-ColumnRef(type=STRUCT<a_0 STRING, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#15)
        |     |         |         |   |   |   | |   +-field_idx=0
        |     |         |         |   |   |   | +-$orderbycol1#13 :=
        |     |         |         |   |   |   |   +-GetStructField
        |     |         |         |   |   |   |     +-type=INT64
        |     |         |         |   |   |   |     +-expr=
        |     |         |         |   |   |   |     | +-ColumnRef(type=STRUCT<a_0 STRING, `$orderbycol1_1` INT64>, column=$agg_rewriter.$struct#15)
        |     |         |         |   |   |   |     +-field_idx=1
        |     |         |         |   |   |   +-input_scan=
        |     |         |         |   |   |     +-ArrayScan
        |     |         |         |   |   |       +-column_list=[$agg_rewriter.$struct#15]
        |     |         |         |   |   |       +-array_expr_list=
        |     |         |         |   |   |       | +-ColumnRef(type=ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>, column=$agg_rewriter.$array#14, is_correlated=TRUE)
        |     |         |         |   |   |       +-element_column_list=[$agg_rewriter.$struct#15]
        |     |         |         |   |   +-filter_expr=
        |     |         |         |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
        |     |         |         |   |       +-FunctionCall(ZetaSQL:$is_null(STRING) -> BOOL)
        |     |         |         |   |         +-ColumnRef(type=STRING, column=$agg_rewriter.a#12)
        |     |         |         |   +-order_by_item_list=
        |     |         |         |     +-OrderByItem
        |     |         |         |       +-column_ref=
        |     |         |         |         +-ColumnRef(type=INT64, column=$agg_rewriter.$orderbycol1#13)
        |     |         |         +-limit=
        |     |         |         | +-Literal(type=INT64, value=3)
        |     |         |         +-offset=
        |     |         |           +-Literal(type=INT64, value=0)
        |     |         +-input_scan=
        |     |           +-SingleRowScan
        |     +-Literal(type=STRING, value=",")
        +-input_scan=
          +-AggregateScan
            +-column_list=$agg_rewriter.[$array#9, $array#14]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[TestTable.KitchenSink#3, $array.a#4, $orderby.$orderbycol1#6]
            |   +-expr_list=
            |   | +-$orderbycol1#6 :=
            |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |   |     +-FunctionCall(ZetaSQL:char_length(STRING) -> INT64)
            |   |     | +-ColumnRef(type=STRING, column=$array.a#4)
            |   |     +-Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-ArrayScan
            |       +-column_list=[TestTable.KitchenSink#3, $array.a#4]
            |       +-input_scan=
            |       | +-TableScan(column_list=[TestTable.KitchenSink#3], table=TestTable, column_index_list=[2])
            |       +-array_expr_list=
            |       | +-GetProtoField
            |       |   +-type=ARRAY<STRING>
            |       |   +-expr=
            |       |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
            |       |   +-field_descriptor=repeated_string_val
            |       |   +-default_value=[]
            |       +-element_column_list=[$array.a#4]
            +-aggregate_list=
              +-$array#9 :=
              | +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING>) -> ARRAY<STRUCT<a_0 STRING>>)
              |   +-MakeStruct
              |     +-type=STRUCT<a_0 STRING>
              |     +-field_list=
              |       +-ColumnRef(type=STRING, column=$array.a#4)
              +-$array#14 :=
                +-AggregateFunctionCall(ZetaSQL:array_agg(STRUCT<a_0 STRING, `$orderbycol1_1` INT64>) -> ARRAY<STRUCT<a_0 STRING, `$orderbycol1_1` INT64>>)
                  +-MakeStruct
                    +-type=STRUCT<a_0 STRING, `$orderbycol1_1` INT64>
                    +-field_list=
                      +-ColumnRef(type=STRING, column=$array.a#4)
                      +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
