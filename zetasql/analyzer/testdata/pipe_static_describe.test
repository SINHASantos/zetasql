[default language_features=MAXIMUM]
[language_features=NONE,+PIPE_STATIC_DESCRIBE]
select * from KeyValue
|> STATIC_DESCRIBE
--
ERROR: Pipe query syntax not supported [at 2:1]
|> STATIC_DESCRIBE
^
==

[language_features=NONE,+PIPES]
from KeyValue
|> STATIC_DESCRIBE
--
ERROR: Pipe STATIC_DESCRIBE not supported [at 2:1]
|> STATIC_DESCRIBE
^
==

[default language_features=MAXIMUM,+PIPES,+PIPE_STATIC_DESCRIBE]

from KeyValue
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-describe_text=
    |   """
    |   NameList:
    |     Key INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |     Range variables:
    |       KeyValue -> RANGE_VARIABLE<Key,Value>
    |   """
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# STATIC_DESCRIBE is a no-op that shows the NameList state, without changing it.
# Note that `Value` still gets pruned out because it's not accessed, even though
# it's shown in the NameList.
from KeyValue
|> STATIC_DESCRIBE
|> STATIC_DESCRIBE
|> where key=1
|> select KeyValue.key
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1]
    +-input_scan=
      +-FilterScan
        +-column_list=[KeyValue.Key#1]
        +-input_scan=
        | +-StaticDescribeScan
        |   +-column_list=[KeyValue.Key#1]
        |   +-describe_text=
        |   |   """
        |   |   NameList:
        |   |     Key INT64 KeyValue.Key#1
        |   |     Value STRING KeyValue.Value#2
        |   |   NameScope:
        |   |     Names:
        |   |       Key -> INT64 (KeyValue.Key#1) (implicit)
        |   |       Value -> STRING (KeyValue.Value#2) (implicit)
        |   |     Range variables:
        |   |       KeyValue -> RANGE_VARIABLE<Key,Value>
        |   |   """
        |   +-input_scan=
        |     +-StaticDescribeScan
        |       +-column_list=[KeyValue.Key#1]
        |       +-describe_text=
        |       |   """
        |       |   NameList:
        |       |     Key INT64 KeyValue.Key#1
        |       |     Value STRING KeyValue.Value#2
        |       |   NameScope:
        |       |     Names:
        |       |       Key -> INT64 (KeyValue.Key#1) (implicit)
        |       |       Value -> STRING (KeyValue.Value#2) (implicit)
        |       |     Range variables:
        |       |       KeyValue -> RANGE_VARIABLE<Key,Value>
        |       |   """
        |       +-input_scan=
        |         +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-Literal(type=INT64, value=1)
==

# Describe a value table.
FROM TestExtraValueTable
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-StaticDescribeScan
    +-column_list=[TestExtraValueTable.value#1]
    +-describe_text=
    |   """
    |   NameList (is_value_table = true):
    |     TestExtraValueTable zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
    |   NameScope:
    |     Names:
    |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
    |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
    |     Range variables:
    |       TestExtraValueTable -> RANGE_VARIABLE<$value>
    |     Value table columns:
    |       TestExtraValueTable.value#1
    |   """
    +-input_scan=
      +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
==

FROM TestExtraValueTable vt CROSS JOIN KeyValue kv
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS vt [PROTO<zetasql_test__.TestExtraPB>]
| +-KeyValue.Key#4 AS Key [INT64]
| +-KeyValue.Value#5 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=[TestExtraValueTable.value#1, KeyValue.Key#4, KeyValue.Value#5]
    +-describe_text=
    |   """
    |   NameList:
    |     vt zetasql_test__.TestExtraPB TestExtraValueTable.value#1 (value table)
    |     Key INT64 KeyValue.Key#4
    |     Value STRING KeyValue.Value#5
    |   NameScope:
    |     Names:
    |       Filename -> STRING (TestExtraValueTable.Filename#2) (implicit) (pseudo-column)
    |       Key -> INT64 (KeyValue.Key#4) (implicit)
    |       RowId -> BYTES (TestExtraValueTable.RowId#3) (implicit) (pseudo-column)
    |       Value -> STRING (KeyValue.Value#5) (implicit)
    |     Range variables:
    |       kv -> RANGE_VARIABLE<Key,Value>
    |       vt -> RANGE_VARIABLE<$value>
    |     Value table columns:
    |       TestExtraValueTable.value#1
    |   """
    +-input_scan=
      +-JoinScan
        +-column_list=[TestExtraValueTable.value#1, KeyValue.Key#4, KeyValue.Value#5]
        +-left_scan=
        | +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0], alias="vt")
        +-right_scan=
          +-TableScan(column_list=KeyValue.[Key#4, Value#5], table=KeyValue, column_index_list=[0, 1], alias="kv")
==

# Describe a FULL JOIN USING, which has a special column setup.
FROM KeyValue kv1 FULL JOIN KeyValue kv2 USING (key)
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-$full_join.key#5 AS key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Value#4 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, KeyValue.Key#3, KeyValue.Value#4, $full_join.key#5]
    +-describe_text=
    |   """
    |   NameList:
    |     key INT64 $full_join.key#5
    |     Value STRING KeyValue.Value#2
    |     Value STRING KeyValue.Value#4
    |   NameScope:
    |     Names:
    |       Value -> ambiguous
    |       key -> INT64 ($full_join.key#5)
    |     Range variables:
    |       kv1 -> RANGE_VARIABLE<Key,Value>
    |       kv2 -> RANGE_VARIABLE<Key,Value>
    |   """
    +-input_scan=
      +-ProjectScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, KeyValue.Key#3, KeyValue.Value#4, $full_join.key#5]
        +-expr_list=
        | +-key#5 :=
        |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#3)
        +-input_scan=
          +-JoinScan
            +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
            +-join_type=FULL
            +-left_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
            +-right_scan=
            | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="kv2")
            +-join_expr=
            | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |   +-ColumnRef(type=INT64, column=KeyValue.Key#3)
            +-has_using=TRUE
==

# Running after a standard query.
select * from KeyValue
where key = 10
order by key
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-is_ordered=TRUE
    +-describe_text=
    |   """
    |   NameList:
    |     Key INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |
    |   Result is ordered.
    |   """
    +-input_scan=
      +-OrderByScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-FilterScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-Literal(type=INT64, value=10)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# A case with an empty NameScope.
select 1, 2, 3
|> STATIC_DESCRIBE
|> AS abc
|> STATIC_DESCRIBE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
+-query=
  +-StaticDescribeScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-describe_text=
    |   """
    |   NameList:
    |     <unnamed> INT64 $query.$col1#1
    |     <unnamed> INT64 $query.$col2#2
    |     <unnamed> INT64 $query.$col3#3
    |   NameScope:
    |     Range variables:
    |       abc -> RANGE_VARIABLE<$col1,$col2,$col3>
    |   """
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=$query.[$col1#1, $col2#2, $col3#3]
        +-describe_text=
        |   """
        |   NameList:
        |     <unnamed> INT64 $query.$col1#1
        |     <unnamed> INT64 $query.$col2#2
        |     <unnamed> INT64 $query.$col3#3
        |   NameScope:
        |   """
        +-input_scan=
          +-ProjectScan
            +-column_list=$query.[$col1#1, $col2#2, $col3#3]
            +-expr_list=
            | +-$col1#1 := Literal(type=INT64, value=1)
            | +-$col2#2 := Literal(type=INT64, value=2)
            | +-$col3#3 := Literal(type=INT64, value=3)
            +-input_scan=
              +-SingleRowScan
==

# A case with a nested scope.
# The outer scopes aren't part of a table's NameList, so
# they won't show up here.
from KeyValue
|> select (select key |> STATIC_DESCRIBE
           |> extend value
           |> extend (from KeyValue kv2 |> STATIC_DESCRIBE
                      |> select kv2) AS subq
           |> STATIC_DESCRIBE
           |> select as struct *)
--
QueryStmt
+-output_column_list=
| +-$pipe_select.$col1#11 AS `$col1` [STRUCT<key INT64, value STRING, subq STRUCT<Key INT64, Value STRING>>]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.$col1#11]
    +-expr_list=
    | +-$col1#11 :=
    |   +-SubqueryExpr
    |     +-type=STRUCT<key INT64, value STRING, subq STRUCT<Key INT64, Value STRING>>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     | +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$make_struct.$struct#10]
    |         +-expr_list=
    |         | +-$struct#10 :=
    |         |   +-MakeStruct
    |         |     +-type=STRUCT<key INT64, value STRING, subq STRUCT<Key INT64, Value STRING>>
    |         |     +-field_list=
    |         |       +-ColumnRef(type=INT64, column=$expr_subquery.key#3)
    |         |       +-ColumnRef(type=STRING, column=$pipe_extend.value#4)
    |         |       +-ColumnRef(type=STRUCT<Key INT64, Value STRING>, column=$pipe_extend.subq#9)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$expr_subquery.key#3, $pipe_extend.value#4, $pipe_extend.subq#9]
    |             +-input_scan=
    |               +-StaticDescribeScan
    |                 +-column_list=[$expr_subquery.key#3, $pipe_extend.value#4, $pipe_extend.subq#9]
    |                 +-describe_text=
    |                 |   """
    |                 |   NameList:
    |                 |     key INT64 $expr_subquery.key#3
    |                 |     value STRING $pipe_extend.value#4
    |                 |     subq STRUCT<Key INT64, Value STRING> $pipe_extend.subq#9
    |                 |   NameScope:
    |                 |     Names:
    |                 |       key -> INT64 ($expr_subquery.key#3)
    |                 |       subq -> STRUCT<Key INT64, Value STRING> ($pipe_extend.subq#9)
    |                 |       value -> STRING ($pipe_extend.value#4)
    |                 |   """
    |                 +-input_scan=
    |                   +-ProjectScan
    |                     +-column_list=[$expr_subquery.key#3, $pipe_extend.value#4, $pipe_extend.subq#9]
    |                     +-expr_list=
    |                     | +-subq#9 :=
    |                     |   +-SubqueryExpr
    |                     |     +-type=STRUCT<Key INT64, Value STRING>
    |                     |     +-subquery_type=SCALAR
    |                     |     +-subquery=
    |                     |       +-ProjectScan
    |                     |         +-column_list=[$pipe_select.kv2#8]
    |                     |         +-expr_list=
    |                     |         | +-kv2#8 :=
    |                     |         |   +-MakeStruct
    |                     |         |     +-type=STRUCT<Key INT64, Value STRING>
    |                     |         |     +-field_list=
    |                     |         |       +-ColumnRef(type=INT64, column=KeyValue.Key#5)
    |                     |         |       +-ColumnRef(type=STRING, column=KeyValue.Value#6)
    |                     |         +-input_scan=
    |                     |           +-StaticDescribeScan
    |                     |             +-column_list=KeyValue.[Key#5, Value#6]
    |                     |             +-describe_text=
    |                     |             |   """
    |                     |             |   NameList:
    |                     |             |     Key INT64 KeyValue.Key#5
    |                     |             |     Value STRING KeyValue.Value#6
    |                     |             |   NameScope:
    |                     |             |     Names:
    |                     |             |       Key -> INT64 (KeyValue.Key#5) (implicit)
    |                     |             |       Value -> STRING (KeyValue.Value#6) (implicit)
    |                     |             |     Range variables:
    |                     |             |       kv2 -> RANGE_VARIABLE<Key,Value>
    |                     |             |   """
    |                     |             +-input_scan=
    |                     |               +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1], alias="kv2")
    |                     +-input_scan=
    |                       +-ProjectScan
    |                         +-column_list=[$expr_subquery.key#3, $pipe_extend.value#4]
    |                         +-expr_list=
    |                         | +-value#4 := ColumnRef(type=STRING, column=KeyValue.Value#2, is_correlated=TRUE)
    |                         +-input_scan=
    |                           +-StaticDescribeScan
    |                             +-column_list=[$expr_subquery.key#3]
    |                             +-describe_text=
    |                             |   """
    |                             |   NameList:
    |                             |     key INT64 $expr_subquery.key#3
    |                             |   NameScope:
    |                             |     Names:
    |                             |       key -> INT64 ($expr_subquery.key#3)
    |                             |   """
    |                             +-input_scan=
    |                               +-ProjectScan
    |                                 +-column_list=[$expr_subquery.key#3]
    |                                 +-expr_list=
    |                                 | +-key#3 := ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |                                 +-input_scan=
    |                                   +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# TODO SQLBuilder currently loses the STATIC_DESCRIBE, since it can't
# generate pipe operators yet.
[show_sqlbuilder_output]
from KeyValue
|> static_describe
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-StaticDescribeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-describe_text=
    |   """
    |   NameList:
    |     Key INT64 KeyValue.Key#1
    |     Value STRING KeyValue.Value#2
    |   NameScope:
    |     Names:
    |       Key -> INT64 (KeyValue.Key#1) (implicit)
    |       Value -> STRING (KeyValue.Value#2) (implicit)
    |     Range variables:
    |       KeyValue -> RANGE_VARIABLE<Key,Value>
    |   """
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  keyvalue_3.a_1 AS Key,
  keyvalue_3.a_2 AS Value
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> SELECT
     keyvalue_3.a_1 AS Key,
     keyvalue_3.a_2 AS Value;
