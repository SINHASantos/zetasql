# Complex tests for MEASURE type. These tests are meant for corner case
# scenarios that stress the correctness of the rewriter, particularly with
# respect to measure column renames.
#
# TODO: b/350555383 - Java support requires the ability to serialize and
# deserialize the measure expression, which is currently stored as string in the
# ExpressionAttributesProto on columns. The Java serialization/deserialization
# code needs to be updated to be aware of this field.
[default no_java]
[default language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT]
[default enabled_ast_rewrites=DEFAULTS,+MEASURE_TYPE]
[default sql_builder_target_syntax_mode=standard]
[default show_sqlbuilder_output]

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable as (
  SELECT measure_sum_price FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_price)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
| +-$aggregate.$agg2#18 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#17, $agg2#18]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#17, $agg2#18]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#17, $agg2#18]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[WithTable.measure_sum_price#15], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=[WithTable.measure_sum_price#16], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#17 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)
              +-$agg2#18 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#16)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_2.a_1) AS a_4,
  AGG(withrefscan_3.a_1) AS a_5
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      WithTable AS withrefscan_2
  ) AS withrefscan_2
  CROSS JOIN
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      WithTable AS withrefscan_3
  ) AS withrefscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
| +-$aggregate.$agg2#18 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#17, $agg2#18]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#21]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#21]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#21 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#20)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#19)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#17, $agg2#18]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#17, $agg2#18]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#24)
            | +-$agg2#18 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#24, constituent_aggregate_1#27]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16, struct_for_measures_from_table_WithTable#22, struct_for_measures_from_table_WithTable#23]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, struct_for_measures_from_table_WithTable#22], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#16, struct_for_measures_from_table_WithTable#23], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#24 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#26 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#22)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#25 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#22)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#27 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
                      +-group_by_list=
                      | +-grain_lock_key#29 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#23)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#28 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#23)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_11.a_9 AS a_12,
  aggregatescan_11.a_10 AS a_13
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_7.a_5.referenced_columns.price)
        GROUP BY withrefscan_7.a_5.key_columns) AS a_9,
      SUM(ANY_VALUE(withrefscan_8.a_5.referenced_columns.price)
        GROUP BY withrefscan_8.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          WithTable AS withrefscan_7
      ) AS withrefscan_7
      CROSS JOIN
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          WithTable AS withrefscan_8
      ) AS withrefscan_8
  ) AS aggregatescan_11;
==

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable AS (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_quantity)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#19, $agg2#20]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_sum_price#17, measure_sum_quantity#18]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=WithTable.[measure_sum_price#17, measure_sum_quantity#18], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#19 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)
              +-$agg2#20 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_quantity#18)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  )
SELECT
  AGG(withrefscan_4.a_2) AS a_6,
  AGG(withrefscan_5.a_1) AS a_7
FROM
  (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      WithTable AS withrefscan_4
  ) AS withrefscan_4
  CROSS JOIN
  (
    SELECT
      withrefscan_5.a_2 AS a_2,
      withrefscan_5.a_1 AS a_1
    FROM
      WithTable AS withrefscan_5
  ) AS withrefscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#24]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#21, quantity#23, price#22, measure_sum_quantity#9, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#24]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#24 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64, quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#22)
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#23)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#21)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#21, quantity#23, price#22, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 2, 3, 8, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#19, $agg2#20]
            +-expr_list=
            | +-$agg1#19 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
            | +-$agg2#20 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#27, constituent_aggregate_1#30]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_sum_price#17, measure_sum_quantity#18, struct_for_measures_from_table_WithTable#25, struct_for_measures_from_table_WithTable#26]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_WithTable#25], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#17, measure_sum_quantity#18, struct_for_measures_from_table_WithTable#26], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#27 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#29 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#25)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#28 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#25)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#30 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#31)
                      +-group_by_list=
                      | +-grain_lock_key#32 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#26)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#31 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64, quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#26)
                              |   +-field_idx=0
                              +-field_idx=1
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_8.a_5 AS a_5,
      projectscan_8.a_4 AS a_4,
      projectscan_8.a_7 AS a_7
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_3, measuretable_singlekey_6.a_2), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4,
              MeasureTable_SingleKey.measure_sum_price AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
  )
SELECT
  aggregatescan_13.a_11 AS a_14,
  aggregatescan_13.a_12 AS a_15
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_9.a_7.referenced_columns.price)
        GROUP BY withrefscan_9.a_7.key_columns) AS a_11,
      SUM(ANY_VALUE(withrefscan_10.a_7.referenced_columns.quantity)
        GROUP BY withrefscan_10.a_7.key_columns) AS a_12
    FROM
      (
        SELECT
          withrefscan_9.a_5 AS a_5,
          withrefscan_9.a_4 AS a_4,
          withrefscan_9.a_7 AS a_7
        FROM
          WithTable AS withrefscan_9
      ) AS withrefscan_9
      CROSS JOIN
      (
        SELECT
          withrefscan_10.a_5 AS a_5,
          withrefscan_10.a_4 AS a_4,
          withrefscan_10.a_7 AS a_7
        FROM
          WithTable AS withrefscan_10
      ) AS withrefscan_10
  ) AS aggregatescan_13;
==

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable1 AS (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
), WithTable2 AS (
  SELECT measure_sum_price, measure_sum_quantity FROM WithTable1
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_quantity)
FROM WithTable2 AS T1, WithTable2 AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#21 AS `$col1` [INT64]
| +-$aggregate.$agg2#22 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#21, $agg2#22]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    | |     +-input_scan=
    | |       +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    | +-WithEntry
    |   +-with_query_name="WithTable2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16]
    |       +-input_scan=
    |         +-WithRefScan(column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="WithTable1")
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#21, $agg2#22]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#21, $agg2#22]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable2.[measure_sum_price#17, measure_sum_quantity#18, measure_sum_price#19, measure_sum_quantity#20]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=WithTable2.[measure_sum_price#17, measure_sum_quantity#18], with_query_name="WithTable2")
            |   +-right_scan=
            |     +-WithRefScan(column_list=WithTable2.[measure_sum_price#19, measure_sum_quantity#20], with_query_name="WithTable2")
            +-aggregate_list=
              +-$agg1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable2.measure_sum_price#17)
              +-$agg2#22 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable2.measure_sum_quantity#20)

[SQLBUILDER_OUTPUT]
WITH
  WithTable1 AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  ),
  WithTable2 AS (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      WithTable1 AS withrefscan_4
  )
SELECT
  AGG(withrefscan_5.a_2) AS a_7,
  AGG(withrefscan_6.a_1) AS a_8
FROM
  (
    SELECT
      withrefscan_5.a_2 AS a_2,
      withrefscan_5.a_1 AS a_1
    FROM
      WithTable2 AS withrefscan_5
  ) AS withrefscan_5
  CROSS JOIN
  (
    SELECT
      withrefscan_6.a_2 AS a_2,
      withrefscan_6.a_1 AS a_1
    FROM
      WithTable2 AS withrefscan_6
  ) AS withrefscan_6;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#21 AS `$col1` [INT64]
| +-$aggregate.$agg2#22 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#21, $agg2#22]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#26]
    | |     +-input_scan=
    | |       +-ProjectScan
    | |         +-column_list=MeasureTable_SingleKey.[key#23, quantity#25, price#24, measure_sum_quantity#9, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#26]
    | |         +-expr_list=
    | |         | +-struct_for_measures_from_table_MeasureTable_SingleKey#26 :=
    | |         |   +-MakeStruct
    | |         |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
    | |         |     +-field_list=
    | |         |       +-MakeStruct
    | |         |       | +-type=STRUCT<price INT64, quantity INT64>
    | |         |       | +-field_list=
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#24)
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#25)
    | |         |       +-MakeStruct
    | |         |         +-type=STRUCT<key INT64>
    | |         |         +-field_list=
    | |         |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#23)
    | |         +-input_scan=
    | |           +-TableScan(column_list=MeasureTable_SingleKey.[key#23, quantity#25, price#24, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 2, 3, 8, 9])
    | +-WithEntry
    |   +-with_query_name="WithTable2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_WithTable1#27]
    |       +-input_scan=
    |         +-WithRefScan(column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_WithTable1#27], with_query_name="WithTable1")
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#21, $agg2#22]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#21, $agg2#22]
            +-expr_list=
            | +-$agg1#21 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
            | +-$agg2#22 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#33)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#30, constituent_aggregate_1#33]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable2.[measure_sum_price#17, measure_sum_quantity#18, measure_sum_price#19, measure_sum_quantity#20, struct_for_measures_from_table_WithTable2#28, struct_for_measures_from_table_WithTable2#29]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable2.[measure_sum_price#17, measure_sum_quantity#18, struct_for_measures_from_table_WithTable2#28], with_query_name="WithTable2")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable2.[measure_sum_price#19, measure_sum_quantity#20, struct_for_measures_from_table_WithTable2#29], with_query_name="WithTable2")
                +-aggregate_list=
                  +-constituent_aggregate_1#30 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#31)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#32 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable2.struct_for_measures_from_table_WithTable2#28)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#31 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable2.struct_for_measures_from_table_WithTable2#28)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#33 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#34)
                      +-group_by_list=
                      | +-grain_lock_key#35 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable2.struct_for_measures_from_table_WithTable2#29)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#34 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64, quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable2.struct_for_measures_from_table_WithTable2#29)
                              |   +-field_idx=0
                              +-field_idx=1
[SQLBUILDER_OUTPUT]
WITH
  WithTable1 AS (
    SELECT
      projectscan_8.a_5 AS a_5,
      projectscan_8.a_4 AS a_4,
      projectscan_8.a_7 AS a_7
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_3, measuretable_singlekey_6.a_2), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4,
              MeasureTable_SingleKey.measure_sum_price AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
  ),
  WithTable2 AS (
    SELECT
      withrefscan_9.a_5 AS a_5,
      withrefscan_9.a_4 AS a_4,
      withrefscan_9.a_7 AS a_7
    FROM
      WithTable1 AS withrefscan_9
  )
SELECT
  aggregatescan_14.a_12 AS a_15,
  aggregatescan_14.a_13 AS a_16
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_10.a_7.referenced_columns.price)
        GROUP BY withrefscan_10.a_7.key_columns) AS a_12,
      SUM(ANY_VALUE(withrefscan_11.a_7.referenced_columns.quantity)
        GROUP BY withrefscan_11.a_7.key_columns) AS a_13
    FROM
      (
        SELECT
          withrefscan_10.a_5 AS a_5,
          withrefscan_10.a_4 AS a_4,
          withrefscan_10.a_7 AS a_7
        FROM
          WithTable2 AS withrefscan_10
      ) AS withrefscan_10
      CROSS JOIN
      (
        SELECT
          withrefscan_11.a_5 AS a_5,
          withrefscan_11.a_4 AS a_4,
          withrefscan_11.a_7 AS a_7
        FROM
          WithTable2 AS withrefscan_11
      ) AS withrefscan_11
  ) AS aggregatescan_14;
==

WITH WithTable1 AS (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
), WithTable2 AS (
  SELECT measure_sum_price, measure_sum_quantity FROM WithTable1
)
SELECT
  (
    SELECT
      AGG(renamed_measure)
    FROM (SELECT T2.measure_sum_price as renamed_measure)
  )
FROM WithTable2 AS T2;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#21]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    | |     +-input_scan=
    | |       +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    | +-WithEntry
    |   +-with_query_name="WithTable2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16]
    |       +-input_scan=
    |         +-WithRefScan(column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="WithTable1")
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#21]
        +-expr_list=
        | +-$col1#21 :=
        |   +-SubqueryExpr
        |     +-type=INT64
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=MEASURE<INT64>, column=WithTable2.measure_sum_price#17)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$aggregate.$agg1#20]
        |         +-input_scan=
        |           +-AggregateScan
        |             +-column_list=[$aggregate.$agg1#20]
        |             +-input_scan=
        |             | +-ProjectScan
        |             |   +-column_list=[$subquery1.renamed_measure#19]
        |             |   +-expr_list=
        |             |   | +-renamed_measure#19 := ColumnRef(type=MEASURE<INT64>, column=WithTable2.measure_sum_price#17, is_correlated=TRUE)
        |             |   +-input_scan=
        |             |     +-SingleRowScan
        |             +-aggregate_list=
        |               +-$agg1#20 :=
        |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
        |                   +-ColumnRef(type=MEASURE<INT64>, column=$subquery1.renamed_measure#19)
        +-input_scan=
          +-WithRefScan(column_list=WithTable2.[measure_sum_price#17, measure_sum_quantity#18], with_query_name="WithTable2")

[SQLBUILDER_OUTPUT]
WITH
  WithTable1 AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  ),
  WithTable2 AS (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      WithTable1 AS withrefscan_4
  )
SELECT
  (
    SELECT
      AGG(projectscan_8.a_7) AS a_9
    FROM
      (
        SELECT
          withrefscan_5.a_2 AS a_7
      ) AS projectscan_8
  ) AS a_6
FROM
  WithTable2 AS withrefscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#21 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#21]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#24]
    | |     +-input_scan=
    | |       +-ProjectScan
    | |         +-column_list=MeasureTable_SingleKey.[key#22, price#23, measure_sum_quantity#9, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#24]
    | |         +-expr_list=
    | |         | +-struct_for_measures_from_table_MeasureTable_SingleKey#24 :=
    | |         |   +-MakeStruct
    | |         |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    | |         |     +-field_list=
    | |         |       +-MakeStruct
    | |         |       | +-type=STRUCT<price INT64>
    | |         |       | +-field_list=
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#23)
    | |         |       +-MakeStruct
    | |         |         +-type=STRUCT<key INT64>
    | |         |         +-field_list=
    | |         |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#22)
    | |         +-input_scan=
    | |           +-TableScan(column_list=MeasureTable_SingleKey.[key#22, price#23, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 8, 9])
    | +-WithEntry
    |   +-with_query_name="WithTable2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_WithTable1#25]
    |       +-input_scan=
    |         +-WithRefScan(column_list=WithTable1.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_WithTable1#25], with_query_name="WithTable1")
    +-query=
      +-ProjectScan
        +-column_list=[$query.$col1#21]
        +-expr_list=
        | +-$col1#21 :=
        |   +-SubqueryExpr
        |     +-type=INT64
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=MEASURE<INT64>, column=WithTable2.measure_sum_price#17)
        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable2.struct_for_measures_from_table_WithTable2#26)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$aggregate.$agg1#20]
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$aggregate.$agg1#20]
        |             +-expr_list=
        |             | +-$agg1#20 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#28)
        |             +-input_scan=
        |               +-AggregateScan
        |                 +-column_list=[$aggregate.constituent_aggregate_1#28]
        |                 +-input_scan=
        |                 | +-ProjectScan
        |                 |   +-column_list=$subquery1.[renamed_measure#19, struct_for_measures_from_table_$subquery1#27]
        |                 |   +-expr_list=
        |                 |   | +-renamed_measure#19 := ColumnRef(type=MEASURE<INT64>, column=WithTable2.measure_sum_price#17, is_correlated=TRUE)
        |                 |   | +-struct_for_measures_from_table_$subquery1#27 := ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable2.struct_for_measures_from_table_WithTable2#26, is_correlated=TRUE)
        |                 |   +-input_scan=
        |                 |     +-SingleRowScan
        |                 +-aggregate_list=
        |                   +-constituent_aggregate_1#28 :=
        |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#29)
        |                       +-group_by_list=
        |                       | +-grain_lock_key#30 :=
        |                       |   +-GetStructField
        |                       |     +-type=STRUCT<key INT64>
        |                       |     +-expr=
        |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$subquery1.struct_for_measures_from_table_$subquery1#27)
        |                       |     +-field_idx=1
        |                       +-group_by_aggregate_list=
        |                         +-$any_value_grain_lock_0#29 :=
        |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |                             +-GetStructField
        |                               +-type=INT64
        |                               +-expr=
        |                               | +-GetStructField
        |                               |   +-type=STRUCT<price INT64>
        |                               |   +-expr=
        |                               |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$subquery1.struct_for_measures_from_table_$subquery1#27)
        |                               |   +-field_idx=0
        |                               +-field_idx=0
        +-input_scan=
          +-WithRefScan(column_list=WithTable2.[measure_sum_price#17, measure_sum_quantity#18, struct_for_measures_from_table_WithTable2#26], with_query_name="WithTable2")
[SQLBUILDER_OUTPUT]
WITH
  WithTable1 AS (
    SELECT
      projectscan_7.a_4 AS a_4,
      projectscan_7.a_3 AS a_3,
      projectscan_7.a_6 AS a_6
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_5.a_2), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_price AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
  ),
  WithTable2 AS (
    SELECT
      withrefscan_8.a_4 AS a_4,
      withrefscan_8.a_3 AS a_3,
      withrefscan_8.a_6 AS a_6
    FROM
      WithTable1 AS withrefscan_8
  )
SELECT
  (
    SELECT
      aggregatescan_15.a_14 AS a_16
    FROM
      (
        SELECT
          SUM(ANY_VALUE(projectscan_13.a_12.referenced_columns.price)
            GROUP BY projectscan_13.a_12.key_columns) AS a_14
        FROM
          (
            SELECT
              withrefscan_9.a_4 AS a_11,
              withrefscan_9.a_6 AS a_12
          ) AS projectscan_13
      ) AS aggregatescan_15
  ) AS a_10
FROM
  WithTable2 AS withrefscan_9;
