# This file has tests for named windows in pipe operators.
# The WINDOW clause is supported only on SELECT and EXTEND.
# This doesn't have exhaustive tests because the behavior and code is exactly
# the same as in normal SELECT queries.
# See analytic_function_named_window.test, where many of these tests came from.
[default language_features=MAXIMUM,+PIPES,+ANALYTIC_FUNCTIONS,+PIPE_NAMED_WINDOWS]
[language_features=NONE,+PIPES{{|,+ANALYTIC_FUNCTIONS}}{{|,+PIPE_NAMED_WINDOWS}}]
# Named window works in SELECT and EXTEND.
# Both ANALYTIC_FUNCTIONS and PIPE_NAMED_WINDOWS must be enabled.
FROM KeyValue
|> {{SELECT|EXTEND}} sum(key) OVER (w), count(*) OVER w AS c
   WINDOW w AS (PARTITION BY value)
--
ALTERNATION GROUPS:
    SELECT
    ,+ANALYTIC_FUNCTIONS,,SELECT
--
ERROR: Pipe SELECT does not support the WINDOW clause [at 5:4]
   WINDOW w AS (PARTITION BY value)
   ^
--
ALTERNATION GROUPS:
    EXTEND
    ,+ANALYTIC_FUNCTIONS,,EXTEND
--
ERROR: Pipe EXTEND does not support the WINDOW clause [at 5:4]
   WINDOW w AS (PARTITION BY value)
   ^
--
ALTERNATION GROUP: ,+PIPE_NAMED_WINDOWS,SELECT
--
ERROR: Analytic functions not supported [at 4:11]
|> SELECT sum(key) OVER (w), count(*) OVER w AS c
          ^
--
ALTERNATION GROUP: ,+PIPE_NAMED_WINDOWS,EXTEND
--
ERROR: Analytic functions not supported [at 4:11]
|> EXTEND sum(key) OVER (w), count(*) OVER w AS c
          ^
--
ALTERNATION GROUP: ,+ANALYTIC_FUNCTIONS,,+PIPE_NAMED_WINDOWS,SELECT
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#5 AS `$col1` [INT64]
| +-$analytic.c#6 AS c [INT64]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#5, c#6]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#5, $analytic.c#6]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-analytic_function_list=
              +-$analytic1#5 :=
              | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              |   +-window_frame=
              |     +-WindowFrame(frame_unit=ROWS)
              |       +-start_expr=
              |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
              |       +-end_expr=
              |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
              +-c#6 :=
                +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: ,+ANALYTIC_FUNCTIONS,,+PIPE_NAMED_WINDOWS,EXTEND
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$analytic.$analytic1#5 AS `$col1` [INT64]
| +-$analytic.c#6 AS c [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#5, $analytic.c#6]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-function_group_list=
      +-AnalyticFunctionGroup
        +-partition_by=
        | +-WindowPartitioning
        |   +-partition_by_list=
        |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-analytic_function_list=
          +-$analytic1#5 :=
          | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-window_frame=
          |     +-WindowFrame(frame_unit=ROWS)
          |       +-start_expr=
          |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
          |       +-end_expr=
          |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
          +-c#6 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Try to reference a named window, with or without PIPE_NAMED_WINDOWS.
# Try for all operators that accept window functions, even if they don't
# accept a WINDOW clause.
[language_features=NONE,+PIPES,+ANALYTIC_FUNCTIONS{{|,+PIPE_NAMED_WINDOWS}}]
FROM KeyValue
|> {{SELECT|EXTEND|WINDOW|WHERE|ORDER BY}} sum(key) OVER (w) > 0
--
ALTERNATION GROUP: SELECT
--
ERROR: Cannot reference a named window in pipe SELECT [at 2:26]
|> SELECT sum(key) OVER (w) > 0
                         ^
--
ALTERNATION GROUP: EXTEND
--
ERROR: Cannot reference a named window in pipe EXTEND [at 2:26]
|> EXTEND sum(key) OVER (w) > 0
                         ^
--
ALTERNATION GROUP: WINDOW
--
ERROR: Cannot reference a named window in pipe WINDOW [at 2:26]
|> WINDOW sum(key) OVER (w) > 0
                         ^
--
ALTERNATION GROUPS:
    WHERE
    ,+PIPE_NAMED_WINDOWS,WHERE
--
ERROR: Cannot reference a named window in pipe WHERE clause [at 2:25]
|> WHERE sum(key) OVER (w) > 0
                        ^
--
ALTERNATION GROUPS:
    ORDER BY
    ,+PIPE_NAMED_WINDOWS,ORDER BY
--
ERROR: Cannot reference a named window in pipe ORDER BY clause [at 2:28]
|> ORDER BY sum(key) OVER (w) > 0
                           ^
--
ALTERNATION GROUP: ,+PIPE_NAMED_WINDOWS,SELECT
--
ERROR: Unrecognized window alias w [at 2:26]
|> SELECT sum(key) OVER (w) > 0
                         ^
--
ALTERNATION GROUP: ,+PIPE_NAMED_WINDOWS,EXTEND
--
ERROR: Unrecognized window alias w [at 2:26]
|> EXTEND sum(key) OVER (w) > 0
                         ^
--
ALTERNATION GROUP: ,+PIPE_NAMED_WINDOWS,WINDOW
--
ERROR: Unrecognized window alias w [at 2:26]
|> WINDOW sum(key) OVER (w) > 0
                         ^
==

# Multiple windows.
FROM KeyValue
|> {{SELECT|EXTEND}} count(*) OVER w, count(*) OVER w2
   WINDOW w AS (PARTITION BY value),
          w2 AS ()
--
ALTERNATION GROUP: SELECT
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#5 AS `$col1` [INT64]
| +-$analytic.$analytic2#6 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#5, $analytic2#6]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Value#2, $analytic.$analytic1#5, $analytic.$analytic2#6]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        +-function_group_list=
          +-AnalyticFunctionGroup
          | +-partition_by=
          | | +-WindowPartitioning
          | |   +-partition_by_list=
          | |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
          | +-analytic_function_list=
          |   +-$analytic1#5 :=
          |     +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
          |       +-window_frame=
          |         +-WindowFrame(frame_unit=ROWS)
          |           +-start_expr=
          |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
          |           +-end_expr=
          |             +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic2#6 :=
                +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: EXTEND
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$analytic.$analytic1#5 AS `$col1` [INT64]
| +-$analytic.$analytic2#6 AS `$col2` [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#5, $analytic.$analytic2#6]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-function_group_list=
      +-AnalyticFunctionGroup
      | +-partition_by=
      | | +-WindowPartitioning
      | |   +-partition_by_list=
      | |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
      | +-analytic_function_list=
      |   +-$analytic1#5 :=
      |     +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
      |       +-window_frame=
      |         +-WindowFrame(frame_unit=ROWS)
      |           +-start_expr=
      |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
      |           +-end_expr=
      |             +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
      +-AnalyticFunctionGroup
        +-analytic_function_list=
          +-$analytic2#6 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Unused window.
# There's a bug and TODO carried over from
# analytic_function_named_window.test that unused named windows are ignored,
# even if they are invalid, and don't show up in the resolved AST.
FROM KeyValue
|> {{SELECT|EXTEND}} key+1
   WINDOW w AS (PARTITION BY invalid_value)
--
ALTERNATION GROUP: SELECT
--
QueryStmt
+-output_column_list=
| +-$pipe_select.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
--
ALTERNATION GROUP: EXTEND
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.$col1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.$col1#3]
    +-expr_list=
    | +-$col1#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# Partially unused named windows.
# Only the used one shows up.  Same bug as previous query.
FROM KeyValue
|> {{SELECT|EXTEND}} COUNT(*) OVER w2
   WINDOW w1 AS (PARTITION BY invalid_value),
          w2 AS (PARTITION BY value)
--
ALTERNATION GROUP: SELECT
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Value#2, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
--
ALTERNATION GROUP: EXTEND
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$analytic.$analytic1#4 AS `$col1` [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#4]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-function_group_list=
      +-AnalyticFunctionGroup
        +-partition_by=
        | +-WindowPartitioning
        |   +-partition_by_list=
        |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
        +-analytic_function_list=
          +-$analytic1#4 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# The named window is only visible inside that single operator, not after.
FROM KeyValue
|> {{SELECT|EXTEND}} SUM(key) OVER w
   WINDOW w AS (PARTITION BY value)
|> {{SELECT|EXTEND}}
    COUNT(*) OVER w
--
ERROR: Unrecognized window alias w [at 5:19]
    COUNT(*) OVER w
                  ^
==

# Stacked window definitions.
FROM KeyValue
|> SELECT afn_agg() OVER w3
   WINDOW w1 as (partition by value), w2 as (w1 order by key),
          w3 as (w2 rows between 2 preceding and unbounded following)
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
                      |   +-Literal(type=INT64, value=2)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# A window that's just an alias of another window.
FROM KeyValue
|> EXTEND COUNT(*) OVER w3
   WINDOW w1 AS (partition by key),
          w3 AS w1
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$analytic.$analytic1#4 AS `$col1` [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#4]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-function_group_list=
      +-AnalyticFunctionGroup
        +-partition_by=
        | +-WindowPartitioning
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-analytic_function_list=
          +-$analytic1#4 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

FROM KeyValue
|> EXTEND COUNT(*) OVER w3
   WINDOW w3 AS w1
--
ERROR: Unrecognized window alias w1 [at 3:17]
   WINDOW w3 AS w1
                ^
==

# An example error from illegal composing of named windows and call windows.
FROM KeyValue
|> {{SELECT|EXTEND}} afn_agg() over (w3 order by key)
   window w1 as (order by key), w2 as w1, w3 as w2
--
ALTERNATION GROUP: SELECT
--
ERROR: If a window inherits an ORDER BY from its referenced window, it cannot have an inline ORDER BY [at 2:30]
|> SELECT afn_agg() over (w3 order by key)
                             ^
--
ALTERNATION GROUP: EXTEND
--
ERROR: If a window inherits an ORDER BY from its referenced window, it cannot have an inline ORDER BY [at 2:30]
|> EXTEND afn_agg() over (w3 order by key)
                             ^
==

# Empty named window with modifiers in the call window.
FROM KeyValue
|> SELECT afn_agg() over w1,
          afn_agg() over (w1 rows 2 preceding),
          afn_agg() over (w1 order by key),
   WINDOW w1 AS ()
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#6 AS `$col1` [INT64]
| +-$analytic.$analytic2#7 AS `$col2` [INT64]
| +-$analytic.$analytic3#8 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$analytic.[$analytic1#6, $analytic2#7, $analytic3#8]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, $analytic.$analytic1#6, $analytic.$analytic2#7, $analytic.$analytic3#8]
        +-input_scan=
        | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        +-function_group_list=
          +-AnalyticFunctionGroup
          | +-analytic_function_list=
          |   +-$analytic1#6 :=
          |   | +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
          |   |   +-window_frame=
          |   |     +-WindowFrame(frame_unit=ROWS)
          |   |       +-start_expr=
          |   |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
          |   |       +-end_expr=
          |   |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
          |   +-$analytic2#7 :=
          |     +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
          |       +-window_frame=
          |         +-WindowFrame(frame_unit=ROWS)
          |           +-start_expr=
          |           | +-WindowFrameExpr(boundary_type=OFFSET PRECEDING)
          |           |   +-Literal(type=INT64, value=2)
          |           +-end_expr=
          |             +-WindowFrameExpr(boundary_type=CURRENT ROW)
          +-AnalyticFunctionGroup
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-analytic_function_list=
              +-$analytic3#8 :=
                +-AnalyticFunctionCall(sample_functions:afn_agg() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=RANGE)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=CURRENT ROW)
==

FROM KeyValue
|> {{SELECT|EXTEND}} 5
   WINDOW w AS (), w AS ()
--
ERROR: Duplicate window alias w [at 3:20]
   WINDOW w AS (), w AS ()
                   ^
==

FROM KeyValue
|> {{SELECT|EXTEND}} COUNT(*) OVER w
   WINDOW w AS (PARTITION BY bad_column)
--
ERROR: Unrecognized name: bad_column [at 3:30]
   WINDOW w AS (PARTITION BY bad_column)
                             ^
==

# Named windows don't work in pipe operators that don't support WINDOW clauses.
FROM KeyValue
|> {{WHERE|ORDER BY|WINDOW}} COUNT(*) OVER w
--
ALTERNATION GROUP: WHERE
--
ERROR: Cannot reference a named window in pipe WHERE clause [at 2:24]
|> WHERE COUNT(*) OVER w
                       ^
--
ALTERNATION GROUP: ORDER BY
--
ERROR: Cannot reference a named window in pipe ORDER BY clause [at 2:27]
|> ORDER BY COUNT(*) OVER w
                          ^
--
ALTERNATION GROUP: WINDOW
--
ERROR: Unrecognized window alias w [at 2:25]
|> WINDOW COUNT(*) OVER w
                        ^
