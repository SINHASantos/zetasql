[default enabled_ast_rewrites=DEFAULTS]
[default language_features=NONE,+PIPES]
FROM KeyValue
|> EXPORT DATA
--
ERROR: Pipe EXPORT DATA not supported [at 2:1]
|> EXPORT DATA
^
==

FROM KeyValue
|> EXPORT DATA OPTIONS ()
--
ERROR: Pipe EXPORT DATA not supported [at 2:1]
|> EXPORT DATA OPTIONS ()
^
==

# EXPORT_DATA is allowed only if both QUERY and GENERALIZED_QUERY
# statement kinds are enabled.
# TODO SQLBuilder doesn't work for pipe EXPORT DATA yet.
[default no_run_sqlbuilder]
[default language_features=NONE,+PIPES,+PIPE_EXPORT_DATA,+PIPE_FORK,+PIPE_TEE,+PIPE_IF,+WITH_ON_SUBQUERY,+WITH_RECURSIVE,+ENABLE_MEASURES]
[supported_statement_kinds={{QUERY|GENERALIZED_QUERY|QUERY,GENERALIZED_QUERY|INSERT}}]
FROM KeyValue
|> EXPORT DATA
--
ALTERNATION GROUP: QUERY
--
ERROR: Generalized query statements are not supported so pipe EXPORT DATA cannot be used [at 2:1]
|> EXPORT DATA
^
--
ALTERNATION GROUPS:
    GENERALIZED_QUERY
    INSERT
--
ERROR: Statement not supported: QueryStatement [at 1:1]
FROM KeyValue
^
--
ALTERNATION GROUP: QUERY,GENERALIZED_QUERY
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-output_column_list=
        | +-KeyValue.Key#1 AS Key [INT64]
        | +-KeyValue.Value#2 AS Value [STRING]
        +-query=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

FROM KeyValue
|> EXPORT DATA
|> WHERE true
--
ERROR: Additional pipe operators cannot follow the terminal pipe operator EXPORT DATA [at 3:1]
|> WHERE true
^
==

FROM KeyValue
|> EXPORT DATA OPTIONS (key=1, key2=2)
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-option_list=
        | +-key := Literal(type=INT64, value=1)
        | +-key2 := Literal(type=INT64, value=2)
        +-output_column_list=
        | +-KeyValue.Key#1 AS Key [INT64]
        | +-KeyValue.Value#2 AS Value [STRING]
        +-query=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])


[REWRITTEN AST]
ExportDataStmt
+-option_list=
| +-key := Literal(type=INT64, value=1)
| +-key2 := Literal(type=INT64, value=2)
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# EXPORT DATA of a value table, with `is_value_table`.
FROM TestExtraValueTable
|> EXPORT DATA
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-output_column_list=
        | +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
        +-is_value_table=TRUE
        +-query=
          +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
==

# EXPORT DATA or an ordered table.  The `input_scan` has `is_ordered`.
FROM KeyValue
|> ORDER BY key
|> EXTEND key*10 k10
|> EXPORT DATA
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-output_column_list=
        | +-KeyValue.Key#1 AS Key [INT64]
        | +-KeyValue.Value#2 AS Value [STRING]
        | +-$pipe_extend.k10#3 AS k10 [INT64]
        +-query=
          +-ProjectScan
            +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
            +-is_ordered=TRUE
            +-expr_list=
            | +-k10#3 :=
            |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
            |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     +-Literal(type=INT64, value=10)
            +-input_scan=
              +-OrderByScan
                +-column_list=KeyValue.[Key#1, Value#2]
                +-is_ordered=TRUE
                +-input_scan=
                | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
                +-order_by_item_list=
                  +-OrderByItem
                    +-column_ref=
                      +-ColumnRef(type=INT64, column=KeyValue.Key#1)


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.k10#3 AS k10 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
    +-is_ordered=TRUE
    +-expr_list=
    | +-k10#3 :=
    |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=10)
    +-input_scan=
      +-OrderByScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# Duplicate and anonymous columns are allowed.
SELECT 1 a, 2, 3 b, 4 a
|> EXPORT DATA
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-output_column_list=
        | +-$query.a#1 AS a [INT64]
        | +-$query.$col2#2 AS `$col2` [INT64]
        | +-$query.b#3 AS b [INT64]
        | +-$query.a#4 AS a [INT64]
        +-query=
          +-ProjectScan
            +-column_list=$query.[a#1, $col2#2, b#3, a#4]
            +-expr_list=
            | +-a#1 := Literal(type=INT64, value=1)
            | +-$col2#2 := Literal(type=INT64, value=2)
            | +-b#3 := Literal(type=INT64, value=3)
            | +-a#4 := Literal(type=INT64, value=4)
            +-input_scan=
              +-SingleRowScan


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-$query.a#1 AS a [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.b#3 AS b [INT64]
| +-$query.a#4 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[a#1, $col2#2, b#3, a#4]
    +-expr_list=
    | +-a#1 := Literal(type=INT64, value=1)
    | +-$col2#2 := Literal(type=INT64, value=2)
    | +-b#3 := Literal(type=INT64, value=3)
    | +-a#4 := Literal(type=INT64, value=4)
    +-input_scan=
      +-SingleRowScan
==

FROM KeyValue
|> DROP key
|> EXPORT DATA
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-output_column_list=
        | +-KeyValue.Value#2 AS Value [STRING]
        +-query=
          +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

FROM KeyValue
|> EXPORT DATA WITH CONNECTION connection1
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-connection=
        | +-Connection(connection=connection1)
        +-output_column_list=
        | +-KeyValue.Key#1 AS Key [INT64]
        | +-KeyValue.Value#2 AS Value [STRING]
        +-query=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])


[REWRITTEN AST]
ExportDataStmt
+-connection=
| +-Connection(connection=connection1)
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

FROM KeyValue
|> EXPORT DATA WITH CONNECTION connection1 OPTIONS(xxx=yyy)
--
GeneralizedQueryStmt
+-query=
  +-PipeExportDataScan
    +-export_data_stmt=
      +-ExportDataStmt
        +-connection=
        | +-Connection(connection=connection1)
        +-option_list=
        | +-xxx := Literal(type=STRING, value="yyy")
        +-output_column_list=
        | +-KeyValue.Key#1 AS Key [INT64]
        | +-KeyValue.Value#2 AS Value [STRING]
        +-query=
          +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])


[REWRITTEN AST]
ExportDataStmt
+-connection=
| +-Connection(connection=connection1)
+-option_list=
| +-xxx := Literal(type=STRING, value="yyy")
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

FROM KeyValue
|> EXPORT DATA WITH CONNECTION bad
--
ERROR: Connection not found: bad [at 2:32]
|> EXPORT DATA WITH CONNECTION bad
                               ^
==

# EXPORT DATA inside an IF.
FROM KeyValue
|> IF {{TestConstantTrue|TestConstantFalse}} THEN (
     |> EXTEND key*10 k10
     |> EXPORT DATA
   ) ELSE (
     |> DROP key
     |> EXPORT DATA
   )
--
ALTERNATION GROUP: TestConstantTrue
--
GeneralizedQueryStmt
+-query=
  +-PipeIfScan
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-selected_case=0
    +-if_case_list=
      +-PipeIfCase
      | +-condition=
      | | +-Constant(TestConstantTrue, type=BOOL, value=true)
      | +-subpipeline_sql="(\n     |> EXTEND key*10 k10\n     |> EXPORT DATA\n   )"
      | +-subpipeline=
      |   +-Subpipeline
      |     +-scan=
      |       +-PipeExportDataScan
      |         +-export_data_stmt=
      |           +-ExportDataStmt
      |             +-output_column_list=
      |             | +-KeyValue.Key#1 AS Key [INT64]
      |             | +-KeyValue.Value#2 AS Value [STRING]
      |             | +-$pipe_extend.k10#3 AS k10 [INT64]
      |             +-query=
      |               +-ProjectScan
      |                 +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
      |                 +-expr_list=
      |                 | +-k10#3 :=
      |                 |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
      |                 |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
      |                 |     +-Literal(type=INT64, value=10)
      |                 +-input_scan=
      |                   +-SubpipelineInputScan(column_list=KeyValue.[Key#1, Value#2])
      +-PipeIfCase(subpipeline_sql="(\n     |> DROP key\n     |> EXPORT DATA\n   )")


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.k10#3 AS k10 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
    +-expr_list=
    | +-k10#3 :=
    |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     +-Literal(type=INT64, value=10)
    +-input_scan=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
--
ALTERNATION GROUP: TestConstantFalse
--
GeneralizedQueryStmt
+-query=
  +-PipeIfScan
    +-input_scan=
    | +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
    +-selected_case=1
    +-if_case_list=
      +-PipeIfCase
      | +-condition=
      | | +-Constant(TestConstantFalse, type=BOOL, value=false)
      | +-subpipeline_sql="(\n     |> EXTEND key*10 k10\n     |> EXPORT DATA\n   )"
      +-PipeIfCase
        +-subpipeline_sql="(\n     |> DROP key\n     |> EXPORT DATA\n   )"
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-PipeExportDataScan
                +-export_data_stmt=
                  +-ExportDataStmt
                    +-output_column_list=
                    | +-KeyValue.Value#2 AS Value [STRING]
                    +-query=
                      +-SubpipelineInputScan(column_list=[KeyValue.Value#2])


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-TableScan(column_list=[KeyValue.Value#2], table=KeyValue, column_index_list=[1])
==

# EXPORT DATA inside FORK or TEE.
FROM KeyValue
|> {{FORK|TEE}} (
     |> EXTEND key*10 k10
     |> EXPORT DATA
   ), (
     |> SELECT AS VALUE value
     |> EXPORT DATA
   )
--
ALTERNATION GROUP: FORK
--
GeneralizedQueryStmt
+-query=
  +-PipeForkScan
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-subpipeline_list=
      +-GeneralizedQuerySubpipeline
      | +-subpipeline=
      |   +-Subpipeline
      |     +-scan=
      |       +-PipeExportDataScan
      |         +-export_data_stmt=
      |           +-ExportDataStmt
      |             +-output_column_list=
      |             | +-KeyValue.Key#1 AS Key [INT64]
      |             | +-KeyValue.Value#2 AS Value [STRING]
      |             | +-$pipe_extend.k10#3 AS k10 [INT64]
      |             +-query=
      |               +-ProjectScan
      |                 +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
      |                 +-expr_list=
      |                 | +-k10#3 :=
      |                 |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
      |                 |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
      |                 |     +-Literal(type=INT64, value=10)
      |                 +-input_scan=
      |                   +-SubpipelineInputScan(column_list=KeyValue.[Key#1, Value#2])
      +-GeneralizedQuerySubpipeline
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-PipeExportDataScan
                +-export_data_stmt=
                  +-ExportDataStmt
                    +-output_column_list=
                    | +-KeyValue.Value#2 AS `$value_column` [STRING]
                    +-is_value_table=TRUE
                    +-query=
                      +-ProjectScan
                        +-column_list=[KeyValue.Value#2]
                        +-input_scan=
                          +-SubpipelineInputScan(column_list=KeyValue.[Key#1, Value#2])


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$fork_cte_1"
  |     +-with_subquery=
  |       +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
  +-ExportDataStmt
  | +-output_column_list=
  | | +-KeyValue.Key#1 AS Key [INT64]
  | | +-KeyValue.Value#2 AS Value [STRING]
  | | +-$pipe_extend.k10#3 AS k10 [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
  |     +-expr_list=
  |     | +-k10#3 :=
  |     |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
  |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  |     |     +-Literal(type=INT64, value=10)
  |     +-input_scan=
  |       +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$fork_cte_1")
  +-ExportDataStmt
    +-output_column_list=
    | +-KeyValue.Value#2 AS `$value_column` [STRING]
    +-is_value_table=TRUE
    +-query=
      +-ProjectScan
        +-column_list=[KeyValue.Value#2]
        +-input_scan=
          +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$fork_cte_1")
--
ALTERNATION GROUP: TEE
--
GeneralizedQueryStmt
+-output_schema=
| +-OutputSchema
|   +-output_column_list=
|     +-KeyValue.Key#1 AS Key [INT64]
|     +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-PipeTeeScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-subpipeline_list=
      +-GeneralizedQuerySubpipeline
      | +-subpipeline=
      |   +-Subpipeline
      |     +-scan=
      |       +-PipeExportDataScan
      |         +-export_data_stmt=
      |           +-ExportDataStmt
      |             +-output_column_list=
      |             | +-KeyValue.Key#1 AS Key [INT64]
      |             | +-KeyValue.Value#2 AS Value [STRING]
      |             | +-$pipe_extend.k10#3 AS k10 [INT64]
      |             +-query=
      |               +-ProjectScan
      |                 +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
      |                 +-expr_list=
      |                 | +-k10#3 :=
      |                 |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
      |                 |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
      |                 |     +-Literal(type=INT64, value=10)
      |                 +-input_scan=
      |                   +-SubpipelineInputScan(column_list=KeyValue.[Key#1, Value#2])
      +-GeneralizedQuerySubpipeline
        +-subpipeline=
          +-Subpipeline
            +-scan=
              +-PipeExportDataScan
                +-export_data_stmt=
                  +-ExportDataStmt
                    +-output_column_list=
                    | +-KeyValue.Value#2 AS `$value_column` [STRING]
                    +-is_value_table=TRUE
                    +-query=
                      +-ProjectScan
                        +-column_list=[KeyValue.Value#2]
                        +-input_scan=
                          +-SubpipelineInputScan(column_list=KeyValue.[Key#1, Value#2])


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$tee_cte_1"
  |     +-with_subquery=
  |       +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
  +-ExportDataStmt
  | +-output_column_list=
  | | +-KeyValue.Key#1 AS Key [INT64]
  | | +-KeyValue.Value#2 AS Value [STRING]
  | | +-$pipe_extend.k10#3 AS k10 [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.k10#3]
  |     +-expr_list=
  |     | +-k10#3 :=
  |     |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
  |     |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
  |     |     +-Literal(type=INT64, value=10)
  |     +-input_scan=
  |       +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$tee_cte_1")
  +-ExportDataStmt
  | +-output_column_list=
  | | +-KeyValue.Value#2 AS `$value_column` [STRING]
  | +-is_value_table=TRUE
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[KeyValue.Value#2]
  |     +-input_scan=
  |       +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$tee_cte_1")
  +-QueryStmt
    +-output_column_list=
    | +-KeyValue.Key#1 AS Key [INT64]
    | +-KeyValue.Value#2 AS Value [STRING]
    +-query=
      +-WithRefScan(column_list=KeyValue.[Key#1, Value#2], with_query_name="$tee_cte_1")
==

FROM KeyValue, (select 5 |> EXPORT DATA)
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 1:26]
FROM KeyValue, (select 5 |> EXPORT DATA)
                         ^
==

SELECT (FROM KeyValue |> EXPORT DATA)
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 1:23]
SELECT (FROM KeyValue |> EXPORT DATA)
                      ^
==

WITH cte AS (FROM KeyValue |> EXPORT DATA)
FROM cte
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 1:28]
WITH cte AS (FROM KeyValue |> EXPORT DATA)
                           ^
==

# Note the rewrite for this.  It has to move the WithScan inside
# the ExportDataStmt's input_scan.
WITH cte AS (FROM KeyValue)
FROM cte
|> EXPORT DATA
--
GeneralizedQueryStmt
+-query=
  +-WithScan
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="cte"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-PipeExportDataScan
        +-export_data_stmt=
          +-ExportDataStmt
            +-output_column_list=
            | +-cte.Key#3 AS Key [INT64]
            | +-cte.Value#4 AS Value [STRING]
            +-query=
              +-WithRefScan(column_list=cte.[Key#3, Value#4], with_query_name="cte")


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-cte.Key#3 AS Key [INT64]
| +-cte.Value#4 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=cte.[Key#3, Value#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="cte"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-WithRefScan(column_list=cte.[Key#3, Value#4], with_query_name="cte")
==

# Chained WITH doesn't allow EXPORT DATA.
WITH cte1 AS (FROM KeyValue)
(
WITH cte2 AS (FROM cte1)
FROM cte1 JOIN cte2 USING (key)
|> EXPORT DATA
)
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 5:1]
|> EXPORT DATA
^
==

# Chained WITH does not allow EXPORT DATA.
WITH cte1 AS (FROM KeyValue)
(
WITH cte2 AS (FROM cte1)
FROM cte1 JOIN cte2 USING (key)
|> EXPORT DATA
)
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 5:1]
|> EXPORT DATA
^
==

# EXPORT DATA after WITH RECURSIVE.
# The WithScan gets rewritten inside the ExportDataStmt.
with recursive t as (
  select 1
  union all
  select * from t
)
from t
|> export data;
--
GeneralizedQueryStmt
+-query=
  +-WithScan
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-RecursiveScan
    |       +-column_list=[$union_all.$col1#2]
    |       +-op_type=UNION_ALL
    |       +-non_recursive_term=
    |       | +-SetOperationItem
    |       |   +-scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$union_all1.$col1#1]
    |       |   |   +-expr_list=
    |       |   |   | +-$col1#1 := Literal(type=INT64, value=1)
    |       |   |   +-input_scan=
    |       |   |     +-SingleRowScan
    |       |   +-output_column_list=[$union_all1.$col1#1]
    |       +-recursive_term=
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[t.$col1#3]
    |           |   +-input_scan=
    |           |     +-RecursiveRefScan(column_list=[t.$col1#3])
    |           +-output_column_list=[t.$col1#3]
    +-query=
    | +-PipeExportDataScan
    |   +-export_data_stmt=
    |     +-ExportDataStmt
    |       +-output_column_list=
    |       | +-t.$col1#4 AS `$col1` [INT64]
    |       +-query=
    |         +-WithRefScan(column_list=[t.$col1#4], with_query_name="t")
    +-recursive=TRUE


[REWRITTEN AST]
ExportDataStmt
+-output_column_list=
| +-t.$col1#4 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[t.$col1#4]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-RecursiveScan
    |       +-column_list=[$union_all.$col1#2]
    |       +-op_type=UNION_ALL
    |       +-non_recursive_term=
    |       | +-SetOperationItem
    |       |   +-scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$union_all1.$col1#1]
    |       |   |   +-expr_list=
    |       |   |   | +-$col1#1 := Literal(type=INT64, value=1)
    |       |   |   +-input_scan=
    |       |   |     +-SingleRowScan
    |       |   +-output_column_list=[$union_all1.$col1#1]
    |       +-recursive_term=
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[t.$col1#3]
    |           |   +-input_scan=
    |           |     +-RecursiveRefScan(column_list=[t.$col1#3])
    |           +-output_column_list=[t.$col1#3]
    +-query=
    | +-WithRefScan(column_list=[t.$col1#4], with_query_name="t")
    +-recursive=TRUE
==

CREATE VIEW v AS
FROM KeyValue
|> EXPORT DATA
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 3:1]
|> EXPORT DATA
^
==

EXPORT DATA AS
FROM KeyValue
|> EXPORT DATA
--
ERROR: EXPORT DATA is only allowed as part of the outermost query in a statement [at 3:1]
|> EXPORT DATA
^
==

# Pipe EXPORT DATA inside a query inside an EXPLAIN.
# The statement gets rewritten inside the EXPLAIN.
EXPLAIN
FROM KeyValue
|> EXPORT DATA
--
ExplainStmt
+-statement=
  +-GeneralizedQueryStmt
    +-query=
      +-PipeExportDataScan
        +-export_data_stmt=
          +-ExportDataStmt
            +-output_column_list=
            | +-KeyValue.Key#1 AS Key [INT64]
            | +-KeyValue.Value#2 AS Value [STRING]
            +-query=
              +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])


[REWRITTEN AST]
ExplainStmt
+-statement=
  +-ExportDataStmt
    +-output_column_list=
    | +-KeyValue.Key#1 AS Key [INT64]
    | +-KeyValue.Value#2 AS Value [STRING]
    +-query=
      +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
==

# TODO Measures don't work in java yet.
[no_java]
FROM MeasureTable_SingleKey
|> SELECT key, measure_count_star
|> EXPORT DATA
--
ERROR: Returning expressions of type MEASURE is not allowed [at 3:4]
|> EXPORT DATA
   ^
