[default language_features=MAXIMUM]
[language_features=NONE,{{|+PIPES|+PIPE_WITH}}]
SELECT 1
|> WITH t AS (SELECT 5)
--
ALTERNATION GROUPS:
    <empty>
    +PIPE_WITH
--
ERROR: Pipe query syntax not supported [at 2:1]
|> WITH t AS (SELECT 5)
^
--
ALTERNATION GROUP: +PIPES
--
ERROR: Pipe WITH not supported [at 2:1]
|> WITH t AS (SELECT 5)
^
==

[language_features=NONE,+PIPES,+PIPE_WITH]
SELECT 1
|> WITH t AS (FROM KeyValue)
|> CROSS JOIN t
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-t.Key#4 AS Key [INT64]
| +-t.Value#5 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#1, t.Key#4, t.Value#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-JoinScan
        +-column_list=[$query.$col1#1, t.Key#4, t.Value#5]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$query.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-right_scan=
          +-WithRefScan(column_list=t.[Key#4, Value#5], with_query_name="t")
==

# Pipe WITH can be used in a subquery without setting
# WITH_ON_SUBQUERY.
[language_features=NONE,+PIPES{{|,+PIPE_WITH}}]
FROM (
  SELECT 1
  |> WITH t AS (FROM KeyValue)
  |> CROSS JOIN t
)
--
ALTERNATION GROUP: <empty>
--
ERROR: Pipe WITH not supported [at 3:3]
  |> WITH t AS (FROM KeyValue)
  ^
--
ALTERNATION GROUP: ,+PIPE_WITH
--
QueryStmt
+-output_column_list=
| +-$subquery1.$col1#1 AS `$col1` [INT64]
| +-t.Key#4 AS Key [INT64]
| +-t.Value#5 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[$subquery1.$col1#1, t.Key#4, t.Value#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-JoinScan
        +-column_list=[$subquery1.$col1#1, t.Key#4, t.Value#5]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-right_scan=
          +-WithRefScan(column_list=t.[Key#4, Value#5], with_query_name="t")
==

[default language_features=MAXIMUM,+PIPES,+PIPE_WITH,+PIPE_IF,+WITH_ON_SUBQUERY,+WITH_RECURSIVE,+WITH_RECURSIVE_DEPTH_MODIFIER]
SELECT 1 x
|> WITH t AS (SELECT 2 x, 3 y)
|> JOIN t USING (x)
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-t.y#5 AS y [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.x#1, t.x#4, t.y#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t.[x#2, y#3]
    |       +-expr_list=
    |       | +-x#2 := Literal(type=INT64, value=2)
    |       | +-y#3 := Literal(type=INT64, value=3)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-JoinScan
        +-column_list=[$query.x#1, t.x#4, t.y#5]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$query.x#1]
        |   +-expr_list=
        |   | +-x#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-right_scan=
        | +-WithRefScan(column_list=t.[x#4, y#5], with_query_name="t")
        +-join_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$query.x#1)
        |   +-ColumnRef(type=INT64, column=t.x#4)
        +-has_using=TRUE
==

# An unused WITH at the end of the pipeline.
# The WithScan is still added.
FROM KeyValue
|> WHERE true
|> WITH t AS (FROM TestExtraValueTable)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[TestExtraValueTable.value#3]
    |       +-input_scan=
    |         +-TableScan(column_list=[TestExtraValueTable.value#3], table=TestExtraValueTable, column_index_list=[0])
    +-query=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-filter_expr=
          +-Literal(type=BOOL, value=true)
==

# Chained WITHs building on each other, within and across WITHs.
select 1
|> WITH t1 AS (FROM KeyValue),
        t2 AS (FROM t1)
|> WITH t3 AS (FROM t2)
|> CROSS JOIN t3
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-t3.Key#8 AS Key [INT64]
| +-t3.Value#9 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#1, t3.Key#8, t3.Value#9]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-WithRefScan(column_list=t1.[Key#4, Value#5], with_query_name="t1")
    +-query=
      +-WithScan
        +-column_list=[$query.$col1#1, t3.Key#8, t3.Value#9]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="t3"
        |   +-with_subquery=
        |     +-WithRefScan(column_list=t2.[Key#6, Value#7], with_query_name="t2")
        +-query=
          +-JoinScan
            +-column_list=[$query.$col1#1, t3.Key#8, t3.Value#9]
            +-left_scan=
            | +-ProjectScan
            |   +-column_list=[$query.$col1#1]
            |   +-expr_list=
            |   | +-$col1#1 := Literal(type=INT64, value=1)
            |   +-input_scan=
            |     +-SingleRowScan
            +-right_scan=
              +-WithRefScan(column_list=t3.[Key#8, Value#9], with_query_name="t3")
==

# Multiple entries written out of order, allowed only if RECURSIVE is present.
select 1
|> WITH{{| RECURSIVE}}
     t2 AS (FROM t1),
     t1 AS (FROM KeyValue)
|> CROSS JOIN t2
--
ALTERNATION GROUP: <empty>
--
ERROR: Table not found: t1 [at 3:18]
     t2 AS (FROM t1),
                 ^
--
ALTERNATION GROUP:  RECURSIVE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-t2.Key#6 AS Key [INT64]
| +-t2.Value#7 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#1, t2.Key#6, t2.Value#7]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-WithRefScan(column_list=t1.[Key#4, Value#5], with_query_name="t1")
    +-query=
    | +-JoinScan
    |   +-column_list=[$query.$col1#1, t2.Key#6, t2.Value#7]
    |   +-left_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.$col1#1]
    |   |   +-expr_list=
    |   |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-right_scan=
    |     +-WithRefScan(column_list=t2.[Key#6, Value#7], with_query_name="t2")
    +-recursive=TRUE
==

# Attempting to do a cycle with WITH RECURSIVE.
select 1
|> WITH RECURSIVE
      t1 AS (FROM t2),
      t2 AS (FROM t1)
|> CROSS JOIN t2
--
ERROR: Unsupported WITH entry dependency cycle: t2 => t1 => t2 [at 2:4]
|> WITH RECURSIVE
   ^
==

# Both standard and pipe WITH CTEs defined in a subquery go out of
# scope when the subquery ends.
FROM
  (
    WITH t1 AS (select 1 x)
    FROM t1 AS tt1
    |> WITH t2 AS (SELECT 2 x, 3 y)
    |> JOIN t2 AS tt2 USING (x)
  )
|> JOIN {{t1|t2}} USING (x)
--
ALTERNATION GROUP: t1
--
ERROR: Table not found: t1 [at 8:9]
|> JOIN t1 USING (x)
        ^
--
ALTERNATION GROUP: t2
--
ERROR: Table not found: t2 [at 8:9]
|> JOIN t2 USING (x)
        ^
==

# Duplicate names (case insensitive) not allowed in the same pipe WITH.
SELECT 1
|> WITH t1 AS (select 1),
        tT2 AS (select 2),
        t3 AS (select 3),
        Tt2 AS (select 4),
        t5 AS (select 5)
--
ERROR: Duplicate alias Tt2 for WITH subquery [at 5:9]
        Tt2 AS (select 4),
        ^
==

# Pipe WITH can redefine a CTE name from the same scope, hiding its
# old definition.  The definition can reference the previous CTE
# with that name.
WITH tt AS (SELECT 1 x)
SELECT null
|> CROSS JOIN tt tt1
|> WITH tt AS (FROM tt |> EXTEND x+1 AS x1)
|> CROSS JOIN tt tt2
|> WITH tt AS (FROM tt |> EXTEND x1+1 AS x2)
|> CROSS JOIN tt tt3
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INT64]
| +-tt.x#3 AS x [INT64]
| +-tt_1.x#6 AS x [INT64]
| +-tt_1.x1#7 AS x1 [INT64]
| +-tt_2.x#11 AS x [INT64]
| +-tt_2.x1#12 AS x1 [INT64]
| +-tt_2.x2#13 AS x2 [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#2, tt.x#3, tt_1.x#6, tt_1.x1#7, tt_2.x#11, tt_2.x1#12, tt_2.x2#13]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="tt"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[tt.x#1]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-WithScan
        +-column_list=[$query.$col1#2, tt.x#3, tt_1.x#6, tt_1.x1#7, tt_2.x#11, tt_2.x1#12, tt_2.x2#13]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="tt_1"
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=[tt.x#4, $pipe_extend.x1#5]
        |       +-expr_list=
        |       | +-x1#5 :=
        |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       |     +-ColumnRef(type=INT64, column=tt.x#4)
        |       |     +-Literal(type=INT64, value=1)
        |       +-input_scan=
        |         +-WithRefScan(column_list=[tt.x#4], with_query_name="tt")
        +-query=
          +-WithScan
            +-column_list=[$query.$col1#2, tt.x#3, tt_1.x#6, tt_1.x1#7, tt_2.x#11, tt_2.x1#12, tt_2.x2#13]
            +-with_entry_list=
            | +-WithEntry
            |   +-with_query_name="tt_2"
            |   +-with_subquery=
            |     +-ProjectScan
            |       +-column_list=[tt_1.x#8, tt_1.x1#9, $pipe_extend.x2#10]
            |       +-expr_list=
            |       | +-x2#10 :=
            |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |       |     +-ColumnRef(type=INT64, column=tt_1.x1#9)
            |       |     +-Literal(type=INT64, value=1)
            |       +-input_scan=
            |         +-WithRefScan(column_list=tt_1.[x#8, x1#9], with_query_name="tt_1")
            +-query=
              +-JoinScan
                +-column_list=[$query.$col1#2, tt.x#3, tt_1.x#6, tt_1.x1#7, tt_2.x#11, tt_2.x1#12, tt_2.x2#13]
                +-left_scan=
                | +-JoinScan
                |   +-column_list=[$query.$col1#2, tt.x#3, tt_1.x#6, tt_1.x1#7]
                |   +-left_scan=
                |   | +-JoinScan
                |   |   +-column_list=[$query.$col1#2, tt.x#3]
                |   |   +-left_scan=
                |   |   | +-ProjectScan
                |   |   |   +-column_list=[$query.$col1#2]
                |   |   |   +-expr_list=
                |   |   |   | +-$col1#2 := Literal(type=INT64, value=NULL)
                |   |   |   +-input_scan=
                |   |   |     +-SingleRowScan
                |   |   +-right_scan=
                |   |     +-WithRefScan(column_list=[tt.x#3], with_query_name="tt")
                |   +-right_scan=
                |     +-WithRefScan(column_list=tt_1.[x#6, x1#7], with_query_name="tt_1")
                +-right_scan=
                  +-WithRefScan(column_list=tt_2.[x#11, x1#12, x2#13], with_query_name="tt_2")
==

# Pipe WITH inside a subquery can define a CTE that hides a CTE
# from an outer scope.  After the subquery, the outer CTE is
# visible again.
WITH tt AS (SELECT 1 x)
FROM (
  FROM tt tt1
  |> WITH tt AS (select 5 y)
  |> JOIN tt tt2 ON x=y
)
|> JOIN tt tt3 USING (x)
--
QueryStmt
+-output_column_list=
| +-tt.x#2 AS x [INT64]
| +-tt_1.y#4 AS y [INT64]
+-query=
  +-WithScan
    +-column_list=[tt.x#2, tt_1.y#4, tt.x#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="tt"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[tt.x#1]
    |       +-expr_list=
    |       | +-x#1 := Literal(type=INT64, value=1)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-JoinScan
        +-column_list=[tt.x#2, tt_1.y#4, tt.x#5]
        +-left_scan=
        | +-WithScan
        |   +-column_list=[tt.x#2, tt_1.y#4]
        |   +-with_entry_list=
        |   | +-WithEntry
        |   |   +-with_query_name="tt_1"
        |   |   +-with_subquery=
        |   |     +-ProjectScan
        |   |       +-column_list=[tt.y#3]
        |   |       +-expr_list=
        |   |       | +-y#3 := Literal(type=INT64, value=5)
        |   |       +-input_scan=
        |   |         +-SingleRowScan
        |   +-query=
        |     +-JoinScan
        |       +-column_list=[tt.x#2, tt_1.y#4]
        |       +-left_scan=
        |       | +-WithRefScan(column_list=[tt.x#2], with_query_name="tt")
        |       +-right_scan=
        |       | +-WithRefScan(column_list=[tt_1.y#4], with_query_name="tt_1")
        |       +-join_expr=
        |         +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |           +-ColumnRef(type=INT64, column=tt.x#2)
        |           +-ColumnRef(type=INT64, column=tt_1.y#4)
        +-right_scan=
        | +-WithRefScan(column_list=[tt.x#5], with_query_name="tt")
        +-join_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=tt.x#2)
        |   +-ColumnRef(type=INT64, column=tt.x#5)
        +-has_using=TRUE
==

# Pipe WITH inside a subpipeline in IF.
# The CTE from outside the IF is visible inside the subpipeline.
# No literal replacement because it doesn't work for IF conditions.
[no_enable_literal_replacement]
SELECT 1
|> WITH kv AS (FROM KeyValue)
|> IF true THEN (
    |> CROSS JOIN kv
    |> WITH t2 AS (FROM TwoIntegers)
    |> JOIN t2 USING (key)
  )
--
QueryStmt
+-output_column_list=
| +-kv.Key#4 AS key [INT64]
| +-$query.$col1#1 AS `$col1` [INT64]
| +-kv.Value#5 AS Value [STRING]
| +-t2.value#9 AS value [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5, t2.key#8, t2.value#9]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="kv"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-PipeIfScan
        +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5, t2.key#8, t2.value#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$query.$col1#1]
        |   +-expr_list=
        |   | +-$col1#1 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-SingleRowScan
        +-selected_case=0
        +-if_case_list=
          +-PipeIfCase
            +-condition=
            | +-Literal(type=BOOL, value=true)
            +-subpipeline_sql="(\n    |> CROSS JOIN kv\n    |> WITH t2 AS (FROM TwoIntegers)\n    |> JOIN t2 USING (key)\n  )"
            +-subpipeline=
              +-Subpipeline
                +-scan=
                  +-WithScan
                    +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5, t2.key#8, t2.value#9]
                    +-with_entry_list=
                    | +-WithEntry
                    |   +-with_query_name="t2"
                    |   +-with_subquery=
                    |     +-TableScan(column_list=TwoIntegers.[key#6, value#7], table=TwoIntegers, column_index_list=[0, 1])
                    +-query=
                      +-JoinScan
                        +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5, t2.key#8, t2.value#9]
                        +-left_scan=
                        | +-JoinScan
                        |   +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5]
                        |   +-left_scan=
                        |   | +-SubpipelineInputScan(column_list=[$query.$col1#1])
                        |   +-right_scan=
                        |     +-WithRefScan(column_list=kv.[Key#4, Value#5], with_query_name="kv")
                        +-right_scan=
                        | +-WithRefScan(column_list=t2.[key#8, value#9], with_query_name="t2")
                        +-join_expr=
                        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                        |   +-ColumnRef(type=INT64, column=kv.Key#4)
                        |   +-ColumnRef(type=INT64, column=t2.key#8)
                        +-has_using=TRUE
==

# WITH inside an IF subpipeline doesn't escape it.
# No literal replacement because it doesn't work for IF conditions.
[no_enable_literal_replacement]
SELECT 1
|> IF true THEN (
     |> WITH kv AS (FROM KeyValue)
     |> extend 2
    )
|> CROSS JOIN kv
--
ERROR: Table not found: kv [at 6:15]
|> CROSS JOIN kv
              ^
==

# WITH in a subquery doesn't escape it.
SELECT 1
|> EXTEND (FROM KeyValue
           |> WITH t2 AS (FROM TwoIntegers)
           |> SELECT key)
|> CROSS JOIN t2
--
ERROR: Table not found: t2 [at 5:15]
|> CROSS JOIN t2
              ^
==

# Pipe WITH CTE is visible inside a later subquery, for both
# expression and table subqueries.
SELECT 1 key
|> WITH kv AS (FROM KeyValue)
|> EXTEND (FROM kv |> AGGREGATE COUNT(*))
|> JOIN (FROM kv) USING (key)
--
QueryStmt
+-output_column_list=
| +-$query.key#1 AS key [INT64]
| +-$pipe_extend.$col1#7 AS `$col1` [INT64]
| +-kv.Value#9 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[$query.key#1, $pipe_extend.$col1#7, kv.Key#8, kv.Value#9]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="kv"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    +-query=
      +-JoinScan
        +-column_list=[$query.key#1, $pipe_extend.$col1#7, kv.Key#8, kv.Value#9]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$query.key#1, $pipe_extend.$col1#7]
        |   +-expr_list=
        |   | +-$col1#7 :=
        |   |   +-SubqueryExpr
        |   |     +-type=INT64
        |   |     +-subquery_type=SCALAR
        |   |     +-subquery=
        |   |       +-AggregateScan
        |   |         +-column_list=[$aggregate.$agg1#6]
        |   |         +-input_scan=
        |   |         | +-WithRefScan(column_list=kv.[Key#4, Value#5], with_query_name="kv")
        |   |         +-aggregate_list=
        |   |           +-$agg1#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[$query.key#1]
        |       +-expr_list=
        |       | +-key#1 := Literal(type=INT64, value=1)
        |       +-input_scan=
        |         +-SingleRowScan
        +-right_scan=
        | +-WithRefScan(column_list=kv.[Key#8, Value#9], with_query_name="kv")
        +-join_expr=
        | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   +-ColumnRef(type=INT64, column=$query.key#1)
        |   +-ColumnRef(type=INT64, column=kv.Key#8)
        +-has_using=TRUE
==

# No-op RECURSIVE modifier.
SELECT 1
|> WITH RECURSIVE kv AS (FROM KeyValue)
|> CROSS JOIN kv
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-kv.Key#4 AS Key [INT64]
| +-kv.Value#5 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="kv"
    |   +-with_subquery=
    |     +-TableScan(column_list=KeyValue.[Key#2, Value#3], table=KeyValue, column_index_list=[0, 1])
    +-query=
    | +-JoinScan
    |   +-column_list=[$query.$col1#1, kv.Key#4, kv.Value#5]
    |   +-left_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.$col1#1]
    |   |   +-expr_list=
    |   |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-right_scan=
    |     +-WithRefScan(column_list=kv.[Key#4, Value#5], with_query_name="kv")
    +-recursive=TRUE
==

# RECURSIVE query, which requires the WITH_RECURSIVE feature too.
[language_features=NONE,+PIPES{{|,+PIPE_WITH}}{{|,+WITH_RECURSIVE}}]
select 1
|> WITH RECURSIVE
      t1 AS (SELECT 1 AS n UNION ALL SELECT n + 1 FROM t1 WHERE n < 20)
|> CROSS JOIN t1
--
ALTERNATION GROUPS:
    <empty>
    ,+WITH_RECURSIVE
--
ERROR: Pipe WITH not supported [at 2:1]
|> WITH RECURSIVE
^
--
ALTERNATION GROUP: ,+PIPE_WITH,
--
ERROR: RECURSIVE is not supported in the WITH clause [at 2:4]
|> WITH RECURSIVE
   ^
--
ALTERNATION GROUP: ,+PIPE_WITH,,+WITH_RECURSIVE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-t1.n#6 AS n [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.$col1#1, t1.n#6]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t1"
    |   +-with_subquery=
    |     +-RecursiveScan
    |       +-column_list=[$union_all.n#3]
    |       +-op_type=UNION_ALL
    |       +-non_recursive_term=
    |       | +-SetOperationItem
    |       |   +-scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$union_all1.n#2]
    |       |   |   +-expr_list=
    |       |   |   | +-n#2 := Literal(type=INT64, value=1)
    |       |   |   +-input_scan=
    |       |   |     +-SingleRowScan
    |       |   +-output_column_list=[$union_all1.n#2]
    |       +-recursive_term=
    |         +-SetOperationItem
    |           +-scan=
    |           | +-ProjectScan
    |           |   +-column_list=[$union_all2.$col1#5]
    |           |   +-expr_list=
    |           |   | +-$col1#5 :=
    |           |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |           |   |     +-ColumnRef(type=INT64, column=t1.n#4)
    |           |   |     +-Literal(type=INT64, value=1)
    |           |   +-input_scan=
    |           |     +-FilterScan
    |           |       +-column_list=[t1.n#4]
    |           |       +-input_scan=
    |           |       | +-RecursiveRefScan(column_list=[t1.n#4])
    |           |       +-filter_expr=
    |           |         +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |           |           +-ColumnRef(type=INT64, column=t1.n#4)
    |           |           +-Literal(type=INT64, value=20)
    |           +-output_column_list=[$union_all2.$col1#5]
    +-query=
    | +-JoinScan
    |   +-column_list=[$query.$col1#1, t1.n#6]
    |   +-left_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[$query.$col1#1]
    |   |   +-expr_list=
    |   |   | +-$col1#1 := Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-SingleRowScan
    |   +-right_scan=
    |     +-WithRefScan(column_list=[t1.n#6], with_query_name="t1")
    +-recursive=TRUE
==

# RECURSIVE WITH DEPTH, which requires the DEPTH feature.
[language_features=NONE,+PIPES{{|,+PIPE_WITH}}{{|,+WITH_RECURSIVE}}{{|,+WITH_RECURSIVE_DEPTH_MODIFIER}}]
SELECT "abc" str
|> WITH RECURSIVE Fibonacci AS (
      SELECT 0 AS x, 1 AS y
        UNION ALL
      SELECT y AS x, x + y AS y FROM Fibonacci
    ) WITH DEPTH
|> CROSS JOIN Fibonacci
|> SELECT y, depth
--
ALTERNATION GROUPS:
    <empty>
    ,+WITH_RECURSIVE_DEPTH_MODIFIER
    ,+WITH_RECURSIVE,
    ,+WITH_RECURSIVE,,+WITH_RECURSIVE_DEPTH_MODIFIER
--
ERROR: Pipe WITH not supported [at 2:1]
|> WITH RECURSIVE Fibonacci AS (
^
--
ALTERNATION GROUPS:
    ,+PIPE_WITH,,
    ,+PIPE_WITH,,,+WITH_RECURSIVE_DEPTH_MODIFIER
--
ERROR: RECURSIVE is not supported in the WITH clause [at 2:4]
|> WITH RECURSIVE Fibonacci AS (
   ^
--
ALTERNATION GROUP: ,+PIPE_WITH,,+WITH_RECURSIVE,
--
ERROR: Recursion depth modifier is not supported [at 6:7]
    ) WITH DEPTH
      ^
--
ALTERNATION GROUP: ,+PIPE_WITH,,+WITH_RECURSIVE,,+WITH_RECURSIVE_DEPTH_MODIFIER
--
QueryStmt
+-output_column_list=
| +-Fibonacci.y#11 AS y [INT64]
| +-Fibonacci.depth#12 AS depth [INT64]
+-query=
  +-WithScan
    +-column_list=Fibonacci.[y#11, depth#12]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="Fibonacci"
    |   +-with_subquery=
    |     +-RecursiveScan
    |       +-column_list=[$union_all.x#4, $union_all.y#5, $recursion_depth.depth#9]
    |       +-op_type=UNION_ALL
    |       +-non_recursive_term=
    |       | +-SetOperationItem
    |       |   +-scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=$union_all1.[x#2, y#3]
    |       |   |   +-expr_list=
    |       |   |   | +-x#2 := Literal(type=INT64, value=0)
    |       |   |   | +-y#3 := Literal(type=INT64, value=1)
    |       |   |   +-input_scan=
    |       |   |     +-SingleRowScan
    |       |   +-output_column_list=$union_all1.[x#2, y#3]
    |       +-recursive_term=
    |       | +-SetOperationItem
    |       |   +-scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[Fibonacci.y#7, $union_all2.y#8]
    |       |   |   +-expr_list=
    |       |   |   | +-y#8 :=
    |       |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |       |   |   |     +-ColumnRef(type=INT64, column=Fibonacci.x#6)
    |       |   |   |     +-ColumnRef(type=INT64, column=Fibonacci.y#7)
    |       |   |   +-input_scan=
    |       |   |     +-RecursiveRefScan(column_list=Fibonacci.[x#6, y#7])
    |       |   +-output_column_list=[Fibonacci.y#7, $union_all2.y#8]
    |       +-recursion_depth_modifier=
    |         +-RecursionDepthModifier
    |           +-recursion_depth_column=
    |             +-ColumnHolder(column=$recursion_depth.depth#9)
    +-query=
    | +-ProjectScan
    |   +-column_list=Fibonacci.[y#11, depth#12]
    |   +-input_scan=
    |     +-JoinScan
    |       +-column_list=[$query.str#1, Fibonacci.x#10, Fibonacci.y#11, Fibonacci.depth#12]
    |       +-left_scan=
    |       | +-ProjectScan
    |       |   +-column_list=[$query.str#1]
    |       |   +-expr_list=
    |       |   | +-str#1 := Literal(type=STRING, value="abc")
    |       |   +-input_scan=
    |       |     +-SingleRowScan
    |       +-right_scan=
    |         +-WithRefScan(column_list=Fibonacci.[x#10, y#11, depth#12], with_query_name="Fibonacci")
    +-recursive=TRUE
==

# The WITH query cannot see names from the pipe input table.
FROM KeyValue kv
|> WITH t AS (SELECT {{key|kv}})
--
ALTERNATION GROUP: key
--
ERROR: Unrecognized name: key [at 2:22]
|> WITH t AS (SELECT key)
                     ^
--
ALTERNATION GROUP: kv
--
ERROR: Unrecognized name: kv [at 2:22]
|> WITH t AS (SELECT kv)
                     ^
==

# WITH inside a table subquery cannot see outer columns. (Table subqueries
# aren't correlated.)
FROM KeyValue kv
|> CROSS JOIN (
     SELECT 1
     |> WITH t AS (SELECT {{key|kv}})
    )
--
ALTERNATION GROUP: key
--
ERROR: Unrecognized name: key [at 4:27]
     |> WITH t AS (SELECT key)
                          ^
--
ALTERNATION GROUP: kv
--
ERROR: Unrecognized name: kv [at 4:27]
     |> WITH t AS (SELECT kv)
                          ^
==

# WITH inside an expression subquery cannot see outer columns. (Even in
# expression subqueries, which can use correlated references, WITH queries
# cannot.)
FROM KeyValue kv
|> EXTEND (
     SELECT 1
     |> WITH t AS (SELECT {{key|kv}})
    )
--
ALTERNATION GROUP: key
--
ERROR: Unrecognized name: key [at 4:27]
     |> WITH t AS (SELECT key)
                          ^
--
ALTERNATION GROUP: kv
--
ERROR: Unrecognized name: kv [at 4:27]
     |> WITH t AS (SELECT kv)
                          ^
==

# Order preservation with WITH last.
FROM KeyValue
|> ORDER BY key
|> WITH t2 AS (FROM TestExtraValueTable)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[TestExtraValueTable.value#3]
    |       +-input_scan=
    |         +-TableScan(column_list=[TestExtraValueTable.value#3], table=TestExtraValueTable, column_index_list=[0])
    +-query=
      +-OrderByScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-is_ordered=TRUE
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# Order preservation with operators after WITH.
FROM KeyValue
|> ORDER BY key
|> WITH t2 AS (FROM TestExtraValueTable)
|> SELECT value
--
QueryStmt
+-output_column_list=
| +-KeyValue.Value#2 AS value [STRING]
+-query=
  +-WithScan
    +-column_list=[KeyValue.Value#2]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[TestExtraValueTable.value#3]
    |       +-input_scan=
    |         +-TableScan(column_list=[TestExtraValueTable.value#3], table=TestExtraValueTable, column_index_list=[0])
    +-query=
      +-ProjectScan
        +-column_list=[KeyValue.Value#2]
        +-is_ordered=TRUE
        +-input_scan=
          +-OrderByScan
            +-column_list=KeyValue.[Key#1, Value#2]
            +-is_ordered=TRUE
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-order_by_item_list=
              +-OrderByItem
                +-column_ref=
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
==

# Order is not preserved when operators after WITH lose order, even though
# the ResolvedWithScan moves to the outside and had an ordered input.
FROM KeyValue
|> ORDER BY key
|> WITH t2 AS (FROM TestExtraValueTable)
|> WHERE value = 'abc'
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-WithScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[TestExtraValueTable.value#3]
    |       +-input_scan=
    |         +-TableScan(column_list=[TestExtraValueTable.value#3], table=TestExtraValueTable, column_index_list=[0])
    +-query=
      +-FilterScan
        +-column_list=KeyValue.[Key#1, Value#2]
        +-input_scan=
        | +-OrderByScan
        |   +-column_list=KeyValue.[Key#1, Value#2]
        |   +-is_ordered=TRUE
        |   +-input_scan=
        |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        |   +-order_by_item_list=
        |     +-OrderByItem
        |       +-column_ref=
        |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            +-Literal(type=STRING, value="abc")
