[default language_features=MAXIMUM,+PIPES,+TABLE_VALUED_FUNCTIONS,+TVF_PSEUDO_COLUMNS]

# Call TVF with pseudo columns that strip them with select all
FROM EnumTable
|> CALL select_star_from_pseudo_columns_table()
--
QueryStmt
+-output_column_list=
| +-select_star_from_pseudo_columns_table.key#6 AS key [INT32]
| +-select_star_from_pseudo_columns_table.TestEnum#7 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-select_star_from_pseudo_columns_table.AnotherTestEnum#8 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
+-query=
  +-TVFScan
    +-column_list=select_star_from_pseudo_columns_table.[key#6, TestEnum#7, AnotherTestEnum#8]
    +-tvf=select_star_from_pseudo_columns_table((ANY TABLE table_with_pseudo_columns) -> ANY TABLE)
    +-signature=(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>>
    +-argument_list=
    | +-FunctionArgument
    |   +-scan=
    |   | +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    |   +-argument_column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
    +-column_index_list=[0, 1, 2]
    +-function_call_signature=(ANY TABLE table_with_pseudo_columns) -> ANY TABLE

With Templated SQL TVF signature:
  select_star_from_pseudo_columns_table(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-table_with_pseudo_columns.key#1 AS key [INT32]
| +-table_with_pseudo_columns.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-table_with_pseudo_columns.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
+-query=
  +-ProjectScan
    +-column_list=table_with_pseudo_columns.[key#1, TestEnum#2, AnotherTestEnum#3]
    +-input_scan=
      +-RelationArgumentScan(column_list=table_with_pseudo_columns.[key#1, TestEnum#2, AnotherTestEnum#3], name="table_with_pseudo_columns")
==

# Explicitly select pseudo columns returned by TVF.
FROM EnumTable
|> CALL select_pseudo_columns_from_table()
|> SELECT key, Filename, RowId
--
QueryStmt
+-output_column_list=
| +-select_pseudo_columns_from_table.key#6 AS key [INT32]
| +-select_pseudo_columns_from_table.Filename#7 AS Filename [STRING]
| +-select_pseudo_columns_from_table.RowId#8 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
    +-input_scan=
      +-TVFScan
        +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
        +-tvf=select_pseudo_columns_from_table((ANY TABLE table_with_pseudo_columns) -> ANY TABLE)
        +-signature=(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
        +-argument_list=
        | +-FunctionArgument
        |   +-scan=
        |   | +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
        |   +-argument_column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
        +-column_index_list=[0, 1, 2]
        +-function_call_signature=(ANY TABLE table_with_pseudo_columns) -> ANY TABLE

With Templated SQL TVF signature:
  select_pseudo_columns_from_table(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-table_with_pseudo_columns.key#1 AS key [INT32]
| +-table_with_pseudo_columns.Filename#4 AS Filename [STRING]
| +-table_with_pseudo_columns.RowId#5 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5]
    +-input_scan=
      +-RelationArgumentScan(column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5], name="table_with_pseudo_columns")
==

# Explicitly select pseudo columns returned by TVF using dot notation.
FROM EnumTable
|> CALL select_pseudo_columns_from_table() t
|> SELECT t.key, t.Filename, t.RowId
--
QueryStmt
+-output_column_list=
| +-select_pseudo_columns_from_table.key#6 AS key [INT32]
| +-select_pseudo_columns_from_table.Filename#7 AS Filename [STRING]
| +-select_pseudo_columns_from_table.RowId#8 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
    +-input_scan=
      +-TVFScan
        +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
        +-tvf=select_pseudo_columns_from_table((ANY TABLE table_with_pseudo_columns) -> ANY TABLE)
        +-signature=(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
        +-argument_list=
        | +-FunctionArgument
        |   +-scan=
        |   | +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
        |   +-argument_column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
        +-column_index_list=[0, 1, 2]
        +-alias="t"
        +-function_call_signature=(ANY TABLE table_with_pseudo_columns) -> ANY TABLE

With Templated SQL TVF signature:
  select_pseudo_columns_from_table(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-table_with_pseudo_columns.key#1 AS key [INT32]
| +-table_with_pseudo_columns.Filename#4 AS Filename [STRING]
| +-table_with_pseudo_columns.RowId#5 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5]
    +-input_scan=
      +-RelationArgumentScan(column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5], name="table_with_pseudo_columns")
==

# Call TVF that selects pseudo columns, but input table was filtered.
FROM EnumTable
|> WHERE RowId IS NOT NULL
|> CALL select_pseudo_columns_from_table()
--
QueryStmt
+-output_column_list=
| +-select_pseudo_columns_from_table.key#6 AS key [INT32]
| +-select_pseudo_columns_from_table.Filename#7 AS Filename [STRING]
| +-select_pseudo_columns_from_table.RowId#8 AS RowId [BYTES]
+-query=
  +-TVFScan
    +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
    +-tvf=select_pseudo_columns_from_table((ANY TABLE table_with_pseudo_columns) -> ANY TABLE)
    +-signature=(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
    +-argument_list=
    | +-FunctionArgument
    |   +-scan=
    |   | +-FilterScan
    |   |   +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    |   |   +-filter_expr=
    |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |       +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |   |         +-ColumnRef(type=BYTES, column=EnumTable.RowId#5)
    |   +-argument_column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
    +-column_index_list=[0, 1, 2]
    +-function_call_signature=(ANY TABLE table_with_pseudo_columns) -> ANY TABLE

With Templated SQL TVF signature:
  select_pseudo_columns_from_table(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-table_with_pseudo_columns.key#1 AS key [INT32]
| +-table_with_pseudo_columns.Filename#4 AS Filename [STRING]
| +-table_with_pseudo_columns.RowId#5 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5]
    +-input_scan=
      +-RelationArgumentScan(column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5], name="table_with_pseudo_columns")
==

# Call TVF that selects pseudo columns, but input table was filtered, and TVF
# result is further filtered afterwards.
FROM EnumTable
|> WHERE RowId IS NOT NULL
|> CALL select_pseudo_columns_from_table()
|> WHERE RowId IS NULL
--

QueryStmt
+-output_column_list=
| +-select_pseudo_columns_from_table.key#6 AS key [INT32]
| +-select_pseudo_columns_from_table.Filename#7 AS Filename [STRING]
| +-select_pseudo_columns_from_table.RowId#8 AS RowId [BYTES]
+-query=
  +-FilterScan
    +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
    +-input_scan=
    | +-TVFScan
    |   +-column_list=select_pseudo_columns_from_table.[key#6, Filename#7, RowId#8]
    |   +-tvf=select_pseudo_columns_from_table((ANY TABLE table_with_pseudo_columns) -> ANY TABLE)
    |   +-signature=(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
    |   +-argument_list=
    |   | +-FunctionArgument
    |   |   +-scan=
    |   |   | +-FilterScan
    |   |   |   +-column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
    |   |   |   +-input_scan=
    |   |   |   | +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4])
    |   |   |   +-filter_expr=
    |   |   |     +-FunctionCall(ZetaSQL:$not(BOOL) -> BOOL)
    |   |   |       +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
    |   |   |         +-ColumnRef(type=BYTES, column=EnumTable.RowId#5)
    |   |   +-argument_column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5]
    |   +-column_index_list=[0, 1, 2]
    |   +-function_call_signature=(ANY TABLE table_with_pseudo_columns) -> ANY TABLE
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$is_null(BYTES) -> BOOL)
        +-ColumnRef(type=BYTES, column=select_pseudo_columns_from_table.RowId#8)

With Templated SQL TVF signature:
  select_pseudo_columns_from_table(TABLE<key INT32, TestEnum ENUM<zetasql_test__.TestEnum>, AnotherTestEnum ENUM<zetasql_test__.AnotherTestEnum>, Filename STRING, RowId BYTES>) -> TABLE<key INT32, Filename STRING, RowId BYTES>
containing resolved templated query:
QueryStmt
+-output_column_list=
| +-table_with_pseudo_columns.key#1 AS key [INT32]
| +-table_with_pseudo_columns.Filename#4 AS Filename [STRING]
| +-table_with_pseudo_columns.RowId#5 AS RowId [BYTES]
+-query=
  +-ProjectScan
    +-column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5]
    +-input_scan=
      +-RelationArgumentScan(column_list=table_with_pseudo_columns.[key#1, Filename#4, RowId#5], name="table_with_pseudo_columns")
