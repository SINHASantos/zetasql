[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+BRACED_PROTO_CONSTRUCTORS]
[default no_test_extract_table_names]
# No unparser due to SQLBuilder visitor not implemented for GraphMakeElement

# Property spefication: single specification.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person {id: 10})
  RETURN n.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=INT64
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=id(INT64)
                  | |   |   |   +-Literal(type=INT64, value=10)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=171-177, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Property spefication: double specification.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n {id: 10, name: "foo"})
  RETURN n.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |   | +-GraphGetElementProperty
                  | |   |   |   | | +-type=INT64
                  | |   |   |   | | +-expr=
                  | |   |   |   | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |   |   | | +-property=id(INT64)
                  | |   |   |   | +-Literal(type=INT64, value=10)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=STRING
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |   |     | +-property=name(STRING)
                  | |   |   |     +-Literal(type=STRING, value="foo")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Property spefication: three specification. The same property can be referenced
# multiple times although this may lead to empty results.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n {id: 10, name: "foo", name: "bar"})
  RETURN n.name
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(2) BOOL) -> BOOL)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |   | +-GraphGetElementProperty
                  | |   |   |   | | +-type=INT64
                  | |   |   |   | | +-expr=
                  | |   |   |   | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |   |   | | +-property=id(INT64)
                  | |   |   |   | +-Literal(type=INT64, value=10)
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |   |   |   | +-GraphGetElementProperty
                  | |   |   |   | | +-type=STRING
                  | |   |   |   | | +-expr=
                  | |   |   |   | | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |   |   | | +-property=name(STRING)
                  | |   |   |   | +-Literal(type=STRING, value="foo")
                  | |   |   |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=STRING
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                  | |   |   |     | +-property=name(STRING)
                  | |   |   |     +-Literal(type=STRING, value="bar")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Property spefication: anonymous element var.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH ( :Person {id: 10}) -[b IS PersonOwnAccount]-> (c)
  RETURN b.PersonId, c.Id
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.PersonId#4 AS PersonId [INT64]
| +-$graph_table.Id#5 AS Id [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[PersonId#4, Id#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[PersonId#4, Id#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[PersonId#4, Id#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[PersonId#4, Id#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[$element1#1, b#2, c#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[$element1#1, b#2, c#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.$element1#1]
                  | |   | | +-filter_expr=
                  | |   | | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   | | |   +-GraphGetElementProperty
                  | |   | | |   | +-type=INT64
                  | |   | | |   | +-expr=
                  | |   | | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.$element1#1)
                  | |   | | |   | +-property=id(INT64)
                  | |   | | |   +-Literal(type=INT64, value=10)
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=44-50, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.b#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=68-84, label=aml.PersonOwnAccount)
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.$element1#1
                  | |   +-tail=$element_table.c#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[PersonId#4, Id#5]
                    +-expr_list=
                    | +-PersonId#4 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.b#2)
                    | |   +-property=personId(INT64)
                    | +-Id#5 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.c#3)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[$element1#1, b#2, c#3])
==

# Property spefication: in Node and Edge.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (a IS Person {id: 10}) -[b IS PersonOwnAccount {PersonId: 10}]-> (c)
  RETURN a.name, b.accountId
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
| +-$graph_table.accountId#5 AS accountId [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[name#4, accountId#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[name#4, accountId#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[name#4, accountId#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[name#4, accountId#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=$element_table.[a#1, b#2, c#3]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=$element_table.[a#1, b#2, c#3]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-filter_expr=
                  | |   | | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   | | |   +-GraphGetElementProperty
                  | |   | | |   | +-type=INT64
                  | |   | | |   | +-expr=
                  | |   | | |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
                  | |   | | |   | +-property=id(INT64)
                  | |   | | |   +-Literal(type=INT64, value=10)
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=47-53, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.b#2]
                  | |   | | +-filter_expr=
                  | |   | | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   | | |   +-GraphGetElementProperty
                  | |   | | |   | +-type=INT64
                  | |   | | |   | +-expr=
                  | |   | | |   | | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.b#2)
                  | |   | | |   | +-property=personId(INT64)
                  | |   | | |   +-Literal(type=INT64, value=10)
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=71-87, label=aml.PersonOwnAccount)
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.c#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[name#4, accountId#5]
                    +-expr_list=
                    | +-name#4 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=STRING
                    | |   +-expr=
                    | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
                    | |   +-property=name(STRING)
                    | +-accountId#5 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, personId INT64>, column=$element_table.b#2)
                    |     +-property=accountId(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=$element_table.[a#1, b#2, c#3])
==

# Property spefication: NULL value for the property.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person {id: NULL})
  RETURN n.name
) gt

--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=INT64
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=id(INT64)
                  | |   |   |   +-Literal(type=INT64, value=NULL)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=47-53, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Property spefication: subquery.
SELECT * FROM GRAPH_TABLE (
  aml
  MATCH (n:Person)
  WHERE EXISTS (
    (
      SELECT * FROM GRAPH_TABLE(
      aml
      MATCH (m:Person {name: n.name})
      RETURN m.name
      )
    )
  )
  RETURN n.name
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#4 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#4]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#4]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#4]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#4]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=45-51, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-filter_expr=
                  | | +-SubqueryExpr
                  | |   +-type=BOOL
                  | |   +-subquery_type=EXISTS
                  | |   +-parameter_list=
                  | |   | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   +-subquery=
                  | |     +-ProjectScan
                  | |       +-column_list=[$graph_table.name#3]
                  | |       +-input_scan=
                  | |         +-GraphTableScan
                  | |           +-column_list=[$graph_table.name#3]
                  | |           +-property_graph=aml
                  | |           +-input_scan=
                  | |             +-GraphLinearScan
                  | |               +-column_list=[$graph_table.name#3]
                  | |               +-scan_list=
                  | |                 +-GraphLinearScan
                  | |                   +-column_list=[$graph_table.name#3]
                  | |                   +-scan_list=
                  | |                     +-GraphScan
                  | |                     | +-column_list=[$element_table.m#2]
                  | |                     | +-input_scan_list=
                  | |                     | | +-GraphPathScan
                  | |                     | |   +-column_list=[$element_table.m#2]
                  | |                     | |   +-input_scan_list=
                  | |                     | |   | +-GraphNodeScan
                  | |                     | |   |   +-column_list=[$element_table.m#2]
                  | |                     | |   |   +-filter_expr=
                  | |                     | |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |                     | |   |   |   +-GraphGetElementProperty
                  | |                     | |   |   |   | +-type=STRING
                  | |                     | |   |   |   | +-expr=
                  | |                     | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#2)
                  | |                     | |   |   |   | +-property=name(STRING)
                  | |                     | |   |   |   +-GraphGetElementProperty
                  | |                     | |   |   |     +-type=STRING
                  | |                     | |   |   |     +-expr=
                  | |                     | |   |   |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1, is_correlated=TRUE)
                  | |                     | |   |   |     +-property=name(STRING)
                  | |                     | |   |   +-label_expr=
                  | |                     | |   |   | +-GraphLabel(parse_location=134-140, label=aml.Person)
                  | |                     | |   |   +-target_element_table_list=[aml.Person]
                  | |                     | |   +-head=$element_table.m#2
                  | |                     | |   +-tail=$element_table.m#2
                  | |                     | +-input_scan=
                  | |                     |   +-SingleRowScan
                  | |                     +-ProjectScan
                  | |                       +-column_list=[$graph_table.name#3]
                  | |                       +-expr_list=
                  | |                       | +-name#3 :=
                  | |                       |   +-GraphGetElementProperty
                  | |                       |     +-type=STRING
                  | |                       |     +-expr=
                  | |                       |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.m#2)
                  | |                       |     +-property=name(STRING)
                  | |                       +-input_scan=
                  | |                         +-GraphRefScan(column_list=[$element_table.m#2])
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#4]
                    +-expr_list=
                    | +-name#4 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Property spefication: Non-literal.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person {name: CONCAT(n.name, "suffix")})
  RETURN n.name
) gt
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=STRING
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=name(STRING)
                  | |   |   |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
                  | |   |   |     +-GraphGetElementProperty
                  | |   |   |     | +-type=STRING
                  | |   |   |     | +-expr=
                  | |   |   |     | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |     | +-property=name(STRING)
                  | |   |   |     +-Literal(type=STRING, value="suffix")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=47-53, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Property spefication: Empty property specifications.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person {})
  RETURN n.name
) gt
--
ERROR: Syntax error: Unexpected "}" [at 3:23]
  MATCH (n IS Person {})
                      ^

==

# Unmatched property type should throw function signature matching error.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person { name: 123 })
  RETURN n.name
) gt
--

ERROR: No matching signature for operator = for argument types: STRING, INT64
  Signature: T1 = T1
    Unable to find common supertype for templated argument <T1>
      Input types for <T1>: {INT64, STRING}
  Signature: INT64 = UINT64
    Argument 1: Unable to coerce type STRING to expected type INT64
  Signature: UINT64 = INT64
    Argument 1: Unable to coerce type STRING to expected type UINT64 [at 3:24]
  MATCH (n IS Person { name: 123 })
                       ^

==

# INT64 property vs UINT64 expression
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person { Id: CAST(123 AS UINT64) })
  RETURN n.name
) gt

--


QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, UINT64) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=INT64
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=id(INT64)
                  | |   |   |   +-Literal(type=UINT64, value=123, has_explicit_type=TRUE)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=47-53, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# Uint32 property with int literal
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person { age: 100 })
  RETURN n.name
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.name#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(UINT32, UINT32) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=UINT32
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=age(UINT32)
                  | |   |   |   +-Literal(type=UINT32, value=100)
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=47-53, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.name#2]
                    +-expr_list=
                    | +-name#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=STRING
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=name(STRING)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])

==

# BYTES property vs STRING literal
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person { data: "\001" })
  RETURN n.data
) gt

--

ERROR: No matching signature for operator = for argument types: BYTES, STRING. STRING and BYTES are different types that are not directly comparable. To write a BYTES literal, use a b-prefixed literal such as b'bytes value'
  Signature: T1 = T1
    Unable to find common supertype for templated argument <T1>
      Input types for <T1>: {STRING, BYTES}
  Signature: INT64 = UINT64
    Argument 1: Unable to coerce type BYTES to expected type INT64
  Signature: UINT64 = INT64
    Argument 1: Unable to coerce type BYTES to expected type UINT64 [at 3:24]
  MATCH (n IS Person { data: "\001" })
                       ^


==

# BYTES property vs bytes literal

SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person { data: b"\001" })
  RETURN n.data
) gt
--

QueryStmt
+-output_column_list=
| +-$graph_table.data#2 AS data [BYTES]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.data#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.data#2]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.data#2]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.data#2]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.n#1]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.n#1]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.n#1]
                  | |   |   +-filter_expr=
                  | |   |   | +-FunctionCall(ZetaSQL:$equal(BYTES, BYTES) -> BOOL)
                  | |   |   |   +-GraphGetElementProperty
                  | |   |   |   | +-type=BYTES
                  | |   |   |   | +-expr=
                  | |   |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                  | |   |   |   | +-property=data(BYTES)
                  | |   |   |   +-Literal(type=BYTES, value=b"\x01")
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=47-53, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-head=$element_table.n#1
                  | |   +-tail=$element_table.n#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.data#2]
                    +-expr_list=
                    | +-data#2 :=
                    |   +-GraphGetElementProperty
                    |     +-type=BYTES
                    |     +-expr=
                    |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.n#1)
                    |     +-property=data(BYTES)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.n#1])
==

# In property specification, reject properties that don't belong to the matching graph node.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH (n IS Person {PersonId: 10})
  RETURN n.name
) gt
--
ERROR: Property PersonId is not exposed by element type GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> [at 3:23]
  MATCH (n IS Person {PersonId: 10})
                      ^
==

# In property specification, reject properties that don't belong to the matching graph edge.
SELECT gt.* from
GRAPH_TABLE(aml
  MATCH -[e IS PersonOwnAccount {name: "foo"}]->
  RETURN e.PersonId
) gt

--
ERROR: Property name is not exposed by element type GRAPH_EDGE(aml)<accountId INT64, personId INT64> [at 3:34]
  MATCH -[e IS PersonOwnAccount {name: "foo"}]->
                                 ^
