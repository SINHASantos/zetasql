# TODO: Figure out how to make all tests work in Java.
[default language_features=NONE]
[default no_java]

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT initialized_constant_string = "2004-09 25";
--
CreateConstantStmt
+-name_path=initialized_constant_string
+-expr=
  +-Literal(type=STRING, value="2004-09 25")
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT initialized_invalid_string = "INVALID STRING";
--
CreateConstantStmt
+-name_path=initialized_invalid_string
+-expr=
  +-Literal(type=STRING, value="INVALID STRING")
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT NULL_STRING = CAST(NULL AS STRING);
--
CreateConstantStmt
+-name_path=NULL_STRING
+-expr=
  +-Literal(type=STRING, value=NULL, has_explicit_type=TRUE)
==

[prepare_database=db1]
CREATE CONSTANT uninitialized_constant_string = "2004-09 25";
--
CreateConstantStmt
+-name_path=uninitialized_constant_string
+-expr=
  +-Literal(type=STRING, value="2004-09 25")
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT initialized_constant_double = 92.5;
--
CreateConstantStmt
+-name_path=initialized_constant_double
+-expr=
  +-Literal(type=DOUBLE, value=92.5)
==

[prepare_database=db1]
[use_constant_evaluator]
CREATE CONSTANT initialized_year_string = CONCAT("2","025");
--
CreateConstantStmt
+-name_path=initialized_year_string
+-expr=
  +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    +-Literal(type=STRING, value="2")
    +-Literal(type=STRING, value="025")
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL "1" YEAR
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL "1" YEAR
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=1-0 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
select interval cast(1 as string) hour
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval cast(1 as string) hour
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 1:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE|+INTERVAL_TYPE,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR}}]
select interval concat("1", "2") month
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval concat("1", "2") month
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING literal [at 1:17]
select interval concat("1", "2") month
                ^
--
ALTERNATION GROUP: +INTERVAL_TYPE,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING value knowable at compile time. [at 1:17]
select interval concat("1", "2") month
                ^
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT interval '-3' month
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT interval '-3' month
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=-0-3 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT -Interval '5' Week
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:9]
SELECT -Interval '5' Week
        ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$unary_minus(INTERVAL) -> INTERVAL)
    |     +-Literal(type=INTERVAL, value=0-0 35 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL '-1.123456789' SECOND
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL '-1.123456789' SECOND
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 -0:0:1.123456789)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL '-1-2' YEAR TO MONTH
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL '-1-2' YEAR TO MONTH
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=-1-2 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL '-1 -2 -3' MONTH TO HOUR
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL '-1 -2 -3' MONTH TO HOUR
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=-0-1 -2 -3:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL '-1:2:3.456' HOUR TO SECOND
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL '-1:2:3.456' HOUR TO SECOND
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 -1:2:3.456)
    +-input_scan=
      +-SingleRowScan
==

# Microseconds handling
[language_features=NONE,{{+INTERVAL_TYPE|+INTERVAL_TYPE,+TIMESTAMP_NANOS|+INTERVAL_TYPE,+ENFORCE_MICROS_MODE_IN_INTERVAL_TYPE}}]
SELECT INTERVAL '0.123456' SECOND
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 0:0:0.123456)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{+INTERVAL_TYPE|+INTERVAL_TYPE,+TIMESTAMP_NANOS|+INTERVAL_TYPE,+ENFORCE_MICROS_MODE_IN_INTERVAL_TYPE}}]
SELECT INTERVAL '17:23.123456' MINUTE TO SECOND
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 0:17:23.123456)
    +-input_scan=
      +-SingleRowScan
==

# Nanoseconds handling
[language_features=NONE,{{+INTERVAL_TYPE|+INTERVAL_TYPE,+TIMESTAMP_NANOS|+INTERVAL_TYPE,+ENFORCE_MICROS_MODE_IN_INTERVAL_TYPE}}]
SELECT INTERVAL '0.123456789' SECOND
--
ALTERNATION GROUPS:
    +INTERVAL_TYPE
    +INTERVAL_TYPE,+TIMESTAMP_NANOS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 0:0:0.123456789)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: +INTERVAL_TYPE,+ENFORCE_MICROS_MODE_IN_INTERVAL_TYPE
--
ERROR: Invalid INTERVAL value '0.123456789' [at 1:8]
SELECT INTERVAL '0.123456789' SECOND
       ^
==

[language_features=NONE,{{+INTERVAL_TYPE|+INTERVAL_TYPE,+TIMESTAMP_NANOS|+INTERVAL_TYPE,+ENFORCE_MICROS_MODE_IN_INTERVAL_TYPE}}]
SELECT INTERVAL '17:23.123456789' MINUTE TO SECOND
--
ALTERNATION GROUPS:
    +INTERVAL_TYPE
    +INTERVAL_TYPE,+TIMESTAMP_NANOS
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 0:17:23.123456789)
    +-input_scan=
      +-SingleRowScan
--
ALTERNATION GROUP: +INTERVAL_TYPE,+ENFORCE_MICROS_MODE_IN_INTERVAL_TYPE
--
ERROR: Invalid INTERVAL value '17:23.123456789' [at 1:8]
SELECT INTERVAL '17:23.123456789' MINUTE TO SECOND
       ^
==

# MILLISECOND date part
[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL '7684416' MILLISECOND
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL '7684416' MILLISECOND
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 2:8:4.416)
    +-input_scan=
      +-SingleRowScan
==

# MICROSECOND date part
[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL '7684416539' MICROSECOND
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL '7684416539' MICROSECOND
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=0-0 0 2:8:4.416539)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
select interval 1 year
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval 1 year
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select interval -20 month
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |     +-Literal(type=INT64, value=-20)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select interval @test_param_int64 day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |     +-Parameter(type=INT64, name="test_param_int64")
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
select interval (1 + 1) year
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval (1 + 1) year
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     | +-Literal(type=INT64, value=1)
    |     | +-Literal(type=INT64, value=1)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
select interval 2-1 year to month
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
select interval 2-1 year to month
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
ERROR: The INTERVAL keyword followed by an integer expression can only specify a single datetime field, not a field range. Consider using INTERVAL function for specifying multiple datetime fields. [at 1:29]
select interval 2-1 year to month
                            ^
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT INTERVAL -'2' HOUR
--
ALTERNATION GROUP: <empty>
--
ERROR: Unexpected INTERVAL expression [at 1:8]
SELECT INTERVAL -'2' HOUR
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
ERROR: No matching signature for operator -
  Argument types: STRING
  Signature: -(INT32)
    Argument 1: Unable to coerce type STRING to expected type INT32
  Signature: -(INT64)
    Argument 1: Unable to coerce type STRING to expected type INT64
  Signature: -(FLOAT)
    Argument 1: Unable to coerce type STRING to expected type FLOAT
  Signature: -(DOUBLE)
    Argument 1: Unable to coerce type STRING to expected type DOUBLE
  Signature: -(INTERVAL)
    Argument 1: Unable to coerce type STRING to expected type INTERVAL [at 1:17]
SELECT INTERVAL -'2' HOUR
                ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL 'Long' DAY
--
ERROR: Invalid INTERVAL value 'Long' [at 1:8]
SELECT INTERVAL 'Long' DAY
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL '1-2' DAY
--
ERROR: Invalid INTERVAL value '1-2' [at 1:8]
SELECT INTERVAL '1-2' DAY
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL '1' DAY TO DAY
--
ERROR: Invalid interval datetime fields: DAY TO DAY [at 1:8]
SELECT INTERVAL '1' DAY TO DAY
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL '1:2' SECOND TO MINUTE
--
ERROR: Invalid interval datetime fields: SECOND TO MINUTE [at 1:8]
SELECT INTERVAL '1:2' SECOND TO MINUTE
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL '1-2' YEAR TO WEEK
--
ERROR: Invalid interval datetime fields: YEAR TO WEEK [at 1:8]
SELECT INTERVAL '1-2' YEAR TO WEEK
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL '1-2' YEAR TO MOMENT
--
ERROR: A valid date part name is required but found MOMENT [at 1:31]
SELECT INTERVAL '1-2' YEAR TO MOMENT
                              ^
==

[language_features=NONE,{{|+INTERVAL_TYPE}}]
SELECT CURRENT_DATE - DATE '2000-01-01'
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator -
  Argument types: DATE, DATE
  Signature: INT64 - INT64
    Argument 1: Unable to coerce type DATE to expected type INT64
  Signature: UINT64 - UINT64
    Argument 1: Unable to coerce type DATE to expected type UINT64
  Signature: DOUBLE - DOUBLE
    Argument 1: Unable to coerce type DATE to expected type DOUBLE [at 1:8]
SELECT CURRENT_DATE - DATE '2000-01-01'
       ^
--
ALTERNATION GROUP: +INTERVAL_TYPE
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$subtract(DATE, DATE) -> INTERVAL)
    |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    |     +-Literal(type=DATE, value=2000-01-01, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT CURRENT_TIMESTAMP - '2000-01-01'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$subtract(TIMESTAMP, TIMESTAMP) -> INTERVAL)
    |     +-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
    |     +-Literal(type=TIMESTAMP, value=2000-01-01 08:00:00+00)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE,+CIVIL_TIME]
SELECT CURRENT_DATETIME - '2000-01-01'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$subtract(DATETIME, DATETIME) -> INTERVAL)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=DATETIME, value=2000-01-01 00:00:00)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE,+CIVIL_TIME]
SELECT CURRENT_DATE - DATETIME '2000-01-01 10:20:30'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$subtract(DATETIME, DATETIME) -> INTERVAL)
    |     +-Cast(DATE -> DATETIME)
    |     | +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    |     +-Literal(type=DATETIME, value=2000-01-01 10:20:30, has_explicit_type=TRUE)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE,+CIVIL_TIME]
SELECT CURRENT_TIME - '00:00:00.999'
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$subtract(TIME, TIME) -> INTERVAL)
    |     +-FunctionCall(ZetaSQL:current_time(optional(0) STRING) -> TIME)
    |     +-Literal(type=TIME, value=00:00:00.999)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT CURRENT_TIMESTAMP - CURRENT_DATE
--
ERROR: No matching signature for operator -
  Argument types: TIMESTAMP, DATE
  Signature: INT64 - INT64
    Argument 1: Unable to coerce type TIMESTAMP to expected type INT64
  Signature: UINT64 - UINT64
    Argument 1: Unable to coerce type TIMESTAMP to expected type UINT64
  Signature: DOUBLE - DOUBLE
    Argument 1: Unable to coerce type TIMESTAMP to expected type DOUBLE
  Signature: DATE - DATE
    Argument 1: Unable to coerce type TIMESTAMP to expected type DATE
  Signature: TIMESTAMP - TIMESTAMP
    Argument 2: Unable to coerce type DATE to expected type TIMESTAMP
  Signature: TIMESTAMP - INTERVAL
    Argument 2: Unable to coerce type DATE to expected type INTERVAL
  Signature: INTERVAL - INTERVAL
    Argument 1: Unable to coerce type TIMESTAMP to expected type INTERVAL [at 1:8]
SELECT CURRENT_TIMESTAMP - CURRENT_DATE
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT CURRENT_TIMESTAMP + INTERVAL '10:20:30' HOUR TO SECOND,
       INTERVAL '10' YEAR + TIMESTAMP '2000-01-02 03:04:05',
       CURRENT_TIMESTAMP() - INTERVAL '7' DAY
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [TIMESTAMP]
| +-$query.$col2#2 AS `$col2` [TIMESTAMP]
| +-$query.$col3#3 AS `$col3` [TIMESTAMP]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$add(TIMESTAMP, INTERVAL) -> TIMESTAMP)
    | |   +-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
    | |   +-Literal(type=INTERVAL, value=0-0 0 10:20:30)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$add(INTERVAL, TIMESTAMP) -> TIMESTAMP)
    | |   +-Literal(type=INTERVAL, value=10-0 0 0:0:0)
    | |   +-Literal(type=TIMESTAMP, value=2000-01-02 11:04:05+00, has_explicit_type=TRUE)
    | +-$col3#3 :=
    |   +-FunctionCall(ZetaSQL:$subtract(TIMESTAMP, INTERVAL) -> TIMESTAMP)
    |     +-FunctionCall(ZetaSQL:current_timestamp() -> TIMESTAMP)
    |     +-Literal(type=INTERVAL, value=0-0 7 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL 1 YEAR - CURRENT_TIMESTAMP
--
ERROR: No matching signature for operator -
  Argument types: INTERVAL, TIMESTAMP
  Signature: INT64 - INT64
    Argument 1: Unable to coerce type INTERVAL to expected type INT64
  Signature: UINT64 - UINT64
    Argument 1: Unable to coerce type INTERVAL to expected type UINT64
  Signature: DOUBLE - DOUBLE
    Argument 1: Unable to coerce type INTERVAL to expected type DOUBLE
  Signature: DATE - DATE
    Argument 1: Unable to coerce type INTERVAL to expected type DATE
  Signature: TIMESTAMP - TIMESTAMP
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP
  Signature: TIMESTAMP - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP
  Signature: INTERVAL - INTERVAL
    Argument 2: Unable to coerce type TIMESTAMP to expected type INTERVAL [at 1:8]
SELECT INTERVAL 1 YEAR - CURRENT_TIMESTAMP
       ^
==

[language_features=NONE,+INTERVAL_TYPE{{|,+CIVIL_TIME}}]
SELECT CURRENT_DATE + INTERVAL '1-2 3 4:5:6.789' YEAR TO SECOND,
       INTERVAL '6' HOUR + DATE '2020-02-20',
       CURRENT_DATE() - INTERVAL '3' MONTH
--
ALTERNATION GROUP: <empty>
--
ERROR: No matching signature for operator +
  Argument types: DATE, INTERVAL
  Signature: INT64 + INT64
    Argument 1: Unable to coerce type DATE to expected type INT64
  Signature: UINT64 + UINT64
    Argument 1: Unable to coerce type DATE to expected type UINT64
  Signature: DOUBLE + DOUBLE
    Argument 1: Unable to coerce type DATE to expected type DOUBLE
  Signature: TIMESTAMP + INTERVAL
    Argument 1: Unable to coerce type DATE to expected type TIMESTAMP
  Signature: INTERVAL + TIMESTAMP
    Argument 1: Unable to coerce type DATE to expected type INTERVAL
  Signature: INTERVAL + INTERVAL
    Argument 1: Unable to coerce type DATE to expected type INTERVAL [at 1:8]
SELECT CURRENT_DATE + INTERVAL '1-2 3 4:5:6.789' YEAR TO SECOND,
       ^
--
ALTERNATION GROUP: ,+CIVIL_TIME
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
| +-$query.$col2#2 AS `$col2` [DATETIME]
| +-$query.$col3#3 AS `$col3` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$add(DATE, INTERVAL) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$add(INTERVAL, DATE) -> DATETIME)
    | |   +-Literal(type=INTERVAL, value=0-0 0 6:0:0)
    | |   +-Literal(type=DATE, value=2020-02-20, has_explicit_type=TRUE)
    | +-$col3#3 :=
    |   +-FunctionCall(ZetaSQL:$subtract(DATE, INTERVAL) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_date(optional(0) STRING) -> DATE)
    |     +-Literal(type=INTERVAL, value=0-3 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE,+CIVIL_TIME]
SELECT INTERVAL 1 YEAR - CURRENT_DATE
--
ERROR: No matching signature for operator -
  Argument types: INTERVAL, DATE
  Signature: INT64 - INT64
    Argument 1: Unable to coerce type INTERVAL to expected type INT64
  Signature: UINT64 - UINT64
    Argument 1: Unable to coerce type INTERVAL to expected type UINT64
  Signature: DOUBLE - DOUBLE
    Argument 1: Unable to coerce type INTERVAL to expected type DOUBLE
  Signature: DATE - DATE
    Argument 1: Unable to coerce type INTERVAL to expected type DATE
  Signature: TIMESTAMP - TIMESTAMP
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP
  Signature: DATETIME - DATETIME
    Argument 1: Unable to coerce type INTERVAL to expected type DATETIME
  Signature: TIME - TIME
    Argument 1: Unable to coerce type INTERVAL to expected type TIME
  Signature: TIMESTAMP - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP
  Signature: DATE - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type DATE
  Signature: DATETIME - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type DATETIME
  Signature: INTERVAL - INTERVAL
    Argument 2: Unable to coerce type DATE to expected type INTERVAL [at 1:8]
SELECT INTERVAL 1 YEAR - CURRENT_DATE
       ^
==

[language_features=NONE,+INTERVAL_TYPE,+CIVIL_TIME]
SELECT CURRENT_DATETIME + INTERVAL '1-2 3 4:5:6.789' YEAR TO SECOND,
       INTERVAL '2.22' SECOND  + DATETIME '2020-02-20 02:20:02.222',
       CURRENT_DATETIME() - INTERVAL '1' QUARTER
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [DATETIME]
| +-$query.$col2#2 AS `$col2` [DATETIME]
| +-$query.$col3#3 AS `$col3` [DATETIME]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$add(DATETIME, INTERVAL) -> DATETIME)
    | |   +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$add(INTERVAL, DATETIME) -> DATETIME)
    | |   +-Literal(type=INTERVAL, value=0-0 0 0:0:2.220)
    | |   +-Literal(type=DATETIME, value=2020-02-20 02:20:02.222, has_explicit_type=TRUE)
    | +-$col3#3 :=
    |   +-FunctionCall(ZetaSQL:$subtract(DATETIME, INTERVAL) -> DATETIME)
    |     +-FunctionCall(ZetaSQL:current_datetime(optional(0) STRING) -> DATETIME)
    |     +-Literal(type=INTERVAL, value=0-3 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE,+CIVIL_TIME]
SELECT INTERVAL 1 YEAR - CURRENT_DATETIME
--
ERROR: No matching signature for operator -
  Argument types: INTERVAL, DATETIME
  Signature: INT64 - INT64
    Argument 1: Unable to coerce type INTERVAL to expected type INT64
  Signature: UINT64 - UINT64
    Argument 1: Unable to coerce type INTERVAL to expected type UINT64
  Signature: DOUBLE - DOUBLE
    Argument 1: Unable to coerce type INTERVAL to expected type DOUBLE
  Signature: DATE - DATE
    Argument 1: Unable to coerce type INTERVAL to expected type DATE
  Signature: TIMESTAMP - TIMESTAMP
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP
  Signature: DATETIME - DATETIME
    Argument 1: Unable to coerce type INTERVAL to expected type DATETIME
  Signature: TIME - TIME
    Argument 1: Unable to coerce type INTERVAL to expected type TIME
  Signature: TIMESTAMP - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP
  Signature: DATE - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type DATE
  Signature: DATETIME - INTERVAL
    Argument 1: Unable to coerce type INTERVAL to expected type DATETIME
  Signature: INTERVAL - INTERVAL
    Argument 2: Unable to coerce type DATETIME to expected type INTERVAL [at 1:8]
SELECT INTERVAL 1 YEAR - CURRENT_DATETIME
       ^
==

[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL 1 YEAR + INTERVAL '0.001' SECOND,
       interval '1:2:3' hour to second - interval 10 day
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
| +-$query.$col2#2 AS `$col2` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$add(INTERVAL, INTERVAL) -> INTERVAL)
    | |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    | |   | +-Literal(type=INT64, value=1)
    | |   | +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    | |   +-Literal(type=INTERVAL, value=0-0 0 0:0:0.001)
    | +-$col2#2 :=
    |   +-FunctionCall(ZetaSQL:$subtract(INTERVAL, INTERVAL) -> INTERVAL)
    |     +-Literal(type=INTERVAL, value=0-0 0 1:2:3)
    |     +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
    |       +-Literal(type=INT64, value=10)
    |       +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select i * 10, 2 * i, i / 10 from (select interval 1 day as i)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#2 AS `$col1` [INTERVAL]
| +-$query.$col2#3 AS `$col2` [INTERVAL]
| +-$query.$col3#4 AS `$col3` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#2, $col2#3, $col3#4]
    +-expr_list=
    | +-$col1#2 :=
    | | +-FunctionCall(ZetaSQL:$multiply(INTERVAL, INT64) -> INTERVAL)
    | |   +-ColumnRef(type=INTERVAL, column=$subquery1.i#1)
    | |   +-Literal(type=INT64, value=10)
    | +-$col2#3 :=
    | | +-FunctionCall(ZetaSQL:$multiply(INT64, INTERVAL) -> INTERVAL)
    | |   +-Literal(type=INT64, value=2)
    | |   +-ColumnRef(type=INTERVAL, column=$subquery1.i#1)
    | +-$col3#4 :=
    |   +-FunctionCall(ZetaSQL:$divide(INTERVAL, INT64) -> INTERVAL)
    |     +-ColumnRef(type=INTERVAL, column=$subquery1.i#1)
    |     +-Literal(type=INT64, value=10)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.i#1]
        +-expr_list=
        | +-i#1 :=
        |   +-FunctionCall(ZetaSQL:$interval(INT64, ENUM<zetasql.functions.DateTimestampPart>) -> INTERVAL)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
        +-input_scan=
          +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select 10 / INTERVAL '10' YEAR
--
ERROR: No matching signature for operator /
  Argument types: INT64, INTERVAL
  Signature: DOUBLE / DOUBLE
    Argument 2: Unable to coerce type INTERVAL to expected type DOUBLE
  Signature: INTERVAL / INT64
    Argument 1: Unable to coerce type INT64 to expected type INTERVAL [at 1:8]
select 10 / INTERVAL '10' YEAR
       ^
==

[language_features=NONE,+INTERVAL_TYPE,+NAMED_ARGUMENTS]
select
  make_interval(year => 1),
  make_interval(second => 6),
  make_interval(),
  make_interval(1,2,3,4,5,6),
  make_interval(second=>6, minute=>5, hour=>4, day=>3, month=>2, year=>1),
  make_interval(1,2,3),
  make_interval(hour=>4, minute=>5),
  make_interval(second=>6, month=>2),
  make_interval(1, day=>3)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
| +-$query.$col2#2 AS `$col2` [INTERVAL]
| +-$query.$col3#3 AS `$col3` [INTERVAL]
| +-$query.$col4#4 AS `$col4` [INTERVAL]
| +-$query.$col5#5 AS `$col5` [INTERVAL]
| +-$query.$col6#6 AS `$col6` [INTERVAL]
| +-$query.$col7#7 AS `$col7` [INTERVAL]
| +-$query.$col8#8 AS `$col8` [INTERVAL]
| +-$query.$col9#9 AS `$col9` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=6)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=INT64, value=2)
    | |   +-Literal(type=INT64, value=3)
    | |   +-Literal(type=INT64, value=4)
    | |   +-Literal(type=INT64, value=5)
    | |   +-Literal(type=INT64, value=6)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=INT64, value=2)
    | |   +-Literal(type=INT64, value=3)
    | |   +-Literal(type=INT64, value=4)
    | |   +-Literal(type=INT64, value=5)
    | |   +-Literal(type=INT64, value=6)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=1)
    | |   +-Literal(type=INT64, value=2)
    | |   +-Literal(type=INT64, value=3)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=4)
    | |   +-Literal(type=INT64, value=5)
    | |   +-Literal(type=INT64, value=0)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=2)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=0)
    | |   +-Literal(type=INT64, value=6)
    | +-$col9#9 :=
    |   +-FunctionCall(ZetaSQL:make_interval(optional(1) INT64 year, optional(1) INT64 month, optional(1) INT64 day, optional(1) INT64 hour, optional(1) INT64 minute, optional(1) INT64 second) -> INTERVAL)
    |     +-Literal(type=INT64, value=1)
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=3)
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=0)
    |     +-Literal(type=INT64, value=0)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select extract(year from interval '1-2 3 4:5:6.789' year to second),
       extract(month from interval '1-2 3 4:5:6.789' year to second),
       extract(day from interval '1-2 3 4:5:6.789' year to second),
       extract(hour from interval '1-2 3 4:5:6.789' year to second),
       extract(minute from interval '1-2 3 4:5:6.789' year to second),
       extract(second from interval '1-2 3 4:5:6.789' year to second),
       extract(millisecond from interval '1-2 3 4:5:6.789' year to second),
       extract(microsecond from interval '1-2 3 4:5:6.789' year to second),
       extract(nanosecond from interval '1-2 3 4:5:6.789' year to second),
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$query.$col2#2 AS `$col2` [INT64]
| +-$query.$col3#3 AS `$col3` [INT64]
| +-$query.$col4#4 AS `$col4` [INT64]
| +-$query.$col5#5 AS `$col5` [INT64]
| +-$query.$col6#6 AS `$col6` [INT64]
| +-$query.$col7#7 AS `$col7` [INT64]
| +-$query.$col8#8 AS `$col8` [INT64]
| +-$query.$col9#9 AS `$col9` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3, $col4#4, $col5#5, $col6#6, $col7#7, $col8#8, $col9#9]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=YEAR)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MONTH)
    | +-$col3#3 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAY)
    | +-$col4#4 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=HOUR)
    | +-$col5#5 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MINUTE)
    | +-$col6#6 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=SECOND)
    | +-$col7#7 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MILLISECOND)
    | +-$col8#8 :=
    | | +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    | |   +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    | |   +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=MICROSECOND)
    | +-$col9#9 :=
    |   +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-Literal(type=INTERVAL, value=1-2 3 4:5:6.789)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=NANOSECOND)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select justify_hours(interval '1' hour), justify_days(interval '1' day), justify_interval(interval '1' month)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
| +-$query.$col2#2 AS `$col2` [INTERVAL]
| +-$query.$col3#3 AS `$col3` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=$query.[$col1#1, $col2#2, $col3#3]
    +-expr_list=
    | +-$col1#1 :=
    | | +-FunctionCall(ZetaSQL:justify_hours(INTERVAL) -> INTERVAL)
    | |   +-Literal(type=INTERVAL, value=0-0 0 1:0:0)
    | +-$col2#2 :=
    | | +-FunctionCall(ZetaSQL:justify_days(INTERVAL) -> INTERVAL)
    | |   +-Literal(type=INTERVAL, value=0-0 1 0:0:0)
    | +-$col3#3 :=
    |   +-FunctionCall(ZetaSQL:justify_interval(INTERVAL) -> INTERVAL)
    |     +-Literal(type=INTERVAL, value=0-1 0 0:0:0)
    +-input_scan=
      +-SingleRowScan

==

[language_features=NONE,+INTERVAL_TYPE]
SELECT EXTRACT({{DATE|QUARTER}} FROM INTERVAL '0' YEAR)
--
ALTERNATION GROUP: DATE
--
ERROR: No matching signature for function EXTRACT for argument types: DATE FROM INTERVAL
  Signature: EXTRACT(DATE FROM TIMESTAMP [AT TIME ZONE STRING])
    Argument 1: Unable to coerce type INTERVAL to expected type TIMESTAMP [at 1:8]
SELECT EXTRACT(DATE FROM INTERVAL '0' YEAR)
       ^
--
ALTERNATION GROUP: QUARTER
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:$extract(INTERVAL, ENUM<zetasql.functions.DateTimestampPart>) -> INT64)
    |     +-Literal(type=INTERVAL, value=0-0 0 0:0:0)
    |     +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=QUARTER)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select JUSTIFY_INTERVAL(INTERVAL cast(null as string) HOUR TO SECOND)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:justify_interval(INTERVAL) -> INTERVAL)
    |     +-Literal(type=INTERVAL, value=NULL)
    +-input_scan=
      +-SingleRowScan
==

[language_features=NONE,+INTERVAL_TYPE]
select TO_SECONDS_INTERVAL(INTERVAL '1 2' DAY TO HOUR)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(ZetaSQL:to_seconds_interval(INTERVAL) -> INTERVAL)
    |     +-Literal(type=INTERVAL, value=0-0 1 2:0:0)
    +-input_scan=
      +-SingleRowScan
==

[use_database=db1]
[language_features=NONE,+INTERVAL_TYPE{{|,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR}}]
SELECT INTERVAL initialized_constant_string YEAR TO DAY
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING literal [at 1:17]
SELECT INTERVAL initialized_constant_string YEAR TO DAY
                ^
--
ALTERNATION GROUP: ,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=2004-9 25 0:0:0)
    +-input_scan=
      +-SingleRowScan
==

# We should not test uninitialized constants with feature
# ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR because the feature acts as a contract
# stating that the constant_evaluator is provided which will then intialize the
# constant.
[use_database=db1]
[language_features=NONE,+INTERVAL_TYPE]
SELECT INTERVAL uninitialized_constant_string YEAR TO DAY
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING literal [at 1:17]
SELECT INTERVAL uninitialized_constant_string YEAR TO DAY
                ^
==

[use_database=db1]
[language_features=NONE,+INTERVAL_TYPE{{|,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR}}]
SELECT INTERVAL initialized_constant_double  YEAR TO DAY
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING literal [at 1:17]
SELECT INTERVAL initialized_constant_double  YEAR TO DAY
                ^
--
ALTERNATION GROUP: ,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR
--
ERROR: Expected a STRING value knowable at compile time in INTERVAL constructor, but got an expression of type DOUBLE [at 1:17]
SELECT INTERVAL initialized_constant_double  YEAR TO DAY
                ^
==

[use_database=db1]
[language_features=NONE,+INTERVAL_TYPE{{|,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR}}]
SELECT INTERVAL initialized_invalid_string YEAR TO DAY
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING literal [at 1:17]
SELECT INTERVAL initialized_invalid_string YEAR TO DAY
                ^
--
ALTERNATION GROUP: ,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR
--
ERROR: Invalid INTERVAL value 'INVALID STRING' [at 1:8]
SELECT INTERVAL initialized_invalid_string YEAR TO DAY
       ^
==

[use_database=db1]
[language_features=NONE,+INTERVAL_TYPE,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR]
SELECT INTERVAL NULL_STRING YEAR TO MONTH;
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=NULL)
    +-input_scan=
      +-SingleRowScan
==

[use_database=db1]
[language_features=NONE,+INTERVAL_TYPE{{|,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR}}]
SELECT INTERVAL initialized_year_string YEAR;
--
ALTERNATION GROUP: <empty>
--
ERROR: Invalid interval literal. Expected INTERVAL keyword to be followed by an INT64 expression or STRING literal [at 1:17]
SELECT INTERVAL initialized_year_string YEAR;
                ^
--
ALTERNATION GROUP: ,+ANALYSIS_CONSTANT_INTERVAL_CONSTRUCTOR
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INTERVAL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 := Literal(type=INTERVAL, value=2025-0 0 0:0:0)
    +-input_scan=
      +-SingleRowScan
