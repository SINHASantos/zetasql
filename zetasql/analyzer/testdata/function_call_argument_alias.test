# Function call argument alias is disallowed for scalar function
[default language_features=MAXIMUM]
SELECT concat("Hello" AS str1, " World!" AS str2)
--
ERROR: Unexpected function call argument alias found at concat [at 1:23]
SELECT concat("Hello" AS str1, " World!" AS str2)
                      ^
==

[language_features=NONE,+ARRAY_FIND_FUNCTIONS]
SELECT ARRAY_FIND([1, 2] AS arr1, 1)
--
ERROR: Unexpected function call argument alias found at ARRAY_FIND [at 1:26]
SELECT ARRAY_FIND([1, 2] AS arr1, 1)
                         ^
==

# STRUCT subscript access does not support argument aliases.
SELECT s1[OFFSET(1 AS offset)]
FROM (SELECT AS STRUCT 1 AS a, 2 AS b) s1
--
ERROR: Unexpected function call argument alias found at OFFSET [at 1:20]
SELECT s1[OFFSET(1 AS offset)]
                   ^
==

SELECT s1[OFFSET(1) AS offset]
FROM (SELECT AS STRUCT 1 AS a, 2 AS b) s1
--
ERROR: Syntax error: Expected "]" but got keyword AS [at 1:21]
SELECT s1[OFFSET(1) AS offset]
                    ^
==

# Function call argument alias is disallowed for aggregate function
SELECT SUM(x AS agg)
FROM (SELECT 1 AS x)
--
ERROR: Unexpected function call argument alias found at SUM [at 1:14]
SELECT SUM(x AS agg)
             ^
==

[language_features=NONE,+SAFE_FUNCTION_CALL]
SELECT SAFE.CONCAT("HELLO", " WORLD" AS str2)
--
ERROR: Unexpected function call argument alias found at SAFE.CONCAT [at 1:38]
SELECT SAFE.CONCAT("HELLO", " WORLD" AS str2)
                                     ^
==

# Date functions do not allow argument aliases.
SELECT DATE('1999-01-01' AS date_alias);
--
ERROR: Unexpected function call argument alias found at DATE [at 1:26]
SELECT DATE('1999-01-01' AS date_alias);
                         ^
==

# Proto extraction does not allow argument aliases.
[language_features=NONE,+EXTRACT_FROM_PROTO]
SELECT EXTRACT(FIELD(int32_val AS alias) from KitchenSink)
from TestTable
--
ERROR: Unexpected function call argument alias found at FIELD [at 1:32]
SELECT EXTRACT(FIELD(int32_val AS alias) from KitchenSink)
                               ^
==

# Analytic function that does not support argument aliases.
[language_features=NONE,+ANALYTIC_FUNCTIONS]
SELECT COUNT(DISTINCT (int64 + 1) AS int64) OVER ()
FROM SimpleTypes
--
ERROR: Unexpected function call argument alias found at COUNT [at 1:35]
SELECT COUNT(DISTINCT (int64 + 1) AS int64) OVER ()
                                  ^
==

# Array subscript access does not support argument aliases.
SELECT [1, 2][OFFSET(1 AS offset_alias)]
--
ERROR: Unexpected function call argument alias found at OFFSET [at 1:24]
SELECT [1, 2][OFFSET(1 AS offset_alias)]
                       ^
==

# Array subscript access without wrappers does not support argument aliases
# (disallowed by the grammar).
SELECT [1, 2][0 AS offset_alias]
--
ERROR: Syntax error: Expected "]" but got keyword AS [at 1:17]
SELECT [1, 2][0 AS offset_alias]
                ^
==

# Non-array subscript access does not support argument aliases.
SELECT "ABC"[OFFSET(0 AS offset_alias)]
--
ERROR: Unexpected function call argument alias found at OFFSET [at 1:23]
SELECT "ABC"[OFFSET(0 AS offset_alias)]
                      ^
==

# The grammar does not allow TVFs to have argument aliases.
SELECT *
FROM tvf_one_relation_arg_with_fixed_output(
  (SELECT 1 AS A, 2 AS B) AS relation_alias
)
--
ERROR: Syntax error: Expected ")" but got keyword AS [at 3:27]
  (SELECT 1 AS A, 2 AS B) AS relation_alias
                          ^
==

# The grammar does not allow procedure calls to have argument aliases.
call nested_catalog.nested_procedure(1 AS alias)
--
ERROR: Syntax error: Expected ")" or "," but got keyword AS [at 1:40]
call nested_catalog.nested_procedure(1 AS alias)
                                       ^
==

# Currently alias validation for functions in nested catalogs is missing, see
# b/297937314.
# TODO: Fix the bug and update the test output.
select KLL_QUANTILES.extract_int64(b"" AS sketch, 2)
--
ERROR: Unexpected function call argument alias found at KLL_QUANTILES.extract_int64 [at 1:40]
select KLL_QUANTILES.extract_int64(b"" AS sketch, 2)
                                       ^
==

# Optional argument not provided.
SELECT fn_for_argument_alias(TRUE AS alias1, FALSE)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(BOOL, BOOL, optional(0) STRING) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=BOOL, value=true)
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
==

# Optional argument provided w/o alias.
SELECT fn_for_argument_alias(TRUE AS alias1, FALSE, "STRING")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(BOOL, BOOL, optional(1) STRING) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=BOOL, value=true)
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=STRING, value="STRING")
    +-input_scan=
      +-SingleRowScan
==

# Optional argument provided with alias.
SELECT fn_for_argument_alias(TRUE AS alias1, FALSE, "STRING" AS alias2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(BOOL, BOOL, optional(1) STRING) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=BOOL, value=true)
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |       +-expr=
    |       | +-Literal(type=STRING, value="STRING")
    |       +-argument_alias="alias2"
    +-input_scan=
      +-SingleRowScan
==

# NON-ALIASED arguments cannot have aliases.
SELECT fn_for_argument_alias(TRUE AS alias1, FALSE AS alias_disallowed, "STRING" AS alias2)
--
ERROR: Unexpected function call argument alias found at fn_for_argument_alias [at 1:52]
SELECT fn_for_argument_alias(TRUE AS alias1, FALSE AS alias_disallowed, "STRI...
                                                   ^
==

# Repeated argument 0 ocurrences.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(STRING, BOOL, repeated(0) INT64) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="STRING")
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=BOOL, value=false)
    +-input_scan=
      +-SingleRowScan
==

# Repeated argument one ocurrence w/o alias.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE, 1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(STRING, BOOL, repeated(1) INT64) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="STRING")
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=1)
    +-input_scan=
      +-SingleRowScan
==

# Repeated argument one ocurrence with alias.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE, 1 AS alias2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(STRING, BOOL, repeated(1) INT64) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="STRING")
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |       +-expr=
    |       | +-Literal(type=INT64, value=1)
    |       +-argument_alias="alias2"
    +-input_scan=
      +-SingleRowScan
==

# Repeated argument two occurrences both with aliases.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE, 1 AS alias2, 2 AS alias3)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(STRING, BOOL, repeated(2) INT64) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="STRING")
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=INT64, value=1)
    |     | +-argument_alias="alias2"
    |     +-FunctionArgument
    |       +-expr=
    |       | +-Literal(type=INT64, value=2)
    |       +-argument_alias="alias3"
    +-input_scan=
      +-SingleRowScan
==

# Repeated argument two occurrences first with alias.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE, 1 AS alias2, 2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(STRING, BOOL, repeated(2) INT64) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="STRING")
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=INT64, value=1)
    |     | +-argument_alias="alias2"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# Repeated argument two occurrences second with alias.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE, 1, 2 AS alias2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_for_argument_alias(STRING, BOOL, repeated(2) INT64) -> BOOL)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="STRING")
    |     | +-argument_alias="alias1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BOOL, value=false)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=INT64, value=1)
    |     +-FunctionArgument
    |       +-expr=
    |       | +-Literal(type=INT64, value=2)
    |       +-argument_alias="alias2"
    +-input_scan=
      +-SingleRowScan
==

# Aliases are not allowed on NON-ALIASED arguments.
SELECT fn_for_argument_alias("STRING" AS alias1, FALSE AS alias_disallowed, 1, 2 AS alias2)
--
ERROR: Unexpected function call argument alias found at fn_for_argument_alias [at 1:56]
...fn_for_argument_alias("STRING" AS alias1, FALSE AS alias_disallowed, 1, 2 ...
                                                   ^
==

# Argument aliases on aggregate functions: ok to not provide an alias for the
# aliased argument.
SELECT aggregate_fn_for_argument_alias(key, value)
FROM keyvalue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(sample_functions:aggregate_fn_for_argument_alias(INT64, STRING) -> INT64)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

# Argument aliases on aggregate functions: ok to provide an alias for the
# aliased argument.
# TODO: Note the argument alias information is not stored in the
# resolved ast because aggregate functions do not support
# `generic_argument_list` yet.
SELECT aggregate_fn_for_argument_alias(key AS alias, value)
FROM keyvalue
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#3 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(sample_functions:aggregate_fn_for_argument_alias(INT64, STRING) -> INT64)
              +-ColumnRef(type=INT64, column=KeyValue.Key#1)
              +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

# Argument aliases on aggregate functions: errors when an alias is provided for
# the non-aliased argument.
SELECT aggregate_fn_for_argument_alias(key, value AS invalid_alias)
FROM keyvalue
--
ERROR: Unexpected function call argument alias found at aggregate_fn_for_argument_alias [at 1:51]
SELECT aggregate_fn_for_argument_alias(key, value AS invalid_alias)
                                                  ^
==

[language_features=NONE,+ANALYTIC_FUNCTIONS]
# Argument aliases on analytic functions: ok to not provide an alias for the
# aliased argument.
SELECT analytic_fn_for_argument_alias(key, value) over (ORDER BY key)
FROM keyvalue
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(sample_functions:analytic_fn_for_argument_alias(INT64, STRING) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

[language_features=NONE,+ANALYTIC_FUNCTIONS]
# Argument aliases on analytic functions: ok to provide an alias for the aliased
# argument. Note the argument alias information is not stored in the resolved
# ast because window functions do not support `generic_argument_list` yet.
SELECT analytic_fn_for_argument_alias(key AS alias, value) over (ORDER BY key)
FROM keyvalue
--
QueryStmt
+-output_column_list=
| +-$analytic.$analytic1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$analytic.$analytic1#4]
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(sample_functions:analytic_fn_for_argument_alias(INT64, STRING) -> INT64)
                  +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-ColumnRef(type=STRING, column=KeyValue.Value#2)
==

[language_features=NONE,+ANALYTIC_FUNCTIONS]
# Argument aliases on analytic functions: cannot provide an alias for the
# non-aliased argument.
SELECT analytic_fn_for_argument_alias(key, value AS invalid_alias) over (ORDER BY key)
FROM keyvalue
--
ERROR: Unexpected function call argument alias found at analytic_fn_for_argument_alias [at 3:50]
SELECT analytic_fn_for_argument_alias(key, value AS invalid_alias) over (ORDE...
                                                 ^
==

# Functions with argument aliases in nested catalog: ok to not provide an alias
# for the aliased argument.
SELECT nested_catalog.fn_for_argument_alias(1, "string")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:nested_catalog.fn_for_argument_alias(INT64, STRING) -> INT64)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=INT64, value=1)
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=STRING, value="string")
    +-input_scan=
      +-SingleRowScan
==

# Functions with argument aliases in nested catalog: ok to provide an alias for
# the aliased argument.
SELECT nested_catalog.fn_for_argument_alias(1 AS alias, "string")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:nested_catalog.fn_for_argument_alias(INT64, STRING) -> INT64)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=INT64, value=1)
    |     | +-argument_alias="alias"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=STRING, value="string")
    +-input_scan=
      +-SingleRowScan
==

# Functions with argument aliases in nested catalog: errors when an alias is
# provided for the non-aliased argument.
SELECT nested_catalog.fn_for_argument_alias(1 AS alias, "string" AS invalid_alias)
--
ERROR: Unexpected function call argument alias found at nested_catalog.fn_for_argument_alias [at 1:66]
...fn_for_argument_alias(1 AS alias, "string" AS invalid_alias)
                                              ^
==

# The following test cases with `fn_to_struct_with_optional_aliases` do not have
# java tests because the function has a ComputeResultTypeCallback.
#
# Signature does not allow argument aliases, and no aliases are provided. No
# `InputArgumentType` has aliases stored, so the default "no_alias_<i>" is used.
[no_java]
SELECT fn_to_struct_with_optional_aliases(TRUE, TRUE)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<no_alias_0 BOOL, no_alias_1 BOOL>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BOOL, BOOL) -> STRUCT<no_alias_0 BOOL, no_alias_1 BOOL>)
    |     +-Literal(type=BOOL, value=true)
    |     +-Literal(type=BOOL, value=true)
    +-input_scan=
      +-SingleRowScan
==

# Signature does not allow argument aliases, but an alias is provided. A sql
# error should occur.
[no_java]
SELECT fn_to_struct_with_optional_aliases(TRUE AS alias_0, TRUE)
--
ERROR: Unexpected function call argument alias found at fn_to_struct_with_optional_aliases [at 1:48]
SELECT fn_to_struct_with_optional_aliases(TRUE AS alias_0, TRUE)
                                               ^
==

# Signature allows the first argument to have an alias, but the function call
# does not specify one. An alias is generated and is used as the corresponding
# struct field name.
[no_java]
SELECT fn_to_struct_with_optional_aliases(int64, 2)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<int64 INT64, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(INT64, INT64) -> STRUCT<int64 INT64, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="int64"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
==

# Similar to the test case above but with type coercion. An alias should still
# be generated for `int32`.
[no_java]
SELECT fn_to_struct_with_optional_aliases(int32, 2)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<int32 INT64, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(INT64, INT64) -> STRUCT<int32 INT64, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Cast(INT32 -> INT64)
    |     | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     | +-argument_alias="int32"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
==

# Similar to the test case above but with literal coercion. An empty alias is
# generated for the first argument.
[no_java]
SELECT fn_to_struct_with_optional_aliases(1, 2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<INT64, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(INT64, INT64) -> STRUCT<INT64, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=INT64, value=1)
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# Signature allows the first argument to have an alias, and the function call
# provides an alias, which will be used as the corresponding struct field name.
[no_java]
SELECT fn_to_struct_with_optional_aliases(int64 AS alias_0, 2)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<alias_0 INT64, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(INT64, INT64) -> STRUCT<alias_0 INT64, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="alias_0"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
==

# Similar to the test case above but with type coercion.
[no_java]
SELECT fn_to_struct_with_optional_aliases(int32 AS alias_0, 2)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<alias_0 INT64, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(INT64, INT64) -> STRUCT<alias_0 INT64, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Cast(INT32 -> INT64)
    |     | |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    |     | +-argument_alias="alias_0"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
==

# Similar to the test case above but with literal coercion.
[no_java]
SELECT fn_to_struct_with_optional_aliases(1 AS alias_0, 2)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<alias_0 INT64, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(INT64, INT64) -> STRUCT<alias_0 INT64, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=INT64, value=1)
    |     | +-argument_alias="alias_0"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# Signature allows both the arguments to have aliases, but the function call
# does not supply aliases.
[no_java]
SELECT fn_to_struct_with_optional_aliases(string, string)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<string STRING, string STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(STRING, STRING) -> STRUCT<string STRING, string STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     | +-argument_alias="string"
    |     +-FunctionArgument
    |       +-expr=
    |       | +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |       +-argument_alias="string"
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Signature allows both the arguments to have aliases, but the function call
# only provides an alias for the 2nd argument.
# Because the first argument is a literal, its generated alias is an empty string.
[no_java]
SELECT fn_to_struct_with_optional_aliases("a", "b" AS alias_1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<STRING, alias_1 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(STRING, STRING) -> STRUCT<STRING, alias_1 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=STRING, value="a")
    |     +-FunctionArgument
    |       +-expr=
    |       | +-Literal(type=STRING, value="b")
    |       +-argument_alias="alias_1"
    +-input_scan=
      +-SingleRowScan
==

# Signature allows both the arguments to have aliases, and the function call
# provides aliases for both.
[no_java]
SELECT fn_to_struct_with_optional_aliases("a" AS alias_0, "b" AS alias_1)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<alias_0 STRING, alias_1 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(STRING, STRING) -> STRUCT<alias_0 STRING, alias_1 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=STRING, value="a")
    |     | +-argument_alias="alias_0"
    |     +-FunctionArgument
    |       +-expr=
    |       | +-Literal(type=STRING, value="b")
    |       +-argument_alias="alias_1"
    +-input_scan=
      +-SingleRowScan
==

# Signature with optional arguments. No arguments. Because the arguments have
# default values, an alias (empty string) is still generated for the first
# argument.
[no_java]
SELECT fn_to_struct_with_optional_aliases()
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<STRING, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(optional(1) STRING, optional(1) INT64) -> STRUCT<STRING, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=STRING, value="default_string")
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=100)
    +-input_scan=
      +-SingleRowScan
==

# Signature with optional arguments. The first argument is provided without
# alias, and the 2nd argument is not provided.
[no_java]
SELECT fn_to_struct_with_optional_aliases(string)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<string STRING, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(optional(1) STRING, optional(1) INT64) -> STRUCT<string STRING, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     | +-argument_alias="string"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=100)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Signature with optional arguments. Both the arguments are provided without
# aliases.
[no_java]
SELECT fn_to_struct_with_optional_aliases(string, 1)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<string STRING, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(optional(1) STRING, optional(1) INT64) -> STRUCT<string STRING, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     | +-argument_alias="string"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Signature with optional arguments. Both the arguments are provided and the
# first one has an alias.
[no_java]
SELECT fn_to_struct_with_optional_aliases(string AS alias_0, 1)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<alias_0 STRING, no_alias_1 INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(optional(1) STRING, optional(1) INT64) -> STRUCT<alias_0 STRING, no_alias_1 INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     | +-argument_alias="alias_0"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
==

# Signature with repeated arguments. Arguments are not provided.
[no_java]
SELECT fn_to_struct_with_optional_aliases(b"")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<no_alias_0 BYTES>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BYTES, repeated(0) INT64, repeated(0) STRING) -> STRUCT<no_alias_0 BYTES>)
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=BYTES, value=b"")
    +-input_scan=
      +-SingleRowScan
==

# Signature with repeated arguments repeated once without aliases. An alias
# (empty string) is generated for the 2nd argument.
[no_java]
SELECT fn_to_struct_with_optional_aliases(b"", 1, "string")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<no_alias_0 BYTES, INT64, no_alias_2 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BYTES, repeated(1) INT64, repeated(1) STRING) -> STRUCT<no_alias_0 BYTES, INT64, no_alias_2 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BYTES, value=b"")
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=INT64, value=1)
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=STRING, value="string")
    +-input_scan=
      +-SingleRowScan
==

# Signature with repeated arguments repeated once with aliases.
[no_java]
SELECT fn_to_struct_with_optional_aliases(b"", 1 AS alias_1, "string")
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [STRUCT<no_alias_0 BYTES, alias_1 INT64, no_alias_2 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1]
    +-expr_list=
    | +-$col1#1 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BYTES, repeated(1) INT64, repeated(1) STRING) -> STRUCT<no_alias_0 BYTES, alias_1 INT64, no_alias_2 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=BYTES, value=b"")
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-Literal(type=INT64, value=1)
    |     | +-argument_alias="alias_1"
    |     +-FunctionArgument
    |       +-expr=
    |         +-Literal(type=STRING, value="string")
    +-input_scan=
      +-SingleRowScan
==

# Signature with repeated arguments repeated twice without aliases. Both
# occurrences of int64 are generated with aliases.
[no_java]
SELECT fn_to_struct_with_optional_aliases(bytes, int64, string, int64, string)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<no_alias_0 BYTES, int64 INT64, no_alias_2 STRING, int64 INT64, no_alias_4 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BYTES, repeated(2) INT64, repeated(2) STRING) -> STRUCT<no_alias_0 BYTES, int64 INT64, no_alias_2 STRING, int64 INT64, no_alias_4 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="int64"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="int64"
    |     +-FunctionArgument
    |       +-expr=
    |         +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, string#5, bytes#6], table=SimpleTypes, column_index_list=[1, 4, 5])
==

# Signature with repeated arguments repeated twice with aliases.
[no_java]
SELECT fn_to_struct_with_optional_aliases(bytes, int64 AS alias_1, string, int64 AS alias_3, string)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<no_alias_0 BYTES, alias_1 INT64, no_alias_2 STRING, alias_3 INT64, no_alias_4 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BYTES, repeated(2) INT64, repeated(2) STRING) -> STRUCT<no_alias_0 BYTES, alias_1 INT64, no_alias_2 STRING, alias_3 INT64, no_alias_4 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="alias_1"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="alias_3"
    |     +-FunctionArgument
    |       +-expr=
    |         +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, string#5, bytes#6], table=SimpleTypes, column_index_list=[1, 4, 5])
==

# Signature with repeated arguments repeated twice and only the second
# occurrence has an alias.
[no_java]
SELECT fn_to_struct_with_optional_aliases(bytes, int64, string, int64 AS alias_3, string)
FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$query.$col1#20 AS `$col1` [STRUCT<no_alias_0 BYTES, int64 INT64, no_alias_2 STRING, alias_3 INT64, no_alias_4 STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#20]
    +-expr_list=
    | +-$col1#20 :=
    |   +-FunctionCall(sample_functions:fn_to_struct_with_optional_aliases(BYTES, repeated(2) INT64, repeated(2) STRING) -> STRUCT<no_alias_0 BYTES, int64 INT64, no_alias_2 STRING, alias_3 INT64, no_alias_4 STRING>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=BYTES, column=SimpleTypes.bytes#6)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="int64"
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    |     +-FunctionArgument
    |     | +-expr=
    |     | | +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    |     | +-argument_alias="alias_3"
    |     +-FunctionArgument
    |       +-expr=
    |         +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
    +-input_scan=
      +-TableScan(column_list=SimpleTypes.[int64#2, string#5, bytes#6], table=SimpleTypes, column_index_list=[1, 4, 5])
