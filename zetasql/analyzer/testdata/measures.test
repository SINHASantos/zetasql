# Success tests for MEASURE type. Cases which are supposed to be success should
# be here (even if they currently error), while cases that are supposed to be
# errors should be in measures_errors.test (even if they currently succeed).
#
# TODO: b/350555383 - Java support requires the ability to serialize and
# deserialize the measure expression, which is currently stored as string in the
# ExpressionAttributesProto on columns. The Java serialization/deserialization
# code needs to be updated to be aware of this field.
[default no_java]
[default language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT]
[default enabled_ast_rewrites=DEFAULTS,+MEASURE_TYPE]
[default sql_builder_target_syntax_mode=standard]
[default show_sqlbuilder_output]

# AGG(MEASURE<T>) -> T
SELECT
  key,
  AGG(measure_sum_quantity)
FROM MeasureTable_SingleKey GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#16 AS key [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 8])
        +-group_by_list=
        | +-key#16 := ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS key,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.measure_sum_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#16 AS key [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#16, $aggregate.constituent_aggregate_1#19]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#1, quantity#17, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#18]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#18 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#17)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, quantity#17, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
            +-group_by_list=
            | +-key#16 := ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#19 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
                  +-group_by_list=
                  | +-grain_lock_key#21 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#20 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_7 AS key,
  aggregatescan_9.a_8 AS a_10
FROM
  (
    SELECT
      projectscan_6.a_1 AS a_7,
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.quantity)
        GROUP BY projectscan_6.a_5.key_columns) AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_9;
==

# Measure-typed columns can propoagate through WITH clauses (i.e. measure
# column renames are handled correctly)
WITH t AS (
  SELECT measure_sum_quantity AS renamed_measure FROM MeasureTable_SingleKey
) SELECT AGG(renamed_measure) FROM (SELECT * FROM t)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#16]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#16]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[t.renamed_measure#15]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[t.renamed_measure#15], with_query_name="t")
            +-aggregate_list=
              +-$agg1#16 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t.renamed_measure#15)

[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_quantity AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(projectscan_3.a_1) AS a_4
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      t AS withrefscan_2
  ) AS projectscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#16]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#19]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#17, quantity#18, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#19]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#19 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#18)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#17, quantity#18, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#16]
            +-expr_list=
            | +-$agg1#16 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#21]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=t.[renamed_measure#15, struct_for_measures_from_table_t#20]
                |   +-input_scan=
                |     +-WithRefScan(column_list=t.[renamed_measure#15, struct_for_measures_from_table_t#20], with_query_name="t")
                +-aggregate_list=
                  +-constituent_aggregate_1#21 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
                      +-group_by_list=
                      | +-grain_lock_key#23 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measures_from_table_t#20)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#22 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measures_from_table_t#20)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_10.a_9 AS a_11
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_8.a_5.referenced_columns.quantity)
        GROUP BY projectscan_8.a_5.key_columns) AS a_9
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          t AS withrefscan_7
      ) AS projectscan_8
  ) AS aggregatescan_10;
==

# Measure-typed columns can propoagate through WITH clauses (i.e. measure
# column renames are handled correctly)
WITH t1 AS (
  SELECT measure_sum_quantity AS rename_1 FROM MeasureTable_SingleKey
), t2 AS (
  SELECT rename_1 AS rename_2 FROM t1
) SELECT AGG(rename_2) FROM (SELECT * FROM t2)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    | |     +-input_scan=
    | |       +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[t1.rename_1#15]
    |       +-input_scan=
    |         +-WithRefScan(column_list=[t1.rename_1#15], with_query_name="t1")
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[t2.rename_2#16]
            |   +-input_scan=
            |     +-WithRefScan(column_list=[t2.rename_2#16], with_query_name="t2")
            +-aggregate_list=
              +-$agg1#17 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t2.rename_2#16)

[SQLBUILDER_OUTPUT]
WITH
  t1 AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_quantity AS a_1
    FROM
      MeasureTable_SingleKey
  ),
  t2 AS (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      t1 AS withrefscan_2
  )
SELECT
  AGG(projectscan_4.a_1) AS a_5
FROM
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      t2 AS withrefscan_3
  ) AS projectscan_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="t1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#20]
    | |     +-input_scan=
    | |       +-ProjectScan
    | |         +-column_list=MeasureTable_SingleKey.[key#18, quantity#19, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#20]
    | |         +-expr_list=
    | |         | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
    | |         |   +-MakeStruct
    | |         |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    | |         |     +-field_list=
    | |         |       +-MakeStruct
    | |         |       | +-type=STRUCT<quantity INT64>
    | |         |       | +-field_list=
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
    | |         |       +-MakeStruct
    | |         |         +-type=STRUCT<key INT64>
    | |         |         +-field_list=
    | |         |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#18)
    | |         +-input_scan=
    | |           +-TableScan(column_list=MeasureTable_SingleKey.[key#18, quantity#19, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
    | +-WithEntry
    |   +-with_query_name="t2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=t1.[rename_1#15, struct_for_measures_from_table_t1#21]
    |       +-input_scan=
    |         +-WithRefScan(column_list=t1.[rename_1#15, struct_for_measures_from_table_t1#21], with_query_name="t1")
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#17]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#23)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#23]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=t2.[rename_2#16, struct_for_measures_from_table_t2#22]
                |   +-input_scan=
                |     +-WithRefScan(column_list=t2.[rename_2#16, struct_for_measures_from_table_t2#22], with_query_name="t2")
                +-aggregate_list=
                  +-constituent_aggregate_1#23 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#24)
                      +-group_by_list=
                      | +-grain_lock_key#25 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t2.struct_for_measures_from_table_t2#22)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#24 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t2.struct_for_measures_from_table_t2#22)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t1 AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  ),
  t2 AS (
    SELECT
      withrefscan_7.a_3 AS a_3,
      withrefscan_7.a_5 AS a_5
    FROM
      t1 AS withrefscan_7
  )
SELECT
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_9.a_5.referenced_columns.quantity)
        GROUP BY projectscan_9.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          t2 AS withrefscan_8
      ) AS projectscan_9
  ) AS aggregatescan_11;
==

# Measures can be described by Pipe STATIC_DESCRIBE
[language_features=NONE,+ENABLE_MEASURES,+PIPES,+PIPE_STATIC_DESCRIBE]
FROM MeasureTable_SingleKey
|> STATIC_DESCRIBE
|> SELECT key
--
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1]
    +-input_scan=
      +-StaticDescribeScan
        +-column_list=[MeasureTable_SingleKey.key#1]
        +-describe_text=
        |   """
        |   NameList:
        |     key INT64 MeasureTable_SingleKey.key#1
        |     country STRING MeasureTable_SingleKey.country#2
        |     quantity INT64 MeasureTable_SingleKey.quantity#3
        |     price INT64 MeasureTable_SingleKey.price#4
        |     measure_count_star MEASURE<INT64> MeasureTable_SingleKey.measure_count_star#5
        |     measure_count_star_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_star_per_key#6
        |     measure_count_distinct_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_distinct_key#7
        |     measure_count_key_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_key_per_key#8
        |     measure_sum_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_quantity#9
        |     measure_sum_price MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price#10
        |     measure_sum_price_times_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price_times_quantity#11
        |     measure_ratio_price_to_quantity MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity#12
        |     measure_ratio_price_to_quantity_per_key MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13
        |     measure_complex_ratio_metric MEASURE<DOUBLE> MeasureTable_SingleKey.measure_complex_ratio_metric#14
        |   NameScope:
        |     Names:
        |       country -> STRING (MeasureTable_SingleKey.country#2) (implicit)
        |       key -> INT64 (MeasureTable_SingleKey.key#1) (implicit)
        |       measure_complex_ratio_metric -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_complex_ratio_metric#14) (implicit)
        |       measure_count_distinct_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_distinct_key#7) (implicit)
        |       measure_count_key_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_key_per_key#8) (implicit)
        |       measure_count_star -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star#5) (implicit)
        |       measure_count_star_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star_per_key#6) (implicit)
        |       measure_ratio_price_to_quantity -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity#12) (implicit)
        |       measure_ratio_price_to_quantity_per_key -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13) (implicit)
        |       measure_sum_price -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price#10) (implicit)
        |       measure_sum_price_times_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price_times_quantity#11) (implicit)
        |       measure_sum_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_quantity#9) (implicit)
        |       price -> INT64 (MeasureTable_SingleKey.price#4) (implicit)
        |       quantity -> INT64 (MeasureTable_SingleKey.quantity#3) (implicit)
        |     Range variables:
        |       MeasureTable_SingleKey -> RANGE_VARIABLE<key,country,quantity,price,measure_count_star,measure_count_star_per_key,measure_count_distinct_key,measure_count_key_per_key,measure_sum_quantity,measure_sum_price,measure_sum_price_times_quantity,measure_ratio_price_to_quantity,measure_ratio_price_to_quantity_per_key,measure_complex_ratio_metric>
        |   """
        +-input_scan=
          +-TableScan(column_list=[MeasureTable_SingleKey.key#1], table=MeasureTable_SingleKey, column_index_list=[0])

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_2.a_1 AS key
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2;
==

SELECT
  country,
  AGG(measure_count_key_per_key)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_count_key_per_key#8], table=MeasureTable_SingleKey, column_index_list=[1, 7])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_count_key_per_key#8)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_count_key_per_key AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#20)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#20]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, measure_count_key_per_key#8, struct_for_measures_from_table_MeasureTable_SingleKey#18]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#18 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, measure_count_key_per_key#8], table=MeasureTable_SingleKey, column_index_list=[0, 1, 7])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#20 :=
                +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                  +-Literal(type=INT64, value=1)
                  +-group_by_list=
                    +-$groupbymod#19 :=
                      +-GetStructField
                        +-type=INT64
                        +-expr=
                        | +-GetStructField
                        |   +-type=STRUCT<key INT64>
                        |   +-expr=
                        |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                        |   +-field_idx=0
                        +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_7 AS country,
  aggregatescan_9.a_8 AS a_10
FROM
  (
    SELECT
      projectscan_6.a_2 AS a_7,
      COUNT(1
        GROUP BY projectscan_6.a_5.referenced_columns.key) AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< key INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< key INT64 >
            (measuretable_singlekey_4.a_1), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.measure_count_key_per_key AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_9;
==

SELECT
  country,
  AGG(measure_sum_price_times_quantity)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_sum_price_times_quantity#11], table=MeasureTable_SingleKey, column_index_list=[1, 10])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price_times_quantity#11)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_sum_price_times_quantity#11, struct_for_measures_from_table_MeasureTable_SingleKey#20]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_sum_price_times_quantity#11], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 10])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
                  +-group_by_list=
                  | +-grain_lock_key#23 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#22 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
                          +-GetStructField
                          | +-type=INT64
                          | +-expr=
                          | | +-GetStructField
                          | |   +-type=STRUCT<price INT64, quantity INT64>
                          | |   +-expr=
                          | |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                          | |   +-field_idx=0
                          | +-field_idx=0
                          +-GetStructField
                            +-type=INT64
                            +-expr=
                            | +-GetStructField
                            |   +-type=STRUCT<price INT64, quantity INT64>
                            |   +-expr=
                            |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                            |   +-field_idx=0
                            +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_9 AS country,
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE((projectscan_8.a_7.referenced_columns.price) * (projectscan_8.a_7.referenced_columns.quantity))
        GROUP BY projectscan_8.a_7.key_columns) AS a_10
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_4, measuretable_singlekey_6.a_3), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.price AS a_4,
              MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_11;
==

SELECT
  country,
  AGG(measure_sum_price_times_quantity)
FROM MeasureTable_TwoKeys
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_TwoKeys.[country#3, measure_sum_price_times_quantity#11], table=MeasureTable_TwoKeys, column_index_list=[2, 10])
        +-group_by_list=
        | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
        +-aggregate_list=
          +-$agg1#14 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_TwoKeys.measure_sum_price_times_quantity#11)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_twokeys_3.a_1 AS country,
  AGG(measuretable_twokeys_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_TwoKeys.country AS a_1,
      MeasureTable_TwoKeys.measure_sum_price_times_quantity AS a_2
    FROM
      MeasureTable_TwoKeys
  ) AS measuretable_twokeys_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-expr_list=
        | +-$agg1#14 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#15, $aggregate.constituent_aggregate_1#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_sum_price_times_quantity#11, struct_for_measures_from_table_MeasureTable_TwoKeys#20]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_TwoKeys#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key1 INT64, key2 INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key1#16)
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key2#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_sum_price_times_quantity#11], table=MeasureTable_TwoKeys, column_index_list=[0, 1, 2, 3, 4, 10])
            +-group_by_list=
            | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
                  +-group_by_list=
                  | +-grain_lock_key#23 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key1 INT64, key2 INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#22 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
                          +-GetStructField
                          | +-type=INT64
                          | +-expr=
                          | | +-GetStructField
                          | |   +-type=STRUCT<price INT64, quantity INT64>
                          | |   +-expr=
                          | |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
                          | |   +-field_idx=0
                          | +-field_idx=0
                          +-GetStructField
                            +-type=INT64
                            +-expr=
                            | +-GetStructField
                            |   +-type=STRUCT<price INT64, quantity INT64>
                            |   +-expr=
                            |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
                            |   +-field_idx=0
                            +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_10 AS country,
  aggregatescan_12.a_11 AS a_13
FROM
  (
    SELECT
      projectscan_9.a_3 AS a_10,
      SUM(ANY_VALUE((projectscan_9.a_8.referenced_columns.price) * (projectscan_9.a_8.referenced_columns.quantity))
        GROUP BY projectscan_9.a_8.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_twokeys_7.a_1 AS a_1,
          measuretable_twokeys_7.a_2 AS a_2,
          measuretable_twokeys_7.a_3 AS a_3,
          measuretable_twokeys_7.a_4 AS a_4,
          measuretable_twokeys_7.a_5 AS a_5,
          measuretable_twokeys_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key1 INT64, key2 INT64 >
          > (STRUCT< price INT64, quantity INT64 > (measuretable_twokeys_7.a_5, measuretable_twokeys_7.a_4), STRUCT<
            key1 INT64, key2 INT64 > (measuretable_twokeys_7.a_1, measuretable_twokeys_7.a_2)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_TwoKeys.key1 AS a_1,
              MeasureTable_TwoKeys.key2 AS a_2,
              MeasureTable_TwoKeys.country AS a_3,
              MeasureTable_TwoKeys.quantity AS a_4,
              MeasureTable_TwoKeys.price AS a_5,
              MeasureTable_TwoKeys.measure_sum_price_times_quantity AS a_6
            FROM
              MeasureTable_TwoKeys
          ) AS measuretable_twokeys_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Ratio metric
SELECT
  country,
  AGG(measure_ratio_price_to_quantity)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[1, 11])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_SingleKey.measure_ratio_price_to_quantity#12)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-Cast(INT64 -> DOUBLE)
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        |     +-Cast(INT64 -> DOUBLE)
        |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#22)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#21, $aggregate.constituent_aggregate_2#22]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity#12, struct_for_measures_from_table_MeasureTable_SingleKey#20]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 11])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64, quantity INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_2#22 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  +-group_by_list=
                  | +-grain_lock_key#26 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#25 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64, quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                          |   +-field_idx=0
                          +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_9 AS country,
  CAST(aggregatescan_12.a_10 AS DOUBLE) / CAST(aggregatescan_12.a_11 AS DOUBLE) AS a_13
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE(projectscan_8.a_7.referenced_columns.price)
        GROUP BY projectscan_8.a_7.key_columns) AS a_10,
      SUM(ANY_VALUE(projectscan_8.a_7.referenced_columns.quantity)
        GROUP BY projectscan_8.a_7.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_4, measuretable_singlekey_6.a_3), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.price AS a_4,
              MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Ratio metric
SELECT
  country,
  AGG(measure_ratio_price_to_quantity)
FROM MeasureTable_TwoKeys
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_TwoKeys.[country#3, measure_ratio_price_to_quantity#12], table=MeasureTable_TwoKeys, column_index_list=[2, 11])
        +-group_by_list=
        | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
        +-aggregate_list=
          +-$agg1#14 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_TwoKeys.measure_ratio_price_to_quantity#12)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_twokeys_3.a_1 AS country,
  AGG(measuretable_twokeys_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_TwoKeys.country AS a_1,
      MeasureTable_TwoKeys.measure_ratio_price_to_quantity AS a_2
    FROM
      MeasureTable_TwoKeys
  ) AS measuretable_twokeys_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#15 AS country [STRING]
| +-$aggregate.$agg1#14 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#15, $aggregate.$agg1#14]
        +-expr_list=
        | +-$agg1#14 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-Cast(INT64 -> DOUBLE)
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        |     +-Cast(INT64 -> DOUBLE)
        |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#22)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#15, $aggregate.constituent_aggregate_1#21, $aggregate.constituent_aggregate_2#22]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_ratio_price_to_quantity#12, struct_for_measures_from_table_MeasureTable_TwoKeys#20]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_TwoKeys#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key1 INT64, key2 INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key1#16)
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_TwoKeys.key2#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_TwoKeys.[key1#16, key2#17, country#3, quantity#19, price#18, measure_ratio_price_to_quantity#12], table=MeasureTable_TwoKeys, column_index_list=[0, 1, 2, 3, 4, 11])
            +-group_by_list=
            | +-country#15 := ColumnRef(type=STRING, column=MeasureTable_TwoKeys.country#3)
            +-aggregate_list=
              +-constituent_aggregate_1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key1 INT64, key2 INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64, quantity INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_2#22 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  +-group_by_list=
                  | +-grain_lock_key#26 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key1 INT64, key2 INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#25 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64, quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key1 INT64, key2 INT64>>, column=MeasureTable_TwoKeys.struct_for_measures_from_table_MeasureTable_TwoKeys#20)
                          |   +-field_idx=0
                          +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_13.a_10 AS country,
  CAST(aggregatescan_13.a_11 AS DOUBLE) / CAST(aggregatescan_13.a_12 AS DOUBLE) AS a_14
FROM
  (
    SELECT
      projectscan_9.a_3 AS a_10,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.price)
        GROUP BY projectscan_9.a_8.key_columns) AS a_11,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.quantity)
        GROUP BY projectscan_9.a_8.key_columns) AS a_12
    FROM
      (
        SELECT
          measuretable_twokeys_7.a_1 AS a_1,
          measuretable_twokeys_7.a_2 AS a_2,
          measuretable_twokeys_7.a_3 AS a_3,
          measuretable_twokeys_7.a_4 AS a_4,
          measuretable_twokeys_7.a_5 AS a_5,
          measuretable_twokeys_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key1 INT64, key2 INT64 >
          > (STRUCT< price INT64, quantity INT64 > (measuretable_twokeys_7.a_5, measuretable_twokeys_7.a_4), STRUCT<
            key1 INT64, key2 INT64 > (measuretable_twokeys_7.a_1, measuretable_twokeys_7.a_2)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_TwoKeys.key1 AS a_1,
              MeasureTable_TwoKeys.key2 AS a_2,
              MeasureTable_TwoKeys.country AS a_3,
              MeasureTable_TwoKeys.quantity AS a_4,
              MeasureTable_TwoKeys.price AS a_5,
              MeasureTable_TwoKeys.measure_ratio_price_to_quantity AS a_6
            FROM
              MeasureTable_TwoKeys
          ) AS measuretable_twokeys_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_13;
==

# Ratio of multi-level aggregate expressions
SELECT
  country,
  AGG(measure_ratio_price_to_quantity_per_key)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_ratio_price_to_quantity_per_key#13], table=MeasureTable_SingleKey, column_index_list=[1, 12])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-Cast(INT64 -> DOUBLE)
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#25)
        |     +-Cast(INT64 -> DOUBLE)
        |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#26)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#25, $aggregate.constituent_aggregate_2#26]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity_per_key#13, struct_for_measures_from_table_MeasureTable_SingleKey#20]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, price INT64, quantity INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#19)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, quantity#19, price#18, measure_ratio_price_to_quantity_per_key#13], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 12])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#25 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#22)
              |   +-group_by_list=
              |   | +-$groupbymod#21 :=
              |   |   +-GetStructField
              |   |     +-type=INT64
              |   |     +-expr=
              |   |     | +-GetStructField
              |   |     |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
              |   |     |   +-expr=
              |   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
              |   |     |   +-field_idx=0
              |   |     +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#22 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#27)
              |         +-group_by_list=
              |         | +-grain_lock_key#28 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#27 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-GetStructField
              |                 +-type=INT64
              |                 +-expr=
              |                 | +-GetStructField
              |                 |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
              |                 |   +-expr=
              |                 |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
              |                 |   +-field_idx=0
              |                 +-field_idx=1
              +-constituent_aggregate_2#26 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$agg1#24)
                  +-group_by_list=
                  | +-$groupbymod#23 :=
                  |   +-GetStructField
                  |     +-type=INT64
                  |     +-expr=
                  |     | +-GetStructField
                  |     |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                  |     |   +-field_idx=0
                  |     +-field_idx=0
                  +-group_by_aggregate_list=
                    +-$agg1#24 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#29)
                        +-group_by_list=
                        | +-grain_lock_key#30 :=
                        |   +-GetStructField
                        |     +-type=STRUCT<key INT64>
                        |     +-expr=
                        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                        |     +-field_idx=1
                        +-group_by_aggregate_list=
                          +-$any_value_grain_lock_0#29 :=
                            +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                              +-GetStructField
                                +-type=INT64
                                +-expr=
                                | +-GetStructField
                                |   +-type=STRUCT<key INT64, price INT64, quantity INT64>
                                |   +-expr=
                                |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
                                |   +-field_idx=0
                                +-field_idx=2
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_9 AS country,
  CAST(aggregatescan_12.a_10 AS DOUBLE) / CAST(aggregatescan_12.a_11 AS DOUBLE) AS a_13
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE(ANY_VALUE(projectscan_8.a_7.referenced_columns.price)
          GROUP BY projectscan_8.a_7.key_columns)
        GROUP BY projectscan_8.a_7.referenced_columns.key) AS a_10,
      SUM(ANY_VALUE(ANY_VALUE(projectscan_8.a_7.referenced_columns.quantity)
          GROUP BY projectscan_8.a_7.key_columns)
        GROUP BY projectscan_8.a_7.referenced_columns.key) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< key INT64, price INT64, quantity INT64 >, key_columns STRUCT< key INT64 >
          > (STRUCT< key INT64, price INT64, quantity INT64 > (measuretable_singlekey_6.a_1, measuretable_singlekey_6.a_4,
              measuretable_singlekey_6.a_3), STRUCT< key INT64 > (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.price AS a_4,
              MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Ratio of complex multi-level aggregate expressions
SELECT
  country,
  AGG(measure_complex_ratio_metric)
FROM MeasureTable_SingleKey
GROUP BY country
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[1, 13])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
              +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_SingleKey.measure_complex_ratio_metric#14)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_complex_ratio_metric AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#15 AS `$col2` [DOUBLE]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 :=
        |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        |     +-ColumnRef(type=DOUBLE, column=$aggregate.constituent_aggregate_1#26)
        |     +-ColumnRef(type=DOUBLE, column=$aggregate.constituent_aggregate_2#27)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16, $aggregate.constituent_aggregate_1#26, $aggregate.constituent_aggregate_2#27]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#17, country#2, price#18, measure_complex_ratio_metric#14, struct_for_measures_from_table_MeasureTable_SingleKey#19]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#19 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#17, country#2, price#18, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[0, 1, 3, 13])
            +-group_by_list=
            | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#26 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
              |   +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
              |     +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#21)
              |     +-Cast(INT64 -> DOUBLE)
              |       +-ColumnRef(type=INT64, column=$aggregate.$agg2#22)
              |   +-group_by_list=
              |   | +-$groupbymod#20 :=
              |   |   +-GetStructField
              |   |     +-type=INT64
              |   |     +-expr=
              |   |     | +-GetStructField
              |   |     |   +-type=STRUCT<key INT64, price INT64>
              |   |     |   +-expr=
              |   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
              |   |     |   +-field_idx=0
              |   |     +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#21 :=
              |     | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
              |     |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
              |     |   +-group_by_list=
              |     |   | +-grain_lock_key#29 :=
              |     |   |   +-GetStructField
              |     |   |     +-type=STRUCT<key INT64>
              |     |   |     +-expr=
              |     |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
              |     |   |     +-field_idx=1
              |     |   +-group_by_aggregate_list=
              |     |     +-$any_value_grain_lock_0#28 :=
              |     |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |     |         +-GetStructField
              |     |           +-type=INT64
              |     |           +-expr=
              |     |           | +-GetStructField
              |     |           |   +-type=STRUCT<key INT64, price INT64>
              |     |           |   +-expr=
              |     |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
              |     |           |   +-field_idx=0
              |     |           +-field_idx=1
              |     +-$agg2#22 :=
              |       +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#30)
              |         +-group_by_list=
              |         | +-grain_lock_key#31 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#30 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-GetStructField
              |                 +-type=INT64
              |                 +-expr=
              |                 | +-GetStructField
              |                 |   +-type=STRUCT<key INT64, price INT64>
              |                 |   +-expr=
              |                 |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
              |                 |   +-field_idx=0
              |                 +-field_idx=1
              +-constituent_aggregate_2#27 :=
                +-AggregateFunctionCall(ZetaSQL:sum(DOUBLE) -> DOUBLE)
                  +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
                    +-ColumnRef(type=DOUBLE, column=$aggregate.$agg1#24)
                    +-Cast(INT64 -> DOUBLE)
                      +-ColumnRef(type=INT64, column=$aggregate.$agg2#25)
                  +-group_by_list=
                  | +-$groupbymod#23 :=
                  |   +-GetStructField
                  |     +-type=INT64
                  |     +-expr=
                  |     | +-GetStructField
                  |     |   +-type=STRUCT<key INT64, price INT64>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                  |     |   +-field_idx=0
                  |     +-field_idx=0
                  +-group_by_aggregate_list=
                    +-$agg1#24 :=
                    | +-AggregateFunctionCall(ZetaSQL:avg(INT64) -> DOUBLE)
                    |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#32)
                    |   +-group_by_list=
                    |   | +-grain_lock_key#33 :=
                    |   |   +-GetStructField
                    |   |     +-type=STRUCT<key INT64>
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                    |   |     +-field_idx=1
                    |   +-group_by_aggregate_list=
                    |     +-$any_value_grain_lock_0#32 :=
                    |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    |         +-GetStructField
                    |           +-type=INT64
                    |           +-expr=
                    |           | +-GetStructField
                    |           |   +-type=STRUCT<key INT64, price INT64>
                    |           |   +-expr=
                    |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                    |           |   +-field_idx=0
                    |           +-field_idx=1
                    +-$agg2#25 :=
                      +-AggregateFunctionCall(ZetaSQL:max(INT64) -> INT64)
                        +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#34)
                        +-group_by_list=
                        | +-grain_lock_key#35 :=
                        |   +-GetStructField
                        |     +-type=STRUCT<key INT64>
                        |     +-expr=
                        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                        |     +-field_idx=1
                        +-group_by_aggregate_list=
                          +-$any_value_grain_lock_0#34 :=
                            +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                              +-GetStructField
                                +-type=INT64
                                +-expr=
                                | +-GetStructField
                                |   +-type=STRUCT<key INT64, price INT64>
                                |   +-expr=
                                |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                                |   +-field_idx=0
                                +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_8 AS country,
  (aggregatescan_11.a_9) / (aggregatescan_11.a_10) AS a_12
FROM
  (
    SELECT
      projectscan_7.a_2 AS a_8,
      SUM((AVG(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns)) + CAST(MIN(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns) AS DOUBLE)
        GROUP BY projectscan_7.a_6.referenced_columns.key) AS a_9,
      SUM((AVG(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns)) + CAST(MAX(ANY_VALUE(projectscan_7.a_6.referenced_columns.price)
          GROUP BY projectscan_7.a_6.key_columns) AS DOUBLE)
        GROUP BY projectscan_7.a_6.referenced_columns.key) AS a_10
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< key INT64, price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            key INT64, price INT64 > (measuretable_singlekey_5.a_1, measuretable_singlekey_5.a_3), STRUCT< key INT64 >
            (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_complex_ratio_metric AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
    GROUP BY 1
  ) AS aggregatescan_11;
==

# Measures can propagate through inner joins.
SELECT
  T1.country,
  AGG(T1.measure_sum_quantity)
FROM MeasureTable_SingleKey AS T1
INNER JOIN MeasureTable_SingleKey AS T2 USING (key)
GROUP BY T1.country;
--
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=MeasureTable_SingleKey.[key#1, country#2, measure_sum_quantity#9, key#15]
        |   +-left_scan=
        |   | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 1, 8], alias="T1")
        |   +-right_scan=
        |   | +-TableScan(column_list=[MeasureTable_SingleKey.key#15], table=MeasureTable_SingleKey, column_index_list=[0], alias="T2")
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#15)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_4.a_2 AS country,
  AGG(measuretable_singlekey_4.a_3) AS a_8
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.country AS a_2,
      MeasureTable_SingleKey.measure_sum_quantity AS a_3
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_4
  INNER JOIN
  (
    SELECT
      measuretable_singlekey_6.a_5 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_5
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_6
  ) AS measuretable_singlekey_6
  USING(a_1)
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-expr_list=
        | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#33)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#30, $aggregate.constituent_aggregate_1#33]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=MeasureTable_SingleKey.[key#1, country#2, measure_sum_quantity#9, key#15, struct_for_measures_from_table_MeasureTable_SingleKey#32]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#31, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#32]
            |   |   +-expr_list=
            |   |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#32 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<quantity INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#31)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#31, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 8], alias="T1")
            |   +-right_scan=
            |   | +-TableScan(column_list=[MeasureTable_SingleKey.key#15], table=MeasureTable_SingleKey, column_index_list=[0], alias="T2")
            |   +-join_expr=
            |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#15)
            |   +-has_using=TRUE
            +-group_by_list=
            | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#33 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#34)
                  +-group_by_list=
                  | +-grain_lock_key#35 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#32)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#34 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#32)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_10 AS country,
  aggregatescan_12.a_11 AS a_13
FROM
  (
    SELECT
      projectscan_7.a_2 AS a_10,
      SUM(ANY_VALUE(projectscan_7.a_6.referenced_columns.quantity)
        GROUP BY projectscan_7.a_6.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_5.a_3), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
      INNER JOIN
      (
        SELECT
          measuretable_singlekey_9.a_8 AS a_1
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_8
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_9
      ) AS measuretable_singlekey_9
      USING(a_1)
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Measures can propagate through cross / comma joins.
SELECT
  T1.country,
  AGG(T1.measure_sum_quantity)
FROM MeasureTable_SingleKey AS T1
{{,|CROSS JOIN}} MeasureTable_SingleKey AS T2
GROUP BY T1.country;
--
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=MeasureTable_SingleKey.[country#2, measure_sum_quantity#9]
        |   +-left_scan=
        |   | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[1, 8], alias="T1")
        |   +-right_scan=
        |     +-TableScan(table=MeasureTable_SingleKey, alias="T2")
        +-group_by_list=
        | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#29 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS country,
  AGG(measuretable_singlekey_3.a_2) AS a_6
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_sum_quantity AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
  CROSS JOIN
  (
    SELECT
      NULL
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_4
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#30 AS country [STRING]
| +-$aggregate.$agg1#29 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#30, $aggregate.$agg1#29]
        +-expr_list=
        | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#34)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#30, $aggregate.constituent_aggregate_1#34]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=MeasureTable_SingleKey.[country#2, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#33]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#31, country#2, quantity#32, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#33]
            |   |   +-expr_list=
            |   |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#33 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<quantity INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#32)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#31)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#31, country#2, quantity#32, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 8], alias="T1")
            |   +-right_scan=
            |     +-TableScan(table=MeasureTable_SingleKey, alias="T2")
            +-group_by_list=
            | +-country#30 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#34 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#35)
                  +-group_by_list=
                  | +-grain_lock_key#36 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#35 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_9 AS country,
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      projectscan_7.a_2 AS a_9,
      SUM(ANY_VALUE(projectscan_7.a_6.referenced_columns.quantity)
        GROUP BY projectscan_7.a_6.key_columns) AS a_10
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_5.a_3), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.country AS a_2,
              MeasureTable_SingleKey.quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
      CROSS JOIN
      (
        SELECT
          NULL
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_8
    GROUP BY 1
  ) AS aggregatescan_11;
==

# Measures can propagate past ArrayScans.
SELECT 1 FROM (
  SELECT *
  FROM UNNEST(ARRAY(SELECT measure_sum_quantity FROM MeasureTable_SingleKey))
)
--
ERROR: Cannot use array subquery with column of type MEASURE<INT64> [at 3:15]
  FROM UNNEST(ARRAY(SELECT measure_sum_quantity FROM MeasureTable_SingleKey))
              ^
==

# Measures can propagate past FilterScan, OrderByScan and LimitOffsetScan.
SELECT AGG(measure_sum_quantity) FROM (
  SELECT measure_sum_quantity
  FROM MeasureTable_SingleKey
  WHERE true
  ORDER BY key
  LIMIT 2
)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
        | +-LimitOffsetScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
        |   +-input_scan=
        |   | +-OrderByScan
        |   |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
        |   |   +-is_ordered=TRUE
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 8])
        |   |   |   +-filter_expr=
        |   |   |     +-Literal(type=BOOL, value=true)
        |   |   +-order_by_item_list=
        |   |     +-OrderByItem
        |   |       +-column_ref=
        |   |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        |   +-limit=
        |     +-Literal(type=INT64, value=2)
        +-aggregate_list=
          +-$agg1#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(limitoffsetscan_4.a_2) AS a_5
FROM
  (
    SELECT
      filterscan_3.a_2 AS a_2
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.measure_sum_quantity AS a_2
        FROM
          MeasureTable_SingleKey
        WHERE
          true
      ) AS filterscan_3
    ORDER BY filterscan_3.a_1
    LIMIT 2
  ) AS limitoffsetscan_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#15 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#15]
        +-expr_list=
        | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#18)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#18]
            +-input_scan=
            | +-LimitOffsetScan
            |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#17]
            |   +-input_scan=
            |   | +-OrderByScan
            |   |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#17]
            |   |   +-is_ordered=TRUE
            |   |   +-input_scan=
            |   |   | +-FilterScan
            |   |   |   +-column_list=MeasureTable_SingleKey.[key#1, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#17]
            |   |   |   +-input_scan=
            |   |   |   | +-ProjectScan
            |   |   |   |   +-column_list=MeasureTable_SingleKey.[key#1, quantity#16, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#17]
            |   |   |   |   +-expr_list=
            |   |   |   |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#17 :=
            |   |   |   |   |   +-MakeStruct
            |   |   |   |   |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
            |   |   |   |   |     +-field_list=
            |   |   |   |   |       +-MakeStruct
            |   |   |   |   |       | +-type=STRUCT<quantity INT64>
            |   |   |   |   |       | +-field_list=
            |   |   |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#16)
            |   |   |   |   |       +-MakeStruct
            |   |   |   |   |         +-type=STRUCT<key INT64>
            |   |   |   |   |         +-field_list=
            |   |   |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   |   |   |   +-input_scan=
            |   |   |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, quantity#16, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
            |   |   |   +-filter_expr=
            |   |   |     +-Literal(type=BOOL, value=true)
            |   |   +-order_by_item_list=
            |   |     +-OrderByItem
            |   |       +-column_ref=
            |   |         +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |   +-limit=
            |     +-Literal(type=INT64, value=2)
            +-aggregate_list=
              +-constituent_aggregate_1#18 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#19)
                  +-group_by_list=
                  | +-grain_lock_key#20 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#17)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#19 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<quantity INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#17)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_10.a_9 AS a_11
FROM
  (
    SELECT
      SUM(ANY_VALUE(limitoffsetscan_8.a_5.referenced_columns.quantity)
        GROUP BY limitoffsetscan_8.a_5.key_columns) AS a_9
    FROM
      (
        SELECT
          filterscan_7.a_3 AS a_3,
          filterscan_7.a_5 AS a_5
        FROM
          (
            SELECT
              projectscan_6.a_1 AS a_1,
              projectscan_6.a_3 AS a_3,
              projectscan_6.a_5 AS a_5
            FROM
              (
                SELECT
                  measuretable_singlekey_4.a_1 AS a_1,
                  measuretable_singlekey_4.a_2 AS a_2,
                  measuretable_singlekey_4.a_3 AS a_3,
                  STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
                    (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
                FROM
                  (
                    SELECT
                      MeasureTable_SingleKey.key AS a_1,
                      MeasureTable_SingleKey.quantity AS a_2,
                      MeasureTable_SingleKey.measure_sum_quantity AS a_3
                    FROM
                      MeasureTable_SingleKey
                  ) AS measuretable_singlekey_4
              ) AS projectscan_6
            WHERE
              true
          ) AS filterscan_7
        ORDER BY filterscan_7.a_1
        LIMIT 2
      ) AS limitoffsetscan_8
  ) AS aggregatescan_10;
==

# The rewritten tree should NOT project a STRUCT for measure_sum_quantity since
# it is not invoked.
WITH t AS (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
)
SELECT AGG(measure_sum_price) FROM (SELECT * FROM t)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=t.[measure_sum_price#15, measure_sum_quantity#16]
            |   +-input_scan=
            |     +-WithRefScan(column_list=t.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="t")
            +-aggregate_list=
              +-$agg1#17 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t.measure_sum_price#15)

[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  )
SELECT
  AGG(projectscan_5.a_2) AS a_6
FROM
  (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      t AS withrefscan_4
  ) AS projectscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#20]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_quantity#9, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#20]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#19)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#18)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 8, 9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#17]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#22)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#22]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=t.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_t#21]
                |   +-input_scan=
                |     +-WithRefScan(column_list=t.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_t#21], with_query_name="t")
                +-aggregate_list=
                  +-constituent_aggregate_1#22 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
                      +-group_by_list=
                      | +-grain_lock_key#24 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measures_from_table_t#21)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#23 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measures_from_table_t#21)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      projectscan_7.a_4 AS a_4,
      projectscan_7.a_3 AS a_3,
      projectscan_7.a_6 AS a_6
    FROM
      (
        SELECT
          measuretable_singlekey_5.a_1 AS a_1,
          measuretable_singlekey_5.a_2 AS a_2,
          measuretable_singlekey_5.a_3 AS a_3,
          measuretable_singlekey_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_5.a_2), STRUCT< key INT64 > (measuretable_singlekey_5.a_1)) AS a_6
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3,
              MeasureTable_SingleKey.measure_sum_price AS a_4
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_5
      ) AS projectscan_7
  )
SELECT
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_9.a_6.referenced_columns.price)
        GROUP BY projectscan_9.a_6.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_8.a_4 AS a_4,
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_6 AS a_6
        FROM
          t AS withrefscan_8
      ) AS projectscan_9
  ) AS aggregatescan_11;
==

# The rewritten tree should NOT project STRUCTs for measures that are not
# invoked.
WITH t AS (
  SELECT * FROM MeasureTable_SingleKey
)
SELECT AGG(measure_sum_quantity) FROM t
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#29]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#29]
            +-input_scan=
            | +-WithRefScan(column_list=t.[key#15, country#16, quantity#17, price#18, measure_count_star#19, measure_count_star_per_key#20, measure_count_distinct_key#21, measure_count_key_per_key#22, measure_sum_quantity#23, measure_sum_price#24, measure_sum_price_times_quantity#25, measure_ratio_price_to_quantity#26, measure_ratio_price_to_quantity_per_key#27, measure_complex_ratio_metric#28], with_query_name="t")
            +-aggregate_list=
              +-$agg1#29 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=t.measure_sum_quantity#23)

[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.country AS a_2,
      MeasureTable_SingleKey.quantity AS a_3,
      MeasureTable_SingleKey.price AS a_4,
      MeasureTable_SingleKey.measure_count_star AS a_5,
      MeasureTable_SingleKey.measure_count_star_per_key AS a_6,
      MeasureTable_SingleKey.measure_count_distinct_key AS a_7,
      MeasureTable_SingleKey.measure_count_key_per_key AS a_8,
      MeasureTable_SingleKey.measure_sum_quantity AS a_9,
      MeasureTable_SingleKey.measure_sum_price AS a_10,
      MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_11,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_12,
      MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_13,
      MeasureTable_SingleKey.measure_complex_ratio_metric AS a_14
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_15.a_9) AS a_16
FROM
  t AS withrefscan_15;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#29]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="t"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14, struct_for_measures_from_table_MeasureTable_SingleKey#30]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14, struct_for_measures_from_table_MeasureTable_SingleKey#30]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#30 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#3)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#1, country#2, quantity#3, price#4, measure_count_star#5, measure_count_star_per_key#6, measure_count_distinct_key#7, measure_count_key_per_key#8, measure_sum_quantity#9, measure_sum_price#10, measure_sum_price_times_quantity#11, measure_ratio_price_to_quantity#12, measure_ratio_price_to_quantity_per_key#13, measure_complex_ratio_metric#14], table=MeasureTable_SingleKey, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#29]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#29]
            +-expr_list=
            | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#32)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#32]
                +-input_scan=
                | +-WithRefScan(column_list=t.[key#15, country#16, quantity#17, price#18, measure_count_star#19, measure_count_star_per_key#20, measure_count_distinct_key#21, measure_count_key_per_key#22, measure_sum_quantity#23, measure_sum_price#24, measure_sum_price_times_quantity#25, measure_ratio_price_to_quantity#26, measure_ratio_price_to_quantity_per_key#27, measure_complex_ratio_metric#28, struct_for_measures_from_table_t#31], with_query_name="t")
                +-aggregate_list=
                  +-constituent_aggregate_1#32 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#33)
                      +-group_by_list=
                      | +-grain_lock_key#34 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measures_from_table_t#31)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#33 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=t.struct_for_measures_from_table_t#31)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  t AS (
    SELECT
      measuretable_singlekey_15.a_1 AS a_1,
      measuretable_singlekey_15.a_2 AS a_2,
      measuretable_singlekey_15.a_3 AS a_3,
      measuretable_singlekey_15.a_4 AS a_4,
      measuretable_singlekey_15.a_5 AS a_5,
      measuretable_singlekey_15.a_6 AS a_6,
      measuretable_singlekey_15.a_7 AS a_7,
      measuretable_singlekey_15.a_8 AS a_8,
      measuretable_singlekey_15.a_9 AS a_9,
      measuretable_singlekey_15.a_10 AS a_10,
      measuretable_singlekey_15.a_11 AS a_11,
      measuretable_singlekey_15.a_12 AS a_12,
      measuretable_singlekey_15.a_13 AS a_13,
      measuretable_singlekey_15.a_14 AS a_14,
      STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
        (measuretable_singlekey_15.a_3), STRUCT< key INT64 > (measuretable_singlekey_15.a_1)) AS a_16
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.country AS a_2,
          MeasureTable_SingleKey.quantity AS a_3,
          MeasureTable_SingleKey.price AS a_4,
          MeasureTable_SingleKey.measure_count_star AS a_5,
          MeasureTable_SingleKey.measure_count_star_per_key AS a_6,
          MeasureTable_SingleKey.measure_count_distinct_key AS a_7,
          MeasureTable_SingleKey.measure_count_key_per_key AS a_8,
          MeasureTable_SingleKey.measure_sum_quantity AS a_9,
          MeasureTable_SingleKey.measure_sum_price AS a_10,
          MeasureTable_SingleKey.measure_sum_price_times_quantity AS a_11,
          MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_12,
          MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key AS a_13,
          MeasureTable_SingleKey.measure_complex_ratio_metric AS a_14
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_15
  )
SELECT
  aggregatescan_19.a_18 AS a_20
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_17.a_16.referenced_columns.quantity)
        GROUP BY withrefscan_17.a_16.key_columns) AS a_18
    FROM
      t AS withrefscan_17
  ) AS aggregatescan_19;
==

# Aggregate 2 measures from different tables.
SELECT
  AGG(T1.measure_sum_price),
  AGG(T2.measure_sum_price)
FROM MeasureTable_SingleKey AS T1, MeasureTable_SingleKey AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
| +-$aggregate.$agg2#30 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#29, $agg2#30]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#29, $agg2#30]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_price#24]
        |   +-left_scan=
        |   | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9], alias="T1")
        |   +-right_scan=
        |     +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#24], table=MeasureTable_SingleKey, column_index_list=[9], alias="T2")
        +-aggregate_list=
          +-$agg1#29 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
          +-$agg2#30 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#24)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_singlekey_2.a_1) AS a_5,
  AGG(measuretable_singlekey_4.a_3) AS a_6
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2
  CROSS JOIN
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_3
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#29 AS `$col1` [INT64]
| +-$aggregate.$agg2#30 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#29, $agg2#30]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#29, $agg2#30]
        +-expr_list=
        | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#37)
        | +-$agg2#30 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#40)
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[constituent_aggregate_1#37, constituent_aggregate_1#40]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_price#24, struct_for_measures_from_table_MeasureTable_SingleKey#34, struct_for_measures_from_table_MeasureTable_SingleKey#36]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#31, price#33, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#34]
            |   |   +-expr_list=
            |   |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#34 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<price INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#33)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#31)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#31, price#33, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="T1")
            |   +-right_scan=
            |     +-ProjectScan
            |       +-column_list=MeasureTable_SingleKey.[key#32, price#35, measure_sum_price#24, struct_for_measures_from_table_MeasureTable_SingleKey#36]
            |       +-expr_list=
            |       | +-struct_for_measures_from_table_MeasureTable_SingleKey#36 :=
            |       |   +-MakeStruct
            |       |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |       |     +-field_list=
            |       |       +-MakeStruct
            |       |       | +-type=STRUCT<price INT64>
            |       |       | +-field_list=
            |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#35)
            |       |       +-MakeStruct
            |       |         +-type=STRUCT<key INT64>
            |       |         +-field_list=
            |       |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#32)
            |       +-input_scan=
            |         +-TableScan(column_list=MeasureTable_SingleKey.[key#32, price#35, measure_sum_price#24], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="T2")
            +-aggregate_list=
              +-constituent_aggregate_1#37 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#38)
              |   +-group_by_list=
              |   | +-grain_lock_key#39 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#34)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#38 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#34)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#40 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#41)
                  +-group_by_list=
                  | +-grain_lock_key#42 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#36)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#41 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#36)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_15.a_13 AS a_16,
  aggregatescan_15.a_14 AS a_17
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
        GROUP BY projectscan_6.a_5.key_columns) AS a_13,
      SUM(ANY_VALUE(projectscan_12.a_11.referenced_columns.price)
        GROUP BY projectscan_12.a_11.key_columns) AS a_14
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
      CROSS JOIN
      (
        SELECT
          measuretable_singlekey_10.a_7 AS a_7,
          measuretable_singlekey_10.a_8 AS a_8,
          measuretable_singlekey_10.a_9 AS a_9,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_10.a_8), STRUCT< key INT64 > (measuretable_singlekey_10.a_7)) AS a_11
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_7,
              MeasureTable_SingleKey.price AS a_8,
              MeasureTable_SingleKey.measure_sum_price AS a_9
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_10
      ) AS projectscan_12
  ) AS aggregatescan_15;
==

# Aggregate single measure propagating through a self-join across a with scan.
# Note that the rewritten AST has both WithRefScans project the STRUCT, even
# though only 1 of the projected STRUCTs is used. This is because the base
# WithScan now projects the STRUCT, so all corresponding WithRefScans must
# now project it as well.
WITH WithTable as (
  SELECT measure_sum_price FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#17]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[WithTable.measure_sum_price#15], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=[WithTable.measure_sum_price#16], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#17 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_2.a_1) AS a_4
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      WithTable AS withrefscan_2
  ) AS withrefscan_2
  CROSS JOIN
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      WithTable AS withrefscan_3
  ) AS withrefscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#17]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#20]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#20]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#19)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#18)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#18, price#19, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#17]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#17]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#23)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#23]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16, struct_for_measures_from_table_WithTable#21, struct_for_measures_from_table_WithTable#22]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, struct_for_measures_from_table_WithTable#21], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#16, struct_for_measures_from_table_WithTable#22], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#23 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#24)
                      +-group_by_list=
                      | +-grain_lock_key#25 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#21)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#24 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#21)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_10.a_9 AS a_11
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_7.a_5.referenced_columns.price)
        GROUP BY withrefscan_7.a_5.key_columns) AS a_9
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          WithTable AS withrefscan_7
      ) AS withrefscan_7
      CROSS JOIN
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          WithTable AS withrefscan_8
      ) AS withrefscan_8
  ) AS aggregatescan_10;
==

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable as (
  SELECT measure_sum_price FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_price)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
| +-$aggregate.$agg2#18 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#17, $agg2#18]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
    |       +-input_scan=
    |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#17, $agg2#18]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#17, $agg2#18]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=[WithTable.measure_sum_price#15], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=[WithTable.measure_sum_price#16], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#17 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)
              +-$agg2#18 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#16)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  )
SELECT
  AGG(withrefscan_2.a_1) AS a_4,
  AGG(withrefscan_3.a_1) AS a_5
FROM
  (
    SELECT
      withrefscan_2.a_1 AS a_1
    FROM
      WithTable AS withrefscan_2
  ) AS withrefscan_2
  CROSS JOIN
  (
    SELECT
      withrefscan_3.a_1 AS a_1
    FROM
      WithTable AS withrefscan_3
  ) AS withrefscan_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#17 AS `$col1` [INT64]
| +-$aggregate.$agg2#18 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#17, $agg2#18]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#21]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#21]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#21 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#20)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#19)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#17, $agg2#18]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#17, $agg2#18]
            +-expr_list=
            | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#24)
            | +-$agg2#18 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#24, constituent_aggregate_1#27]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_price#16, struct_for_measures_from_table_WithTable#22, struct_for_measures_from_table_WithTable#23]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, struct_for_measures_from_table_WithTable#22], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#16, struct_for_measures_from_table_WithTable#23], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#24 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#26 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#22)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#25 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#22)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#27 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
                      +-group_by_list=
                      | +-grain_lock_key#29 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#23)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#28 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#23)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_6.a_3 AS a_3,
      projectscan_6.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  )
SELECT
  aggregatescan_11.a_9 AS a_12,
  aggregatescan_11.a_10 AS a_13
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_7.a_5.referenced_columns.price)
        GROUP BY withrefscan_7.a_5.key_columns) AS a_9,
      SUM(ANY_VALUE(withrefscan_8.a_5.referenced_columns.price)
        GROUP BY withrefscan_8.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          withrefscan_7.a_3 AS a_3,
          withrefscan_7.a_5 AS a_5
        FROM
          WithTable AS withrefscan_7
      ) AS withrefscan_7
      CROSS JOIN
      (
        SELECT
          withrefscan_8.a_3 AS a_3,
          withrefscan_8.a_5 AS a_5
        FROM
          WithTable AS withrefscan_8
      ) AS withrefscan_8
  ) AS aggregatescan_11;
==

# Aggregate measures propagating through a self-join across a with scan.
WITH WithTable as (
  SELECT measure_sum_price, measure_sum_quantity FROM MeasureTable_SingleKey
)
SELECT
  AGG(T1.measure_sum_price), AGG(T2.measure_sum_quantity)
FROM WithTable AS T1, WithTable AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9]
    |       +-input_scan=
    |         +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[8, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#19, $agg2#20]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_sum_price#17, measure_sum_quantity#18]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=WithTable.[measure_sum_price#17, measure_sum_quantity#18], with_query_name="WithTable")
            +-aggregate_list=
              +-$agg1#19 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#15)
              +-$agg2#20 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_quantity#18)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      measuretable_singlekey_3.a_2 AS a_2,
      measuretable_singlekey_3.a_1 AS a_1
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_3
  )
SELECT
  AGG(withrefscan_4.a_2) AS a_6,
  AGG(withrefscan_5.a_1) AS a_7
FROM
  (
    SELECT
      withrefscan_4.a_2 AS a_2,
      withrefscan_4.a_1 AS a_1
    FROM
      WithTable AS withrefscan_4
  ) AS withrefscan_4
  CROSS JOIN
  (
    SELECT
      withrefscan_5.a_2 AS a_2,
      withrefscan_5.a_1 AS a_1
    FROM
      WithTable AS withrefscan_5
  ) AS withrefscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#19 AS `$col1` [INT64]
| +-$aggregate.$agg2#20 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#19, $agg2#20]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="WithTable"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#24]
    |       +-input_scan=
    |         +-ProjectScan
    |           +-column_list=MeasureTable_SingleKey.[key#21, quantity#23, price#22, measure_sum_quantity#9, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#24]
    |           +-expr_list=
    |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#24 :=
    |           |   +-MakeStruct
    |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
    |           |     +-field_list=
    |           |       +-MakeStruct
    |           |       | +-type=STRUCT<price INT64, quantity INT64>
    |           |       | +-field_list=
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#22)
    |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#23)
    |           |       +-MakeStruct
    |           |         +-type=STRUCT<key INT64>
    |           |         +-field_list=
    |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#21)
    |           +-input_scan=
    |             +-TableScan(column_list=MeasureTable_SingleKey.[key#21, quantity#23, price#22, measure_sum_quantity#9, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 2, 3, 8, 9])
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#19, $agg2#20]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#19, $agg2#20]
            +-expr_list=
            | +-$agg1#19 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
            | +-$agg2#20 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#27, constituent_aggregate_1#30]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_sum_price#17, measure_sum_quantity#18, struct_for_measures_from_table_WithTable#25, struct_for_measures_from_table_WithTable#26]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, struct_for_measures_from_table_WithTable#25], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTable.[measure_sum_price#17, measure_sum_quantity#18, struct_for_measures_from_table_WithTable#26], with_query_name="WithTable")
                +-aggregate_list=
                  +-constituent_aggregate_1#27 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#29 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#25)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#28 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#25)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#30 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#31)
                      +-group_by_list=
                      | +-grain_lock_key#32 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#26)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#31 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64, quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#26)
                              |   +-field_idx=0
                              +-field_idx=1
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_8.a_5 AS a_5,
      projectscan_8.a_4 AS a_4,
      projectscan_8.a_7 AS a_7
    FROM
      (
        SELECT
          measuretable_singlekey_6.a_1 AS a_1,
          measuretable_singlekey_6.a_2 AS a_2,
          measuretable_singlekey_6.a_3 AS a_3,
          measuretable_singlekey_6.a_4 AS a_4,
          measuretable_singlekey_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_6.a_3, measuretable_singlekey_6.a_2), STRUCT< key INT64 >
            (measuretable_singlekey_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4,
              MeasureTable_SingleKey.measure_sum_price AS a_5
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_6
      ) AS projectscan_8
  )
SELECT
  aggregatescan_13.a_11 AS a_14,
  aggregatescan_13.a_12 AS a_15
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_9.a_7.referenced_columns.price)
        GROUP BY withrefscan_9.a_7.key_columns) AS a_11,
      SUM(ANY_VALUE(withrefscan_10.a_7.referenced_columns.quantity)
        GROUP BY withrefscan_10.a_7.key_columns) AS a_12
    FROM
      (
        SELECT
          withrefscan_9.a_5 AS a_5,
          withrefscan_9.a_4 AS a_4,
          withrefscan_9.a_7 AS a_7
        FROM
          WithTable AS withrefscan_9
      ) AS withrefscan_9
      CROSS JOIN
      (
        SELECT
          withrefscan_10.a_5 AS a_5,
          withrefscan_10.a_4 AS a_4,
          withrefscan_10.a_7 AS a_7
        FROM
          WithTable AS withrefscan_10
      ) AS withrefscan_10
  ) AS aggregatescan_13;
==

# Aggregate measures propagating through a self-join where the tables have
# different column names.
SELECT
  AGG(T1.measure_sum_price),
  AGG(T2.measure_count_star_different_name)
FROM MeasureTable_SingleKey AS T1, MeasureTable_DifferentNames AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
| +-$aggregate.$agg2#21 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#20, $agg2#21]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#20, $agg2#21]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, MeasureTable_DifferentNames.measure_count_star_different_name#19]
        |   +-left_scan=
        |   | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9], alias="T1")
        |   +-right_scan=
        |     +-TableScan(column_list=[MeasureTable_DifferentNames.measure_count_star_different_name#19], table=MeasureTable_DifferentNames, column_index_list=[4], alias="T2")
        +-aggregate_list=
          +-$agg1#20 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
          +-$agg2#21 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_DifferentNames.measure_count_star_different_name#19)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_singlekey_2.a_1) AS a_5,
  AGG(measuretable_differentnames_4.a_3) AS a_6
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2
  CROSS JOIN
  (
    SELECT
      MeasureTable_DifferentNames.measure_count_star_different_name AS a_3
    FROM
      MeasureTable_DifferentNames
  ) AS measuretable_differentnames_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
| +-$aggregate.$agg2#21 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#20, $agg2#21]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#20, $agg2#21]
        +-expr_list=
        | +-$agg1#20 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#27)
        | +-$agg2#21 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[constituent_aggregate_1#27, constituent_aggregate_1#30]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, MeasureTable_DifferentNames.measure_count_star_different_name#19, MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#25, MeasureTable_DifferentNames.struct_for_measures_from_table_MeasureTable_DifferentNames#26]
            |   +-left_scan=
            |   | +-ProjectScan
            |   |   +-column_list=MeasureTable_SingleKey.[key#22, price#24, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#25]
            |   |   +-expr_list=
            |   |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#25 :=
            |   |   |   +-MakeStruct
            |   |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |   |     +-field_list=
            |   |   |       +-MakeStruct
            |   |   |       | +-type=STRUCT<price INT64>
            |   |   |       | +-field_list=
            |   |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#24)
            |   |   |       +-MakeStruct
            |   |   |         +-type=STRUCT<key INT64>
            |   |   |         +-field_list=
            |   |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#22)
            |   |   +-input_scan=
            |   |     +-TableScan(column_list=MeasureTable_SingleKey.[key#22, price#24, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="T1")
            |   +-right_scan=
            |     +-ProjectScan
            |       +-column_list=MeasureTable_DifferentNames.[key_different_name#23, measure_count_star_different_name#19, struct_for_measures_from_table_MeasureTable_DifferentNames#26]
            |       +-expr_list=
            |       | +-struct_for_measures_from_table_MeasureTable_DifferentNames#26 :=
            |       |   +-MakeStruct
            |       |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key_different_name INT64>>
            |       |     +-field_list=
            |       |       +-MakeStruct(type=STRUCT<>)
            |       |       +-MakeStruct
            |       |         +-type=STRUCT<key_different_name INT64>
            |       |         +-field_list=
            |       |           +-ColumnRef(type=INT64, column=MeasureTable_DifferentNames.key_different_name#23)
            |       +-input_scan=
            |         +-TableScan(column_list=MeasureTable_DifferentNames.[key_different_name#23, measure_count_star_different_name#19], table=MeasureTable_DifferentNames, column_index_list=[0, 4], alias="T2")
            +-aggregate_list=
              +-constituent_aggregate_1#27 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#28)
              |   +-group_by_list=
              |   | +-grain_lock_key#29 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#25)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#28 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#25)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#30 :=
                +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-group_by_list=
                    +-grain_lock_key#31 :=
                      +-GetStructField
                        +-type=STRUCT<key_different_name INT64>
                        +-expr=
                        | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key_different_name INT64>>, column=MeasureTable_DifferentNames.struct_for_measures_from_table_MeasureTable_DifferentNames#26)
                        +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_14.a_12 AS a_15,
  aggregatescan_14.a_13 AS a_16
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
        GROUP BY projectscan_6.a_5.key_columns) AS a_12,
      COUNT(*
        GROUP BY projectscan_11.a_10.key_columns) AS a_13
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
      CROSS JOIN
      (
        SELECT
          measuretable_differentnames_9.a_7 AS a_7,
          measuretable_differentnames_9.a_8 AS a_8,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key_different_name INT64 > > (STRUCT< > (),
            STRUCT< key_different_name INT64 > (measuretable_differentnames_9.a_7)) AS a_10
        FROM
          (
            SELECT
              MeasureTable_DifferentNames.key_different_name AS a_7,
              MeasureTable_DifferentNames.measure_count_star_different_name AS a_8
            FROM
              MeasureTable_DifferentNames
          ) AS measuretable_differentnames_9
      ) AS projectscan_11
  ) AS aggregatescan_14;
==

# Complex measure propagation scenario.
WITH WithTable AS (
  SELECT
    measure_sum_price,
    measure_sum_quantity,
    measure_ratio_price_to_quantity
  FROM MeasureTable_SingleKey
), WithTableSelfCrossJoin AS (
  SELECT
    W1.measure_sum_price AS measure_sum_price_1,
    W1.measure_sum_quantity AS measure_sum_quantity_1,
    W2.measure_ratio_price_to_quantity AS measure_ratio_price_to_quantity_2
  FROM WithTable AS W1, WithTable AS W2
)
SELECT
  AGG(T1.measure_sum_price),
  AGG(T2.measure_sum_quantity_1),
  AGG(T2.measure_ratio_price_to_quantity_2)
FROM WithTable AS T1, WithTableSelfCrossJoin AS T2;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [INT64]
| +-$aggregate.$agg3#29 AS `$col3` [DOUBLE]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, measure_ratio_price_to_quantity#12]
    | |     +-input_scan=
    | |       +-TableScan(column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, measure_sum_price#10, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[8, 9, 11])
    | +-WithEntry
    |   +-with_query_name="WithTableSelfCrossJoin"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#20]
    |       +-input_scan=
    |         +-JoinScan
    |           +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17, measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20]
    |           +-left_scan=
    |           | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17], with_query_name="WithTable")
    |           +-right_scan=
    |             +-WithRefScan(column_list=WithTable.[measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20], with_query_name="WithTable")
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[WithTable.measure_sum_price#21, WithTable.measure_sum_quantity#22, WithTable.measure_ratio_price_to_quantity#23, WithTableSelfCrossJoin.measure_sum_price_1#24, WithTableSelfCrossJoin.measure_sum_quantity_1#25, WithTableSelfCrossJoin.measure_ratio_price_to_quantity_2#26]
            |   +-left_scan=
            |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#21, measure_sum_quantity#22, measure_ratio_price_to_quantity#23], with_query_name="WithTable")
            |   +-right_scan=
            |     +-WithRefScan(column_list=WithTableSelfCrossJoin.[measure_sum_price_1#24, measure_sum_quantity_1#25, measure_ratio_price_to_quantity_2#26], with_query_name="WithTableSelfCrossJoin")
            +-aggregate_list=
              +-$agg1#27 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTable.measure_sum_price#21)
              +-$agg2#28 :=
              | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              |   +-ColumnRef(type=MEASURE<INT64>, column=WithTableSelfCrossJoin.measure_sum_quantity_1#25)
              +-$agg3#29 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
                  +-ColumnRef(type=MEASURE<DOUBLE>, column=WithTableSelfCrossJoin.measure_ratio_price_to_quantity_2#26)

[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      measuretable_singlekey_4.a_2 AS a_2,
      measuretable_singlekey_4.a_1 AS a_1,
      measuretable_singlekey_4.a_3 AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2,
          MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_3
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_4
  ),
  WithTableSelfCrossJoin AS (
    SELECT
      withrefscan_5.a_2 AS a_2,
      withrefscan_5.a_1 AS a_1,
      withrefscan_6.a_3 AS a_3
    FROM
      (
        SELECT
          withrefscan_5.a_2 AS a_2,
          withrefscan_5.a_1 AS a_1,
          withrefscan_5.a_3 AS a_3
        FROM
          WithTable AS withrefscan_5
      ) AS withrefscan_5
      CROSS JOIN
      (
        SELECT
          withrefscan_6.a_2 AS a_2,
          withrefscan_6.a_1 AS a_1,
          withrefscan_6.a_3 AS a_3
        FROM
          WithTable AS withrefscan_6
      ) AS withrefscan_6
  )
SELECT
  AGG(withrefscan_7.a_2) AS a_9,
  AGG(withrefscan_8.a_1) AS a_10,
  AGG(withrefscan_8.a_3) AS a_11
FROM
  (
    SELECT
      withrefscan_7.a_2 AS a_2,
      withrefscan_7.a_1 AS a_1,
      withrefscan_7.a_3 AS a_3
    FROM
      WithTable AS withrefscan_7
  ) AS withrefscan_7
  CROSS JOIN
  (
    SELECT
      withrefscan_8.a_2 AS a_2,
      withrefscan_8.a_1 AS a_1,
      withrefscan_8.a_3 AS a_3
    FROM
      WithTableSelfCrossJoin AS withrefscan_8
  ) AS withrefscan_8;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
| +-$aggregate.$agg2#28 AS `$col2` [INT64]
| +-$aggregate.$agg3#29 AS `$col3` [DOUBLE]
+-query=
  +-WithScan
    +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="WithTable"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, measure_sum_quantity#9, measure_ratio_price_to_quantity#12, struct_for_measures_from_table_MeasureTable_SingleKey#33]
    | |     +-input_scan=
    | |       +-ProjectScan
    | |         +-column_list=MeasureTable_SingleKey.[key#30, quantity#32, price#31, measure_sum_quantity#9, measure_sum_price#10, measure_ratio_price_to_quantity#12, struct_for_measures_from_table_MeasureTable_SingleKey#33]
    | |         +-expr_list=
    | |         | +-struct_for_measures_from_table_MeasureTable_SingleKey#33 :=
    | |         |   +-MakeStruct
    | |         |     +-type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>
    | |         |     +-field_list=
    | |         |       +-MakeStruct
    | |         |       | +-type=STRUCT<price INT64, quantity INT64>
    | |         |       | +-field_list=
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#31)
    | |         |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#32)
    | |         |       +-MakeStruct
    | |         |         +-type=STRUCT<key INT64>
    | |         |         +-field_list=
    | |         |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#30)
    | |         +-input_scan=
    | |           +-TableScan(column_list=MeasureTable_SingleKey.[key#30, quantity#32, price#31, measure_sum_quantity#9, measure_sum_price#10, measure_ratio_price_to_quantity#12], table=MeasureTable_SingleKey, column_index_list=[0, 2, 3, 8, 9, 11])
    | +-WithEntry
    |   +-with_query_name="WithTableSelfCrossJoin"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#20, struct_for_measures_from_table_WithTable#34, struct_for_measures_from_table_WithTable#35]
    |       +-input_scan=
    |         +-JoinScan
    |           +-column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17, measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20, struct_for_measures_from_table_WithTable#34, struct_for_measures_from_table_WithTable#35]
    |           +-left_scan=
    |           | +-WithRefScan(column_list=WithTable.[measure_sum_price#15, measure_sum_quantity#16, measure_ratio_price_to_quantity#17, struct_for_measures_from_table_WithTable#34], with_query_name="WithTable")
    |           +-right_scan=
    |             +-WithRefScan(column_list=WithTable.[measure_sum_price#18, measure_sum_quantity#19, measure_ratio_price_to_quantity#20, struct_for_measures_from_table_WithTable#35], with_query_name="WithTable")
    +-query=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
        +-input_scan=
          +-ProjectScan
            +-column_list=$aggregate.[$agg1#27, $agg2#28, $agg3#29]
            +-expr_list=
            | +-$agg1#27 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#39)
            | +-$agg2#28 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#42)
            | +-$agg3#29 :=
            |   +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
            |     +-Cast(INT64 -> DOUBLE)
            |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#45)
            |     +-Cast(INT64 -> DOUBLE)
            |       +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#46)
            +-input_scan=
              +-AggregateScan
                +-column_list=$aggregate.[constituent_aggregate_1#39, constituent_aggregate_1#42, constituent_aggregate_1#45, constituent_aggregate_2#46]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=[WithTable.measure_sum_price#21, WithTable.measure_sum_quantity#22, WithTable.measure_ratio_price_to_quantity#23, WithTableSelfCrossJoin.measure_sum_price_1#24, WithTableSelfCrossJoin.measure_sum_quantity_1#25, WithTableSelfCrossJoin.measure_ratio_price_to_quantity_2#26, WithTable.struct_for_measures_from_table_WithTable#36, WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#38, WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#37]
                |   +-left_scan=
                |   | +-WithRefScan(column_list=WithTable.[measure_sum_price#21, measure_sum_quantity#22, measure_ratio_price_to_quantity#23, struct_for_measures_from_table_WithTable#36], with_query_name="WithTable")
                |   +-right_scan=
                |     +-WithRefScan(column_list=WithTableSelfCrossJoin.[measure_sum_price_1#24, measure_sum_quantity_1#25, measure_ratio_price_to_quantity_2#26, struct_for_measures_from_table_WithTableSelfCrossJoin#38, struct_for_measures_from_table_WithTableSelfCrossJoin#37], with_query_name="WithTableSelfCrossJoin")
                +-aggregate_list=
                  +-constituent_aggregate_1#39 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#40)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#41 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#36)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#40 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTable.struct_for_measures_from_table_WithTable#36)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_1#42 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#43)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#44 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#38)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#43 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#38)
                  |           |   +-field_idx=0
                  |           +-field_idx=1
                  +-constituent_aggregate_1#45 :=
                  | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#47)
                  |   +-group_by_list=
                  |   | +-grain_lock_key#48 :=
                  |   |   +-GetStructField
                  |   |     +-type=STRUCT<key INT64>
                  |   |     +-expr=
                  |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#37)
                  |   |     +-field_idx=1
                  |   +-group_by_aggregate_list=
                  |     +-$any_value_grain_lock_0#47 :=
                  |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                  |         +-GetStructField
                  |           +-type=INT64
                  |           +-expr=
                  |           | +-GetStructField
                  |           |   +-type=STRUCT<price INT64, quantity INT64>
                  |           |   +-expr=
                  |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#37)
                  |           |   +-field_idx=0
                  |           +-field_idx=0
                  +-constituent_aggregate_2#46 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#49)
                      +-group_by_list=
                      | +-grain_lock_key#50 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#37)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#49 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64, quantity INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64, quantity INT64>, key_columns STRUCT<key INT64>>, column=WithTableSelfCrossJoin.struct_for_measures_from_table_WithTableSelfCrossJoin#37)
                              |   +-field_idx=0
                              +-field_idx=1
[SQLBUILDER_OUTPUT]
WITH
  WithTable AS (
    SELECT
      projectscan_9.a_5 AS a_5,
      projectscan_9.a_4 AS a_4,
      projectscan_9.a_6 AS a_6,
      projectscan_9.a_8 AS a_8
    FROM
      (
        SELECT
          measuretable_singlekey_7.a_1 AS a_1,
          measuretable_singlekey_7.a_2 AS a_2,
          measuretable_singlekey_7.a_3 AS a_3,
          measuretable_singlekey_7.a_4 AS a_4,
          measuretable_singlekey_7.a_5 AS a_5,
          measuretable_singlekey_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64, quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            price INT64, quantity INT64 > (measuretable_singlekey_7.a_3, measuretable_singlekey_7.a_2), STRUCT< key INT64 >
            (measuretable_singlekey_7.a_1)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.price AS a_3,
              MeasureTable_SingleKey.measure_sum_quantity AS a_4,
              MeasureTable_SingleKey.measure_sum_price AS a_5,
              MeasureTable_SingleKey.measure_ratio_price_to_quantity AS a_6
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_7
      ) AS projectscan_9
  ),
  WithTableSelfCrossJoin AS (
    SELECT
      withrefscan_10.a_5 AS a_5,
      withrefscan_10.a_4 AS a_4,
      withrefscan_11.a_6 AS a_6,
      withrefscan_10.a_8 AS a_8,
      withrefscan_11.a_8 AS a_12
    FROM
      (
        SELECT
          withrefscan_10.a_5 AS a_5,
          withrefscan_10.a_4 AS a_4,
          withrefscan_10.a_6 AS a_6,
          withrefscan_10.a_8 AS a_8
        FROM
          WithTable AS withrefscan_10
      ) AS withrefscan_10
      CROSS JOIN
      (
        SELECT
          withrefscan_11.a_5 AS a_5,
          withrefscan_11.a_4 AS a_4,
          withrefscan_11.a_6 AS a_6,
          withrefscan_11.a_8 AS a_8
        FROM
          WithTable AS withrefscan_11
      ) AS withrefscan_11
  )
SELECT
  aggregatescan_19.a_15 AS a_20,
  aggregatescan_19.a_16 AS a_21,
  CAST(aggregatescan_19.a_17 AS DOUBLE) / CAST(aggregatescan_19.a_18 AS DOUBLE) AS a_22
FROM
  (
    SELECT
      SUM(ANY_VALUE(withrefscan_13.a_8.referenced_columns.price)
        GROUP BY withrefscan_13.a_8.key_columns) AS a_15,
      SUM(ANY_VALUE(withrefscan_14.a_8.referenced_columns.quantity)
        GROUP BY withrefscan_14.a_8.key_columns) AS a_16,
      SUM(ANY_VALUE(withrefscan_14.a_12.referenced_columns.price)
        GROUP BY withrefscan_14.a_12.key_columns) AS a_17,
      SUM(ANY_VALUE(withrefscan_14.a_12.referenced_columns.quantity)
        GROUP BY withrefscan_14.a_12.key_columns) AS a_18
    FROM
      (
        SELECT
          withrefscan_13.a_5 AS a_5,
          withrefscan_13.a_4 AS a_4,
          withrefscan_13.a_6 AS a_6,
          withrefscan_13.a_8 AS a_8
        FROM
          WithTable AS withrefscan_13
      ) AS withrefscan_13
      CROSS JOIN
      (
        SELECT
          withrefscan_14.a_5 AS a_5,
          withrefscan_14.a_4 AS a_4,
          withrefscan_14.a_6 AS a_6,
          withrefscan_14.a_8 AS a_8,
          withrefscan_14.a_12 AS a_12
        FROM
          WithTableSelfCrossJoin AS withrefscan_14
      ) AS withrefscan_14
  ) AS aggregatescan_19;
==

# Measures can propagate through PIPE IF, and Subpipeline Scans
# Disable SQLBuilder because the reconstructed syntax uses SELECT AS STRUCT
# which does not support MEASURE
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+SQL_GRAPH,+GROUP_BY_STRUCT,+PIPES,+PIPE_IF]
[no_run_sqlbuilder]
[no_enable_literal_replacement]
# Literal replacement doesn't work because parameters don't work as constants
# in the IF conditions yet.
FROM MeasureTable_SingleKey
|> IF true THEN (|> SELECT measure_sum_quantity)
|> AGGREGATE AGG(measure_sum_quantity) as col
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-AggregateScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
    | +-PipeIfScan
    |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |   +-input_scan=
    |   | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    |   +-selected_case=0
    |   +-if_case_list=
    |     +-PipeIfCase
    |       +-condition=
    |       | +-Literal(type=BOOL, value=true)
    |       +-subpipeline_sql="(|> SELECT measure_sum_quantity)"
    |       +-subpipeline=
    |         +-Subpipeline
    |           +-scan=
    |             +-ProjectScan
    |               +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |               +-input_scan=
    |                 +-SubpipelineInputScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9])
    +-aggregate_list=
      +-col#15 :=
        +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-expr_list=
    | +-col#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.constituent_aggregate_1#19]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#18]
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#18]
        |       +-expr_list=
        |       | +-struct_for_measures_from_table_MeasureTable_SingleKey#18 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
        |       |     +-field_list=
        |       |       +-MakeStruct
        |       |       | +-type=STRUCT<quantity INT64>
        |       |       | +-field_list=
        |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#17)
        |       |       +-MakeStruct
        |       |         +-type=STRUCT<key INT64>
        |       |         +-field_list=
        |       |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#16)
        |       +-input_scan=
        |         +-TableScan(column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
        +-aggregate_list=
          +-constituent_aggregate_1#19 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
              +-group_by_list=
              | +-grain_lock_key#21 :=
              |   +-GetStructField
              |     +-type=STRUCT<key INT64>
              |     +-expr=
              |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
              |     +-field_idx=1
              +-group_by_aggregate_list=
                +-$any_value_grain_lock_0#20 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-GetStructField
                      +-type=INT64
                      +-expr=
                      | +-GetStructField
                      |   +-type=STRUCT<quantity INT64>
                      |   +-expr=
                      |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                      |   +-field_idx=0
                      +-field_idx=0
==

# PIPE LOG is allowed to propagate measures, but measures aren't currently
# a type that can be returned. Update this test case if that changes.
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+SQL_GRAPH,+GROUP_BY_STRUCT,+PIPES,+PIPE_LOG]
FROM MeasureTable_SingleKey
|> LOG
|> AGGREGATE AGG(measure_sum_quantity) as col
--
ERROR: Returning expressions of type MEASURE is not allowed [at 2:1]
|> LOG
^
==

# Measures can propagate through PIPE STATIC DESCRIBE
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+SQL_GRAPH,+GROUP_BY_STRUCT,+PIPES,+PIPE_STATIC_DESCRIBE]
FROM MeasureTable_SingleKey
|> STATIC_DESCRIBE
|> AGGREGATE AGG(measure_sum_quantity) as col
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-AggregateScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
    | +-StaticDescribeScan
    |   +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9]
    |   +-describe_text=
    |   |   """
    |   |   NameList:
    |   |     key INT64 MeasureTable_SingleKey.key#1
    |   |     country STRING MeasureTable_SingleKey.country#2
    |   |     quantity INT64 MeasureTable_SingleKey.quantity#3
    |   |     price INT64 MeasureTable_SingleKey.price#4
    |   |     measure_count_star MEASURE<INT64> MeasureTable_SingleKey.measure_count_star#5
    |   |     measure_count_star_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_star_per_key#6
    |   |     measure_count_distinct_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_distinct_key#7
    |   |     measure_count_key_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_key_per_key#8
    |   |     measure_sum_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_quantity#9
    |   |     measure_sum_price MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price#10
    |   |     measure_sum_price_times_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price_times_quantity#11
    |   |     measure_ratio_price_to_quantity MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity#12
    |   |     measure_ratio_price_to_quantity_per_key MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13
    |   |     measure_complex_ratio_metric MEASURE<DOUBLE> MeasureTable_SingleKey.measure_complex_ratio_metric#14
    |   |   NameScope:
    |   |     Names:
    |   |       country -> STRING (MeasureTable_SingleKey.country#2) (implicit)
    |   |       key -> INT64 (MeasureTable_SingleKey.key#1) (implicit)
    |   |       measure_complex_ratio_metric -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_complex_ratio_metric#14) (implicit)
    |   |       measure_count_distinct_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_distinct_key#7) (implicit)
    |   |       measure_count_key_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_key_per_key#8) (implicit)
    |   |       measure_count_star -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star#5) (implicit)
    |   |       measure_count_star_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star_per_key#6) (implicit)
    |   |       measure_ratio_price_to_quantity -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity#12) (implicit)
    |   |       measure_ratio_price_to_quantity_per_key -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13) (implicit)
    |   |       measure_sum_price -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price#10) (implicit)
    |   |       measure_sum_price_times_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price_times_quantity#11) (implicit)
    |   |       measure_sum_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_quantity#9) (implicit)
    |   |       price -> INT64 (MeasureTable_SingleKey.price#4) (implicit)
    |   |       quantity -> INT64 (MeasureTable_SingleKey.quantity#3) (implicit)
    |   |     Range variables:
    |   |       MeasureTable_SingleKey -> RANGE_VARIABLE<key,country,quantity,price,measure_count_star,measure_count_star_per_key,measure_count_distinct_key,measure_count_key_per_key,measure_sum_quantity,measure_sum_price,measure_sum_price_times_quantity,measure_ratio_price_to_quantity,measure_ratio_price_to_quantity_per_key,measure_complex_ratio_metric>
    |   |   """
    |   +-input_scan=
    |     +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
    +-aggregate_list=
      +-col#15 :=
        +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_quantity#9)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_singlekey_2.a_1) AS col
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_quantity AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-expr_list=
    | +-col#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.constituent_aggregate_1#19]
        +-input_scan=
        | +-StaticDescribeScan
        |   +-column_list=MeasureTable_SingleKey.[measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#18]
        |   +-describe_text=
        |   |   """
        |   |   NameList:
        |   |     key INT64 MeasureTable_SingleKey.key#1
        |   |     country STRING MeasureTable_SingleKey.country#2
        |   |     quantity INT64 MeasureTable_SingleKey.quantity#3
        |   |     price INT64 MeasureTable_SingleKey.price#4
        |   |     measure_count_star MEASURE<INT64> MeasureTable_SingleKey.measure_count_star#5
        |   |     measure_count_star_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_star_per_key#6
        |   |     measure_count_distinct_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_distinct_key#7
        |   |     measure_count_key_per_key MEASURE<INT64> MeasureTable_SingleKey.measure_count_key_per_key#8
        |   |     measure_sum_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_quantity#9
        |   |     measure_sum_price MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price#10
        |   |     measure_sum_price_times_quantity MEASURE<INT64> MeasureTable_SingleKey.measure_sum_price_times_quantity#11
        |   |     measure_ratio_price_to_quantity MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity#12
        |   |     measure_ratio_price_to_quantity_per_key MEASURE<DOUBLE> MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13
        |   |     measure_complex_ratio_metric MEASURE<DOUBLE> MeasureTable_SingleKey.measure_complex_ratio_metric#14
        |   |   NameScope:
        |   |     Names:
        |   |       country -> STRING (MeasureTable_SingleKey.country#2) (implicit)
        |   |       key -> INT64 (MeasureTable_SingleKey.key#1) (implicit)
        |   |       measure_complex_ratio_metric -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_complex_ratio_metric#14) (implicit)
        |   |       measure_count_distinct_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_distinct_key#7) (implicit)
        |   |       measure_count_key_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_key_per_key#8) (implicit)
        |   |       measure_count_star -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star#5) (implicit)
        |   |       measure_count_star_per_key -> MEASURE<INT64> (MeasureTable_SingleKey.measure_count_star_per_key#6) (implicit)
        |   |       measure_ratio_price_to_quantity -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity#12) (implicit)
        |   |       measure_ratio_price_to_quantity_per_key -> MEASURE<DOUBLE> (MeasureTable_SingleKey.measure_ratio_price_to_quantity_per_key#13) (implicit)
        |   |       measure_sum_price -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price#10) (implicit)
        |   |       measure_sum_price_times_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_price_times_quantity#11) (implicit)
        |   |       measure_sum_quantity -> MEASURE<INT64> (MeasureTable_SingleKey.measure_sum_quantity#9) (implicit)
        |   |       price -> INT64 (MeasureTable_SingleKey.price#4) (implicit)
        |   |       quantity -> INT64 (MeasureTable_SingleKey.quantity#3) (implicit)
        |   |     Range variables:
        |   |       MeasureTable_SingleKey -> RANGE_VARIABLE<key,country,quantity,price,measure_count_star,measure_count_star_per_key,measure_count_distinct_key,measure_count_key_per_key,measure_sum_quantity,measure_sum_price,measure_sum_price_times_quantity,measure_ratio_price_to_quantity,measure_ratio_price_to_quantity_per_key,measure_complex_ratio_metric>
        |   |   """
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9, struct_for_measures_from_table_MeasureTable_SingleKey#18]
        |       +-expr_list=
        |       | +-struct_for_measures_from_table_MeasureTable_SingleKey#18 :=
        |       |   +-MakeStruct
        |       |     +-type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>
        |       |     +-field_list=
        |       |       +-MakeStruct
        |       |       | +-type=STRUCT<quantity INT64>
        |       |       | +-field_list=
        |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.quantity#17)
        |       |       +-MakeStruct
        |       |         +-type=STRUCT<key INT64>
        |       |         +-field_list=
        |       |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#16)
        |       +-input_scan=
        |         +-TableScan(column_list=MeasureTable_SingleKey.[key#16, quantity#17, measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[0, 2, 8])
        +-aggregate_list=
          +-constituent_aggregate_1#19 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
              +-group_by_list=
              | +-grain_lock_key#21 :=
              |   +-GetStructField
              |     +-type=STRUCT<key INT64>
              |     +-expr=
              |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
              |     +-field_idx=1
              +-group_by_aggregate_list=
                +-$any_value_grain_lock_0#20 :=
                  +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    +-GetStructField
                      +-type=INT64
                      +-expr=
                      | +-GetStructField
                      |   +-type=STRUCT<quantity INT64>
                      |   +-expr=
                      |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<quantity INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                      |   +-field_idx=0
                      +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_8.a_7 AS col
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.quantity)
        GROUP BY projectscan_6.a_5.key_columns) AS a_7
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< quantity INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< quantity INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.quantity AS a_2,
              MeasureTable_SingleKey.measure_sum_quantity AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
  ) AS aggregatescan_8;
==

# Measures can propagate through SampleScan
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+SQL_GRAPH,+GROUP_BY_STRUCT,+TABLESAMPLE]
SELECT AGG(m1) as col from
(SELECT measure_sum_price as m1 FROM MeasureTable_SingleKey TABLESAMPLE BERNOULLI (0 PERCENT))
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.col#15]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
        |   +-input_scan=
        |     +-SampleScan
        |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
        |       +-input_scan=
        |       | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
        |       +-method="bernoulli"
        |       +-size=
        |       | +-Literal(type=INT64, value=0)
        |       +-unit=PERCENT
        +-aggregate_list=
          +-col#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(projectscan_2.a_1) AS col
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey TABLESAMPLE bernoulli(0 PERCENT)
  ) AS projectscan_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#15 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.col#15]
        +-expr_list=
        | +-col#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#19]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#18]
            |   +-input_scan=
            |     +-SampleScan
            |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#18]
            |       +-input_scan=
            |       | +-ProjectScan
            |       |   +-column_list=MeasureTable_SingleKey.[key#16, price#17, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#18]
            |       |   +-expr_list=
            |       |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#18 :=
            |       |   |   +-MakeStruct
            |       |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |       |   |     +-field_list=
            |       |   |       +-MakeStruct
            |       |   |       | +-type=STRUCT<price INT64>
            |       |   |       | +-field_list=
            |       |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#17)
            |       |   |       +-MakeStruct
            |       |   |         +-type=STRUCT<key INT64>
            |       |   |         +-field_list=
            |       |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#16)
            |       |   +-input_scan=
            |       |     +-TableScan(column_list=MeasureTable_SingleKey.[key#16, price#17, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
            |       +-method="bernoulli"
            |       +-size=
            |       | +-Literal(type=INT64, value=0)
            |       +-unit=PERCENT
            +-aggregate_list=
              +-constituent_aggregate_1#19 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
                  +-group_by_list=
                  | +-grain_lock_key#21 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#20 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#18)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_8 AS col
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_7.a_5.referenced_columns.price)
        GROUP BY projectscan_7.a_5.key_columns) AS a_8
    FROM
      (
        SELECT
          projectscan_6.a_3 AS a_3,
          projectscan_6.a_5 AS a_5
        FROM
          (
            SELECT
              measuretable_singlekey_4.a_1 AS a_1,
              measuretable_singlekey_4.a_2 AS a_2,
              measuretable_singlekey_4.a_3 AS a_3,
              STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
            FROM
              (
                SELECT
                  MeasureTable_SingleKey.key AS a_1,
                  MeasureTable_SingleKey.price AS a_2,
                  MeasureTable_SingleKey.measure_sum_price AS a_3
                FROM
                  MeasureTable_SingleKey
              ) AS measuretable_singlekey_4
          ) AS projectscan_6 TABLESAMPLE bernoulli(0 PERCENT)
      ) AS projectscan_7
  ) AS aggregatescan_9;
==

# Measures can propagate through AnalyticScan
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+SQL_GRAPH,+GROUP_BY_STRUCT,+ANALYTIC_FUNCTIONS]
SELECT AGG(m1) as col from
(SELECT measure_sum_price as m1, ANY_VALUE(key) OVER () as analytic_col
FROM MeasureTable_SingleKey)
--
QueryStmt
+-output_column_list=
| +-$aggregate.col#17 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#17]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.col#17]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16]
        |   +-input_scan=
        |     +-AnalyticScan
        |       +-column_list=[MeasureTable_SingleKey.key#1, MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16]
        |       +-input_scan=
        |       | +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 9])
        |       +-function_group_list=
        |         +-AnalyticFunctionGroup
        |           +-analytic_function_list=
        |             +-analytic_col#16 :=
        |               +-AnalyticFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
        |                 +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        |                 +-window_frame=
        |                   +-WindowFrame(frame_unit=ROWS)
        |                     +-start_expr=
        |                     | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
        |                     +-end_expr=
        |                       +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
        +-aggregate_list=
          +-col#17 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(projectscan_6.a_2) AS col
FROM
  (
    SELECT
      analyticscan_5.a_2 AS a_2,
      analyticscan_5.a_4 AS a_4
    FROM
      (
        SELECT
          measuretable_singlekey_3.a_1 AS a_1,
          measuretable_singlekey_3.a_2 AS a_2,
          ANY_VALUE(measuretable_singlekey_3.a_1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_4
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.measure_sum_price AS a_2
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_3
      ) AS analyticscan_5
  ) AS projectscan_6;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.col#17 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.col#17]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.col#17]
        +-expr_list=
        | +-col#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#20)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#20]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16, MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19]
            |   +-input_scan=
            |     +-AnalyticScan
            |       +-column_list=[MeasureTable_SingleKey.key#1, MeasureTable_SingleKey.measure_sum_price#10, $analytic.analytic_col#16, MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19]
            |       +-input_scan=
            |       | +-ProjectScan
            |       |   +-column_list=MeasureTable_SingleKey.[key#1, price#18, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#19]
            |       |   +-expr_list=
            |       |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#19 :=
            |       |   |   +-MakeStruct
            |       |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |       |   |     +-field_list=
            |       |   |       +-MakeStruct
            |       |   |       | +-type=STRUCT<price INT64>
            |       |   |       | +-field_list=
            |       |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#18)
            |       |   |       +-MakeStruct
            |       |   |         +-type=STRUCT<key INT64>
            |       |   |         +-field_list=
            |       |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |       |   +-input_scan=
            |       |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, price#18, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
            |       +-function_group_list=
            |         +-AnalyticFunctionGroup
            |           +-analytic_function_list=
            |             +-analytic_col#16 :=
            |               +-AnalyticFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |                 +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            |                 +-window_frame=
            |                   +-WindowFrame(frame_unit=ROWS)
            |                     +-start_expr=
            |                     | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
            |                     +-end_expr=
            |                       +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
            +-aggregate_list=
              +-constituent_aggregate_1#20 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#21)
                  +-group_by_list=
                  | +-grain_lock_key#22 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#21 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#19)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_10 AS col
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_9.a_5.referenced_columns.price)
        GROUP BY projectscan_9.a_5.key_columns) AS a_10
    FROM
      (
        SELECT
          analyticscan_8.a_3 AS a_3,
          analyticscan_8.a_7 AS a_7,
          analyticscan_8.a_5 AS a_5
        FROM
          (
            SELECT
              projectscan_6.a_1 AS a_1,
              projectscan_6.a_3 AS a_3,
              ANY_VALUE(projectscan_6.a_1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_7,
              projectscan_6.a_5 AS a_5
            FROM
              (
                SELECT
                  measuretable_singlekey_4.a_1 AS a_1,
                  measuretable_singlekey_4.a_2 AS a_2,
                  measuretable_singlekey_4.a_3 AS a_3,
                  STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                    (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
                FROM
                  (
                    SELECT
                      MeasureTable_SingleKey.key AS a_1,
                      MeasureTable_SingleKey.price AS a_2,
                      MeasureTable_SingleKey.measure_sum_price AS a_3
                    FROM
                      MeasureTable_SingleKey
                  ) AS measuretable_singlekey_4
              ) AS projectscan_6
          ) AS analyticscan_8
      ) AS projectscan_9
  ) AS aggregatescan_11;
==

# Measures can propagate through AnalyticScan
[language_features=NONE,+ENABLE_MEASURES,+ANALYTIC_FUNCTIONS]
SELECT 1
FROM (
  SELECT
    measure_sum_quantity,
    SUM(1) OVER ()
  FROM MeasureTable_SingleKey
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#17 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#17]
    +-expr_list=
    | +-$col1#17 := Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9, $analytic.$analytic1#16]
        +-input_scan=
          +-AnalyticScan
            +-column_list=[MeasureTable_SingleKey.measure_sum_quantity#9, $analytic.$analytic1#16]
            +-input_scan=
            | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_quantity#9], table=MeasureTable_SingleKey, column_index_list=[8])
            +-function_group_list=
              +-AnalyticFunctionGroup
                +-analytic_function_list=
                  +-$analytic1#16 :=
                    +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-Literal(type=INT64, value=1)
                      +-window_frame=
                        +-WindowFrame(frame_unit=ROWS)
                          +-start_expr=
                          | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                          +-end_expr=
                            +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)

[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_5
FROM
  (
    SELECT
      measuretable_singlekey_2.a_1 AS a_1,
      SUM(1) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_quantity AS a_1
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_2
  ) AS projectscan_4;
==

# Measures columns can be used as input to pipe TEE
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+PIPES,+PIPE_TEE]
[supported_statement_kinds=QUERY,GENERALIZED_QUERY]
[no_run_sqlbuilder]
FROM MeasureTable_SingleKey
|> TEE(
    |> SELECT 1 as col
   ), (
    |> SELECT 2 as col
   )
|> SELECT 3 as col

--
GeneralizedQueryStmt
+-output_schema=
| +-OutputSchema
|   +-output_column_list=
|     +-$pipe_select.col#17 AS col [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$pipe_select.col#17]
    +-expr_list=
    | +-col#17 := Literal(type=INT64, value=3)
    +-input_scan=
      +-PipeTeeScan
        +-input_scan=
        | +-TableScan(table=MeasureTable_SingleKey)
        +-subpipeline_list=
          +-GeneralizedQuerySubpipeline
          | +-subpipeline=
          | | +-Subpipeline
          | |   +-scan=
          | |     +-ProjectScan
          | |       +-column_list=[$pipe_select.col#15]
          | |       +-expr_list=
          | |       | +-col#15 := Literal(type=INT64, value=1)
          | |       +-input_scan=
          | |         +-SubpipelineInputScan
          | +-output_schema=
          |   +-OutputSchema
          |     +-output_column_list=
          |       +-$pipe_select.col#15 AS col [INT64]
          +-GeneralizedQuerySubpipeline
            +-subpipeline=
            | +-Subpipeline
            |   +-scan=
            |     +-ProjectScan
            |       +-column_list=[$pipe_select.col#16]
            |       +-expr_list=
            |       | +-col#16 := Literal(type=INT64, value=2)
            |       +-input_scan=
            |         +-SubpipelineInputScan
            +-output_schema=
              +-OutputSchema
                +-output_column_list=
                  +-$pipe_select.col#16 AS col [INT64]


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$tee_cte_1"
  |     +-with_subquery=
  |       +-TableScan(table=MeasureTable_SingleKey)
  +-QueryStmt
  | +-output_column_list=
  | | +-$pipe_select.col#15 AS col [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[$pipe_select.col#15]
  |     +-expr_list=
  |     | +-col#15 := Literal(type=INT64, value=1)
  |     +-input_scan=
  |       +-WithRefScan(with_query_name="$tee_cte_1")
  +-QueryStmt
  | +-output_column_list=
  | | +-$pipe_select.col#16 AS col [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[$pipe_select.col#16]
  |     +-expr_list=
  |     | +-col#16 := Literal(type=INT64, value=2)
  |     +-input_scan=
  |       +-WithRefScan(with_query_name="$tee_cte_1")
  +-QueryStmt
    +-output_column_list=
    | +-$pipe_select.col#17 AS col [INT64]
    +-query=
      +-ProjectScan
        +-column_list=[$pipe_select.col#17]
        +-expr_list=
        | +-col#17 := Literal(type=INT64, value=3)
        +-input_scan=
          +-WithRefScan(with_query_name="$tee_cte_1")
==

# Measure columns can be used as input to pipe FORK
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+PIPES,+PIPE_FORK]
[supported_statement_kinds=QUERY,GENERALIZED_QUERY]
[no_run_sqlbuilder]
FROM MeasureTable_SingleKey
|> FORK(
    |> SELECT 1 as col
   ), (
    |> SELECT 2 as col
   )
--
GeneralizedQueryStmt
+-query=
  +-PipeForkScan
    +-input_scan=
    | +-TableScan(table=MeasureTable_SingleKey)
    +-subpipeline_list=
      +-GeneralizedQuerySubpipeline
      | +-subpipeline=
      | | +-Subpipeline
      | |   +-scan=
      | |     +-ProjectScan
      | |       +-column_list=[$pipe_select.col#15]
      | |       +-expr_list=
      | |       | +-col#15 := Literal(type=INT64, value=1)
      | |       +-input_scan=
      | |         +-SubpipelineInputScan
      | +-output_schema=
      |   +-OutputSchema
      |     +-output_column_list=
      |       +-$pipe_select.col#15 AS col [INT64]
      +-GeneralizedQuerySubpipeline
        +-subpipeline=
        | +-Subpipeline
        |   +-scan=
        |     +-ProjectScan
        |       +-column_list=[$pipe_select.col#16]
        |       +-expr_list=
        |       | +-col#16 := Literal(type=INT64, value=2)
        |       +-input_scan=
        |         +-SubpipelineInputScan
        +-output_schema=
          +-OutputSchema
            +-output_column_list=
              +-$pipe_select.col#16 AS col [INT64]


[REWRITTEN AST]
MultiStmt
+-statement_list=
  +-CreateWithEntryStmt
  | +-with_entry=
  |   +-WithEntry
  |     +-with_query_name="$fork_cte_1"
  |     +-with_subquery=
  |       +-TableScan(table=MeasureTable_SingleKey)
  +-QueryStmt
  | +-output_column_list=
  | | +-$pipe_select.col#15 AS col [INT64]
  | +-query=
  |   +-ProjectScan
  |     +-column_list=[$pipe_select.col#15]
  |     +-expr_list=
  |     | +-col#15 := Literal(type=INT64, value=1)
  |     +-input_scan=
  |       +-WithRefScan(with_query_name="$fork_cte_1")
  +-QueryStmt
    +-output_column_list=
    | +-$pipe_select.col#16 AS col [INT64]
    +-query=
      +-ProjectScan
        +-column_list=[$pipe_select.col#16]
        +-expr_list=
        | +-col#16 := Literal(type=INT64, value=2)
        +-input_scan=
          +-WithRefScan(with_query_name="$fork_cte_1")
==

# Aggregating a MEASURE pseudo column
SELECT AGG(measure_count_star),
FROM MeasureTable_WithPseudoColumns
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#7]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_WithPseudoColumns.measure_count_star#5], table=MeasureTable_WithPseudoColumns, column_index_list=[4])
        +-aggregate_list=
          +-$agg1#7 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithPseudoColumns.measure_count_star#5)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_withpseudocolumns_2.a_1) AS a_3
FROM
  (
    SELECT
      MeasureTable_WithPseudoColumns.measure_count_star AS a_1
    FROM
      MeasureTable_WithPseudoColumns
  ) AS measuretable_withpseudocolumns_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#7 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#7]
        +-expr_list=
        | +-$agg1#7 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#10)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#10]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithPseudoColumns.[key#8, measure_count_star#5, struct_for_measures_from_table_MeasureTable_WithPseudoColumns#9]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithPseudoColumns#9 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct(type=STRUCT<>)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithPseudoColumns.key#8)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithPseudoColumns.[key#8, measure_count_star#5], table=MeasureTable_WithPseudoColumns, column_index_list=[0, 4])
            +-aggregate_list=
              +-constituent_aggregate_1#10 :=
                +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-group_by_list=
                    +-grain_lock_key#11 :=
                      +-GetStructField
                        +-type=STRUCT<key INT64>
                        +-expr=
                        | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithPseudoColumns.struct_for_measures_from_table_MeasureTable_WithPseudoColumns#9)
                        +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_7.a_6 AS a_8
FROM
  (
    SELECT
      COUNT(*
        GROUP BY projectscan_5.a_4.key_columns) AS a_6
    FROM
      (
        SELECT
          measuretable_withpseudocolumns_3.a_1 AS a_1,
          measuretable_withpseudocolumns_3.a_2 AS a_2,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key INT64 > > (STRUCT< > (), STRUCT< key INT64 >
            (measuretable_withpseudocolumns_3.a_1)) AS a_4
        FROM
          (
            SELECT
              MeasureTable_WithPseudoColumns.key AS a_1,
              MeasureTable_WithPseudoColumns.measure_count_star AS a_2
            FROM
              MeasureTable_WithPseudoColumns
          ) AS measuretable_withpseudocolumns_3
      ) AS projectscan_5
  ) AS aggregatescan_7;
==

# Measures with subqueries in the measure expression
SELECT
  key,
  AGG(measure_with_top_level_subquery),
  AGG(measure_with_simple_subquery_in_aggregate_function),
  AGG(measure_with_aggregate_subquery_in_aggregate_function),
  AGG(measure_with_multiple_subqueries)
FROM MeasureTable_WithSubqueryMeasureExprs
GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#17 AS key [INT64]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
| +-$aggregate.$agg3#15 AS `$col4` [INT64]
| +-$aggregate.$agg4#16 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#17, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15, $aggregate.$agg4#16]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#17, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15, $aggregate.$agg4#16]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, measure_with_top_level_subquery#5, measure_with_simple_subquery_in_aggregate_function#6, measure_with_aggregate_subquery_in_aggregate_function#7, measure_with_multiple_subqueries#8], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 4, 5, 6, 7])
        +-group_by_list=
        | +-key#17 := ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
        +-aggregate_list=
          +-$agg1#13 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_top_level_subquery#5)
          +-$agg2#14 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function#6)
          +-$agg3#15 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_aggregate_subquery_in_aggregate_function#7)
          +-$agg4#16 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_multiple_subqueries#8)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withsubquerymeasureexprs_6.a_1 AS key,
  AGG(measuretable_withsubquerymeasureexprs_6.a_2) AS a_8,
  AGG(measuretable_withsubquerymeasureexprs_6.a_3) AS a_9,
  AGG(measuretable_withsubquerymeasureexprs_6.a_4) AS a_10,
  AGG(measuretable_withsubquerymeasureexprs_6.a_5) AS a_11
FROM
  (
    SELECT
      MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_top_level_subquery AS a_2,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function AS a_3,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_aggregate_subquery_in_aggregate_function AS a_4,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_multiple_subqueries AS a_5
    FROM
      MeasureTable_WithSubqueryMeasureExprs
  ) AS measuretable_withsubquerymeasureexprs_6
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#17 AS key [INT64]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
| +-$aggregate.$agg3#15 AS `$col4` [INT64]
| +-$aggregate.$agg4#16 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#17, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15, $aggregate.$agg4#16]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#17, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15, $aggregate.$agg4#16]
        +-expr_list=
        | +-$agg1#13 :=
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#22)
        | |   +-SubqueryExpr
        | |     +-type=INT64
        | |     +-subquery_type=SCALAR
        | |     +-subquery=
        | |       +-ProjectScan
        | |         +-column_list=[$aggregate.$agg1#20]
        | |         +-input_scan=
        | |           +-AggregateScan
        | |             +-column_list=[$aggregate.$agg1#20]
        | |             +-input_scan=
        | |             | +-ArrayScan
        | |             |   +-column_list=[$array.$unnest1#21]
        | |             |   +-array_expr_list=
        | |             |   | +-Literal(type=ARRAY<INT64>, value=[1])
        | |             |   +-element_column_list=[$array.$unnest1#21]
        | |             +-aggregate_list=
        | |               +-$agg1#20 :=
        | |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        | |                   +-Literal(type=INT64, value=1)
        | +-$agg2#14 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#26)
        | +-$agg3#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#31)
        | +-$agg4#16 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#38)
        |     +-SubqueryExpr
        |       +-type=INT64
        |       +-subquery_type=SCALAR
        |       +-subquery=
        |         +-ProjectScan
        |           +-column_list=[$aggregate.$agg1#36]
        |           +-input_scan=
        |             +-AggregateScan
        |               +-column_list=[$aggregate.$agg1#36]
        |               +-input_scan=
        |               | +-ArrayScan
        |               |   +-column_list=[$array.$unnest2#37]
        |               |   +-array_expr_list=
        |               |   | +-Literal(type=ARRAY<INT64>, value=[1])
        |               |   +-element_column_list=[$array.$unnest2#37]
        |               +-aggregate_list=
        |                 +-$agg1#36 :=
        |                   +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                     +-Literal(type=INT64, value=1)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#17, $aggregate.constituent_aggregate_1#22, $aggregate.constituent_aggregate_1#26, $aggregate.constituent_aggregate_1#31, $aggregate.constituent_aggregate_1#38]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#18, measure_with_top_level_subquery#5, measure_with_simple_subquery_in_aggregate_function#6, measure_with_aggregate_subquery_in_aggregate_function#7, measure_with_multiple_subqueries#8, struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#18)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#18, measure_with_top_level_subquery#5, measure_with_simple_subquery_in_aggregate_function#6, measure_with_aggregate_subquery_in_aggregate_function#7, measure_with_multiple_subqueries#8], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 3, 4, 5, 6, 7])
            +-group_by_list=
            | +-key#17 := ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#22 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#26 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#27)
              |   +-group_by_list=
              |   | +-grain_lock_key#28 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#27 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-SubqueryExpr
              |           +-type=INT64
              |           +-subquery_type=SCALAR
              |           +-parameter_list=
              |           | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
              |           +-subquery=
              |             +-ProjectScan
              |               +-column_list=[$expr_subquery.price#25]
              |               +-expr_list=
              |               | +-price#25 :=
              |               |   +-GetStructField
              |               |     +-type=INT64
              |               |     +-expr=
              |               |     | +-GetStructField
              |               |     |   +-type=STRUCT<price INT64>
              |               |     |   +-expr=
              |               |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19, is_correlated=TRUE)
              |               |     |   +-field_idx=0
              |               |     +-field_idx=0
              |               +-input_scan=
              |                 +-SingleRowScan
              +-constituent_aggregate_1#31 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#32)
              |   +-group_by_list=
              |   | +-grain_lock_key#33 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#32 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-SubqueryExpr
              |           +-type=INT64
              |           +-subquery_type=SCALAR
              |           +-parameter_list=
              |           | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
              |           +-subquery=
              |             +-ProjectScan
              |               +-column_list=[$aggregate.$agg1#29]
              |               +-input_scan=
              |                 +-AggregateScan
              |                   +-column_list=[$aggregate.$agg1#29]
              |                   +-input_scan=
              |                   | +-ArrayScan
              |                   |   +-column_list=[$array.$unnest1#30]
              |                   |   +-array_expr_list=
              |                   |   | +-Literal(type=ARRAY<INT64>, value=[1])
              |                   |   +-element_column_list=[$array.$unnest1#30]
              |                   +-aggregate_list=
              |                     +-$agg1#29 :=
              |                       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |                         +-GetStructField
              |                           +-type=INT64
              |                           +-expr=
              |                           | +-GetStructField
              |                           |   +-type=STRUCT<price INT64>
              |                           |   +-expr=
              |                           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19, is_correlated=TRUE)
              |                           |   +-field_idx=0
              |                           +-field_idx=0
              +-constituent_aggregate_1#38 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#39)
                  +-group_by_list=
                  | +-grain_lock_key#40 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#39 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-SubqueryExpr
                          +-type=INT64
                          +-subquery_type=SCALAR
                          +-parameter_list=
                          | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19)
                          +-subquery=
                            +-ProjectScan
                              +-column_list=[$aggregate.$agg1#34]
                              +-input_scan=
                                +-AggregateScan
                                  +-column_list=[$aggregate.$agg1#34]
                                  +-input_scan=
                                  | +-ArrayScan
                                  |   +-column_list=[$array.$unnest1#35]
                                  |   +-array_expr_list=
                                  |   | +-Literal(type=ARRAY<INT64>, value=[1])
                                  |   +-element_column_list=[$array.$unnest1#35]
                                  +-aggregate_list=
                                    +-$agg1#34 :=
                                      +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                                        +-GetStructField
                                          +-type=INT64
                                          +-expr=
                                          | +-GetStructField
                                          |   +-type=STRUCT<price INT64>
                                          |   +-expr=
                                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#19, is_correlated=TRUE)
                                          |   +-field_idx=0
                                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_20.a_15 AS key,
  (aggregatescan_20.a_16) + (
    SELECT
      SUM(1) AS a_23
    FROM
      UNNEST(ARRAY< INT64 >[1]) AS a_22
  ) AS a_21,
  aggregatescan_20.a_17 AS a_24,
  aggregatescan_20.a_18 AS a_25,
  (aggregatescan_20.a_19) + (
    SELECT
      SUM(1) AS a_28
    FROM
      UNNEST(ARRAY< INT64 >[1]) AS a_27
  ) AS a_26
FROM
  (
    SELECT
      projectscan_9.a_1 AS a_15,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.price)
        GROUP BY projectscan_9.a_8.key_columns) AS a_16,
      SUM(ANY_VALUE((
            SELECT
              projectscan_9.a_8.referenced_columns.price AS a_10
          ))
        GROUP BY projectscan_9.a_8.key_columns) AS a_17,
      SUM(ANY_VALUE((
            SELECT
              SUM(projectscan_9.a_8.referenced_columns.price) AS a_12
            FROM
              UNNEST(ARRAY< INT64 >[1]) AS a_11
          ))
        GROUP BY projectscan_9.a_8.key_columns) AS a_18,
      SUM(ANY_VALUE((
            SELECT
              SUM(projectscan_9.a_8.referenced_columns.price) AS a_14
            FROM
              UNNEST(ARRAY< INT64 >[1]) AS a_13
          ))
        GROUP BY projectscan_9.a_8.key_columns) AS a_19
    FROM
      (
        SELECT
          measuretable_withsubquerymeasureexprs_7.a_1 AS a_1,
          measuretable_withsubquerymeasureexprs_7.a_2 AS a_2,
          measuretable_withsubquerymeasureexprs_7.a_3 AS a_3,
          measuretable_withsubquerymeasureexprs_7.a_4 AS a_4,
          measuretable_withsubquerymeasureexprs_7.a_5 AS a_5,
          measuretable_withsubquerymeasureexprs_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withsubquerymeasureexprs_7.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_7.a_1)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
              MeasureTable_WithSubqueryMeasureExprs.price AS a_2,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_top_level_subquery AS a_3,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function AS a_4,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_aggregate_subquery_in_aggregate_function AS a_5,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_multiple_subqueries AS a_6
            FROM
              MeasureTable_WithSubqueryMeasureExprs
          ) AS measuretable_withsubquerymeasureexprs_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_20;
==

# Measures with deeply nested subqueries.
SELECT
  key,
  AGG(measure_with_deeply_nested_subquery)
FROM MeasureTable_WithSubqueryMeasureExprs
GROUP BY key;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#14 AS key [INT64]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#14, $aggregate.$agg1#13]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#14, $aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, measure_with_deeply_nested_subquery#9], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 8])
        +-group_by_list=
        | +-key#14 := ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_deeply_nested_subquery#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withsubquerymeasureexprs_3.a_1 AS key,
  AGG(measuretable_withsubquerymeasureexprs_3.a_2) AS a_5
FROM
  (
    SELECT
      MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_deeply_nested_subquery AS a_2
    FROM
      MeasureTable_WithSubqueryMeasureExprs
  ) AS measuretable_withsubquerymeasureexprs_3
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#14 AS key [INT64]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#14, $aggregate.$agg1#13]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#14, $aggregate.$agg1#13]
        +-expr_list=
        | +-$agg1#13 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#20)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#14, $aggregate.constituent_aggregate_1#20]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#15, measure_with_deeply_nested_subquery#9, struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#16]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#16 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#15)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#15, measure_with_deeply_nested_subquery#9], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 3, 8])
            +-group_by_list=
            | +-key#14 := ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#20 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#21)
                  +-group_by_list=
                  | +-grain_lock_key#22 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#16)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#21 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-SubqueryExpr
                          +-type=INT64
                          +-subquery_type=SCALAR
                          +-parameter_list=
                          | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#16)
                          +-subquery=
                            +-ProjectScan
                              +-column_list=[$subquery1.x#17]
                              +-input_scan=
                                +-ProjectScan
                                  +-column_list=[$subquery1.x#17]
                                  +-expr_list=
                                  | +-x#17 :=
                                  |   +-SubqueryExpr
                                  |     +-type=INT64
                                  |     +-subquery_type=SCALAR
                                  |     +-parameter_list=
                                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#16, is_correlated=TRUE)
                                  |     +-subquery=
                                  |       +-ProjectScan
                                  |         +-column_list=[$aggregate.$agg1#18]
                                  |         +-input_scan=
                                  |           +-AggregateScan
                                  |             +-column_list=[$aggregate.$agg1#18]
                                  |             +-input_scan=
                                  |             | +-ArrayScan
                                  |             |   +-column_list=[$array.$unnest1#19]
                                  |             |   +-array_expr_list=
                                  |             |   | +-Literal(type=ARRAY<INT64>, value=[1])
                                  |             |   +-element_column_list=[$array.$unnest1#19]
                                  |             +-aggregate_list=
                                  |               +-$agg1#18 :=
                                  |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                                  |                   +-GetStructField
                                  |                     +-type=INT64
                                  |                     +-expr=
                                  |                     | +-GetStructField
                                  |                     |   +-type=STRUCT<price INT64>
                                  |                     |   +-expr=
                                  |                     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#16, is_correlated=TRUE)
                                  |                     |   +-field_idx=0
                                  |                     +-field_idx=0
                                  +-input_scan=
                                    +-SingleRowScan
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_10 AS key,
  aggregatescan_12.a_11 AS a_13
FROM
  (
    SELECT
      projectscan_6.a_1 AS a_10,
      SUM(ANY_VALUE((
            SELECT
              (
                SELECT
                  SUM(projectscan_6.a_5.referenced_columns.price) AS a_9
                FROM
                  UNNEST(ARRAY< INT64 >[1]) AS a_8
              ) AS a_7
          ))
        GROUP BY projectscan_6.a_5.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_withsubquerymeasureexprs_4.a_1 AS a_1,
          measuretable_withsubquerymeasureexprs_4.a_2 AS a_2,
          measuretable_withsubquerymeasureexprs_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withsubquerymeasureexprs_4.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
              MeasureTable_WithSubqueryMeasureExprs.price AS a_2,
              MeasureTable_WithSubqueryMeasureExprs.measure_with_deeply_nested_subquery AS a_3
            FROM
              MeasureTable_WithSubqueryMeasureExprs
          ) AS measuretable_withsubquerymeasureexprs_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_12;
==

# Evaluate measures on a STRUCT value table.
SELECT
  StructValueTable_WithMeasures.f.d.b,
  AGG(measure_count_star),
  AGG(measure_sum_e),
  AGG(measure_ratio_sum_a_to_sum_c),
  AGG(measure_sum_key)
FROM StructValueTable_WithMeasures
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.b#11 AS b [STRING]
| +-$aggregate.$agg1#7 AS `$col2` [INT64]
| +-$aggregate.$agg2#8 AS `$col3` [INT64]
| +-$aggregate.$agg3#9 AS `$col4` [DOUBLE]
| +-$aggregate.$agg4#10 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
        +-input_scan=
        | +-TableScan(column_list=StructValueTable_WithMeasures.[value#1, measure_count_star#3, measure_sum_e#4, measure_ratio_sum_a_to_sum_c#5, measure_sum_key#6], table=StructValueTable_WithMeasures, column_index_list=[0, 2, 3, 4, 5])
        +-group_by_list=
        | +-b#11 :=
        |   +-GetStructField
        |     +-type=STRING
        |     +-expr=
        |     | +-GetStructField
        |     |   +-type=STRUCT<a INT32, b STRING>
        |     |   +-expr=
        |     |   | +-GetStructField
        |     |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |     |   |   +-expr=
        |     |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=StructValueTable_WithMeasures.value#1)
        |     |   |   +-field_idx=1
        |     |   +-field_idx=1
        |     +-field_idx=1
        +-aggregate_list=
          +-$agg1#7 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=StructValueTable_WithMeasures.measure_count_star#3)
          +-$agg2#8 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=StructValueTable_WithMeasures.measure_sum_e#4)
          +-$agg3#9 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
          |   +-ColumnRef(type=MEASURE<DOUBLE>, column=StructValueTable_WithMeasures.measure_ratio_sum_a_to_sum_c#5)
          +-$agg4#10 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=StructValueTable_WithMeasures.measure_sum_key#6)

[SQLBUILDER_OUTPUT]
SELECT
  structvaluetable_withmeasures_6.a_1.f.d.b AS b,
  AGG(structvaluetable_withmeasures_6.a_2) AS a_8,
  AGG(structvaluetable_withmeasures_6.a_3) AS a_9,
  AGG(structvaluetable_withmeasures_6.a_4) AS a_10,
  AGG(structvaluetable_withmeasures_6.a_5) AS a_11
FROM
  (
    SELECT
      StructValueTable_WithMeasures AS a_1,
      StructValueTable_WithMeasures.measure_count_star AS a_2,
      StructValueTable_WithMeasures.measure_sum_e AS a_3,
      StructValueTable_WithMeasures.measure_ratio_sum_a_to_sum_c AS a_4,
      StructValueTable_WithMeasures.measure_sum_key AS a_5
    FROM
      StructValueTable_WithMeasures
  ) AS structvaluetable_withmeasures_6
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.b#11 AS b [STRING]
| +-$aggregate.$agg1#7 AS `$col2` [INT64]
| +-$aggregate.$agg2#8 AS `$col3` [INT64]
| +-$aggregate.$agg3#9 AS `$col4` [DOUBLE]
| +-$aggregate.$agg4#10 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.b#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
        +-expr_list=
        | +-$agg1#7 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#14)
        | +-$agg2#8 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#16)
        | +-$agg3#9 :=
        | | +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        | |   +-Cast(INT64 -> DOUBLE)
        | |   | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        | |   +-Cast(INT64 -> DOUBLE)
        | |     +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#20)
        | +-$agg4#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#25)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.b#11, $aggregate.constituent_aggregate_1#14, $aggregate.constituent_aggregate_1#16, $aggregate.constituent_aggregate_1#19, $aggregate.constituent_aggregate_2#20, $aggregate.constituent_aggregate_1#25]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=StructValueTable_WithMeasures.[value#1, key#12, measure_count_star#3, measure_sum_e#4, measure_ratio_sum_a_to_sum_c#5, measure_sum_key#6, struct_for_measures_from_table_StructValueTable_WithMeasures#13]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_StructValueTable_WithMeasures#13 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=StructValueTable_WithMeasures.key#12)
            |   |       |   +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=StructValueTable_WithMeasures.value#1)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=StructValueTable_WithMeasures.key#12)
            |   +-input_scan=
            |     +-TableScan(column_list=StructValueTable_WithMeasures.[value#1, key#12, measure_count_star#3, measure_sum_e#4, measure_ratio_sum_a_to_sum_c#5, measure_sum_key#6], table=StructValueTable_WithMeasures, column_index_list=[0, 1, 2, 3, 4, 5])
            +-group_by_list=
            | +-b#11 :=
            |   +-GetStructField
            |     +-type=STRING
            |     +-expr=
            |     | +-GetStructField
            |     |   +-type=STRUCT<a INT32, b STRING>
            |     |   +-expr=
            |     |   | +-GetStructField
            |     |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
            |     |   |   +-expr=
            |     |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=StructValueTable_WithMeasures.value#1)
            |     |   |   +-field_idx=1
            |     |   +-field_idx=1
            |     +-field_idx=1
            +-aggregate_list=
              +-constituent_aggregate_1#14 :=
              | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
              |   +-group_by_list=
              |     +-grain_lock_key#15 :=
              |       +-GetStructField
              |         +-type=STRUCT<key INT64>
              |         +-expr=
              |         | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |         +-field_idx=1
              +-constituent_aggregate_1#16 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#17)
              |   +-group_by_list=
              |   | +-grain_lock_key#18 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#17 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-Cast(INT32 -> INT64)
              |           +-GetStructField
              |             +-type=INT32
              |             +-expr=
              |             | +-GetStructField
              |             |   +-type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>
              |             |   +-expr=
              |             |   | +-GetStructField
              |             |   |   +-type=STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>
              |             |   |   +-expr=
              |             |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |             |   |   +-field_idx=0
              |             |   +-field_idx=1
              |             +-field_idx=0
              +-constituent_aggregate_1#19 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#21)
              |   +-group_by_list=
              |   | +-grain_lock_key#22 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#21 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-Cast(INT32 -> INT64)
              |           +-GetStructField
              |             +-type=INT32
              |             +-expr=
              |             | +-GetStructField
              |             |   +-type=STRUCT<a INT32, b STRING>
              |             |   +-expr=
              |             |   | +-GetStructField
              |             |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
              |             |   |   +-expr=
              |             |   |   | +-GetStructField
              |             |   |   |   +-type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>
              |             |   |   |   +-expr=
              |             |   |   |   | +-GetStructField
              |             |   |   |   |   +-type=STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>
              |             |   |   |   |   +-expr=
              |             |   |   |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |             |   |   |   |   +-field_idx=0
              |             |   |   |   +-field_idx=1
              |             |   |   +-field_idx=1
              |             |   +-field_idx=1
              |             +-field_idx=0
              +-constituent_aggregate_2#20 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-Cast(INT32 -> INT64)
              |           +-GetStructField
              |             +-type=INT32
              |             +-expr=
              |             | +-GetStructField
              |             |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
              |             |   +-expr=
              |             |   | +-GetStructField
              |             |   |   +-type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>
              |             |   |   +-expr=
              |             |   |   | +-GetStructField
              |             |   |   |   +-type=STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>
              |             |   |   |   +-expr=
              |             |   |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
              |             |   |   |   +-field_idx=0
              |             |   |   +-field_idx=1
              |             |   +-field_idx=1
              |             +-field_idx=0
              +-constituent_aggregate_1#25 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#26)
                  +-group_by_list=
                  | +-grain_lock_key#27 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#26 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>>, key_columns STRUCT<key INT64>>, column=StructValueTable_WithMeasures.struct_for_measures_from_table_StructValueTable_WithMeasures#13)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_16.a_10 AS b,
  aggregatescan_16.a_11 AS a_17,
  aggregatescan_16.a_12 AS a_18,
  CAST(aggregatescan_16.a_13 AS DOUBLE) / CAST(aggregatescan_16.a_14 AS DOUBLE) AS a_19,
  aggregatescan_16.a_15 AS a_20
FROM
  (
    SELECT
      projectscan_9.a_1.f.d.b AS a_10,
      COUNT(*
        GROUP BY projectscan_9.a_8.key_columns) AS a_11,
      SUM(ANY_VALUE(CAST(projectscan_9.a_8.referenced_columns.value.e AS INT64))
        GROUP BY projectscan_9.a_8.key_columns) AS a_12,
      SUM(ANY_VALUE(CAST(projectscan_9.a_8.referenced_columns.value.f.d.a AS INT64))
        GROUP BY projectscan_9.a_8.key_columns) AS a_13,
      SUM(ANY_VALUE(CAST(projectscan_9.a_8.referenced_columns.value.f.c AS INT64))
        GROUP BY projectscan_9.a_8.key_columns) AS a_14,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.key)
        GROUP BY projectscan_9.a_8.key_columns) AS a_15
    FROM
      (
        SELECT
          structvaluetable_withmeasures_7.a_1 AS a_1,
          structvaluetable_withmeasures_7.a_2 AS a_2,
          structvaluetable_withmeasures_7.a_3 AS a_3,
          structvaluetable_withmeasures_7.a_4 AS a_4,
          structvaluetable_withmeasures_7.a_5 AS a_5,
          structvaluetable_withmeasures_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< key INT64, value STRUCT< e INT32, f STRUCT< c INT32, d STRUCT< a INT32,
          b STRING > > > >, key_columns STRUCT< key INT64 > > (STRUCT< key INT64, value STRUCT< e INT32, f STRUCT<
            c INT32, d STRUCT< a INT32, b STRING > > > > (structvaluetable_withmeasures_7.a_2, structvaluetable_withmeasures_7.a_1),
            STRUCT< key INT64 > (structvaluetable_withmeasures_7.a_2)) AS a_8
        FROM
          (
            SELECT
              StructValueTable_WithMeasures AS a_1,
              StructValueTable_WithMeasures.key AS a_2,
              StructValueTable_WithMeasures.measure_count_star AS a_3,
              StructValueTable_WithMeasures.measure_sum_e AS a_4,
              StructValueTable_WithMeasures.measure_ratio_sum_a_to_sum_c AS a_5,
              StructValueTable_WithMeasures.measure_sum_key AS a_6
            FROM
              StructValueTable_WithMeasures
          ) AS structvaluetable_withmeasures_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_16;
==

# Evaluate measures on a PROTO value table.
SELECT
  string_val,
  AGG(measure_count_star),
  AGG(measure_sum_int64),
  AGG(measure_ratio_sum_int64_to_sum_int32),
  AGG(measure_sum_key)
FROM KitchenSinkValueTable_WithMeasures
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.string_val#11 AS string_val [STRING]
| +-$aggregate.$agg1#7 AS `$col2` [INT64]
| +-$aggregate.$agg2#8 AS `$col3` [INT64]
| +-$aggregate.$agg3#9 AS `$col4` [DOUBLE]
| +-$aggregate.$agg4#10 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string_val#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.string_val#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
        +-input_scan=
        | +-TableScan(column_list=KitchenSinkValueTable_WithMeasures.[value#1, measure_count_star#3, measure_sum_int64#4, measure_ratio_sum_int64_to_sum_int32#5, measure_sum_key#6], table=KitchenSinkValueTable_WithMeasures, column_index_list=[0, 2, 3, 4, 5])
        +-group_by_list=
        | +-string_val#11 :=
        |   +-GetProtoField
        |     +-type=STRING
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable_WithMeasures.value#1)
        |     +-field_descriptor=string_val
        |     +-default_value="default_name"
        +-aggregate_list=
          +-$agg1#7 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=KitchenSinkValueTable_WithMeasures.measure_count_star#3)
          +-$agg2#8 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=KitchenSinkValueTable_WithMeasures.measure_sum_int64#4)
          +-$agg3#9 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
          |   +-ColumnRef(type=MEASURE<DOUBLE>, column=KitchenSinkValueTable_WithMeasures.measure_ratio_sum_int64_to_sum_int32#5)
          +-$agg4#10 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=KitchenSinkValueTable_WithMeasures.measure_sum_key#6)

[SQLBUILDER_OUTPUT]
SELECT
  kitchensinkvaluetable_withmeasures_6.a_1.string_val AS string_val,
  AGG(kitchensinkvaluetable_withmeasures_6.a_2) AS a_8,
  AGG(kitchensinkvaluetable_withmeasures_6.a_3) AS a_9,
  AGG(kitchensinkvaluetable_withmeasures_6.a_4) AS a_10,
  AGG(kitchensinkvaluetable_withmeasures_6.a_5) AS a_11
FROM
  (
    SELECT
      KitchenSinkValueTable_WithMeasures AS a_1,
      KitchenSinkValueTable_WithMeasures.measure_count_star AS a_2,
      KitchenSinkValueTable_WithMeasures.measure_sum_int64 AS a_3,
      KitchenSinkValueTable_WithMeasures.measure_ratio_sum_int64_to_sum_int32 AS a_4,
      KitchenSinkValueTable_WithMeasures.measure_sum_key AS a_5
    FROM
      KitchenSinkValueTable_WithMeasures
  ) AS kitchensinkvaluetable_withmeasures_6
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string_val#11 AS string_val [STRING]
| +-$aggregate.$agg1#7 AS `$col2` [INT64]
| +-$aggregate.$agg2#8 AS `$col3` [INT64]
| +-$aggregate.$agg3#9 AS `$col4` [DOUBLE]
| +-$aggregate.$agg4#10 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string_val#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.string_val#11, $aggregate.$agg1#7, $aggregate.$agg2#8, $aggregate.$agg3#9, $aggregate.$agg4#10]
        +-expr_list=
        | +-$agg1#7 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#14)
        | +-$agg2#8 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#16)
        | +-$agg3#9 :=
        | | +-FunctionCall(ZetaSQL:$divide(DOUBLE, DOUBLE) -> DOUBLE)
        | |   +-Cast(INT64 -> DOUBLE)
        | |   | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        | |   +-Cast(INT64 -> DOUBLE)
        | |     +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_2#20)
        | +-$agg4#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#25)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.string_val#11, $aggregate.constituent_aggregate_1#14, $aggregate.constituent_aggregate_1#16, $aggregate.constituent_aggregate_1#19, $aggregate.constituent_aggregate_2#20, $aggregate.constituent_aggregate_1#25]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=KitchenSinkValueTable_WithMeasures.[value#1, key#12, measure_count_star#3, measure_sum_int64#4, measure_ratio_sum_int64_to_sum_int32#5, measure_sum_key#6, struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=KitchenSinkValueTable_WithMeasures.key#12)
            |   |       |   +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable_WithMeasures.value#1)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=KitchenSinkValueTable_WithMeasures.key#12)
            |   +-input_scan=
            |     +-TableScan(column_list=KitchenSinkValueTable_WithMeasures.[value#1, key#12, measure_count_star#3, measure_sum_int64#4, measure_ratio_sum_int64_to_sum_int32#5, measure_sum_key#6], table=KitchenSinkValueTable_WithMeasures, column_index_list=[0, 1, 2, 3, 4, 5])
            +-group_by_list=
            | +-string_val#11 :=
            |   +-GetProtoField
            |     +-type=STRING
            |     +-expr=
            |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable_WithMeasures.value#1)
            |     +-field_descriptor=string_val
            |     +-default_value="default_name"
            +-aggregate_list=
              +-constituent_aggregate_1#14 :=
              | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
              |   +-group_by_list=
              |     +-grain_lock_key#15 :=
              |       +-GetStructField
              |         +-type=STRUCT<key INT64>
              |         +-expr=
              |         | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |         +-field_idx=1
              +-constituent_aggregate_1#16 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#17)
              |   +-group_by_list=
              |   | +-grain_lock_key#18 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#17 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetProtoField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
              |           |   +-expr=
              |           |   | +-GetStructField
              |           |   |   +-type=STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>
              |           |   |   +-expr=
              |           |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |           |   |   +-field_idx=0
              |           |   +-field_idx=1
              |           +-field_descriptor=int64_val
              |           +-default_value=0
              +-constituent_aggregate_1#19 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#21)
              |   +-group_by_list=
              |   | +-grain_lock_key#22 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#21 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetProtoField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
              |           |   +-expr=
              |           |   | +-GetStructField
              |           |   |   +-type=STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>
              |           |   |   +-expr=
              |           |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |           |   |   +-field_idx=0
              |           |   +-field_idx=1
              |           +-field_descriptor=int64_val
              |           +-default_value=0
              +-constituent_aggregate_2#20 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
              |   +-group_by_list=
              |   | +-grain_lock_key#24 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-Cast(INT32 -> INT64)
              |           +-GetProtoField
              |             +-type=INT32
              |             +-expr=
              |             | +-GetStructField
              |             |   +-type=PROTO<zetasql_test__.KitchenSinkPB>
              |             |   +-expr=
              |             |   | +-GetStructField
              |             |   |   +-type=STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>
              |             |   |   +-expr=
              |             |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
              |             |   |   +-field_idx=0
              |             |   +-field_idx=1
              |             +-field_descriptor=int32_val
              |             +-default_value=77
              +-constituent_aggregate_1#25 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#26)
                  +-group_by_list=
                  | +-grain_lock_key#27 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#26 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, value PROTO<zetasql_test__.KitchenSinkPB>>, key_columns STRUCT<key INT64>>, column=KitchenSinkValueTable_WithMeasures.struct_for_measures_from_table_KitchenSinkValueTable_WithMeasures#13)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_16.a_10 AS string_val,
  aggregatescan_16.a_11 AS a_17,
  aggregatescan_16.a_12 AS a_18,
  CAST(aggregatescan_16.a_13 AS DOUBLE) / CAST(aggregatescan_16.a_14 AS DOUBLE) AS a_19,
  aggregatescan_16.a_15 AS a_20
FROM
  (
    SELECT
      projectscan_9.a_1.string_val AS a_10,
      COUNT(*
        GROUP BY projectscan_9.a_8.key_columns) AS a_11,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.value.int64_val)
        GROUP BY projectscan_9.a_8.key_columns) AS a_12,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.value.int64_val)
        GROUP BY projectscan_9.a_8.key_columns) AS a_13,
      SUM(ANY_VALUE(CAST(projectscan_9.a_8.referenced_columns.value.int32_val AS INT64))
        GROUP BY projectscan_9.a_8.key_columns) AS a_14,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.key)
        GROUP BY projectscan_9.a_8.key_columns) AS a_15
    FROM
      (
        SELECT
          kitchensinkvaluetable_withmeasures_7.a_1 AS a_1,
          kitchensinkvaluetable_withmeasures_7.a_2 AS a_2,
          kitchensinkvaluetable_withmeasures_7.a_3 AS a_3,
          kitchensinkvaluetable_withmeasures_7.a_4 AS a_4,
          kitchensinkvaluetable_withmeasures_7.a_5 AS a_5,
          kitchensinkvaluetable_withmeasures_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< key INT64, value `zetasql_test__.KitchenSinkPB` >, key_columns STRUCT<
          key INT64 > > (STRUCT< key INT64, value `zetasql_test__.KitchenSinkPB` > (kitchensinkvaluetable_withmeasures_7.a_2,
              kitchensinkvaluetable_withmeasures_7.a_1), STRUCT< key INT64 > (kitchensinkvaluetable_withmeasures_7.a_2)) AS a_8
        FROM
          (
            SELECT
              KitchenSinkValueTable_WithMeasures AS a_1,
              KitchenSinkValueTable_WithMeasures.key AS a_2,
              KitchenSinkValueTable_WithMeasures.measure_count_star AS a_3,
              KitchenSinkValueTable_WithMeasures.measure_sum_int64 AS a_4,
              KitchenSinkValueTable_WithMeasures.measure_ratio_sum_int64_to_sum_int32 AS a_5,
              KitchenSinkValueTable_WithMeasures.measure_sum_key AS a_6
            FROM
              KitchenSinkValueTable_WithMeasures
          ) AS kitchensinkvaluetable_withmeasures_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_16;
==

SELECT
  Int64ValueTable_WithMeasures,
  AGG(measure_count_star),
  AGG(measure_sum_key)
FROM Int64ValueTable_WithMeasures
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.Int64ValueTable_WithMeasures#10 AS Int64ValueTable_WithMeasures [INT64]
| +-$aggregate.$agg1#8 AS `$col2` [INT64]
| +-$aggregate.$agg2#9 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Int64ValueTable_WithMeasures#10, $aggregate.$agg1#8, $aggregate.$agg2#9]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.Int64ValueTable_WithMeasures#10, $aggregate.$agg1#8, $aggregate.$agg2#9]
        +-input_scan=
        | +-TableScan(column_list=Int64ValueTable_WithMeasures.[value#1, measure_count_star#3, measure_sum_key#4], table=Int64ValueTable_WithMeasures, column_index_list=[0, 2, 3])
        +-group_by_list=
        | +-Int64ValueTable_WithMeasures#10 := ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.value#1)
        +-aggregate_list=
          +-$agg1#8 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=Int64ValueTable_WithMeasures.measure_count_star#3)
          +-$agg2#9 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=Int64ValueTable_WithMeasures.measure_sum_key#4)

[SQLBUILDER_OUTPUT]
SELECT
  int64valuetable_withmeasures_4.a_1 AS Int64ValueTable_WithMeasures,
  AGG(int64valuetable_withmeasures_4.a_2) AS a_6,
  AGG(int64valuetable_withmeasures_4.a_3) AS a_7
FROM
  (
    SELECT
      Int64ValueTable_WithMeasures AS a_1,
      Int64ValueTable_WithMeasures.measure_count_star AS a_2,
      Int64ValueTable_WithMeasures.measure_sum_key AS a_3
    FROM
      Int64ValueTable_WithMeasures
  ) AS int64valuetable_withmeasures_4
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.Int64ValueTable_WithMeasures#10 AS Int64ValueTable_WithMeasures [INT64]
| +-$aggregate.$agg1#8 AS `$col2` [INT64]
| +-$aggregate.$agg2#9 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.Int64ValueTable_WithMeasures#10, $aggregate.$agg1#8, $aggregate.$agg2#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.Int64ValueTable_WithMeasures#10, $aggregate.$agg1#8, $aggregate.$agg2#9]
        +-expr_list=
        | +-$agg1#8 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#13)
        | +-$agg2#9 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#15)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.Int64ValueTable_WithMeasures#10, $aggregate.constituent_aggregate_1#13, $aggregate.constituent_aggregate_1#15]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=Int64ValueTable_WithMeasures.[value#1, key#11, measure_count_star#3, measure_sum_key#4, struct_for_measures_from_table_Int64ValueTable_WithMeasures#12]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_Int64ValueTable_WithMeasures#12 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.key#11)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.key#11)
            |   +-input_scan=
            |     +-TableScan(column_list=Int64ValueTable_WithMeasures.[value#1, key#11, measure_count_star#3, measure_sum_key#4], table=Int64ValueTable_WithMeasures, column_index_list=[0, 1, 2, 3])
            +-group_by_list=
            | +-Int64ValueTable_WithMeasures#10 := ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.value#1)
            +-aggregate_list=
              +-constituent_aggregate_1#13 :=
              | +-AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
              |   +-group_by_list=
              |     +-grain_lock_key#14 :=
              |       +-GetStructField
              |         +-type=STRUCT<key INT64>
              |         +-expr=
              |         | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=Int64ValueTable_WithMeasures.struct_for_measures_from_table_Int64ValueTable_WithMeasures#12)
              |         +-field_idx=1
              +-constituent_aggregate_1#15 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#16)
                  +-group_by_list=
                  | +-grain_lock_key#17 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=Int64ValueTable_WithMeasures.struct_for_measures_from_table_Int64ValueTable_WithMeasures#12)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#16 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<key INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=Int64ValueTable_WithMeasures.struct_for_measures_from_table_Int64ValueTable_WithMeasures#12)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_8 AS Int64ValueTable_WithMeasures,
  aggregatescan_11.a_9 AS a_12,
  aggregatescan_11.a_10 AS a_13
FROM
  (
    SELECT
      projectscan_7.a_1 AS a_8,
      COUNT(*
        GROUP BY projectscan_7.a_6.key_columns) AS a_9,
      SUM(ANY_VALUE(projectscan_7.a_6.referenced_columns.key)
        GROUP BY projectscan_7.a_6.key_columns) AS a_10
    FROM
      (
        SELECT
          int64valuetable_withmeasures_5.a_1 AS a_1,
          int64valuetable_withmeasures_5.a_2 AS a_2,
          int64valuetable_withmeasures_5.a_3 AS a_3,
          int64valuetable_withmeasures_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< key INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< key INT64 >
            (int64valuetable_withmeasures_5.a_2), STRUCT< key INT64 > (int64valuetable_withmeasures_5.a_2)) AS a_6
        FROM
          (
            SELECT
              Int64ValueTable_WithMeasures AS a_1,
              Int64ValueTable_WithMeasures.key AS a_2,
              Int64ValueTable_WithMeasures.measure_count_star AS a_3,
              Int64ValueTable_WithMeasures.measure_sum_key AS a_4
            FROM
              Int64ValueTable_WithMeasures
          ) AS int64valuetable_withmeasures_5
      ) AS projectscan_7
    GROUP BY 1
  ) AS aggregatescan_11;
==

# Measure that isn't actually aggregating anything.
SELECT
  AGG(measure_literal_one)
FROM MeasureTable_WithSubqueryMeasureExprs;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_WithSubqueryMeasureExprs.measure_literal_one#10], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[9])
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_literal_one#10)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_withsubquerymeasureexprs_2.a_1) AS a_3
FROM
  (
    SELECT
      MeasureTable_WithSubqueryMeasureExprs.measure_literal_one AS a_1
    FROM
      MeasureTable_WithSubqueryMeasureExprs
  ) AS measuretable_withsubquerymeasureexprs_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#13]
        +-expr_list=
        | +-$agg1#13 := Literal(type=INT64, value=1)
        +-input_scan=
          +-AggregateScan
            +-input_scan=
              +-ProjectScan
                +-column_list=MeasureTable_WithSubqueryMeasureExprs.[key#14, measure_literal_one#10, struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#15]
                +-expr_list=
                | +-struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#15 :=
                |   +-MakeStruct
                |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>
                |     +-field_list=
                |       +-MakeStruct(type=STRUCT<>)
                |       +-MakeStruct
                |         +-type=STRUCT<key INT64>
                |         +-field_list=
                |           +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#14)
                +-input_scan=
                  +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#14, measure_literal_one#10], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 9])
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_7
FROM
  (
    SELECT
      NULL
    FROM
      (
        SELECT
          measuretable_withsubquerymeasureexprs_3.a_1 AS a_1,
          measuretable_withsubquerymeasureexprs_3.a_2 AS a_2,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key INT64 > > (STRUCT< > (), STRUCT< key INT64 >
            (measuretable_withsubquerymeasureexprs_3.a_1)) AS a_4
        FROM
          (
            SELECT
              MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
              MeasureTable_WithSubqueryMeasureExprs.measure_literal_one AS a_2
            FROM
              MeasureTable_WithSubqueryMeasureExprs
          ) AS measuretable_withsubquerymeasureexprs_3
      ) AS projectscan_5
  ) AS aggregatescan_6;
==

# Measures that aren't actually aggregating anything.
SELECT
  country,
  AGG(measure_literal_one),
  AGG(measure_one_plus_one),
  AGG(measure_scalar_subquery),
FROM MeasureTable_WithSubqueryMeasureExprs
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
| +-$aggregate.$agg3#15 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[country#2, measure_literal_one#10, measure_one_plus_one#11, measure_scalar_subquery#12], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[1, 9, 10, 11])
        +-group_by_list=
        | +-country#16 := ColumnRef(type=STRING, column=MeasureTable_WithSubqueryMeasureExprs.country#2)
        +-aggregate_list=
          +-$agg1#13 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_literal_one#10)
          +-$agg2#14 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_one_plus_one#11)
          +-$agg3#15 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_scalar_subquery#12)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withsubquerymeasureexprs_5.a_1 AS country,
  AGG(measuretable_withsubquerymeasureexprs_5.a_2) AS a_7,
  AGG(measuretable_withsubquerymeasureexprs_5.a_3) AS a_8,
  AGG(measuretable_withsubquerymeasureexprs_5.a_4) AS a_9
FROM
  (
    SELECT
      MeasureTable_WithSubqueryMeasureExprs.country AS a_1,
      MeasureTable_WithSubqueryMeasureExprs.measure_literal_one AS a_2,
      MeasureTable_WithSubqueryMeasureExprs.measure_one_plus_one AS a_3,
      MeasureTable_WithSubqueryMeasureExprs.measure_scalar_subquery AS a_4
    FROM
      MeasureTable_WithSubqueryMeasureExprs
  ) AS measuretable_withsubquerymeasureexprs_5
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#16 AS country [STRING]
| +-$aggregate.$agg1#13 AS `$col2` [INT64]
| +-$aggregate.$agg2#14 AS `$col3` [INT64]
| +-$aggregate.$agg3#15 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#16, $aggregate.$agg1#13, $aggregate.$agg2#14, $aggregate.$agg3#15]
        +-expr_list=
        | +-$agg1#13 := Literal(type=INT64, value=1)
        | +-$agg2#14 :=
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-Literal(type=INT64, value=1)
        | |   +-Literal(type=INT64, value=1)
        | +-$agg3#15 :=
        |   +-SubqueryExpr
        |     +-type=INT64
        |     +-subquery_type=SCALAR
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$aggregate.$agg1#19]
        |         +-input_scan=
        |           +-AggregateScan
        |             +-column_list=[$aggregate.$agg1#19]
        |             +-input_scan=
        |             | +-ArrayScan
        |             |   +-column_list=[$array.x#20]
        |             |   +-array_expr_list=
        |             |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |             |   +-element_column_list=[$array.x#20]
        |             +-aggregate_list=
        |               +-$agg1#19 :=
        |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                   +-ColumnRef(type=INT64, column=$array.x#20)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#16]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithSubqueryMeasureExprs.[key#17, country#2, measure_literal_one#10, measure_one_plus_one#11, measure_scalar_subquery#12, struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#18]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#18 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct(type=STRUCT<>)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#17)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#17, country#2, measure_literal_one#10, measure_one_plus_one#11, measure_scalar_subquery#12], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 1, 9, 10, 11])
            +-group_by_list=
              +-country#16 := ColumnRef(type=STRING, column=MeasureTable_WithSubqueryMeasureExprs.country#2)
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_10.a_9 AS country,
  1 AS a_11,
  1 + 1 AS a_12,
  (
    SELECT
      SUM(a_14) AS a_15
    FROM
      UNNEST(ARRAY< INT64 >[1, 2, 3]) AS a_14
  ) AS a_13
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9
    FROM
      (
        SELECT
          measuretable_withsubquerymeasureexprs_6.a_1 AS a_1,
          measuretable_withsubquerymeasureexprs_6.a_2 AS a_2,
          measuretable_withsubquerymeasureexprs_6.a_3 AS a_3,
          measuretable_withsubquerymeasureexprs_6.a_4 AS a_4,
          measuretable_withsubquerymeasureexprs_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key INT64 > > (STRUCT< > (), STRUCT< key INT64 >
            (measuretable_withsubquerymeasureexprs_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
              MeasureTable_WithSubqueryMeasureExprs.country AS a_2,
              MeasureTable_WithSubqueryMeasureExprs.measure_literal_one AS a_3,
              MeasureTable_WithSubqueryMeasureExprs.measure_one_plus_one AS a_4,
              MeasureTable_WithSubqueryMeasureExprs.measure_scalar_subquery AS a_5
            FROM
              MeasureTable_WithSubqueryMeasureExprs
          ) AS measuretable_withsubquerymeasureexprs_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_10;
==

# Measures that aren't actually aggregating anything.
SELECT
  key,
  AGG(measure_literal_one),
  AGG(measure_one_plus_one),
  AGG(measure_scalar_subquery),
FROM Int64ValueTable_WithMeasures
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#11 AS key [INT64]
| +-$aggregate.$agg1#8 AS `$col2` [INT64]
| +-$aggregate.$agg2#9 AS `$col3` [INT64]
| +-$aggregate.$agg3#10 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#11, $aggregate.$agg1#8, $aggregate.$agg2#9, $aggregate.$agg3#10]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#11, $aggregate.$agg1#8, $aggregate.$agg2#9, $aggregate.$agg3#10]
        +-input_scan=
        | +-TableScan(column_list=Int64ValueTable_WithMeasures.[key#2, measure_literal_one#5, measure_one_plus_one#6, measure_scalar_subquery#7], table=Int64ValueTable_WithMeasures, column_index_list=[1, 4, 5, 6])
        +-group_by_list=
        | +-key#11 := ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.key#2)
        +-aggregate_list=
          +-$agg1#8 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=Int64ValueTable_WithMeasures.measure_literal_one#5)
          +-$agg2#9 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=Int64ValueTable_WithMeasures.measure_one_plus_one#6)
          +-$agg3#10 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=Int64ValueTable_WithMeasures.measure_scalar_subquery#7)

[SQLBUILDER_OUTPUT]
SELECT
  int64valuetable_withmeasures_5.a_1 AS key,
  AGG(int64valuetable_withmeasures_5.a_2) AS a_7,
  AGG(int64valuetable_withmeasures_5.a_3) AS a_8,
  AGG(int64valuetable_withmeasures_5.a_4) AS a_9
FROM
  (
    SELECT
      Int64ValueTable_WithMeasures.key AS a_1,
      Int64ValueTable_WithMeasures.measure_literal_one AS a_2,
      Int64ValueTable_WithMeasures.measure_one_plus_one AS a_3,
      Int64ValueTable_WithMeasures.measure_scalar_subquery AS a_4
    FROM
      Int64ValueTable_WithMeasures
  ) AS int64valuetable_withmeasures_5
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#11 AS key [INT64]
| +-$aggregate.$agg1#8 AS `$col2` [INT64]
| +-$aggregate.$agg2#9 AS `$col3` [INT64]
| +-$aggregate.$agg3#10 AS `$col4` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#11, $aggregate.$agg1#8, $aggregate.$agg2#9, $aggregate.$agg3#10]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#11, $aggregate.$agg1#8, $aggregate.$agg2#9, $aggregate.$agg3#10]
        +-expr_list=
        | +-$agg1#8 := Literal(type=INT64, value=1)
        | +-$agg2#9 :=
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-Literal(type=INT64, value=1)
        | |   +-Literal(type=INT64, value=1)
        | +-$agg3#10 :=
        |   +-SubqueryExpr
        |     +-type=INT64
        |     +-subquery_type=SCALAR
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$aggregate.$agg1#13]
        |         +-input_scan=
        |           +-AggregateScan
        |             +-column_list=[$aggregate.$agg1#13]
        |             +-input_scan=
        |             | +-ArrayScan
        |             |   +-column_list=[$array.x#14]
        |             |   +-array_expr_list=
        |             |   | +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
        |             |   +-element_column_list=[$array.x#14]
        |             +-aggregate_list=
        |               +-$agg1#13 :=
        |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
        |                   +-ColumnRef(type=INT64, column=$array.x#14)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#11]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=Int64ValueTable_WithMeasures.[key#2, measure_literal_one#5, measure_one_plus_one#6, measure_scalar_subquery#7, struct_for_measures_from_table_Int64ValueTable_WithMeasures#12]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_Int64ValueTable_WithMeasures#12 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct(type=STRUCT<>)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.key#2)
            |   +-input_scan=
            |     +-TableScan(column_list=Int64ValueTable_WithMeasures.[key#2, measure_literal_one#5, measure_one_plus_one#6, measure_scalar_subquery#7], table=Int64ValueTable_WithMeasures, column_index_list=[1, 4, 5, 6])
            +-group_by_list=
              +-key#11 := ColumnRef(type=INT64, column=Int64ValueTable_WithMeasures.key#2)
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_9.a_8 AS key,
  1 AS a_10,
  1 + 1 AS a_11,
  (
    SELECT
      SUM(a_13) AS a_14
    FROM
      UNNEST(ARRAY< INT64 >[1, 2, 3]) AS a_13
  ) AS a_12
FROM
  (
    SELECT
      projectscan_7.a_1 AS a_8
    FROM
      (
        SELECT
          int64valuetable_withmeasures_5.a_1 AS a_1,
          int64valuetable_withmeasures_5.a_2 AS a_2,
          int64valuetable_withmeasures_5.a_3 AS a_3,
          int64valuetable_withmeasures_5.a_4 AS a_4,
          STRUCT< referenced_columns STRUCT< >, key_columns STRUCT< key INT64 > > (STRUCT< > (), STRUCT< key INT64 >
            (int64valuetable_withmeasures_5.a_1)) AS a_6
        FROM
          (
            SELECT
              Int64ValueTable_WithMeasures.key AS a_1,
              Int64ValueTable_WithMeasures.measure_literal_one AS a_2,
              Int64ValueTable_WithMeasures.measure_one_plus_one AS a_3,
              Int64ValueTable_WithMeasures.measure_scalar_subquery AS a_4
            FROM
              Int64ValueTable_WithMeasures
          ) AS int64valuetable_withmeasures_5
      ) AS projectscan_7
    GROUP BY 1
  ) AS aggregatescan_9;
==

# Reference a correlated measure (but do not aggregate it)
SELECT
  key,
  (
    SELECT
      key
    FROM (
      SELECT
        OuterTable.key AS key,
        OuterTable.measure_sum_price
    )
  )
FROM MeasureTable_SingleKey AS OuterTable
--
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
| +-$query.$col2#17 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1, $query.$col2#17]
    +-expr_list=
    | +-$col2#17 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$subquery1.key#15]
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=$subquery1.[key#15, measure_sum_price#16]
    |             +-expr_list=
    |             | +-key#15 := ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1, is_correlated=TRUE)
    |             | +-measure_sum_price#16 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 9], alias="OuterTable")

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS key,
  (
    SELECT
      projectscan_7.a_5 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_3.a_1 AS a_5,
          measuretable_singlekey_3.a_2 AS a_6
      ) AS projectscan_7
  ) AS a_4
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.measure_sum_price AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3;
==

# Aggregate a correlated measure
SELECT
  key,
  (
    SELECT
      OuterTable.key + AGG(OuterTable.measure_sum_price)
    FROM MeasureTable_SingleKey AS InnerTable
  )
FROM MeasureTable_SingleKey AS OuterTable
--
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
| +-$query.$col2#31 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1, $query.$col2#31]
    +-expr_list=
    | +-$col2#31 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#30]
    |         +-expr_list=
    |         | +-$col1#30 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1, is_correlated=TRUE)
    |         |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#29)
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#29]
    |             +-input_scan=
    |             | +-TableScan(table=MeasureTable_SingleKey, alias="InnerTable")
    |             +-aggregate_list=
    |               +-$agg1#29 :=
    |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
    |                   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
    +-input_scan=
      +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 9], alias="OuterTable")

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS key,
  (
    SELECT
      (measuretable_singlekey_3.a_1) + (aggregatescan_6.a_5) AS a_7
    FROM
      (
        SELECT
          AGG(measuretable_singlekey_3.a_2) AS a_5
        FROM
          MeasureTable_SingleKey
      ) AS aggregatescan_6
  ) AS a_4
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.measure_sum_price AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
| +-$query.$col2#31 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1, $query.$col2#31]
    +-expr_list=
    | +-$col2#31 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#30]
    |         +-expr_list=
    |         | +-$col1#30 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1, is_correlated=TRUE)
    |         |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#29)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$aggregate.$agg1#29]
    |             +-expr_list=
    |             | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#34)
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=[$aggregate.constituent_aggregate_1#34]
    |                 +-input_scan=
    |                 | +-TableScan(table=MeasureTable_SingleKey, alias="InnerTable")
    |                 +-aggregate_list=
    |                   +-constituent_aggregate_1#34 :=
    |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#35)
    |                       +-group_by_list=
    |                       | +-grain_lock_key#36 :=
    |                       |   +-GetStructField
    |                       |     +-type=STRUCT<key INT64>
    |                       |     +-expr=
    |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33, is_correlated=TRUE)
    |                       |     +-field_idx=1
    |                       +-group_by_aggregate_list=
    |                         +-$any_value_grain_lock_0#35 :=
    |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
    |                             +-GetStructField
    |                               +-type=INT64
    |                               +-expr=
    |                               | +-GetStructField
    |                               |   +-type=STRUCT<price INT64>
    |                               |   +-expr=
    |                               |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33, is_correlated=TRUE)
    |                               |   +-field_idx=0
    |                               +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=MeasureTable_SingleKey.[key#1, price#32, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#33]
        +-expr_list=
        | +-struct_for_measures_from_table_MeasureTable_SingleKey#33 :=
        |   +-MakeStruct
        |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
        |     +-field_list=
        |       +-MakeStruct
        |       | +-type=STRUCT<price INT64>
        |       | +-field_list=
        |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#32)
        |       +-MakeStruct
        |         +-type=STRUCT<key INT64>
        |         +-field_list=
        |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        +-input_scan=
          +-TableScan(column_list=MeasureTable_SingleKey.[key#1, price#32, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="OuterTable")
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_6.a_1 AS key,
  (
    SELECT
      (projectscan_6.a_1) + (projectscan_11.a_10) AS a_12
    FROM
      (
        SELECT
          aggregatescan_9.a_8 AS a_10
        FROM
          (
            SELECT
              SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
                GROUP BY projectscan_6.a_5.key_columns) AS a_8
            FROM
              MeasureTable_SingleKey
          ) AS aggregatescan_9
      ) AS projectscan_11
  ) AS a_7
FROM
  (
    SELECT
      measuretable_singlekey_4.a_1 AS a_1,
      measuretable_singlekey_4.a_2 AS a_2,
      measuretable_singlekey_4.a_3 AS a_3,
      STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
        (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.price AS a_2,
          MeasureTable_SingleKey.measure_sum_price AS a_3
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_4
  ) AS projectscan_6;
==

# Aggregate a correlated measure
SELECT
  key,
  (
    SELECT
      OuterTable.key + AGG(OuterTable.measure_with_simple_subquery_in_aggregate_function)
    FROM MeasureTable_WithSubqueryMeasureExprs AS InnerTable
  )
FROM MeasureTable_WithSubqueryMeasureExprs AS OuterTable
--
QueryStmt
+-output_column_list=
| +-MeasureTable_WithSubqueryMeasureExprs.key#1 AS key [INT64]
| +-$query.$col2#27 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_WithSubqueryMeasureExprs.key#1, $query.$col2#27]
    +-expr_list=
    | +-$col2#27 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
    |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function#6)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#26]
    |         +-expr_list=
    |         | +-$col1#26 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1, is_correlated=TRUE)
    |         |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#25)
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#25]
    |             +-input_scan=
    |             | +-TableScan(table=MeasureTable_WithSubqueryMeasureExprs, alias="InnerTable")
    |             +-aggregate_list=
    |               +-$agg1#25 :=
    |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
    |                   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function#6, is_correlated=TRUE)
    +-input_scan=
      +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, measure_with_simple_subquery_in_aggregate_function#6], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 5], alias="OuterTable")

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withsubquerymeasureexprs_3.a_1 AS key,
  (
    SELECT
      (measuretable_withsubquerymeasureexprs_3.a_1) + (aggregatescan_6.a_5) AS a_7
    FROM
      (
        SELECT
          AGG(measuretable_withsubquerymeasureexprs_3.a_2) AS a_5
        FROM
          MeasureTable_WithSubqueryMeasureExprs
      ) AS aggregatescan_6
  ) AS a_4
FROM
  (
    SELECT
      MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
      MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function AS a_2
    FROM
      MeasureTable_WithSubqueryMeasureExprs
  ) AS measuretable_withsubquerymeasureexprs_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-MeasureTable_WithSubqueryMeasureExprs.key#1 AS key [INT64]
| +-$query.$col2#27 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_WithSubqueryMeasureExprs.key#1, $query.$col2#27]
    +-expr_list=
    | +-$col2#27 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
    |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#29)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#26]
    |         +-expr_list=
    |         | +-$col1#26 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1, is_correlated=TRUE)
    |         |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#25)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$aggregate.$agg1#25]
    |             +-expr_list=
    |             | +-$agg1#25 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#31)
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=[$aggregate.constituent_aggregate_1#31]
    |                 +-input_scan=
    |                 | +-TableScan(table=MeasureTable_WithSubqueryMeasureExprs, alias="InnerTable")
    |                 +-aggregate_list=
    |                   +-constituent_aggregate_1#31 :=
    |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#32)
    |                       +-group_by_list=
    |                       | +-grain_lock_key#33 :=
    |                       |   +-GetStructField
    |                       |     +-type=STRUCT<key INT64>
    |                       |     +-expr=
    |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#29, is_correlated=TRUE)
    |                       |     +-field_idx=1
    |                       +-group_by_aggregate_list=
    |                         +-$any_value_grain_lock_0#32 :=
    |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
    |                             +-SubqueryExpr
    |                               +-type=INT64
    |                               +-subquery_type=SCALAR
    |                               +-parameter_list=
    |                               | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#29, is_correlated=TRUE)
    |                               +-subquery=
    |                                 +-ProjectScan
    |                                   +-column_list=[$expr_subquery.price#30]
    |                                   +-expr_list=
    |                                   | +-price#30 :=
    |                                   |   +-GetStructField
    |                                   |     +-type=INT64
    |                                   |     +-expr=
    |                                   |     | +-GetStructField
    |                                   |     |   +-type=STRUCT<price INT64>
    |                                   |     |   +-expr=
    |                                   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithSubqueryMeasureExprs.struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#29, is_correlated=TRUE)
    |                                   |     |   +-field_idx=0
    |                                   |     +-field_idx=0
    |                                   +-input_scan=
    |                                     +-SingleRowScan
    +-input_scan=
      +-ProjectScan
        +-column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#28, measure_with_simple_subquery_in_aggregate_function#6, struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#29]
        +-expr_list=
        | +-struct_for_measures_from_table_MeasureTable_WithSubqueryMeasureExprs#29 :=
        |   +-MakeStruct
        |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
        |     +-field_list=
        |       +-MakeStruct
        |       | +-type=STRUCT<price INT64>
        |       | +-field_list=
        |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.price#28)
        |       +-MakeStruct
        |         +-type=STRUCT<key INT64>
        |         +-field_list=
        |           +-ColumnRef(type=INT64, column=MeasureTable_WithSubqueryMeasureExprs.key#1)
        +-input_scan=
          +-TableScan(column_list=MeasureTable_WithSubqueryMeasureExprs.[key#1, price#28, measure_with_simple_subquery_in_aggregate_function#6], table=MeasureTable_WithSubqueryMeasureExprs, column_index_list=[0, 3, 5], alias="OuterTable")
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_6.a_1 AS key,
  (
    SELECT
      (projectscan_6.a_1) + (projectscan_12.a_11) AS a_13
    FROM
      (
        SELECT
          aggregatescan_10.a_9 AS a_11
        FROM
          (
            SELECT
              SUM(ANY_VALUE((
                    SELECT
                      projectscan_6.a_5.referenced_columns.price AS a_8
                  ))
                GROUP BY projectscan_6.a_5.key_columns) AS a_9
            FROM
              MeasureTable_WithSubqueryMeasureExprs
          ) AS aggregatescan_10
      ) AS projectscan_12
  ) AS a_7
FROM
  (
    SELECT
      measuretable_withsubquerymeasureexprs_4.a_1 AS a_1,
      measuretable_withsubquerymeasureexprs_4.a_2 AS a_2,
      measuretable_withsubquerymeasureexprs_4.a_3 AS a_3,
      STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
        (measuretable_withsubquerymeasureexprs_4.a_2), STRUCT< key INT64 > (measuretable_withsubquerymeasureexprs_4.a_1)) AS a_5
    FROM
      (
        SELECT
          MeasureTable_WithSubqueryMeasureExprs.key AS a_1,
          MeasureTable_WithSubqueryMeasureExprs.price AS a_2,
          MeasureTable_WithSubqueryMeasureExprs.measure_with_simple_subquery_in_aggregate_function AS a_3
        FROM
          MeasureTable_WithSubqueryMeasureExprs
      ) AS measuretable_withsubquerymeasureexprs_4
  ) AS projectscan_6;
==

# Aggregate a correlated measure, but construct it in a way that the rewritten
# subquery needs to reference both the original measure column and the
# corresponding STRUCT column containing information needed to evaluate the
# measure.
SELECT
  key,
  (
    SELECT
      OuterTable.key + AGG(correlated_measure_sum_price)
    FROM (
      SELECT OuterTable.measure_sum_price AS correlated_measure_sum_price
    )
  )
FROM MeasureTable_SingleKey AS OuterTable
--
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
| +-$query.$col2#18 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1, $query.$col2#18]
    +-expr_list=
    | +-$col2#18 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#17]
    |         +-expr_list=
    |         | +-$col1#17 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1, is_correlated=TRUE)
    |         |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#16)
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#16]
    |             +-input_scan=
    |             | +-ProjectScan
    |             |   +-column_list=[$subquery1.correlated_measure_sum_price#15]
    |             |   +-expr_list=
    |             |   | +-correlated_measure_sum_price#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
    |             |   +-input_scan=
    |             |     +-SingleRowScan
    |             +-aggregate_list=
    |               +-$agg1#16 :=
    |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
    |                   +-ColumnRef(type=MEASURE<INT64>, column=$subquery1.correlated_measure_sum_price#15)
    +-input_scan=
      +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 9], alias="OuterTable")

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_singlekey_3.a_1 AS key,
  (
    SELECT
      (measuretable_singlekey_3.a_1) + (aggregatescan_8.a_7) AS a_9
    FROM
      (
        SELECT
          AGG(projectscan_6.a_5) AS a_7
        FROM
          (
            SELECT
              measuretable_singlekey_3.a_2 AS a_5
          ) AS projectscan_6
      ) AS aggregatescan_8
  ) AS a_4
FROM
  (
    SELECT
      MeasureTable_SingleKey.key AS a_1,
      MeasureTable_SingleKey.measure_sum_price AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-MeasureTable_SingleKey.key#1 AS key [INT64]
| +-$query.$col2#18 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[MeasureTable_SingleKey.key#1, $query.$col2#18]
    +-expr_list=
    | +-$col2#18 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
    |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
    |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#17]
    |         +-expr_list=
    |         | +-$col1#17 :=
    |         |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |         |     +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1, is_correlated=TRUE)
    |         |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#16)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$aggregate.$agg1#16]
    |             +-expr_list=
    |             | +-$agg1#16 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#22)
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=[$aggregate.constituent_aggregate_1#22]
    |                 +-input_scan=
    |                 | +-ProjectScan
    |                 |   +-column_list=$subquery1.[correlated_measure_sum_price#15, struct_for_measures_from_table_$subquery1#21]
    |                 |   +-expr_list=
    |                 |   | +-correlated_measure_sum_price#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
    |                 |   | +-struct_for_measures_from_table_$subquery1#21 := ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#20, is_correlated=TRUE)
    |                 |   +-input_scan=
    |                 |     +-SingleRowScan
    |                 +-aggregate_list=
    |                   +-constituent_aggregate_1#22 :=
    |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
    |                       +-group_by_list=
    |                       | +-grain_lock_key#24 :=
    |                       |   +-GetStructField
    |                       |     +-type=STRUCT<key INT64>
    |                       |     +-expr=
    |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$subquery1.struct_for_measures_from_table_$subquery1#21)
    |                       |     +-field_idx=1
    |                       +-group_by_aggregate_list=
    |                         +-$any_value_grain_lock_0#23 :=
    |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
    |                             +-GetStructField
    |                               +-type=INT64
    |                               +-expr=
    |                               | +-GetStructField
    |                               |   +-type=STRUCT<price INT64>
    |                               |   +-expr=
    |                               |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$subquery1.struct_for_measures_from_table_$subquery1#21)
    |                               |   +-field_idx=0
    |                               +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=MeasureTable_SingleKey.[key#1, price#19, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#20]
        +-expr_list=
        | +-struct_for_measures_from_table_MeasureTable_SingleKey#20 :=
        |   +-MakeStruct
        |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
        |     +-field_list=
        |       +-MakeStruct
        |       | +-type=STRUCT<price INT64>
        |       | +-field_list=
        |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#19)
        |       +-MakeStruct
        |         +-type=STRUCT<key INT64>
        |         +-field_list=
        |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
        +-input_scan=
          +-TableScan(column_list=MeasureTable_SingleKey.[key#1, price#19, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="OuterTable")
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_6.a_1 AS key,
  (
    SELECT
      (projectscan_6.a_1) + (projectscan_14.a_13) AS a_15
    FROM
      (
        SELECT
          aggregatescan_12.a_11 AS a_13
        FROM
          (
            SELECT
              SUM(ANY_VALUE(projectscan_10.a_9.referenced_columns.price)
                GROUP BY projectscan_10.a_9.key_columns) AS a_11
            FROM
              (
                SELECT
                  projectscan_6.a_3 AS a_8,
                  projectscan_6.a_5 AS a_9
              ) AS projectscan_10
          ) AS aggregatescan_12
      ) AS projectscan_14
  ) AS a_7
FROM
  (
    SELECT
      measuretable_singlekey_4.a_1 AS a_1,
      measuretable_singlekey_4.a_2 AS a_2,
      measuretable_singlekey_4.a_3 AS a_3,
      STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
        (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.price AS a_2,
          MeasureTable_SingleKey.measure_sum_price AS a_3
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_4
  ) AS projectscan_6;
==

SELECT
  country,
  AGG(measure_with_with_expr),
  AGG(measure_with_array_remove_last_n)
FROM MeasureTable_WithRewritableExprs
GROUP BY country;
--
QueryStmt
+-output_column_list=
| +-$groupby.country#9 AS country [STRING]
| +-$aggregate.$agg1#7 AS `$col2` [INT64]
| +-$aggregate.$agg2#8 AS `$col3` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#9, $aggregate.$agg1#7, $aggregate.$agg2#8]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.country#9, $aggregate.$agg1#7, $aggregate.$agg2#8]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithRewritableExprs.[country#2, measure_with_with_expr#5, measure_with_array_remove_last_n#6], table=MeasureTable_WithRewritableExprs, column_index_list=[1, 4, 5])
        +-group_by_list=
        | +-country#9 := ColumnRef(type=STRING, column=MeasureTable_WithRewritableExprs.country#2)
        +-aggregate_list=
          +-$agg1#7 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithRewritableExprs.measure_with_with_expr#5)
          +-$agg2#8 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<ARRAY<INT64>>) -> ARRAY<INT64>)
              +-ColumnRef(type=MEASURE<ARRAY<INT64>>, column=MeasureTable_WithRewritableExprs.measure_with_array_remove_last_n#6)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withrewritableexprs_4.a_1 AS country,
  AGG(measuretable_withrewritableexprs_4.a_2) AS a_6,
  AGG(measuretable_withrewritableexprs_4.a_3) AS a_7
FROM
  (
    SELECT
      MeasureTable_WithRewritableExprs.country AS a_1,
      MeasureTable_WithRewritableExprs.measure_with_with_expr AS a_2,
      MeasureTable_WithRewritableExprs.measure_with_array_remove_last_n AS a_3
    FROM
      MeasureTable_WithRewritableExprs
  ) AS measuretable_withrewritableexprs_4
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.country#9 AS country [STRING]
| +-$aggregate.$agg1#7 AS `$col2` [INT64]
| +-$aggregate.$agg2#8 AS `$col3` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.country#9, $aggregate.$agg1#7, $aggregate.$agg2#8]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.country#9, $aggregate.$agg1#7, $aggregate.$agg2#8]
        +-expr_list=
        | +-$agg1#7 :=
        | | +-SubqueryExpr
        | |   +-type=INT64
        | |   +-subquery_type=SCALAR
        | |   +-parameter_list=
        | |   | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#14)
        | |   +-subquery=
        | |     +-ProjectScan
        | |       +-column_list=[$with_expr.injected#26]
        | |       +-expr_list=
        | |       | +-injected#26 :=
        | |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |       |     +-ColumnRef(type=INT64, column=$with_expr.a#13)
        | |       |     +-Literal(type=INT64, value=1)
        | |       +-input_scan=
        | |         +-ProjectScan
        | |           +-column_list=[$with_expr.a#13]
        | |           +-expr_list=
        | |           | +-a#13 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#14, is_correlated=TRUE)
        | |           +-input_scan=
        | |             +-SingleRowScan
        | +-$agg2#8 :=
        |   +-SubqueryExpr
        |     +-type=ARRAY<INT64>
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#17)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#25]
        |         +-expr_list=
        |         | +-$col1#25 :=
        |         |   +-FunctionCall(ZetaSQL:$case_no_value(repeated(2) BOOL, repeated(2) ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
        |         |     +-FunctionCall(ZetaSQL:$or(BOOL, repeated(1) BOOL) -> BOOL)
        |         |     | +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
        |         |     | | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#20)
        |         |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |         |     |   +-ColumnRef(type=INT64, column=$subquery1.n#21)
        |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
        |         |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
        |         |     | +-ColumnRef(type=INT64, column=$subquery1.n#21)
        |         |     | +-Literal(type=INT64, value=0)
        |         |     +-Cast(ARRAY<INT64> -> ARRAY<INT64>)
        |         |     | +-FunctionCall(ZetaSQL:error(STRING) -> ARRAY<INT64>)
        |         |     |   +-Literal(type=STRING, value="The n argument to ARRAY_REMOVE_LAST_N must not be negative.")
        |         |     +-SubqueryExpr
        |         |       +-type=ARRAY<INT64>
        |         |       +-subquery_type=SCALAR
        |         |       +-parameter_list=
        |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#20)
        |         |       | +-ColumnRef(type=INT64, column=$subquery1.n#21)
        |         |       +-subquery=
        |         |         +-ProjectScan
        |         |           +-column_list=[$with_expr.injected#27]
        |         |           +-expr_list=
        |         |           | +-injected#27 :=
        |         |           |   +-SubqueryExpr
        |         |           |     +-type=ARRAY<INT64>
        |         |           |     +-subquery_type=ARRAY
        |         |           |     +-parameter_list=
        |         |           |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#20, is_correlated=TRUE)
        |         |           |     | +-ColumnRef(type=INT64, column=$with_expr.end_offset#22)
        |         |           |     +-subquery=
        |         |           |       +-OrderByScan
        |         |           |         +-column_list=[$array.e#23]
        |         |           |         +-is_ordered=TRUE
        |         |           |         +-input_scan=
        |         |           |         | +-FilterScan
        |         |           |         |   +-column_list=[$array.e#23, $array_offset.offset#24]
        |         |           |         |   +-input_scan=
        |         |           |         |   | +-ArrayScan
        |         |           |         |   |   +-column_list=[$array.e#23, $array_offset.offset#24]
        |         |           |         |   |   +-array_expr_list=
        |         |           |         |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#20, is_correlated=TRUE)
        |         |           |         |   |   +-element_column_list=[$array.e#23]
        |         |           |         |   |   +-array_offset_column=
        |         |           |         |   |     +-ColumnHolder(column=$array_offset.offset#24)
        |         |           |         |   +-filter_expr=
        |         |           |         |     +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
        |         |           |         |       +-ColumnRef(type=INT64, column=$array_offset.offset#24)
        |         |           |         |       +-ColumnRef(type=INT64, column=$with_expr.end_offset#22, is_correlated=TRUE)
        |         |           |         +-order_by_item_list=
        |         |           |           +-OrderByItem
        |         |           |             +-column_ref=
        |         |           |               +-ColumnRef(type=INT64, column=$array_offset.offset#24)
        |         |           +-input_scan=
        |         |             +-ProjectScan
        |         |               +-column_list=[$with_expr.end_offset#22]
        |         |               +-expr_list=
        |         |               | +-end_offset#22 :=
        |         |               |   +-FunctionCall(ZetaSQL:$subtract(INT64, INT64) -> INT64)
        |         |               |     +-FunctionCall(ZetaSQL:array_length(ARRAY<INT64>) -> INT64)
        |         |               |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.input_array#20, is_correlated=TRUE)
        |         |               |     +-ColumnRef(type=INT64, column=$subquery1.n#21, is_correlated=TRUE)
        |         |               +-input_scan=
        |         |                 +-SingleRowScan
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=$subquery1.[input_array#20, n#21]
        |             +-expr_list=
        |             | +-input_array#20 := Literal(type=ARRAY<INT64>, value=[1, 2])
        |             | +-n#21 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#17, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.country#9, $aggregate.constituent_aggregate_1#14, $aggregate.constituent_aggregate_1#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithRewritableExprs.[key#10, country#2, price#11, measure_with_with_expr#5, measure_with_array_remove_last_n#6, struct_for_measures_from_table_MeasureTable_WithRewritableExprs#12]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithRewritableExprs#12 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithRewritableExprs.price#11)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithRewritableExprs.key#10)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithRewritableExprs.[key#10, country#2, price#11, measure_with_with_expr#5, measure_with_array_remove_last_n#6], table=MeasureTable_WithRewritableExprs, column_index_list=[0, 1, 3, 4, 5])
            +-group_by_list=
            | +-country#9 := ColumnRef(type=STRING, column=MeasureTable_WithRewritableExprs.country#2)
            +-aggregate_list=
              +-constituent_aggregate_1#14 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#15)
              |   +-group_by_list=
              |   | +-grain_lock_key#16 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithRewritableExprs.struct_for_measures_from_table_MeasureTable_WithRewritableExprs#12)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#15 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithRewritableExprs.struct_for_measures_from_table_MeasureTable_WithRewritableExprs#12)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#17 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#18)
                  +-group_by_list=
                  | +-grain_lock_key#19 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithRewritableExprs.struct_for_measures_from_table_MeasureTable_WithRewritableExprs#12)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#18 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithRewritableExprs.struct_for_measures_from_table_MeasureTable_WithRewritableExprs#12)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_9 AS country,
  (
    SELECT
      (projectscan_15.a_14) + 1 AS a_16
    FROM
      (
        SELECT
          aggregatescan_12.a_10 AS a_14
      ) AS projectscan_15
  ) AS a_13,
  (
    SELECT
      CASE
        WHEN(((projectscan_20.a_18) IS NULL) OR ((projectscan_20.a_19) IS NULL)) THEN CAST(NULL AS ARRAY< INT64 >
        )
        WHEN((projectscan_20.a_19) < 0) THEN CAST(ERROR("The n argument to ARRAY_REMOVE_LAST_N must not be negative.") AS ARRAY<
        INT64 >)
        ELSE(
          SELECT
            ARRAY(
              SELECT
                filterscan_27.a_25 AS a_25
              FROM
                (
                  SELECT
                    a_25 AS a_25,
                    a_26 AS a_26
                  FROM
                    UNNEST(projectscan_20.a_18) AS a_25 WITH OFFSET AS a_26
                  WHERE
                    a_26 < (projectscan_23.a_22)
                ) AS filterscan_27
              ORDER BY filterscan_27.a_26) AS a_24
          FROM
            (
              SELECT
                (ARRAY_LENGTH(projectscan_20.a_18)) - (projectscan_20.a_19) AS a_22
            ) AS projectscan_23
        )
      END AS a_21
    FROM
      (
        SELECT
          ARRAY< INT64 >[1, 2] AS a_18,
          aggregatescan_12.a_11 AS a_19
      ) AS projectscan_20
  ) AS a_17
FROM
  (
    SELECT
      projectscan_8.a_2 AS a_9,
      SUM(ANY_VALUE(projectscan_8.a_7.referenced_columns.price)
        GROUP BY projectscan_8.a_7.key_columns) AS a_10,
      SUM(ANY_VALUE(projectscan_8.a_7.referenced_columns.price)
        GROUP BY projectscan_8.a_7.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_withrewritableexprs_6.a_1 AS a_1,
          measuretable_withrewritableexprs_6.a_2 AS a_2,
          measuretable_withrewritableexprs_6.a_3 AS a_3,
          measuretable_withrewritableexprs_6.a_4 AS a_4,
          measuretable_withrewritableexprs_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_withrewritableexprs_6.a_3), STRUCT< key INT64 > (measuretable_withrewritableexprs_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_WithRewritableExprs.key AS a_1,
              MeasureTable_WithRewritableExprs.country AS a_2,
              MeasureTable_WithRewritableExprs.price AS a_3,
              MeasureTable_WithRewritableExprs.measure_with_with_expr AS a_4,
              MeasureTable_WithRewritableExprs.measure_with_array_remove_last_n AS a_5
            FROM
              MeasureTable_WithRewritableExprs
          ) AS measuretable_withrewritableexprs_6
      ) AS projectscan_8
    GROUP BY 1
  ) AS aggregatescan_12;
==

SELECT
  key,
  AGG(measure_with_top_level_udf),
  AGG(measure_with_udf_in_argument),
  AGG(measure_with_udf_and_multilevel_aggregation),
  AGG(measure_with_udf_containing_multilevel_aggregation)
FROM MeasureTable_WithUdfs
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#13 AS key [INT64]
| +-$aggregate.$agg1#9 AS `$col2` [DOUBLE]
| +-$aggregate.$agg2#10 AS `$col3` [INT64]
| +-$aggregate.$agg3#11 AS `$col4` [INT64]
| +-$aggregate.$agg4#12 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithUdfs.[key#1, measure_with_top_level_udf#5, measure_with_udf_in_argument#6, measure_with_udf_and_multilevel_aggregation#7, measure_with_udf_containing_multilevel_aggregation#8], table=MeasureTable_WithUdfs, column_index_list=[0, 4, 5, 6, 7])
        +-group_by_list=
        | +-key#13 := ColumnRef(type=INT64, column=MeasureTable_WithUdfs.key#1)
        +-aggregate_list=
          +-$agg1#9 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<DOUBLE>) -> DOUBLE)
          |   +-ColumnRef(type=MEASURE<DOUBLE>, column=MeasureTable_WithUdfs.measure_with_top_level_udf#5)
          +-$agg2#10 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithUdfs.measure_with_udf_in_argument#6)
          +-$agg3#11 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithUdfs.measure_with_udf_and_multilevel_aggregation#7)
          +-$agg4#12 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithUdfs.measure_with_udf_containing_multilevel_aggregation#8)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withudfs_6.a_1 AS key,
  AGG(measuretable_withudfs_6.a_2) AS a_8,
  AGG(measuretable_withudfs_6.a_3) AS a_9,
  AGG(measuretable_withudfs_6.a_4) AS a_10,
  AGG(measuretable_withudfs_6.a_5) AS a_11
FROM
  (
    SELECT
      MeasureTable_WithUdfs.key AS a_1,
      MeasureTable_WithUdfs.measure_with_top_level_udf AS a_2,
      MeasureTable_WithUdfs.measure_with_udf_in_argument AS a_3,
      MeasureTable_WithUdfs.measure_with_udf_and_multilevel_aggregation AS a_4,
      MeasureTable_WithUdfs.measure_with_udf_containing_multilevel_aggregation AS a_5
    FROM
      MeasureTable_WithUdfs
  ) AS measuretable_withudfs_6
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#13 AS key [INT64]
| +-$aggregate.$agg1#9 AS `$col2` [DOUBLE]
| +-$aggregate.$agg2#10 AS `$col3` [INT64]
| +-$aggregate.$agg3#11 AS `$col4` [INT64]
| +-$aggregate.$agg4#12 AS `$col5` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#13, $aggregate.$agg1#9, $aggregate.$agg2#10, $aggregate.$agg3#11, $aggregate.$agg4#12]
        +-expr_list=
        | +-$agg1#9 :=
        | | +-FunctionCall(ZetaSQL:$add(DOUBLE, DOUBLE) -> DOUBLE)
        | |   +-Cast(INT64 -> DOUBLE)
        | |   | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#16)
        | |   +-FunctionCall(Lazy_resolution_function:NullaryPi() -> DOUBLE)
        | +-$agg2#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#19)
        | +-$agg3#11 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#24)
        | +-$agg4#12 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#29)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#13, $aggregate.constituent_aggregate_1#16, $aggregate.constituent_aggregate_1#19, $aggregate.constituent_aggregate_1#24, $aggregate.constituent_aggregate_1#29]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithUdfs.[key#1, price#14, measure_with_top_level_udf#5, measure_with_udf_in_argument#6, measure_with_udf_and_multilevel_aggregation#7, measure_with_udf_containing_multilevel_aggregation#8, struct_for_measures_from_table_MeasureTable_WithUdfs#15]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithUdfs#15 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithUdfs.key#1)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithUdfs.price#14)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithUdfs.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithUdfs.[key#1, price#14, measure_with_top_level_udf#5, measure_with_udf_in_argument#6, measure_with_udf_and_multilevel_aggregation#7, measure_with_udf_containing_multilevel_aggregation#8], table=MeasureTable_WithUdfs, column_index_list=[0, 3, 4, 5, 6, 7])
            +-group_by_list=
            | +-key#13 := ColumnRef(type=INT64, column=MeasureTable_WithUdfs.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#16 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#17)
              |   +-group_by_list=
              |   | +-grain_lock_key#18 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#17 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<key INT64, price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |           |   +-field_idx=0
              |           +-field_idx=1
              +-constituent_aggregate_1#19 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#20)
              |   +-group_by_list=
              |   | +-grain_lock_key#21 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#20 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-FunctionCall(Lazy_resolution_function:UnaryIncrement(INT64 a) -> INT64)
              |           +-GetStructField
              |             +-type=INT64
              |             +-expr=
              |             | +-GetStructField
              |             |   +-type=STRUCT<key INT64, price INT64>
              |             |   +-expr=
              |             |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |             |   +-field_idx=0
              |             +-field_idx=1
              +-constituent_aggregate_1#24 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#23)
              |   +-group_by_list=
              |   | +-$groupbymod#22 :=
              |   |   +-FunctionCall(Lazy_resolution_function:UnaryIncrement(INT64 a) -> INT64)
              |   |     +-GetStructField
              |   |       +-type=INT64
              |   |       +-expr=
              |   |       | +-GetStructField
              |   |       |   +-type=STRUCT<key INT64, price INT64>
              |   |       |   +-expr=
              |   |       |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |   |       |   +-field_idx=0
              |   |       +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#23 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#25)
              |         +-group_by_list=
              |         | +-grain_lock_key#26 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#25 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-FunctionCall(Lazy_resolution_function:UnaryIncrement(INT64 a) -> INT64)
              |                 +-GetStructField
              |                   +-type=INT64
              |                   +-expr=
              |                   | +-GetStructField
              |                   |   +-type=STRUCT<key INT64, price INT64>
              |                   |   +-expr=
              |                   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
              |                   |   +-field_idx=0
              |                   +-field_idx=1
              +-constituent_aggregate_1#29 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=$aggregate.$agg1#28)
                    +-FunctionCall(Lazy_resolution_function:NullaryWithMultilevelAgg() -> INT64)
                  +-group_by_list=
                  | +-$groupbymod#27 :=
                  |   +-GetStructField
                  |     +-type=INT64
                  |     +-expr=
                  |     | +-GetStructField
                  |     |   +-type=STRUCT<key INT64, price INT64>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
                  |     |   +-field_idx=0
                  |     +-field_idx=0
                  +-group_by_aggregate_list=
                    +-$agg1#28 :=
                      +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                        +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#30)
                        +-group_by_list=
                        | +-grain_lock_key#31 :=
                        |   +-GetStructField
                        |     +-type=STRUCT<key INT64>
                        |     +-expr=
                        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
                        |     +-field_idx=1
                        +-group_by_aggregate_list=
                          +-$any_value_grain_lock_0#30 :=
                            +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                              +-FunctionCall(Lazy_resolution_function:UnaryIncrement(INT64 a) -> INT64)
                                +-GetStructField
                                  +-type=INT64
                                  +-expr=
                                  | +-GetStructField
                                  |   +-type=STRUCT<key INT64, price INT64>
                                  |   +-expr=
                                  |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithUdfs.struct_for_measures_from_table_MeasureTable_WithUdfs#15)
                                  |   +-field_idx=0
                                  +-field_idx=1
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_15.a_10 AS key,
  CAST(aggregatescan_15.a_11 AS DOUBLE) + (NullaryPi()) AS a_16,
  aggregatescan_15.a_12 AS a_17,
  aggregatescan_15.a_13 AS a_18,
  aggregatescan_15.a_14 AS a_19
FROM
  (
    SELECT
      projectscan_9.a_1 AS a_10,
      SUM(ANY_VALUE(projectscan_9.a_8.referenced_columns.price)
        GROUP BY projectscan_9.a_8.key_columns) AS a_11,
      SUM(ANY_VALUE(UnaryIncrement(projectscan_9.a_8.referenced_columns.price))
        GROUP BY projectscan_9.a_8.key_columns) AS a_12,
      SUM(ANY_VALUE(ANY_VALUE(UnaryIncrement(projectscan_9.a_8.referenced_columns.price))
          GROUP BY projectscan_9.a_8.key_columns)
        GROUP BY UnaryIncrement(projectscan_9.a_8.referenced_columns.key)) AS a_13,
      SUM((COUNT(ANY_VALUE(UnaryIncrement(projectscan_9.a_8.referenced_columns.price))
          GROUP BY projectscan_9.a_8.key_columns)) + (NullaryWithMultilevelAgg())
        GROUP BY projectscan_9.a_8.referenced_columns.key) AS a_14
    FROM
      (
        SELECT
          measuretable_withudfs_7.a_1 AS a_1,
          measuretable_withudfs_7.a_2 AS a_2,
          measuretable_withudfs_7.a_3 AS a_3,
          measuretable_withudfs_7.a_4 AS a_4,
          measuretable_withudfs_7.a_5 AS a_5,
          measuretable_withudfs_7.a_6 AS a_6,
          STRUCT< referenced_columns STRUCT< key INT64, price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            key INT64, price INT64 > (measuretable_withudfs_7.a_1, measuretable_withudfs_7.a_2), STRUCT< key INT64 >
            (measuretable_withudfs_7.a_1)) AS a_8
        FROM
          (
            SELECT
              MeasureTable_WithUdfs.key AS a_1,
              MeasureTable_WithUdfs.price AS a_2,
              MeasureTable_WithUdfs.measure_with_top_level_udf AS a_3,
              MeasureTable_WithUdfs.measure_with_udf_in_argument AS a_4,
              MeasureTable_WithUdfs.measure_with_udf_and_multilevel_aggregation AS a_5,
              MeasureTable_WithUdfs.measure_with_udf_containing_multilevel_aggregation AS a_6
            FROM
              MeasureTable_WithUdfs
          ) AS measuretable_withudfs_7
      ) AS projectscan_9
    GROUP BY 1
  ) AS aggregatescan_15;
==

[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+INLINE_LAMBDA_ARGUMENT]
SELECT
  key,
  AGG(measure_with_top_level_udf),
  AGG(measure_with_udf_in_argument),
  AGG(measure_with_udf_and_multilevel_aggregation),
  AGG(measure_with_udf_containing_multilevel_aggregation),
  AGG(measure_with_name_conflict_on_arg)
FROM MeasureTable_WithTemplatedUdfs
GROUP BY 1;
--
QueryStmt
+-output_column_list=
| +-$groupby.key#15 AS key [INT64]
| +-$aggregate.$agg1#10 AS `$col2` [INT64]
| +-$aggregate.$agg2#11 AS `$col3` [INT64]
| +-$aggregate.$agg3#12 AS `$col4` [INT64]
| +-$aggregate.$agg4#13 AS `$col5` [INT64]
| +-$aggregate.$agg5#14 AS `$col6` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#15, $aggregate.$agg1#10, $aggregate.$agg2#11, $aggregate.$agg3#12, $aggregate.$agg4#13, $aggregate.$agg5#14]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.key#15, $aggregate.$agg1#10, $aggregate.$agg2#11, $aggregate.$agg3#12, $aggregate.$agg4#13, $aggregate.$agg5#14]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_WithTemplatedUdfs.[key#1, measure_with_top_level_udf#5, measure_with_udf_in_argument#6, measure_with_udf_and_multilevel_aggregation#7, measure_with_udf_containing_multilevel_aggregation#8, measure_with_name_conflict_on_arg#9], table=MeasureTable_WithTemplatedUdfs, column_index_list=[0, 4, 5, 6, 7, 8])
        +-group_by_list=
        | +-key#15 := ColumnRef(type=INT64, column=MeasureTable_WithTemplatedUdfs.key#1)
        +-aggregate_list=
          +-$agg1#10 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithTemplatedUdfs.measure_with_top_level_udf#5)
          +-$agg2#11 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithTemplatedUdfs.measure_with_udf_in_argument#6)
          +-$agg3#12 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithTemplatedUdfs.measure_with_udf_and_multilevel_aggregation#7)
          +-$agg4#13 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithTemplatedUdfs.measure_with_udf_containing_multilevel_aggregation#8)
          +-$agg5#14 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_WithTemplatedUdfs.measure_with_name_conflict_on_arg#9)

[SQLBUILDER_OUTPUT]
SELECT
  measuretable_withtemplatedudfs_7.a_1 AS key,
  AGG(measuretable_withtemplatedudfs_7.a_2) AS a_9,
  AGG(measuretable_withtemplatedudfs_7.a_3) AS a_10,
  AGG(measuretable_withtemplatedudfs_7.a_4) AS a_11,
  AGG(measuretable_withtemplatedudfs_7.a_5) AS a_12,
  AGG(measuretable_withtemplatedudfs_7.a_6) AS a_13
FROM
  (
    SELECT
      MeasureTable_WithTemplatedUdfs.key AS a_1,
      MeasureTable_WithTemplatedUdfs.measure_with_top_level_udf AS a_2,
      MeasureTable_WithTemplatedUdfs.measure_with_udf_in_argument AS a_3,
      MeasureTable_WithTemplatedUdfs.measure_with_udf_and_multilevel_aggregation AS a_4,
      MeasureTable_WithTemplatedUdfs.measure_with_udf_containing_multilevel_aggregation AS a_5,
      MeasureTable_WithTemplatedUdfs.measure_with_name_conflict_on_arg AS a_6
    FROM
      MeasureTable_WithTemplatedUdfs
  ) AS measuretable_withtemplatedudfs_7
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.key#15 AS key [INT64]
| +-$aggregate.$agg1#10 AS `$col2` [INT64]
| +-$aggregate.$agg2#11 AS `$col3` [INT64]
| +-$aggregate.$agg3#12 AS `$col4` [INT64]
| +-$aggregate.$agg4#13 AS `$col5` [INT64]
| +-$aggregate.$agg5#14 AS `$col6` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.key#15, $aggregate.$agg1#10, $aggregate.$agg2#11, $aggregate.$agg3#12, $aggregate.$agg4#13, $aggregate.$agg5#14]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.key#15, $aggregate.$agg1#10, $aggregate.$agg2#11, $aggregate.$agg3#12, $aggregate.$agg4#13, $aggregate.$agg5#14]
        +-expr_list=
        | +-$agg1#10 :=
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#18)
        | |   +-FunctionCall(Templated_SQL_Function:SUM_DOUBLE_ARRAY(ARRAY<INT64> input_arr) -> INT64)
        | |     +-Literal(type=ARRAY<INT64>, value=[1, 2])
        | +-$agg2#11 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#21)
        | +-$agg3#12 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#26)
        | +-$agg4#13 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#31)
        | +-$agg5#14 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#37)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.key#15, $aggregate.constituent_aggregate_1#18, $aggregate.constituent_aggregate_1#21, $aggregate.constituent_aggregate_1#26, $aggregate.constituent_aggregate_1#31, $aggregate.constituent_aggregate_1#37]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_WithTemplatedUdfs.[key#1, price#16, measure_with_top_level_udf#5, measure_with_udf_in_argument#6, measure_with_udf_and_multilevel_aggregation#7, measure_with_udf_containing_multilevel_aggregation#8, measure_with_name_conflict_on_arg#9, struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64, price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithTemplatedUdfs.key#1)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_WithTemplatedUdfs.price#16)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_WithTemplatedUdfs.key#1)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_WithTemplatedUdfs.[key#1, price#16, measure_with_top_level_udf#5, measure_with_udf_in_argument#6, measure_with_udf_and_multilevel_aggregation#7, measure_with_udf_containing_multilevel_aggregation#8, measure_with_name_conflict_on_arg#9], table=MeasureTable_WithTemplatedUdfs, column_index_list=[0, 3, 4, 5, 6, 7, 8])
            +-group_by_list=
            | +-key#15 := ColumnRef(type=INT64, column=MeasureTable_WithTemplatedUdfs.key#1)
            +-aggregate_list=
              +-constituent_aggregate_1#18 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#19)
              |   +-group_by_list=
              |   | +-grain_lock_key#20 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#19 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-GetStructField
              |           +-type=INT64
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<key INT64, price INT64>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |           |   +-field_idx=0
              |           +-field_idx=1
              +-constituent_aggregate_1#21 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#22)
              |   +-group_by_list=
              |   | +-grain_lock_key#23 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#22 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
              |           +-GetStructField
              |             +-type=INT64
              |             +-expr=
              |             | +-GetStructField
              |             |   +-type=STRUCT<key INT64, price INT64>
              |             |   +-expr=
              |             |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |             |   +-field_idx=0
              |             +-field_idx=1
              +-constituent_aggregate_1#26 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-ColumnRef(type=INT64, column=$aggregate.$agg1#25)
              |   +-group_by_list=
              |   | +-$groupbymod#24 :=
              |   |   +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
              |   |     +-GetStructField
              |   |       +-type=INT64
              |   |       +-expr=
              |   |       | +-GetStructField
              |   |       |   +-type=STRUCT<key INT64, price INT64>
              |   |       |   +-expr=
              |   |       |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |   |       |   +-field_idx=0
              |   |       +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#25 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#27)
              |         +-group_by_list=
              |         | +-grain_lock_key#28 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#27 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
              |                 +-GetStructField
              |                   +-type=INT64
              |                   +-expr=
              |                   | +-GetStructField
              |                   |   +-type=STRUCT<key INT64, price INT64>
              |                   |   +-expr=
              |                   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |                   |   +-field_idx=0
              |                   +-field_idx=1
              +-constituent_aggregate_1#31 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
              |     +-ColumnRef(type=INT64, column=$aggregate.$agg1#30)
              |     +-FunctionCall(Lazy_resolution_function:NullaryWithMultilevelAgg() -> INT64)
              |   +-group_by_list=
              |   | +-$groupbymod#29 :=
              |   |   +-GetStructField
              |   |     +-type=INT64
              |   |     +-expr=
              |   |     | +-GetStructField
              |   |     |   +-type=STRUCT<key INT64, price INT64>
              |   |     |   +-expr=
              |   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |   |     |   +-field_idx=0
              |   |     +-field_idx=0
              |   +-group_by_aggregate_list=
              |     +-$agg1#30 :=
              |       +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
              |         +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#32)
              |         +-group_by_list=
              |         | +-grain_lock_key#33 :=
              |         |   +-GetStructField
              |         |     +-type=STRUCT<key INT64>
              |         |     +-expr=
              |         |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |         |     +-field_idx=1
              |         +-group_by_aggregate_list=
              |           +-$any_value_grain_lock_0#32 :=
              |             +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
              |               +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
              |                 +-GetStructField
              |                   +-type=INT64
              |                   +-expr=
              |                   | +-GetStructField
              |                   |   +-type=STRUCT<key INT64, price INT64>
              |                   |   +-expr=
              |                   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
              |                   |   +-field_idx=0
              |                   +-field_idx=1
              +-constituent_aggregate_1#37 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    +-ColumnRef(type=INT64, column=$aggregate.$agg1#35)
                    +-ColumnRef(type=INT64, column=$aggregate.$agg2#36)
                  +-group_by_list=
                  | +-$groupbymod#34 :=
                  |   +-GetStructField
                  |     +-type=INT64
                  |     +-expr=
                  |     | +-GetStructField
                  |     |   +-type=STRUCT<key INT64, price INT64>
                  |     |   +-expr=
                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
                  |     |   +-field_idx=0
                  |     +-field_idx=0
                  +-group_by_aggregate_list=
                    +-$agg1#35 :=
                    | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    |   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#38)
                    |   +-group_by_list=
                    |   | +-grain_lock_key#39 :=
                    |   |   +-GetStructField
                    |   |     +-type=STRUCT<key INT64>
                    |   |     +-expr=
                    |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
                    |   |     +-field_idx=1
                    |   +-group_by_aggregate_list=
                    |     +-$any_value_grain_lock_0#38 :=
                    |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                    |         +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
                    |           +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                    |             +-GetStructField
                    |             | +-type=INT64
                    |             | +-expr=
                    |             | | +-GetStructField
                    |             | |   +-type=STRUCT<key INT64, price INT64>
                    |             | |   +-expr=
                    |             | |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
                    |             | |   +-field_idx=0
                    |             | +-field_idx=1
                    |             +-Literal(type=INT64, value=1)
                    +-$agg2#36 :=
                      +-AggregateFunctionCall(ZetaSQL:count(INT64) -> INT64)
                        +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#40)
                        +-group_by_list=
                        | +-grain_lock_key#41 :=
                        |   +-GetStructField
                        |     +-type=STRUCT<key INT64>
                        |     +-expr=
                        |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
                        |     +-field_idx=1
                        +-group_by_aggregate_list=
                          +-$any_value_grain_lock_0#40 :=
                            +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                              +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
                                +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                                  +-GetStructField
                                  | +-type=INT64
                                  | +-expr=
                                  | | +-GetStructField
                                  | |   +-type=STRUCT<key INT64, price INT64>
                                  | |   +-expr=
                                  | |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64, price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_WithTemplatedUdfs.struct_for_measures_from_table_MeasureTable_WithTemplatedUdfs#17)
                                  | |   +-field_idx=0
                                  | +-field_idx=1
                                  +-Literal(type=INT64, value=2)

With Templated SQL function call:
  Templated_SQL_Function:SUM_DOUBLE_ARRAY(ARRAY<INT64> input_arr) -> INT64
containing resolved templated expression:
SubqueryExpr
+-type=INT64
+-subquery_type=SCALAR
+-subquery=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#3]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#3]
        +-input_scan=
        | +-ArrayScan
        |   +-column_list=[$array.e#2]
        |   +-array_expr_list=
        |   | +-FunctionCall(ZetaSQL:array_transform(ARRAY<INT64> array_to_transform, FUNCTION<INT64->INT64> transformation) -> ARRAY<INT64>)
        |   |   +-FunctionArgument
        |   |   | +-expr=
        |   |   |   +-ArgumentRef(type=ARRAY<INT64>, name="input_arr")
        |   |   +-FunctionArgument
        |   |     +-inline_lambda=
        |   |       +-InlineLambda
        |   |         +-argument_list=[$lambda_arg.e#1]
        |   |         +-body=
        |   |           +-FunctionCall(Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64)
        |   |             +-ColumnRef(type=INT64, column=$lambda_arg.e#1)
        |   +-element_column_list=[$array.e#2]
        +-aggregate_list=
          +-$agg1#3 :=
            +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              +-ColumnRef(type=INT64, column=$array.e#2)

With Templated SQL function call:
  Templated_SQL_Function:TimesTwo(INT64 arg) -> INT64
containing resolved templated expression:
FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
+-ArgumentRef(type=INT64, name="arg")
+-ArgumentRef(type=INT64, name="arg")
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_17.a_11 AS key,
  (aggregatescan_17.a_12) + (SUM_DOUBLE_ARRAY(ARRAY< INT64 >[1, 2])) AS a_18,
  aggregatescan_17.a_13 AS a_19,
  aggregatescan_17.a_14 AS a_20,
  aggregatescan_17.a_15 AS a_21,
  aggregatescan_17.a_16 AS a_22
FROM
  (
    SELECT
      projectscan_10.a_1 AS a_11,
      SUM(ANY_VALUE(projectscan_10.a_9.referenced_columns.price)
        GROUP BY projectscan_10.a_9.key_columns) AS a_12,
      SUM(ANY_VALUE(TimesTwo(projectscan_10.a_9.referenced_columns.price))
        GROUP BY projectscan_10.a_9.key_columns) AS a_13,
      SUM(ANY_VALUE(ANY_VALUE(TimesTwo(projectscan_10.a_9.referenced_columns.price))
          GROUP BY projectscan_10.a_9.key_columns)
        GROUP BY TimesTwo(projectscan_10.a_9.referenced_columns.key)) AS a_14,
      SUM((COUNT(ANY_VALUE(TimesTwo(projectscan_10.a_9.referenced_columns.price))
          GROUP BY projectscan_10.a_9.key_columns)) + (NullaryWithMultilevelAgg())
        GROUP BY projectscan_10.a_9.referenced_columns.key) AS a_15,
      SUM((ANY_VALUE(ANY_VALUE(TimesTwo((projectscan_10.a_9.referenced_columns.price) + 1))
          GROUP BY projectscan_10.a_9.key_columns)) + (COUNT(ANY_VALUE(TimesTwo((projectscan_10.a_9.referenced_columns.price) +
              2))
          GROUP BY projectscan_10.a_9.key_columns))
        GROUP BY projectscan_10.a_9.referenced_columns.key) AS a_16
    FROM
      (
        SELECT
          measuretable_withtemplatedudfs_8.a_1 AS a_1,
          measuretable_withtemplatedudfs_8.a_2 AS a_2,
          measuretable_withtemplatedudfs_8.a_3 AS a_3,
          measuretable_withtemplatedudfs_8.a_4 AS a_4,
          measuretable_withtemplatedudfs_8.a_5 AS a_5,
          measuretable_withtemplatedudfs_8.a_6 AS a_6,
          measuretable_withtemplatedudfs_8.a_7 AS a_7,
          STRUCT< referenced_columns STRUCT< key INT64, price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT<
            key INT64, price INT64 > (measuretable_withtemplatedudfs_8.a_1, measuretable_withtemplatedudfs_8.a_2),
            STRUCT< key INT64 > (measuretable_withtemplatedudfs_8.a_1)) AS a_9
        FROM
          (
            SELECT
              MeasureTable_WithTemplatedUdfs.key AS a_1,
              MeasureTable_WithTemplatedUdfs.price AS a_2,
              MeasureTable_WithTemplatedUdfs.measure_with_top_level_udf AS a_3,
              MeasureTable_WithTemplatedUdfs.measure_with_udf_in_argument AS a_4,
              MeasureTable_WithTemplatedUdfs.measure_with_udf_and_multilevel_aggregation AS a_5,
              MeasureTable_WithTemplatedUdfs.measure_with_udf_containing_multilevel_aggregation AS a_6,
              MeasureTable_WithTemplatedUdfs.measure_with_name_conflict_on_arg AS a_7
            FROM
              MeasureTable_WithTemplatedUdfs
          ) AS measuretable_withtemplatedudfs_8
      ) AS projectscan_10
    GROUP BY 1
  ) AS aggregatescan_17;

==

[language_features=NONE,+ENABLE_MEASURES,+INLINE_LAMBDA_ARGUMENT]
# Measure in ARRAY_TRANSFORM
SELECT ARRAY_TRANSFORM([1,2,3], e -> (select measure_sum_quantity from MeasureTable_SingleKey limit 1));
--
ERROR: No matching signature for function ARRAY_TRANSFORM
  Argument types: ARRAY<INT64>, LAMBDA
  Signature: ARRAY_TRANSFORM(ARRAY<T1>, FUNCTION<T1->T2>)
    Argument 0: expected T2, found MEASURE<INT64>: which is not allowed for ANY arguments
  Signature: ARRAY_TRANSFORM(ARRAY<T1>, FUNCTION<(T1, INT64)->T2>)
    Argument 2: lambda requires 2 arguments but 1 is provided [at 2:8]
SELECT ARRAY_TRANSFORM([1,2,3], e -> (select measure_sum_quantity from Measur...
       ^
==

SELECT
  (
    SELECT
      key AS renamed_key
    FROM MeasureTable_SingleKey
  )
FROM (
  SELECT
    AGG(measure_sum_price)
  FROM MeasureTable_SingleKey
)
--
QueryStmt
+-output_column_list=
| +-$query.$col1#30 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#30]
    +-expr_list=
    | +-$col1#30 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[MeasureTable_SingleKey.key#16]
    |         +-input_scan=
    |           +-TableScan(column_list=[MeasureTable_SingleKey.key#16], table=MeasureTable_SingleKey, column_index_list=[0])
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.$agg1#15]
            +-input_scan=
            | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
            +-aggregate_list=
              +-$agg1#15 :=
                +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
                  +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      MeasureTable_SingleKey.key AS a_6
    FROM
      MeasureTable_SingleKey
  ) AS a_5
FROM
  (
    SELECT
      AGG(measuretable_singlekey_2.a_1) AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_price AS a_1
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_2
  ) AS projectscan_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#30 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#30]
    +-expr_list=
    | +-$col1#30 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[MeasureTable_SingleKey.key#16]
    |         +-input_scan=
    |           +-TableScan(column_list=[MeasureTable_SingleKey.key#16], table=MeasureTable_SingleKey, column_index_list=[0])
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#15]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$aggregate.$agg1#15]
            +-expr_list=
            | +-$agg1#15 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#34)
            +-input_scan=
              +-AggregateScan
                +-column_list=[$aggregate.constituent_aggregate_1#34]
                +-input_scan=
                | +-ProjectScan
                |   +-column_list=MeasureTable_SingleKey.[key#31, price#32, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#33]
                |   +-expr_list=
                |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#33 :=
                |   |   +-MakeStruct
                |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
                |   |     +-field_list=
                |   |       +-MakeStruct
                |   |       | +-type=STRUCT<price INT64>
                |   |       | +-field_list=
                |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#32)
                |   |       +-MakeStruct
                |   |         +-type=STRUCT<key INT64>
                |   |         +-field_list=
                |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#31)
                |   +-input_scan=
                |     +-TableScan(column_list=MeasureTable_SingleKey.[key#31, price#32, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
                +-aggregate_list=
                  +-constituent_aggregate_1#34 :=
                    +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                      +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#35)
                      +-group_by_list=
                      | +-grain_lock_key#36 :=
                      |   +-GetStructField
                      |     +-type=STRUCT<key INT64>
                      |     +-expr=
                      |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33)
                      |     +-field_idx=1
                      +-group_by_aggregate_list=
                        +-$any_value_grain_lock_0#35 :=
                          +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                            +-GetStructField
                              +-type=INT64
                              +-expr=
                              | +-GetStructField
                              |   +-type=STRUCT<price INT64>
                              |   +-expr=
                              |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#33)
                              |   +-field_idx=0
                              +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      MeasureTable_SingleKey.key AS a_12
    FROM
      MeasureTable_SingleKey
  ) AS a_11
FROM
  (
    SELECT
      aggregatescan_8.a_7 AS a_9
    FROM
      (
        SELECT
          SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
            GROUP BY projectscan_6.a_5.key_columns) AS a_7
        FROM
          (
            SELECT
              measuretable_singlekey_4.a_1 AS a_1,
              measuretable_singlekey_4.a_2 AS a_2,
              measuretable_singlekey_4.a_3 AS a_3,
              STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
            FROM
              (
                SELECT
                  MeasureTable_SingleKey.key AS a_1,
                  MeasureTable_SingleKey.price AS a_2,
                  MeasureTable_SingleKey.measure_sum_price AS a_3
                FROM
                  MeasureTable_SingleKey
              ) AS measuretable_singlekey_4
          ) AS projectscan_6
      ) AS aggregatescan_8
  ) AS projectscan_10;
==

SELECT
  (
    SELECT 1
    FROM (
      SELECT measure_sum_price
    )
  ),
  AGG(measure_sum_price)
FROM MeasureTable_SingleKey
GROUP BY 1
--
QueryStmt
+-output_column_list=
| +-$groupby.$col1#18 AS `$col1` [INT64]
| +-$aggregate.$agg1#17 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.$col1#18, $aggregate.$agg1#17]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.$col1#18, $aggregate.$agg1#17]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
        +-group_by_list=
        | +-$col1#18 :=
        |   +-SubqueryExpr
        |     +-type=INT64
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#16]
        |         +-expr_list=
        |         | +-$col1#16 := Literal(type=INT64, value=1)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$subquery1.measure_sum_price#15]
        |             +-expr_list=
        |             | +-measure_sum_price#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-aggregate_list=
          +-$agg1#17 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      1 AS a_5
    FROM
      (
        SELECT
          measuretable_singlekey_2.a_1 AS a_3
      ) AS projectscan_4
  ) AS a_6,
  AGG(measuretable_singlekey_2.a_1) AS a_7
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.$col1#18 AS `$col1` [INT64]
| +-$aggregate.$agg1#17 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.$col1#18, $aggregate.$agg1#17]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.$col1#18, $aggregate.$agg1#17]
        +-expr_list=
        | +-$agg1#17 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#22)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.$col1#18, $aggregate.constituent_aggregate_1#22]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#21]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#21 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#20)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#19)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
            +-group_by_list=
            | +-$col1#18 :=
            |   +-SubqueryExpr
            |     +-type=INT64
            |     +-subquery_type=SCALAR
            |     +-parameter_list=
            |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
            |     +-subquery=
            |       +-ProjectScan
            |         +-column_list=[$expr_subquery.$col1#16]
            |         +-expr_list=
            |         | +-$col1#16 := Literal(type=INT64, value=1)
            |         +-input_scan=
            |           +-ProjectScan
            |             +-column_list=[$subquery1.measure_sum_price#15]
            |             +-expr_list=
            |             | +-measure_sum_price#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
            |             +-input_scan=
            |               +-SingleRowScan
            +-aggregate_list=
              +-constituent_aggregate_1#22 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#23)
                  +-group_by_list=
                  | +-grain_lock_key#24 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#23 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_10 AS a_10,
  aggregatescan_12.a_11 AS a_13
FROM
  (
    SELECT
      (
        SELECT
          1 AS a_9
        FROM
          (
            SELECT
              projectscan_6.a_3 AS a_7
          ) AS projectscan_8
      ) AS a_10,
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
        GROUP BY projectscan_6.a_5.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_12;
==

SELECT
  AGG(measure_with_in_subquery)
FROM (
  SELECT
    measure_with_in_subquery
  FROM MeasureTable_ComplexExprs
)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#10]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#10]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[MeasureTable_ComplexExprs.measure_with_in_subquery#4]
        |   +-input_scan=
        |     +-TableScan(column_list=[MeasureTable_ComplexExprs.measure_with_in_subquery#4], table=MeasureTable_ComplexExprs, column_index_list=[3])
        +-aggregate_list=
          +-$agg1#10 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_ComplexExprs.measure_with_in_subquery#4)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(projectscan_2.a_1) AS a_3
FROM
  (
    SELECT
      MeasureTable_ComplexExprs.measure_with_in_subquery AS a_1
    FROM
      MeasureTable_ComplexExprs
  ) AS projectscan_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#10]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#10]
        +-expr_list=
        | +-$agg1#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#15)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#15]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_ComplexExprs.[measure_with_in_subquery#4, struct_for_measures_from_table_MeasureTable_ComplexExprs#12]
            |   +-input_scan=
            |     +-ProjectScan
            |       +-column_list=MeasureTable_ComplexExprs.[key#11, measure_with_in_subquery#4, struct_for_measures_from_table_MeasureTable_ComplexExprs#12]
            |       +-expr_list=
            |       | +-struct_for_measures_from_table_MeasureTable_ComplexExprs#12 :=
            |       |   +-MakeStruct
            |       |     +-type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>
            |       |     +-field_list=
            |       |       +-MakeStruct
            |       |       | +-type=STRUCT<key INT64>
            |       |       | +-field_list=
            |       |       |   +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#11)
            |       |       +-MakeStruct
            |       |         +-type=STRUCT<key INT64>
            |       |         +-field_list=
            |       |           +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#11)
            |       +-input_scan=
            |         +-TableScan(column_list=MeasureTable_ComplexExprs.[key#11, measure_with_in_subquery#4], table=MeasureTable_ComplexExprs, column_index_list=[0, 3])
            +-aggregate_list=
              +-constituent_aggregate_1#15 :=
                +-AggregateFunctionCall(ZetaSQL:countif(BOOL) -> INT64)
                  +-ColumnRef(type=BOOL, column=$aggregate.$any_value_grain_lock_0#16)
                  +-group_by_list=
                  | +-grain_lock_key#17 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#16 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(BOOL) -> BOOL)
                        +-SubqueryExpr
                          +-type=BOOL
                          +-subquery_type=IN
                          +-parameter_list=
                          | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12)
                          +-in_expr=
                          | +-GetStructField
                          |   +-type=INT64
                          |   +-expr=
                          |   | +-GetStructField
                          |   |   +-type=STRUCT<key INT64>
                          |   |   +-expr=
                          |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12)
                          |   |   +-field_idx=0
                          |   +-field_idx=0
                          +-subquery=
                            +-ProjectScan
                              +-column_list=[scan_alias.a_2#14]
                              +-input_scan=
                                +-ProjectScan
                                  +-column_list=scan_alias.[a_1#13, a_2#14]
                                  +-expr_list=
                                  | +-a_1#13 :=
                                  | | +-GetStructField
                                  | |   +-type=INT64
                                  | |   +-expr=
                                  | |   | +-GetStructField
                                  | |   |   +-type=STRUCT<key INT64>
                                  | |   |   +-expr=
                                  | |   |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12, is_correlated=TRUE)
                                  | |   |   +-field_idx=0
                                  | |   +-field_idx=0
                                  | +-a_2#14 :=
                                  |   +-GetStructField
                                  |     +-type=INT64
                                  |     +-expr=
                                  |     | +-GetStructField
                                  |     |   +-type=STRUCT<key INT64>
                                  |     |   +-expr=
                                  |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12, is_correlated=TRUE)
                                  |     |   +-field_idx=0
                                  |     +-field_idx=0
                                  +-input_scan=
                                    +-SingleRowScan
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_11.a_10 AS a_12
FROM
  (
    SELECT
      COUNTIF(ANY_VALUE(((projectscan_6.a_4.referenced_columns.key) IN (
            SELECT
              projectscan_9.a_8 AS a_8
            FROM
              (
                SELECT
                  projectscan_6.a_4.referenced_columns.key AS a_7,
                  projectscan_6.a_4.referenced_columns.key AS a_8
              ) AS projectscan_9
          )))
        GROUP BY projectscan_6.a_4.key_columns) AS a_10
    FROM
      (
        SELECT
          projectscan_5.a_2 AS a_2,
          projectscan_5.a_4 AS a_4
        FROM
          (
            SELECT
              measuretable_complexexprs_3.a_1 AS a_1,
              measuretable_complexexprs_3.a_2 AS a_2,
              STRUCT< referenced_columns STRUCT< key INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< key INT64 >
                (measuretable_complexexprs_3.a_1), STRUCT< key INT64 > (measuretable_complexexprs_3.a_1)) AS a_4
            FROM
              (
                SELECT
                  MeasureTable_ComplexExprs.key AS a_1,
                  MeasureTable_ComplexExprs.measure_with_in_subquery AS a_2
                FROM
                  MeasureTable_ComplexExprs
              ) AS measuretable_complexexprs_3
          ) AS projectscan_5
      ) AS projectscan_6
  ) AS aggregatescan_11;
==

# From b/435727890.
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT]
SELECT
  AGG(measure_with_lambda_containing_with_expr)
FROM MeasureTable_ComplexExprs
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#10]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#10]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_ComplexExprs.measure_with_lambda_containing_with_expr#5], table=MeasureTable_ComplexExprs, column_index_list=[4])
        +-aggregate_list=
          +-$agg1#10 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_ComplexExprs.measure_with_lambda_containing_with_expr#5)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_complexexprs_2.a_1) AS a_3
FROM
  (
    SELECT
      MeasureTable_ComplexExprs.measure_with_lambda_containing_with_expr AS a_1
    FROM
      MeasureTable_ComplexExprs
  ) AS measuretable_complexexprs_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#10]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#10]
        +-expr_list=
        | +-$agg1#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#17)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#17]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_ComplexExprs.[key#11, array_val#12, measure_with_lambda_containing_with_expr#5, struct_for_measures_from_table_MeasureTable_ComplexExprs#13]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_ComplexExprs#13 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<array_val ARRAY<INT64>, key INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=ARRAY<INT64>, column=MeasureTable_ComplexExprs.array_val#12)
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#11)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#11)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_ComplexExprs.[key#11, array_val#12, measure_with_lambda_containing_with_expr#5], table=MeasureTable_ComplexExprs, column_index_list=[0, 2, 4])
            +-aggregate_list=
              +-constituent_aggregate_1#17 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#18)
                  +-group_by_list=
                  | +-grain_lock_key#19 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#13)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#18 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<INT64>, INT64) -> INT64)
                          +-SubqueryExpr
                          | +-type=ARRAY<INT64>
                          | +-subquery_type=SCALAR
                          | +-parameter_list=
                          | | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#13)
                          | +-subquery=
                          |   +-ProjectScan
                          |     +-column_list=[$expr_subquery.$col1#23]
                          |     +-expr_list=
                          |     | +-$col1#23 :=
                          |     |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
                          |     |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
                          |     |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#20)
                          |     |     +-Literal(type=ARRAY<INT64>, value=NULL)
                          |     |     +-SubqueryExpr
                          |     |       +-type=ARRAY<INT64>
                          |     |       +-subquery_type=ARRAY
                          |     |       +-parameter_list=
                          |     |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#20)
                          |     |       | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#13, is_correlated=TRUE)
                          |     |       +-subquery=
                          |     |         +-OrderByScan
                          |     |           +-column_list=[$array.element#21]
                          |     |           +-is_ordered=TRUE
                          |     |           +-input_scan=
                          |     |           | +-FilterScan
                          |     |           |   +-column_list=[$array.element#21, $array_offset.off#22]
                          |     |           |   +-input_scan=
                          |     |           |   | +-ArrayScan
                          |     |           |   |   +-column_list=[$array.element#21, $array_offset.off#22]
                          |     |           |   |   +-array_expr_list=
                          |     |           |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#20, is_correlated=TRUE)
                          |     |           |   |   +-element_column_list=[$array.element#21]
                          |     |           |   |   +-array_offset_column=
                          |     |           |   |     +-ColumnHolder(column=$array_offset.off#22)
                          |     |           |   +-filter_expr=
                          |     |           |     +-SubqueryExpr
                          |     |           |       +-type=BOOL
                          |     |           |       +-subquery_type=SCALAR
                          |     |           |       +-parameter_list=
                          |     |           |       | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#13, is_correlated=TRUE)
                          |     |           |       +-subquery=
                          |     |           |         +-ProjectScan
                          |     |           |           +-column_list=[$with_expr.injected#26]
                          |     |           |           +-expr_list=
                          |     |           |           | +-injected#26 := Literal(type=BOOL, value=true)
                          |     |           |           +-input_scan=
                          |     |           |             +-ProjectScan
                          |     |           |               +-column_list=$with_expr.[a1#24, a2#25]
                          |     |           |               +-expr_list=
                          |     |           |               | +-a2#25 :=
                          |     |           |               |   +-GetStructField
                          |     |           |               |     +-type=INT64
                          |     |           |               |     +-expr=
                          |     |           |               |     | +-GetStructField
                          |     |           |               |     |   +-type=STRUCT<array_val ARRAY<INT64>, key INT64>
                          |     |           |               |     |   +-expr=
                          |     |           |               |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#13, is_correlated=TRUE)
                          |     |           |               |     |   +-field_idx=0
                          |     |           |               |     +-field_idx=1
                          |     |           |               +-input_scan=
                          |     |           |                 +-ProjectScan
                          |     |           |                   +-column_list=[$with_expr.a1#24]
                          |     |           |                   +-expr_list=
                          |     |           |                   | +-a1#24 :=
                          |     |           |                   |   +-GetStructField
                          |     |           |                   |     +-type=ARRAY<INT64>
                          |     |           |                   |     +-expr=
                          |     |           |                   |     | +-GetStructField
                          |     |           |                   |     |   +-type=STRUCT<array_val ARRAY<INT64>, key INT64>
                          |     |           |                   |     |   +-expr=
                          |     |           |                   |     |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<array_val ARRAY<INT64>, key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#13, is_correlated=TRUE)
                          |     |           |                   |     |   +-field_idx=0
                          |     |           |                   |     +-field_idx=0
                          |     |           |                   +-input_scan=
                          |     |           |                     +-SingleRowScan
                          |     |           +-order_by_item_list=
                          |     |             +-OrderByItem
                          |     |               +-column_ref=
                          |     |                 +-ColumnRef(type=INT64, column=$array_offset.off#22)
                          |     +-input_scan=
                          |       +-ProjectScan
                          |         +-column_list=[$subquery1.array_to_filter#20]
                          |         +-expr_list=
                          |         | +-array_to_filter#20 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
                          |         +-input_scan=
                          |           +-SingleRowScan
                          +-Literal(type=INT64, value=0)
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_19.a_18 AS a_20
FROM
  (
    SELECT
      SUM(ANY_VALUE((
            SELECT
              `IF`((projectscan_8.a_7) IS NULL, CAST(NULL AS ARRAY< INT64 >), ARRAY(
                  SELECT
                    filterscan_17.a_10 AS a_10
                  FROM
                    (
                      SELECT
                        a_10 AS a_10,
                        a_11 AS a_11
                      FROM
                        UNNEST(projectscan_8.a_7) AS a_10 WITH OFFSET AS a_11
                      WHERE
                        (
                          SELECT
                            true AS a_16
                          FROM
                            (
                              SELECT
                                projectscan_13.a_12 AS a_12,
                                projectscan_6.a_5.referenced_columns.key AS a_14
                              FROM
                                (
                                  SELECT
                                    projectscan_6.a_5.referenced_columns.array_val AS a_12
                                ) AS projectscan_13
                            ) AS projectscan_15
                        )
                    ) AS filterscan_17
                  ORDER BY filterscan_17.a_11)) AS a_9
            FROM
              (
                SELECT
                  ARRAY< INT64 >[1, 2, 3] AS a_7
              ) AS projectscan_8
          )[OFFSET(0)])
        GROUP BY projectscan_6.a_5.key_columns) AS a_18
    FROM
      (
        SELECT
          measuretable_complexexprs_4.a_1 AS a_1,
          measuretable_complexexprs_4.a_2 AS a_2,
          measuretable_complexexprs_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< array_val ARRAY< INT64 >, key INT64 >, key_columns STRUCT< key INT64 >
          > (STRUCT< array_val ARRAY< INT64 >, key INT64 > (measuretable_complexexprs_4.a_2, measuretable_complexexprs_4.a_1),
            STRUCT< key INT64 > (measuretable_complexexprs_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_ComplexExprs.key AS a_1,
              MeasureTable_ComplexExprs.array_val AS a_2,
              MeasureTable_ComplexExprs.measure_with_lambda_containing_with_expr AS a_3
            FROM
              MeasureTable_ComplexExprs
          ) AS measuretable_complexexprs_4
      ) AS projectscan_6
  ) AS aggregatescan_19;
==

# From b/435727890.
[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+INLINE_LAMBDA_ARGUMENT,+WITH_EXPRESSION]
SELECT
  ARRAY_FILTER([1, 2, 3], e -> (SELECT AGG(measure_sum_price) FROM UNNEST([1])) = 1)
FROM MeasureTable_SingleKey
--
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-FunctionCall(ZetaSQL:array_filter(ARRAY<INT64> array_to_filter, FUNCTION<INT64->BOOL> condition) -> ARRAY<INT64>)
    |     +-FunctionArgument
    |     | +-expr=
    |     |   +-Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |     +-FunctionArgument
    |       +-inline_lambda=
    |         +-InlineLambda
    |           +-argument_list=[$lambda_arg.e#15]
    |           +-parameter_list=
    |           | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
    |           +-body=
    |             +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |               +-SubqueryExpr
    |               | +-type=INT64
    |               | +-subquery_type=SCALAR
    |               | +-parameter_list=
    |               | | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
    |               | +-subquery=
    |               |   +-ProjectScan
    |               |     +-column_list=[$aggregate.$agg1#17]
    |               |     +-input_scan=
    |               |       +-AggregateScan
    |               |         +-column_list=[$aggregate.$agg1#17]
    |               |         +-input_scan=
    |               |         | +-ArrayScan
    |               |         |   +-array_expr_list=
    |               |         |   | +-Literal(type=ARRAY<INT64>, value=[1])
    |               |         |   +-element_column_list=[$array.$unnest1#16]
    |               |         +-aggregate_list=
    |               |           +-$agg1#17 :=
    |               |             +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
    |               |               +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
    |               +-Literal(type=INT64, value=1)
    +-input_scan=
      +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])

[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_FILTER(ARRAY< INT64 >[1, 2, 3], (a_4) -> (
      SELECT
        AGG(measuretable_singlekey_2.a_1) AS a_6
      FROM
        UNNEST(ARRAY< INT64 >[1]) AS a_5
    ) = 1) AS a_3
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$query.$col1#18 AS `$col1` [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#18]
    +-expr_list=
    | +-$col1#18 :=
    |   +-SubqueryExpr
    |     +-type=ARRAY<INT64>
    |     +-subquery_type=SCALAR
    |     +-parameter_list=
    |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21)
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$expr_subquery.$col1#28]
    |         +-expr_list=
    |         | +-$col1#28 :=
    |         |   +-FunctionCall(ZetaSQL:if(BOOL, ARRAY<INT64>, ARRAY<INT64>) -> ARRAY<INT64>)
    |         |     +-FunctionCall(ZetaSQL:$is_null(ARRAY<INT64>) -> BOOL)
    |         |     | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#25)
    |         |     +-Literal(type=ARRAY<INT64>, value=NULL)
    |         |     +-SubqueryExpr
    |         |       +-type=ARRAY<INT64>
    |         |       +-subquery_type=ARRAY
    |         |       +-parameter_list=
    |         |       | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#25)
    |         |       | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21, is_correlated=TRUE)
    |         |       +-subquery=
    |         |         +-OrderByScan
    |         |           +-column_list=[$array.element#26]
    |         |           +-is_ordered=TRUE
    |         |           +-input_scan=
    |         |           | +-FilterScan
    |         |           |   +-column_list=[$array.element#26, $array_offset.off#27]
    |         |           |   +-input_scan=
    |         |           |   | +-ArrayScan
    |         |           |   |   +-column_list=[$array.element#26, $array_offset.off#27]
    |         |           |   |   +-array_expr_list=
    |         |           |   |   | +-ColumnRef(type=ARRAY<INT64>, column=$subquery1.array_to_filter#25, is_correlated=TRUE)
    |         |           |   |   +-element_column_list=[$array.element#26]
    |         |           |   |   +-array_offset_column=
    |         |           |   |     +-ColumnHolder(column=$array_offset.off#27)
    |         |           |   +-filter_expr=
    |         |           |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |         |           |       +-SubqueryExpr
    |         |           |       | +-type=INT64
    |         |           |       | +-subquery_type=SCALAR
    |         |           |       | +-parameter_list=
    |         |           |       | | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21, is_correlated=TRUE)
    |         |           |       | +-subquery=
    |         |           |       |   +-ProjectScan
    |         |           |       |     +-column_list=[$aggregate.$agg1#29]
    |         |           |       |     +-input_scan=
    |         |           |       |       +-ProjectScan
    |         |           |       |         +-column_list=[$aggregate.$agg1#29]
    |         |           |       |         +-expr_list=
    |         |           |       |         | +-$agg1#29 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#30)
    |         |           |       |         +-input_scan=
    |         |           |       |           +-AggregateScan
    |         |           |       |             +-column_list=[$aggregate.constituent_aggregate_1#30]
    |         |           |       |             +-input_scan=
    |         |           |       |             | +-ArrayScan
    |         |           |       |             |   +-array_expr_list=
    |         |           |       |             |   | +-Literal(type=ARRAY<INT64>, value=[1])
    |         |           |       |             |   +-element_column_list=[$array.$unnest1#31]
    |         |           |       |             +-aggregate_list=
    |         |           |       |               +-constituent_aggregate_1#30 :=
    |         |           |       |                 +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |         |           |       |                   +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#33)
    |         |           |       |                   +-group_by_list=
    |         |           |       |                   | +-grain_lock_key#32 :=
    |         |           |       |                   |   +-GetStructField
    |         |           |       |                   |     +-type=STRUCT<key INT64>
    |         |           |       |                   |     +-expr=
    |         |           |       |                   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21, is_correlated=TRUE)
    |         |           |       |                   |     +-field_idx=1
    |         |           |       |                   +-group_by_aggregate_list=
    |         |           |       |                     +-$any_value_grain_lock_0#33 :=
    |         |           |       |                       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
    |         |           |       |                         +-GetStructField
    |         |           |       |                           +-type=INT64
    |         |           |       |                           +-expr=
    |         |           |       |                           | +-GetStructField
    |         |           |       |                           |   +-type=STRUCT<price INT64>
    |         |           |       |                           |   +-expr=
    |         |           |       |                           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#21, is_correlated=TRUE)
    |         |           |       |                           |   +-field_idx=0
    |         |           |       |                           +-field_idx=0
    |         |           |       +-Literal(type=INT64, value=1)
    |         |           +-order_by_item_list=
    |         |             +-OrderByItem
    |         |               +-column_ref=
    |         |                 +-ColumnRef(type=INT64, column=$array_offset.off#27)
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$subquery1.array_to_filter#25]
    |             +-expr_list=
    |             | +-array_to_filter#25 := Literal(type=ARRAY<INT64>, value=[1, 2, 3])
    |             +-input_scan=
    |               +-SingleRowScan
    +-input_scan=
      +-ProjectScan
        +-column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#21]
        +-expr_list=
        | +-struct_for_measures_from_table_MeasureTable_SingleKey#21 :=
        |   +-MakeStruct
        |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
        |     +-field_list=
        |       +-MakeStruct
        |       | +-type=STRUCT<price INT64>
        |       | +-field_list=
        |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#20)
        |       +-MakeStruct
        |         +-type=STRUCT<key INT64>
        |         +-field_list=
        |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#19)
        +-input_scan=
          +-TableScan(column_list=MeasureTable_SingleKey.[key#19, price#20, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      `IF`((projectscan_9.a_8) IS NULL, CAST(NULL AS ARRAY< INT64 >), ARRAY(
          SELECT
            filterscan_17.a_11 AS a_11
          FROM
            (
              SELECT
                a_11 AS a_11,
                a_12 AS a_12
              FROM
                UNNEST(projectscan_9.a_8) AS a_11 WITH OFFSET AS a_12
              WHERE
                (
                  SELECT
                    aggregatescan_15.a_14 AS a_16
                  FROM
                    (
                      SELECT
                        SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
                          GROUP BY projectscan_6.a_5.key_columns) AS a_14
                      FROM
                        UNNEST(ARRAY< INT64 >[1]) AS a_13
                    ) AS aggregatescan_15
                ) = 1
            ) AS filterscan_17
          ORDER BY filterscan_17.a_12)) AS a_10
    FROM
      (
        SELECT
          ARRAY< INT64 >[1, 2, 3] AS a_8
      ) AS projectscan_9
  ) AS a_7
FROM
  (
    SELECT
      measuretable_singlekey_4.a_1 AS a_1,
      measuretable_singlekey_4.a_2 AS a_2,
      measuretable_singlekey_4.a_3 AS a_3,
      STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
        (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.price AS a_2,
          MeasureTable_SingleKey.measure_sum_price AS a_3
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_4
  ) AS projectscan_6;
==

[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+WITH_EXPRESSION]
SELECT
  WITH(
    a_19 AS 1,
    a_20 AS a_14,
    a_21 AS EXISTS(
      SELECT
        key AS a_22,
        measure_sum_price AS a_27
      FROM MeasureTable_SingleKey
    ),
    a_22 AS (
      SELECT
        AGG(a_5)
      FROM MeasureTable_SingleKey
    ),
    2
  ) AS a_30,
  AGG(a_5) AS a_32
FROM
  (
    SELECT
      a_5,
      3,
      a_5 AS a_14
    FROM
      (
        SELECT
          measure_sum_price AS a_5
        FROM MeasureTable_SingleKey
      )
  )
GROUP BY 1
--
QueryStmt
+-output_column_list=
| +-$groupby.a_30#50 AS a_30 [INT64]
| +-$aggregate.a_32#49 AS a_32 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.a_30#50, $aggregate.a_32#49]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.a_30#50, $aggregate.a_32#49]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, $subquery1.$col2#15, MeasureTable_SingleKey.measure_sum_price#10]
        |   +-expr_list=
        |   | +-$col2#15 := Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
        |       +-input_scan=
        |         +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
        +-group_by_list=
        | +-a_30#50 :=
        |   +-WithExpr
        |     +-type=INT64
        |     +-assignment_list=
        |     | +-a_19#16 := Literal(type=INT64, value=1)
        |     | +-a_20#17 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
        |     | +-a_21#32 :=
        |     | | +-SubqueryExpr
        |     | |   +-type=BOOL
        |     | |   +-subquery_type=EXISTS
        |     | |   +-subquery=
        |     | |     +-ProjectScan
        |     | |       +-column_list=MeasureTable_SingleKey.[key#18, measure_sum_price#27]
        |     | |       +-input_scan=
        |     | |         +-TableScan(column_list=MeasureTable_SingleKey.[key#18, measure_sum_price#27], table=MeasureTable_SingleKey, column_index_list=[0, 9])
        |     | +-a_22#48 :=
        |     |   +-SubqueryExpr
        |     |     +-type=INT64
        |     |     +-subquery_type=SCALAR
        |     |     +-parameter_list=
        |     |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
        |     |     +-subquery=
        |     |       +-ProjectScan
        |     |         +-column_list=[$aggregate.$agg1#47]
        |     |         +-input_scan=
        |     |           +-AggregateScan
        |     |             +-column_list=[$aggregate.$agg1#47]
        |     |             +-input_scan=
        |     |             | +-TableScan(table=MeasureTable_SingleKey)
        |     |             +-aggregate_list=
        |     |               +-$agg1#47 :=
        |     |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
        |     |                   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
        |     +-expr=
        |       +-Literal(type=INT64, value=2)
        +-aggregate_list=
          +-a_32#49 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  WITH(a_6 AS 1, a_7 AS projectscan_5.a_1, a_8 AS EXISTS(
    SELECT
      MeasureTable_SingleKey.key AS a_9,
      MeasureTable_SingleKey.measure_sum_price AS a_10
    FROM
      MeasureTable_SingleKey
  ), a_11 AS(
    SELECT
      AGG(projectscan_5.a_1) AS a_12
    FROM
      MeasureTable_SingleKey
  ), 2) AS a_30,
  AGG(projectscan_5.a_1) AS a_32
FROM
  (
    SELECT
      projectscan_2.a_1 AS a_1,
      3 AS a_3,
      projectscan_2.a_1 AS a_4
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_price AS a_1
        FROM
          MeasureTable_SingleKey
      ) AS projectscan_2
  ) AS projectscan_5
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.a_30#50 AS a_30 [INT64]
| +-$aggregate.a_32#49 AS a_32 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.a_30#50, $aggregate.a_32#49]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.a_30#50, $aggregate.a_32#49]
        +-expr_list=
        | +-a_32#49 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#57)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.a_30#50, $aggregate.constituent_aggregate_1#57]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[MeasureTable_SingleKey.measure_sum_price#10, $subquery1.$col2#15, MeasureTable_SingleKey.measure_sum_price#10, MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53]
            |   +-expr_list=
            |   | +-$col2#15 := Literal(type=INT64, value=3)
            |   +-input_scan=
            |     +-ProjectScan
            |       +-column_list=MeasureTable_SingleKey.[measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#53]
            |       +-input_scan=
            |         +-ProjectScan
            |           +-column_list=MeasureTable_SingleKey.[key#51, price#52, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#53]
            |           +-expr_list=
            |           | +-struct_for_measures_from_table_MeasureTable_SingleKey#53 :=
            |           |   +-MakeStruct
            |           |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |           |     +-field_list=
            |           |       +-MakeStruct
            |           |       | +-type=STRUCT<price INT64>
            |           |       | +-field_list=
            |           |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#52)
            |           |       +-MakeStruct
            |           |         +-type=STRUCT<key INT64>
            |           |         +-field_list=
            |           |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#51)
            |           +-input_scan=
            |             +-TableScan(column_list=MeasureTable_SingleKey.[key#51, price#52, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
            +-group_by_list=
            | +-a_30#50 :=
            |   +-SubqueryExpr
            |     +-type=INT64
            |     +-subquery_type=SCALAR
            |     +-parameter_list=
            |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
            |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53)
            |     +-subquery=
            |       +-ProjectScan
            |         +-column_list=[$with_expr.injected#60]
            |         +-expr_list=
            |         | +-injected#60 := Literal(type=INT64, value=2)
            |         +-input_scan=
            |           +-ProjectScan
            |             +-column_list=$with_expr.[a_19#16, a_20#17, a_21#32, a_22#48]
            |             +-expr_list=
            |             | +-a_22#48 :=
            |             |   +-SubqueryExpr
            |             |     +-type=INT64
            |             |     +-subquery_type=SCALAR
            |             |     +-parameter_list=
            |             |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53, is_correlated=TRUE)
            |             |     +-subquery=
            |             |       +-ProjectScan
            |             |         +-column_list=[$aggregate.$agg1#47]
            |             |         +-input_scan=
            |             |           +-ProjectScan
            |             |             +-column_list=[$aggregate.$agg1#47]
            |             |             +-expr_list=
            |             |             | +-$agg1#47 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#54)
            |             |             +-input_scan=
            |             |               +-AggregateScan
            |             |                 +-column_list=[$aggregate.constituent_aggregate_1#54]
            |             |                 +-input_scan=
            |             |                 | +-TableScan(table=MeasureTable_SingleKey)
            |             |                 +-aggregate_list=
            |             |                   +-constituent_aggregate_1#54 :=
            |             |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |             |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#55)
            |             |                       +-group_by_list=
            |             |                       | +-grain_lock_key#56 :=
            |             |                       |   +-GetStructField
            |             |                       |     +-type=STRUCT<key INT64>
            |             |                       |     +-expr=
            |             |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53, is_correlated=TRUE)
            |             |                       |     +-field_idx=1
            |             |                       +-group_by_aggregate_list=
            |             |                         +-$any_value_grain_lock_0#55 :=
            |             |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |             |                             +-GetStructField
            |             |                               +-type=INT64
            |             |                               +-expr=
            |             |                               | +-GetStructField
            |             |                               |   +-type=STRUCT<price INT64>
            |             |                               |   +-expr=
            |             |                               |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53, is_correlated=TRUE)
            |             |                               |   +-field_idx=0
            |             |                               +-field_idx=0
            |             +-input_scan=
            |               +-ProjectScan
            |                 +-column_list=$with_expr.[a_19#16, a_20#17, a_21#32]
            |                 +-expr_list=
            |                 | +-a_21#32 :=
            |                 |   +-SubqueryExpr
            |                 |     +-type=BOOL
            |                 |     +-subquery_type=EXISTS
            |                 |     +-subquery=
            |                 |       +-ProjectScan
            |                 |         +-column_list=MeasureTable_SingleKey.[key#18, measure_sum_price#27]
            |                 |         +-input_scan=
            |                 |           +-TableScan(column_list=MeasureTable_SingleKey.[key#18, measure_sum_price#27], table=MeasureTable_SingleKey, column_index_list=[0, 9])
            |                 +-input_scan=
            |                   +-ProjectScan
            |                     +-column_list=$with_expr.[a_19#16, a_20#17]
            |                     +-expr_list=
            |                     | +-a_20#17 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
            |                     +-input_scan=
            |                       +-ProjectScan
            |                         +-column_list=[$with_expr.a_19#16]
            |                         +-expr_list=
            |                         | +-a_19#16 := Literal(type=INT64, value=1)
            |                         +-input_scan=
            |                           +-SingleRowScan
            +-aggregate_list=
              +-constituent_aggregate_1#57 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#58)
                  +-group_by_list=
                  | +-grain_lock_key#59 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#58 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#53)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_27.a_25 AS a_30,
  aggregatescan_27.a_26 AS a_32
FROM
  (
    SELECT
      (
        SELECT
          2 AS a_24
        FROM
          (
            SELECT
              projectscan_18.a_11 AS a_11,
              projectscan_18.a_13 AS a_13,
              projectscan_18.a_15 AS a_15,
              (
                SELECT
                  aggregatescan_21.a_20 AS a_22
                FROM
                  (
                    SELECT
                      SUM(ANY_VALUE(projectscan_10.a_5.referenced_columns.price)
                        GROUP BY projectscan_10.a_5.key_columns) AS a_20
                    FROM
                      MeasureTable_SingleKey
                  ) AS aggregatescan_21
              ) AS a_19
            FROM
              (
                SELECT
                  projectscan_14.a_11 AS a_11,
                  projectscan_14.a_13 AS a_13,
                  EXISTS(
                    SELECT
                      MeasureTable_SingleKey.key AS a_16,
                      MeasureTable_SingleKey.measure_sum_price AS a_17
                    FROM
                      MeasureTable_SingleKey
                  ) AS a_15
                FROM
                  (
                    SELECT
                      projectscan_12.a_11 AS a_11,
                      projectscan_10.a_3 AS a_13
                    FROM
                      (
                        SELECT
                          1 AS a_11
                      ) AS projectscan_12
                  ) AS projectscan_14
              ) AS projectscan_18
          ) AS projectscan_23
      ) AS a_25,
      SUM(ANY_VALUE(projectscan_10.a_5.referenced_columns.price)
        GROUP BY projectscan_10.a_5.key_columns) AS a_26
    FROM
      (
        SELECT
          projectscan_7.a_3 AS a_3,
          3 AS a_8,
          projectscan_7.a_3 AS a_9,
          projectscan_7.a_5 AS a_5
        FROM
          (
            SELECT
              projectscan_6.a_3 AS a_3,
              projectscan_6.a_5 AS a_5
            FROM
              (
                SELECT
                  measuretable_singlekey_4.a_1 AS a_1,
                  measuretable_singlekey_4.a_2 AS a_2,
                  measuretable_singlekey_4.a_3 AS a_3,
                  STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                    (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
                FROM
                  (
                    SELECT
                      MeasureTable_SingleKey.key AS a_1,
                      MeasureTable_SingleKey.price AS a_2,
                      MeasureTable_SingleKey.measure_sum_price AS a_3
                    FROM
                      MeasureTable_SingleKey
                  ) AS measuretable_singlekey_4
              ) AS projectscan_6
          ) AS projectscan_7
      ) AS projectscan_10
    GROUP BY 1
  ) AS aggregatescan_27;
==

[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+WITH_EXPRESSION]
SELECT
  WITH(
    a_21 AS OuterTable.measure_sum_price,
    a_23 AS (
      SELECT
        AGG(a_21)
      FROM MeasureTable_SingleKey
    ),
    2
  ),
  AGG(measure_sum_price)
FROM MeasureTable_SingleKey AS OuterTable
GROUP BY 1
--
QueryStmt
+-output_column_list=
| +-$groupby.$col1#33 AS `$col1` [INT64]
| +-$aggregate.$agg1#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.$col1#33, $aggregate.$agg1#32]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$groupby.$col1#33, $aggregate.$agg1#32]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9], alias="OuterTable")
        +-group_by_list=
        | +-$col1#33 :=
        |   +-WithExpr
        |     +-type=INT64
        |     +-assignment_list=
        |     | +-a_21#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
        |     | +-a_23#31 :=
        |     |   +-SubqueryExpr
        |     |     +-type=INT64
        |     |     +-subquery_type=SCALAR
        |     |     +-parameter_list=
        |     |     | +-ColumnRef(type=MEASURE<INT64>, column=$with_expr.a_21#15)
        |     |     +-subquery=
        |     |       +-ProjectScan
        |     |         +-column_list=[$aggregate.$agg1#30]
        |     |         +-input_scan=
        |     |           +-AggregateScan
        |     |             +-column_list=[$aggregate.$agg1#30]
        |     |             +-input_scan=
        |     |             | +-TableScan(table=MeasureTable_SingleKey)
        |     |             +-aggregate_list=
        |     |               +-$agg1#30 :=
        |     |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
        |     |                   +-ColumnRef(type=MEASURE<INT64>, column=$with_expr.a_21#15, is_correlated=TRUE)
        |     +-expr=
        |       +-Literal(type=INT64, value=2)
        +-aggregate_list=
          +-$agg1#32 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  WITH(a_3 AS measuretable_singlekey_2.a_1, a_4 AS(
    SELECT
      AGG(a_3) AS a_5
    FROM
      MeasureTable_SingleKey
  ), 2) AS a_6,
  AGG(measuretable_singlekey_2.a_1) AS a_7
FROM
  (
    SELECT
      MeasureTable_SingleKey.measure_sum_price AS a_1
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_2
GROUP BY 1;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.$col1#33 AS `$col1` [INT64]
| +-$aggregate.$agg1#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.$col1#33, $aggregate.$agg1#32]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$groupby.$col1#33, $aggregate.$agg1#32]
        +-expr_list=
        | +-$agg1#32 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#41)
        +-input_scan=
          +-AggregateScan
            +-column_list=[$groupby.$col1#33, $aggregate.constituent_aggregate_1#41]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#34, price#35, measure_sum_price#10, struct_for_measures_from_table_MeasureTable_SingleKey#36]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#36 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<price INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#35)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#34)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#34, price#35, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9], alias="OuterTable")
            +-group_by_list=
            | +-$col1#33 :=
            |   +-SubqueryExpr
            |     +-type=INT64
            |     +-subquery_type=SCALAR
            |     +-parameter_list=
            |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
            |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#36)
            |     +-subquery=
            |       +-ProjectScan
            |         +-column_list=[$with_expr.injected#44]
            |         +-expr_list=
            |         | +-injected#44 := Literal(type=INT64, value=2)
            |         +-input_scan=
            |           +-ProjectScan
            |             +-column_list=$with_expr.[a_21#15, struct_for_measures_from_table_$with_expr#37, a_23#31]
            |             +-expr_list=
            |             | +-a_23#31 :=
            |             |   +-SubqueryExpr
            |             |     +-type=INT64
            |             |     +-subquery_type=SCALAR
            |             |     +-parameter_list=
            |             |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$with_expr.struct_for_measures_from_table_$with_expr#37)
            |             |     +-subquery=
            |             |       +-ProjectScan
            |             |         +-column_list=[$aggregate.$agg1#30]
            |             |         +-input_scan=
            |             |           +-ProjectScan
            |             |             +-column_list=[$aggregate.$agg1#30]
            |             |             +-expr_list=
            |             |             | +-$agg1#30 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#38)
            |             |             +-input_scan=
            |             |               +-AggregateScan
            |             |                 +-column_list=[$aggregate.constituent_aggregate_1#38]
            |             |                 +-input_scan=
            |             |                 | +-TableScan(table=MeasureTable_SingleKey)
            |             |                 +-aggregate_list=
            |             |                   +-constituent_aggregate_1#38 :=
            |             |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |             |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#39)
            |             |                       +-group_by_list=
            |             |                       | +-grain_lock_key#40 :=
            |             |                       |   +-GetStructField
            |             |                       |     +-type=STRUCT<key INT64>
            |             |                       |     +-expr=
            |             |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$with_expr.struct_for_measures_from_table_$with_expr#37, is_correlated=TRUE)
            |             |                       |     +-field_idx=1
            |             |                       +-group_by_aggregate_list=
            |             |                         +-$any_value_grain_lock_0#39 :=
            |             |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |             |                             +-GetStructField
            |             |                               +-type=INT64
            |             |                               +-expr=
            |             |                               | +-GetStructField
            |             |                               |   +-type=STRUCT<price INT64>
            |             |                               |   +-expr=
            |             |                               |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=$with_expr.struct_for_measures_from_table_$with_expr#37, is_correlated=TRUE)
            |             |                               |   +-field_idx=0
            |             |                               +-field_idx=0
            |             +-input_scan=
            |               +-ProjectScan
            |                 +-column_list=$with_expr.[a_21#15, struct_for_measures_from_table_$with_expr#37]
            |                 +-expr_list=
            |                 | +-struct_for_measures_from_table_$with_expr#37 := ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#36, is_correlated=TRUE)
            |                 +-input_scan=
            |                   +-ProjectScan
            |                     +-column_list=[$with_expr.a_21#15]
            |                     +-expr_list=
            |                     | +-a_21#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
            |                     +-input_scan=
            |                       +-SingleRowScan
            +-aggregate_list=
              +-constituent_aggregate_1#41 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#42)
                  +-group_by_list=
                  | +-grain_lock_key#43 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#36)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#42 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<price INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#36)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_19.a_17 AS a_17,
  aggregatescan_19.a_18 AS a_20
FROM
  (
    SELECT
      (
        SELECT
          2 AS a_16
        FROM
          (
            SELECT
              projectscan_10.a_7 AS a_7,
              projectscan_10.a_9 AS a_9,
              (
                SELECT
                  aggregatescan_13.a_12 AS a_14
                FROM
                  (
                    SELECT
                      SUM(ANY_VALUE(projectscan_10.a_9.referenced_columns.price)
                        GROUP BY projectscan_10.a_9.key_columns) AS a_12
                    FROM
                      MeasureTable_SingleKey
                  ) AS aggregatescan_13
              ) AS a_11
            FROM
              (
                SELECT
                  projectscan_8.a_7 AS a_7,
                  projectscan_6.a_5 AS a_9
                FROM
                  (
                    SELECT
                      projectscan_6.a_3 AS a_7
                  ) AS projectscan_8
              ) AS projectscan_10
          ) AS projectscan_15
      ) AS a_17,
      SUM(ANY_VALUE(projectscan_6.a_5.referenced_columns.price)
        GROUP BY projectscan_6.a_5.key_columns) AS a_18
    FROM
      (
        SELECT
          measuretable_singlekey_4.a_1 AS a_1,
          measuretable_singlekey_4.a_2 AS a_2,
          measuretable_singlekey_4.a_3 AS a_3,
          STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
            (measuretable_singlekey_4.a_2), STRUCT< key INT64 > (measuretable_singlekey_4.a_1)) AS a_5
        FROM
          (
            SELECT
              MeasureTable_SingleKey.key AS a_1,
              MeasureTable_SingleKey.price AS a_2,
              MeasureTable_SingleKey.measure_sum_price AS a_3
            FROM
              MeasureTable_SingleKey
          ) AS measuretable_singlekey_4
      ) AS projectscan_6
    GROUP BY 1
  ) AS aggregatescan_19;
==

# TODO: b/350555383 - The ResolvedAST produced by this query is correct, but
# unstable, presumably to due a rewriter that. Investigate and fix.
#[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+WITH_EXPRESSION,+INLINE_LAMBDA_ARGUMENT]
#SELECT
#  ARRAY_FILTER([1, 2, 3], e -> WITH(a1 AS measure_sum_price, a2 AS (SELECT AGG(a1) FROM UNNEST([1])), true))
#FROM MeasureTable_SingleKey

[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+WITH_EXPRESSION]
# TODO: b/350555383 - We should support WITH exprs as arguments to AGG function.
SELECT
  AGG(WITH(placeholder AS 1, measure_sum_price))
FROM MeasureTable_SingleKey
GROUP BY country;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#16 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#16]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#16]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_SingleKey.[country#2, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[1, 9])
        +-group_by_list=
        | +-country#17 := ColumnRef(type=STRING, column=MeasureTable_SingleKey.country#2)
        +-aggregate_list=
          +-$agg1#16 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
              +-WithExpr
                +-type=MEASURE<INT64>
                +-assignment_list=
                | +-placeholder#15 := Literal(type=INT64, value=1)
                +-expr=
                  +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(WITH(a_4 AS 1, measuretable_singlekey_3.a_2)) AS a_5
FROM
  (
    SELECT
      MeasureTable_SingleKey.country AS a_1,
      MeasureTable_SingleKey.measure_sum_price AS a_2
    FROM
      MeasureTable_SingleKey
  ) AS measuretable_singlekey_3
GROUP BY measuretable_singlekey_3.a_1;

Rewrite ERROR: generic::unimplemented: Measure type rewriter expects argument to AGG function to be a direct column reference
==

[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+MATCH_RECOGNIZE]
SELECT
  matchrecognizescan_13
FROM (
    SELECT
      key,
      measure_sum_price
    FROM MeasureTable_SingleKey
  ) AS table_int_9 MATCH_RECOGNIZE(
    ORDER BY key
    MEASURES
      AGG(measure_sum_price) AS aggregated
    PATTERN (is_true)
    DEFINE
      is_true AS true
)
AS matchrecognizescan_13
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$query.matchrecognizescan_13#21 AS matchrecognizescan_13 [STRUCT<aggregated INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$query.matchrecognizescan_13#21]
    +-expr_list=
    | +-matchrecognizescan_13#21 :=
    |   +-MakeStruct
    |     +-type=STRUCT<aggregated INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$match_recognize.aggregated#19)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.aggregated#19]
        +-expr_list=
        | +-aggregated#19 := ColumnRef(type=INT64, column=$aggregate.$agg1#18)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#18]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10]
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_SingleKey.[key#1, measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[0, 9])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="is_true"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternVariableRef(name="is_true")
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#18 :=
            |       +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
            |         +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
            +-match_number_column=$match_recognize.$match_number#15
            +-match_row_number_column=$match_recognize.$match_row_number#16
            +-classifier_column=$match_recognize.$classifier#17

[SQLBUILDER_OUTPUT]
SELECT
  STRUCT< aggregated INT64 > (projectscan_8.a_7) AS matchrecognizescan_13
FROM
  (
    SELECT
      matchrecognizescan_6.a_4 AS a_7
    FROM
      (
        SELECT
          MeasureTable_SingleKey.key AS a_1,
          MeasureTable_SingleKey.measure_sum_price AS a_2
        FROM
          MeasureTable_SingleKey
      ) AS projectscan_3 MATCH_RECOGNIZE(
        ORDER BY projectscan_3.a_1
        MEASURES
          AGG(projectscan_3.a_2) AS a_4,
          MATCH_NUMBER() AS a_5
        AFTER MATCH SKIP PAST LAST ROW
        PATTERN (is_true)
        DEFINE
          is_true AS true
      )
      AS matchrecognizescan_6
  ) AS projectscan_8;

Rewrite ERROR: generic::unimplemented: Measure type rewriter does not support aggregating measures in a MATCH_RECOGNIZE scan
==

[language_features=NONE,+ENABLE_MEASURES,+WITH_EXPRESSION,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT]
# measure from with expr assignment list but the final expr does not output a measure
SELECT
  a_10,
  (select agg(measure_sum_price) from MeasureTable_SingleKey)
FROM (
  SELECT
    WITH(a_11 AS alias_1.a_8, 1) AS a_10
  FROM (
    SELECT
      measure_sum_price AS a_8
    FROM
      MeasureTable_SingleKey
  ) AS alias_1
)
--
QueryStmt
+-output_column_list=
| +-$subquery1.a_10#16 AS a_10 [INT64]
| +-$query.$col2#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.a_10#16, $query.$col2#32]
    +-expr_list=
    | +-$col2#32 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#31]
    |         +-input_scan=
    |           +-AggregateScan
    |             +-column_list=[$aggregate.$agg1#31]
    |             +-input_scan=
    |             | +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#26], table=MeasureTable_SingleKey, column_index_list=[9])
    |             +-aggregate_list=
    |               +-$agg1#31 :=
    |                 +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
    |                   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#26)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.a_10#16]
        +-expr_list=
        | +-a_10#16 :=
        |   +-WithExpr
        |     +-type=INT64
        |     +-assignment_list=
        |     | +-a_11#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
        |     +-expr=
        |       +-Literal(type=INT64, value=1)
        +-input_scan=
          +-ProjectScan
            +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
            +-input_scan=
              +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])

[SQLBUILDER_OUTPUT]
SELECT
  projectscan_5.a_3 AS a_10,
  (
    SELECT
      AGG(measuretable_singlekey_8.a_7) AS a_9
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_price AS a_7
        FROM
          MeasureTable_SingleKey
      ) AS measuretable_singlekey_8
  ) AS a_6
FROM
  (
    SELECT
      WITH(a_4 AS projectscan_2.a_1, 1) AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_price AS a_1
        FROM
          MeasureTable_SingleKey
      ) AS projectscan_2
  ) AS projectscan_5;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$subquery1.a_10#16 AS a_10 [INT64]
| +-$query.$col2#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$subquery1.a_10#16, $query.$col2#32]
    +-expr_list=
    | +-$col2#32 :=
    |   +-SubqueryExpr
    |     +-type=INT64
    |     +-subquery_type=SCALAR
    |     +-subquery=
    |       +-ProjectScan
    |         +-column_list=[$aggregate.$agg1#31]
    |         +-input_scan=
    |           +-ProjectScan
    |             +-column_list=[$aggregate.$agg1#31]
    |             +-expr_list=
    |             | +-$agg1#31 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#36)
    |             +-input_scan=
    |               +-AggregateScan
    |                 +-column_list=[$aggregate.constituent_aggregate_1#36]
    |                 +-input_scan=
    |                 | +-ProjectScan
    |                 |   +-column_list=MeasureTable_SingleKey.[key#33, price#34, measure_sum_price#26, struct_for_measures_from_table_MeasureTable_SingleKey#35]
    |                 |   +-expr_list=
    |                 |   | +-struct_for_measures_from_table_MeasureTable_SingleKey#35 :=
    |                 |   |   +-MakeStruct
    |                 |   |     +-type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>
    |                 |   |     +-field_list=
    |                 |   |       +-MakeStruct
    |                 |   |       | +-type=STRUCT<price INT64>
    |                 |   |       | +-field_list=
    |                 |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.price#34)
    |                 |   |       +-MakeStruct
    |                 |   |         +-type=STRUCT<key INT64>
    |                 |   |         +-field_list=
    |                 |   |           +-ColumnRef(type=INT64, column=MeasureTable_SingleKey.key#33)
    |                 |   +-input_scan=
    |                 |     +-TableScan(column_list=MeasureTable_SingleKey.[key#33, price#34, measure_sum_price#26], table=MeasureTable_SingleKey, column_index_list=[0, 3, 9])
    |                 +-aggregate_list=
    |                   +-constituent_aggregate_1#36 :=
    |                     +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |                       +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#37)
    |                       +-group_by_list=
    |                       | +-grain_lock_key#38 :=
    |                       |   +-GetStructField
    |                       |     +-type=STRUCT<key INT64>
    |                       |     +-expr=
    |                       |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#35)
    |                       |     +-field_idx=1
    |                       +-group_by_aggregate_list=
    |                         +-$any_value_grain_lock_0#37 :=
    |                           +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
    |                             +-GetStructField
    |                               +-type=INT64
    |                               +-expr=
    |                               | +-GetStructField
    |                               |   +-type=STRUCT<price INT64>
    |                               |   +-expr=
    |                               |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<price INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_SingleKey.struct_for_measures_from_table_MeasureTable_SingleKey#35)
    |                               |   +-field_idx=0
    |                               +-field_idx=0
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.a_10#16]
        +-expr_list=
        | +-a_10#16 :=
        |   +-SubqueryExpr
        |     +-type=INT64
        |     +-subquery_type=SCALAR
        |     +-parameter_list=
        |     | +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$with_expr.injected#39]
        |         +-expr_list=
        |         | +-injected#39 := Literal(type=INT64, value=1)
        |         +-input_scan=
        |           +-ProjectScan
        |             +-column_list=[$with_expr.a_11#15]
        |             +-expr_list=
        |             | +-a_11#15 := ColumnRef(type=MEASURE<INT64>, column=MeasureTable_SingleKey.measure_sum_price#10, is_correlated=TRUE)
        |             +-input_scan=
        |               +-SingleRowScan
        +-input_scan=
          +-ProjectScan
            +-column_list=[MeasureTable_SingleKey.measure_sum_price#10]
            +-input_scan=
              +-TableScan(column_list=[MeasureTable_SingleKey.measure_sum_price#10], table=MeasureTable_SingleKey, column_index_list=[9])
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_7.a_3 AS a_10,
  (
    SELECT
      aggregatescan_16.a_15 AS a_17
    FROM
      (
        SELECT
          SUM(ANY_VALUE(projectscan_14.a_13.referenced_columns.price)
            GROUP BY projectscan_14.a_13.key_columns) AS a_15
        FROM
          (
            SELECT
              measuretable_singlekey_12.a_9 AS a_9,
              measuretable_singlekey_12.a_10 AS a_10,
              measuretable_singlekey_12.a_11 AS a_11,
              STRUCT< referenced_columns STRUCT< price INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< price INT64 >
                (measuretable_singlekey_12.a_10), STRUCT< key INT64 > (measuretable_singlekey_12.a_9)) AS a_13
            FROM
              (
                SELECT
                  MeasureTable_SingleKey.key AS a_9,
                  MeasureTable_SingleKey.price AS a_10,
                  MeasureTable_SingleKey.measure_sum_price AS a_11
                FROM
                  MeasureTable_SingleKey
              ) AS measuretable_singlekey_12
          ) AS projectscan_14
      ) AS aggregatescan_16
  ) AS a_8
FROM
  (
    SELECT
      (
        SELECT
          1 AS a_6
        FROM
          (
            SELECT
              projectscan_2.a_1 AS a_4
          ) AS projectscan_5
      ) AS a_3
    FROM
      (
        SELECT
          MeasureTable_SingleKey.measure_sum_price AS a_1
        FROM
          MeasureTable_SingleKey
      ) AS projectscan_2
  ) AS projectscan_7;
==

[language_features=NONE,+ENABLE_MEASURES,+MULTILEVEL_AGGREGATION,+GROUP_BY_STRUCT,+BITWISE_AGGREGATE_BYTES_SIGNATURES,+NAMED_ARGUMENTS]
SELECT
  AGG(measure_sum_one),
  AGG(measure_string_agg),
  AGG(measure_bit_and)
FROM MeasureTable_ComplexExprs;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [INT64]
| +-$aggregate.$agg2#11 AS `$col2` [STRING]
| +-$aggregate.$agg3#12 AS `$col3` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#10, $agg2#11, $agg3#12]
    +-input_scan=
      +-AggregateScan
        +-column_list=$aggregate.[$agg1#10, $agg2#11, $agg3#12]
        +-input_scan=
        | +-TableScan(column_list=MeasureTable_ComplexExprs.[measure_sum_one#6, measure_string_agg#7, measure_bit_and#8], table=MeasureTable_ComplexExprs, column_index_list=[5, 6, 7])
        +-aggregate_list=
          +-$agg1#10 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<INT64>) -> INT64)
          |   +-ColumnRef(type=MEASURE<INT64>, column=MeasureTable_ComplexExprs.measure_sum_one#6)
          +-$agg2#11 :=
          | +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<STRING>) -> STRING)
          |   +-ColumnRef(type=MEASURE<STRING>, column=MeasureTable_ComplexExprs.measure_string_agg#7)
          +-$agg3#12 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<BYTES>) -> BYTES)
              +-ColumnRef(type=MEASURE<BYTES>, column=MeasureTable_ComplexExprs.measure_bit_and#8)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_complexexprs_4.a_1) AS a_5,
  AGG(measuretable_complexexprs_4.a_2) AS a_6,
  AGG(measuretable_complexexprs_4.a_3) AS a_7
FROM
  (
    SELECT
      MeasureTable_ComplexExprs.measure_sum_one AS a_1,
      MeasureTable_ComplexExprs.measure_string_agg AS a_2,
      MeasureTable_ComplexExprs.measure_bit_and AS a_3
    FROM
      MeasureTable_ComplexExprs
  ) AS measuretable_complexexprs_4;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [INT64]
| +-$aggregate.$agg2#11 AS `$col2` [STRING]
| +-$aggregate.$agg3#12 AS `$col3` [BYTES]
+-query=
  +-ProjectScan
    +-column_list=$aggregate.[$agg1#10, $agg2#11, $agg3#12]
    +-input_scan=
      +-ProjectScan
        +-column_list=$aggregate.[$agg1#10, $agg2#11, $agg3#12]
        +-expr_list=
        | +-$agg1#10 := ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#16)
        | +-$agg2#11 := ColumnRef(type=STRING, column=$aggregate.constituent_aggregate_1#18)
        | +-$agg3#12 := ColumnRef(type=BYTES, column=$aggregate.constituent_aggregate_1#21)
        +-input_scan=
          +-AggregateScan
            +-column_list=$aggregate.[constituent_aggregate_1#16, constituent_aggregate_1#18, constituent_aggregate_1#21]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_ComplexExprs.[key#13, country#14, measure_sum_one#6, measure_string_agg#7, measure_bit_and#8, struct_for_measures_from_table_MeasureTable_ComplexExprs#15]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_ComplexExprs#15 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<country STRING>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<country STRING>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=STRING, column=MeasureTable_ComplexExprs.country#14)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#13)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_ComplexExprs.[key#13, country#14, measure_sum_one#6, measure_string_agg#7, measure_bit_and#8], table=MeasureTable_ComplexExprs, column_index_list=[0, 1, 5, 6, 7])
            +-aggregate_list=
              +-constituent_aggregate_1#16 :=
              | +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
              |   +-Literal(type=INT64, value=1)
              |   +-group_by_list=
              |     +-grain_lock_key#17 :=
              |       +-GetStructField
              |         +-type=STRUCT<key INT64>
              |         +-expr=
              |         | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<country STRING>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#15)
              |         +-field_idx=1
              +-constituent_aggregate_1#18 :=
              | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
              |   +-ColumnRef(type=STRING, column=$aggregate.$any_value_grain_lock_0#19)
              |   +-Literal(type=STRING, value=",")
              |   +-group_by_list=
              |   | +-grain_lock_key#20 :=
              |   |   +-GetStructField
              |   |     +-type=STRUCT<key INT64>
              |   |     +-expr=
              |   |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<country STRING>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#15)
              |   |     +-field_idx=1
              |   +-group_by_aggregate_list=
              |     +-$any_value_grain_lock_0#19 :=
              |       +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
              |         +-GetStructField
              |           +-type=STRING
              |           +-expr=
              |           | +-GetStructField
              |           |   +-type=STRUCT<country STRING>
              |           |   +-expr=
              |           |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<country STRING>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#15)
              |           |   +-field_idx=0
              |           +-field_idx=0
              +-constituent_aggregate_1#21 :=
                +-AggregateFunctionCall(ZetaSQL:bit_and(BYTES, optional(1) ENUM<BITWISE_AGG_MODE> mode) -> BYTES)
                  +-ColumnRef(type=BYTES, column=$aggregate.$any_value_grain_lock_0#22)
                  +-Literal(type=ENUM<BITWISE_AGG_MODE>, value=PAD)
                  +-group_by_list=
                  | +-grain_lock_key#23 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<country STRING>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#15)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#22 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(BYTES) -> BYTES)
                        +-Cast(STRING -> BYTES)
                          +-GetStructField
                            +-type=STRING
                            +-expr=
                            | +-GetStructField
                            |   +-type=STRUCT<country STRING>
                            |   +-expr=
                            |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<country STRING>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#15)
                            |   +-field_idx=0
                            +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_12.a_9 AS a_13,
  aggregatescan_12.a_10 AS a_14,
  aggregatescan_12.a_11 AS a_15
FROM
  (
    SELECT
      SUM(1
        GROUP BY projectscan_8.a_7.key_columns) AS a_9,
      STRING_AGG(ANY_VALUE(projectscan_8.a_7.referenced_columns.country), ","
        GROUP BY projectscan_8.a_7.key_columns) AS a_10,
      BIT_AND (ANY_VALUE(CAST(projectscan_8.a_7.referenced_columns.country AS BYTES)), mode  => CAST("PAD" AS BITWISE_AGG_MODE)
        GROUP BY projectscan_8.a_7.key_columns) AS a_11
    FROM
      (
        SELECT
          measuretable_complexexprs_6.a_1 AS a_1,
          measuretable_complexexprs_6.a_2 AS a_2,
          measuretable_complexexprs_6.a_3 AS a_3,
          measuretable_complexexprs_6.a_4 AS a_4,
          measuretable_complexexprs_6.a_5 AS a_5,
          STRUCT< referenced_columns STRUCT< country STRING >, key_columns STRUCT< key INT64 > > (STRUCT< country STRING >
            (measuretable_complexexprs_6.a_2), STRUCT< key INT64 > (measuretable_complexexprs_6.a_1)) AS a_7
        FROM
          (
            SELECT
              MeasureTable_ComplexExprs.key AS a_1,
              MeasureTable_ComplexExprs.country AS a_2,
              MeasureTable_ComplexExprs.measure_sum_one AS a_3,
              MeasureTable_ComplexExprs.measure_string_agg AS a_4,
              MeasureTable_ComplexExprs.measure_bit_and AS a_5
            FROM
              MeasureTable_ComplexExprs
          ) AS measuretable_complexexprs_6
      ) AS projectscan_8
  ) AS aggregatescan_12;
==

SELECT
  AGG(measure_aggregation_in_in_expr),
FROM MeasureTable_ComplexExprs;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#10]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#10]
        +-input_scan=
        | +-TableScan(column_list=[MeasureTable_ComplexExprs.measure_aggregation_in_in_expr#9], table=MeasureTable_ComplexExprs, column_index_list=[8])
        +-aggregate_list=
          +-$agg1#10 :=
            +-AggregateFunctionCall(ZetaSQL:AGG(MEASURE<BOOL>) -> BOOL)
              +-ColumnRef(type=MEASURE<BOOL>, column=MeasureTable_ComplexExprs.measure_aggregation_in_in_expr#9)

[SQLBUILDER_OUTPUT]
SELECT
  AGG(measuretable_complexexprs_2.a_1) AS a_3
FROM
  (
    SELECT
      MeasureTable_ComplexExprs.measure_aggregation_in_in_expr AS a_1
    FROM
      MeasureTable_ComplexExprs
  ) AS measuretable_complexexprs_2;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#10 AS `$col1` [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#10]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#10]
        +-expr_list=
        | +-$agg1#10 :=
        |   +-SubqueryExpr
        |     +-type=BOOL
        |     +-subquery_type=IN
        |     +-in_expr=
        |     | +-ColumnRef(type=INT64, column=$aggregate.constituent_aggregate_1#14)
        |     +-subquery=
        |       +-ProjectScan
        |         +-column_list=[$expr_subquery.$col1#13]
        |         +-expr_list=
        |         | +-$col1#13 := Literal(type=INT64, value=1)
        |         +-input_scan=
        |           +-SingleRowScan
        +-input_scan=
          +-AggregateScan
            +-column_list=[$aggregate.constituent_aggregate_1#14]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=MeasureTable_ComplexExprs.[key#11, measure_aggregation_in_in_expr#9, struct_for_measures_from_table_MeasureTable_ComplexExprs#12]
            |   +-expr_list=
            |   | +-struct_for_measures_from_table_MeasureTable_ComplexExprs#12 :=
            |   |   +-MakeStruct
            |   |     +-type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>
            |   |     +-field_list=
            |   |       +-MakeStruct
            |   |       | +-type=STRUCT<key INT64>
            |   |       | +-field_list=
            |   |       |   +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#11)
            |   |       +-MakeStruct
            |   |         +-type=STRUCT<key INT64>
            |   |         +-field_list=
            |   |           +-ColumnRef(type=INT64, column=MeasureTable_ComplexExprs.key#11)
            |   +-input_scan=
            |     +-TableScan(column_list=MeasureTable_ComplexExprs.[key#11, measure_aggregation_in_in_expr#9], table=MeasureTable_ComplexExprs, column_index_list=[0, 8])
            +-aggregate_list=
              +-constituent_aggregate_1#14 :=
                +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
                  +-ColumnRef(type=INT64, column=$aggregate.$any_value_grain_lock_0#15)
                  +-group_by_list=
                  | +-grain_lock_key#16 :=
                  |   +-GetStructField
                  |     +-type=STRUCT<key INT64>
                  |     +-expr=
                  |     | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12)
                  |     +-field_idx=1
                  +-group_by_aggregate_list=
                    +-$any_value_grain_lock_0#15 :=
                      +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                        +-GetStructField
                          +-type=INT64
                          +-expr=
                          | +-GetStructField
                          |   +-type=STRUCT<key INT64>
                          |   +-expr=
                          |   | +-ColumnRef(type=STRUCT<referenced_columns STRUCT<key INT64>, key_columns STRUCT<key INT64>>, column=MeasureTable_ComplexExprs.struct_for_measures_from_table_MeasureTable_ComplexExprs#12)
                          |   +-field_idx=0
                          +-field_idx=0
[SQLBUILDER_OUTPUT]
SELECT
  ((aggregatescan_7.a_6) IN (
    SELECT
      1 AS a_9
  )) AS a_8
FROM
  (
    SELECT
      SUM(ANY_VALUE(projectscan_5.a_4.referenced_columns.key)
        GROUP BY projectscan_5.a_4.key_columns) AS a_6
    FROM
      (
        SELECT
          measuretable_complexexprs_3.a_1 AS a_1,
          measuretable_complexexprs_3.a_2 AS a_2,
          STRUCT< referenced_columns STRUCT< key INT64 >, key_columns STRUCT< key INT64 > > (STRUCT< key INT64 >
            (measuretable_complexexprs_3.a_1), STRUCT< key INT64 > (measuretable_complexexprs_3.a_1)) AS a_4
        FROM
          (
            SELECT
              MeasureTable_ComplexExprs.key AS a_1,
              MeasureTable_ComplexExprs.measure_aggregation_in_in_expr AS a_2
            FROM
              MeasureTable_ComplexExprs
          ) AS measuretable_complexexprs_3
      ) AS projectscan_5
  ) AS aggregatescan_7;
