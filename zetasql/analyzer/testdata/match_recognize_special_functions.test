[default language_features=MAXIMUM,+MATCH_RECOGNIZE,+TABLE_VALUED_FUNCTIONS,+NAMED_ARGUMENTS,+NULLS_FIRST_LAST_IN_ORDER_BY,+ANALYTIC_FUNCTIONS,+ORDER_BY_IN_AGGREGATE,+MULTILEVEL_AGGREGATION,+HAVING_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+WITH_EXPRESSION,+CHAINED_FUNCTION_CALLS]
[default show_sqlbuilder_output]
[default enabled_ast_rewrites=DEFAULTS,+MATCH_RECOGNIZE_FUNCTION]

# FIRST() and LAST() do not accept the ORDER BY modifier.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES {{first|last}}(value ORDER BY key) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: first
--
ERROR: FIRST does not support ORDER BY in arguments [at 4:24]
  MEASURES first(value ORDER BY key) AS m
                       ^
--
ALTERNATION GROUP: last
--
ERROR: LAST does not support ORDER BY in arguments [at 4:23]
  MEASURES last(value ORDER BY key) AS m
                      ^
==

# FIRST() and LAST() do not accept DISTINCT
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES {{first|last}}(DISTINCT value) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: first
--
ERROR: Aggregate function FIRST does not support DISTINCT in arguments [at 3:12]
  MEASURES first(DISTINCT value) AS m
           ^
--
ALTERNATION GROUP: last
--
ERROR: Aggregate function LAST does not support DISTINCT in arguments [at 3:12]
  MEASURES last(DISTINCT value) AS m
           ^
==

# FIRST() and LAST() do not accept LIMIT
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES {{first|last}}(value LIMIT 10) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--

ALTERNATION GROUP: first
--
ERROR: Aggregate function FIRST does not support LIMIT in arguments [at 3:24]
  MEASURES first(value LIMIT 10) AS m
                       ^
--
ALTERNATION GROUP: last
--
ERROR: Aggregate function LAST does not support LIMIT in arguments [at 3:23]
  MEASURES last(value LIMIT 10) AS m
                      ^
==

# FIRST() and LAST() do not accept HAVING MIN/MAX
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES {{first|last}}(value HAVING MIN key) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: first
--
ERROR: Aggregate function FIRST does not support HAVING in arguments [at 3:24]
  MEASURES first(value HAVING MIN key) AS m
                       ^
--
ALTERNATION GROUP: last
--
ERROR: Aggregate function LAST does not support HAVING in arguments [at 3:23]
  MEASURES last(value HAVING MIN key) AS m
                      ^
==

# FIRST() and LAST() do not accept OVER()
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES {{first|last}}(value) OVER(ORDER BY key) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: first
--
ERROR: Analytic function not allowed in MATCH_RECOGNIZE MEASURES clause [at 3:12]
  MEASURES first(value) OVER(ORDER BY key) AS m
           ^
--
ALTERNATION GROUP: last
--
ERROR: Analytic function not allowed in MATCH_RECOGNIZE MEASURES clause [at 3:12]
  MEASURES last(value) OVER(ORDER BY key) AS m
           ^
==

# FIRST() & LAST() functions are themselves aggregates.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES first(value) AS first, last(value) AS last
  PATTERN (a+)
  DEFINE
    A AS true
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.first#7 AS first [STRING]
| +-$match_recognize.last#9 AS last [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[first#7, last#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[first#7, last#9]
        +-expr_list=
        | +-first#7 := ColumnRef(type=STRING, column=$aggregate.$agg1#6)
        | +-last#9 := ColumnRef(type=STRING, column=$aggregate.$agg2#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |     | +-AggregateFunctionCall(ZetaSQL:first(STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg2#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:last(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-order_by_item_list=
            |           +-OrderByItem
            |             +-column_ref=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_7.a_4 AS first,
  matchrecognizescan_7.a_5 AS last
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      FIRST(keyvalue_3.a_2) AS a_4,
      LAST(keyvalue_3.a_2) AS a_5,
      MATCH_NUMBER() AS a_6
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       FIRST(keyvalue_3.a_2) AS a_4,
       LAST(keyvalue_3.a_2) AS a_5,
       MATCH_NUMBER() AS a_6
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_7
|> SELECT
     matchrecognizescan_7.a_4 AS first,
     matchrecognizescan_7.a_5 AS last;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$match_recognize.first#7 AS first [STRING]
| +-$match_recognize.last#9 AS last [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[first#7, last#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[first#7, last#9]
        +-expr_list=
        | +-first#7 := ColumnRef(type=STRING, column=$aggregate.$agg1#6)
        | +-last#9 := ColumnRef(type=STRING, column=$aggregate.$agg2#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-having_modifier=
            |     |     +-AggregateHavingModifier
            |     |       +-kind=MIN
            |     |       +-having_expr=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg2#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-having_modifier=
            |           +-AggregateHavingModifier
            |             +-kind=MAX
            |             +-having_expr=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_7.a_4 AS first,
  matchrecognizescan_7.a_5 AS last
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      ANY_VALUE(keyvalue_3.a_2
        HAVING MIN MATCH_ROW_NUMBER()) AS a_4,
      ANY_VALUE(keyvalue_3.a_2
        HAVING MAX MATCH_ROW_NUMBER()) AS a_5,
      MATCH_NUMBER() AS a_6
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       ANY_VALUE(keyvalue_3.a_2
         HAVING MIN MATCH_ROW_NUMBER()) AS a_4,
       ANY_VALUE(keyvalue_3.a_2
         HAVING MAX MATCH_ROW_NUMBER()) AS a_5,
       MATCH_NUMBER() AS a_6
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_7
|> SELECT
     matchrecognizescan_7.a_4 AS first,
     matchrecognizescan_7.a_5 AS last;
==

# FIRST() and LAST() with pattern variables.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES first(a.value) AS first, last(b.value) AS last
  PATTERN (a+b+)
  DEFINE
    A AS true,
    B AS true
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.first#7 AS first [STRING]
| +-$match_recognize.last#9 AS last [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[first#7, last#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[first#7, last#9]
        +-expr_list=
        | +-first#7 := ColumnRef(type=STRING, column=$aggregate.$agg1#6)
        | +-last#9 := ColumnRef(type=STRING, column=$aggregate.$agg2#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-Literal(type=BOOL, value=true)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternQuantification
            |     | +-operand=
            |     | | +-MatchRecognizePatternVariableRef(name="A")
            |     | +-lower_bound=
            |     | | +-Literal(type=INT64, value=1)
            |     | +-is_reluctant=FALSE
            |     +-MatchRecognizePatternQuantification
            |       +-operand=
            |       | +-MatchRecognizePatternVariableRef(name="B")
            |       +-lower_bound=
            |       | +-Literal(type=INT64, value=1)
            |       +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            | | +-pattern_variable_ref=
            | | | +-MatchRecognizePatternVariableRef(name="A")
            | | +-aggregate_list=
            | |   +-$agg1#6 :=
            | |     +-AggregateFunctionCall(ZetaSQL:first(STRING) -> STRING)
            | |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            | |       +-order_by_item_list=
            | |         +-OrderByItem
            | |           +-column_ref=
            | |             +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="B")
            |   +-aggregate_list=
            |     +-$agg2#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:last(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-order_by_item_list=
            |           +-OrderByItem
            |             +-column_ref=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_7.a_4 AS first,
  matchrecognizescan_7.a_5 AS last
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      FIRST(A.a_2) AS a_4,
      LAST(B.a_2) AS a_5,
      MATCH_NUMBER() AS a_6
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN (((A { 1, })  (B { 1, })))
    DEFINE
      A AS true,
      B AS true
  )
  AS matchrecognizescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       FIRST(A.a_2) AS a_4,
       LAST(B.a_2) AS a_5,
       MATCH_NUMBER() AS a_6
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (((A { 1, })  (B { 1, })))
     DEFINE
       A AS true,
       B AS true
   )
   AS matchrecognizescan_7
|> SELECT
     matchrecognizescan_7.a_4 AS first,
     matchrecognizescan_7.a_5 AS last;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$match_recognize.first#7 AS first [STRING]
| +-$match_recognize.last#9 AS last [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[first#7, last#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[first#7, last#9]
        +-expr_list=
        | +-first#7 := ColumnRef(type=STRING, column=$aggregate.$agg1#6)
        | +-last#9 := ColumnRef(type=STRING, column=$aggregate.$agg2#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            | | +-name="A"
            | | +-predicate=
            | |   +-Literal(type=BOOL, value=true)
            | +-MatchRecognizeVariableDefinition
            |   +-name="B"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternOperation
            |   +-op_type=CONCAT
            |   +-operand_list=
            |     +-MatchRecognizePatternQuantification
            |     | +-operand=
            |     | | +-MatchRecognizePatternVariableRef(name="A")
            |     | +-lower_bound=
            |     | | +-Literal(type=INT64, value=1)
            |     | +-is_reluctant=FALSE
            |     +-MatchRecognizePatternQuantification
            |       +-operand=
            |       | +-MatchRecognizePatternVariableRef(name="B")
            |       +-lower_bound=
            |       | +-Literal(type=INT64, value=1)
            |       +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            | | +-pattern_variable_ref=
            | | | +-MatchRecognizePatternVariableRef(name="A")
            | | +-aggregate_list=
            | |   +-$agg1#6 :=
            | |     +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            | |       +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            | |       +-having_modifier=
            | |         +-AggregateHavingModifier
            | |           +-kind=MIN
            | |           +-having_expr=
            | |             +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="B")
            |   +-aggregate_list=
            |     +-$agg2#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-having_modifier=
            |           +-AggregateHavingModifier
            |             +-kind=MAX
            |             +-having_expr=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_7.a_4 AS first,
  matchrecognizescan_7.a_5 AS last
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      ANY_VALUE(A.a_2
        HAVING MIN MATCH_ROW_NUMBER()) AS a_4,
      ANY_VALUE(B.a_2
        HAVING MAX MATCH_ROW_NUMBER()) AS a_5,
      MATCH_NUMBER() AS a_6
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN (((A { 1, })  (B { 1, })))
    DEFINE
      A AS true,
      B AS true
  )
  AS matchrecognizescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       ANY_VALUE(A.a_2
         HAVING MIN MATCH_ROW_NUMBER()) AS a_4,
       ANY_VALUE(B.a_2
         HAVING MAX MATCH_ROW_NUMBER()) AS a_5,
       MATCH_NUMBER() AS a_6
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (((A { 1, })  (B { 1, })))
     DEFINE
       A AS true,
       B AS true
   )
   AS matchrecognizescan_7
|> SELECT
     matchrecognizescan_7.a_4 AS first,
     matchrecognizescan_7.a_5 AS last;
==

# FIRST() and LAST() with pattern variables and multi-level aggregations.
SELECT * FROM SimpleTypes
MATCH_RECOGNIZE(
  {{PARTITION BY int64, int32|}}
  ORDER BY string
  MEASURES
    FIRST(int32 + SUM(int32 + int64 + MIN(double) GROUP BY int64) GROUP BY int32) AS f,
    FIRST(a.int32 + SUM(a.int32 + a.int64 + MIN(a.double) GROUP BY a.int64) GROUP BY a.int32) AS f_a,
    LAST(b.string GROUP BY b.string) AS l_b
  PATTERN (A B)
  DEFINE
    A AS true,
    B AS true
)
--
ERROR: FIRST Function  does not support GROUP BY modifiers [at 6:5]
    FIRST(int32 + SUM(int32 + int64 + MIN(double) GROUP BY int64) GROUP BY in...
    ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() used as aggregate args
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES first(match_number()) AS m1,
           any_value(match_number()) AS m2,
           first(match_row_number()) AS m3,
           any_value(match_row_number()) AS m4,
           first(classifier()) AS m5,
           any_value(classifier()) AS m6
  PATTERN (a+)
  DEFINE
    A AS true
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [INT64]
| +-$match_recognize.m2#9 AS m2 [INT64]
| +-$match_recognize.m3#11 AS m3 [INT64]
| +-$match_recognize.m4#13 AS m4 [INT64]
| +-$match_recognize.m5#15 AS m5 [STRING]
| +-$match_recognize.m6#17 AS m6 [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#13, m5#15, m6#17]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#13, m5#15, m6#17]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=INT64, column=$aggregate.$agg1#6)
        | +-m2#9 := ColumnRef(type=INT64, column=$aggregate.$agg2#8)
        | +-m3#11 := ColumnRef(type=INT64, column=$aggregate.$agg3#10)
        | +-m4#13 := ColumnRef(type=INT64, column=$aggregate.$agg4#12)
        | +-m5#15 := ColumnRef(type=STRING, column=$aggregate.$agg5#14)
        | +-m6#17 := ColumnRef(type=STRING, column=$aggregate.$agg6#16)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $aggregate.$agg3#10, $aggregate.$agg4#12, $aggregate.$agg5#14, $aggregate.$agg6#16, $match_recognize.$match_number#3, $match_recognize.$match_row_number#4, $match_recognize.$classifier#5]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |     | +-AggregateFunctionCall(ZetaSQL:first(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg2#8 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            |     +-$agg3#10 :=
            |     | +-AggregateFunctionCall(ZetaSQL:first(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg4#12 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg5#14 :=
            |     | +-AggregateFunctionCall(ZetaSQL:first(STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg6#16 :=
            |       +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_10.a_3 AS m1,
  matchrecognizescan_10.a_4 AS m2,
  matchrecognizescan_10.a_5 AS m3,
  matchrecognizescan_10.a_6 AS m4,
  matchrecognizescan_10.a_7 AS m5,
  matchrecognizescan_10.a_8 AS m6
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      FIRST(MATCH_NUMBER()) AS a_3,
      ANY_VALUE(MATCH_NUMBER()) AS a_4,
      FIRST(MATCH_ROW_NUMBER()) AS a_5,
      ANY_VALUE(MATCH_ROW_NUMBER()) AS a_6,
      FIRST(CLASSIFIER()) AS a_7,
      ANY_VALUE(CLASSIFIER()) AS a_8,
      MATCH_NUMBER() AS a_9
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_10;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       FIRST(MATCH_NUMBER()) AS a_3,
       ANY_VALUE(MATCH_NUMBER()) AS a_4,
       FIRST(MATCH_ROW_NUMBER()) AS a_5,
       ANY_VALUE(MATCH_ROW_NUMBER()) AS a_6,
       FIRST(CLASSIFIER()) AS a_7,
       ANY_VALUE(CLASSIFIER()) AS a_8,
       MATCH_NUMBER() AS a_9
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_10
|> SELECT
     matchrecognizescan_10.a_3 AS m1,
     matchrecognizescan_10.a_4 AS m2,
     matchrecognizescan_10.a_5 AS m3,
     matchrecognizescan_10.a_6 AS m4,
     matchrecognizescan_10.a_7 AS m5,
     matchrecognizescan_10.a_8 AS m6;

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [INT64]
| +-$match_recognize.m2#9 AS m2 [INT64]
| +-$match_recognize.m3#11 AS m3 [INT64]
| +-$match_recognize.m4#13 AS m4 [INT64]
| +-$match_recognize.m5#15 AS m5 [STRING]
| +-$match_recognize.m6#17 AS m6 [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#13, m5#15, m6#17]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#13, m5#15, m6#17]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=INT64, column=$aggregate.$agg1#6)
        | +-m2#9 := ColumnRef(type=INT64, column=$aggregate.$agg2#8)
        | +-m3#11 := ColumnRef(type=INT64, column=$aggregate.$agg3#10)
        | +-m4#13 := ColumnRef(type=INT64, column=$aggregate.$agg4#12)
        | +-m5#15 := ColumnRef(type=STRING, column=$aggregate.$agg5#14)
        | +-m6#17 := ColumnRef(type=STRING, column=$aggregate.$agg6#16)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $aggregate.$agg3#10, $aggregate.$agg4#12, $aggregate.$agg5#14, $aggregate.$agg6#16, $match_recognize.$match_number#3, $match_recognize.$match_row_number#4, $match_recognize.$classifier#5]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            |     |   +-having_modifier=
            |     |     +-AggregateHavingModifier
            |     |       +-kind=MIN
            |     |       +-having_expr=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg2#8 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            |     +-$agg3#10 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     |   +-having_modifier=
            |     |     +-AggregateHavingModifier
            |     |       +-kind=MIN
            |     |       +-having_expr=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg4#12 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
            |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg5#14 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
            |     |   +-having_modifier=
            |     |     +-AggregateHavingModifier
            |     |       +-kind=MIN
            |     |       +-having_expr=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg6#16 :=
            |       +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_10.a_3 AS m1,
  matchrecognizescan_10.a_4 AS m2,
  matchrecognizescan_10.a_5 AS m3,
  matchrecognizescan_10.a_6 AS m4,
  matchrecognizescan_10.a_7 AS m5,
  matchrecognizescan_10.a_8 AS m6
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      ANY_VALUE(MATCH_NUMBER()
        HAVING MIN MATCH_ROW_NUMBER()) AS a_3,
      ANY_VALUE(MATCH_NUMBER()) AS a_4,
      ANY_VALUE(MATCH_ROW_NUMBER()
        HAVING MIN MATCH_ROW_NUMBER()) AS a_5,
      ANY_VALUE(MATCH_ROW_NUMBER()) AS a_6,
      ANY_VALUE(CLASSIFIER()
        HAVING MIN MATCH_ROW_NUMBER()) AS a_7,
      ANY_VALUE(CLASSIFIER()) AS a_8,
      MATCH_NUMBER() AS a_9
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_10;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       ANY_VALUE(MATCH_NUMBER()
         HAVING MIN MATCH_ROW_NUMBER()) AS a_3,
       ANY_VALUE(MATCH_NUMBER()) AS a_4,
       ANY_VALUE(MATCH_ROW_NUMBER()
         HAVING MIN MATCH_ROW_NUMBER()) AS a_5,
       ANY_VALUE(MATCH_ROW_NUMBER()) AS a_6,
       ANY_VALUE(CLASSIFIER()
         HAVING MIN MATCH_ROW_NUMBER()) AS a_7,
       ANY_VALUE(CLASSIFIER()) AS a_8,
       MATCH_NUMBER() AS a_9
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_10
|> SELECT
     matchrecognizescan_10.a_3 AS m1,
     matchrecognizescan_10.a_4 AS m2,
     matchrecognizescan_10.a_5 AS m3,
     matchrecognizescan_10.a_6 AS m4,
     matchrecognizescan_10.a_7 AS m5,
     matchrecognizescan_10.a_8 AS m6;
==

# FIRST and LAST used as chained calls.
# From SQLBuilder output, we can see they are interpreted the same as
# the corresponding non-chained calls.
[enabled_ast_rewrites=DEFAULTS]
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES (value).first() AS m1,
           (A.value).last() AS m2,
           match_number().first() AS m3,
           classifier().any_value() AS m4
  PATTERN (a+)
  DEFINE
    A AS true
)
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [STRING]
| +-$match_recognize.m2#9 AS m2 [STRING]
| +-$match_recognize.m3#11 AS m3 [INT64]
| +-$match_recognize.m4#13 AS m4 [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#13]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#13]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=STRING, column=$aggregate.$agg1#6)
        | +-m2#9 := ColumnRef(type=STRING, column=$aggregate.$agg2#8)
        | +-m3#11 := ColumnRef(type=INT64, column=$aggregate.$agg3#10)
        | +-m4#13 := ColumnRef(type=STRING, column=$aggregate.$agg4#12)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg3#10, $aggregate.$agg4#12, $aggregate.$agg2#8, $match_recognize.$match_number#3, $match_recognize.$match_row_number#4, $match_recognize.$classifier#5]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            | | +-aggregate_list=
            | |   +-$agg1#6 :=
            | |   | +-AggregateFunctionCall(ZetaSQL:first(STRING) -> STRING)
            | |   |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            | |   |   +-order_by_item_list=
            | |   |     +-OrderByItem
            | |   |       +-column_ref=
            | |   |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            | |   +-$agg3#10 :=
            | |   | +-AggregateFunctionCall(ZetaSQL:first(INT64) -> INT64)
            | |   |   +-ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            | |   |   +-order_by_item_list=
            | |   |     +-OrderByItem
            | |   |       +-column_ref=
            | |   |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            | |   +-$agg4#12 :=
            | |     +-AggregateFunctionCall(ZetaSQL:any_value(STRING) -> STRING)
            | |       +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
            | +-MeasureGroup
            |   +-pattern_variable_ref=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-aggregate_list=
            |     +-$agg2#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:last(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-order_by_item_list=
            |           +-OrderByItem
            |             +-column_ref=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_9.a_4 AS m1,
  matchrecognizescan_9.a_7 AS m2,
  matchrecognizescan_9.a_5 AS m3,
  matchrecognizescan_9.a_6 AS m4
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      FIRST(keyvalue_3.a_2) AS a_4,
      FIRST(MATCH_NUMBER()) AS a_5,
      ANY_VALUE(CLASSIFIER()) AS a_6,
      LAST(A.a_2) AS a_7,
      MATCH_NUMBER() AS a_8
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_9;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       FIRST(keyvalue_3.a_2) AS a_4,
       FIRST(MATCH_NUMBER()) AS a_5,
       ANY_VALUE(CLASSIFIER()) AS a_6,
       LAST(A.a_2) AS a_7,
       MATCH_NUMBER() AS a_8
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_9
|> SELECT
     matchrecognizescan_9.a_4 AS m1,
     matchrecognizescan_9.a_7 AS m2,
     matchrecognizescan_9.a_5 AS m3,
     matchrecognizescan_9.a_6 AS m4;
==

# Only MATCH_NUMBER() can be used outside of aggregates, directly in the
# MEASURES clause. MATCH_ROW_NUMBER() and CLASSIFIER() are not the same for all
# rows of the match.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES {{match_number|match_row_number|classifier}}() AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: match_number
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m#6 AS m [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m#6]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m#6]
        +-expr_list=
        | +-m#6 := ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$match_recognize.$match_number#3]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_4.a_3 AS m
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      MATCH_NUMBER() AS a_3
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_4;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       MATCH_NUMBER() AS a_3
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_4
|> SELECT
     matchrecognizescan_4.a_3 AS m;
--
ALTERNATION GROUP: match_row_number
--
ERROR: Function MATCH_ROW_NUMBER must be aggregated [at 3:12]
  MEASURES match_row_number() AS m
           ^
--
ALTERNATION GROUP: classifier
--
ERROR: Function CLASSIFIER must be aggregated [at 3:12]
  MEASURES classifier() AS m
           ^
==

# None of these functions can be used outside of MATCH_RECOGNIZE clause
select {{first(key)|last(key)|match_number()|match_row_number()|classifier()}}
FROM KeyValue
--
ALTERNATION GROUP: first(key)
--
ERROR: aggregate function FIRST can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select first(key)
       ^
--
ALTERNATION GROUP: last(key)
--
ERROR: aggregate function LAST can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select last(key)
       ^
--
ALTERNATION GROUP: match_number()
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select match_number()
       ^
--
ALTERNATION GROUP: match_row_number()
--
ERROR: function MATCH_ROW_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select match_row_number()
       ^
--
ALTERNATION GROUP: classifier()
--
ERROR: function CLASSIFIER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select classifier()
       ^
==

# Ensure state is cleared after MR
select {{first|last}}(m)
FROM KeyValue MATCH_RECOGNIZE(
  ORDER BY Key
  MEASURES 1 AS m
  PATTERN (a)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: first
--
ERROR: aggregate function FIRST can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select first(m)
       ^
--
ALTERNATION GROUP: last
--
ERROR: aggregate function LAST can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select last(m)
       ^
==

# Ensure state is cleared after MR
select {{match_number|match_row_number|classifier}}() AS m
FROM KeyValue MATCH_RECOGNIZE(
  ORDER BY Key
  MEASURES 1 AS m
  PATTERN (a)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: match_number
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select match_number() AS m
       ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: function MATCH_ROW_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select match_row_number() AS m
       ^
--
ALTERNATION GROUP: classifier
--
ERROR: function CLASSIFIER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 1:8]
select classifier() AS m
       ^
==

# Ensure state is cleared after MR, and that we can have multiple independent
# MATCH_RECOGNIZE clauses in the same query.
select *
FROM
  KeyValue MATCH_RECOGNIZE(
    ORDER BY Key
    MEASURES 1 AS m1
    PATTERN (a)
    DEFINE
      A AS true
  ) AS t1
CROSS JOIN
  KeyValue MATCH_RECOGNIZE(
    ORDER BY value
    MEASURES 2 AS m2
    PATTERN (a)
    DEFINE
      A AS true
  ) AS t2
--

QueryStmt
+-output_column_list=
| +-$match_recognize.m1#6 AS m1 [INT64]
| +-$match_recognize.m2#12 AS m2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[m1#6, m2#12]
    +-input_scan=
      +-JoinScan
        +-column_list=$match_recognize.[m1#6, m2#12]
        +-left_scan=
        | +-ProjectScan
        |   +-column_list=[$match_recognize.m1#6]
        |   +-expr_list=
        |   | +-m1#6 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-MatchRecognizeScan
        |       +-input_scan=
        |       | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
        |       +-analytic_function_group_list=
        |       | +-AnalyticFunctionGroup
        |       |   +-order_by=
        |       |     +-WindowOrdering
        |       |       +-order_by_item_list=
        |       |         +-OrderByItem
        |       |           +-column_ref=
        |       |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |       +-pattern_variable_definition_list=
        |       | +-MatchRecognizeVariableDefinition
        |       |   +-name="A"
        |       |   +-predicate=
        |       |     +-Literal(type=BOOL, value=true)
        |       +-pattern=
        |       | +-MatchRecognizePatternVariableRef(name="A")
        |       +-after_match_skip_mode=END_OF_MATCH
        |       +-match_number_column=$match_recognize.$match_number#3
        |       +-match_row_number_column=$match_recognize.$match_row_number#4
        |       +-classifier_column=$match_recognize.$classifier#5
        +-right_scan=
          +-ProjectScan
            +-column_list=[$match_recognize.m2#12]
            +-expr_list=
            | +-m2#12 := Literal(type=INT64, value=2)
            +-input_scan=
              +-MatchRecognizeScan
                +-input_scan=
                | +-TableScan(column_list=[KeyValue.Value#8], table=KeyValue, column_index_list=[1])
                +-analytic_function_group_list=
                | +-AnalyticFunctionGroup
                |   +-order_by=
                |     +-WindowOrdering
                |       +-order_by_item_list=
                |         +-OrderByItem
                |           +-column_ref=
                |             +-ColumnRef(type=STRING, column=KeyValue.Value#8)
                +-pattern_variable_definition_list=
                | +-MatchRecognizeVariableDefinition
                |   +-name="A"
                |   +-predicate=
                |     +-Literal(type=BOOL, value=true)
                +-pattern=
                | +-MatchRecognizePatternVariableRef(name="A")
                +-after_match_skip_mode=END_OF_MATCH
                +-match_number_column=$match_recognize.$match_number#9
                +-match_row_number_column=$match_recognize.$match_row_number#10
                +-classifier_column=$match_recognize.$classifier#11

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_6.a_5 AS m1,
  projectscan_12.a_11 AS m2
FROM
  (
    SELECT
      1 AS a_5
    FROM
      (
        SELECT
          KeyValue.Key AS a_1
        FROM
          KeyValue
      ) AS keyvalue_2 MATCH_RECOGNIZE(
        ORDER BY keyvalue_2.a_1
        MEASURES
          MATCH_NUMBER() AS a_3
        AFTER MATCH SKIP PAST LAST ROW
        PATTERN (A)
        DEFINE
          A AS true
      )
      AS matchrecognizescan_4
  ) AS projectscan_6
  CROSS JOIN
  (
    SELECT
      2 AS a_11
    FROM
      (
        SELECT
          KeyValue.Value AS a_7
        FROM
          KeyValue
      ) AS keyvalue_8 MATCH_RECOGNIZE(
        ORDER BY keyvalue_8.a_7
        MEASURES
          MATCH_NUMBER() AS a_9
        AFTER MATCH SKIP PAST LAST ROW
        PATTERN (A)
        DEFINE
          A AS true
      )
      AS matchrecognizescan_10
  ) AS projectscan_12;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       MATCH_NUMBER() AS a_3
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN (A)
     DEFINE
       A AS true
   )
   AS matchrecognizescan_4
|> SELECT
     1 AS a_5
|> AS projectscan_6
|> CROSS JOIN
   (
     FROM
       KeyValue
     |> SELECT
          KeyValue.Value AS a_7
     |> AS keyvalue_8
     |> MATCH_RECOGNIZE(
          ORDER BY keyvalue_8.a_7
          MEASURES
            MATCH_NUMBER() AS a_9
          AFTER MATCH SKIP PAST LAST ROW
          PATTERN (A)
          DEFINE
            A AS true
        )
        AS matchrecognizescan_10
     |> SELECT
          2 AS a_11
     |> AS projectscan_12
   )
|> SELECT
     projectscan_6.a_5 AS m1,
     projectscan_12.a_11 AS m2;
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() cannot be used in any
# other clause other than MEASURES
select * from KeyValue MATCH_RECOGNIZE(
  PARTITION BY {{match_number|match_row_number|classifier}}()
  ORDER BY key
  MEASURES 1 AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: match_number
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:16]
  PARTITION BY match_number()
               ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: function MATCH_ROW_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:16]
  PARTITION BY match_row_number()
               ^
--
ALTERNATION GROUP: classifier
--
ERROR: function CLASSIFIER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:16]
  PARTITION BY classifier()
               ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() cannot be used in any
# other clause other than MEASURES
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY {{match_number|match_row_number|classifier}}()
  MEASURES 1 AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: match_number
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:12]
  ORDER BY match_number()
           ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: function MATCH_ROW_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:12]
  ORDER BY match_row_number()
           ^
--
ALTERNATION GROUP: classifier
--
ERROR: function CLASSIFIER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:12]
  ORDER BY classifier()
           ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() called from a subquery,
# aggregated.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES MIN((SELECT {{match_number|match_row_number|classifier}}())) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--

ALTERNATION GROUP: match_number
--
ERROR: MATCH_NUMBER must be called directly from the MEASURES clause, not from a subquery [at 3:24]
  MEASURES MIN((SELECT match_number())) AS m
                       ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: MATCH_ROW_NUMBER must be called directly from the MEASURES clause, not from a subquery [at 3:24]
  MEASURES MIN((SELECT match_row_number())) AS m
                       ^
--
ALTERNATION GROUP: classifier
--
ERROR: CLASSIFIER must be called directly from the MEASURES clause, not from a subquery [at 3:24]
  MEASURES MIN((SELECT classifier())) AS m
                       ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() called from a subquery,
# unaggregated.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES (SELECT {{match_number|match_row_number|classifier}}()) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--

ALTERNATION GROUP: match_number
--
ERROR: MATCH_NUMBER must be called directly from the MEASURES clause, not from a subquery [at 3:20]
  MEASURES (SELECT match_number()) AS m
                   ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: MATCH_ROW_NUMBER must be called directly from the MEASURES clause, not from a subquery [at 3:20]
  MEASURES (SELECT match_row_number()) AS m
                   ^
--
ALTERNATION GROUP: classifier
--
ERROR: CLASSIFIER must be called directly from the MEASURES clause, not from a subquery [at 3:20]
  MEASURES (SELECT classifier()) AS m
                   ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() in the input table itself
select * from
  (SELECT *, {{match_number|match_row_number|classifier}}() AS key FROM KeyValue)
  MATCH_RECOGNIZE(
    ORDER BY key
    MEASURES 1 AS m
    PATTERN (a+)
    DEFINE
      A AS true
  )
--

ALTERNATION GROUP: match_number
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:14]
  (SELECT *, match_number() AS key FROM KeyValue)
             ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: function MATCH_ROW_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:14]
  (SELECT *, match_row_number() AS key FROM KeyValue)
             ^
--
ALTERNATION GROUP: classifier
--
ERROR: function CLASSIFIER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 2:14]
  (SELECT *, classifier() AS key FROM KeyValue)
             ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() cannot be used in any
# other clause other than MEASURES
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES 1 AS m
  PATTERN (a+)
  DEFINE
    A AS {{match_number|match_row_number|classifier}}() IS NOT NULL
)
--
ALTERNATION GROUP: match_number
--
ERROR: function MATCH_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 6:10]
    A AS match_number() IS NOT NULL
         ^
--
ALTERNATION GROUP: match_row_number
--
ERROR: function MATCH_ROW_NUMBER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 6:10]
    A AS match_row_number() IS NOT NULL
         ^
--
ALTERNATION GROUP: classifier
--
ERROR: function CLASSIFIER can only be used inside a MATCH_RECOGNIZE's MEASURES clause [at 6:10]
    A AS classifier() IS NOT NULL
         ^
==

# MATCH_NUMBER(), MATCH_ROW_NUMBER() and CLASSIFIER() in a nested
# MATCH_RECOGNIZE clause
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES
    (
      select m1 + m2 + m3 + m4 + m5 from KeyValue MATCH_RECOGNIZE(
        ORDER BY key
        MEASURES
          FIRST(key) AS m1
          , LAST(key) AS m2
          , match_number() AS m3
          , ANY_VALUE(match_row_number()) AS m4
          , ANY_VALUE(length(classifier())) AS m5
        PATTERN (a+)
        DEFINE
          A AS true
      )
    ) AS m
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ERROR: MATCH_RECOGNIZE clause cannot be nested inside another MATCH_RECOGNIZE clause [at 5:51]
      select m1 + m2 + m3 + m4 + m5 from KeyValue MATCH_RECOGNIZE(
                                                  ^
==

# Nesting inside a function is fine, even if called/inlined from another MR
CREATE FUNCTION udf() AS (
  (
    select m1 + m2 + m3 + m4 + m5 from KeyValue MATCH_RECOGNIZE(
        ORDER BY key
        MEASURES
          FIRST(key) AS m1
          , LAST(key) AS m2
          , match_number() AS m3
          , ANY_VALUE(match_row_number()) AS m4
          , ANY_VALUE(length(classifier())) AS m5
        PATTERN (a+)
        DEFINE
          A AS true
      )
  )
)
--
CreateFunctionStmt
+-name_path=udf
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="(\n    select m1 + m2 + m3 + m4 + m5 from KeyValue MATCH_RECOGNIZE(\n        ORDER BY key\n        MEASURES\n          FIRST(key) AS m1\n          , LAST(key) AS m2\n          , match_number() AS m3\n          , ANY_VALUE(match_row_number()) AS m4\n          , ANY_VALUE(length(classifier())) AS m5\n        PATTERN (a+)\n        DEFINE\n          A AS true\n      )\n  )"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#15]
        +-expr_list=
        | +-$col1#15 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     | | | +-ColumnRef(type=INT64, column=$match_recognize.m1#7)
        |     | | | +-ColumnRef(type=INT64, column=$match_recognize.m2#9)
        |     | | +-ColumnRef(type=INT64, column=$match_recognize.m3#10)
        |     | +-ColumnRef(type=INT64, column=$match_recognize.m4#12)
        |     +-ColumnRef(type=INT64, column=$match_recognize.m5#14)
        +-input_scan=
          +-ProjectScan
            +-column_list=$match_recognize.[m1#7, m2#9, m3#10, m4#12, m5#14]
            +-expr_list=
            | +-m1#7 := ColumnRef(type=INT64, column=$aggregate.$agg1#6)
            | +-m2#9 := ColumnRef(type=INT64, column=$aggregate.$agg2#8)
            | +-m3#10 := ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            | +-m4#12 := ColumnRef(type=INT64, column=$aggregate.$agg3#11)
            | +-m5#14 := ColumnRef(type=INT64, column=$aggregate.$agg4#13)
            +-input_scan=
              +-MatchRecognizeScan
                +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $aggregate.$agg3#11, $aggregate.$agg4#13, $match_recognize.$match_number#3, $match_recognize.$match_row_number#4, $match_recognize.$classifier#5]
                +-input_scan=
                | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
                +-analytic_function_group_list=
                | +-AnalyticFunctionGroup
                |   +-order_by=
                |     +-WindowOrdering
                |       +-order_by_item_list=
                |         +-OrderByItem
                |           +-column_ref=
                |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                +-pattern_variable_definition_list=
                | +-MatchRecognizeVariableDefinition
                |   +-name="A"
                |   +-predicate=
                |     +-Literal(type=BOOL, value=true)
                +-pattern=
                | +-MatchRecognizePatternQuantification
                |   +-operand=
                |   | +-MatchRecognizePatternVariableRef(name="A")
                |   +-lower_bound=
                |   | +-Literal(type=INT64, value=1)
                |   +-is_reluctant=FALSE
                +-after_match_skip_mode=END_OF_MATCH
                +-measure_group_list=
                | +-MeasureGroup
                |   +-aggregate_list=
                |     +-$agg1#6 :=
                |     | +-AggregateFunctionCall(ZetaSQL:first(INT64) -> INT64)
                |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                |     |   +-order_by_item_list=
                |     |     +-OrderByItem
                |     |       +-column_ref=
                |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
                |     +-$agg2#8 :=
                |     | +-AggregateFunctionCall(ZetaSQL:last(INT64) -> INT64)
                |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                |     |   +-order_by_item_list=
                |     |     +-OrderByItem
                |     |       +-column_ref=
                |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
                |     +-$agg3#11 :=
                |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
                |     +-$agg4#13 :=
                |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |         +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
                |           +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
                +-match_number_column=$match_recognize.$match_number#3
                +-match_row_number_column=$match_recognize.$match_row_number#4
                +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE FUNCTION udf()
RETURNS INT64 AS (
  (
    SELECT
      ((((projectscan_14.a_9) + (projectscan_14.a_10)) + (projectscan_14.a_11)) + (projectscan_14.a_12)) +
      (projectscan_14.a_13) AS a_15
    FROM
      (
        SELECT
          matchrecognizescan_8.a_3 AS a_9,
          matchrecognizescan_8.a_4 AS a_10,
          matchrecognizescan_8.a_7 AS a_11,
          matchrecognizescan_8.a_5 AS a_12,
          matchrecognizescan_8.a_6 AS a_13
        FROM
          (
            SELECT
              KeyValue.Key AS a_1
            FROM
              KeyValue
          ) AS keyvalue_2 MATCH_RECOGNIZE(
            ORDER BY keyvalue_2.a_1
            MEASURES
              FIRST(keyvalue_2.a_1) AS a_3,
              LAST(keyvalue_2.a_1) AS a_4,
              ANY_VALUE(MATCH_ROW_NUMBER()) AS a_5,
              ANY_VALUE(LENGTH(CLASSIFIER())) AS a_6,
              MATCH_NUMBER() AS a_7
            AFTER MATCH SKIP PAST LAST ROW
            PATTERN ((A { 1, }))
            DEFINE
              A AS true
          )
          AS matchrecognizescan_8
      ) AS projectscan_14
  )
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE FUNCTION udf()
RETURNS INT64 AS (
  (
    FROM
      KeyValue
    |> SELECT
         KeyValue.Key AS a_1
    |> AS keyvalue_2
    |> MATCH_RECOGNIZE(
         ORDER BY keyvalue_2.a_1
         MEASURES
           FIRST(keyvalue_2.a_1) AS a_3,
           LAST(keyvalue_2.a_1) AS a_4,
           ANY_VALUE(MATCH_ROW_NUMBER()) AS a_5,
           ANY_VALUE(LENGTH(CLASSIFIER())) AS a_6,
           MATCH_NUMBER() AS a_7
         AFTER MATCH SKIP PAST LAST ROW
         PATTERN ((A { 1, }))
         DEFINE
           A AS true
       )
       AS matchrecognizescan_8
    |> SELECT
         matchrecognizescan_8.a_3 AS a_9,
         matchrecognizescan_8.a_4 AS a_10,
         matchrecognizescan_8.a_7 AS a_11,
         matchrecognizescan_8.a_5 AS a_12,
         matchrecognizescan_8.a_6 AS a_13
    |> AS projectscan_14
    |> SELECT
         ((((projectscan_14.a_9) + (projectscan_14.a_10)) + (projectscan_14.a_11)) + (projectscan_14.a_12)) +
         (projectscan_14.a_13) AS a_15
  )
);

[REWRITTEN AST]
CreateFunctionStmt
+-name_path=udf
+-return_type=INT64
+-signature=() -> INT64
+-language="SQL"
+-code="(\n    select m1 + m2 + m3 + m4 + m5 from KeyValue MATCH_RECOGNIZE(\n        ORDER BY key\n        MEASURES\n          FIRST(key) AS m1\n          , LAST(key) AS m2\n          , match_number() AS m3\n          , ANY_VALUE(match_row_number()) AS m4\n          , ANY_VALUE(length(classifier())) AS m5\n        PATTERN (a+)\n        DEFINE\n          A AS true\n      )\n  )"
+-function_expression=
  +-SubqueryExpr
    +-type=INT64
    +-subquery_type=SCALAR
    +-subquery=
      +-ProjectScan
        +-column_list=[$expr_subquery.$col1#15]
        +-expr_list=
        | +-$col1#15 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     | | | +-ColumnRef(type=INT64, column=$match_recognize.m1#7)
        |     | | | +-ColumnRef(type=INT64, column=$match_recognize.m2#9)
        |     | | +-ColumnRef(type=INT64, column=$match_recognize.m3#10)
        |     | +-ColumnRef(type=INT64, column=$match_recognize.m4#12)
        |     +-ColumnRef(type=INT64, column=$match_recognize.m5#14)
        +-input_scan=
          +-ProjectScan
            +-column_list=$match_recognize.[m1#7, m2#9, m3#10, m4#12, m5#14]
            +-expr_list=
            | +-m1#7 := ColumnRef(type=INT64, column=$aggregate.$agg1#6)
            | +-m2#9 := ColumnRef(type=INT64, column=$aggregate.$agg2#8)
            | +-m3#10 := ColumnRef(type=INT64, column=$match_recognize.$match_number#3)
            | +-m4#12 := ColumnRef(type=INT64, column=$aggregate.$agg3#11)
            | +-m5#14 := ColumnRef(type=INT64, column=$aggregate.$agg4#13)
            +-input_scan=
              +-MatchRecognizeScan
                +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $aggregate.$agg3#11, $aggregate.$agg4#13, $match_recognize.$match_number#3, $match_recognize.$match_row_number#4, $match_recognize.$classifier#5]
                +-input_scan=
                | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
                +-analytic_function_group_list=
                | +-AnalyticFunctionGroup
                |   +-order_by=
                |     +-WindowOrdering
                |       +-order_by_item_list=
                |         +-OrderByItem
                |           +-column_ref=
                |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                +-pattern_variable_definition_list=
                | +-MatchRecognizeVariableDefinition
                |   +-name="A"
                |   +-predicate=
                |     +-Literal(type=BOOL, value=true)
                +-pattern=
                | +-MatchRecognizePatternQuantification
                |   +-operand=
                |   | +-MatchRecognizePatternVariableRef(name="A")
                |   +-lower_bound=
                |   | +-Literal(type=INT64, value=1)
                |   +-is_reluctant=FALSE
                +-after_match_skip_mode=END_OF_MATCH
                +-measure_group_list=
                | +-MeasureGroup
                |   +-aggregate_list=
                |     +-$agg1#6 :=
                |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                |     |   +-having_modifier=
                |     |     +-AggregateHavingModifier
                |     |       +-kind=MIN
                |     |       +-having_expr=
                |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
                |     +-$agg2#8 :=
                |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                |     |   +-having_modifier=
                |     |     +-AggregateHavingModifier
                |     |       +-kind=MAX
                |     |       +-having_expr=
                |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
                |     +-$agg3#11 :=
                |     | +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |     |   +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
                |     +-$agg4#13 :=
                |       +-AggregateFunctionCall(ZetaSQL:any_value(INT64) -> INT64)
                |         +-FunctionCall(ZetaSQL:length(STRING) -> INT64)
                |           +-ColumnRef(type=STRING, column=$match_recognize.$classifier#5)
                +-match_number_column=$match_recognize.$match_number#3
                +-match_row_number_column=$match_recognize.$match_row_number#4
                +-classifier_column=$match_recognize.$classifier#5
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
CREATE FUNCTION udf()
RETURNS INT64 AS (
  (
    SELECT
      ((((projectscan_14.a_9) + (projectscan_14.a_10)) + (projectscan_14.a_11)) + (projectscan_14.a_12)) +
      (projectscan_14.a_13) AS a_15
    FROM
      (
        SELECT
          matchrecognizescan_8.a_3 AS a_9,
          matchrecognizescan_8.a_4 AS a_10,
          matchrecognizescan_8.a_7 AS a_11,
          matchrecognizescan_8.a_5 AS a_12,
          matchrecognizescan_8.a_6 AS a_13
        FROM
          (
            SELECT
              KeyValue.Key AS a_1
            FROM
              KeyValue
          ) AS keyvalue_2 MATCH_RECOGNIZE(
            ORDER BY keyvalue_2.a_1
            MEASURES
              ANY_VALUE(keyvalue_2.a_1
                HAVING MIN MATCH_ROW_NUMBER()) AS a_3,
              ANY_VALUE(keyvalue_2.a_1
                HAVING MAX MATCH_ROW_NUMBER()) AS a_4,
              ANY_VALUE(MATCH_ROW_NUMBER()) AS a_5,
              ANY_VALUE(LENGTH(CLASSIFIER())) AS a_6,
              MATCH_NUMBER() AS a_7
            AFTER MATCH SKIP PAST LAST ROW
            PATTERN ((A { 1, }))
            DEFINE
              A AS true
          )
          AS matchrecognizescan_8
      ) AS projectscan_14
  )
);

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
CREATE FUNCTION udf()
RETURNS INT64 AS (
  (
    FROM
      KeyValue
    |> SELECT
         KeyValue.Key AS a_1
    |> AS keyvalue_2
    |> MATCH_RECOGNIZE(
         ORDER BY keyvalue_2.a_1
         MEASURES
           ANY_VALUE(keyvalue_2.a_1
             HAVING MIN MATCH_ROW_NUMBER()) AS a_3,
           ANY_VALUE(keyvalue_2.a_1
             HAVING MAX MATCH_ROW_NUMBER()) AS a_4,
           ANY_VALUE(MATCH_ROW_NUMBER()) AS a_5,
           ANY_VALUE(LENGTH(CLASSIFIER())) AS a_6,
           MATCH_NUMBER() AS a_7
         AFTER MATCH SKIP PAST LAST ROW
         PATTERN ((A { 1, }))
         DEFINE
           A AS true
       )
       AS matchrecognizescan_8
    |> SELECT
         matchrecognizescan_8.a_3 AS a_9,
         matchrecognizescan_8.a_4 AS a_10,
         matchrecognizescan_8.a_7 AS a_11,
         matchrecognizescan_8.a_5 AS a_12,
         matchrecognizescan_8.a_6 AS a_13
    |> AS projectscan_14
    |> SELECT
         ((((projectscan_14.a_9) + (projectscan_14.a_10)) + (projectscan_14.a_11)) + (projectscan_14.a_12)) +
         (projectscan_14.a_13) AS a_15
  )
);
==

# Aggregations in MEASURES are implicitly ordered by MATCH_ROW_NUMBER() if
# they support ordering.
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES
    ARRAY_AGG(key) AS m1,                               # Implicit ordering
    ARRAY_AGG(key ORDER BY match_row_number()) AS m2,   # Explicitly set to row order
    ARRAY_AGG(key ORDER BY value) AS m3,                # Explicitly set to something else,

    # Same, but nested in a larger agg:
    ANY_VALUE(
      ARRAY_AGG(key)
      GROUP BY value) AS m4,                            # Implicit ordering
    ANY_VALUE(
      ARRAY_AGG(key ORDER BY match_row_number())        # Explicitly set to row order
      GROUP BY value) AS m5,
    ANY_VALUE(
      ARRAY_AGG(key ORDER BY rand())
      GROUP BY value) AS m6,                            # Explicitly set to something else,

    # Other modifiers on aggs:
    # 1. GROUP BY
    STRING_AGG(min(value), "-" GROUP BY key) AS m7,                            # Implicit ordering

    # 2. HAVING
    STRING_AGG(value, "-" HAVING MIN key) AS m10,                              # Implicit ordering
    STRING_AGG(value, "-" HAVING MIN key ORDER BY match_row_number()) AS m11,  # Explicitly set to row order
    STRING_AGG(value, "-" HAVING MIN key ORDER BY value) AS m12,               # Explicitly set to something else,

    # 2. LIMIT
    STRING_AGG(value, "-" LIMIT 3) AS m13,                              # Implicit ordering
    STRING_AGG(value, "-" ORDER BY match_row_number() LIMIT 3) AS m14,  # Explicitly set to row order
    STRING_AGG(value, "-" ORDER BY value LIMIT 3) AS m15                # Explicitly set to something else,


  PATTERN (a+)
  DEFINE
    A AS true
)
--

QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [ARRAY<INT64>]
| +-$match_recognize.m2#9 AS m2 [ARRAY<INT64>]
| +-$match_recognize.m3#11 AS m3 [ARRAY<INT64>]
| +-$match_recognize.m4#15 AS m4 [ARRAY<INT64>]
| +-$match_recognize.m5#19 AS m5 [ARRAY<INT64>]
| +-$match_recognize.m6#24 AS m6 [ARRAY<INT64>]
| +-$match_recognize.m7#28 AS m7 [STRING]
| +-$match_recognize.m10#30 AS m10 [STRING]
| +-$match_recognize.m11#32 AS m11 [STRING]
| +-$match_recognize.m12#34 AS m12 [STRING]
| +-$match_recognize.m13#36 AS m13 [STRING]
| +-$match_recognize.m14#38 AS m14 [STRING]
| +-$match_recognize.m15#40 AS m15 [STRING]
+-query=
  +-ProjectScan
    +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#15, m5#19, m6#24, m7#28, m10#30, m11#32, m12#34, m13#36, m14#38, m15#40]
    +-input_scan=
      +-ProjectScan
        +-column_list=$match_recognize.[m1#7, m2#9, m3#11, m4#15, m5#19, m6#24, m7#28, m10#30, m11#32, m12#34, m13#36, m14#38, m15#40]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#6)
        | +-m2#9 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg2#8)
        | +-m3#11 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg3#10)
        | +-m4#15 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg4#14)
        | +-m5#19 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg5#18)
        | +-m6#24 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg6#23)
        | +-m7#28 := ColumnRef(type=STRING, column=$aggregate.$agg7#27)
        | +-m10#30 := ColumnRef(type=STRING, column=$aggregate.$agg8#29)
        | +-m11#32 := ColumnRef(type=STRING, column=$aggregate.$agg9#31)
        | +-m12#34 := ColumnRef(type=STRING, column=$aggregate.$agg10#33)
        | +-m13#36 := ColumnRef(type=STRING, column=$aggregate.$agg11#35)
        | +-m14#38 := ColumnRef(type=STRING, column=$aggregate.$agg12#37)
        | +-m15#40 := ColumnRef(type=STRING, column=$aggregate.$agg13#39)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $aggregate.$agg2#8, $aggregate.$agg3#10, $aggregate.$agg4#14, $aggregate.$agg5#18, $aggregate.$agg6#23, $aggregate.$agg7#27, $aggregate.$agg8#29, $aggregate.$agg9#31, $aggregate.$agg10#33, $aggregate.$agg11#35, $aggregate.$agg12#37, $aggregate.$agg13#39, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-ProjectScan
            |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $orderby.$orderbycol1#21]
            |   +-expr_list=
            |   | +-$orderbycol1#21 := FunctionCall(ZetaSQL:rand() -> DOUBLE)
            |   +-input_scan=
            |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |     | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg2#8 :=
            |     | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg3#10 :=
            |     | +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |     |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     +-$agg4#14 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<INT64>) -> ARRAY<INT64>)
            |     |   +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#13)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#12 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#13 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |     |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |         +-order_by_item_list=
            |     |           +-OrderByItem
            |     |             +-column_ref=
            |     |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg5#18 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<INT64>) -> ARRAY<INT64>)
            |     |   +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#17)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#16 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#17 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |     |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |         +-order_by_item_list=
            |     |           +-OrderByItem
            |     |             +-column_ref=
            |     |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg6#23 :=
            |     | +-AggregateFunctionCall(ZetaSQL:any_value(ARRAY<INT64>) -> ARRAY<INT64>)
            |     |   +-ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#22)
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#20 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#22 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |     |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |         +-order_by_item_list=
            |     |           +-OrderByItem
            |     |             +-column_ref=
            |     |               +-ColumnRef(type=DOUBLE, column=$orderby.$orderbycol1#21)
            |     +-$agg7#27 :=
            |     | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=$aggregate.$agg1#26)
            |     |   +-Literal(type=STRING, value="-")
            |     |   +-group_by_list=
            |     |   | +-$groupbymod#25 := ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-group_by_aggregate_list=
            |     |     +-$agg1#26 :=
            |     |       +-AggregateFunctionCall(ZetaSQL:min(STRING) -> STRING)
            |     |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     +-$agg8#29 :=
            |     | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-Literal(type=STRING, value="-")
            |     |   +-having_modifier=
            |     |   | +-AggregateHavingModifier
            |     |   |   +-kind=MIN
            |     |   |   +-having_expr=
            |     |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg9#31 :=
            |     | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-Literal(type=STRING, value="-")
            |     |   +-having_modifier=
            |     |   | +-AggregateHavingModifier
            |     |   |   +-kind=MIN
            |     |   |   +-having_expr=
            |     |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     +-$agg10#33 :=
            |     | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-Literal(type=STRING, value="-")
            |     |   +-having_modifier=
            |     |   | +-AggregateHavingModifier
            |     |   |   +-kind=MIN
            |     |   |   +-having_expr=
            |     |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |     |   +-order_by_item_list=
            |     |     +-OrderByItem
            |     |       +-column_ref=
            |     |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     +-$agg11#35 :=
            |     | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-Literal(type=STRING, value="-")
            |     |   +-order_by_item_list=
            |     |   | +-OrderByItem
            |     |   |   +-column_ref=
            |     |   |     +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     |   +-limit=
            |     |     +-Literal(type=INT64, value=3)
            |     +-$agg12#37 :=
            |     | +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |     |   +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |     |   +-Literal(type=STRING, value="-")
            |     |   +-order_by_item_list=
            |     |   | +-OrderByItem
            |     |   |   +-column_ref=
            |     |   |     +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |     |   +-limit=
            |     |     +-Literal(type=INT64, value=3)
            |     +-$agg13#39 :=
            |       +-AggregateFunctionCall(ZetaSQL:string_agg(STRING, STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-Literal(type=STRING, value="-")
            |         +-order_by_item_list=
            |         | +-OrderByItem
            |         |   +-column_ref=
            |         |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-limit=
            |           +-Literal(type=INT64, value=3)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_20.a_6 AS m1,
  matchrecognizescan_20.a_7 AS m2,
  matchrecognizescan_20.a_8 AS m3,
  matchrecognizescan_20.a_9 AS m4,
  matchrecognizescan_20.a_10 AS m5,
  matchrecognizescan_20.a_11 AS m6,
  matchrecognizescan_20.a_12 AS m7,
  matchrecognizescan_20.a_13 AS m10,
  matchrecognizescan_20.a_14 AS m11,
  matchrecognizescan_20.a_15 AS m12,
  matchrecognizescan_20.a_16 AS m13,
  matchrecognizescan_20.a_17 AS m14,
  matchrecognizescan_20.a_18 AS m15
FROM
  (
    SELECT
      keyvalue_3.a_1 AS a_1,
      keyvalue_3.a_2 AS a_2,
      RAND() AS a_4
    FROM
      (
        SELECT
          KeyValue.Key AS a_1,
          KeyValue.Value AS a_2
        FROM
          KeyValue
      ) AS keyvalue_3
  ) AS projectscan_5 MATCH_RECOGNIZE(
    ORDER BY projectscan_5.a_1
    MEASURES
      ARRAY_AGG(projectscan_5.a_1
        ORDER BY MATCH_ROW_NUMBER()) AS a_6,
      ARRAY_AGG(projectscan_5.a_1
        ORDER BY MATCH_ROW_NUMBER()) AS a_7,
      ARRAY_AGG(projectscan_5.a_1
        ORDER BY projectscan_5.a_2) AS a_8,
      ANY_VALUE(ARRAY_AGG(projectscan_5.a_1
          ORDER BY MATCH_ROW_NUMBER())
        GROUP BY projectscan_5.a_2) AS a_9,
      ANY_VALUE(ARRAY_AGG(projectscan_5.a_1
          ORDER BY MATCH_ROW_NUMBER())
        GROUP BY projectscan_5.a_2) AS a_10,
      ANY_VALUE(ARRAY_AGG(projectscan_5.a_1
          ORDER BY projectscan_5.a_4)
        GROUP BY projectscan_5.a_2) AS a_11,
      STRING_AGG(MIN(projectscan_5.a_2), "-"
        GROUP BY projectscan_5.a_1) AS a_12,
      STRING_AGG(projectscan_5.a_2, "-"
        HAVING MIN projectscan_5.a_1
        ORDER BY MATCH_ROW_NUMBER()) AS a_13,
      STRING_AGG(projectscan_5.a_2, "-"
        HAVING MIN projectscan_5.a_1
        ORDER BY MATCH_ROW_NUMBER()) AS a_14,
      STRING_AGG(projectscan_5.a_2, "-"
        HAVING MIN projectscan_5.a_1
        ORDER BY projectscan_5.a_2) AS a_15,
      STRING_AGG(projectscan_5.a_2, "-"
        ORDER BY MATCH_ROW_NUMBER()
        LIMIT 3) AS a_16,
      STRING_AGG(projectscan_5.a_2, "-"
        ORDER BY MATCH_ROW_NUMBER()
        LIMIT 3) AS a_17,
      STRING_AGG(projectscan_5.a_2, "-"
        ORDER BY projectscan_5.a_2
        LIMIT 3) AS a_18,
      MATCH_NUMBER() AS a_19
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_20;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> SELECT
     keyvalue_3.a_1 AS a_1,
     keyvalue_3.a_2 AS a_2,
     RAND() AS a_4
|> AS projectscan_5
|> MATCH_RECOGNIZE(
     ORDER BY projectscan_5.a_1
     MEASURES
       ARRAY_AGG(projectscan_5.a_1
         ORDER BY MATCH_ROW_NUMBER()) AS a_6,
       ARRAY_AGG(projectscan_5.a_1
         ORDER BY MATCH_ROW_NUMBER()) AS a_7,
       ARRAY_AGG(projectscan_5.a_1
         ORDER BY projectscan_5.a_2) AS a_8,
       ANY_VALUE(ARRAY_AGG(projectscan_5.a_1
           ORDER BY MATCH_ROW_NUMBER())
         GROUP BY projectscan_5.a_2) AS a_9,
       ANY_VALUE(ARRAY_AGG(projectscan_5.a_1
           ORDER BY MATCH_ROW_NUMBER())
         GROUP BY projectscan_5.a_2) AS a_10,
       ANY_VALUE(ARRAY_AGG(projectscan_5.a_1
           ORDER BY projectscan_5.a_4)
         GROUP BY projectscan_5.a_2) AS a_11,
       STRING_AGG(MIN(projectscan_5.a_2), "-"
         GROUP BY projectscan_5.a_1) AS a_12,
       STRING_AGG(projectscan_5.a_2, "-"
         HAVING MIN projectscan_5.a_1
         ORDER BY MATCH_ROW_NUMBER()) AS a_13,
       STRING_AGG(projectscan_5.a_2, "-"
         HAVING MIN projectscan_5.a_1
         ORDER BY MATCH_ROW_NUMBER()) AS a_14,
       STRING_AGG(projectscan_5.a_2, "-"
         HAVING MIN projectscan_5.a_1
         ORDER BY projectscan_5.a_2) AS a_15,
       STRING_AGG(projectscan_5.a_2, "-"
         ORDER BY MATCH_ROW_NUMBER()
         LIMIT 3) AS a_16,
       STRING_AGG(projectscan_5.a_2, "-"
         ORDER BY MATCH_ROW_NUMBER()
         LIMIT 3) AS a_17,
       STRING_AGG(projectscan_5.a_2, "-"
         ORDER BY projectscan_5.a_2
         LIMIT 3) AS a_18,
       MATCH_NUMBER() AS a_19
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_20
|> SELECT
     matchrecognizescan_20.a_6 AS m1,
     matchrecognizescan_20.a_7 AS m2,
     matchrecognizescan_20.a_8 AS m3,
     matchrecognizescan_20.a_9 AS m4,
     matchrecognizescan_20.a_10 AS m5,
     matchrecognizescan_20.a_11 AS m6,
     matchrecognizescan_20.a_12 AS m7,
     matchrecognizescan_20.a_13 AS m10,
     matchrecognizescan_20.a_14 AS m11,
     matchrecognizescan_20.a_15 AS m12,
     matchrecognizescan_20.a_16 AS m13,
     matchrecognizescan_20.a_17 AS m14,
     matchrecognizescan_20.a_18 AS m15;
==

# Correct error when the aggregation has distinct:
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES
    ARRAY_AGG(DISTINCT
              {{key|match_row_number()}}
              ) AS m1

  PATTERN (a+)
  DEFINE
    A AS true
)
--

ALTERNATION GROUP: key
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#7]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#6)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            |         +-distinct=TRUE
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_5.a_3 AS m1
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      ARRAY_AGG(DISTINCT keyvalue_2.a_1) AS a_3,
      MATCH_NUMBER() AS a_4
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       ARRAY_AGG(DISTINCT keyvalue_2.a_1) AS a_3,
       MATCH_NUMBER() AS a_4
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_5
|> SELECT
     matchrecognizescan_5.a_3 AS m1;
--
ALTERNATION GROUP: match_row_number()
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#7]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#6)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |         +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |         +-distinct=TRUE
            |         +-order_by_item_list=
            |           +-OrderByItem
            |             +-column_ref=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_5.a_3 AS m1
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      ARRAY_AGG(DISTINCT MATCH_ROW_NUMBER()
        ORDER BY MATCH_ROW_NUMBER()) AS a_3,
      MATCH_NUMBER() AS a_4
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       ARRAY_AGG(DISTINCT MATCH_ROW_NUMBER()
         ORDER BY MATCH_ROW_NUMBER()) AS a_3,
       MATCH_NUMBER() AS a_4
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_5
|> SELECT
     matchrecognizescan_5.a_3 AS m1;
==

# Correct error when the aggregation has GROUP BY:
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES
    ARRAY_AGG(min({{key|match_row_number()}})
               GROUP BY {{value|match_row_number()}}
              ) AS m1

  PATTERN (a+)
  DEFINE
    A AS true
)
--

ALTERNATION GROUP: key,value
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#9 AS m1 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#9]
        +-expr_list=
        | +-m1#9 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#8]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |         +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
            |         +-group_by_list=
            |         | +-$groupbymod#6 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-group_by_aggregate_list=
            |           +-$agg1#7 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
            |               +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_6.a_4 AS m1
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      ARRAY_AGG(MIN(keyvalue_3.a_1)
        GROUP BY keyvalue_3.a_2) AS a_4,
      MATCH_NUMBER() AS a_5
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       ARRAY_AGG(MIN(keyvalue_3.a_1)
         GROUP BY keyvalue_3.a_2) AS a_4,
       MATCH_NUMBER() AS a_5
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_6
|> SELECT
     matchrecognizescan_6.a_4 AS m1;
--
ALTERNATION GROUP: key,match_row_number()
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#9 AS m1 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#9]
        +-expr_list=
        | +-m1#9 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |         +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
            |         +-group_by_list=
            |         | +-$groupbymod#6 := ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |         +-group_by_aggregate_list=
            |           +-$agg1#7 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
            |               +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_5.a_3 AS m1
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      ARRAY_AGG(MIN(keyvalue_2.a_1)
        GROUP BY MATCH_ROW_NUMBER()) AS a_3,
      MATCH_NUMBER() AS a_4
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       ARRAY_AGG(MIN(keyvalue_2.a_1)
         GROUP BY MATCH_ROW_NUMBER()) AS a_3,
       MATCH_NUMBER() AS a_4
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_5
|> SELECT
     matchrecognizescan_5.a_3 AS m1;
--
ALTERNATION GROUP: match_row_number(),value
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#9 AS m1 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#9]
        +-expr_list=
        | +-m1#9 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |         +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
            |         +-group_by_list=
            |         | +-$groupbymod#6 := ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-group_by_aggregate_list=
            |           +-$agg1#7 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_6.a_4 AS m1
FROM
  (
    SELECT
      KeyValue.Key AS a_1,
      KeyValue.Value AS a_2
    FROM
      KeyValue
  ) AS keyvalue_3 MATCH_RECOGNIZE(
    ORDER BY keyvalue_3.a_1
    MEASURES
      ARRAY_AGG(MIN(MATCH_ROW_NUMBER())
        GROUP BY keyvalue_3.a_2) AS a_4,
      MATCH_NUMBER() AS a_5
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1,
     KeyValue.Value AS a_2
|> AS keyvalue_3
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_3.a_1
     MEASURES
       ARRAY_AGG(MIN(MATCH_ROW_NUMBER())
         GROUP BY keyvalue_3.a_2) AS a_4,
       MATCH_NUMBER() AS a_5
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_6
|> SELECT
     matchrecognizescan_6.a_4 AS m1;
--
ALTERNATION GROUP: match_row_number(),match_row_number()
--
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#9 AS m1 [ARRAY<INT64>]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#9]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#9]
        +-expr_list=
        | +-m1#9 := ColumnRef(type=ARRAY<INT64>, column=$aggregate.$agg1#8)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#8, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=[KeyValue.Key#1], table=KeyValue, column_index_list=[0])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#8 :=
            |       +-AggregateFunctionCall(ZetaSQL:array_agg(INT64) -> ARRAY<INT64>)
            |         +-ColumnRef(type=INT64, column=$aggregate.$agg1#7)
            |         +-group_by_list=
            |         | +-$groupbymod#6 := ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            |         +-group_by_aggregate_list=
            |           +-$agg1#7 :=
            |             +-AggregateFunctionCall(ZetaSQL:min(INT64) -> INT64)
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  matchrecognizescan_5.a_3 AS m1
FROM
  (
    SELECT
      KeyValue.Key AS a_1
    FROM
      KeyValue
  ) AS keyvalue_2 MATCH_RECOGNIZE(
    ORDER BY keyvalue_2.a_1
    MEASURES
      ARRAY_AGG(MIN(MATCH_ROW_NUMBER())
        GROUP BY MATCH_ROW_NUMBER()) AS a_3,
      MATCH_NUMBER() AS a_4
    AFTER MATCH SKIP PAST LAST ROW
    PATTERN ((A { 1, }))
    DEFINE
      A AS true
  )
  AS matchrecognizescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Key AS a_1
|> AS keyvalue_2
|> MATCH_RECOGNIZE(
     ORDER BY keyvalue_2.a_1
     MEASURES
       ARRAY_AGG(MIN(MATCH_ROW_NUMBER())
         GROUP BY MATCH_ROW_NUMBER()) AS a_3,
       MATCH_NUMBER() AS a_4
     AFTER MATCH SKIP PAST LAST ROW
     PATTERN ((A { 1, }))
     DEFINE
       A AS true
   )
   AS matchrecognizescan_5
|> SELECT
     matchrecognizescan_5.a_3 AS m1;
==

# Aggregations in MEASURES are implicitly ordered by MATCH_ROW_NUMBER() if
# they support ordering. Erorr if ORDER_BY_IN_AGGREGATE is not enabled.
[language_features=NONE,+MATCH_RECOGNIZE,+MULTILEVEL_AGGREGATION]
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES
    {{ARRAY_AGG(key)|ANY_VALUE(ARRAY_AGG(key) GROUP BY value)}} AS m1
  PATTERN (a+)
  DEFINE
    A AS true
)
--
ALTERNATION GROUP: ARRAY_AGG(key)
--
ERROR: Aggregate function ARRAY_AGG is not supported in the MEASURES clause of MATCH_RECOGNIZE [at 4:5]
    ARRAY_AGG(key) AS m1
    ^
--
ALTERNATION GROUP: ANY_VALUE(ARRAY_AGG(key) GROUP BY value)
--
ERROR: Aggregate function ARRAY_AGG is not supported in the MEASURES clause of MATCH_RECOGNIZE [at 4:15]
    ANY_VALUE(ARRAY_AGG(key) GROUP BY value) AS m1
              ^
==

# Ensure that the rewrite requires HAVING_IN_AGGREGATE
[no_show_sqlbuilder_output]
[language_features=NONE,+MATCH_RECOGNIZE]
select * from KeyValue MATCH_RECOGNIZE(
  ORDER BY key
  MEASURES
    FIRST(value) AS m1
  PATTERN (a+)
  DEFINE
    A AS true
)
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$match_recognize.m1#7 AS m1 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$match_recognize.m1#7]
    +-input_scan=
      +-ProjectScan
        +-column_list=[$match_recognize.m1#7]
        +-expr_list=
        | +-m1#7 := ColumnRef(type=STRING, column=$aggregate.$agg1#6)
        +-input_scan=
          +-MatchRecognizeScan
            +-column_list=[$aggregate.$agg1#6, $match_recognize.$match_row_number#4]
            +-input_scan=
            | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
            +-analytic_function_group_list=
            | +-AnalyticFunctionGroup
            |   +-order_by=
            |     +-WindowOrdering
            |       +-order_by_item_list=
            |         +-OrderByItem
            |           +-column_ref=
            |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
            +-pattern_variable_definition_list=
            | +-MatchRecognizeVariableDefinition
            |   +-name="A"
            |   +-predicate=
            |     +-Literal(type=BOOL, value=true)
            +-pattern=
            | +-MatchRecognizePatternQuantification
            |   +-operand=
            |   | +-MatchRecognizePatternVariableRef(name="A")
            |   +-lower_bound=
            |   | +-Literal(type=INT64, value=1)
            |   +-is_reluctant=FALSE
            +-after_match_skip_mode=END_OF_MATCH
            +-measure_group_list=
            | +-MeasureGroup
            |   +-aggregate_list=
            |     +-$agg1#6 :=
            |       +-AggregateFunctionCall(ZetaSQL:first(STRING) -> STRING)
            |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
            |         +-order_by_item_list=
            |           +-OrderByItem
            |             +-column_ref=
            |               +-ColumnRef(type=INT64, column=$match_recognize.$match_row_number#4)
            +-match_number_column=$match_recognize.$match_number#3
            +-match_row_number_column=$match_recognize.$match_row_number#4
            +-classifier_column=$match_recognize.$classifier#5

Rewrite ERROR: generic::unimplemented: The rewrite for MATCH_RECOGNIZE FIRST() and LAST() requires support for HAVING MIN/MAX in aggregates
