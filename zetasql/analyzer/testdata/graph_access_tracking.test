[default language_features=NONE,+SQL_GRAPH]
[default no_test_extract_table_names]
[default show_referenced_property_graphs]

# Track single graph referenced
select name from
graph_table(aml
  match (n)
  columns(n.name)
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.name#2]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.name#2]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-name#2 :=
            +-GraphGetElementProperty
              +-type=STRING
              +-expr=
              | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              +-property=name(STRING)

[has_graph_references=1]
==

# Track multiple graphs referenced
select g1.new_name from
graph_table(aml
  match (n WHERE n.name = (
    select g2.value from
      graph_table(aml_multi
        match (m)
        columns(m.value)
      ) g2
      limit 1
  ))
  columns(CONCAT(n.name, (select g3.value from
      graph_table(aml_multi
        match (l)
        columns(l.value)
      ) g3
      limit 1)) AS new_name)
) g1
--
QueryStmt
+-output_column_list=
| +-$graph_table.new_name#6 AS new_name [STRING]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.new_name#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.new_name#6]
        +-property_graph=aml
        +-input_scan=
        | +-GraphScan
        |   +-column_list=[$element_table.n#1]
        |   +-input_scan_list=
        |     +-GraphPathScan
        |       +-column_list=[$element_table.n#1]
        |       +-input_scan_list=
        |       | +-GraphNodeScan
        |       |   +-column_list=[$element_table.n#1]
        |       |   +-filter_expr=
        |       |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       |   |   +-GraphGetElementProperty
        |       |   |   | +-type=STRING
        |       |   |   | +-expr=
        |       |   |   | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
        |       |   |   | +-property=name(STRING)
        |       |   |   +-SubqueryExpr
        |       |   |     +-type=STRING
        |       |   |     +-subquery_type=SCALAR
        |       |   |     +-subquery=
        |       |   |       +-LimitOffsetScan
        |       |   |         +-column_list=[$graph_table.value#3]
        |       |   |         +-input_scan=
        |       |   |         | +-ProjectScan
        |       |   |         |   +-column_list=[$graph_table.value#3]
        |       |   |         |   +-input_scan=
        |       |   |         |     +-GraphTableScan
        |       |   |         |       +-column_list=[$graph_table.value#3]
        |       |   |         |       +-property_graph=aml_multi
        |       |   |         |       +-input_scan=
        |       |   |         |       | +-GraphScan
        |       |   |         |       |   +-column_list=[$element_table.m#2]
        |       |   |         |       |   +-input_scan_list=
        |       |   |         |       |     +-GraphPathScan
        |       |   |         |       |       +-column_list=[$element_table.m#2]
        |       |   |         |       |       +-input_scan_list=
        |       |   |         |       |       | +-GraphNodeScan
        |       |   |         |       |       |   +-column_list=[$element_table.m#2]
        |       |   |         |       |       |   +-label_expr=
        |       |   |         |       |       |   | +-GraphLabelNaryExpr
        |       |   |         |       |       |   |   +-op=OR
        |       |   |         |       |       |   |   +-operand_list=
        |       |   |         |       |       |   |     +-GraphWildCardLabel
        |       |   |         |       |       |   |     +-GraphLabelNaryExpr
        |       |   |         |       |       |   |       +-op=NOT
        |       |   |         |       |       |   |       +-operand_list=
        |       |   |         |       |       |   |         +-GraphWildCardLabel
        |       |   |         |       |       |   +-target_element_table_list=[aml_multi.Entity]
        |       |   |         |       |       +-head=$element_table.m#2
        |       |   |         |       |       +-tail=$element_table.m#2
        |       |   |         |       +-shape_expr_list=
        |       |   |         |         +-value#3 :=
        |       |   |         |           +-GraphGetElementProperty
        |       |   |         |             +-type=STRING
        |       |   |         |             +-expr=
        |       |   |         |             | +-ColumnRef(type=GRAPH_NODE(aml_multi)<value STRING>, column=$element_table.m#2)
        |       |   |         |             +-property=value(STRING)
        |       |   |         +-limit=
        |       |   |           +-Literal(type=INT64, value=1)
        |       |   +-label_expr=
        |       |   | +-GraphLabelNaryExpr
        |       |   |   +-op=OR
        |       |   |   +-operand_list=
        |       |   |     +-GraphWildCardLabel
        |       |   |     +-GraphLabelNaryExpr
        |       |   |       +-op=NOT
        |       |   |       +-operand_list=
        |       |   |         +-GraphWildCardLabel
        |       |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
        |       +-head=$element_table.n#1
        |       +-tail=$element_table.n#1
        +-shape_expr_list=
          +-new_name#6 :=
            +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
              +-GraphGetElementProperty
              | +-type=STRING
              | +-expr=
              | | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
              | +-property=name(STRING)
              +-SubqueryExpr
                +-type=STRING
                +-subquery_type=SCALAR
                +-subquery=
                  +-LimitOffsetScan
                    +-column_list=[$graph_table.value#5]
                    +-input_scan=
                    | +-ProjectScan
                    |   +-column_list=[$graph_table.value#5]
                    |   +-input_scan=
                    |     +-GraphTableScan
                    |       +-column_list=[$graph_table.value#5]
                    |       +-property_graph=aml_multi
                    |       +-input_scan=
                    |       | +-GraphScan
                    |       |   +-column_list=[$element_table.l#4]
                    |       |   +-input_scan_list=
                    |       |     +-GraphPathScan
                    |       |       +-column_list=[$element_table.l#4]
                    |       |       +-input_scan_list=
                    |       |       | +-GraphNodeScan
                    |       |       |   +-column_list=[$element_table.l#4]
                    |       |       |   +-label_expr=
                    |       |       |   | +-GraphLabelNaryExpr
                    |       |       |   |   +-op=OR
                    |       |       |   |   +-operand_list=
                    |       |       |   |     +-GraphWildCardLabel
                    |       |       |   |     +-GraphLabelNaryExpr
                    |       |       |   |       +-op=NOT
                    |       |       |   |       +-operand_list=
                    |       |       |   |         +-GraphWildCardLabel
                    |       |       |   +-target_element_table_list=[aml_multi.Entity]
                    |       |       +-head=$element_table.l#4
                    |       |       +-tail=$element_table.l#4
                    |       +-shape_expr_list=
                    |         +-value#5 :=
                    |           +-GraphGetElementProperty
                    |             +-type=STRING
                    |             +-expr=
                    |             | +-ColumnRef(type=GRAPH_NODE(aml_multi)<value STRING>, column=$element_table.l#4)
                    |             +-property=value(STRING)
                    +-limit=
                      +-Literal(type=INT64, value=1)

[has_graph_references=1]
==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY]
# Top level graph query in GQL syntax
graph aml
match (n)
return n.name
--
QueryStmt
+-output_column_list=
| +-$graph_table.name#2 AS name [STRING]
+-query=
  +-GraphTableScan
    +-column_list=[$graph_table.name#2]
    +-property_graph=aml
    +-input_scan=
      +-GraphLinearScan
        +-column_list=[$graph_table.name#2]
        +-scan_list=
          +-GraphLinearScan
            +-column_list=[$graph_table.name#2]
            +-scan_list=
              +-GraphScan
              | +-column_list=[$element_table.n#1]
              | +-input_scan_list=
              | | +-GraphPathScan
              | |   +-column_list=[$element_table.n#1]
              | |   +-input_scan_list=
              | |   | +-GraphNodeScan
              | |   |   +-column_list=[$element_table.n#1]
              | |   |   +-label_expr=
              | |   |   | +-GraphLabelNaryExpr
              | |   |   |   +-op=OR
              | |   |   |   +-operand_list=
              | |   |   |     +-GraphWildCardLabel
              | |   |   |     +-GraphLabelNaryExpr
              | |   |   |       +-op=NOT
              | |   |   |       +-operand_list=
              | |   |   |         +-GraphWildCardLabel
              | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
              | |   +-head=$element_table.n#1
              | |   +-tail=$element_table.n#1
              | +-input_scan=
              |   +-SingleRowScan
              +-ProjectScan
                +-column_list=[$graph_table.name#2]
                +-expr_list=
                | +-name#2 :=
                |   +-GraphGetElementProperty
                |     +-type=STRING
                |     +-expr=
                |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.n#1)
                |     +-property=name(STRING)
                +-input_scan=
                  +-GraphRefScan(column_list=[$element_table.n#1])

[has_graph_references=1]
