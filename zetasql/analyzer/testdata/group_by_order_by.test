# ORDER BY select list column ordinal works as intended.
[default language_features=MAXIMUM]
WITH T AS (
  SELECT 1 AS a, 1000 AS b
)
SELECT a + b AS c
FROM T
GROUP BY a + b
ORDER BY 1 desc
--
QueryStmt
+-output_column_list=
| +-$groupby.$groupbycol1#6 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.$groupbycol1#6]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.$groupbycol1#6]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.$groupbycol1#6]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#3, T.b#4, $pre_groupby.c#5]
        |   |   +-expr_list=
        |   |   | +-c#5 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-ColumnRef(type=INT64, column=T.a#3)
        |   |   |     +-ColumnRef(type=INT64, column=T.b#4)
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-$groupbycol1#6 := ColumnRef(type=INT64, column=$pre_groupby.c#5)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT64, column=$groupby.$groupbycol1#6)
            +-is_descending=TRUE
==

# ORDER BY select list column ordinal needs to be in range.
WITH T AS (
  SELECT 1 AS a, 1000 AS b
)
SELECT a + b AS c
FROM T
GROUP BY a + b
ORDER BY 2 desc
--
ERROR: ORDER BY is out of SELECT column number range: 2 [at 7:10]
ORDER BY 2 desc
         ^
==

# ORDER BY select list column alias works as intended.
WITH T AS (
  SELECT 1 AS a, 1000 AS b
)
SELECT a + b AS c
FROM T
GROUP BY {{a + b|c}}
ORDER BY c desc
--
ALTERNATION GROUP: a + b
--
QueryStmt
+-output_column_list=
| +-$groupby.$groupbycol1#6 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.$groupbycol1#6]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.$groupbycol1#6]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.$groupbycol1#6]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#3, T.b#4, $pre_groupby.c#5]
        |   |   +-expr_list=
        |   |   | +-c#5 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-ColumnRef(type=INT64, column=T.a#3)
        |   |   |     +-ColumnRef(type=INT64, column=T.b#4)
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-$groupbycol1#6 := ColumnRef(type=INT64, column=$pre_groupby.c#5)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT64, column=$groupby.$groupbycol1#6)
            +-is_descending=TRUE
--
ALTERNATION GROUP: c
--
QueryStmt
+-output_column_list=
| +-$groupby.c#6 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.c#6]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.c#6]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.c#6]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#3, T.b#4, $pre_groupby.c#5]
        |   |   +-expr_list=
        |   |   | +-c#5 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-ColumnRef(type=INT64, column=T.a#3)
        |   |   |     +-ColumnRef(type=INT64, column=T.b#4)
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-c#6 := ColumnRef(type=INT64, column=$pre_groupby.c#5)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT64, column=$groupby.c#6)
            +-is_descending=TRUE
==

# ORDER BY select list column's original expression without GROUP BY
# works as intended.
WITH T AS (
  SELECT 1 AS a, 1000 AS b
)
SELECT a + b AS c
FROM T
ORDER BY a + b desc
--
QueryStmt
+-output_column_list=
| +-$query.c#5 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$query.c#5]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$query.c#5]
        +-is_ordered=TRUE
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[T.a#3, T.b#4, $query.c#5, $orderby.$orderbycol1#6]
        |   +-expr_list=
        |   | +-$orderbycol1#6 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=T.a#3)
        |   |     +-ColumnRef(type=INT64, column=T.b#4)
        |   +-input_scan=
        |     +-ProjectScan
        |       +-column_list=[T.a#3, T.b#4, $query.c#5]
        |       +-expr_list=
        |       | +-c#5 :=
        |       |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |       |     +-ColumnRef(type=INT64, column=T.a#3)
        |       |     +-ColumnRef(type=INT64, column=T.b#4)
        |       +-input_scan=
        |         +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT64, column=$orderby.$orderbycol1#6)
            +-is_descending=TRUE
==

# ORDER BY select list column's original expression that also a GROUP BY
# expression. Path expression works.
WITH T AS (
  SELECT STRUCT(1 AS b) AS a
)
SELECT a.b AS c
FROM T
GROUP BY {{a.b|1}}
ORDER BY a.b desc
--
ALTERNATION GROUP: a.b
--
QueryStmt
+-output_column_list=
| +-$groupby.b#4 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.b#4]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T.a#1]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=STRUCT<b INT64>, value={b:1})
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.b#4]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.b#4]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#2, $pre_groupby.c#3]
        |   |   +-expr_list=
        |   |   | +-c#3 :=
        |   |   |   +-GetStructField
        |   |   |     +-type=INT64
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=STRUCT<b INT64>, column=T.a#2)
        |   |   |     +-field_idx=0
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=[T.a#2], with_query_name="T")
        |   +-group_by_list=
        |     +-b#4 := ColumnRef(type=INT64, column=$pre_groupby.c#3)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT64, column=$groupby.b#4)
            +-is_descending=TRUE
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$groupby.c#4 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.c#4]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[T.a#1]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=STRUCT<b INT64>, value={b:1})
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.c#4]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.c#4]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#2, $pre_groupby.c#3]
        |   |   +-expr_list=
        |   |   | +-c#3 :=
        |   |   |   +-GetStructField
        |   |   |     +-type=INT64
        |   |   |     +-expr=
        |   |   |     | +-ColumnRef(type=STRUCT<b INT64>, column=T.a#2)
        |   |   |     +-field_idx=0
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=[T.a#2], with_query_name="T")
        |   +-group_by_list=
        |     +-c#4 := ColumnRef(type=INT64, column=$pre_groupby.c#3)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
            | +-ColumnRef(type=INT64, column=$groupby.c#4)
            +-is_descending=TRUE
==

# Repro b/162292429:
# ORDER BY select list column's original expression that also a GROUP BY
# expression. No select list alias.
WITH T AS (
  SELECT 1 AS a, 1000 AS b
)
SELECT a + b
FROM T
GROUP BY {{a + b|1}}
ORDER BY a + b
--
ALTERNATION GROUP: a + b
--
QueryStmt
+-output_column_list=
| +-$groupby.$groupbycol1#5 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.$groupbycol1#5]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.$groupbycol1#5]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.$groupbycol1#5]
        |   +-input_scan=
        |   | +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-$groupbycol1#5 :=
        |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=T.a#3)
        |         +-ColumnRef(type=INT64, column=T.b#4)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=$groupby.$groupbycol1#5)
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$groupby.$col1#5 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.$col1#5]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.$col1#5]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.$col1#5]
        |   +-input_scan=
        |   | +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-$col1#5 :=
        |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |         +-ColumnRef(type=INT64, column=T.a#3)
        |         +-ColumnRef(type=INT64, column=T.b#4)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=$groupby.$col1#5)
==

# Repro b/162292429:
# ORDER BY select list column's original expression that also a GROUP BY
# expression. Select list with alias.
WITH T AS (
  SELECT 1 AS a, 1000 AS b
)
SELECT a + b AS c
FROM T
GROUP BY {{a + b|1}}
ORDER BY a + b
--
ALTERNATION GROUP: a + b
--
QueryStmt
+-output_column_list=
| +-$groupby.$groupbycol1#6 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.$groupbycol1#6]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.$groupbycol1#6]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.$groupbycol1#6]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#3, T.b#4, $pre_groupby.c#5]
        |   |   +-expr_list=
        |   |   | +-c#5 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-ColumnRef(type=INT64, column=T.a#3)
        |   |   |     +-ColumnRef(type=INT64, column=T.b#4)
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-$groupbycol1#6 := ColumnRef(type=INT64, column=$pre_groupby.c#5)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=$groupby.$groupbycol1#6)
--
ALTERNATION GROUP: 1
--
QueryStmt
+-output_column_list=
| +-$groupby.c#6 AS c [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.c#6]
    +-is_ordered=TRUE
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="T"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=T.[a#1, b#2]
    |       +-expr_list=
    |       | +-a#1 := Literal(type=INT64, value=1)
    |       | +-b#2 := Literal(type=INT64, value=1000)
    |       +-input_scan=
    |         +-SingleRowScan
    +-query=
      +-OrderByScan
        +-column_list=[$groupby.c#6]
        +-is_ordered=TRUE
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$groupby.c#6]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[T.a#3, T.b#4, $pre_groupby.c#5]
        |   |   +-expr_list=
        |   |   | +-c#5 :=
        |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |   |     +-ColumnRef(type=INT64, column=T.a#3)
        |   |   |     +-ColumnRef(type=INT64, column=T.b#4)
        |   |   +-input_scan=
        |   |     +-WithRefScan(column_list=T.[a#3, b#4], with_query_name="T")
        |   +-group_by_list=
        |     +-c#6 := ColumnRef(type=INT64, column=$pre_groupby.c#5)
        +-order_by_item_list=
          +-OrderByItem
            +-column_ref=
              +-ColumnRef(type=INT64, column=$groupby.c#6)
==

[language_features=NONE,+JSON_TYPE]
# b/425900366 Support GROUP BY on JSON fields

WITH json_table AS (SELECT JSON '{"Name": "ana"}' AS json_col, 5 AS points UNION ALL
                    SELECT JSON '{"Name": "ana"}' AS json_col, 7 AS points UNION ALL
                    SELECT JSON '{"Name": "bob"}' AS json_col, 9 AS points)
SELECT sum(points), json_col.Name FROM json_table
GROUP BY json_col.Name;

--
ERROR: Grouping by expressions of type JSON is not allowed [at 7:10]
GROUP BY json_col.Name;
         ^
