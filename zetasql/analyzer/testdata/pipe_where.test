[default language_features=MAXIMUM,+PIPES,+ANALYTIC_FUNCTIONS]
from KeyValue
|> where key>10
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=KeyValue.[Key#1, Value#2]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        +-Literal(type=INT64, value=10)
==

# WHERE preserves value tables
from TestExtraValueTable
|> where int32_val1 = 4
--
QueryStmt
+-output_column_list=
| +-TestExtraValueTable.value#1 AS `$value` [PROTO<zetasql_test__.TestExtraPB>]
+-is_value_table=TRUE
+-query=
  +-FilterScan
    +-column_list=[TestExtraValueTable.value#1]
    +-input_scan=
    | +-TableScan(column_list=[TestExtraValueTable.value#1], table=TestExtraValueTable, column_index_list=[0])
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        +-GetProtoField
        | +-type=INT32
        | +-expr=
        | | +-ColumnRef(type=PROTO<zetasql_test__.TestExtraPB>, column=TestExtraValueTable.value#1)
        | +-field_descriptor=int32_val1
        | +-default_value=0
        +-Literal(type=INT32, value=4)
==

from KeyValue
|> where key
--
ERROR: WHERE clause should return type BOOL, but returns INT64 [at 2:10]
|> where key
         ^
==

from KeyValue
|> where sum(key) > 10
--
ERROR: Aggregate function SUM not allowed in pipe WHERE clause [at 2:10]
|> where sum(key) > 10
         ^
==

from KeyValue
|> where sum(sum(key)) OVER (order by value) > 10
--
ERROR: Aggregate function SUM not allowed in pipe WHERE clause [at 2:14]
|> where sum(sum(key)) OVER (order by value) > 10
             ^
==

from KeyValue
|> where sum(key) OVER (order by value) > 10
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3]
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-order_by=
    |       | +-WindowOrdering
    |       |   +-order_by_item_list=
    |       |     +-OrderByItem
    |       |       +-column_ref=
    |       |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-analytic_function_list=
    |         +-$analytic1#3 :=
    |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |             +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=RANGE)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
        +-Literal(type=INT64, value=10)
==

# Where clause is a window function call that directly returns a bool, without
# needing another ProjectScan or expression computation.
from KeyValue
|> where any_value(key = 4) OVER (order by value)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3]
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3]
    |   +-input_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-order_by=
    |       | +-WindowOrdering
    |       |   +-order_by_item_list=
    |       |     +-OrderByItem
    |       |       +-column_ref=
    |       |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-analytic_function_list=
    |         +-$analytic1#3 :=
    |           +-AnalyticFunctionCall(ZetaSQL:any_value(BOOL) -> BOOL)
    |             +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    |               +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |               +-Literal(type=INT64, value=4)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=RANGE)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
    +-filter_expr=
      +-ColumnRef(type=BOOL, column=$analytic.$analytic1#3)
==

# Where clause with a window function call that requires another Project to
# precompute window function inputs.
from KeyValue
|> where sum(key+1) OVER (order by value) > 9
|> where count(*) OVER (partition by key+1) > 10
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3, $analytic.$analytic1#4]
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3, $analytic.$analytic1#4]
    |   +-input_scan=
    |   | +-ProjectScan
    |   |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3, $partitionby.$partitionbycol1#5]
    |   |   +-expr_list=
    |   |   | +-$partitionbycol1#5 :=
    |   |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |   |     +-Literal(type=INT64, value=1)
    |   |   +-input_scan=
    |   |     +-FilterScan
    |   |       +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3]
    |   |       +-input_scan=
    |   |       | +-AnalyticScan
    |   |       |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3]
    |   |       |   +-input_scan=
    |   |       |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   |       |   +-function_group_list=
    |   |       |     +-AnalyticFunctionGroup
    |   |       |       +-order_by=
    |   |       |       | +-WindowOrdering
    |   |       |       |   +-order_by_item_list=
    |   |       |       |     +-OrderByItem
    |   |       |       |       +-column_ref=
    |   |       |       |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |   |       |       +-analytic_function_list=
    |   |       |         +-$analytic1#3 :=
    |   |       |           +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |   |       |             +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |   |       |               +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |   |       |               +-Literal(type=INT64, value=1)
    |   |       |             +-window_frame=
    |   |       |               +-WindowFrame(frame_unit=RANGE)
    |   |       |                 +-start_expr=
    |   |       |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |   |       |                 +-end_expr=
    |   |       |                   +-WindowFrameExpr(boundary_type=CURRENT ROW)
    |   |       +-filter_expr=
    |   |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |   |           +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
    |   |           +-Literal(type=INT64, value=9)
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |       +-partition_by=
    |       | +-WindowPartitioning
    |       |   +-partition_by_list=
    |       |     +-ColumnRef(type=INT64, column=$partitionby.$partitionbycol1#5)
    |       +-analytic_function_list=
    |         +-$analytic1#4 :=
    |           +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=ROWS)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$analytic.$analytic1#4)
        +-Literal(type=INT64, value=10)
==

# Where clause with an expression containing two window functions.
from KeyValue
|> where sum(key) OVER (partition by value) =
         count(value) OVER (partition by value)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
+-query=
  +-FilterScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3, $analytic.$analytic2#4]
    +-input_scan=
    | +-AnalyticScan
    |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#3, $analytic.$analytic2#4]
    |   +-input_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    |   +-function_group_list=
    |     +-AnalyticFunctionGroup
    |     | +-partition_by=
    |     | | +-WindowPartitioning
    |     | |   +-partition_by_list=
    |     | |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |     | +-analytic_function_list=
    |     |   +-$analytic1#3 :=
    |     |     +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
    |     |       +-ColumnRef(type=INT64, column=KeyValue.Key#1)
    |     |       +-window_frame=
    |     |         +-WindowFrame(frame_unit=ROWS)
    |     |           +-start_expr=
    |     |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |     |           +-end_expr=
    |     |             +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
    |     +-AnalyticFunctionGroup
    |       +-partition_by=
    |       | +-WindowPartitioning
    |       |   +-partition_by_list=
    |       |     +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |       +-analytic_function_list=
    |         +-$analytic2#4 :=
    |           +-AnalyticFunctionCall(ZetaSQL:count(STRING) -> INT64)
    |             +-ColumnRef(type=STRING, column=KeyValue.Value#2)
    |             +-window_frame=
    |               +-WindowFrame(frame_unit=ROWS)
    |                 +-start_expr=
    |                 | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
    |                 +-end_expr=
    |                   +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        +-ColumnRef(type=INT64, column=$analytic.$analytic1#3)
        +-ColumnRef(type=INT64, column=$analytic.$analytic2#4)
==

from KeyValue
|> where count(*) OVER w < 10
--
ERROR: Cannot reference a named window in pipe WHERE clause [at 2:24]
|> where count(*) OVER w < 10
                       ^
