[default show_sqlbuilder_output]
[default no_show_resolved_ast]
[default language_features=MAXIMUM,+GROUP_BY_ALL]

select kv.key, key{{| AS alias}} from KeyValue kv where true
GROUP BY ALL
--
ALTERNATION GROUP: <empty>
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_3.a_2 AS key,
  aggregatescan_3.a_2 AS key
FROM
  (
    SELECT
      KeyValue.Key AS a_2
    FROM
      KeyValue
    WHERE
      true
    GROUP BY ALL
  ) AS aggregatescan_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> WHERE
     true
|> EXTEND
     KeyValue.Key AS a_2
|> AGGREGATE
   GROUP BY a_2
|> AS aggregatescan_3
|> SELECT
     aggregatescan_3.a_2 AS key,
     aggregatescan_3.a_2 AS key;
--
ALTERNATION GROUP:  AS alias
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_3.a_2 AS key,
  aggregatescan_3.a_2 AS alias
FROM
  (
    SELECT
      KeyValue.Key AS a_2
    FROM
      KeyValue
    WHERE
      true
    GROUP BY ALL
  ) AS aggregatescan_3;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> WHERE
     true
|> EXTEND
     KeyValue.Key AS a_2
|> AGGREGATE
   GROUP BY a_2
|> AS aggregatescan_3
|> SELECT
     aggregatescan_3.a_2 AS key,
     aggregatescan_3.a_2 AS alias;
==

select DISTINCT key, key
from TestTable
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_6.a_5 AS key,
  aggregatescan_6.a_5 AS key
FROM
  (
    SELECT
      aggregatescan_4.a_3 AS a_5
    FROM
      (
        SELECT
          testtable_2.a_1 AS a_3
        FROM
          (
            SELECT
              TestTable.key AS a_1
            FROM
              TestTable
          ) AS testtable_2
        GROUP BY ALL
      ) AS aggregatescan_4
    GROUP BY 1
  ) AS aggregatescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  TestTable
|> SELECT
     TestTable.key AS a_1
|> AS testtable_2
|> EXTEND
     testtable_2.a_1 AS a_3
|> AGGREGATE
   GROUP BY a_3
|> AS aggregatescan_4
|> EXTEND
     aggregatescan_4.a_3 AS a_5
|> AGGREGATE
   GROUP BY a_5
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS a_5,
     aggregatescan_6.a_5 AS a_7
|> AS aggregatescan_6
|> SELECT
     aggregatescan_6.a_5 AS key,
     aggregatescan_6.a_5 AS key;
==

select value, cast(count(*) as double) from KeyValue group by all
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_5.a_3 AS value,
  CAST(aggregatescan_5.a_4 AS DOUBLE) AS a_6
FROM
  (
    SELECT
      keyvalue_2.a_1 AS a_3,
      COUNT(*) AS a_4
    FROM
      (
        SELECT
          KeyValue.Value AS a_1
        FROM
          KeyValue
      ) AS keyvalue_2
    GROUP BY ALL
  ) AS aggregatescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     KeyValue.Value AS a_1
|> AS keyvalue_2
|> EXTEND
     keyvalue_2.a_1 AS a_3
|> AGGREGATE
     COUNT(*) AS a_4
   GROUP BY a_3
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_3 AS value,
     CAST(aggregatescan_5.a_4 AS DOUBLE) AS a_6;
==

select cast(count(*) as double) from KeyValue group by all
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  CAST(aggregatescan_2.a_1 AS DOUBLE) AS a_3
FROM
  (
    SELECT
      COUNT(*) AS a_1
    FROM
      KeyValue
    GROUP BY ALL
  ) AS aggregatescan_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> AGGREGATE
     COUNT(*) AS a_1
|> AS aggregatescan_2
|> SELECT
     CAST(aggregatescan_2.a_1 AS DOUBLE) AS a_3;
==

[language_features=NONE,+GROUP_BY_ALL,+SELECT_STAR_EXCEPT_REPLACE]
# SELECT with EXCEPT
SELECT * EXCEPT (a)
FROM (
  SELECT 1 AS a, 2 AS b
)
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_3.a_2 AS b
FROM
  (
    SELECT
      1 AS a_1,
      2 AS a_2
  ) AS projectscan_3
GROUP BY ALL;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_2 AS a_4
|> AGGREGATE
   GROUP BY a_4
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_4 AS b;
==

[language_features=NONE,+GROUP_BY_ALL,+SELECT_STAR_EXCEPT_REPLACE]
# SELECT with REPLACE
SELECT * REPLACE (0 AS a)
FROM (
  SELECT 1 AS a, 2 AS `all`
)
GROUP BY {{`all`|ALL}}
--
ALTERNATION GROUP: `all`
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  0 AS a,
  aggregatescan_5.a_4 AS `all`
FROM
  (
    SELECT
      projectscan_3.a_2 AS a_4
    FROM
      (
        SELECT
          1 AS a_1,
          2 AS a_2
      ) AS projectscan_3
    GROUP BY 1
  ) AS aggregatescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_2 AS a_4
|> AGGREGATE
   GROUP BY a_4
|> AS aggregatescan_5
|> SELECT
     0 AS a,
     aggregatescan_5.a_4 AS `all`;
--
ALTERNATION GROUP: ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  0 AS a,
  aggregatescan_5.a_4 AS `all`
FROM
  (
    SELECT
      projectscan_3.a_2 AS a_4
    FROM
      (
        SELECT
          1 AS a_1,
          2 AS a_2
      ) AS projectscan_3
    GROUP BY ALL
  ) AS aggregatescan_5;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_2 AS a_4
|> AGGREGATE
   GROUP BY a_4
|> AS aggregatescan_5
|> SELECT
     0 AS a,
     aggregatescan_5.a_4 AS `all`;
==

# Having clause that references a non-selected column
SELECT {{a|*}}
FROM (
  SELECT 1 AS a, 2 AS b
)
GROUP BY ALL
HAVING SUM(b) > 1
--
ALTERNATION GROUP: a
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_6.a_4 AS a
FROM
  (
    SELECT
      projectscan_3.a_1 AS a_4,
      SUM(projectscan_3.a_2) AS a_5
    FROM
      (
        SELECT
          1 AS a_1,
          2 AS a_2
      ) AS projectscan_3
    GROUP BY ALL
  ) AS aggregatescan_6
WHERE
  (aggregatescan_6.a_5) > 1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_1 AS a_4
|> AGGREGATE
     SUM(projectscan_3.a_2) AS a_5
   GROUP BY a_4
|> AS aggregatescan_6
|> WHERE
     (aggregatescan_6.a_5) > 1
|> SELECT
     aggregatescan_6.a_4 AS a;
--
ALTERNATION GROUP: *
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aggregatescan_7.a_4 AS a,
  aggregatescan_7.a_5 AS b
FROM
  (
    SELECT
      projectscan_3.a_1 AS a_4,
      projectscan_3.a_2 AS a_5,
      SUM(projectscan_3.a_2) AS a_6
    FROM
      (
        SELECT
          1 AS a_1,
          2 AS a_2
      ) AS projectscan_3
    GROUP BY ALL
  ) AS aggregatescan_7
WHERE
  (aggregatescan_7.a_6) > 1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_1 AS a_4,
     projectscan_3.a_2 AS a_5
|> AGGREGATE
     SUM(projectscan_3.a_2) AS a_6
   GROUP BY a_4, a_5
|> AS aggregatescan_7
|> WHERE
     (aggregatescan_7.a_6) > 1
|> SELECT
     aggregatescan_7.a_4 AS a,
     aggregatescan_7.a_5 AS b;
==

# GROUP BY ALL in subquery
SELECT *
FROM (
  SELECT *, COUNT(*)
  FROM (
    SELECT 1 AS a, 2 AS b
  )
  GROUP BY ALL
)
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_3.a_1 AS a,
  projectscan_3.a_2 AS b,
  COUNT(*) AS a_6
FROM
  (
    SELECT
      1 AS a_1,
      2 AS a_2
  ) AS projectscan_3
GROUP BY ALL;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_1 AS a_4,
     projectscan_3.a_2 AS a_5
|> AGGREGATE
     COUNT(*) AS a_6
   GROUP BY a_4, a_5
|> AS aggregatescan_7
|> SELECT
     aggregatescan_7.a_4 AS a,
     aggregatescan_7.a_5 AS b,
     aggregatescan_7.a_6 AS a_6;
==

# GROUP BY ALL in the outermost query and its direct table subquery.
SELECT *
FROM (
  SELECT int32, COUNT(*)
  FROM SimpleTypes
  GROUP BY ALL
)
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_5.a_3 AS int32,
  projectscan_5.a_4 AS a_7
FROM
  (
    SELECT
      simpletypes_2.a_1 AS a_3,
      COUNT(*) AS a_4
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_1
        FROM
          SimpleTypes
      ) AS simpletypes_2
    GROUP BY ALL
  ) AS projectscan_5
GROUP BY ALL;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.int32 AS a_1
|> AS simpletypes_2
|> EXTEND
     simpletypes_2.a_1 AS a_3
|> AGGREGATE
     COUNT(*) AS a_4
   GROUP BY a_3
|> AS aggregatescan_5
|> SELECT
     aggregatescan_5.a_3 AS a_3,
     aggregatescan_5.a_4 AS a_4
|> AS projectscan_6
|> EXTEND
     projectscan_6.a_3 AS a_7,
     projectscan_6.a_4 AS a_8
|> AGGREGATE
   GROUP BY a_7, a_8
|> AS aggregatescan_9
|> SELECT
     aggregatescan_9.a_7 AS int32,
     aggregatescan_9.a_8 AS a_8;
==

# GROUP BY ALL in inner subquery and outermost query.
SELECT *
FROM (
  SELECT *
  FROM (
    SELECT *, COUNT(*)
    FROM (
      SELECT 1 AS a, 2 AS b
    )
    GROUP BY ALL
  )
)
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  projectscan_7.a_4 AS a,
  projectscan_7.a_5 AS b,
  projectscan_7.a_6 AS a_10
FROM
  (
    SELECT
      projectscan_3.a_1 AS a_4,
      projectscan_3.a_2 AS a_5,
      COUNT(*) AS a_6
    FROM
      (
        SELECT
          1 AS a_1,
          2 AS a_2
      ) AS projectscan_3
    GROUP BY ALL
  ) AS projectscan_7
GROUP BY ALL;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  1 AS a_1,
  2 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_1 AS a_4,
     projectscan_3.a_2 AS a_5
|> AGGREGATE
     COUNT(*) AS a_6
   GROUP BY a_4, a_5
|> AS aggregatescan_7
|> SELECT
     aggregatescan_7.a_4 AS a_4,
     aggregatescan_7.a_5 AS a_5,
     aggregatescan_7.a_6 AS a_6
|> AS projectscan_8
|> EXTEND
     projectscan_8.a_4 AS a_9,
     projectscan_8.a_5 AS a_10,
     projectscan_8.a_6 AS a_11
|> AGGREGATE
   GROUP BY a_9, a_10, a_11
|> AS aggregatescan_12
|> SELECT
     aggregatescan_12.a_9 AS a,
     aggregatescan_12.a_10 AS b,
     aggregatescan_12.a_11 AS a_11;
==

[language_features=NONE,+GROUP_BY_ALL,+GROUP_BY_STRUCT]
WITH T AS (
  SELECT STRUCT(1 AS a1, STRUCT(STRUCT(1 AS c1, 1 AS c2) AS b1, 1 AS b2) AS a2) AS x, 1 AS y
)
SELECT x.a2.b1, x.a1, x.a2, SUM(y)
FROM T
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  T AS (
    SELECT
      STRUCT< a1 INT64, a2 STRUCT< b1 STRUCT< c1 INT64, c2 INT64 >, b2 INT64 > > (1, STRUCT< b1 STRUCT< c1 INT64,
        c2 INT64 >, b2 INT64 > (STRUCT< c1 INT64, c2 INT64 > (1, 1), 1)) AS a_1,
      1 AS a_2
  )
SELECT
  aggregatescan_7.a_5.b1 AS b1,
  aggregatescan_7.a_4 AS a1,
  aggregatescan_7.a_5 AS a2,
  aggregatescan_7.a_6 AS a_6
FROM
  (
    SELECT
      withrefscan_3.a_1.a1 AS a_4,
      withrefscan_3.a_1.a2 AS a_5,
      SUM(withrefscan_3.a_2) AS a_6
    FROM
      T AS withrefscan_3
    GROUP BY ALL
  ) AS aggregatescan_7;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  T AS (
    SELECT
      STRUCT< a1 INT64, a2 STRUCT< b1 STRUCT< c1 INT64, c2 INT64 >, b2 INT64 > > (1, STRUCT< b1 STRUCT< c1 INT64,
        c2 INT64 >, b2 INT64 > (STRUCT< c1 INT64, c2 INT64 > (1, 1), 1)) AS a_1,
      1 AS a_2
  )
FROM
  T AS withrefscan_3
|> EXTEND
     withrefscan_3.a_1.a1 AS a_4,
     withrefscan_3.a_1.a2 AS a_5
|> AGGREGATE
     SUM(withrefscan_3.a_2) AS a_6
   GROUP BY a_4, a_5
|> AS aggregatescan_7
|> SELECT
     aggregatescan_7.a_5.b1 AS b1,
     aggregatescan_7.a_4 AS a1,
     aggregatescan_7.a_5 AS a2,
     aggregatescan_7.a_6 AS a_6;
==

[language_features=NONE,+GROUP_BY_ALL,+GROUP_BY_STRUCT]
SELECT (SELECT x.a2.b1), [x.a2.b1.c1, x.a2.b2], x.a2, SUM(y)
FROM (
  SELECT STRUCT(1 AS a1, STRUCT(STRUCT(1 AS c1, 1 AS c2) AS b1, 1 AS b2) AS a2) AS x, 1 AS y
) AS T
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  (
    SELECT
      aggregatescan_6.a_4.b1 AS a_8
  ) AS a_7,
  ARRAY< INT64 >[aggregatescan_6.a_4.b1.c1, aggregatescan_6.a_4.b2] AS a_9,
  aggregatescan_6.a_4 AS a2,
  aggregatescan_6.a_5 AS a_5
FROM
  (
    SELECT
      projectscan_3.a_1.a2 AS a_4,
      SUM(projectscan_3.a_2) AS a_5
    FROM
      (
        SELECT
          STRUCT< a1 INT64, a2 STRUCT< b1 STRUCT< c1 INT64, c2 INT64 >, b2 INT64 > > (1, STRUCT< b1 STRUCT< c1 INT64,
            c2 INT64 >, b2 INT64 > (STRUCT< c1 INT64, c2 INT64 > (1, 1), 1)) AS a_1,
          1 AS a_2
      ) AS projectscan_3
    GROUP BY ALL
  ) AS aggregatescan_6;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
SELECT
  STRUCT< a1 INT64, a2 STRUCT< b1 STRUCT< c1 INT64, c2 INT64 >, b2 INT64 > > (1, STRUCT< b1 STRUCT< c1 INT64,
    c2 INT64 >, b2 INT64 > (STRUCT< c1 INT64, c2 INT64 > (1, 1), 1)) AS a_1,
  1 AS a_2
|> AS projectscan_3
|> EXTEND
     projectscan_3.a_1.a2 AS a_4
|> AGGREGATE
     SUM(projectscan_3.a_2) AS a_5
   GROUP BY a_4
|> AS aggregatescan_6
|> SELECT
     (
       SELECT
         aggregatescan_6.a_4.b1 AS a_8
     ) AS a_7,
     ARRAY< INT64 >[aggregatescan_6.a_4.b1.c1, aggregatescan_6.a_4.b2] AS a_9,
     aggregatescan_6.a_4 AS a2,
     aggregatescan_6.a_5 AS a_5;
==

[language_features=NONE,+GROUP_BY_ALL,+GROUP_BY_STRUCT]
WITH T AS (
  SELECT STRUCT(1 AS a1, STRUCT(STRUCT(1 AS c1, 1 AS c2) AS b1, 1 AS b2) AS a2) AS x, 1 AS y
)
SELECT x.a2.b1, (SELECT x), SUM(y)
FROM T
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
WITH
  T AS (
    SELECT
      STRUCT< a1 INT64, a2 STRUCT< b1 STRUCT< c1 INT64, c2 INT64 >, b2 INT64 > > (1, STRUCT< b1 STRUCT< c1 INT64,
        c2 INT64 >, b2 INT64 > (STRUCT< c1 INT64, c2 INT64 > (1, 1), 1)) AS a_1,
      1 AS a_2
  )
SELECT
  withrefscan_3.a_1.a2.b1 AS b1,
  (
    SELECT
      withrefscan_3.a_1 AS a_4
  ) AS a_6,
  SUM(withrefscan_3.a_2) AS a_7
FROM
  T AS withrefscan_3
GROUP BY ALL;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
WITH
  T AS (
    SELECT
      STRUCT< a1 INT64, a2 STRUCT< b1 STRUCT< c1 INT64, c2 INT64 >, b2 INT64 > > (1, STRUCT< b1 STRUCT< c1 INT64,
        c2 INT64 >, b2 INT64 > (STRUCT< c1 INT64, c2 INT64 > (1, 1), 1)) AS a_1,
      1 AS a_2
  )
FROM
  T AS withrefscan_3
|> EXTEND
     withrefscan_3.a_1.a2.b1 AS a_5,
     (
       SELECT
         withrefscan_3.a_1 AS a_4
     ) AS a_6
|> AGGREGATE
     SUM(withrefscan_3.a_2) AS a_7
   GROUP BY a_5, a_6
|> AS aggregatescan_8
|> SELECT
     aggregatescan_8.a_5 AS b1,
     aggregatescan_8.a_6 AS a_6,
     aggregatescan_8.a_7 AS a_7;
==

# Repro for b/323439034: When SELECT clause does not contain aggregate column
# and no grouping keys are chosen, it should produce AggregateScan with no
# aggregate_list and no group_by_list.
SELECT 'a' AS x
FROM KeyValue
GROUP BY ALL
--
[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  "a" AS x
FROM
  (
    SELECT
      NULL
    FROM
      KeyValue
    GROUP BY ALL
  ) AS aggregatescan_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  KeyValue
|> SELECT
     NULL
|> AS aggregatescan_1
|> SELECT
     "a" AS x;
==

