[default language_features=MAXIMUM,+PIPES,+LATERAL_JOIN,+TABLE_VALUED_FUNCTIONS,+TABLESAMPLE,+TABLESAMPLE_FROM_TABLE_VALUED_FUNCTIONS]

# LATERAL can be on the RHS, on a subquery or a TVF call.
# It can also have aliases and postfix table ops.
select * FROM KeyValue t1
|> JOIN LATERAL (select * from KeyValue t2 where t2.key < t1.key) AS t2 TABLESAMPLE bernoulli (10 percent)
|> LEFT JOIN LATERAL tvf_one_relation_arg_with_fixed_output(TABLE KeyValue) AS t3
--
ERROR: LATERAL cannot be combined with suffix table operators [at 4:73]
...from KeyValue t2 where t2.key < t1.key) AS t2 TABLESAMPLE bernoulli (10 pe...
                                                 ^
==

# LATERAL cannot be on the RHS of a RIGHT or FULL JOIN
FROM KeyValue t1
|> RIGHT JOIN LATERAL (select * from KeyValue t2 where t2.key < t1.key) AS t2 ON true
--

ERROR: LATERAL items cannot be on the RHS of a RIGHT or FULL JOIN [at 2:15]
|> RIGHT JOIN LATERAL (select * from KeyValue t2 where t2.key < t1.key) AS t2...
              ^
==

# LATERAL cannot be on the RHS of a RIGHT or FULL JOIN. Here, it is after, so it
# is OK, as it's under CROSS JOIN instead.
FROM KeyValue t1
|> RIGHT JOIN KeyValue t2 ON true
|> CROSS JOIN LATERAL (select * from KeyValue t3 where t3.key < t1.key AND t1.key < t2.key) AS t3
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#3 AS Key [INT64]
| +-KeyValue.Value#4 AS Value [STRING]
| +-KeyValue.Key#5 AS Key [INT64]
| +-KeyValue.Value#6 AS Value [STRING]
+-query=
  +-JoinScan
    +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4, Key#5, Value#6]
    +-left_scan=
    | +-JoinScan
    |   +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
    |   +-join_type=RIGHT
    |   +-left_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="t1")
    |   +-right_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="t2")
    |   +-join_expr=
    |     +-Literal(type=BOOL, value=true)
    +-right_scan=
    | +-ProjectScan
    |   +-column_list=KeyValue.[Key#5, Value#6]
    |   +-input_scan=
    |     +-FilterScan
    |       +-column_list=KeyValue.[Key#5, Value#6]
    |       +-input_scan=
    |       | +-TableScan(column_list=KeyValue.[Key#5, Value#6], table=KeyValue, column_index_list=[0, 1], alias="t3")
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
    |           +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#5)
    |           | +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |           +-FunctionCall(ZetaSQL:$less(INT64, INT64) -> BOOL)
    |             +-ColumnRef(type=INT64, column=KeyValue.Key#1, is_correlated=TRUE)
    |             +-ColumnRef(type=INT64, column=KeyValue.Key#3, is_correlated=TRUE)
    +-is_lateral=TRUE
    +-parameter_list=
      +-ColumnRef(type=INT64, column=KeyValue.Key#1)
      +-ColumnRef(type=INT64, column=KeyValue.Key#3)
