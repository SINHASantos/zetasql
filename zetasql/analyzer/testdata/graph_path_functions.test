[default language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+WITH_RECURSIVE,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_PATH_TYPE]
[default no_test_extract_table_names]

[run_sqlbuilder]
[show_sqlbuilder_output]
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)
  LET q = PATH(a)
  LET concatted = p || q
  RETURN PATH_LENGTH(concatted) as len
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.len#5 AS len [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.len#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.len#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.len#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.len#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $graph_table.p#2]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $graph_table.p#2]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.a#1]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#2)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.a#1
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $graph_table.p#2, $graph_table.q#3]
                  | +-expr_list=
                  | | +-q#3 :=
                  | |   +-FunctionCall(ZetaSQL:path(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, repeated <graph_edge>, repeated(0) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $graph_table.p#2])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $graph_table.p#2, $graph_table.q#3, $graph_table.concatted#4]
                  | +-expr_list=
                  | | +-concatted#4 :=
                  | |   +-FunctionCall(ZetaSQL:$path_concat(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>, repeated(1) PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>, column=$graph_table.p#2)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>, column=$graph_table.q#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $graph_table.p#2, $graph_table.q#3])
                  +-ProjectScan
                    +-column_list=[$graph_table.len#5]
                    +-expr_list=
                    | +-len#5 :=
                    |   +-FunctionCall(ZetaSQL:path_length(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>) -> INT64)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>, column=$graph_table.concatted#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $graph_table.p#2, $graph_table.q#3, $graph_table.concatted#4])

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  aml_1.a_6 AS len
FROM
  GRAPH_TABLE(
    aml
    MATCH
      a_2 = (a_3
      IS (% | ! %))
    LET
      a_4 = PATH(a_3)
    LET
      a_5 = a_2 || a_4
    RETURN
      PATH_LENGTH(a_5) AS a_6
  ) AS aml_1;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  GRAPH_TABLE(
    aml
    MATCH
      a_2 = (a_3
      IS (% | ! %))
    LET
      a_4 = PATH(a_3)
    LET
      a_5 = a_2 || a_4
    RETURN
      PATH_LENGTH(a_5) AS a_6
  ) AS aml_1
|> SELECT
     aml_1.a_6 AS len;

==

# PATH_LENGTH

SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=((a))(b)
  RETURN PATH_LENGTH(q) as len
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.len#5 AS len [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.len#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.len#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.len#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.len#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.b#3, $graph_table.q#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.b#3, $graph_table.q#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphPathScan
                  | |   | | +-column_list=[$element_table.a#1, $graph_table.$path#2]
                  | |   | | +-input_scan_list=
                  | |   | | | +-GraphNodeScan
                  | |   | | |   +-column_list=[$element_table.a#1]
                  | |   | | |   +-label_expr=
                  | |   | | |   | +-GraphLabelNaryExpr
                  | |   | | |   |   +-op=OR
                  | |   | | |   |   +-operand_list=
                  | |   | | |   |     +-GraphWildCardLabel
                  | |   | | |   |     +-GraphLabelNaryExpr
                  | |   | | |   |       +-op=NOT
                  | |   | | |   |       +-operand_list=
                  | |   | | |   |         +-GraphWildCardLabel
                  | |   | | |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | | +-path=
                  | |   | | | +-ColumnHolder(column=$graph_table.$path#2)
                  | |   | | +-head=$element_table.a#1
                  | |   | | +-tail=$element_table.a#1
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.len#5]
                    +-expr_list=
                    | +-len#5 :=
                    |   +-FunctionCall(ZetaSQL:path_length(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>) -> INT64)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>, column=$graph_table.q#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.b#3, $graph_table.q#4])
==

# PATH_FIRST/PATH_LAST

SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a)-[e]-(b)
  RETURN PATH_FIRST(q).id as first, PATH_LAST(q).id as last
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.first#5 AS first [INT64]
| +-$graph_table.last#6 AS last [INT64]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[first#5, last#6]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[first#5, last#6]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[first#5, last#6]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[first#5, last#6]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=$graph_table.[first#5, last#6]
                    +-expr_list=
                    | +-first#5 :=
                    | | +-GraphGetElementProperty
                    | |   +-type=INT64
                    | |   +-expr=
                    | |   | +-FunctionCall(ZetaSQL:path_first(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                    | |   |   +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#4)
                    | |   +-property=id(INT64)
                    | +-last#6 :=
                    |   +-GraphGetElementProperty
                    |     +-type=INT64
                    |     +-expr=
                    |     | +-FunctionCall(ZetaSQL:path_last(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                    |     |   +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#4)
                    |     +-property=id(INT64)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4])

==

# PATH creation from single node
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a)-[e]-(b)
  LET q2 = PATH(a)
  LET neq = q = q2
  RETURN neq
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.neq#7 AS neq [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.neq#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.neq#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.neq#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.neq#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5]
                  | +-expr_list=
                  | | +-q2#5 :=
                  | |   +-FunctionCall(ZetaSQL:path(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, repeated <graph_edge>, repeated(0) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5, $graph_table.neq#6]
                  | +-expr_list=
                  | | +-neq#6 :=
                  | |   +-FunctionCall(ZetaSQL:$equal(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> BOOL)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#4)
                  | |     +-Cast(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>> -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |       +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<>>, column=$graph_table.q2#5)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5])
                  +-ProjectScan
                    +-column_list=[$graph_table.neq#7]
                    +-expr_list=
                    | +-neq#7 := ColumnRef(type=BOOL, column=$graph_table.neq#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5, $graph_table.neq#6])

==

# PATH creation
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a)-[e]-(b)
  LET q2 = PATH(a, e, b)
  LET eq = q = q2
  RETURN eq
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.eq#7 AS eq [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.eq#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.eq#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.eq#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.eq#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5]
                  | +-expr_list=
                  | | +-q2#5 :=
                  | |   +-FunctionCall(ZetaSQL:path(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, repeated(1) GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, repeated(1) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.a#1)
                  | |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5, $graph_table.eq#6]
                  | +-expr_list=
                  | | +-eq#6 :=
                  | |   +-FunctionCall(ZetaSQL:$equal(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> BOOL)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#4)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q2#5)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5])
                  +-ProjectScan
                    +-column_list=[$graph_table.eq#7]
                    +-expr_list=
                    | +-eq#7 := ColumnRef(type=BOOL, column=$graph_table.eq#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5, $graph_table.eq#6])

==

# PATH with no arguments is wrong
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a:Person)-[e]-(b:Account)
  LET q2 = PATH()
  LET eq = q = q2
  RETURN eq
)

--
ERROR: No matching signature for function PATH with no arguments
  Signature: PATH(GRAPH_NODE, [[GRAPH_EDGE, GRAPH_NODE], ...])
    Signature requires at least 1 argument, found 0 arguments [at 4:12]
  LET q2 = PATH()
           ^

==

# PATH creation wrong types
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a:Person)-[e]-(b:Account)
  LET q2 = PATH(a, b, e)
  LET eq = q = q2
  RETURN eq
)

--
ERROR: No matching signature for function PATH
  Argument types: GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, ...>, GRAPH_NODE(aml)<balance UINT64, id INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: PATH(GRAPH_NODE, [[GRAPH_EDGE, GRAPH_NODE], ...])
    Argument 2: expected GRAPH_EDGE, found GRAPH_NODE(aml)<balance UINT64, id INT64> [at 4:12]
  LET q2 = PATH(a, b, e)
           ^

==

# PATH creation wrong types
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a:Person)-[e]-(b:Account)
  LET q2 = PATH(e)
  LET eq = q = q2
  RETURN eq
)

--
ERROR: No matching signature for function PATH
  Argument types: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: PATH(GRAPH_NODE, [[GRAPH_EDGE, GRAPH_NODE], ...])
    Argument 1: expected GRAPH_NODE, found GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...> [at 4:12]
  LET q2 = PATH(e)
           ^

==

# PATH creation wrong number of arguments
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a)-[e]-(b)
  LET q2 = PATH(a, e, b, e)
  LET eq = q = q2
  RETURN eq
)

--
ERROR: No matching signature for function PATH
  Argument types: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>
  Signature: PATH(GRAPH_NODE, [[GRAPH_EDGE, GRAPH_NODE], ...])
    Wrong number of repeated arguments provided. Expected a multiple of 2 but got 3 repeated arguments [at 4:12]
  LET q2 = PATH(a, e, b, e)
           ^

==

# PATH creation different types
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(a:Person)-[e]-(b:Account)
  LET q2 = PATH(a, e, b)
  LET eq = q = q2
  RETURN eq
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.eq#7 AS eq [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.eq#7]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.eq#7]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.eq#7]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.eq#7]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=46-52, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=61-68, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5]
                  | +-expr_list=
                  | | +-q2#5 :=
                  | |   +-FunctionCall(ZetaSQL:path(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, repeated(1) GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, repeated(1) GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |     +-Cast(GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |     | +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, birthday DATE, data BYTES, id INT64, name STRING>, column=$element_table.a#1)
                  | |     +-ColumnRef(type=GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, column=$element_table.e#2)
                  | |     +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>)
                  | |       +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.b#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5, $graph_table.eq#6]
                  | +-expr_list=
                  | | +-eq#6 :=
                  | |   +-FunctionCall(ZetaSQL:$equal(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> BOOL)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#4)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q2#5)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5])
                  +-ProjectScan
                    +-column_list=[$graph_table.eq#7]
                    +-expr_list=
                    | +-eq#7 := ColumnRef(type=BOOL, column=$graph_table.eq#6)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.q#4, $graph_table.q2#5, $graph_table.eq#6])


==

# Path concat
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)-[e]-(b)
  MATCH q=(b)-[e2]-(c)
  LET together = p || q
  RETURN PATH_LENGTH(together) as a
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.a#10 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.a#10]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#10]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a#10]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#10]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e2#6]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#7]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#8)
                  | |   +-head=$element_table.b#5
                  | |   +-tail=$element_table.c#7
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#5)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8, $graph_table.together#9]
                  | +-expr_list=
                  | | +-together#9 :=
                  | |   +-FunctionCall(ZetaSQL:$path_concat(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, repeated(1) PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#8)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8])
                  +-ProjectScan
                    +-column_list=[$graph_table.a#10]
                    +-expr_list=
                    | +-a#10 :=
                    |   +-FunctionCall(ZetaSQL:path_length(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.together#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8, $graph_table.together#9])

==

# Path concat different types
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a:Person)-[e]-(b:Account)
  MATCH q=(b)-[e2]-(c:Person)
  LET together = p || q
  RETURN PATH_LENGTH(together) as a
)

--
QueryStmt
+-output_column_list=
| +-$graph_table.a#10 AS a [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.a#10]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.a#10]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.a#10]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.a#10]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabel(parse_location=46-52, label=aml.Person)
                  | |   | | +-target_element_table_list=[aml.Person]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.b#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=61-68, label=aml.Account)
                  | |   |   +-target_element_table_list=[aml.Account]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.b#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.b#5]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.e2#6]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=ANY
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#7]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabel(parse_location=92-98, label=aml.Person)
                  | |   |   +-target_element_table_list=[aml.Person]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#8)
                  | |   +-head=$element_table.b#5
                  | |   +-tail=$element_table.c#7
                  | +-filter_expr=
                  | | +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                  | |   +-ColumnRef(type=GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, column=$element_table.b#5)
                  | |   +-Cast(GRAPH_NODE(aml)<balance UINT64, id INT64> -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                  | |     +-ColumnRef(type=GRAPH_NODE(aml)<balance UINT64, id INT64>, column=$element_table.b#3)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $element_table.b#3, $graph_table.p#4])
                  +-ProjectScan
                  | +-column_list=[$element_table.a#1, $element_table.e#2, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8, $graph_table.together#9]
                  | +-expr_list=
                  | | +-together#9 :=
                  | |   +-FunctionCall(ZetaSQL:$path_concat(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, repeated(1) PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |     +-Cast(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>> -> PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |     | +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#8)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8])
                  +-ProjectScan
                    +-column_list=[$graph_table.a#10]
                    +-expr_list=
                    | +-a#10 :=
                    |   +-FunctionCall(ZetaSQL:path_length(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> INT64)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.together#9)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.e#2, $graph_table.p#4, $element_table.b#5, $element_table.e2#6, $element_table.c#7, $graph_table.q#8, $graph_table.together#9])


==

[language_features=NONE,+SQL_GRAPH,+SQL_GRAPH_ADVANCED_QUERY,+WITH_RECURSIVE,+SQL_GRAPH_BOUNDED_PATH_QUANTIFICATION,+SQL_GRAPH_PATH_TYPE,+SQL_GRAPH_EXPOSE_GRAPH_ELEMENT]
# Path concat with graph reference mismatch fails at resolution
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)-[e]-(b:Person)
  LET x = (SELECT * FROM GRAPH_TABLE(aml_multi MATCH inner_path=(inner_b) return inner_b))
  LET q = PATH(x)
  LET together = p || q
  RETURN PATH_LENGTH(together) as a
)

--
ERROR: Cannot concatenate paths from different graphs [at 7:18]
  LET together = p || q
                 ^

==

# "concat" function not supported
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)-[e]-(b)
  MATCH q=(b)-[e2]-(c)
  LET combined = concat(p, q, p, q)
  RETURN PATH_LENGTH(combined) as a
)

--
ERROR: No matching signature for function CONCAT
  Argument types: PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>, PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>, PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>, PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>>
  Signature: CONCAT(STRING, [STRING, ...])
    Argument 1: Unable to coerce type PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>> to expected type STRING
  Signature: CONCAT(BYTES, [BYTES, ...])
    Argument 1: Unable to coerce type PATH<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, ...>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, ...>> to expected type BYTES [at 5:18]
  LET combined = concat(p, q, p, q)
                 ^

==

# impossible path is identified as an error
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(:Syndicate)
  MATCH q=(c:Account)-[e2]-(:Account)
  RETURN PATH_LENGTH(p || q) as a
)

--
ERROR: Cannot concatenate paths where the tail of the first path and the head of the second path have no shared properties [at 5:22]
  RETURN PATH_LENGTH(p || q) as a
                     ^

==

# NODES/EDGES
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH q=(-[e]-){1,3}
  LET edges = EDGES(q)
  LET nodes = NODES(q)
  RETURN edges[OFFSET(0)] = e[OFFSET(0)] as should_be_equal,
         ARRAY_LENGTH(nodes) = 10 as should_be_false,
         NODES[OFFSET(0)] = PATH_FIRST(q) as first_is_first
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.should_be_equal#13 AS should_be_equal [BOOL]
| +-$graph_table.should_be_false#14 AS should_be_false [BOOL]
| +-$graph_table.first_is_first#15 AS first_is_first [BOOL]
+-query=
  +-ProjectScan
    +-column_list=$graph_table.[should_be_equal#13, should_be_false#14, first_is_first#15]
    +-input_scan=
      +-GraphTableScan
        +-column_list=$graph_table.[should_be_equal#13, should_be_false#14, first_is_first#15]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=$graph_table.[should_be_equal#13, should_be_false#14, first_is_first#15]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=$graph_table.[should_be_equal#13, should_be_false#14, first_is_first#15]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $graph_table.q#10]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $graph_table.q#10]
                  | |   +-input_scan_list=
                  | |   | +-GraphPathScan
                  | |   |   +-column_list=[$path_scan.$head#8, $element_table.e#6, $path_scan.$tail#9, $graph_table.$path#4]
                  | |   |   +-input_scan_list=
                  | |   |   | +-GraphNodeScan
                  | |   |   | | +-column_list=[$element_table.$element1#1]
                  | |   |   | | +-label_expr=
                  | |   |   | | | +-GraphLabelNaryExpr
                  | |   |   | | |   +-op=OR
                  | |   |   | | |   +-operand_list=
                  | |   |   | | |     +-GraphWildCardLabel
                  | |   |   | | |     +-GraphLabelNaryExpr
                  | |   |   | | |       +-op=NOT
                  | |   |   | | |       +-operand_list=
                  | |   |   | | |         +-GraphWildCardLabel
                  | |   |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   |   | +-GraphEdgeScan
                  | |   |   | | +-column_list=[$element_table.e#2]
                  | |   |   | | +-label_expr=
                  | |   |   | | | +-GraphLabelNaryExpr
                  | |   |   | | |   +-op=OR
                  | |   |   | | |   +-operand_list=
                  | |   |   | | |     +-GraphWildCardLabel
                  | |   |   | | |     +-GraphLabelNaryExpr
                  | |   |   | | |       +-op=NOT
                  | |   |   | | |       +-operand_list=
                  | |   |   | | |         +-GraphWildCardLabel
                  | |   |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   |   | | +-orientation=ANY
                  | |   |   | +-GraphNodeScan
                  | |   |   |   +-column_list=[$element_table.$element2#3]
                  | |   |   |   +-label_expr=
                  | |   |   |   | +-GraphLabelNaryExpr
                  | |   |   |   |   +-op=OR
                  | |   |   |   |   +-operand_list=
                  | |   |   |   |     +-GraphWildCardLabel
                  | |   |   |   |     +-GraphLabelNaryExpr
                  | |   |   |   |       +-op=NOT
                  | |   |   |   |       +-operand_list=
                  | |   |   |   |         +-GraphWildCardLabel
                  | |   |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   |   +-path=
                  | |   |   | +-ColumnHolder(column=$graph_table.$path#4)
                  | |   |   +-head=$path_scan.$head#8
                  | |   |   +-tail=$path_scan.$tail#9
                  | |   |   +-quantifier=
                  | |   |   | +-GraphPathPatternQuantifier
                  | |   |   |   +-lower_bound=
                  | |   |   |   | +-Literal(type=INT64, value=1)
                  | |   |   |   +-upper_bound=
                  | |   |   |     +-Literal(type=INT64, value=3)
                  | |   |   +-group_variable_list=
                  | |   |     +-GraphMakeArrayVariable(element=$element_table.$element1#1, array=$element_table.$element1#5)
                  | |   |     +-GraphMakeArrayVariable(element=$element_table.e#2, array=$element_table.e#6)
                  | |   |     +-GraphMakeArrayVariable(element=$element_table.$element2#3, array=$element_table.$element2#7)
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.q#10)
                  | |   +-head=$path_scan.$head#8
                  | |   +-tail=$path_scan.$tail#9
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                  | +-column_list=[$element_table.e#6, $graph_table.q#10, $graph_table.edges#11]
                  | +-expr_list=
                  | | +-edges#11 :=
                  | |   +-FunctionCall(ZetaSQL:edges(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#10)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.e#6, $graph_table.q#10])
                  +-ProjectScan
                  | +-column_list=[$element_table.e#6, $graph_table.q#10, $graph_table.edges#11, $graph_table.nodes#12]
                  | +-expr_list=
                  | | +-nodes#12 :=
                  | |   +-FunctionCall(ZetaSQL:nodes(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>)
                  | |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#10)
                  | +-input_scan=
                  |   +-GraphRefScan(column_list=[$element_table.e#6, $graph_table.q#10, $graph_table.edges#11])
                  +-ProjectScan
                    +-column_list=$graph_table.[should_be_equal#13, should_be_false#14, first_is_first#15]
                    +-expr_list=
                    | +-should_be_equal#13 :=
                    | | +-FunctionCall(ZetaSQL:$equal(GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>, GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>) -> BOOL)
                    | |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, INT64) -> GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                    | |   | +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.edges#11)
                    | |   | +-Literal(type=INT64, value=0)
                    | |   +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, INT64) -> GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>)
                    | |     +-ColumnRef(type=ARRAY<GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$element_table.e#6)
                    | |     +-Literal(type=INT64, value=0)
                    | +-should_be_false#14 :=
                    | | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                    | |   +-FunctionCall(ZetaSQL:array_length(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>) -> INT64)
                    | |   | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$graph_table.nodes#12)
                    | |   +-Literal(type=INT64, value=10)
                    | +-first_is_first#15 :=
                    |   +-FunctionCall(ZetaSQL:$equal(GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>) -> BOOL)
                    |     +-FunctionCall(ZetaSQL:$array_at_offset(ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, INT64) -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                    |     | +-ColumnRef(type=ARRAY<GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>>, column=$graph_table.nodes#12)
                    |     | +-Literal(type=INT64, value=0)
                    |     +-FunctionCall(ZetaSQL:path_first(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>)
                    |       +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.q#10)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.e#6, $graph_table.q#10, $graph_table.edges#11, $graph_table.nodes#12])
==

# IS_ACYCLIC
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)-[b]->(c)
  RETURN IS_ACYCLIC(p) as output
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.output#5 AS output [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.output#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.output#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.output#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.output#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.b#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.c#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.output#5]
                    +-expr_list=
                    | +-output#5 :=
                    |   +-FunctionCall(ZetaSQL:is_acyclic(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> BOOL)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4])
==

# IS_TRAIL
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)-[b]->(c)
  RETURN IS_TRAIL(p) as output
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.output#5 AS output [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.output#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.output#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.output#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.output#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.b#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.c#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.output#5]
                    +-expr_list=
                    | +-output#5 :=
                    |   +-FunctionCall(ZetaSQL:is_trail(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> BOOL)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4])
==

# IS_SIMPLE
SELECT * FROM GRAPH_TABLE(
  aml
  MATCH p=(a)-[b]->(c)
  RETURN IS_SIMPLE(p) as output
)
--
QueryStmt
+-output_column_list=
| +-$graph_table.output#5 AS output [BOOL]
+-query=
  +-ProjectScan
    +-column_list=[$graph_table.output#5]
    +-input_scan=
      +-GraphTableScan
        +-column_list=[$graph_table.output#5]
        +-property_graph=aml
        +-input_scan=
          +-GraphLinearScan
            +-column_list=[$graph_table.output#5]
            +-scan_list=
              +-GraphLinearScan
                +-column_list=[$graph_table.output#5]
                +-scan_list=
                  +-GraphScan
                  | +-column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4]
                  | +-input_scan_list=
                  | | +-GraphPathScan
                  | |   +-column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4]
                  | |   +-input_scan_list=
                  | |   | +-GraphNodeScan
                  | |   | | +-column_list=[$element_table.a#1]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   | +-GraphEdgeScan
                  | |   | | +-column_list=[$element_table.b#2]
                  | |   | | +-label_expr=
                  | |   | | | +-GraphLabelNaryExpr
                  | |   | | |   +-op=OR
                  | |   | | |   +-operand_list=
                  | |   | | |     +-GraphWildCardLabel
                  | |   | | |     +-GraphLabelNaryExpr
                  | |   | | |       +-op=NOT
                  | |   | | |       +-operand_list=
                  | |   | | |         +-GraphWildCardLabel
                  | |   | | +-target_element_table_list=[aml.PersonOwnAccount,aml.Transfer]
                  | |   | | +-orientation=RIGHT
                  | |   | +-GraphNodeScan
                  | |   |   +-column_list=[$element_table.c#3]
                  | |   |   +-label_expr=
                  | |   |   | +-GraphLabelNaryExpr
                  | |   |   |   +-op=OR
                  | |   |   |   +-operand_list=
                  | |   |   |     +-GraphWildCardLabel
                  | |   |   |     +-GraphLabelNaryExpr
                  | |   |   |       +-op=NOT
                  | |   |   |       +-operand_list=
                  | |   |   |         +-GraphWildCardLabel
                  | |   |   +-target_element_table_list=[aml.Account,aml.Person,aml.Syndicate]
                  | |   +-path=
                  | |   | +-ColumnHolder(column=$graph_table.p#4)
                  | |   +-head=$element_table.a#1
                  | |   +-tail=$element_table.c#3
                  | +-input_scan=
                  |   +-SingleRowScan
                  +-ProjectScan
                    +-column_list=[$graph_table.output#5]
                    +-expr_list=
                    | +-output#5 :=
                    |   +-FunctionCall(ZetaSQL:is_simple(PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>) -> BOOL)
                    |     +-ColumnRef(type=PATH<node: GRAPH_NODE(aml)<age UINT32, balance UINT64, birthday DATE, data BYTES, id INT64, name STRING, syndicateData ARRAY<INT64>, syndicateId INT64, syndicateName STRING>, edge: GRAPH_EDGE(aml)<accountId INT64, amount UINT64, personId INT64, targetAccountId INT64>>, column=$graph_table.p#4)
                    +-input_scan=
                      +-GraphRefScan(column_list=[$element_table.a#1, $element_table.b#2, $element_table.c#3, $graph_table.p#4])
