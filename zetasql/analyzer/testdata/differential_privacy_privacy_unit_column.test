# Selecting privacy unit column from table.
[default language_features=MAXIMUM,+DIFFERENTIAL_PRIVACY,+NAMED_ARGUMENTS,+NUMERIC_TYPE]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
select with differential_privacy options(privacy_unit_column=`int64`) count(*)
from SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        +-aggregate_list=
        | +-$agg1#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT64, column=SimpleTypes.int64#2)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#22, $group_by.$uid#23]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   +-group_by_list=
        |   | +-$uid#23 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-aggregate_list=
        |     +-$agg1_partial#22 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#20 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#22)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#26)
==

# Setting nested columns.
select with differential_privacy options(privacy_unit_column=str.s) count(*)
from (SELECT STRUCT(SimpleTypes.`int64` AS i, SimpleTypes.`string` AS s) AS str FROM SimpleTypes) group by str.i;
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#21 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#21]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#21]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[$subquery1.str#20]
        |   +-expr_list=
        |   | +-str#20 :=
        |   |   +-MakeStruct
        |   |     +-type=STRUCT<i INT64, s STRING>
        |   |     +-field_list=
        |   |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |       +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   +-input_scan=
        |     +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        +-group_by_list=
        | +-i#22 :=
        |   +-GetStructField
        |     +-type=INT64
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<i INT64, s STRING>, column=$subquery1.str#20)
        |     +-field_idx=0
        +-aggregate_list=
        | +-$agg1#21 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column :=
            +-GetStructField
              +-type=STRING
              +-expr=
              | +-ColumnRef(type=STRUCT<i INT64, s STRING>, column=$subquery1.str#20)
              +-field_idx=1

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#21 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#21]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#21]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#24, $groupby.i_partial#25, $group_by.$uid#26]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$subquery1.str#20]
        |   |   +-expr_list=
        |   |   | +-str#20 :=
        |   |   |   +-MakeStruct
        |   |   |     +-type=STRUCT<i INT64, s STRING>
        |   |   |     +-field_list=
        |   |   |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |   |       +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        |   +-group_by_list=
        |   | +-i_partial#25 :=
        |   | | +-GetStructField
        |   | |   +-type=INT64
        |   | |   +-expr=
        |   | |   | +-ColumnRef(type=STRUCT<i INT64, s STRING>, column=$subquery1.str#20)
        |   | |   +-field_idx=0
        |   | +-$uid#26 :=
        |   |   +-GetStructField
        |   |     +-type=STRING
        |   |     +-expr=
        |   |     | +-ColumnRef(type=STRUCT<i INT64, s STRING>, column=$subquery1.str#20)
        |   |     +-field_idx=1
        |   +-aggregate_list=
        |     +-$agg1_partial#24 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-i#22 := ColumnRef(type=INT64, column=$groupby.i_partial#25)
        +-aggregate_list=
        | +-$agg1#21 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#24)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#29 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#29)
==

# Setting privacy unit column on Join.
select with differential_privacy options(privacy_unit_column=s2.`int32`) count(*)
from SimpleTypes AS s1 Right OUTER JOIN SimpleTypes AS s2 ON s1.`int64` = s2.`int64`;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#39 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#39]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#39]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=SimpleTypes.[int64#2, int32#20, int64#21]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias="s1")
        |   +-right_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int32#20, int64#21], table=SimpleTypes, column_index_list=[0, 1], alias="s2")
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#21)
        +-aggregate_list=
        | +-$agg1#39 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypes.int32#20)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#39 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#39]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#39]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#41, $group_by.$uid#42]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=SimpleTypes.[int64#2, int32#20, int64#21]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1], alias="s1")
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=SimpleTypes.[int32#20, int64#21], table=SimpleTypes, column_index_list=[0, 1], alias="s2")
        |   |   +-join_expr=
        |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |       +-ColumnRef(type=INT64, column=SimpleTypes.int64#21)
        |   +-group_by_list=
        |   | +-$uid#42 := ColumnRef(type=INT32, column=SimpleTypes.int32#20)
        |   +-aggregate_list=
        |     +-$agg1_partial#41 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#39 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#41)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#45 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#45)
==

# Setting privacy unit column on Join.
select with differential_privacy options(privacy_unit_column=s2.`int32`) count(*)
from SimpleTypes AS s1 CROSS JOIN SimpleTypes AS s2 ;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#39 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#39]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#39]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int32#20]
        |   +-left_scan=
        |   | +-TableScan(table=SimpleTypes, alias="s1")
        |   +-right_scan=
        |     +-TableScan(column_list=[SimpleTypes.int32#20], table=SimpleTypes, column_index_list=[0], alias="s2")
        +-aggregate_list=
        | +-$agg1#39 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypes.int32#20)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#39 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#39]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#39]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#41, $group_by.$uid#42]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypes.int32#20]
        |   |   +-left_scan=
        |   |   | +-TableScan(table=SimpleTypes, alias="s1")
        |   |   +-right_scan=
        |   |     +-TableScan(column_list=[SimpleTypes.int32#20], table=SimpleTypes, column_index_list=[0], alias="s2")
        |   +-group_by_list=
        |   | +-$uid#42 := ColumnRef(type=INT32, column=SimpleTypes.int32#20)
        |   +-aggregate_list=
        |     +-$agg1_partial#41 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#39 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#41)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#45 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#45)


==

# Setting on subquery correctly exporting privacy_unit_column name will work.
select with differential_privacy options(privacy_unit_column=`int32`) count(*)
from (SELECT * FROM SimpleTypes);
--

QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp_seconds#11, timestamp_millis#12, timestamp_micros#13, timestamp_nanos#14, timestamp#15, numeric#16, bignumeric#17, json#18, uuid#19]
        |   +-input_scan=
        |     +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp_seconds#11, timestamp_millis#12, timestamp_micros#13, timestamp_nanos#14, timestamp#15, numeric#16, bignumeric#17, json#18, uuid#19], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        +-aggregate_list=
        | +-$agg1#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypes.int32#1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#22, $group_by.$uid#23]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp_seconds#11, timestamp_millis#12, timestamp_micros#13, timestamp_nanos#14, timestamp#15, numeric#16, bignumeric#17, json#18, uuid#19]
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=SimpleTypes.[int32#1, int64#2, uint32#3, uint64#4, string#5, bytes#6, bool#7, float#8, double#9, date#10, timestamp_seconds#11, timestamp_millis#12, timestamp_micros#13, timestamp_nanos#14, timestamp#15, numeric#16, bignumeric#17, json#18, uuid#19], table=SimpleTypes, column_index_list=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])
        |   +-group_by_list=
        |   | +-$uid#23 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-aggregate_list=
        |     +-$agg1_partial#22 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#20 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#22)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#26)
==

# Setting privacy_unit_column to name that does not exist in the subquery will return an error.
select with differential_privacy options(privacy_unit_column=`int32`) count(*)
from (SELECT int64 FROM SimpleTypes);
--
ERROR: Unrecognized name: int32; Did you mean int64? [at 1:62]
select with differential_privacy options(privacy_unit_column=`int32`) count(*)
                                                             ^
==

# Overriding metadata column returns an error.
select with differential_privacy options(privacy_unit_column=`int32`) count(*)
from SimpleTypesWithAnonymizationUid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int32#1], table=SimpleTypesWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)

Rewrite ERROR: privacy_unit_column option cannot override the privacy unit column set in the table metadata: uid
==

# Overriding aliased metadata column returns an error.
select with differential_privacy options(privacy_unit_column=`int32`) count(*)
from (SELECT uid AS tmp_uid, `int32` FROM SimpleTypesWithAnonymizationUid);
--

[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, int32#1]
        |   +-input_scan=
        |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 10])
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)

Rewrite ERROR: privacy_unit_column option cannot override the privacy unit column set in the table metadata: uid
==

# Overriding metadata column on unpropagated privacy_unit_column in subquery returns an error.
select with differential_privacy options(privacy_unit_column=`int32`) count(*)
from (SELECT `int32` FROM SimpleTypesWithAnonymizationUid);
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1]
        |   +-input_scan=
        |     +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int32#1], table=SimpleTypesWithAnonymizationUid, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)

Rewrite ERROR: Subqueries of differential_privacy queries must explicitly SELECT the userid column 'uid'
==

# Overriding metadata column on join returns an error.
select with differential_privacy options(privacy_unit_column=SimpleTypes.`int32`) count(*)
from SimpleTypesWithAnonymizationUid CROSS JOIN SimpleTypes;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int32#13]
        |   +-left_scan=
        |   | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        |   +-right_scan=
        |     +-TableScan(column_list=[SimpleTypes.int32#13], table=SimpleTypes, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypes.int32#13)

Rewrite ERROR: privacy_unit_column option cannot override the privacy unit column set in the table metadata: uid
==

# Proto backed table
select with differential_privacy options(privacy_unit_column=int64_key_1)
count(*) FROM KitchenSinkValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#2 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column :=
            +-GetProtoField
              +-type=INT64
              +-expr=
              | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
              +-field_descriptor=int64_key_1

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#4, $group_by.$uid#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=[KitchenSinkValueTable.value#1], table=KitchenSinkValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#5 :=
        |   |   +-GetProtoField
        |   |     +-type=INT64
        |   |     +-expr=
        |   |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=KitchenSinkValueTable.value#1)
        |   |     +-field_descriptor=int64_key_1
        |   +-aggregate_list=
        |     +-$agg1_partial#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#4)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#8 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#8)

==

# Column not found
select with differential_privacy options(privacy_unit_column=this_column_does_not_exist)
count(*) FROM SimpleTypes;
--

ERROR: Unrecognized name: this_column_does_not_exist [at 1:62]
...differential_privacy options(privacy_unit_column=this_column_does_not_exist)
                                                    ^
==

# Non struct
select with differential_privacy options(privacy_unit_column=`int32`)
count(*) FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypes.int32#1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#22, $group_by.$uid#23]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#23 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-aggregate_list=
        |     +-$agg1_partial#22 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#20 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#22)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#26)
==

# Named struct field
select with differential_privacy options(privacy_unit_column=(TestStruct.d.a AS new_name))
count(*) FROM SimpleTypesWithStruct;
--
ERROR: Syntax error: Expected "," but got keyword AS [at 1:78]
...options(privacy_unit_column=(TestStruct.d.a AS new_name))
                                               ^
==

# Non path expression
select with differential_privacy options(privacy_unit_column=("TestStruct.c"))
count(*) FROM SimpleTypesWithStruct;
--
ERROR: Differential privacy option must be a path expression [at 1:63]
select with differential_privacy options(privacy_unit_column=("TestStruct.c"))
                                                              ^
==

# Non path expression
select with differential_privacy options(privacy_unit_column="TestStruct.c")
count(*) FROM SimpleTypesWithStruct;
--
ERROR: Differential privacy option must be a path expression [at 1:62]
select with differential_privacy options(privacy_unit_column="TestStruct.c")
                                                             ^
==

# Struct path
select with differential_privacy options(privacy_unit_column=TestStruct.d.a)
count(*) FROM SimpleTypesWithStruct;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithStruct.TestStruct#3], table=SimpleTypesWithStruct, column_index_list=[2])
        +-aggregate_list=
        | +-$agg1#4 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column :=
            +-GetStructField
              +-type=INT32
              +-expr=
              | +-GetStructField
              |   +-type=STRUCT<a INT32, b STRING>
              |   +-expr=
              |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=SimpleTypesWithStruct.TestStruct#3)
              |   +-field_idx=1
              +-field_idx=0

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#4 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#4]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#4]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#6, $group_by.$uid#7]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithStruct.TestStruct#3], table=SimpleTypesWithStruct, column_index_list=[2])
        |   +-group_by_list=
        |   | +-$uid#7 :=
        |   |   +-GetStructField
        |   |     +-type=INT32
        |   |     +-expr=
        |   |     | +-GetStructField
        |   |     |   +-type=STRUCT<a INT32, b STRING>
        |   |     |   +-expr=
        |   |     |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=SimpleTypesWithStruct.TestStruct#3)
        |   |     |   +-field_idx=1
        |   |     +-field_idx=0
        |   +-aggregate_list=
        |     +-$agg1_partial#6 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#4 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#6)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#10 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#10)
==

# Subquery as a struct field type
select with differential_privacy options(privacy_unit_column=(SELECT 1))
count(*) FROM SimpleTypes;
--
ERROR: Differential privacy option must be a path expression [at 1:62]
select with differential_privacy options(privacy_unit_column=(SELECT 1))
                                                             ^
==

# Struct with 2 fields
select with differential_privacy options(privacy_unit_column=(`int32`, `int64`))
count(*) FROM SimpleTypes;
--
ERROR: Differential privacy option must be a path expression [at 1:62]
select with differential_privacy options(privacy_unit_column=(`int32`, `int64`))
                                                             ^
==

# Generalized path expression
select with differential_privacy options(
  privacy_unit_column=(SELECT TestStruct FROM SimpleTypesWithStruct).d.a)
count(*) FROM SimpleTypes;
--
ERROR: Differential privacy option must be a path expression [at 2:23]
  privacy_unit_column=(SELECT TestStruct FROM SimpleTypesWithStruct).d.a)
                      ^
==

# Parenthesized path expression
select with differential_privacy options(privacy_unit_column=(`int32`))
count(*) FROM SimpleTypes;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT32, column=SimpleTypes.int32#1)

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#20 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#20]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#20]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#22, $group_by.$uid#23]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int32#1], table=SimpleTypes, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#23 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
        |   +-aggregate_list=
        |     +-$agg1_partial#22 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#20 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#22)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#26)
==

# Explicit struct constructor
select with differential_privacy options(privacy_unit_column=STRUCT<INT32>(`int32`))
count(*) FROM SimpleTypes;
--
ERROR: Differential privacy option must be a path expression [at 1:62]
...differential_privacy options(privacy_unit_column=STRUCT<INT32>(`int32`))
                                                    ^
==

# Doubly nested privacy unit column.
select with differential_privacy options(privacy_unit_column=f.d.a)
count(*)
from TestWithDoublyNestedStructNoUidValueTable;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-TableScan(column_list=[TestWithDoublyNestedStructNoUidValueTable.value#1], table=TestWithDoublyNestedStructNoUidValueTable, column_index_list=[0])
        +-aggregate_list=
        | +-$agg1#2 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column :=
            +-GetStructField
              +-type=INT32
              +-expr=
              | +-GetStructField
              |   +-type=STRUCT<a INT32, b STRING>
              |   +-expr=
              |   | +-GetStructField
              |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
              |   |   +-expr=
              |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=TestWithDoublyNestedStructNoUidValueTable.value#1)
              |   |   +-field_idx=1
              |   +-field_idx=1
              +-field_idx=0

[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#2 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#2]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#2]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#4, $group_by.$uid#5]
        |   +-input_scan=
        |   | +-TableScan(column_list=[TestWithDoublyNestedStructNoUidValueTable.value#1], table=TestWithDoublyNestedStructNoUidValueTable, column_index_list=[0])
        |   +-group_by_list=
        |   | +-$uid#5 :=
        |   |   +-GetStructField
        |   |     +-type=INT32
        |   |     +-expr=
        |   |     | +-GetStructField
        |   |     |   +-type=STRUCT<a INT32, b STRING>
        |   |     |   +-expr=
        |   |     |   | +-GetStructField
        |   |     |   |   +-type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>
        |   |     |   |   +-expr=
        |   |     |   |   | +-ColumnRef(type=STRUCT<e INT32, f STRUCT<c INT32, d STRUCT<a INT32, b STRING>>>, column=TestWithDoublyNestedStructNoUidValueTable.value#1)
        |   |     |   |   +-field_idx=1
        |   |     |   +-field_idx=1
        |   |     +-field_idx=0
        |   +-aggregate_list=
        |     +-$agg1_partial#4 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#2 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#4)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#8 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
          +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#8)
==
