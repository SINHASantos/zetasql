[default language_features=MAXIMUM,+PIPES,+ANALYTIC_FUNCTIONS,+SELECT_STAR_EXCEPT_REPLACE]
select 1 x
|> extend 2 y
|> extend y*2 z
|> extend y+z yz, x+1 x1
|> extend yz+1 yz1
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$pipe_extend.y#2 AS y [INT64]
| +-$pipe_extend.z#3 AS z [INT64]
| +-$pipe_extend.yz#4 AS yz [INT64]
| +-$pipe_extend.x1#5 AS x1 [INT64]
| +-$pipe_extend.yz1#6 AS yz1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#1, $pipe_extend.y#2, $pipe_extend.z#3, $pipe_extend.yz#4, $pipe_extend.x1#5, $pipe_extend.yz1#6]
    +-expr_list=
    | +-yz1#6 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=$pipe_extend.yz#4)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.x#1, $pipe_extend.y#2, $pipe_extend.z#3, $pipe_extend.yz#4, $pipe_extend.x1#5]
        +-expr_list=
        | +-yz#4 :=
        | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$pipe_extend.y#2)
        | |   +-ColumnRef(type=INT64, column=$pipe_extend.z#3)
        | +-x1#5 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$query.x#1)
        |     +-Literal(type=INT64, value=1)
        +-input_scan=
          +-ProjectScan
            +-column_list=[$query.x#1, $pipe_extend.y#2, $pipe_extend.z#3]
            +-expr_list=
            | +-z#3 :=
            |   +-FunctionCall(ZetaSQL:$multiply(INT64, INT64) -> INT64)
            |     +-ColumnRef(type=INT64, column=$pipe_extend.y#2)
            |     +-Literal(type=INT64, value=2)
            +-input_scan=
              +-ProjectScan
                +-column_list=[$query.x#1, $pipe_extend.y#2]
                +-expr_list=
                | +-y#2 := Literal(type=INT64, value=2)
                +-input_scan=
                  +-ProjectScan
                    +-column_list=[$query.x#1]
                    +-expr_list=
                    | +-x#1 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-SingleRowScan
==

select 1 x
|> extend x+1 x1, x1+1 x2
--
ERROR: Unrecognized name: x1 [at 2:19]
|> extend x+1 x1, x1+1 x2
                  ^
==

select 1 x
|> extend x+1 x1
|> extend x1+1 x2
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$pipe_extend.x1#2 AS x1 [INT64]
| +-$pipe_extend.x2#3 AS x2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.x#1, $pipe_extend.x1#2, $pipe_extend.x2#3]
    +-expr_list=
    | +-x2#3 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-ColumnRef(type=INT64, column=$pipe_extend.x1#2)
    |     +-Literal(type=INT64, value=1)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.x#1, $pipe_extend.x1#2]
        +-expr_list=
        | +-x1#2 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$query.x#1)
        |     +-Literal(type=INT64, value=1)
        +-input_scan=
          +-ProjectScan
            +-column_list=[$query.x#1]
            +-expr_list=
            | +-x#1 := Literal(type=INT64, value=1)
            +-input_scan=
              +-SingleRowScan
==

select 1 x
|> extend 2 x
|> extend x
--
ERROR: Column name x is ambiguous [at 3:11]
|> extend x
          ^
==

# EXTEND makes the result no longer a value table.
select as value 1
|> extend 2 y
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$value_column` [INT64]
| +-$pipe_extend.y#2 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1, $pipe_extend.y#2]
    +-expr_list=
    | +-y#2 := Literal(type=INT64, value=2)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.$col1#1]
        +-expr_list=
        | +-$col1#1 := Literal(type=INT64, value=1)
        +-input_scan=
          +-SingleRowScan
==

select as struct *
from (select 1 t |> extend t+1 |> extend t+2)
--
QueryStmt
+-output_column_list=
| +-$make_struct.$struct#4 AS `$struct` [STRUCT<t INT64, INT64, INT64>]
+-is_value_table=TRUE
+-query=
  +-ProjectScan
    +-column_list=[$make_struct.$struct#4]
    +-expr_list=
    | +-$struct#4 :=
    |   +-MakeStruct
    |     +-type=STRUCT<t INT64, INT64, INT64>
    |     +-field_list=
    |       +-ColumnRef(type=INT64, column=$subquery1.t#1)
    |       +-ColumnRef(type=INT64, column=$pipe_extend.$col1#2)
    |       +-ColumnRef(type=INT64, column=$pipe_extend.$col1#3)
    +-input_scan=
      +-ProjectScan
        +-column_list=[$subquery1.t#1, $pipe_extend.$col1#2, $pipe_extend.$col1#3]
        +-input_scan=
          +-ProjectScan
            +-column_list=[$subquery1.t#1, $pipe_extend.$col1#2, $pipe_extend.$col1#3]
            +-expr_list=
            | +-$col1#3 :=
            |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
            |     +-ColumnRef(type=INT64, column=$subquery1.t#1)
            |     +-Literal(type=INT64, value=2)
            +-input_scan=
              +-ProjectScan
                +-column_list=[$subquery1.t#1, $pipe_extend.$col1#2]
                +-expr_list=
                | +-$col1#2 :=
                |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                |     +-ColumnRef(type=INT64, column=$subquery1.t#1)
                |     +-Literal(type=INT64, value=1)
                +-input_scan=
                  +-ProjectScan
                    +-column_list=[$subquery1.t#1]
                    +-expr_list=
                    | +-t#1 := Literal(type=INT64, value=1)
                    +-input_scan=
                      +-SingleRowScan
==

select 1 x
|> extend count(*)
--
ERROR: Aggregate function COUNT(*) not allowed in pipe EXTEND [at 2:11]
|> extend count(*)
          ^
==

select 1 x
|> extend sum(sum(x)) OVER ()
--
ERROR: Aggregate function SUM not allowed in pipe EXTEND [at 2:15]
|> extend sum(sum(x)) OVER ()
              ^
==

[language_features=NONE,+PIPES]
select 1 x
|> extend sum(x) OVER ()
--
ERROR: Analytic functions not supported [at 2:11]
|> extend sum(x) OVER ()
          ^
==

from KeyValue
|> extend sum(key) OVER (), count(*) over () AS cnt
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$analytic.$analytic1#5 AS `$col1` [INT64]
| +-$analytic.cnt#6 AS cnt [INT64]
+-query=
  +-AnalyticScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#5, $analytic.cnt#6]
    +-input_scan=
    | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
    +-function_group_list=
      +-AnalyticFunctionGroup
        +-analytic_function_list=
          +-$analytic1#5 :=
          | +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |   +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |   +-window_frame=
          |     +-WindowFrame(frame_unit=ROWS)
          |       +-start_expr=
          |       | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
          |       +-end_expr=
          |         +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
          +-cnt#6 :=
            +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
              +-window_frame=
                +-WindowFrame(frame_unit=ROWS)
                  +-start_expr=
                  | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                  +-end_expr=
                    +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Window functions with expressions before and after the window function.
# Common OVER clauses are not currently combined into shared
# AnalyticFunctionGroup (which doesn't happen for SELECT either).
from KeyValue
|> extend sum(1+key) OVER (order by value),
          2+count(*) over (order by value) AS cnt,
          count(*) over (partition by key+3) AS cnt2
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$analytic.$analytic1#6 AS `$col1` [INT64]
| +-$pipe_extend.cnt#8 AS cnt [INT64]
| +-$analytic.cnt2#9 AS cnt2 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#6, $pipe_extend.cnt#8, $analytic.cnt2#9]
    +-expr_list=
    | +-cnt#8 :=
    |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    |     +-Literal(type=INT64, value=2)
    |     +-ColumnRef(type=INT64, column=$analytic.$analytic2#7)
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#6, $analytic.$analytic2#7, $analytic.cnt2#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $partitionby.$partitionbycol1#10]
        |   +-expr_list=
        |   | +-$partitionbycol1#10 :=
        |   |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        |   |     +-Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
          | +-order_by=
          | | +-WindowOrdering
          | |   +-order_by_item_list=
          | |     +-OrderByItem
          | |       +-column_ref=
          | |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
          | +-analytic_function_list=
          |   +-$analytic1#6 :=
          |     +-AnalyticFunctionCall(ZetaSQL:sum(INT64) -> INT64)
          |       +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
          |         +-Literal(type=INT64, value=1)
          |         +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          |       +-window_frame=
          |         +-WindowFrame(frame_unit=RANGE)
          |           +-start_expr=
          |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
          |           +-end_expr=
          |             +-WindowFrameExpr(boundary_type=CURRENT ROW)
          +-AnalyticFunctionGroup
          | +-order_by=
          | | +-WindowOrdering
          | |   +-order_by_item_list=
          | |     +-OrderByItem
          | |       +-column_ref=
          | |         +-ColumnRef(type=STRING, column=KeyValue.Value#2)
          | +-analytic_function_list=
          |   +-$analytic2#7 :=
          |     +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
          |       +-window_frame=
          |         +-WindowFrame(frame_unit=RANGE)
          |           +-start_expr=
          |           | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
          |           +-end_expr=
          |             +-WindowFrameExpr(boundary_type=CURRENT ROW)
          +-AnalyticFunctionGroup
            +-partition_by=
            | +-WindowPartitioning
            |   +-partition_by_list=
            |     +-ColumnRef(type=INT64, column=$partitionby.$partitionbycol1#10)
            +-analytic_function_list=
              +-cnt2#9 :=
                +-AnalyticFunctionCall(ZetaSQL:$count_star() -> INT64)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# EXTEND preserves range variables.
from KeyValue kv1, KeyValue kv2
|> extend kv1.key AS key1
|> extend kv2.key AS key2
|> where kv1.key=1 and key1=key2
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-KeyValue.Key#3 AS Key [INT64]
| +-KeyValue.Value#4 AS Value [STRING]
| +-KeyValue.Key#1 AS key1 [INT64]
| +-KeyValue.Key#3 AS key2 [INT64]
+-query=
  +-FilterScan
    +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
    +-input_scan=
    | +-JoinScan
    |   +-column_list=KeyValue.[Key#1, Value#2, Key#3, Value#4]
    |   +-left_scan=
    |   | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1], alias="kv1")
    |   +-right_scan=
    |     +-TableScan(column_list=KeyValue.[Key#3, Value#4], table=KeyValue, column_index_list=[0, 1], alias="kv2")
    +-filter_expr=
      +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        | +-ColumnRef(type=INT64, column=KeyValue.Key#1)
        | +-Literal(type=INT64, value=1)
        +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
          +-ColumnRef(type=INT64, column=KeyValue.Key#1)
          +-ColumnRef(type=INT64, column=KeyValue.Key#3)
==

# EXTEND preserves pseudocolumns.
from EnumTable kv1
|> extend rowid AS c1
|> extend filename AS c2
--
QueryStmt
+-output_column_list=
| +-EnumTable.key#1 AS key [INT32]
| +-EnumTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-EnumTable.AnotherTestEnum#3 AS AnotherTestEnum [ENUM<zetasql_test__.AnotherTestEnum>]
| +-EnumTable.RowId#5 AS c1 [BYTES]
| +-EnumTable.Filename#4 AS c2 [STRING]
+-query=
  +-TableScan(column_list=EnumTable.[key#1, TestEnum#2, AnotherTestEnum#3, Filename#4, RowId#5], table=EnumTable, column_index_list=[0, 1, 2, 3, 4], alias="kv1")
==

# Note that using EXTEND to materialize a pseudo-column
# without aliasing it ends up creating an ambiguous name
# since the pseudo-column is also still visible.
from EnumTable kv1
|> where rowid is null
|> extend rowid
|> where rowid is null
--
ERROR: Column name rowid is ambiguous [at 4:10]
|> where rowid is null
         ^
==

# Dot-star on a struct.
FROM ComplexTypes
|> SELECT TestStruct
|> EXTEND TestStruct.*,
          '--',
          TestStruct.d.*
--
QueryStmt
+-output_column_list=
| +-ComplexTypes.TestStruct#5 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-$pipe_extend.c#8 AS c [INT32]
| +-$pipe_extend.d#9 AS d [STRUCT<a INT32, b STRING>]
| +-$pipe_extend.$col2#10 AS `$col2` [STRING]
| +-$pipe_extend.a#11 AS a [INT32]
| +-$pipe_extend.b#12 AS b [STRING]
+-query=
  +-ProjectScan
    +-column_list=[ComplexTypes.TestStruct#5, $pipe_extend.c#8, $pipe_extend.d#9, $pipe_extend.$col2#10, $pipe_extend.a#11, $pipe_extend.b#12]
    +-expr_list=
    | +-c#8 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
    | |   +-field_idx=0
    | +-d#9 :=
    | | +-GetStructField
    | |   +-type=STRUCT<a INT32, b STRING>
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
    | |   +-field_idx=1
    | +-$col2#10 := Literal(type=STRING, value="--")
    | +-a#11 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$preproject.$struct#7)
    | |   +-field_idx=0
    | +-b#12 :=
    |   +-GetStructField
    |     +-type=STRING
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<a INT32, b STRING>, column=$preproject.$struct#7)
    |     +-field_idx=1
    +-input_scan=
      +-ProjectScan
        +-column_list=[ComplexTypes.TestStruct#5, $preproject.$struct#7]
        +-expr_list=
        | +-$struct#7 :=
        |   +-GetStructField
        |     +-type=STRUCT<a INT32, b STRING>
        |     +-expr=
        |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
        |     +-field_idx=1
        +-input_scan=
          +-ProjectScan
            +-column_list=[ComplexTypes.TestStruct#5]
            +-input_scan=
              +-TableScan(column_list=[ComplexTypes.TestStruct#5], table=ComplexTypes, column_index_list=[4])
==

SELECT 1
|> EXTEND STRUCT(1 AS x, 2, 'abc' AS x, null AS y).*
--
QueryStmt
+-output_column_list=
| +-$query.$col1#1 AS `$col1` [INT64]
| +-$pipe_extend.x#3 AS x [INT64]
| +-$pipe_extend.$field2#4 AS `$field2` [INT64]
| +-$pipe_extend.x#5 AS x [STRING]
| +-$pipe_extend.y#6 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$query.$col1#1, $pipe_extend.x#3, $pipe_extend.$field2#4, $pipe_extend.x#5, $pipe_extend.y#6]
    +-expr_list=
    | +-x#3 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<x INT64, INT64, x STRING, y INT64>, column=$preproject.$struct#2)
    | |   +-field_idx=0
    | +-$field2#4 :=
    | | +-GetStructField
    | |   +-type=INT64
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<x INT64, INT64, x STRING, y INT64>, column=$preproject.$struct#2)
    | |   +-field_idx=1
    | +-x#5 :=
    | | +-GetStructField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<x INT64, INT64, x STRING, y INT64>, column=$preproject.$struct#2)
    | |   +-field_idx=2
    | +-y#6 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<x INT64, INT64, x STRING, y INT64>, column=$preproject.$struct#2)
    |     +-field_idx=3
    +-input_scan=
      +-ProjectScan
        +-column_list=[$query.$col1#1, $preproject.$struct#2]
        +-expr_list=
        | +-$struct#2 :=
        |   +-MakeStruct
        |     +-type=STRUCT<x INT64, INT64, x STRING, y INT64>
        |     +-field_list=
        |       +-Literal(type=INT64, value=1)
        |       +-Literal(type=INT64, value=2)
        |       +-Literal(type=STRING, value="abc")
        |       +-Literal(type=INT64, value=NULL)
        +-input_scan=
          +-ProjectScan
            +-column_list=[$query.$col1#1]
            +-expr_list=
            | +-$col1#1 := Literal(type=INT64, value=1)
            +-input_scan=
              +-SingleRowScan
==

# Dot-star with modifiers.
FROM ComplexTypes
|> SELECT TestStruct
|> EXTEND TestStruct.* EXCEPT (c),
          '--',
          TestStruct.* REPLACE (TestStruct.c+1 AS c),
          '--',
          TestStruct.* EXCEPT (c) REPLACE ('abc' AS d),
--
QueryStmt
+-output_column_list=
| +-ComplexTypes.TestStruct#5 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-$pipe_extend.d#7 AS d [STRUCT<a INT32, b STRING>]
| +-$pipe_extend.$col2#8 AS `$col2` [STRING]
| +-$pipe_extend.c#9 AS c [INT64]
| +-$pipe_extend.d#10 AS d [STRUCT<a INT32, b STRING>]
| +-$pipe_extend.$col4#11 AS `$col4` [STRING]
| +-$pipe_extend.d#12 AS d [STRING]
+-query=
  +-ProjectScan
    +-column_list=[ComplexTypes.TestStruct#5, $pipe_extend.d#7, $pipe_extend.$col2#8, $pipe_extend.c#9, $pipe_extend.d#10, $pipe_extend.$col4#11, $pipe_extend.d#12]
    +-expr_list=
    | +-d#7 :=
    | | +-GetStructField
    | |   +-type=STRUCT<a INT32, b STRING>
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
    | |   +-field_idx=1
    | +-$col2#8 := Literal(type=STRING, value="--")
    | +-c#9 :=
    | | +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
    | |   +-Cast(INT32 -> INT64)
    | |   | +-GetStructField
    | |   |   +-type=INT32
    | |   |   +-expr=
    | |   |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
    | |   |   +-field_idx=0
    | |   +-Literal(type=INT64, value=1)
    | +-d#10 :=
    | | +-GetStructField
    | |   +-type=STRUCT<a INT32, b STRING>
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
    | |   +-field_idx=1
    | +-$col4#11 := Literal(type=STRING, value="--")
    | +-d#12 := Literal(type=STRING, value="abc")
    +-input_scan=
      +-ProjectScan
        +-column_list=[ComplexTypes.TestStruct#5]
        +-input_scan=
          +-TableScan(column_list=[ComplexTypes.TestStruct#5], table=ComplexTypes, column_index_list=[4])
==

FROM TestTable
|> EXTEND STRUCT(1 AS x).* EXCEPT (y)
--
ERROR: Column y in SELECT * EXCEPT list does not exist [at 2:36]
|> EXTEND STRUCT(1 AS x).* EXCEPT (y)
                                   ^
==

FROM TestTable
|> EXTEND STRUCT(1 AS x).* REPLACE (0 AS y)
--
ERROR: Column y in SELECT * REPLACE list does not exist [at 2:42]
|> EXTEND STRUCT(1 AS x).* REPLACE (0 AS y)
                                         ^
==

FROM TestTable
|> EXTEND key.*
--
ERROR: Dot-star is not supported for type INT32 [at 2:11]
|> EXTEND key.*
          ^
==

SELECT STRUCT() s
|> EXTEND s.*
--
ERROR: Star expansion is not allowed on a struct with zero fields [at 2:11]
|> EXTEND s.*
          ^
==

FROM ComplexTypes
|> SELECT TestStruct
|> EXTEND TestStruct.* EXCEPT (c,d)
--
ERROR: SELECT * expands to zero columns after applying EXCEPT [at 3:11]
|> EXTEND TestStruct.* EXCEPT (c,d)
          ^
==

# Dot-star on a range variable.
SELECT 1 x, 2 y
|> AS t
|> EXTEND t.*
--
QueryStmt
+-output_column_list=
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
| +-$query.x#1 AS x [INT64]
| +-$query.y#2 AS y [INT64]
+-query=
  +-ProjectScan
    +-column_list=$query.[x#1, y#2]
    +-expr_list=
    | +-x#1 := Literal(type=INT64, value=1)
    | +-y#2 := Literal(type=INT64, value=2)
    +-input_scan=
      +-SingleRowScan
==

# Dot-star on a proto.
FROM TestTable
|> EXTEND KitchenSink.nested_with_required_fields.*
--
QueryStmt
+-output_column_list=
| +-TestTable.key#1 AS key [INT32]
| +-TestTable.TestEnum#2 AS TestEnum [ENUM<zetasql_test__.TestEnum>]
| +-TestTable.KitchenSink#3 AS KitchenSink [PROTO<zetasql_test__.KitchenSinkPB>]
| +-$pipe_extend.nested_required_value#5 AS nested_required_value [PROTO<zetasql_test__.KitchenSinkPB.Nested>]
| +-$pipe_extend.nested_int32_val#6 AS nested_int32_val [INT32]
| +-$pipe_extend.nested_value#7 AS nested_value [PROTO<zetasql_test__.KitchenSinkPB.Nested>]
+-query=
  +-ProjectScan
    +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $pipe_extend.nested_required_value#5, $pipe_extend.nested_int32_val#6, $pipe_extend.nested_value#7]
    +-expr_list=
    | +-nested_required_value#5 :=
    | | +-GetProtoField
    | |   +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedWithRequiredMessageFields>, column=$preproject.$proto#4)
    | |   +-field_descriptor=nested_required_value
    | +-nested_int32_val#6 :=
    | | +-GetProtoField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedWithRequiredMessageFields>, column=$preproject.$proto#4)
    | |   +-field_descriptor=nested_int32_val
    | |   +-default_value=0
    | +-nested_value#7 :=
    |   +-GetProtoField
    |     +-type=PROTO<zetasql_test__.KitchenSinkPB.Nested>
    |     +-expr=
    |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB.NestedWithRequiredMessageFields>, column=$preproject.$proto#4)
    |     +-field_descriptor=nested_value
    |     +-default_value=NULL
    +-input_scan=
      +-ProjectScan
        +-column_list=[TestTable.key#1, TestTable.TestEnum#2, TestTable.KitchenSink#3, $preproject.$proto#4]
        +-expr_list=
        | +-$proto#4 :=
        |   +-GetProtoField
        |     +-type=PROTO<zetasql_test__.KitchenSinkPB.NestedWithRequiredMessageFields>
        |     +-expr=
        |     | +-ColumnRef(type=PROTO<zetasql_test__.KitchenSinkPB>, column=TestTable.KitchenSink#3)
        |     +-field_descriptor=nested_with_required_fields
        |     +-default_value=NULL
        +-input_scan=
          +-TableScan(column_list=TestTable.[key#1, TestEnum#2, KitchenSink#3], table=TestTable, column_index_list=[0, 1, 2])
==

# Dot-star after a window function.
FROM ComplexTypes
|> SELECT TestStruct, 1 pos
|> EXTEND (FIRST_VALUE(TestStruct) OVER (ORDER BY pos)).*
--
QueryStmt
+-output_column_list=
| +-ComplexTypes.TestStruct#5 AS TestStruct [STRUCT<c INT32, d STRUCT<a INT32, b STRING>>]
| +-$pipe_select.pos#7 AS pos [INT64]
| +-$pipe_extend.c#10 AS c [INT32]
| +-$pipe_extend.d#11 AS d [STRUCT<a INT32, b STRING>]
+-query=
  +-ProjectScan
    +-column_list=[ComplexTypes.TestStruct#5, $pipe_select.pos#7, $pipe_extend.c#10, $pipe_extend.d#11]
    +-expr_list=
    | +-c#10 :=
    | | +-GetStructField
    | |   +-type=INT32
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$analytic.$analytic1#9)
    | |   +-field_idx=0
    | +-d#11 :=
    |   +-GetStructField
    |     +-type=STRUCT<a INT32, b STRING>
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=$analytic.$analytic1#9)
    |     +-field_idx=1
    +-input_scan=
      +-AnalyticScan
        +-column_list=[ComplexTypes.TestStruct#5, $pipe_select.pos#7, $analytic.$analytic1#9]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[ComplexTypes.TestStruct#5, $pipe_select.pos#7]
        |   +-expr_list=
        |   | +-pos#7 := Literal(type=INT64, value=1)
        |   +-input_scan=
        |     +-TableScan(column_list=[ComplexTypes.TestStruct#5], table=ComplexTypes, column_index_list=[4])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-order_by=
            | +-WindowOrdering
            |   +-order_by_item_list=
            |     +-OrderByItem
            |       +-column_ref=
            |         +-ColumnRef(type=INT64, column=$pipe_select.pos#7)
            +-analytic_function_list=
              +-$analytic1#9 :=
                +-AnalyticFunctionCall(ZetaSQL:first_value(STRUCT<c INT32, d STRUCT<a INT32, b STRING>>) -> STRUCT<c INT32, d STRUCT<a INT32, b STRING>>)
                  +-ColumnRef(type=STRUCT<c INT32, d STRUCT<a INT32, b STRING>>, column=ComplexTypes.TestStruct#5)
                  +-window_frame=
                    +-WindowFrame(frame_unit=RANGE)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=CURRENT ROW)
==

# Dot-star EXCEPT on a window function.
FROM KeyValue
|> EXTEND ANY_VALUE(STRUCT(key, value, 1+key AS key1)) OVER ().* EXCEPT(key)
--
QueryStmt
+-output_column_list=
| +-KeyValue.Key#1 AS Key [INT64]
| +-KeyValue.Value#2 AS Value [STRING]
| +-$pipe_extend.value#5 AS value [STRING]
| +-$pipe_extend.key1#6 AS key1 [INT64]
+-query=
  +-ProjectScan
    +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $pipe_extend.value#5, $pipe_extend.key1#6]
    +-expr_list=
    | +-value#5 :=
    | | +-GetStructField
    | |   +-type=STRING
    | |   +-expr=
    | |   | +-ColumnRef(type=STRUCT<key INT64, value STRING, key1 INT64>, column=$analytic.$analytic1#4)
    | |   +-field_idx=1
    | +-key1#6 :=
    |   +-GetStructField
    |     +-type=INT64
    |     +-expr=
    |     | +-ColumnRef(type=STRUCT<key INT64, value STRING, key1 INT64>, column=$analytic.$analytic1#4)
    |     +-field_idx=2
    +-input_scan=
      +-AnalyticScan
        +-column_list=[KeyValue.Key#1, KeyValue.Value#2, $analytic.$analytic1#4]
        +-input_scan=
        | +-TableScan(column_list=KeyValue.[Key#1, Value#2], table=KeyValue, column_index_list=[0, 1])
        +-function_group_list=
          +-AnalyticFunctionGroup
            +-analytic_function_list=
              +-$analytic1#4 :=
                +-AnalyticFunctionCall(ZetaSQL:any_value(STRUCT<key INT64, value STRING, key1 INT64>) -> STRUCT<key INT64, value STRING, key1 INT64>)
                  +-MakeStruct
                    +-type=STRUCT<key INT64, value STRING, key1 INT64>
                    +-field_list=
                      +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                      +-ColumnRef(type=STRING, column=KeyValue.Value#2)
                      +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
                        +-Literal(type=INT64, value=1)
                        +-ColumnRef(type=INT64, column=KeyValue.Key#1)
                  +-window_frame=
                    +-WindowFrame(frame_unit=ROWS)
                      +-start_expr=
                      | +-WindowFrameExpr(boundary_type=UNBOUNDED PRECEDING)
                      +-end_expr=
                        +-WindowFrameExpr(boundary_type=UNBOUNDED FOLLOWING)
==

# Window function in the .* REPLACE is not allowed.
FROM KeyValue
|> EXTEND ANY_VALUE(STRUCT(key, value)) OVER ().*
     REPLACE(COUNT(*) OVER () AS value)
--
ERROR: Cannot use analytic functions inside SELECT * REPLACE [at 3:14]
     REPLACE(COUNT(*) OVER () AS value)
             ^
==

# If collation is enabled, collation propagates to output columns the same way
# for SELECT and EXTEND.
# TODO Enable java support for collation.
[no_java]
[language_features=NONE,+PIPES{{|,+ANNOTATION_FRAMEWORK|,+ANNOTATION_FRAMEWORK,+COLLATION_SUPPORT}}]
FROM CollatedTable
|> SELECT string_ci, CONCAT(string_ci, "xxx") AS newcol1
|> EXTEND CONCAT(string_ci, "yyy") AS newcol2
--
ALTERNATION GROUPS:
    <empty>
    ,+ANNOTATION_FRAMEWORK
--
QueryStmt
+-output_column_list=
| +-CollatedTable.string_ci#1{Collation:"und:ci"} AS string_ci [STRING]
| +-$pipe_select.newcol1#5 AS newcol1 [STRING]
| +-$pipe_extend.newcol2#6 AS newcol2 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[CollatedTable.string_ci#1{Collation:"und:ci"}, $pipe_select.newcol1#5, $pipe_extend.newcol2#6]
    +-expr_list=
    | +-newcol2#6 :=
    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |     +-ColumnRef(type=STRING, column=CollatedTable.string_ci#1{Collation:"und:ci"})
    |     +-Literal(type=STRING, value="yyy")
    +-input_scan=
      +-ProjectScan
        +-column_list=[CollatedTable.string_ci#1{Collation:"und:ci"}, $pipe_select.newcol1#5]
        +-expr_list=
        | +-newcol1#5 :=
        |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |     +-ColumnRef(type=STRING, column=CollatedTable.string_ci#1{Collation:"und:ci"})
        |     +-Literal(type=STRING, value="xxx")
        +-input_scan=
          +-TableScan(column_list=[CollatedTable.string_ci#1{Collation:"und:ci"}], table=CollatedTable, column_index_list=[0])
--
ALTERNATION GROUP: ,+ANNOTATION_FRAMEWORK,+COLLATION_SUPPORT
--
QueryStmt
+-output_column_list=
| +-CollatedTable.string_ci#1{Collation:"und:ci"} AS string_ci [STRING]
| +-$pipe_select.newcol1#5{Collation:"und:ci"} AS newcol1 [STRING]
| +-$pipe_extend.newcol2#6{Collation:"und:ci"} AS newcol2 [STRING]
+-query=
  +-ProjectScan
    +-column_list=[CollatedTable.string_ci#1{Collation:"und:ci"}, $pipe_select.newcol1#5{Collation:"und:ci"}, $pipe_extend.newcol2#6{Collation:"und:ci"}]
    +-expr_list=
    | +-newcol2#6 :=
    |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
    |     +-type_annotation_map={Collation:"und:ci"}
    |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=CollatedTable.string_ci#1{Collation:"und:ci"})
    |     +-Literal(type=STRING, value="yyy")
    +-input_scan=
      +-ProjectScan
        +-column_list=[CollatedTable.string_ci#1{Collation:"und:ci"}, $pipe_select.newcol1#5{Collation:"und:ci"}]
        +-expr_list=
        | +-newcol1#5 :=
        |   +-FunctionCall(ZetaSQL:concat(STRING, repeated(1) STRING) -> STRING)
        |     +-type_annotation_map={Collation:"und:ci"}
        |     +-ColumnRef(type=STRING, type_annotation_map={Collation:"und:ci"}, column=CollatedTable.string_ci#1{Collation:"und:ci"})
        |     +-Literal(type=STRING, value="xxx")
        +-input_scan=
          +-TableScan(column_list=[CollatedTable.string_ci#1{Collation:"und:ci"}], table=CollatedTable, column_index_list=[0])
