[default language_features=MAXIMUM,+MULTILEVEL_AGGREGATION,+WITH_GROUP_ROWS,+ORDER_BY_IN_AGGREGATE,+LIMIT_IN_AGGREGATE,+HAVING_IN_AGGREGATE,+NULL_HANDLING_MODIFIER_IN_AGGREGATE,+ANALYTIC_FUNCTIONS,+QUALIFY,+GROUPING_BUILTIN,+GROUP_BY_STRUCT,+ENFORCE_CONDITIONAL_EVALUATION,+PIVOT]
[default show_sqlbuilder_output]

# Test file for multi-level aggregate queries that fail because corresponding
# functionality is not yet supported.
# TODO: Improve grouping constness recognition. 'double + int64'
# should ideally be recognized as a grouping key.
SELECT
  SUM(double + int64 GROUP BY string)
FROM SimpleTypes
GROUP BY double + int64;
--
ERROR: multi-level aggregate expression references column double which is neither grouped nor aggregated [at 6:7]
  SUM(double + int64 GROUP BY string)
      ^
==

# Multi-level aggregation with PIVOT.
[enabled_ast_rewrites=DEFAULTS]
SELECT *
FROM (
  SELECT int64, double, int32, string, bool, bytes FROM SimpleTypes
)
PIVOT(
  SUM(double + AVG(int64 + MAX(int32) GROUP BY int64) GROUP BY double) AS agg1,
  ARRAY_AGG(string IGNORE NULLS GROUP BY string ORDER BY AVG(int64)) AS agg2
  FOR int64 IN (0, 1)
);
--
ERROR: PIVOT expression cannot be a multi-level aggregate function call [at 6:3]
  SUM(double + AVG(int64 + MAX(int32) GROUP BY int64) GROUP BY double) AS agg1,
  ^
==

# This is unfortunate, but we don't yet have a way to identify that the argument
# `MAX(int64)` is identical for the DISTINCT modifier and the ORDER BY modifier.
# This is because `MAX(int64)` is resolved twice; once for the DISTINCT modifier
# and once for the ORDER BY modifier, and that produces 2 different resolved
# computed columns, which we cannot identify as being identical.
SELECT
  ARRAY_AGG(DISTINCT MAX(int64) GROUP BY int32 ORDER BY MAX(int64))
FROM SimpleTypes
--
ERROR: An aggregate function that has both DISTINCT and ORDER BY arguments can only ORDER BY expressions that are arguments to the function [at 2:57]
  ARRAY_AGG(DISTINCT MAX(int64) GROUP BY int32 ORDER BY MAX(int64))
                                                        ^
==

# ORDER_BY_AND_LIMIT_IN_AGGREGATE rewriter doesn't support multi-level
# aggregates.
[enabled_ast_rewrites=DEFAULTS,+ORDER_BY_AND_LIMIT_IN_AGGREGATE]
SELECT
  ARRAY_AGG(string GROUP BY string ORDER BY string LIMIT 1)
FROM SimpleTypes;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#21 AS `$col1` [ARRAY<STRING>]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#21]
    +-input_scan=
      +-AggregateScan
        +-column_list=[$aggregate.$agg1#21]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
        +-aggregate_list=
          +-$agg1#21 :=
            +-AggregateFunctionCall(ZetaSQL:array_agg(STRING) -> ARRAY<STRING>)
              +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#20)
              +-order_by_item_list=
              | +-OrderByItem
              |   +-column_ref=
              |     +-ColumnRef(type=STRING, column=$group_by_list.$groupbymod#20)
              +-limit=
              | +-Literal(type=INT64, value=1)
              +-group_by_list=
                +-$groupbymod#20 := ColumnRef(type=STRING, column=SimpleTypes.string#5)

[SQLBUILDER_TARGET_SYNTAX_MODE standard]
[SQLBUILDER_OUTPUT]
SELECT
  ARRAY_AGG(simpletypes_2.a_1
    GROUP BY simpletypes_2.a_1
    ORDER BY simpletypes_2.a_1
    LIMIT 1) AS a_3
FROM
  (
    SELECT
      SimpleTypes.string AS a_1
    FROM
      SimpleTypes
  ) AS simpletypes_2;

[SQLBUILDER_TARGET_SYNTAX_MODE pipe]
[SQLBUILDER_OUTPUT]
FROM
  SimpleTypes
|> SELECT
     SimpleTypes.string AS a_1
|> AS simpletypes_2
|> AGGREGATE
     ARRAY_AGG(simpletypes_2.a_1
       GROUP BY simpletypes_2.a_1
       ORDER BY simpletypes_2.a_1
       LIMIT 1) AS a_3;

Rewrite ERROR: generic::unimplemented: Aggregate functions with GROUP BY modifiers are not supported in ORDER_BY_AND_LIMIT_IN_AGGREGATE rewriter
==

# Multi-level aggregation does not support anonymized aggregates.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+ANONYMIZATION]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_expect_error_location]
SELECT
  ANON_COUNT(* GROUP BY int64)
FROM SimpleTypes;
--
ERROR: ANON_COUNT(*) Anonymization / Differential Privacy Function  does not support GROUP BY modifiers [at 2:3]
  ANON_COUNT(* GROUP BY int64)
  ^
==

# Multi-level aggregation does not support anonymized aggregates.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+ANONYMIZATION]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_expect_error_location]
SELECT WITH ANONYMIZATION
  ANON_SUM(int64 GROUP BY int64)
FROM SimpleTypesWithAnonymizationUid;
--
ERROR: ANON_SUM Anonymization / Differential Privacy Function  does not support GROUP BY modifiers [at 2:3]
  ANON_SUM(int64 GROUP BY int64)
  ^
==

# Multi-level aggregates cannot contain nested anonymized aggregates.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+ANONYMIZATION]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_expect_error_location]
SELECT
  COUNT(ANON_SUM(int64) GROUP BY int64)
FROM SimpleTypes;
--
ERROR: Multi-level aggregate function does not support ANON_SUM as a nested aggregate function. [at 2:3]
  COUNT(ANON_SUM(int64) GROUP BY int64)
  ^
==

# Multi-level aggregates cannot contain nested anonymized aggregates.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+ANONYMIZATION,+ORDER_BY_IN_AGGREGATE]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_expect_error_location]
SELECT
  ARRAY_AGG(string GROUP BY string ORDER BY ANON_SUM(int64))
FROM SimpleTypes;
--
ERROR: Multi-level aggregate function does not support ANON_SUM as a nested aggregate function. [at 2:3]
  ARRAY_AGG(string GROUP BY string ORDER BY ANON_SUM(int64))
  ^
==

# Multi-level aggregates cannot contain nested anonymized aggregates.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+ANONYMIZATION]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_expect_error_location]
SELECT
  COUNT(SUM(int64) + AVG(ANON_SUM(int64) GROUP BY bool) GROUP BY int64)
FROM SimpleTypes;
--
ERROR: Multi-level aggregate function does not support ANON_SUM as a nested aggregate function. [at 2:22]
  COUNT(SUM(int64) + AVG(ANON_SUM(int64) GROUP BY bool) GROUP BY int64)
                     ^
==

# Multi-level aggregation does not work with differential privacy.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+DIFFERENTIAL_PRIVACY,+NAMED_ARGUMENTS]
[enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[no_expect_error_location]
SELECT WITH DIFFERENTIAL_PRIVACY
  COUNT(int64 GROUP BY int64)
from SimpleTypesWithAnonymizationUid;
--
ERROR: COUNT Anonymization / Differential Privacy Function  does not support GROUP BY modifiers [at 2:3]
  COUNT(int64 GROUP BY int64)
  ^
==

# Multi-level aggregation does not work with aggregation threshold.
[language_features=NONE,+MULTILEVEL_AGGREGATION,+AGGREGATION_THRESHOLD]
[enabled_ast_rewrites=DEFAULTS,+AGGREGATION_THRESHOLD]
[no_expect_error_location]
SELECT WITH AGGREGATION_THRESHOLD
OPTIONS (threshold = 50, privacy_unit_column = int64)
  COUNT(int64 GROUP BY int64)
from SimpleTypes;
--
ERROR: Aggregation Threshold Aggregation does not support aggregate functions with GROUP BY modifiers [at 3:3]
  COUNT(int64 GROUP BY int64)
  ^
==

# This is an unfortunate consequence of deferring multi-level aggregate
# resolution until after the resolution of the GROUP BY clause. The deferred
# resolution is needed to support 'grouping-constness' for multi-level aggregate
# arguments. We can look into removing this constraint in the future.
SELECT
  STRUCT(
    AVG(MIN(double) GROUP BY string),
    MAX(SUM(int64) GROUP BY bool)
  ).*
FROM SimpleTypes
GROUP BY int32;
--
ERROR: Dot-star and star expansion is not permitted on expressions that use GROUP ROWS or GROUP BY modifiers on an aggregate function. [at 2:3]
  STRUCT(
  ^
==

# TODO: Improve grouping constness recognition. 'double + int64'
# should ideally be recognized as a grouping key.
SELECT
  STRING_AGG(string GROUP BY string ORDER BY double + int64)
FROM SimpleTypes
GROUP BY double + int64;
--
ERROR: multi-level aggregate expression references column double which is neither grouped nor aggregated [at 2:46]
  STRING_AGG(string GROUP BY string ORDER BY double + int64)
                                             ^
==

