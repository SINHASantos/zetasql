[default required_features=INLINE_LAMBDA_ARGUMENT,CHAINED_FUNCTION_CALLS]

[name=apply1]
SELECT APPLY(10, x->x+1)
--
ARRAY<STRUCT<INT64>>[{11}]
==

[name=apply2]
SELECT APPLY("abc", x->concat(x, "---", x))
--
ARRAY<STRUCT<STRING>>[{"abc---abc"}]
==

[name=apply_unused_input]
SELECT APPLY("abc", x->1000)
--
ARRAY<STRUCT<INT64>>[{1000}]
==

[name=apply_error]
SELECT APPLY(-1, x->sqrt(x))
--
ERROR: generic::out_of_range: Argument to SQRT cannot be negative: -1
==

[required_features=INLINE_LAMBDA_ARGUMENT,CHAINED_FUNCTION_CALLS,SAFE_FUNCTION_CALL,SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS]
[name=safe_apply_error]
SELECT value, SAFE.APPLY(value, x->sqrt(x))
FROM UNNEST([1,2,0,-1,3]) value
ORDER BY value
--
ARRAY<STRUCT<value INT64, DOUBLE>>[known order:
  {-1, NULL},
  {0, 0},
  {1, 1},
  {2, 1.4142135623730951},
  {3, 1.7320508075688772}
]
==

[name=apply_error_on_input]
SELECT APPLY(sqrt(-1), x->x+1)
--
ERROR: generic::out_of_range: Argument to SQRT cannot be negative: -1
==

[required_features=INLINE_LAMBDA_ARGUMENT,CHAINED_FUNCTION_CALLS,SAFE_FUNCTION_CALL,SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS]
[name=safe_apply_error_on_input]
SELECT SAFE.APPLY(sqrt(-1), x->x+1)
--
ERROR: generic::out_of_range: Argument to SQRT cannot be negative: -1
==

[name=apply_on_null]
SELECT val, APPLY(val, x->x IS NULL), APPLY(val, x->x+1)
FROM UNNEST([1,NULL]) val
ORDER BY 1
--
ARRAY<STRUCT<val INT64, BOOL, INT64>>[known order:
  {NULL, true, NULL},
  {1, false, 2}
]
==

[name=apply_execute_input_once_using_rand]
SELECT APPLY(rand(), x->x=x), APPLY(rand(), x->x-x)
--
ARRAY<STRUCT<BOOL, DOUBLE>>[{true, 0}]
==

[name=apply_execute_input_once_using_uuid]
SELECT APPLY(GENERATE_UUID(), x->x=x)
--
ARRAY<STRUCT<BOOL>>[{true}]
==

[name=correlated_apply]
SELECT
  key,
  (key)
     .apply(x -> key100),
  (key)
     .apply(x -> key100 - x)
FROM (
  SELECT key, key+100 AS key100
  from unnest([1,2,3]) key
)
--
ARRAY<STRUCT<key INT64, INT64, INT64>>[unknown order:
  {1, 101, 100},
  {2, 102, 100},
  {3, 103, 100}
]
==

[name=chained_apply]
SELECT key, (key)
              .apply(x -> x+1000)
              .apply(x -> cast(x AS STRING))
from unnest([1,2,3]) key
--
ARRAY<STRUCT<key INT64, STRING>>[unknown order:
  {2, "1002"},
  {1, "1001"},
  {3, "1003"}
]
