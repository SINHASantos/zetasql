[default required_features=MAP_TYPE]
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]

[name=map_from_array_basic]
SELECT MAP_FROM_ARRAY([('a', true), ('b', false)]);
--
ARRAY<STRUCT<MAP<STRING, BOOL>>>[{{"a": true, "b": false}}]
==

[name=map_from_array_map_array_value]
SELECT MAP_FROM_ARRAY([('a', [50, 100]), ('b', [1, 2])]);
--
ARRAY<STRUCT<MAP<STRING, ARRAY<INT64>>>>[{{"a": [50, 100], "b": [1, 2]}}]
==

[name=map_from_array_confusing_struct_names]
SELECT MAP_FROM_ARRAY([STRUCT('k1' as value, 0 as key), ('k2', 1)]);
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{{"k1": 0, "k2": 1}}]
==

[name=map_from_array_empty_array]
SELECT MAP_FROM_ARRAY(CAST([] AS ARRAY<STRUCT<INT64, INT64>>));
--
ARRAY<STRUCT<MAP<INT64, INT64>>>[{{}}]
==

[name=map_from_array_null_array]
SELECT MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<INT64, INT64>>));
--
ARRAY<STRUCT<MAP<INT64, INT64>>>[{NULL}]
==

[name=map_from_array_nesting]
[required_features=MAP_TYPE,GROUP_BY_STRUCT]
SELECT MAP_FROM_ARRAY([
  ('a', MAP_FROM_ARRAY([
    ((1, 'b'), MAP_FROM_ARRAY([
      (1.5, MAP_FROM_ARRAY([
        (DATE("2020-01-01"), 'e')
      ]))
    ]))
  ]))
]);
--
ARRAY<STRUCT<
        MAP<STRING, MAP<STRUCT<INT64, STRING>, MAP<DOUBLE, MAP<DATE, STRING>>>>
      >>[{{"a": {{1, "b"}: {1.5: {2020-01-01: "e"}}}}}]
==

[name=map_from_array_nested_containers]
[required_features=MAP_TYPE,GROUP_BY_STRUCT,GROUP_BY_ARRAY]
SELECT MAP_FROM_ARRAY([(('key_struct', ['array_key1', 'array_key2']), 'foo_val')]);
--
ARRAY<STRUCT<MAP<STRUCT<STRING, ARRAY<STRING>>, STRING>>>[
  {{{"key_struct", ["array_key1", "array_key2"]}: "foo_val"}}
]
==

[name=map_from_array_repeated_key]
SELECT MAP_FROM_ARRAY([('a', [50, 100]), ('b', [50, 100]), ('b', [1, 2]), ('c', []), ('d', []), ('d', [50, 100])]);
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: "b"
==

[name=map_from_array_repeated_null_key]
SELECT MAP_FROM_ARRAY([(NULL, 0), (NULL, 0)])
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: NULL
==

[name=map_from_array_repeated_null_key_2]
SELECT MAP_FROM_ARRAY([(NULL, 0), (A, 1)])
FROM UNNEST([CAST(NULL AS DOUBLE)]) AS A;
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: NULL
==

[name=map_from_array_repeated_array_key]
[required_features=MAP_TYPE,GROUP_BY_ARRAY]
SELECT MAP_FROM_ARRAY([(['a'], 0), (['a'], 0)])
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: ARRAY<STRING>["a"]
==

[name=map_from_array_repeated_inf_float_key]
SELECT MAP_FROM_ARRAY([(CAST('inf' AS FLOAT), 0), (CAST('inf' AS FLOAT), 0)]);
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: inf
==

[name=map_from_array_repeated_nan_float_key]
SELECT MAP_FROM_ARRAY([(CAST('nan' AS FLOAT), 0), (CAST('nan' AS FLOAT), 0)]);
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: nan
==

[name=map_from_array_transformed_input]
[required_features=MAP_TYPE,ARRAY_ZIP]
SELECT MAP_FROM_ARRAY(ARRAY_ZIP(["a", "b", "c"], [1, 2, 3]));
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{{"a": 1, "b": 2, "c": 3}}]
==

[name=map_from_array_correlated_subquery]
SELECT (SELECT MAP_FROM_ARRAY([(x, 1)]))
  FROM UNNEST(['a', 'b', 'c']) as x;
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[unknown order:
  {{"b": 1}},
  {{"a": 1}},
  {{"c": 1}}
]
==

[name=map_entries_sorted_basic]
SELECT MAP_ENTRIES_SORTED(MAP_FROM_ARRAY([('a', true), ('Z', false)]));
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<key STRING, value BOOL>>[known order:{"Z", false}, {"a", true}]}
]
==

[name=map_entries_unsorted_basic]
SELECT MAP_ENTRIES_UNSORTED(MAP_FROM_ARRAY([('a', true), ('Z', false)]));
--
ARRAY<STRUCT<ARRAY<>>>[
  {
    ARRAY<STRUCT<key STRING, value BOOL>>[unknown order:{"Z", false}, {"a", true}]
  }
]
==

[name=map_entries_unsorted_single_element_known_order]
SELECT MAP_ENTRIES_UNSORTED(MAP_FROM_ARRAY([('a', true)]));
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<STRUCT<key STRING, value BOOL>>[{"a", true}]}]
==

[name=map_entries_sorted_nested]
[required_features=MAP_TYPE,GROUP_BY_ARRAY,ARRAY_ORDERING]
SELECT
  MAP_ENTRIES_SORTED(
    MAP_FROM_ARRAY([
      (
        ['a', 'b', 'c'],
        MAP_FROM_ARRAY([
          (['b', 'c', 'd'], MAP_FROM_ARRAY([(100, ('baz', 'hello'))]))
        ])
      )
    ])
  );
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<
           key ARRAY<>,
           value MAP<ARRAY<STRING>, MAP<INT64, STRUCT<STRING, STRING>>>
         >>
   [{
          ARRAY<STRING>[known order:"a", "b", "c"],
          {["b", "c", "d"]: {100: {"baz", "hello"}}}
        }]}
]
==

[name=map_entries_unsorted_nested]
[required_features=MAP_TYPE,GROUP_BY_ARRAY]
SELECT
  MAP_ENTRIES_UNSORTED(
    MAP_FROM_ARRAY([
      (
        ['a', 'b', 'c'],
        MAP_FROM_ARRAY([
          (['b', 'c', 'd'], MAP_FROM_ARRAY([(100, ('baz', 'hello'))]))
        ])
      )
    ])
  );
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<
           key ARRAY<>,
           value MAP<ARRAY<STRING>, MAP<INT64, STRUCT<STRING, STRING>>>
         >>
   [{
          ARRAY<STRING>[known order:"a", "b", "c"],
          {["b", "c", "d"]: {100: {"baz", "hello"}}}
        }]}
]
==

[name=map_entries_sorted_infinite_float]
SELECT MAP_ENTRIES_SORTED(MAP_FROM_ARRAY([(CAST('nan' AS DOUBLE), 1), (CAST('inf' AS DOUBLE), 2), (CAST('-inf' AS DOUBLE), 3), (1.1, 4), (NULL, 5)]));
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<key DOUBLE, value INT64>>[known order:
     {NULL, 5},
     {nan, 1},
     {-inf, 3},
     {1.1, 4},
     {inf, 2}
   ]}
]
==

[required_features=MAP_TYPE,GROUP_BY_ARRAY,ARRAY_ORDERING]
[name=map_entries_sorted_array_key]
SELECT MAP_ENTRIES_SORTED(MAP_FROM_ARRAY([(['b'], 1), (['a'], 2), (['a', 'b'], 3)]));
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<STRUCT<key ARRAY<>, value INT64>>[known order:
     {ARRAY<STRING>["a"], 2},
     {
       ARRAY<STRING>[known order:"a", "b"],
       3
     },
     {ARRAY<STRING>["b"], 1}
   ]}
]
==

[name=map_get_found]
SELECT MAP_GET(MAP_FROM_ARRAY([('a', 1)]), 'a');
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=map_get_not_found]
SELECT MAP_GET(MAP_FROM_ARRAY([('a', 1)]), 'absent');
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=map_get_with_default]
SELECT
  MAP_GET(MAP_FROM_ARRAY([('a', 1)]), 'a', -1) as found,
  MAP_GET(MAP_FROM_ARRAY([('a', 1)]), 'absent', -2) as not_found;
--
ARRAY<STRUCT<found INT64, not_found INT64>>[{1, -2}]
==

[name=map_get_null_key]
SELECT
  MAP_GET(MAP_FROM_ARRAY([(NULL, 1)]), NULL) as found,
  MAP_GET(MAP_FROM_ARRAY([('a', 1)]), NULL) as not_found,
  MAP_GET(MAP_FROM_ARRAY([('a', 1)]), NULL, -1) as not_found_with_default;
--
ARRAY<STRUCT<
        found INT64,
        not_found INT64,
        not_found_with_default INT64
      >>[{1, NULL, -1}]
==

[name=map_get_nan_key]
SELECT
  MAP_GET(MAP_FROM_ARRAY([(CAST("nan" AS DOUBLE), 1)]), CAST("nan" AS DOUBLE)) as found,
  MAP_GET(MAP_FROM_ARRAY([(CAST(1 AS DOUBLE), 1)]), CAST("nan" AS DOUBLE)) as not_found,
--
ARRAY<STRUCT<found INT64, not_found INT64>>[{1, NULL}]
==

[name=map_get_key_null_map]
SELECT
  MAP_GET(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<INT64, STRING>>)), 1) as with_no_default,
  MAP_GET(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<INT64, STRING>>)), 1, "foo") as with_default;
--
ARRAY<STRUCT<
        with_no_default STRING,
        with_default STRING
      >>[{NULL, NULL}]
==

[name=map_get_bytes_to_string_coercion]
[required_features=MAP_TYPE,IMPLICIT_COERCION_STRING_LITERAL_TO_BYTES]
SELECT MAP_GET(MAP_FROM_ARRAY([(b'a', 1)]), 'a');
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=map_get_float_found]
SELECT MAP_GET(MAP_FROM_ARRAY([(1.5, 'a'), (1.51, 'b')]), 1.5);
--
ARRAY<STRUCT<STRING>>[{"a"}]
==

[name=map_get_float_coerced_found]
SELECT MAP_GET(MAP_FROM_ARRAY([(1.5, 'a'), (1.0, 'b')]), 1);
--
ARRAY<STRUCT<STRING>>[{"b"}]
==

[required_features=MAP_TYPE,JSON_TYPE]
[name=map_get_json_null_found]
SELECT MAP_GET(MAP_FROM_ARRAY([('a', JSON '1'), (NULL, NULL)]), NULL);
--
ARRAY<STRUCT<JSON>>[{NULL}]
==

[required_features=MAP_TYPE,JSON_TYPE]
[name=map_get_json_null_not_found]
SELECT MAP_GET(MAP_FROM_ARRAY([('a', JSON '1'), ('b', NULL)]), NULL, JSON '-1');
--
ARRAY<STRUCT<JSON>>[{-1}]
==

[name=map_get_proto_enum_found]
SELECT MAP_GET(MAP_FROM_ARRAY([(CAST('TESTENUM0' as zetasql_test__.TestEnum), NEW zetasql_test__.KitchenSinkPB(1 as int64_key_1, 2 as int64_key_2)), ('TESTENUM1', 'int64_key_1: 3 int64_key_2: 4')]), 'TESTENUM1');
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 3
     int64_key_2: 4
   }}
]
==

[name=map_get_proto_enum_not_found]
SELECT MAP_GET(MAP_FROM_ARRAY([(CAST('TESTENUM0' as zetasql_test__.TestEnum), NEW zetasql_test__.KitchenSinkPB(1 as int64_key_1, 2 as int64_key_2)), ('TESTENUM1', 'int64_key_1: 3 int64_key_2: 4')]), NULL, 'int64_key_1: 5 int64_key_2: 6');
--
ARRAY<STRUCT<PROTO<zetasql_test__.KitchenSinkPB>>>[
  {{
     int64_key_1: 5
     int64_key_2: 6
   }}
]
==

[name=map_subscript_bare_found]
SELECT MAP_FROM_ARRAY([('a', 1)])['a'];
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=map_subscript_bare_not_found]
SELECT MAP_FROM_ARRAY([('a', 1)])['b'];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=map_subscript_bare_null_key_found]
SELECT MAP_FROM_ARRAY([('a', 1), (NULL, 2)])[NULL];
--
ARRAY<STRUCT<INT64>>[{2}]
==

[name=map_subscript_bare_null_key_not_found]
SELECT MAP_FROM_ARRAY([('a', 1)])[NULL];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=map_subscript_with_key_found]
SELECT MAP_FROM_ARRAY([('a', 1)])[KEY('a')];
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=map_subscript_with_key_not_found]
SELECT MAP_FROM_ARRAY([('a', 1)])[KEY('b')];
--
ERROR: generic::out_of_range: Key not found in map: "b"
==

[name=map_subscript_with_key_null_key_found]
SELECT MAP_FROM_ARRAY([('a', 1), (NULL, 2)])[KEY(NULL)];
--
ARRAY<STRUCT<INT64>>[{2}]
==

[name=map_subscript_key_null_key_not_found]
SELECT MAP_FROM_ARRAY([('a', 1)])[KEY(NULL)];
--
ERROR: generic::out_of_range: Key not found in map: NULL
==

[name=map_subscript_safe_key_found]
[required_features=MAP_TYPE,SAFE_FUNCTION_CALL]
SELECT MAP_FROM_ARRAY([('a', 1)])[SAFE_KEY('a')];
--
ARRAY<STRUCT<INT64>>[{1}]
==

[name=map_subscript_safe_key_not_found]
[required_features=MAP_TYPE,SAFE_FUNCTION_CALL]
SELECT MAP_FROM_ARRAY([('a', 1)])[SAFE_KEY('b')];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=map_subscript_safe_key_null_key_found]
[required_features=MAP_TYPE,SAFE_FUNCTION_CALL]
SELECT MAP_FROM_ARRAY([('a', 1), (NULL, 2)])[SAFE_KEY(NULL)];
--
ARRAY<STRUCT<INT64>>[{2}]
==

[name=map_subscript_safe_key_null_key_not_found]
[required_features=MAP_TYPE,SAFE_FUNCTION_CALL]
SELECT MAP_FROM_ARRAY([('a', 1)])[SAFE_KEY(NULL)];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=null_map_subscript_bare_access]
[required_features=MAP_TYPE]
SELECT MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>))['a'];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=null_map_subscript_with_key]
[required_features=MAP_TYPE]
SELECT MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>))[KEY('a')];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=null_map_subscript_safe_key]
[required_features=MAP_TYPE,SAFE_FUNCTION_CALL]
SELECT MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>))[SAFE_KEY('a')];
--
ARRAY<STRUCT<INT64>>[{NULL}]
==

[name=map_contains_key_null_map]
SELECT
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY(
      CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>)), 'foo') as null_map,
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY(
      CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>)), NULL) as null_map_null_key,
--
ARRAY<STRUCT<
        null_map BOOL,
        null_map_null_key BOOL
      >>[{NULL, NULL}]
==

[name=map_contains_key]
SELECT
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY([('foo', 1), ('bar', 2)]), 'foo') as map_found,
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY([('foo', 1), ('bar', 2)]), 'not_present') as map_not_found,
--
ARRAY<STRUCT<map_found BOOL, map_not_found BOOL>>[{true, false}]
==

[name=map_contains_key_null_key]
SELECT
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY([(NULL, 1)]), NULL) as map_null_key_found,
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY([('foo', 1)]), NULL) as map_null_key_not_found;
--
ARRAY<STRUCT<
        map_null_key_found BOOL,
        map_null_key_not_found BOOL
      >>[{true, false}]
==

[name=map_contains_key_nan_key]
SELECT
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY([(CAST("nan" AS DOUBLE), 1)]), CAST("nan" AS DOUBLE)) as map_nan_key_found,
  MAP_CONTAINS_KEY(
    MAP_FROM_ARRAY([(CAST("nan" AS DOUBLE), 1)]), CAST("inf" AS DOUBLE)) as map_nan_key_not_found;
--
ARRAY<STRUCT<
        map_nan_key_found BOOL,
        map_nan_key_not_found BOOL
      >>[{true, false}]
==

[name=cast_basic_null]
SELECT CAST(NULL AS MAP<STRING, STRING>);
--
ARRAY<STRUCT<MAP<STRING, STRING>>>[{NULL}]
==

[name=cast_basic_same_type]
SELECT CAST(MAP_FROM_ARRAY([("a", 1)]) AS MAP<STRING, INT64>);
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{{"a": 1}}]
==

[name=cast_nested_same_type]
[required_features=MAP_TYPE]
SELECT CAST(MAP_FROM_ARRAY([("a", [('a', new zetasql_test__.EmptyMessage())])]) AS MAP<STRING, ARRAY<STRUCT<STRING, zetasql_test__.EmptyMessage>>>);
--
ARRAY<STRUCT<
        MAP<STRING, ARRAY<STRUCT<STRING, PROTO<zetasql_test__.EmptyMessage, file name: zetasql/testdata/test_schema.proto, <message EmptyMessage {
}
>>>>>
      >>[{{"a": [{"a", {}}]}}]
==

[name=cast_map_nested_space]
SELECT CAST(NULL AS MAP<STRING, MAP<STRING, STRING> >);
--
ARRAY<STRUCT<MAP<STRING, MAP<STRING, STRING>>>>[{NULL}]
==

[name=cast_map_value_int64_to_float]
SELECT
  CAST(MAP_FROM_ARRAY([("a", 1), ("b", 2)]) AS MAP<STRING, FLOAT>);
--
ARRAY<STRUCT<MAP<STRING, FLOAT>>>[{{"a": 1, "b": 2}}]
==

[name=cast_map_key_int64_to_float]
SELECT
  CAST(MAP_FROM_ARRAY([(1, "a"), (2, "b")]) AS MAP<FLOAT, STRING>);
--
ARRAY<STRUCT<MAP<FLOAT, STRING>>>[{{1: "a", 2: "b"}}]
==

[name=cast_map_key_string_to_float_valid]
SELECT
  CAST(MAP_FROM_ARRAY([("2.5", 1), ("3.5", 2)]) AS MAP<FLOAT, INT64>);
--
ARRAY<STRUCT<MAP<FLOAT, INT64>>>[{{2.5: 1, 3.5: 2}}]
==

[name=cast_map_key_string_to_float_invalid]
SELECT
  CAST(MAP_FROM_ARRAY([("1.0", 0), ("a", 1)]) AS MAP<FLOAT, INT64>);
--
ERROR: generic::out_of_range: Bad float value: a
==

[name=cast_map_value_string_to_float_valid]
SELECT
  CAST(MAP_FROM_ARRAY([(1, "2.5"), (2, "3.5")]) AS MAP<INT64, FLOAT>);
--
ARRAY<STRUCT<MAP<INT64, FLOAT>>>[{{1: 2.5, 2: 3.5}}]
==

[name=cast_map_value_string_to_float_invalid]
SELECT
  CAST(MAP_FROM_ARRAY([(0, "1.0"), (1, "a")]) AS MAP<INT64, FLOAT>);
--
ERROR: generic::out_of_range: Bad float value: a
==

[name=cast_map_keys_string_to_float_values_date_to_string]
SELECT
  CAST(
    MAP_FROM_ARRAY([(1.1, DATE("2024-01-01")), (1.2, DATE("2024-01-02"))])
    AS MAP<FLOAT, STRING>);
--
ARRAY<STRUCT<MAP<FLOAT, STRING>>>[{{1.1: "2024-01-01", 1.2: "2024-01-02"}}]
==

[name=cast_map_nested]
[required_features=MAP_TYPE,GROUP_BY_STRUCT]
SELECT
  CAST(
    MAP_FROM_ARRAY([("a", MAP_FROM_ARRAY([(STRUCT("4"), 1), (STRUCT("5"), 2)]))])
    AS MAP<STRING, MAP<STRUCT<INT64>, INT64>>);
--
ARRAY<STRUCT<MAP<STRING, MAP<STRUCT<INT64>, INT64>>>>[
  {{"a": {{4}: 1, {5}: 2}}}
]
==

[name=cast_map_nested_invalid]
[required_features=MAP_TYPE,GROUP_BY_STRUCT]
SELECT
  CAST(
    MAP_FROM_ARRAY([("a", MAP_FROM_ARRAY([(STRUCT("4a"), 1), (STRUCT("5"), 2)]))])
    AS MAP<STRING, MAP<STRUCT<INT64>, INT64>>);
--
ERROR: generic::out_of_range: Bad int64 value: 4a
==

[name=cast_map_null_to_null_different_types]
SELECT CAST(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<INT64, STRING>>)) AS MAP<STRING, INT64>);
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{NULL}]
==

[name=cast_map_null_elements_different_types]
SELECT CAST(MAP_FROM_ARRAY([(CAST(NULL AS STRING), "1"), ("1", NULL)]) AS MAP<INT64, INT64>);
--
ARRAY<STRUCT<MAP<INT64, INT64>>>[{{NULL: 1, 1: NULL}}]
==

[name=cast_map_duplicate_keys_after_cast]
SELECT CAST(MAP_FROM_ARRAY([(1.1, "a"), (1.2, "b")]) AS MAP<INT64, STRING>);
--
ERROR: generic::out_of_range: Duplicate map keys are not allowed, but got multiple instances of key: 1
==

[name=map_keys_values_sorted_unsorted_null]
SELECT
  MAP_KEYS_SORTED(CAST(NULL AS MAP<STRING, STRING>)) as keys_sorted,
  MAP_KEYS_UNSORTED(CAST(NULL AS MAP<STRING, STRING>)) as keys_unsorted,
  MAP_VALUES_SORTED(CAST(NULL AS MAP<STRING, STRING>)) as values_sorted,
  MAP_VALUES_UNSORTED(CAST(NULL AS MAP<STRING, STRING>)) as values_unsorted;
--
ARRAY<STRUCT<
        keys_sorted ARRAY<>,
        keys_unsorted ARRAY<>,
        values_sorted ARRAY<>,
        values_unsorted ARRAY<>
      >>
[{ARRAY<STRING>(NULL),
  ARRAY<STRING>(NULL),
  ARRAY<STRING>(NULL),
  ARRAY<STRING>(NULL)}]
==

[name=map_keys_values_sorted_unsorted]
WITH t AS (
  SELECT MAP_FROM_ARRAY([('d', 1), ('b', 2), ('c', 3), ('a', 4), ('e', 5)]) as m
)
SELECT
  MAP_KEYS_SORTED(t.m) as keys_sorted,
  MAP_KEYS_UNSORTED(t.m) as keys_unsorted,
  MAP_VALUES_SORTED(t.m) as values_sorted,
  MAP_VALUES_UNSORTED(t.m) as values_unsorted
FROM t;
--
ARRAY<STRUCT<
        keys_sorted ARRAY<>,
        keys_unsorted ARRAY<>,
        values_sorted ARRAY<>,
        values_unsorted ARRAY<>
      >>
[{
   ARRAY<STRING>[known order:"a", "b", "c", "d", "e"],
   ARRAY<STRING>[unknown order:"a", "b", "c", "d", "e"],
   ARRAY<INT64>[known order:1, 2, 3, 4, 5],
   ARRAY<INT64>[unknown order:4, 2, 3, 1, 5]
 }]
==

[name=map_keys_values_sorted_unsorted_single_element]
WITH t AS (
  SELECT MAP_FROM_ARRAY([('a', 1)]) as m
)
SELECT
  MAP_KEYS_SORTED(t.m) as keys_sorted,
  MAP_KEYS_UNSORTED(t.m) as keys_unsorted,
  MAP_VALUES_SORTED(t.m) as values_sorted,
  MAP_VALUES_UNSORTED(t.m) as values_unsorted
FROM t;
--
ARRAY<STRUCT<
        keys_sorted ARRAY<>,
        keys_unsorted ARRAY<>,
        values_sorted ARRAY<>,
        values_unsorted ARRAY<>
      >>[
  {ARRAY<STRING>["a"], ARRAY<STRING>["a"], ARRAY<INT64>[1], ARRAY<INT64>[1]}
]
==

[name=map_values_sorted_by_key]
SELECT
  MAP_VALUES_SORTED_BY_KEY(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>))) as null_map,
  MAP_VALUES_SORTED_BY_KEY(MAP_FROM_ARRAY(CAST([] AS ARRAY<STRUCT<STRING, INT64>>))) as empty_map,
  MAP_VALUES_SORTED_BY_KEY(MAP_FROM_ARRAY([('b', 1), ('a', 2)])) as opposite_map,
  MAP_VALUES_SORTED_BY_KEY(MAP_FROM_ARRAY([('b', 1), ('a', 2), (NULL, 3)])) as map_null_key,
  MAP_VALUES_SORTED_BY_KEY(MAP_FROM_ARRAY([('b', STRUCT(1)), ('a', STRUCT(2)), (NULL, STRUCT(3))])) as map_unorderable_value;
--
ARRAY<STRUCT<
        null_map ARRAY<>,
        empty_map ARRAY<>,
        opposite_map ARRAY<>,
        map_null_key ARRAY<>,
        map_unorderable_value ARRAY<>
      >>
[{
   ARRAY<INT64>(NULL),
   ARRAY<INT64>[],
   ARRAY<INT64>[known order:2, 1],
   ARRAY<INT64>[known order:3, 2, 1],
   ARRAY<STRUCT<INT64>>[known order:{3}, {2}, {1}]
 }]
==

[name=map_empty]
SELECT
  MAP_EMPTY(MAP_FROM_ARRAY([('a', 1)])) as one_element_map,
  MAP_EMPTY(MAP_FROM_ARRAY([('a', 1), ('b', 2)])) as two_element_map,
  MAP_EMPTY(MAP_FROM_ARRAY([(NULL, NULL)])) as null_element_map,
  MAP_EMPTY(MAP_FROM_ARRAY(CAST([] AS ARRAY<STRUCT<STRING, INT64>>))) as empty_map,
  MAP_EMPTY(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>))) as null_map;
--
ARRAY<STRUCT<
        one_element_map BOOL,
        two_element_map BOOL,
        null_element_map BOOL,
        empty_map BOOL,
        null_map BOOL
      >>[{false, false, false, true, NULL}]
==

[name=map_insert_and_map_insert_or_replace]
SELECT
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1)]), 'b', 2)                      as i_one_element_one_added,
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'c', 3)            as i_two_elements_one_added,
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1)]), 'b', 2, 'c', 3)              as i_one_element_two_added,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'b', 2)           as r_one_element_one_added,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'c', 3) as r_two_elements_one_added,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'b', 2, 'c', 3)   as r_one_element_two_added;
--
ARRAY<STRUCT<
        i_one_element_one_added MAP<STRING, INT64>,
        i_two_elements_one_added MAP<STRING, INT64>,
        i_one_element_two_added MAP<STRING, INT64>,
        r_one_element_one_added MAP<STRING, INT64>,
        r_two_elements_one_added MAP<STRING, INT64>,
        r_one_element_two_added MAP<STRING, INT64>
      >>
[{
   {"a": 1, "b": 2},
   {"a": 1, "b": 2, "c": 3},
   {"a": 1, "b": 2, "c": 3},
   {"a": 1, "b": 2},
   {"a": 1, "b": 2, "c": 3},
   {"a": 1, "b": 2, "c": 3}
 }]
==

[name=map_insert_and_map_insert_or_replace_null_map]
SELECT
  MAP_INSERT(NULL, 'a', 1) as i_one_added,
  MAP_INSERT(NULL, 'b', 2, 'c', 3) as i_two_added,
  MAP_INSERT(NULL, NULL, NULL) as i_null_key_one_added,
  MAP_INSERT(NULL, 'b', 2, CAST(NULL as STRING), CAST(NULL as INT64)) as i_null_key_two_added,
  MAP_INSERT_OR_REPLACE(NULL, 'a', 1) as r_one_added,
  MAP_INSERT_OR_REPLACE(NULL, 'b', 2, 'c', 3) as r_two_added,
  MAP_INSERT_OR_REPLACE(NULL, NULL, NULL) as r_null_key_one_added,
  MAP_INSERT_OR_REPLACE(NULL, 'b', 2, CAST(NULL as STRING), CAST(NULL as INT64)) as r_null_key_two_added,
--
ARRAY<STRUCT<
        i_one_added MAP<STRING, INT64>,
        i_two_added MAP<STRING, INT64>,
        i_null_key_one_added MAP<INT64, INT64>,
        i_null_key_two_added MAP<STRING, INT64>,
        r_one_added MAP<STRING, INT64>,
        r_two_added MAP<STRING, INT64>,
        r_null_key_one_added MAP<INT64, INT64>,
        r_null_key_two_added MAP<STRING, INT64>
      >>[{NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}]
==

[name=map_insert_and_map_insert_or_replace_null_elements]
SELECT
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1)]), NULL, 2) as i_one_element_one_added_null_key,
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1)]), 'b', NULL) as i_one_element_one_added_null_value,
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1), (NULL, 2)]), 'b', NULL) as i_two_elements_one_added_null_value,
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1), ('b', NULL)]), NULL, NULL) as i_two_elements_one_added_null_key,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1)]), NULL, 2) as r_one_element_one_added_null_key,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'b', NULL) as r_one_element_one_added_null_value,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1), (NULL, 2)]), 'b', NULL) as r_two_elements_one_added_null_value,
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', NULL)]), NULL, NULL) as r_two_elements_one_added_null_key,
--
ARRAY<STRUCT<
        i_one_element_one_added_null_key MAP<STRING, INT64>,
        i_one_element_one_added_null_value MAP<STRING, INT64>,
        i_two_elements_one_added_null_value MAP<STRING, INT64>,
        i_two_elements_one_added_null_key MAP<STRING, INT64>,
        r_one_element_one_added_null_key MAP<STRING, INT64>,
        r_one_element_one_added_null_value MAP<STRING, INT64>,
        r_two_elements_one_added_null_value MAP<STRING, INT64>,
        r_two_elements_one_added_null_key MAP<STRING, INT64>
      >>
[{
   {NULL: 2, "a": 1},
   {"a": 1, "b": NULL},
   {NULL: 2, "a": 1, "b": NULL},
   {NULL: NULL, "a": 1, "b": NULL},
   {NULL: 2, "a": 1},
   {"a": 1, "b": NULL},
   {NULL: 2, "a": 1, "b": NULL},
   {NULL: NULL, "a": 1, "b": NULL}
 }]
==

[name=map_insert_duplicate_key]
SELECT
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 3);
--
ERROR: generic::out_of_range: Key already exists in map: "a"
==

[name=map_insert_or_replace_duplicate_key]
SELECT
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 3);
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{{"a": 3, "b": 2}}]
==

[name=map_insert_duplicate_null_key]
SELECT
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1), (NULL, 2)]), NULL, NULL);
--
ERROR: generic::out_of_range: Key already exists in map: NULL
==

[name=map_insert_or_replace_duplicate_null_key]
SELECT
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1), (NULL, 2)]), NULL, NULL);
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{{NULL: NULL, "a": 1}}]
==

[name=map_insert_duplicate_key_in_args]
SELECT
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1)]), 'b', 2, 'b', 2);
--
ERROR: generic::out_of_range: Key provided more than once as argument: "b"
==

[name=map_insert_or_replace_duplicate_key_in_args]
SELECT
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'b', 2, 'b', 2);
--
ERROR: generic::out_of_range: Key provided more than once as argument: "b"
==

[name=map_insert_duplicate_null_key_in_args]
SELECT
  MAP_INSERT(MAP_FROM_ARRAY([('a', 1)]), NULL, 2, CAST(NULL AS STRING), 2);
--
ERROR: generic::out_of_range: Key provided more than once as argument: NULL
==

[name=map_insert_or_replace_duplicate_null_key_in_args]
SELECT
  MAP_INSERT_OR_REPLACE(MAP_FROM_ARRAY([('a', 1)]), NULL, 2, CAST(NULL AS STRING), 2);
--
ERROR: generic::out_of_range: Key provided more than once as argument: NULL
==

[name=map_replace]
SELECT
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'a', 2) as one_element_one_replaced,
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 2) as two_elements_one_replaced,
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 2, 'b', 1) as two_elements_two_replaced;
--
ARRAY<STRUCT<
        one_element_one_replaced MAP<STRING, INT64>,
        two_elements_one_replaced MAP<STRING, INT64>,
        two_elements_two_replaced MAP<STRING, INT64>
      >>[{{"a": 2}, {"a": 2, "b": 2}, {"a": 2, "b": 1}}]
==

[name=map_replace_error_nonexistent_key]
SELECT MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'b', 3, 'a', 2, 'c', 1);
--
ERROR: generic::out_of_range: Key does not exist in map: "c"
==

[name=map_replace_error_duplicate_key_arg]
SELECT MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 2, 'b', 3, 'a', 0);
--
ERROR: generic::out_of_range: Key provided more than once as argument: "a"
==

[name=map_replace_null_map]
SELECT
  MAP_REPLACE(NULL, 'b', 2) as null_map,
  MAP_REPLACE(NULL, NULL, NULL) as null_map_null_key,
  MAP_REPLACE(NULL, NULL, NULL) as null_map_null_key_and_value;
--
ARRAY<STRUCT<
        null_map MAP<STRING, INT64>,
        null_map_null_key MAP<INT64, INT64>,
        null_map_null_key_and_value MAP<INT64, INT64>
      >>[{NULL, NULL, NULL}]
==

[name=map_replace_lambda]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'a', v -> v + 1) as one_element_one_replaced,
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', v -> v - 1) as two_elements_one_replaced,
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'b', v -> NULL) as two_elements_two_replaced,
  MAP_REPLACE(MAP_FROM_ARRAY([('a', 'b'), ('b', 'c')]), 'a', 'b', v -> CONCAT(v, '!')) as two_str_elements_two_replaced,
  MAP_REPLACE(CAST(NULL AS MAP<STRING, STRING>), 'a', 'b', v -> CONCAT(v, '!')) as null_map;
--
ARRAY<STRUCT<
        one_element_one_replaced MAP<STRING, INT64>,
        two_elements_one_replaced MAP<STRING, INT64>,
        two_elements_two_replaced MAP<STRING, INT64>,
        two_str_elements_two_replaced MAP<STRING, STRING>,
        null_map MAP<STRING, STRING>
      >>
[{
   {"a": 2},
   {"a": 0, "b": 2},
   {"a": NULL, "b": NULL},
   {"a": "b!", "b": "c!"},
   NULL
 }]
==

[name=map_replace_lambda_error_duplicate_key_arg]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'b', 'a', v -> v + 1);
--
ERROR: generic::out_of_range: Key provided more than once as argument: "a"
==

[name=map_replace_lambda_error_duplicate_null_key_arg]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT
  MAP_REPLACE(
    MAP_FROM_ARRAY([(1, 'a'), (NULL, 'b')]),
    NULL,
    (SELECT MAX(x) FROM UNNEST([]) as x),  # Subquery expression that returns NULL.
    v -> v);
--
ERROR: generic::out_of_range: Key provided more than once as argument: NULL
==

[name=map_replace_lambda_can_raise_user_error]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT MAP_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'a', v -> ERROR("custom user error"));
--
ERROR: generic::out_of_range: custom user error
==

[name=map_replace_lambda_with_conditional_user_error_not_raised]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT MAP_REPLACE(MAP_FROM_ARRAY([('a', 1)]), 'a', v -> IF(v = 1, 0, ERROR("not raised")));
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[{{"a": 0}}]
==

[name=map_replace_lambda_error_invalid_key_arg]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT MAP_REPLACE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'b', 'c', v -> v + 1);
--
ERROR: generic::out_of_range: Key does not exist in map: "c"
==

[name=map_modify_fns_null_map_duplicate_key_arg]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
# All map modification functions should return NULL if the map is NULL, and this
# takes precedence over the duplicate key argument error.
SELECT
  MAP_INSERT(NULL, 'b', 2, 'b', 3) as map_insert,
  MAP_INSERT_OR_REPLACE(NULL, 'b', 2, 'b', 3) as map_insert_or_replace,
  MAP_REPLACE(NULL, 'b', 2, 'b', 3) as map_replace,
  MAP_REPLACE(CAST(NULL AS MAP<STRING, INT64>), 'b', 'b', v -> v) as map_replace_lambda;
--
ARRAY<STRUCT<
        map_insert MAP<STRING, INT64>,
        map_insert_or_replace MAP<STRING, INT64>,
        map_replace MAP<STRING, INT64>,
        map_replace_lambda MAP<STRING, INT64>
      >>[{NULL, NULL, NULL, NULL}]
==

[name=map_delete]
SELECT
  MAP_DELETE(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>)), 'x', 'y') as null_map,
  MAP_DELETE(MAP_FROM_ARRAY(CAST([] AS ARRAY<STRUCT<STRING, INT64>>)), 'x', 'y') as empty_map,
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'b') as two_elements_two_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'c') as two_elements_one_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'x') as key_not_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), NULL) as null_arg_not_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), (NULL, 2)]), NULL) as null_key_deleted;
--
ARRAY<STRUCT<
        null_map MAP<STRING, INT64>,
        empty_map MAP<STRING, INT64>,
        two_elements_two_deleted MAP<STRING, INT64>,
        two_elements_one_deleted MAP<STRING, INT64>,
        key_not_deleted MAP<STRING, INT64>,
        null_arg_not_deleted MAP<STRING, INT64>,
        null_key_deleted MAP<STRING, INT64>
      >>[
  {NULL, {}, {}, {"b": 2}, {"a": 1, "b": 2}, {"a": 1, "b": 2}, {"a": 1}}
]
==

[name=map_delete_repeated_arg]
SELECT
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'b', 'a') as two_elements_two_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), 'a', 'x', 'x') as two_elements_one_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([(NULL, 1)]), NULL, NULL) as null_deleted,
  MAP_DELETE(MAP_FROM_ARRAY([('x', 1)]), NULL, NULL) as null_not_deleted,
--
ARRAY<STRUCT<
        two_elements_two_deleted MAP<STRING, INT64>,
        two_elements_one_deleted MAP<STRING, INT64>,
        null_deleted MAP<INT64, INT64>,
        null_not_deleted MAP<STRING, INT64>
      >>[{{}, {"b": 2}, {}, {"x": 1}}]
==

[name=map_filter]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT
  MAP_FILTER(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>)), (k, v) -> v > 1) as null_map,
  MAP_FILTER(MAP_FROM_ARRAY(CAST([] AS ARRAY<STRUCT<STRING, INT64>>)), (k, v) -> v > 1) as empty_map,
  MAP_FILTER(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), (k, v) -> k = 'a' AND v = 1) as one_filtered,
  MAP_FILTER(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), (k, v) -> LENGTH(k) > 1) as all_filtered,
  MAP_FILTER(MAP_FROM_ARRAY([('a', 1), ('b', 2)]), (k, v) -> v != 0) as none_filtered,
  MAP_FILTER(
    MAP_FROM_ARRAY([(CAST(NULL AS STRING), 1), ('b', NULL), ('c', 2), ('d', NULL)]),
    (k, v) -> k IS NULL OR v IS NULL) as nulls_only;
--
ARRAY<STRUCT<
        null_map MAP<STRING, INT64>,
        empty_map MAP<STRING, INT64>,
        one_filtered MAP<STRING, INT64>,
        all_filtered MAP<STRING, INT64>,
        none_filtered MAP<STRING, INT64>,
        nulls_only MAP<STRING, INT64>
      >>
[{
   NULL,
   {},
   {"a": 1},
   {},
   {"a": 1, "b": 2},
   {NULL: 1, "b": NULL, "d": NULL}
 }]
==

[name=map_filter_with_subquery]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
WITH
  t1 AS (SELECT col FROM UNNEST([1, 2]) as col),
  t2 AS (SELECT y FROM UNNEST([1, 2]) as y)
SELECT
  MAP_FILTER(
    MAP_FROM_ARRAY([('a', 1), ('b', 2)]),
    (k, v) -> EXISTS(SELECT MAX(y) from t2 where y > outer_t.col GROUP BY y)
  ) FROM t1 as outer_t;
--
ARRAY<STRUCT<MAP<STRING, INT64>>>[unknown order:{{}}, {{"a": 1, "b": 2}}]
==

[name=map_filter_lambda_error]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT
  MAP_FILTER(MAP_FROM_ARRAY([(1.5, 0)]), (k, v) -> 1/v = 1);
--
ERROR: generic::out_of_range: division by zero: 1 / 0
==

[name=map_safe_filter_lambda_error]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT,SAFE_FUNCTION_CALL,SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS]
SELECT
  SAFE.MAP_FILTER(MAP_FROM_ARRAY([(1.5, 0), (2.5, 1)]), (k, v) -> v = 1) as no_error_raised,
  SAFE.MAP_FILTER(MAP_FROM_ARRAY([(1.5, 0)]), (k, v) -> 1/v = 1) as error_raised;
--
ARRAY<STRUCT<
        no_error_raised MAP<DOUBLE, INT64>,
        error_raised MAP<DOUBLE, INT64>
      >>[{{2.5: 1}, NULL}]
==

[name=map_filter_nested_error]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT
  MAP_FILTER(MAP_FROM_ARRAY([(1.5, MAP_FROM_ARRAY([('a', 1), ('b', 2)])), (2.5, NULL)]), (k, v) -> MAP_FILTER(v, (k, v) -> ERROR('foo')) IS NOT NULL)
--
ERROR: generic::out_of_range: foo
==

[name=map_safe_filter_nested_no_error]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT,SAFE_FUNCTION_CALL,SAFE_FUNCTION_CALL_WITH_LAMBDA_ARGS]
SELECT
  SAFE.MAP_FILTER(MAP_FROM_ARRAY([(1.5, MAP_FROM_ARRAY([('a', 1), ('b', 2)])), (2.5, NULL)]), (k, v) -> MAP_FILTER(v, (k, v) -> ERROR('foo')) IS NOT NULL)
--
ARRAY<STRUCT<MAP<DOUBLE, MAP<STRING, INT64>>>>[{NULL}]
==

[name=map_cardinality]
SELECT
  MAP_CARDINALITY(MAP_FROM_ARRAY(CAST(NULL AS ARRAY<STRUCT<STRING, INT64>>))) as null_map,
  MAP_CARDINALITY(MAP_FROM_ARRAY(CAST([] AS ARRAY<STRUCT<STRING, INT64>>))) as empty_map,
  MAP_CARDINALITY(MAP_FROM_ARRAY([('a', 'b')])) as one_element_map,
  MAP_CARDINALITY(MAP_FROM_ARRAY([('a', 'b'), (NULL, NULL)])) as two_element_map;
--
ARRAY<STRUCT<
        null_map INT64,
        empty_map INT64,
        one_element_map INT64,
        two_element_map INT64
      >>[{NULL, 0, 1, 2}]
==

[name=map_cardinality_dynamic_map]
[required_features=MAP_TYPE,INLINE_LAMBDA_ARGUMENT]
SELECT
  MAP_CARDINALITY(
    MAP_FILTER(
      MAP_INSERT(
        MAP_FROM_ARRAY([('a', 1)]),
        'b', 2,
        'c', 3,
        'd', (SELECT x from UNNEST([4]) AS x)),
      (k, v) -> v > 2)
  );
--
ARRAY<STRUCT<INT64>>[{2}]
