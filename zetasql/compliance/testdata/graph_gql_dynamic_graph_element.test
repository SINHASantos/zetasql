[default reserve_graph_table]
[default required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,JSON_TYPE]
[load_proto_files=zetasql/testdata/test_schema.proto]
[load_proto_names=zetasql_test__.KitchenSinkPB]

[prepare_database]
CREATE TABLE DynamicGraphNode AS
(SELECT 1 AS id, "person" AS nodeLabelCol, 1000 AS code, JSON '{"name": "Alice"}' AS nodePropCol) UNION ALL
(SELECT 2 AS id, "person" AS nodeLabelCol, 2000 AS code, JSON '{"name": "Bob"}' AS nodePropCol) UNION ALL
(SELECT 3 as id, "person" AS nodeLabelCol, 3000 AS code, JSON '{"name": "Cindy"}' AS nodePropCol) UNION ALL
(SELECT 8 as id, "person" AS nodeLabelCol, 8000 AS code, JSON '{"name": ["Dylan", "Dana"]}' AS nodePropCol) UNION ALL
(SELECT 4 AS id, "account" AS nodeLabelCol, 4000 AS code, JSON '{"name": "Checking"}' AS nodePropCol) UNION ALL
(SELECT 5 AS id, "account" AS nodeLabelCol, 5000 AS code, JSON '{"name": "Saving"}' AS nodePropCol) UNION ALL
(SELECT 6 as id, "account" AS nodeLabelCol, 6000 AS code, JSON '{"name": "Saving"}' AS nodePropCol) UNION ALL
(SELECT 7 as id, CAST(NULL AS STRING) AS nodeLabelCol, NULL AS code, CAST(NULL AS JSON) AS nodePropCol) UNION ALL
(SELECT 9 as id, "" AS nodeLabelCol, 9000 AS code, JSON '{"name": "EmptyVal"}' AS nodePropCol)
--
ARRAY<STRUCT<id INT64, nodeLabelCol STRING, code INT64, nodePropCol JSON>>[
  {1, "person", 1000, {"name":"Alice"}},
  {2, "person", 2000, {"name":"Bob"}},
  {3, "person", 3000, {"name":"Cindy"}},
  {
    8,
    "person",
    8000,
    {"name":["Dylan","Dana"]}
  },
  {4, "account", 4000, {"name":"Checking"}},
  {5, "account", 5000, {"name":"Saving"}},
  {6, "account", 6000, {"name":"Saving"}},
  {7, NULL, NULL, NULL},
  {9, "", 9000, {"name":"EmptyVal"}}
]
==
[prepare_database]
CREATE TABLE DynamicGraphEdge AS
(SELECT 100 AS id, 4 AS from_dynamic_node_id, 5 AS to_dynamic_node_id, "transfer" AS edgeLabelCol, "Interest" AS category, JSON '{"amount": 10.0, "location": "USA"}' AS edgePropCol, TIMESTAMP '2000-01-01 00:00:00' AS since) UNION ALL
(SELECT 200 AS id, 5 AS from_dynamic_node_id, 6 AS to_dynamic_node_id, "transfer" AS edgeLabelCol, "Payment" AS category, JSON '{"amount": 1000.0, "location": "China"}' AS edgePropCol, TIMESTAMP '2000-01-02 00:00:00' AS since) UNION ALL
(SELECT 300 AS id, 4 AS from_dynamic_node_id, 6 AS to_dynamic_node_id, "transfer" AS edgeLabelCol, "Payment" AS category, JSON '{"amount": 2000.0, "location": null}' AS edgePropCol, TIMESTAMP '2000-01-03 00:00:00' AS since) UNION ALL
(SELECT 400 AS id, 1 AS from_dynamic_node_id, 4 AS to_dynamic_node_id, "owns" AS edgeLabelCol, "Personal" AS category, JSON '{"amount": 2000.0, "location": "India"}' AS edgePropCol, TIMESTAMP '2000-01-03 00:00:00' AS since) UNION ALL
(SELECT 500 AS id, 2 AS from_dynamic_node_id, 5 AS to_dynamic_node_id, "owns" AS edgeLabelCol, "Business" AS category, JSON '{"amount": 2000.0, "location": "India"}' AS edgePropCol, TIMESTAMP '2000-01-03 00:00:00' AS since) UNION ALL
(SELECT 600 AS id, 3 AS from_dynamic_node_id, 6 AS to_dynamic_node_id, "owns" AS edgeLabelCol, "Personal" AS category, JSON '{"amount": 2000.0, "location": "India"}' AS edgePropCol, TIMESTAMP '2000-01-03 00:00:00' AS since) UNION ALL
(SELECT 700 AS id, 5 AS from_dynamic_node_id, 4 AS to_dynamic_node_id, CAST(NULL AS STRING) AS edgeLabelCol, NULL AS category, CAST(NULL AS JSON) AS edgePropCol, TIMESTAMP '2000-01-03 00:00:00' AS since) UNION ALL
(SELECT 800 AS id, 4 AS from_dynamic_node_id, 6 AS to_dynamic_node_id, "transfer" AS edgeLabelCol, "Payment" AS category, JSON '{"amount": 5000.0, "location": "USA"}' AS edgePropCol, TIMESTAMP '2000-01-03 00:00:00' AS since)
--
ARRAY<STRUCT<
        id INT64,
        from_dynamic_node_id INT64,
        to_dynamic_node_id INT64,
        edgeLabelCol STRING,
        category STRING,
        edgePropCol JSON,
        since TIMESTAMP
      >>
[{
   100,
   4,
   5,
   "transfer",
   "Interest",
   {"amount":10.0,"location":"USA"},
   2000-01-01 08:00:00+00
 },
 {
   200,
   5,
   6,
   "transfer",
   "Payment",
   {"amount":1000.0,"location":"China"},
   2000-01-02 08:00:00+00
 },
 {
   300,
   4,
   6,
   "transfer",
   "Payment",
   {"amount":2000.0,"location":null},
   2000-01-03 08:00:00+00
 },
 {
   400,
   1,
   4,
   "owns",
   "Personal",
   {"amount":2000.0,"location":"India"},
   2000-01-03 08:00:00+00
 },
 {
   500,
   2,
   5,
   "owns",
   "Business",
   {"amount":2000.0,"location":"India"},
   2000-01-03 08:00:00+00
 },
 {
   600,
   3,
   6,
   "owns",
   "Personal",
   {"amount":2000.0,"location":"India"},
   2000-01-03 08:00:00+00
 },
 {
   700,
   5,
   4,
   NULL,
   NULL,
   NULL,
   2000-01-03 08:00:00+00
 },
 {
   800,
   4,
   6,
   "transfer",
   "Payment",
   {"amount":5000.0,"location":"USA"},
   2000-01-03 08:00:00+00
 }]
==

[prepare_database]
CREATE TABLE Person AS
(SELECT 1 AS id, "name1" AS name) UNION ALL
(SELECT 2 AS id, "name2" AS name) UNION ALL
(SELECT 3 as id, "name3" AS name)
--
ARRAY<STRUCT<id INT64, name STRING>>[{1, "name1"}, {2, "name2"}, {3, "name3"}]
==
[prepare_database]
CREATE TABLE Person_knows_person AS
(SELECT 100 AS id, 1 AS from_person_id, 1 AS to_person_id, TIMESTAMP '2000-01-01 00:00:00' AS since) UNION ALL
(SELECT 200 AS id, 1 AS from_person_id, 2 AS to_person_id, TIMESTAMP '2000-01-02 00:00:00' AS since) UNION ALL
(SELECT 300 AS id, 2 AS from_person_id, 1 AS to_person_id, TIMESTAMP '2000-01-03 00:00:00' AS since)
--
ARRAY<STRUCT<id INT64, from_person_id INT64, to_person_id INT64, since TIMESTAMP>>[
  {
    100,
    1,
    1,
    2000-01-01 08:00:00+00
  },
  {
    200,
    1,
    2,
    2000-01-02 08:00:00+00
  },
  {
    300,
    2,
    1,
    2000-01-03 08:00:00+00
  }
]
==

[prepare_database]
CREATE TABLE Account AS
(SELECT 10 AS acct_id, cast('''
  int64_key_1: 1
  int64_key_2: 1
''' as `zetasql_test__.KitchenSinkPB`) AS owner_id, "checking" AS kind
) UNION ALL
(SELECT 20 AS acct_id, cast('''
  int64_key_1: 1
  int64_key_2: 1
''' as `zetasql_test__.KitchenSinkPB`) AS owner_id, "savings" AS kind
) UNION ALL
(SELECT 30 AS acct_id, cast('''
  int64_key_1: 2
  int64_key_2: 2
''' as `zetasql_test__.KitchenSinkPB`) AS owner_id, "checking" AS kind
)UNION ALL
(SELECT 40 AS acct_id, cast('''
  int64_key_1: 2
  int64_key_2: 2
''' as `zetasql_test__.KitchenSinkPB`) AS owner_id, "savings" as kind)
--
ARRAY<STRUCT<
        acct_id INT64,
        owner_id PROTO<zetasql_test__.KitchenSinkPB>,
        kind STRING
      >>
[{10,
  {
    int64_key_1: 1
    int64_key_2: 1
  },
  "checking"},
 {20,
  {
    int64_key_1: 1
    int64_key_2: 1
  },
  "savings"},
 {30,
  {
    int64_key_1: 2
    int64_key_2: 2
  },
  "checking"},
 {40,
  {
    int64_key_1: 2
    int64_key_2: 2
  },
  "savings"}]
==
[prepare_database]
CREATE TABLE Transfer AS
(SELECT 1 AS id, 10 AS from_account_id, 20 AS to_account_id, 100 AS amount) UNION ALL
(SELECT 2 AS id, 10 AS from_account_id, 20 AS to_account_id, 200 AS amount) UNION ALL
(SELECT 3 AS id, 20 AS from_account_id, 30 AS to_account_id, 300 AS amount) UNION ALL
(SELECT 4 AS id, 20 AS from_account_id, 30 AS to_account_id, 400 AS amount) UNION ALL
(SELECT 5 AS id, 30 AS from_account_id, 10 AS to_account_id, 500 AS amount) UNION ALL
(SELECT 6 AS id, 10 AS from_account_id, 10 AS to_account_id, 600 AS amount)
--
ARRAY<STRUCT<
        id INT64,
        from_account_id INT64,
        to_account_id INT64,
        amount INT64
      >>
[{1, 10, 20, 100},
 {2, 10, 20, 200},
 {3, 20, 30, 300},
 {4, 20, 30, 400},
 {5, 30, 10, 500},
 {6, 10, 10, 600}]
==

[prepare_database]
CREATE PROPERTY GRAPH aml_dynamic_label_static_properties
  NODE TABLES (
    DynamicGraphNode KEY (id)
              DEFAULT LABEL PROPERTIES (
                1000 + id AS account_id,
                code AS account_code)
              LABEL Entity PROPERTIES (code)
              DYNAMIC LABEL (nodeLabelCol)
  )
  EDGE TABLES (
    DynamicGraphEdge AS Relation KEY (id)
              SOURCE KEY (from_dynamic_node_id) REFERENCES DynamicGraphNode(id)
              DESTINATION KEY (to_dynamic_node_id) REFERENCES DynamicGraphNode(id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS
              LABEL Connection PROPERTIES (category)
              DYNAMIC LABEL (edgeLabelCol)
  )
==
[prepare_database]
CREATE PROPERTY GRAPH aml_dynamic_label_dynamic_properties
  NODE TABLES (
    DynamicGraphNode KEY (id)
              DEFAULT LABEL PROPERTIES (
                1000 + id AS account_id,
                code AS account_code)
              LABEL Entity PROPERTIES (code)
              DYNAMIC LABEL (nodeLabelCol)
              DYNAMIC PROPERTIES (nodePropCol)
  )
  EDGE TABLES (
    DynamicGraphEdge AS Relation KEY (id)
              SOURCE KEY (from_dynamic_node_id) REFERENCES DynamicGraphNode(id)
              DESTINATION KEY (to_dynamic_node_id) REFERENCES DynamicGraphNode(id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS
              LABEL Connection PROPERTIES (category)
              DYNAMIC LABEL (edgeLabelCol)
              DYNAMIC PROPERTIES (edgePropCol)
  )
==
[prepare_database]
CREATE PROPERTY GRAPH aml_static_label_dynamic_properties
  NODE TABLES (
    DynamicGraphNode KEY (id)
              DEFAULT LABEL PROPERTIES (
                1000 + id AS account_id,
                code AS account_code)
              LABEL Entity PROPERTIES (code)
              DYNAMIC PROPERTIES (nodePropCol),
    Person KEY (id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS,
    Account KEY (acct_id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS
  )
  EDGE TABLES (
    DynamicGraphEdge AS Relation KEY (id)
              SOURCE KEY (from_dynamic_node_id) REFERENCES DynamicGraphNode(id)
              DESTINATION KEY (to_dynamic_node_id) REFERENCES DynamicGraphNode(id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS
              LABEL Connection PROPERTIES (category)
              DYNAMIC PROPERTIES (edgePropCol),
    Person_knows_person AS Knows KEY (id)
              SOURCE KEY (from_person_id) REFERENCES Person(id)
              DESTINATION KEY (to_person_id) REFERENCES Person(id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS,
    Transfer  KEY (id)
              SOURCE KEY (from_account_id) REFERENCES Person(id)
              DESTINATION KEY (to_account_id) REFERENCES Person(id)
              DEFAULT LABEL PROPERTIES ALL COLUMNS
  )
==

###############################################################################
# IS LABELED predicate
###############################################################################
[name=is_labeled_static_label_aml_dynamic_label_static_properties]
# Static label in IS LABELED predicate in element table with:
# dynamic label + static properties
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n)
  return n.account_id AS id, n IS LABELED Entity AS is_static_label_entity
) gt
ORDER BY 1
--
ARRAY<STRUCT<
        id INT64,
        is_static_label_entity BOOL
      >>
[known order:{1001, true},
             {1002, true},
             {1003, true},
             {1004, true},
             {1005, true},
             {1006, true},
             {1007, true},
             {1008, true},
             {1009, true}]
==

[name=is_labeled_static_label_aml_dynamic_label_dynamic_properties]
# Static label in IS LABELED predicate in element table with:
# dynamic label + dynamic properties
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n)
  return n.account_id AS id, n IS LABELED Entity AS is_static_label_entity
) gt
ORDER BY 1
--
ARRAY<STRUCT<
        id INT64,
        is_static_label_entity BOOL
      >>
[known order:{1001, true},
             {1002, true},
             {1003, true},
             {1004, true},
             {1005, true},
             {1006, true},
             {1007, true},
             {1008, true},
             {1009, true}]
==

[name=is_labeled_static_label_aml_static_label_dynamic_properties]
# Static label in IS LABELED predicate in element table with:
# static label + dynamic properties
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n)
  return n.account_id AS id, n IS LABELED Entity AS is_static_label_entity
) gt
ORDER BY 1
--
ARRAY<STRUCT<
        id INT64,
        is_static_label_entity BOOL
      >>
[known order:{NULL, false},
             {NULL, false},
             {NULL, false},
             {NULL, false},
             {NULL, false},
             {NULL, false},
             {NULL, false},
             {1001, true},
             {1002, true},
             {1003, true},
             {1004, true},
             {1005, true},
             {1006, true},
             {1007, true},
             {1008, true},
             {1009, true}]
==

[name=is_labeled_dynamic_label_aml_dynamic_label_static_properties]
# Dynamic label in IS LABELED predicate in element table with:
# dynamic label + static properties
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n)
  return n.account_id AS id, n IS LABELED Account AS is_dynamic_label_1
) gt
ORDER BY 1
--
ARRAY<STRUCT<
        id INT64,
        is_dynamic_label_1 BOOL
      >>
[known order:{1001, false},
             {1002, false},
             {1003, false},
             {1004, true},
             {1005, true},
             {1006, true},
             {1007, false},
             {1008, false},
             {1009, false}]
==

[name=is_labeled_dynamic_label_aml_dynamic_label_dynamic_properties]
# Dynamic label in IS LABELED predicate in element table with:
# dynamic label + dynamic properties
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n)
  return n.account_id AS id, n IS LABELED NodeLabel1 AS is_dynamic_label_1
) gt
ORDER BY 1
--
ARRAY<STRUCT<
        id INT64,
        is_dynamic_label_1 BOOL
      >>
[known order:{1001, false},
             {1002, false},
             {1003, false},
             {1004, false},
             {1005, false},
             {1006, false},
             {1007, false},
             {1008, false},
             {1009, false}]
==

###############################################################################
# Property access
# Property specification
###############################################################################
[name=static_property_access_aml_dynamic_label_static_properties]
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n WHERE n.account_code = 3000)
  return n.account_id AS id
) gt
ORDER BY 1
--
ARRAY<STRUCT<id INT64>>[{1003}]
==

[name=static_property_access_aml_dynamic_label_dynamic_properties]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n WHERE n.account_code = 3000)
  return n.account_id AS id
) gt
ORDER BY 1
--
ARRAY<STRUCT<id INT64>>[{1003}]
==

[name=dynamic_property_access_aml_dynamic_label_dynamic_properties]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n { account_code: 3000, name : "Cindy" })
  return n.account_id AS id, n.name AS name
) gt
ORDER BY 1
--
ARRAY<STRUCT<id INT64, name JSON>>[{1003, "Cindy"}]
==

[name=static_property_access_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n WHERE n.account_code = 3000)
  return n.account_id AS id
) gt
ORDER BY 1
--
ARRAY<STRUCT<id INT64>>[{1003}]
==

[name=node_dynamic_property_access_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n { name : "name1" })
  return n.account_id AS id, n.name AS name
) gt
ORDER BY 1
--
ARRAY<STRUCT<id INT64, name STRING>>[{NULL, "name1"}]
==

[name=edge_dynamic_property_specification_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e { location : "USA" } ]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    e.category AS category,
    e.id AS edge_id
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64, to_node_id INT64, category STRING, edge_id INT64>>[known order:
  {4, 5, "Interest", 100},
  {4, 6, "Payment", 800}
]
==
# JSON null is not able to match with any primitive type (INT64) NULL value.
[name=edge_dynamic_property_specification_null_literal_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e { location : NULL } ]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    e.category AS category,
    e.id AS edge_id
) gt
ORDER BY 1
--
ARRAY<STRUCT<from_node_id INT64, to_node_id INT64, category STRING, edge_id INT64>>[]
==

[name=node_static_property_access_filter_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n WHERE n.name = "name1")
  return n.account_id AS id, n.name AS name
) gt
ORDER BY 1
--
ARRAY<STRUCT<id INT64, name STRING>>[{NULL, "name1"}]
==

###############################################################################
# LABELS function call
###############################################################################
[name=node_edge_labels_aml_dynamic_label_static_properties]
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    LABELS(n) AS node_labels,
    LABELS(e) AS edge_labels
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64,
             to_node_id INT64,
             node_labels ARRAY<>,
             edge_labels ARRAY<>>>
[known order:
  {
    1,
    4,
    ARRAY<STRING>[known order:"DynamicGraphNode", "Entity", "person"],
    ARRAY<STRING>[known order:"Connection", "owns", "Relation"]
  },
  {
    2,
    5,
    ARRAY<STRING>[known order:"DynamicGraphNode", "Entity", "person"],
    ARRAY<STRING>[known order:"Connection", "owns", "Relation"]
  },
  {
    3,
    6,
    ARRAY<STRING>[known order:"DynamicGraphNode", "Entity", "person"],
    ARRAY<STRING>[known order:"Connection", "owns", "Relation"]
  },
  {
    4,
    5,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  },
  {
    4,
    6,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  },
  {
    4,
    6,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  },
  {
    5,
    4,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation"]
  },
  {
    5,
    6,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  }
]
==

[name=node_edge_labels_aml_dynamic_label_dynamic_properties]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    LABELS(n) AS node_labels,
    LABELS(e) AS edge_labels
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64,
             to_node_id INT64,
             node_labels ARRAY<>,
             edge_labels ARRAY<>>>
[known order:
  {
    1,
    4,
    ARRAY<STRING>[known order:"DynamicGraphNode", "Entity", "person"],
    ARRAY<STRING>[known order:"Connection", "owns", "Relation"]
  },
  {
    2,
    5,
    ARRAY<STRING>[known order:"DynamicGraphNode", "Entity", "person"],
    ARRAY<STRING>[known order:"Connection", "owns", "Relation"]
  },
  {
    3,
    6,
    ARRAY<STRING>[known order:"DynamicGraphNode", "Entity", "person"],
    ARRAY<STRING>[known order:"Connection", "owns", "Relation"]
  },
  {
    4,
    5,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  },
  {
    4,
    6,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  },
  {
    4,
    6,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  },
  {
    5,
    4,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation"]
  },
  {
    5,
    6,
    ARRAY<STRING>[known order:"account", "DynamicGraphNode", "Entity"],
    ARRAY<STRING>[known order:"Connection", "Relation", "transfer"]
  }
]
==

[name=node_edge_labels_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    LABELS(n) AS node_labels,
    LABELS(e) AS edge_labels
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64,
             to_node_id INT64,
             node_labels ARRAY<>,
             edge_labels ARRAY<>>>
[known order:{
               NULL,
               NULL,
               ARRAY<STRING>["Person"],
               ARRAY<STRING>["Knows"]
             },
             {
               NULL,
               NULL,
               ARRAY<STRING>["Person"],
               ARRAY<STRING>["Knows"]
             },
             {
               NULL,
               NULL,
               ARRAY<STRING>["Person"],
               ARRAY<STRING>["Knows"]
             },
             {
               1,
               4,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               2,
               5,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               3,
               6,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               4,
               5,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               4,
               6,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               4,
               6,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               5,
               4,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             },
             {
               5,
               6,
               ARRAY<STRING>[known order:"DynamicGraphNode", "Entity"],
               ARRAY<STRING>[known order:"Connection", "Relation"]
             }]
==

###############################################################################
# PROPERTY_EXISTS function call
###############################################################################
[name=node_edge_property_exists_aml_dynamic_label_static_properties]
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    PROPERTY_EXISTS(n, code) AS node_has_property_code,
    PROPERTY_EXISTS(e, category) AS edge_has_property_category
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<
        from_node_id INT64,
        to_node_id INT64,
        node_has_property_code BOOL,
        edge_has_property_category BOOL
      >>
[known order:{1, 4, true, true},
             {2, 5, true, true},
             {3, 6, true, true},
             {4, 5, true, true},
             {4, 6, true, true},
             {4, 6, true, true},
             {5, 4, true, true},
             {5, 6, true, true}]
==

[name=node_edge_property_exists_aml_dynamic_label_dynamic_properties]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    PROPERTY_EXISTS(n, name) AS node_has_property_name,
    PROPERTY_EXISTS(e, location) AS edge_has_property_location
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<
        from_node_id INT64,
        to_node_id INT64,
        node_has_property_name BOOL,
        edge_has_property_location BOOL
      >>
[known order:{1, 4, true, true},
             {2, 5, true, true},
             {3, 6, true, true},
             {4, 5, true, true},
             {4, 6, true, true},
             {4, 6, true, true},
             {5, 4, true, false},
             {5, 6, true, true}]
==

[name=node_edge_property_exists_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    PROPERTY_EXISTS(n, name) AS node_has_property_name,
    PROPERTY_EXISTS(e, location) AS edge_has_property_location
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<
        from_node_id INT64,
        to_node_id INT64,
        node_has_property_name BOOL,
        edge_has_property_location BOOL
      >>
[known order:
  {NULL, NULL, true, false},
  {NULL, NULL, true, false},
  {NULL, NULL, true, false},
  {1, 4, true, true},
  {2, 5, true, true},
  {3, 6, true, true},
  {4, 5, true, true},
  {4, 6, true, true},
  {4, 6, true, true},
  {5, 4, true, false},
  {5, 6, true, true}
]
==

###############################################################################
# PROPERTY_NAMES function call
###############################################################################
[name=node_edge_property_names_aml_dynamic_label_static_properties]
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    PROPERTY_NAMES(n) AS node_property_names,
    PROPERTY_NAMES(e) AS edge_property_names
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<
        from_node_id INT64,
        to_node_id INT64,
        node_property_names ARRAY<>,
        edge_property_names ARRAY<>
      >>
[known order:
  {1,
   4,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {2,
   5,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {3,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   5,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {5,
   4,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {5,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]}
]
==

[name=node_edge_property_names_aml_dynamic_label_dynamic_properties]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    PROPERTY_NAMES(n) AS node_property_names,
    PROPERTY_NAMES(e) AS edge_property_names
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<
        from_node_id INT64,
        to_node_id INT64,
        node_property_names ARRAY<>,
        edge_property_names ARRAY<>
      >>
[known order:
  {1,
   4,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {2,
   5,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {3,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   5,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {5,
   4,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {5,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]}
]
==

[name=node_edge_property_names_aml_static_label_dynamic_properties]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    PROPERTY_NAMES(n) AS node_property_names,
    PROPERTY_NAMES(e) AS edge_property_names
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<
        from_node_id INT64,
        to_node_id INT64,
        node_property_names ARRAY<>,
        edge_property_names ARRAY<>
      >>
[known order:
  {
    NULL,
    NULL,
    ARRAY<STRING>[known order:"id", "name"],
    ARRAY<STRING>[known order:"from_person_id", "id", "since", "to_person_id"]
  },
  {
    NULL,
    NULL,
    ARRAY<STRING>[known order:"id", "name"],
    ARRAY<STRING>[known order:"from_person_id", "id", "since", "to_person_id"]
  },
  {
    NULL,
    NULL,
    ARRAY<STRING>[known order:"id", "name"],
    ARRAY<STRING>[known order:"from_person_id", "id", "since", "to_person_id"]
  },
  {1,
   4,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {2,
   5,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {3,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   5,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {4,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]},
  {5,
   4,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "since",
     "to_dynamic_node_id"
   ]},
  {5,
   6,
   ARRAY<STRING>[known order:"account_code", "account_id", "code", "name"],
   ARRAY<STRING>[known order:
     "amount",
     "category",
     "edgeLabelCol",
     "edgePropCol",
     "from_dynamic_node_id",
     "id",
     "location",
     "since",
     "to_dynamic_node_id"
   ]}
]
==

###############################################################################
# TO_JSON function call
###############################################################################
# Note all TO_JSON functions are tested without identifiers
# as identifiers are engine specific.
[name=node_edge_to_json_aml_dynamic_label_static_properties]
[required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,JSON_TYPE,JSON_MUTATOR_FUNCTIONS]
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    JSON_REMOVE(TO_JSON(n), "$.identifier") AS node_json,
    JSON_REMOVE(TO_JSON(e), "$.identifier", "$.source_node_identifier", "$.destination_node_identifier") AS edge_json
  next
  return from_node_id, to_node_id, node_json, edge_json
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64, to_node_id INT64, node_json JSON, edge_json JSON>>[unknown order:
  {
    1,
    4,
    {"kind":"node","labels":["DynamicGraphNode","Entity","person"],"properties":{"account_code":1000,"account_id":1001,"code":1000}},
    {"kind":"edge","labels":["Connection","owns","Relation"],"properties":{"category":"Personal","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":1,"id":400,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":4}}
  },
  {
    2,
    5,
    {"kind":"node","labels":["DynamicGraphNode","Entity","person"],"properties":{"account_code":2000,"account_id":1002,"code":2000}},
    {"kind":"edge","labels":["Connection","owns","Relation"],"properties":{"category":"Business","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":2,"id":500,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":5}}
  },
  {
    3,
    6,
    {"kind":"node","labels":["DynamicGraphNode","Entity","person"],"properties":{"account_code":3000,"account_id":1003,"code":3000}},
    {"kind":"edge","labels":["Connection","owns","Relation"],"properties":{"category":"Personal","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":3,"id":600,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    4,
    5,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"category":"Interest","edgeLabelCol":"transfer","edgePropCol":{"amount":10.0,"location":"USA"},"from_dynamic_node_id":4,"id":100,"since":"2000-01-01T08:00:00Z","to_dynamic_node_id":5}}
  },
  {
    4,
    6,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":5000.0,"location":"USA"},"from_dynamic_node_id":4,"id":800,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    4,
    6,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":2000.0,"location":null},"from_dynamic_node_id":4,"id":300,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    5,
    4,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":5000,"account_id":1005,"code":5000}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"category":null,"edgeLabelCol":null,"edgePropCol":null,"from_dynamic_node_id":5,"id":700,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":4}}
  },
  {
    5,
    6,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":5000,"account_id":1005,"code":5000}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":1000.0,"location":"China"},"from_dynamic_node_id":5,"id":200,"since":"2000-01-02T08:00:00Z","to_dynamic_node_id":6}}
  }
]
==

[name=node_edge_to_json_aml_dynamic_label_dynamic_properties]
[required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,JSON_TYPE,JSON_MUTATOR_FUNCTIONS]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    JSON_REMOVE(TO_JSON(n), "$.identifier") AS node_json,
    JSON_REMOVE(TO_JSON(e), "$.identifier", "$.source_node_identifier", "$.destination_node_identifier") AS edge_json
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64, to_node_id INT64, node_json JSON, edge_json JSON>>[unknown order:
  {
    1,
    4,
    {"kind":"node","labels":["DynamicGraphNode","Entity","person"],"properties":{"account_code":1000,"account_id":1001,"code":1000,"name":"Alice"}},
    {"kind":"edge","labels":["Connection","owns","Relation"],"properties":{"amount":2000.0,"category":"Personal","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":1,"id":400,"location":"India","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":4}}
  },
  {
    2,
    5,
    {"kind":"node","labels":["DynamicGraphNode","Entity","person"],"properties":{"account_code":2000,"account_id":1002,"code":2000,"name":"Bob"}},
    {"kind":"edge","labels":["Connection","owns","Relation"],"properties":{"amount":2000.0,"category":"Business","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":2,"id":500,"location":"India","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":5}}
  },
  {
    3,
    6,
    {"kind":"node","labels":["DynamicGraphNode","Entity","person"],"properties":{"account_code":3000,"account_id":1003,"code":3000,"name":"Cindy"}},
    {"kind":"edge","labels":["Connection","owns","Relation"],"properties":{"amount":2000.0,"category":"Personal","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":3,"id":600,"location":"India","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    4,
    5,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000,"name":"Checking"}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"amount":10.0,"category":"Interest","edgeLabelCol":"transfer","edgePropCol":{"amount":10.0,"location":"USA"},"from_dynamic_node_id":4,"id":100,"location":"USA","since":"2000-01-01T08:00:00Z","to_dynamic_node_id":5}}
  },
  {
    4,
    6,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000,"name":"Checking"}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"amount":5000.0,"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":5000.0,"location":"USA"},"from_dynamic_node_id":4,"id":800,"location":"USA","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    4,
    6,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000,"name":"Checking"}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"amount":2000.0,"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":2000.0,"location":null},"from_dynamic_node_id":4,"id":300,"location":null,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    5,
    4,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":5000,"account_id":1005,"code":5000,"name":"Saving"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"category":null,"edgeLabelCol":null,"edgePropCol":null,"from_dynamic_node_id":5,"id":700,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":4}}
  },
  {
    5,
    6,
    {"kind":"node","labels":["account","DynamicGraphNode","Entity"],"properties":{"account_code":5000,"account_id":1005,"code":5000,"name":"Saving"}},
    {"kind":"edge","labels":["Connection","Relation","transfer"],"properties":{"amount":1000.0,"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":1000.0,"location":"China"},"from_dynamic_node_id":5,"id":200,"location":"China","since":"2000-01-02T08:00:00Z","to_dynamic_node_id":6}}
  }
]
==

[name=node_edge_to_json_aml_static_label_dynamic_properties]
[required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,SQL_GRAPH_EXPOSE_GRAPH_ELEMENT,JSON_TYPE,JSON_MUTATOR_FUNCTIONS]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    JSON_REMOVE(TO_JSON(n), "$.identifier") AS node_json,
    JSON_REMOVE(TO_JSON(e), "$.identifier", "$.source_node_identifier", "$.destination_node_identifier") AS edge_json
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64, to_node_id INT64, node_json JSON, edge_json JSON>>[unknown order:
  {
    NULL,
    NULL,
    {"kind":"node","labels":["Person"],"properties":{"id":1,"name":"name1"}},
    {"kind":"edge","labels":["Knows"],"properties":{"from_person_id":1,"id":100,"since":"2000-01-01T08:00:00Z","to_person_id":1}}
  },
  {
    NULL,
    NULL,
    {"kind":"node","labels":["Person"],"properties":{"id":2,"name":"name2"}},
    {"kind":"edge","labels":["Knows"],"properties":{"from_person_id":2,"id":300,"since":"2000-01-03T08:00:00Z","to_person_id":1}}
  },
  {
    NULL,
    NULL,
    {"kind":"node","labels":["Person"],"properties":{"id":1,"name":"name1"}},
    {"kind":"edge","labels":["Knows"],"properties":{"from_person_id":1,"id":200,"since":"2000-01-02T08:00:00Z","to_person_id":2}}
  },
  {
    1,
    4,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":1000,"account_id":1001,"code":1000,"name":"Alice"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":2000.0,"category":"Personal","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":1,"id":400,"location":"India","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":4}}
  },
  {
    2,
    5,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":2000,"account_id":1002,"code":2000,"name":"Bob"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":2000.0,"category":"Business","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":2,"id":500,"location":"India","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":5}}
  },
  {
    3,
    6,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":3000,"account_id":1003,"code":3000,"name":"Cindy"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":2000.0,"category":"Personal","edgeLabelCol":"owns","edgePropCol":{"amount":2000.0,"location":"India"},"from_dynamic_node_id":3,"id":600,"location":"India","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    4,
    5,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000,"name":"Checking"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":10.0,"category":"Interest","edgeLabelCol":"transfer","edgePropCol":{"amount":10.0,"location":"USA"},"from_dynamic_node_id":4,"id":100,"location":"USA","since":"2000-01-01T08:00:00Z","to_dynamic_node_id":5}}
  },
  {
    4,
    6,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000,"name":"Checking"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":2000.0,"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":2000.0,"location":null},"from_dynamic_node_id":4,"id":300,"location":null,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    4,
    6,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":4000,"account_id":1004,"code":4000,"name":"Checking"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":5000.0,"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":5000.0,"location":"USA"},"from_dynamic_node_id":4,"id":800,"location":"USA","since":"2000-01-03T08:00:00Z","to_dynamic_node_id":6}}
  },
  {
    5,
    4,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":5000,"account_id":1005,"code":5000,"name":"Saving"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"category":null,"edgeLabelCol":null,"edgePropCol":null,"from_dynamic_node_id":5,"id":700,"since":"2000-01-03T08:00:00Z","to_dynamic_node_id":4}}
  },
  {
    5,
    6,
    {"kind":"node","labels":["DynamicGraphNode","Entity"],"properties":{"account_code":5000,"account_id":1005,"code":5000,"name":"Saving"}},
    {"kind":"edge","labels":["Connection","Relation"],"properties":{"amount":1000.0,"category":"Payment","edgeLabelCol":"transfer","edgePropCol":{"amount":1000.0,"location":"China"},"from_dynamic_node_id":5,"id":200,"location":"China","since":"2000-01-02T08:00:00Z","to_dynamic_node_id":6}}
  }
]
==

###############################################################################
# TYPEOF function call
###############################################################################
[name=node_edge_typeof_aml_dynamic_label_static_properties]
[required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,JSON_TYPE,TYPEOF_FUNCTION]
select gt.* from
graph_table(aml_dynamic_label_static_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    TYPEOF(n) AS node_type,
    TYPEOF(e) AS edge_type
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64,
             to_node_id INT64,
             node_type STRING,
             edge_type STRING>>
[known order:
  {
    1,
    4,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    2,
    5,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    3,
    6,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    4,
    5,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    4,
    6,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    4,
    6,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    5,
    4,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  },
  {
    5,
    6,
    "GRAPH_NODE(aml_dynamic_label_static_properties)<account_code INT64, account_id INT64, code INT64>",
    "GRAPH_EDGE(aml_dynamic_label_static_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64>"
  }
]
==

[name=node_edge_typeof_aml_dynamic_label_dynamic_properties]
[required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,JSON_TYPE,TYPEOF_FUNCTION]
select gt.* from
graph_table(aml_dynamic_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    TYPEOF(n) AS node_type,
    TYPEOF(e) AS edge_type
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64,
             to_node_id INT64,
             node_type STRING,
             edge_type STRING>>
[known order:
  {
    1,
    4,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    2,
    5,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    3,
    6,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    4,
    5,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    4,
    6,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    4,
    6,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    5,
    4,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  },
  {
    5,
    6,
    "GRAPH_NODE(aml_dynamic_label_dynamic_properties)<account_code INT64, account_id INT64, code INT64, DYNAMIC>",
    "GRAPH_EDGE(aml_dynamic_label_dynamic_properties)<category STRING, edgeLabelCol STRING, edgePropCol JSON, from_dynamic_node_id INT64, id INT64, since TIMESTAMP, to_dynamic_node_id INT64, DYNAMIC>"
  }
]
==

[name=node_edge_typeof_aml_static_label_dynamic_properties]
[required_features=SQL_GRAPH,SQL_GRAPH_ADVANCED_QUERY,SQL_GRAPH_DYNAMIC_ELEMENT_TYPE,SQL_GRAPH_DYNAMIC_LABEL_PROPERTIES_IN_DDL,JSON_TYPE,TYPEOF_FUNCTION]
select gt.* from
graph_table(aml_static_label_dynamic_properties
  match (n) -[e]-> ()
  return
    e.from_dynamic_node_id AS from_node_id,
    e.to_dynamic_node_id AS to_node_id,
    TYPEOF(n) AS node_type,
    TYPEOF(e) AS edge_type
) gt
ORDER BY 1, 2
--
ARRAY<STRUCT<from_node_id INT64,
             to_node_id INT64,
             node_type STRING,
             edge_type STRING>>
[known order:
  {
    NULL,
    NULL,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    NULL,
    NULL,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    NULL,
    NULL,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    1,
    4,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    2,
    5,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    3,
    6,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    4,
    5,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    4,
    6,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    4,
    6,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    5,
    4,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  },
  {
    5,
    6,
    "GRAPH_NODE(aml_static_label_dynamic_properties)<account_code INT64, account_id INT64, acct_id INT64, code INT64, id INT64, kind STRING, name STRING, owner_id zetasql_test__.KitchenSinkPB, DYNAMIC>",
    "GRAPH_EDGE(aml_static_label_dynamic_properties)<amount INT64, category STRING, edgeLabelCol STRING, edgePropCol JSON, from_account_id INT64, from_dynamic_node_id INT64, from_person_id INT64, id INT64, since TIMESTAMP, to_account_id INT64, to_dynamic_node_id INT64, to_person_id INT64, DYNAMIC>"
  }
]
==

###############################################################################
# Graph Element Label Expression
###############################################################################

[name=node_dynamic_label_expr]
SELECT gt.* FROM GRAPH_TABLE(
  aml_dynamic_label_dynamic_properties
  MATCH (n: Account&Entity)
  RETURN n.code AS code
) gt
ORDER BY 1
--
ARRAY<STRUCT<code INT64>>[known order:{4000}, {5000}, {6000}]
==
[name=edge_dynamic_label_expr]
SELECT gt.* FROM GRAPH_TABLE(aml_dynamic_label_dynamic_properties
  MATCH -[e: Transfer&Connection]->
  RETURN e.Id, e.Amount, e.location
) gt
ORDER BY 1
--
ARRAY<STRUCT<Id INT64, Amount JSON, location JSON>>[known order:
  {100, 10.0, "USA"},
  {200, 1000.0, "China"},
  {300, 2000.0, null},
  {800, 5000.0, "USA"}
]
