# TODO: b/316422061 - Consider replacing unnested ARRAYs in tests with tables
# defined with [create_table] once the bug with schema objects is resolved.
### CREATE FUNCTION STATEMENTS ###
[default required_features=MULTILEVEL_AGGREGATION]
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION SumTimesTwo(a INT64) AS (SUM(a) + SUM(a))
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION MaxTimesTwo(a INT64) AS (MAX(a) + MAX(a))
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION CountTimesTwo(a INT64) AS (COUNT(a) + COUNT(a))
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION AvgTimesTwo(a INT64) AS (AVG(a) + AVG(a))
==
[prepare_database]
[prepare_database_additional_features=MULTILEVEL_AGGREGATION_ON_UDAS]
CREATE TEMP AGGREGATE FUNCTION SumTimesTwoOverMaxByKey(key STRING, value INT64) AS (
  SumTimesTwo(MAX(value) GROUP BY key)
);
==
[prepare_database]
[prepare_database_additional_features=MULTILEVEL_AGGREGATION_ON_UDAS]
CREATE TEMP AGGREGATE FUNCTION MaxTimesTwoOverMaxByKey(key STRING, value INT64) AS (
  MaxTimesTwo(MAX(value) GROUP BY key)
);
==
[prepare_database]
[prepare_database_additional_features=MULTILEVEL_AGGREGATION_ON_UDAS]
CREATE TEMP AGGREGATE FUNCTION CountTimesTwoOverMaxByKey(key STRING, value INT64) AS (
  CountTimesTwo(MAX(value) GROUP BY key)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION SumSquares(a INT64) AS (SUM(a * a))
==
[prepare_database]
[required_features=TEMPLATE_FUNCTIONS,MULTILEVEL_AGGREGATION]
CREATE TEMP AGGREGATE FUNCTION TemplatedSumSquares(a ANY TYPE) AS (
  SUM(a * a)
);
==
[prepare_database]
[prepare_database_additional_features=MULTILEVEL_AGGREGATION_ON_UDAS]
CREATE TEMP AGGREGATE FUNCTION SumSquaresOverSumTimesTwoByKey(key STRING, a INT64) AS (
  SumSquares(SumTimesTwo(a) GROUP BY key)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION BunchOfAggs(a INT64) AS (
  STRUCT(
    SUM(a) AS sum_a,
    AVG(a) AS avg_a,
    COUNT(DISTINCT a) AS count_distinct_a)
)
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION NullaryUDAWithMultiLevelAgg()
RETURNS INT64
AS (
  (SELECT MAX(SUM(col2) GROUP BY col1)
  FROM
  (
    SELECT 1 AS col1, 100 AS col2
    UNION ALL
    SELECT 1, 400
    UNION ALL
    SELECT 2, 200
    UNION ALL
    SELECT 2, 800
    UNION ALL
    SELECT 2, 500
  ))
);
==
[prepare_database]
[required_features=MULTILEVEL_AGGREGATION]
CREATE TEMP FUNCTION NullaryUDFWithMultiLevelAgg()
RETURNS INT64
AS (
  (SELECT MAX(SUM(col2) GROUP BY col1)
  FROM
  (
    SELECT 1 AS col1, 100 AS col2
    UNION ALL
    SELECT 1, 400
    UNION ALL
    SELECT 2, 200
    UNION ALL
    SELECT 2, 800
    UNION ALL
    SELECT 2, 500
  ))
);
==
[prepare_database]
[required_features=MULTILEVEL_AGGREGATION]
CREATE TEMP FUNCTION SumOfDistinctArrayValues(arr ARRAY<INT64>) AS (
  (SELECT SUM(value GROUP BY value) FROM UNNEST(arr) AS value)
);
==
[prepare_database]
[required_features=TEMPLATE_FUNCTIONS,MULTILEVEL_AGGREGATION]
CREATE TEMP FUNCTION TemplatedSumOfDistinctArrayValues(arr ANY TYPE) AS (
  (SELECT SUM(value GROUP BY value) FROM UNNEST(arr) AS value)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION SumOfDistinctValues(value INT64) AS (
  SUM(value GROUP BY value)
);
==
[prepare_database]
[required_features=TEMPLATE_FUNCTIONS,MULTILEVEL_AGGREGATION]
CREATE TEMP AGGREGATE FUNCTION TemplatedSumOfDistinctValues(value ANY TYPE) AS (
  SUM(value GROUP BY value)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION SumOfAveragesForDistinctKey(key STRING, value INT64) AS (
  SUM(AVG(value) GROUP BY key)
);
==
[prepare_database]
[required_features=TEMPLATE_FUNCTIONS,MULTILEVEL_AGGREGATION]
CREATE TEMP AGGREGATE FUNCTION TemplatedSumOfAveragesForDistinctKey(key ANY TYPE, value INT64) AS (
  SUM(AVG(value) GROUP BY key)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION RatioOfSumOfMaxValuesForDistinctKeys(key1 STRING, key2 STRING, value INT64) AS (
  SUM(MAX(value) GROUP BY key1) / SUM(MAX(value) GROUP BY key2)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION ArrayAggSumWithNonAggregateArgs(key STRING, value INT64, x INT64 NOT AGGREGATE, y INT64 NOT AGGREGATE) AS (
  ARRAY_AGG(SUM(value + x) + y GROUP BY key, x ORDER BY key)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION SumWithStructFieldAccesses(struct_arg STRUCT<a STRUCT<b INT64>>) AS (
  SUM(struct_arg.a.b GROUP BY struct_arg.a)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION TemplatedSumWithStructFieldAccesses(struct_arg ANY TYPE) AS (
  SUM(struct_arg.a.b GROUP BY struct_arg.a)
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION UdaCallingOtherUdas(key1 STRING, key2 STRING, value INT64) AS (
  FLOOR(
  MAX(SumOfAveragesForDistinctKey(key1, value) GROUP BY key2)
  + SumOfAveragesForDistinctKey(key2, value)
  + TemplatedSumOfAveragesForDistinctKey(key1, value))
);
==
[prepare_database]
CREATE TEMP FUNCTION UdfCallingUdas() AS
  ((SELECT ARRAY_SUM(ArrayAggSumWithNonAggregateArgs(key, value, 1, 100))
  + SumOfAveragesForDistinctKey(key, value)
  + TemplatedSumOfAveragesForDistinctKey(key, value)
  FROM UNNEST(
    ARRAY<STRUCT<key STRING, value INT64>>[
      ('foo', 70),
      ('foo', 20),
      ('bar', 30),
      ('bar', 10),
      ('bar', 20)])
));
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION SumPlusCountPlusOne(value INT64) AS (
  SUM(value) + COUNT(value) + 1
);
==
[prepare_database]
CREATE TEMP AGGREGATE FUNCTION CountStarPlusOne() AS (
  COUNT(*) + 1
);
==

[name=call_nullary_uda_with_multi_level_agg]
[default skip_required_feature_integrity_check]
### BEGIN TESTS ###
# These tests all invoke UDA/UDFs that require the multilevel agg feature to be
# enabled during [prepare_database], but the refimpl can successfully execute
# these tests without the feature if the functions are already in the catalog,
# so the feature integrity test gives a false positive in this case.
SELECT NullaryUDAWithMultiLevelAgg() FROM (SELECT 1);
--
ARRAY<STRUCT<INT64>>[{1500}]
==

[name=call_sum_of_distinct_array_values]
[required_features=MULTILEVEL_AGGREGATION]
SELECT SumOfDistinctArrayValues([1, 2, 2, 3, 3, 3, 3, 4, 4]);
--
ARRAY<STRUCT<INT64>>[{10}]
==

[name=call_templated_sum_of_distinct_array_values]
[required_features=TEMPLATE_FUNCTIONS,MULTILEVEL_AGGREGATION]
SELECT TemplatedSumOfDistinctArrayValues([1, 2, 2, 3, 3, 3, 3, 4, 4]);
--
ARRAY<STRUCT<INT64>>[{10}]
==

[name=call_nullary_udf_with_multi_level_agg]
[required_features=MULTILEVEL_AGGREGATION]
SELECT NullaryUDFWithMultiLevelAgg();
--
ARRAY<STRUCT<INT64>>[{1500}]
==

[name=call_sum_of_distinct_values]
SELECT SumOfDistinctValues(x) FROM UNNEST([1, 2, 2, 3, 3, 3, 3, 4, 4]) as x;
--
ARRAY<STRUCT<INT64>>[{10}]
==

[name=call_templated_sum_of_distinct_values]
[required_features=MULTILEVEL_AGGREGATION]
SELECT TemplatedSumOfDistinctValues(x) FROM UNNEST([1, 2, 2, 3, 3, 3, 3, 4, 4]) as x;
--
ARRAY<STRUCT<INT64>>[{10}]
==

[name=call_sum_of_averages_for_distinct_key]
SELECT key1, SumOfAveragesForDistinctKey(key2, value) FROM UNNEST(
    ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
      ('foo', 'a', 10),
      ('foo', 'a', 30),
      ('foo', 'b', 7),
      ('bar', 'b', 30),
      ('bar', 'b', 50),
      ('bar', 'a', 100)])
GROUP BY key1
ORDER BY key1;
--
ARRAY<STRUCT<key1 STRING, DOUBLE>>[known order:{"bar", 140}, {"foo", 27}]
==

[name=call_templated_sum_of_averages_for_distinct_key]
[required_features=MULTILEVEL_AGGREGATION]
SELECT key1, TemplatedSumOfAveragesForDistinctKey(key2, value) FROM UNNEST(
    ARRAY<STRUCT<key1 STRING, key2 BOOL, value INT64>>[
      ('foo', true, 10),
      ('foo', true, 30),
      ('foo', false, 7),
      ('bar', false, 30),
      ('bar', false, 50),
      ('bar', true, 100)])
GROUP BY key1
ORDER BY key1;
--
ARRAY<STRUCT<key1 STRING, DOUBLE>>[known order:{"bar", 140}, {"foo", 27}]
==

[name=call_ratio_of_sum_of_max_values_for_distinct_keys]
SELECT RatioOfSumOfMaxValuesForDistinctKeys(key1, key2, value) FROM UNNEST(
    ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
      ('foo', 'a', 10),
      ('foo', 'a', -30),
      ('foo', 'b', 7),
      ('bar', 'b', 10),
      ('bar', 'b', -50),
      ('bar', 'a', 90)])
--
ARRAY<STRUCT<DOUBLE>>[{1}]
==

[name=call_array_agg_sum_with_non_aggregate_args]
SELECT ArrayAggSumWithNonAggregateArgs(key, value, 1, 100) FROM UNNEST(
    ARRAY<STRUCT<key STRING, value INT64>>[
      ('foo', 70),
      ('foo', 20),
      ('bar', 30),
      ('bar', 10),
      ('bar', 20)])
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:163, 192]}]
==

[name=call_sum_with_struct_field_accesses]
SELECT SumWithStructFieldAccesses(struct_arg) FROM UNNEST(
    ARRAY<STRUCT<struct_arg STRUCT<a STRUCT<b INT64>>>>[
      (STRUCT(STRUCT(STRUCT(10)))),
      (STRUCT(STRUCT(STRUCT(10)))),
      (STRUCT(STRUCT(STRUCT(20)))),
      (STRUCT(STRUCT(STRUCT(30)))),
      (STRUCT(STRUCT(STRUCT(40))))])
--
ARRAY<STRUCT<INT64>>[{100}]
==

[name=call_templated_sum_with_struct_field_accesses]
SELECT SumWithStructFieldAccesses(struct_arg) FROM UNNEST(
    ARRAY<STRUCT<struct_arg STRUCT<a STRUCT<b INT64>>>>[
      (STRUCT(STRUCT(STRUCT(10)))),
      (STRUCT(STRUCT(STRUCT(10)))),
      (STRUCT(STRUCT(STRUCT(20)))),
      (STRUCT(STRUCT(STRUCT(30)))),
      (STRUCT(STRUCT(STRUCT(40))))])
--
ARRAY<STRUCT<INT64>>[{100}]
==

[required_features=MULTILEVEL_AGGREGATION,GROUP_BY_ROLLUP,GROUPING_BUILTIN]
[name=call_sum_of_distinct_values_group_by_rollup]
SELECT
  GROUPING(col1) as col1_is_aggregated,
  GROUPING(col2) as col2_is_aggregated,
  SumOfDistinctValues(value) FROM UNNEST(
    ARRAY<STRUCT<col1 STRING, col2 STRING, value INT64>>[
      ('foo', 'a', 1),
      ('foo', 'a', 1),
      ('foo', 'a', 2),
      ('foo', 'b', 4),
      ('bar', 'b', 8),
      ('bar', 'b', 8),
      ('bar', 'b', 16),
      ('bar', 'a', 32)])
GROUP BY ROLLUP(col1, col2)
ORDER BY 1, 2, 3;
--
ARRAY<STRUCT<
        col1_is_aggregated INT64,
        col2_is_aggregated INT64,
        INT64
      >>
[known order:{0, 0, 3},
             {0, 0, 4},
             {0, 0, 24},
             {0, 0, 32},
             {0, 1, 7},
             {0, 1, 56},
             {1, 1, 63}]
==

[required_features=MULTILEVEL_AGGREGATION,GROUPING_SETS,GROUPING_BUILTIN]
[name=call_sum_of_distinct_values_group_by_cube]
SELECT
  GROUPING(col1) as col1_is_aggregated,
  GROUPING(col2) as col2_is_aggregated,
  SumOfDistinctValues(value) FROM UNNEST(
    ARRAY<STRUCT<col1 STRING, col2 STRING, value INT64>>[
      ('foo', 'a', 1),
      ('foo', 'a', 1),
      ('foo', 'a', 2),
      ('foo', 'b', 4),
      ('bar', 'b', 8),
      ('bar', 'b', 8),
      ('bar', 'b', 16),
      ('bar', 'a', 32)])
GROUP BY CUBE(col1, col2)
ORDER BY 1, 2, 3;
--
ARRAY<STRUCT<
        col1_is_aggregated INT64,
        col2_is_aggregated INT64,
        INT64
      >>
[known order:{0, 0, 3},
             {0, 0, 4},
             {0, 0, 24},
             {0, 0, 32},
             {0, 1, 7},
             {0, 1, 56},
             {1, 0, 28},
             {1, 0, 35},
             {1, 1, 63}]
==

[required_features=MULTILEVEL_AGGREGATION,GROUPING_SETS,GROUPING_BUILTIN]
[name=call_sum_of_distinct_values_group_by_grouping_sets]
SELECT
  GROUPING(col1) as col1_is_aggregated,
  GROUPING(col2) as col2_is_aggregated,
  SumOfDistinctValues(value) FROM UNNEST(
    ARRAY<STRUCT<col1 STRING, col2 STRING, value INT64>>[
      ('foo', 'a', 1),
      ('foo', 'a', 1),
      ('foo', 'a', 2),
      ('foo', 'b', 4),
      ('bar', 'b', 8),
      ('bar', 'b', 8),
      ('bar', 'b', 16),
      ('bar', 'a', 32)])
GROUP BY GROUPING SETS((col1, col1, col2), col2, () )
ORDER BY 1, 2, 3;
--
ARRAY<STRUCT<
        col1_is_aggregated INT64,
        col2_is_aggregated INT64,
        INT64
      >>
[known order:{0, 0, 3},
             {0, 0, 4},
             {0, 0, 24},
             {0, 0, 32},
             {1, 0, 28},
             {1, 0, 35},
             {1, 1, 63}]
==

[name=call_uda_calling_other_udas]
SELECT UdaCallingOtherUdas(key1, key2, value) FROM UNNEST(
    ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
      ('foo', 'a', 10),
      ('foo', 'a', -30),
      ('foo', 'b', 7),
      ('bar', 'b', 10),
      ('bar', 'b', -50),
      ('bar', 'a', 90)])
--
ARRAY<STRUCT<DOUBLE>>[{104}]
==

[name=call_udf_calling_udas]
SELECT UdfCallingUdas();
--
ARRAY<STRUCT<DOUBLE>>[{485}]
==

[name=call_uda_mixed_with_multi_level_aggs]
SELECT SumPlusCountPlusOne(value),
       COUNT(value GROUP BY value),
       CountStarPlusOne(),
       SumOfDistinctValues(value),
       RatioOfSumOfMaxValuesForDistinctKeys(key1, key2, value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 10),
  ('foo', 'a', -30),
  ('foo', 'b', 7),
  ('bar', 'b', 10),
  ('bar', 'b', -50),
  ('bar', 'a', 90)])
--
ARRAY<STRUCT<INT64, INT64, INT64, INT64, DOUBLE>>[{44, 5, 7, 27, 1}]
==

[name=call_uda_nested_inside_multi_level_agg]
SELECT SUM(CountStarPlusOne() GROUP BY key1),
       MAX(SumPlusCountPlusOne(value) GROUP BY key1, key2),
       COUNT(value GROUP BY value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 10),
  ('foo', 'a', -30),
  ('foo', 'b', 7),
  ('bar', 'b', 10),
  ('bar', 'b', -50),
  ('bar', 'a', 90)])
--
ARRAY<STRUCT<INT64, INT64, INT64>>[{8, 92, 5}]
==

[name=call_uda_mixed_with_multi_level_aggs_complex]
SELECT SumPlusCountPlusOne(value),
       UdaCallingOtherUdas(key1, key2, value),
       FLOOR(SumOfAveragesForDistinctKey(key2, value)),
       FLOOR(SUM(AVG(value) GROUP BY key2)),
       COUNT(value GROUP BY value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 10),
  ('foo', 'a', -30),
  ('foo', 'b', 7),
  ('bar', 'b', 10),
  ('bar', 'b', -50),
  ('bar', 'a', 90)])
--
ARRAY<STRUCT<INT64, DOUBLE, DOUBLE, DOUBLE, INT64>>[{44, 104, 12, 12, 5}]
==

[name=call_uda_nested_inside_multi_level_agg_complex]
SELECT SUM(SumOfDistinctValues(value) GROUP BY key1),
       COUNT(RatioOfSumOfMaxValuesForDistinctKeys(key1, key2, value) GROUP BY key1, key2),
       MAX(UdaCallingOtherUdas(key1, key2, value) GROUP BY key2)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 10),
  ('foo', 'a', -30),
  ('foo', 'b', 7),
  ('bar', 'b', 10),
  ('bar', 'b', -50),
  ('bar', 'a', 90)])
--
ARRAY<STRUCT<INT64, INT64, DOUBLE>>[{37, 4, 183}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_sum_squares_with_group_by]
SELECT SumSquares(MAX(val) GROUP BY key)
FROM UNNEST([
  STRUCT('a' AS key, 1 AS val),
  STRUCT('a', 2),
  STRUCT('b', 3)
]);
--
ARRAY<STRUCT<INT64>>[{13}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_sum_squares_with_group_by_2]
SELECT SumSquares(CountStarPlusOne() - 1 GROUP BY key)
FROM UNNEST([
  STRUCT('a' AS key, 1 AS val),
  STRUCT('a', 2),
  STRUCT('b', 3)
]);
--
ARRAY<STRUCT<INT64>>[{5}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_templated_sum_squares_with_group_by]
SELECT TemplatedSumSquares(SumOfAveragesForDistinctKey(inner_key, val) GROUP BY outer_key)
FROM UNNEST([
  STRUCT('x' as outer_key, 'a' AS inner_key, 1 AS val),
  STRUCT('x', 'a', 3),
  STRUCT('x', 'b', 7),
  STRUCT('y', 'a', 25),
  STRUCT('y', 'a', 15),
  STRUCT('y', 'b', 10)
]);
--
ARRAY<STRUCT<DOUBLE>>[{981}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_bunch_of_aggs_with_group_by]
SELECT BunchOfAggs(SUM(val) GROUP BY key)
FROM UNNEST([
  STRUCT('a' AS key, 1 AS val),
  STRUCT('a', 2),
  STRUCT('b', 3),
  STRUCT('b', 4)
]);
--
ARRAY<STRUCT<STRUCT<
                    sum_a INT64,
                    avg_a DOUBLE,
                    count_distinct_a INT64
                  >>>[{{10, 5, 2}}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_sum_of_distinct_values_with_group_by]
SELECT SumOfDistinctValues(CountStarPlusOne() GROUP BY key)
FROM UNNEST([
  STRUCT('a' AS key, 1 AS val),
  STRUCT('a', 1),
  STRUCT('a', 2),
  STRUCT('b', 3),
  STRUCT('b', 3),
  STRUCT('b', 4)
]);
--
ARRAY<STRUCT<INT64>>[{4}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_templated_sum_of_distinct_values_with_group_by]
SELECT TemplatedSumOfDistinctValues(COUNT(DISTINCT val) GROUP BY key)
FROM UNNEST([
  STRUCT('a' AS key, 1 AS val),
  STRUCT('a', 1),
  STRUCT('a', 2),
  STRUCT('b', 3),
  STRUCT('b', 3),
  STRUCT('b', 4)
]);
--
ARRAY<STRUCT<INT64>>[{2}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_sum_times_two_over_max_by_key]
SELECT SumTimesTwoOverMaxByKey(key2, value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
GROUP BY key1
ORDER BY key1
--
ARRAY<STRUCT<INT64>>[known order:{20}, {24}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_avg_times_two_over_sum__times_two_over_max_by_key]
SELECT AvgTimesTwo(SumTimesTwoOverMaxByKey(key2, value) GROUP BY key1)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
--
ARRAY<STRUCT<DOUBLE>>[{44}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_max_times_two_over_max_by_key]
SELECT MaxTimesTwoOverMaxByKey(key2, value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
GROUP BY key1
ORDER BY key1
--
ARRAY<STRUCT<INT64>>[known order:{12}, {14}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_avg_times_two_over_max_times_two_over_max_by_key]
SELECT AvgTimesTwo(MaxTimesTwoOverMaxByKey(key2, value) GROUP BY key1)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
--
ARRAY<STRUCT<DOUBLE>>[{26}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_count_times_two_over_max_by_key]
SELECT CountTimesTwoOverMaxByKey(key2, value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
GROUP BY key1
ORDER BY key1
--
ARRAY<STRUCT<INT64>>[known order:{4}, {4}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_avg_times_two_over_count_times_two_over_max_by_key]
SELECT AvgTimesTwo(CountTimesTwoOverMaxByKey(key2, value) GROUP BY key1)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
--
ARRAY<STRUCT<DOUBLE>>[{8}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_sum_squares_over_sum_times_two_by_key]
SELECT SumSquaresOverSumTimesTwoByKey(key2, value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
GROUP BY key1
ORDER BY key1
--
ARRAY<STRUCT<INT64>>[known order:{288}, {340}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_avg_times_two_over_sum_squares_over_sum_times_two_by_key]
SELECT AVG(SumSquaresOverSumTimesTwoByKey(key2, value) GROUP BY key1)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
--
ARRAY<STRUCT<DOUBLE>>[{314}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_array_agg_sum_with_non_aggregate_args_and_group_by]
SELECT ArrayAggSumWithNonAggregateArgs(key, SUM(value), 1, 100 GROUP BY key)
FROM UNNEST(
ARRAY<STRUCT<key STRING, value INT64>>[
  ('foo', 70),
  ('foo', 20),
  ('bar', 30),
  ('bar', 10),
  ('bar', 20)
]);
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<INT64>[known order:161, 191]}]
==

[required_features=MULTILEVEL_AGGREGATION,MULTILEVEL_AGGREGATION_ON_UDAS]
[name=call_multiple_top_level_udas_with_group_by]
SELECT SUM(CountStarPlusOne() GROUP BY key1),
       SumTimesTwo(CountStarPlusOne() GROUP BY key1),
       MaxTimesTwo(SumPlusCountPlusOne(value) GROUP BY key1, key2),
       CountTimesTwo(value GROUP BY value)
FROM UNNEST(
ARRAY<STRUCT<key1 STRING, key2 STRING, value INT64>>[
  ('foo', 'a', 1),
  ('foo', 'a', 5),
  ('foo', 'b', 7),
  ('bar', 'b', 2),
  ('bar', 'b', 4),
  ('bar', 'a', 6)])
--
ARRAY<STRUCT<INT64, INT64, INT64, INT64>>[{8, 16, 18, 12}]
