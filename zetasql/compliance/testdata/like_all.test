[prepare_database]
CREATE TABLE KeyValue AS (
  SELECT 1 AS Key, 'Value1' AS Value UNION ALL
  SELECT 2 AS Key, 'Value2' AS Value UNION ALL
  SELECT 3 AS Key, NULL AS Value
);
--
ARRAY<STRUCT<Key INT64, Value STRING>>[
  {1, "Value1"},
  {2, "Value2"},
  {3, NULL}
]
==

[prepare_database]
CREATE TABLE KeyValueBytes AS (
  SELECT 1 AS Key, b'Value1' AS Value UNION ALL
  SELECT 2 AS Key, b'Value2' AS Value UNION ALL
  SELECT 3 AS Key, NULL AS Value
);
--
ARRAY<STRUCT<Key INT64, Value BYTES>>[
  {1, b"Value1"},
  {2, b"Value2"},
  {3, NULL}
]
==

[prepare_database]
[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT]
CREATE TABLE StringTable(
  primary_Key INT64,
  col_ci STRING COLLATE 'und:ci',
  col_binary STRING COLLATE 'binary',
  col_no_collation STRING) AS
SELECT 1 primary_Key, "" col_ci, "a" col_binary, "c" UNION ALL
SELECT 2, "hello", "a", "c" UNION ALL
SELECT 3, "Case sensitive", "a", "c" UNION ALL
SELECT 4, "@", "A", "C" UNION ALL
SELECT 5, "\u205Fabc", "A", "C"  UNION ALL
SELECT 6, "B", "A", "C" UNION ALL
SELECT 7, NULL, "A", "C" UNION ALL
SELECT 8, "aa", "A", "C" UNION ALL
SELECT 9, "@", "B", "D" UNION ALL
SELECT 10, "", "B", "D" UNION ALL
SELECT 11, "a", "B", "D" UNION ALL
SELECT 12, "case sensitive", "a", "c" UNION ALL
SELECT 13, NULL, "B", "D" UNION ALL
SELECT 14, "Hello", "a", "c" UNION ALL
SELECT 15, "\u0413", "B", "D" UNION ALL
SELECT 16, "hel\u06DDlo", "a", "c" UNION ALL
SELECT 17, "h\u070Fello", "a", "c"
--
ARRAY<STRUCT<
        primary_Key INT64,
        col_ci STRING,
        col_binary STRING,
        col_no_collation STRING
      >>
[
  {1, "", "a", "c"},
  {2, "hello", "a", "c"},
  {3, "Case sensitive", "a", "c"},
  {4, "@", "A", "C"},
  {5, " abc", "A", "C"},
  {6, "B", "A", "C"},
  {7, NULL, "A", "C"},
  {8, "aa", "A", "C"},
  {9, "@", "B", "D"},
  {10, "", "B", "D"},
  {11, "a", "B", "D"},
  {12, "case sensitive", "a", "c"},
  {13, NULL, "B", "D"},
  {14, "Hello", "a", "c"},
  {15, "Г", "B", "D"},
  {16, "hel۝lo", "a", "c"},
  {17, "h܏ello", "a", "c"}
]
==

[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_string_nulls]
SELECT
  Value,
  Value LIKE ALL (NULL),
  Value LIKE ALL (NULL, NULL),
  Value LIKE ALL (NULL, 'Value1'),
  Value LIKE ALL ('Value1', NULL),
  Value LIKE ALL ('Value1', 'Value1', NULL),
  Value LIKE ALL ('Value1', NULL, 'Value1'),
  Value LIKE ALL (NULL, 'Value1', 'Value1'),
  Value LIKE ALL (NULL, 'Value1', 'Value1', Value),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value2", NULL, NULL, false, false, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_string_constant_patterns]
SELECT
  Value,
  Value LIKE ALL ('Value1'),
  Value LIKE ALL ('Value1', 'Value1'),
  Value LIKE ALL ('Value1', 'Value2'),
  Value LIKE ALL ('Valu%1', 'V%lue1'),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, true, false, true},
  {"Value2", false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_string_nonconstant_patterns]
SELECT
  Value,
  Value LIKE ALL (Value, Value),
  Value LIKE ALL (Value, 'Value1'),
  Value LIKE ALL (CONCAT(SUBSTR(Value, 0, 1), '%'), CONCAT(SUBSTR(Value, 0, 2), '%')),
  Value LIKE ALL (CONCAT(SUBSTR(Value, 0, 1), '%'), CONCAT(SUBSTR(Value, 0, 2), '+')),
FROM KeyValue ORDER BY VALUE;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, true, true, false},
  {"Value2", true, false, true, false}
]
==
[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_bytes_nulls]
SELECT
  Value,
  Value LIKE ALL (NULL),
  Value LIKE ALL (NULL, NULL),
  Value LIKE ALL (NULL, b'Value1'),
  Value LIKE ALL (b'Value1', NULL),
  Value LIKE ALL (b'Value1', b'Value1', NULL),
  Value LIKE ALL (b'Value1', NULL, b'Value1'),
  Value LIKE ALL (NULL, b'Value1', b'Value1'),
  Value LIKE ALL (NULL, b'Value1', b'Value1', Value),
FROM KeyValueBytes ORDER BY Value;
--
ARRAY<STRUCT<Value BYTES, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {b"Value1", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {b"Value2", NULL, NULL, false, false, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_bytes_constant_patterns]
SELECT
  Value,
  Value LIKE ALL (b'Value1'),
  Value LIKE ALL (b'Value1', b'Value1'),
  Value LIKE ALL (b'Value1', b'Value2'),
  Value LIKE ALL (b'Valu%1', b'V%lue1'),
FROM KeyValueBytes ORDER BY Value;
--
ARRAY<STRUCT<Value BYTES, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {b"Value1", true, true, false, true},
  {b"Value2", false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_bytes_nonconstant_patterns]
SELECT
  Value,
  Value LIKE ALL (Value, Value),
  Value LIKE ALL (Value, b'Value1'),
  Value LIKE ALL (
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 1), '%') AS BYTES),
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 2), '%') AS BYTES)),
  Value LIKE ALL (
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 1), '%') AS BYTES),
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 2), '+') AS BYTES))
FROM KeyValueBytes ORDER BY VALUE;
--
ARRAY<STRUCT<Value BYTES, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {b"Value1", true, true, true, false},
  {b"Value2", true, false, true, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_string_array_nulls]
SELECT
  Value,
  Value LIKE ALL UNNEST(CAST(NULL AS ARRAY<STRING>)),
  Value LIKE ALL UNNEST(ARRAY<STRING>[NULL]),
  Value LIKE ALL UNNEST(ARRAY<STRING>[NULL, NULL]),
  Value LIKE ALL UNNEST([NULL, 'Value1']),
  Value LIKE ALL UNNEST(['Value1', NULL]),
  Value LIKE ALL UNNEST(['Value1', 'Value1', NULL]),
  Value LIKE ALL UNNEST(['Value1', NULL, 'Value1']),
  Value LIKE ALL UNNEST([NULL, 'Value1', 'Value1']),
  Value LIKE ALL UNNEST([NULL, 'Value1', 'Value1', Value]),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, true, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value2", true, NULL, NULL, false, false, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_string_array_constant_patterns]
SELECT
  Value,
  Value LIKE ALL UNNEST([]),
  Value LIKE ALL UNNEST(['Value1']),
  Value LIKE ALL UNNEST(['Value1', 'Value1']),
  Value LIKE ALL UNNEST(['Value1', 'Value2']),
  Value LIKE ALL UNNEST(['Valu%1', 'V%lue1']),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, true, NULL, NULL, NULL, NULL},
  {"Value1", true, true, true, false, true},
  {"Value2", true, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_string_array_nonconstant_patterns]
SELECT
  Value,
  Value LIKE ALL UNNEST([Value, Value]),
  Value LIKE ALL UNNEST([Value, 'Value1']),
  Value LIKE ALL UNNEST([CONCAT(SUBSTR(Value, 0, 1), '%'), CONCAT(SUBSTR(Value, 0, 2), '%')]),
  Value LIKE ALL UNNEST([CONCAT(SUBSTR(Value, 0, 1), '%'), CONCAT(SUBSTR(Value, 0, 2), '+')]),
FROM KeyValue ORDER BY VALUE;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, true, true, false},
  {"Value2", true, false, true, false}
]
==
[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_bytes_array_nulls]
SELECT
  Value,
  Value LIKE ALL UNNEST(CAST(NULL AS ARRAY<BYTES>)),
  Value LIKE ALL UNNEST(ARRAY<BYTES>[NULL]),
  Value LIKE ALL UNNEST(ARRAY<BYTES>[NULL, NULL]),
  Value LIKE ALL UNNEST([NULL, b'Value1']),
  Value LIKE ALL UNNEST([b'Value1', NULL]),
  Value LIKE ALL UNNEST([b'Value1', b'Value1', NULL]),
  Value LIKE ALL UNNEST([b'Value1', NULL, b'Value1']),
  Value LIKE ALL UNNEST([NULL, b'Value1', b'Value1']),
  Value LIKE ALL UNNEST([NULL, b'Value1', b'Value1', Value]),
FROM KeyValueBytes ORDER BY Value;
--
ARRAY<STRUCT<Value BYTES, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, true, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {b"Value1", true, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {b"Value2", true, NULL, NULL, false, false, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_bytes_array_constant_patterns]
SELECT
  Value,
  Value LIKE ALL UNNEST([b'Value1']),
  Value LIKE ALL UNNEST([b'Value1', b'Value1']),
  Value LIKE ALL UNNEST([b'Value1', b'Value2']),
  Value LIKE ALL UNNEST([b'Valu%1', b'V%lue1']),
FROM KeyValueBytes ORDER BY Value;
--
ARRAY<STRUCT<Value BYTES, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {b"Value1", true, true, false, true},
  {b"Value2", false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_bytes_array_nonconstant_patterns]
SELECT
  Value,
  Value LIKE ALL UNNEST([Value, Value]),
  Value LIKE ALL UNNEST([Value, b'Value1']),
  Value LIKE ALL UNNEST([
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 1), '%') AS BYTES),
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 2), '%') AS BYTES)]),
  Value LIKE ALL UNNEST([
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 1), '%') AS BYTES),
      CAST(CONCAT(SUBSTR(CAST(Value AS STRING), 0, 2), '+') AS BYTES)])
FROM KeyValueBytes ORDER BY VALUE;
--
ARRAY<STRUCT<Value BYTES, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {b"Value1", true, true, true, false},
  {b"Value2", true, false, true, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_string_array_function]
SELECT
  Value,
  Value LIKE ALL UNNEST(SPLIT('Value1', 'b')),
  Value LIKE ALL UNNEST(REGEXP_EXTRACT_ALL('Value1', 'l')),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL},
  {"Value1", true, false},
  {"Value2", false, false}
]

==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=not_like_all_with_collation_ci_test_with_null_elements]
# Test "NOT LIKE ALL" with collation for NULL elements on either LHS or RHS list.
SELECT
  collate(NULL, 'und:ci') NOT LIKE ALL (NULL, NULL),
  collate(NULL, 'und:ci') NOT LIKE ALL (NULL, 'abc'),
  collate(NULL, 'und:ci') NOT LIKE ALL ('abc', 'abc'),
  collate('abc', 'und:ci') NOT LIKE ALL (NULL, NULL),
  collate('abc', 'und:ci') NOT LIKE ALL (NULL, 'ABC'),
  collate('abc', 'und:ci') NOT LIKE ALL ('xyz', 'ABC'),
  collate('abc', 'und:ci') NOT LIKE ALL ('xyz', 'pqr'),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, NULL, NULL, NULL, false, false, true}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=like_all_with_collation_ci_on_lhs_element]
# Test "LIKE ALL" with LHS wrapped in collation.
SELECT
  collate('GooGle', 'und:ci') LIKE ALL ('goo%', 'google'),
  collate('GooGle', 'und:ci') LIKE ALL ('%goog%', 'GooGLE'),
  collate('GooGle', 'und:ci') LIKE ALL ('%goO%', collate('GOOglE', 'und:ci')),
  collate('GooGle', 'und:ci') LIKE ALL ('%xxx%', collate('GOOGLE', 'und:ci')),
  collate('GooGle', 'und:ci') LIKE ALL ('%go%', collate('x%abc%x', 'und:ci')),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL>>[{true, true, true, false, false}]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=not_like_all_with_collation_ci_on_lhs_element]
# Test "NOT LIKE ALL" with LHS wrapped in collation.
SELECT
  collate('GooGle', 'und:ci') NOT LIKE ALL ('goo%', 'google'),
  collate('GooGle', 'und:ci') NOT LIKE ALL ('%goog%', 'GooGLE'),
  collate('GooGle', 'und:ci') NOT LIKE ALL ('%goO%', collate('GOOglE', 'und:ci')),
  collate('GooGle', 'und:ci') NOT LIKE ALL ('%goO%', collate('xlE', 'und:ci')),
  collate('GooGle', 'und:ci') NOT LIKE ALL ('%xxx%', collate('ppp', 'und:ci')),
  collate('GooGle', 'und:ci') NOT LIKE ALL ('%xx%', collate('x%abc%x', 'und:ci')),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {false, false, false, false, true, true}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=like_all_with_collation_ci_on_one_of_the_rhs_element]
# Test "LIKE ALL" with one of the elements in RHS wrapped in collation.
SELECT
  'GooGle' LIKE ALL ('go%', collate('google', 'und:ci')),
  'GooGle' LIKE ALL (collate('%ooG%', 'und:ci'), 'GOOGLE'),
  'GooGle' LIKE ALL (collate('%ooG%', 'und:ci'), collate('GOOGLE', 'und:ci')),
  'GooGle' LIKE ALL ('%xxx%', collate('GOOGLE', 'und:ci')),
  collate('GooGle', '') LIKE ALL ('%ooG%', collate('x%go%x', 'und:ci')),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL>>[{true, true, true, false, false}]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=not_like_all_with_collation_ci_on_one_of_the_rhs_element]
# Test "NOT LIKE ALL" with one of the elements in RHS wrapped in collation.
SELECT
  'GooGle' NOT LIKE ALL ('go%', collate('google', 'und:ci')),
  'GooGle' NOT LIKE ALL (collate('%ooG%', 'und:ci'), 'GOOGLE'),
  'GooGle' NOT LIKE ALL (collate('%ooG%', 'und:ci'), collate('ppp', 'und:ci')),
  'GooGle' NOT LIKE ALL ('%xxx%', collate('GOOGLE', 'und:ci')),
  'GooGle' NOT LIKE ALL ('%xxx%', collate('GooyGle', 'und:ci')),
  collate('defabcdef', '') NOT LIKE ALL ('%ooGs%', collate('x%go%x', 'und:ci')),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {false, false, false, false, true, true}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=like_all_with_collation_ci_with_ignorable_character]
# Test "LIKE ALL" with an ignorable character in the pattern.
# \u070F is an ignorable character
SELECT
  collate('defA\u070FbCdef', 'und:ci') LIKE ALL ('%abc%', '%def%'),
  'defA\u070FbCdef' LIKE ALL (collate('%abc%', 'und:ci'), '%def%'),
  'defA\u070FbCdef' LIKE ALL (collate('%abc%', 'und:ci'), '%xyz%'),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL>>[{true, true, false}]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=not_like_all_with_collation_ci_with_ignorable_character]
# Test "NOT LIKE ALL" with an ignorable character in the pattern.
# \u070F is an ignorable character
SELECT
  collate('defA\u070FbCdef', 'und:ci') NOT LIKE ALL ('%abc%', '%def%'),
  'defA\u070FbCdef' NOT LIKE ALL (collate('%abc%', 'und:ci'), '%def%'),
  'defA\u070FbCdef' NOT LIKE ALL (collate('%xxx%', 'und:ci'), '%xyz%'),
--
# Note: Collation will be applied to LHS and all elements in RHS.
ARRAY<STRUCT<BOOL, BOOL, BOOL>>[{false, false, true}]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=like_all_with_column_collation_binary]
# Test "LIKE ALL" with table column having binary collation.
select primary_key, col_binary from StringTable WHERE col_binary LIKE ALL ('a')
--
ARRAY<STRUCT<primary_key INT64, col_binary STRING>>[unknown order:
  {2, "a"},
  {12, "a"},
  {14, "a"},
  {16, "a"},
  {1, "a"},
  {3, "a"},
  {17, "a"}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL]
[name=not_like_all_with_column_collation_binary]
# Test "NOT LIKE ALL" with table column having binary collation.
select primary_key, col_binary from StringTable WHERE col_binary NOT LIKE ALL ('a')
--
ARRAY<STRUCT<primary_key INT64, col_binary STRING>>[unknown order:
  {4, "A"},
  {6, "A"},
  {8, "A"},
  {10, "B"},
  {5, "A"},
  {7, "A"},
  {9, "B"},
  {11, "B"},
  {13, "B"},
  {15, "B"}
]
==

[required_features=LIKE_ANY_SOME_ALL]
[name=like_all_string_constant_patterns_in_scalar_subquery]
SELECT
  Value,
  Value LIKE ALL ((SELECT 'Value1')),
  Value LIKE ALL ((SELECT 'Value1'), 'Value1'),
  Value LIKE ALL ((SELECT 'Value1'), (SELECT 'Value1')),
  Value LIKE ALL ((SELECT 'Value1'), (SELECT 'Value2')),
  Value LIKE ALL ((SELECT 'Valu%1'), (SELECT 'V%lue1')),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, true, true, false, true},
  {"Value2", false, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_SUBQUERY]
[name=like_all_string_constant_patterns_in_non_paranthesized_scalar_subquery]
# These subqueries need LIKE_ANY_SOME_ALL_SUBQUERY to be turned on.
SELECT
  Value,
  Value LIKE ALL (SELECT 'Value1'),
  Value LIKE ALL (SELECT Value FROM KeyValue WHERE Value in ('Value1')),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL},
  {"Value1", true, true},
  {"Value2", false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_string_constant_patterns_in_subquery_as_array_element]
SELECT
  Value,
  Value LIKE ALL UNNEST([(SELECT 'Value1'), 'Value1']),
  Value LIKE ALL UNNEST([(SELECT 'Value1'), (SELECT 'Value1')]),
  Value LIKE ALL UNNEST([(SELECT 'Value1'), (SELECT 'Value2')]),
  Value LIKE ALL UNNEST([(SELECT 'Valu%1'), (SELECT 'V%lue1')]),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, true, false, true},
  {"Value2", false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_string_constant_patterns_in_subquery_as_array_element]
SELECT
  Value,
  Value NOT LIKE ALL UNNEST([(SELECT 'Value1'), 'Value1']),
  Value NOT LIKE ALL UNNEST([(SELECT 'Value1'), 'Value2']),
  Value NOT LIKE ALL UNNEST([(SELECT 'Value1'), (SELECT 'Value1')]),
  Value NOT LIKE ALL UNNEST([(SELECT 'Value1'), (SELECT 'Value2')]),
  Value NOT LIKE ALL UNNEST([(SELECT 'Valu%1'), (SELECT 'V%lue1')]),
  Value NOT LIKE ALL UNNEST([(SELECT 'Valu%3'), (SELECT 'V%lue2')]),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", false, false, false, false, false, true},
  {"Value2", true, false, true, false, true, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_collation_with_null_values]
# Test "LIKE ALL ARRAY" with collation with NULL values in LHS or RHS list.
SELECT
  collate(NULL, 'und:ci') LIKE ALL UNNEST(CAST(NULL AS ARRAY<STRING>)),
  collate(NULL, 'und:ci') LIKE ALL UNNEST(ARRAY<STRING>[NULL]),
  collate('goog', 'und:ci') LIKE ALL UNNEST(CAST(NULL AS ARRAY<STRING>)),
  collate('goog', 'und:ci') LIKE ALL UNNEST(ARRAY<STRING>[NULL]),
  collate(NULL, 'und:ci') LIKE ALL UNNEST(['google', 'GOOGLE']),
  collate(NULL, 'und:ci') LIKE ALL UNNEST(['goog']),
  collate('GOOGLE', 'und:ci') LIKE ALL UNNEST(['google', NULL]),
  'GOOGLE' LIKE ALL UNNEST([collate('google', 'und:ci'), NULL]),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {true, NULL, true, NULL, NULL, NULL, NULL, NULL}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_collation_with_null_values]
# Test "NOT LIKE ALL ARRAY" with collation with NULL values in LHS or RHS list.
SELECT
  collate(NULL, 'und:ci') NOT LIKE ALL UNNEST(CAST(NULL AS ARRAY<STRING>)),
  collate(NULL, 'und:ci') NOT LIKE ALL UNNEST(ARRAY<STRING>[NULL]),
  collate('goog', 'und:ci') NOT LIKE ALL UNNEST(CAST(NULL AS ARRAY<STRING>)),
  collate('goog', 'und:ci') NOT LIKE ALL UNNEST(ARRAY<STRING>[NULL]),
  collate(NULL, 'und:ci') NOT LIKE ALL UNNEST(['google', 'GOOGLE']),
  collate(NULL, 'und:ci') NOT LIKE ALL UNNEST(['goog']),
  collate('GOOGLE', 'und:ci') NOT LIKE ALL UNNEST(['google', NULL]),
  'GOOGLE' NOT LIKE ALL UNNEST([collate('google', 'und:ci'), NULL]),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {true, NULL, true, NULL, NULL, NULL, false, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_collation]
# Test "LIKE ALL ARRAY" with collation in LHS or RHS list.
SELECT
  collate('google', 'und:ci') LIKE ALL UNNEST([NULL, 'GOOGLE']),
  'google' LIKE ALL UNNEST([NULL, collate('GOOGLE', 'und:ci')]),
  collate('GooGle', 'und:ci') LIKE ALL UNNEST(['goo%', 'xxx']),
  'GooGle' LIKE ALL UNNEST([collate('goo%', 'und:ci'), 'xxx']),
  collate('GooGle', 'und:ci') LIKE ALL UNNEST(['%yyy%', 'GOOGLE']),
  'GooGle' LIKE ALL UNNEST([collate('%yyy%', 'und:ci'), 'GOOGLE']),
  collate('GooG', 'und:ci') LIKE ALL UNNEST(['%oO%', collate('XXX', 'und:ci')]),
  collate('GooG', 'und:ci') LIKE ALL UNNEST(['%x%', collate('GOOG', 'und:ci')]),
  collate('GooG', 'und:ci') LIKE ALL UNNEST(['%p%', collate('x%a%', 'und:ci')]),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, NULL, false, false, false, false, false, false, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_collation]
# Test "NOT LIKE ALL ARRAY" with collation in LHS or RHS list.
SELECT
  collate('google', 'und:ci') NOT LIKE ALL UNNEST([NULL, 'GOOGLE']),
  'google' NOT LIKE ALL UNNEST([NULL, collate('GOOGLE', 'und:ci')]),
  collate('GooGle', 'und:ci') NOT LIKE ALL UNNEST(['goo%', 'xxx']),
  'GooGle' NOT LIKE ALL UNNEST([collate('goo%', 'und:ci'), 'xxx']),
  collate('GooGle', 'und:ci') NOT LIKE ALL UNNEST(['%yyy%', 'GOOGLE']),
  'GooGle' NOT LIKE ALL UNNEST([collate('%yyy%', 'und:ci'), 'GOOGLE']),
  collate('GooG', 'und:ci') NOT LIKE ALL UNNEST(['%oO%', collate('XXX', 'und:ci')]),
  collate('GooG', 'und:ci') NOT LIKE ALL UNNEST(['%x%', collate('GOOG', 'und:ci')]),
  collate('GooG', 'und:ci') NOT LIKE ALL UNNEST(['%p%', collate('x%a%', 'und:ci')]),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {false, false, false, false, false, false, false, false, true}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_arrayconact_function]
# Test "LIKE ALL ARRAY" with ARRAY_CONCAT function.
SELECT
  NULL LIKE ALL UNNEST(ARRAY_CONCAT(['abc'], ['xyz', NULL])),
  'abc' LIKE ALL UNNEST(ARRAY_CONCAT(['abc', NULL], [])),
  'abc' LIKE ALL UNNEST(ARRAY_CONCAT(['xyz'], ARRAY<STRING>[NULL])),
  'abc' LIKE ALL UNNEST(ARRAY_CONCAT(['xyz', '%z%'], ['%b%'])),
  'abc' LIKE ALL UNNEST(ARRAY_CONCAT(['ABC'], ['%B%'], ['%a%'])),
  'abc' LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], ['%z%'], ['%x%'])),
  'abc' LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], ['%c%'], ['%x%'])),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, NULL, false, false, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_arrayconact_function]
# Test "NOT LIKE ALL ARRAY" with ARRAY_CONCAT function.
SELECT
  NULL NOT LIKE ALL UNNEST(ARRAY_CONCAT(['abc'], ['xyz', NULL])),
  'abc' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['abc', NULL], [])),
  'abc' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['xyz'], ARRAY<STRING>[NULL])),
  'abc' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['xyz', '%z%'], ['%b%'])),
  'abc' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['abc'], ['%b%'], ['%a%'])),
  'abc' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['%a%', '%b%'], ['%b%'], ['%c%'])),
  'abc' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], ['%c%'], ['%x%'])),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, false, NULL, false, false, false, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_arrayconact_function_with_collation]
# Test "LIKE ALL ARRAY" with ARRAY_CONCAT function with collation enabled.
SELECT
  NULL LIKE ALL UNNEST(ARRAY_CONCAT([collate('abc', 'und:ci')], ['xyz', NULL])),
  collate('abc', 'und:ci') LIKE ALL UNNEST(ARRAY_CONCAT(['AbC', NULL], [])),
  collate('abc', 'und:ci') LIKE ALL UNNEST(ARRAY_CONCAT(['xyz'], ARRAY<STRING>[NULL])),
  'ABC' LIKE ALL UNNEST(ARRAY_CONCAT([collate('xyz', 'und:ci'), '%z%'], ['%b%'])),
  collate('abc', 'und:ci') LIKE ALL UNNEST(ARRAY_CONCAT(['ABC'], ['%B%'], ['%a%'])),
  'ABC' LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], [collate('%z%', 'und:ci')], ['%x%'])),
  'ABC' LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], [collate('%c%', 'und:ci')], ['%x%'])),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, NULL, false, false, true, false, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_arrayconact_function_with_collation]
# Test "NOT LIKE ALL ARRAY" with ARRAY_CONCAT function with collation enabled.
SELECT
  NULL NOT LIKE ALL UNNEST(ARRAY_CONCAT([collate('abc', 'und:ci')], ['xyz', NULL])),
  collate('abc', 'und:ci') NOT  LIKE ALL UNNEST(ARRAY_CONCAT(['AbC', NULL], [])),
  collate('abc', 'und:ci') NOT LIKE ALL UNNEST(ARRAY_CONCAT(['xyz'], ARRAY<STRING>[NULL])),
  'ABC' NOT LIKE ALL UNNEST(ARRAY_CONCAT([collate('xyz', 'und:ci'), '%z%'], ['%b%'])),
  collate('abc', 'und:ci') NOT LIKE ALL UNNEST(ARRAY_CONCAT(['ABC'], ['%B%'], ['%a%'])),
  'ABC' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], [collate('%z%', 'und:ci')], ['%x%'])),
  'ABC' NOT LIKE ALL UNNEST(ARRAY_CONCAT(['x', '%y%'], [collate('%c%', 'und:ci')], ['%x%'])),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, false, NULL, false, false, true, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_scalar_subquery]
SELECT
  Value,
  Value NOT LIKE ALL UNNEST ([(SELECT 'Value1')]),
  Value NOT LIKE ALL UNNEST ([(SELECT 'Value1'), 'Value2']),
  Value NOT LIKE ALL UNNEST ([(SELECT 'Value1'), NULL]),
  Value NOT LIKE ALL UNNEST ([(SELECT 'Value1'), (SELECT 'Value2')]),
  Value NOT LIKE ALL UNNEST ([(SELECT 'Valu%1'), (SELECT 'V%lue1')]),
  Value NOT LIKE ALL UNNEST ([(SELECT 'Valu%2'), (SELECT 'V%lue2')]),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", false, false, false, false, false, true},
  {"Value2", true, false, NULL, false, true, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_SUBQUERY]
[name=not_like_all_with_patterns_in_non_paranthesized_scalar_subquery]
# TODO: Like any/all subquery is current not using the new
# implementation of 'not like any/all' operator which needs to be fixed
# when subquery feature will be fully implemented. As of now, the subquery
# variant of like any/all is not completely ready.
SELECT
  Value,
  Value NOT LIKE ALL (SELECT 'Value1'),
  Value NOT LIKE ALL (SELECT Value FROM KeyValue WHERE Value in ('Value1')),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL},
  {"Value1", true, true},
  {"Value2", false, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_scalar_subquery_with_collation]
SELECT
  Value,
  Value LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci'))]),
  Value LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci')),
                         collate('vALue2', 'und:ci')]),
  Value LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci')), NULL]),
  Value LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci')),
                         (SELECT collate('%LUE2%', 'und:ci'))]),
  collate(Value, 'und:ci') LIKE ALL UNNEST ([(SELECT 'valu%1'),
                                            (SELECT 'v%lue1')]),
  collate(Value, 'und:ci') LIKE ALL UNNEST ([(SELECT 'VaLU%2'),
                                            (SELECT 'V%LUE2')]),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", true, false, NULL, false, true, false},
  {"Value2", false, false, false, false, false, true}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_scalar_subquery_with_collation]
SELECT
  Value,
  Value NOT LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci'))]),
  Value NOT LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci')),
                              collate('vALue2', 'und:ci')]),
  Value NOT LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci')), NULL]),
  Value NOT LIKE ALL UNNEST ([(SELECT collate('vALue1', 'und:ci')),
                              (SELECT collate('%LUE2%', 'und:ci'))]),
  collate(Value, 'und:ci') NOT LIKE ALL UNNEST ([(SELECT 'valu%1'),
                                                 (SELECT 'v%lue1')]),
  collate(Value, 'und:ci') NOT LIKE ALL UNNEST ([(SELECT 'VaLU%2'),
                                                 (SELECT 'V%LUE2')]),
FROM KeyValue ORDER BY Value;
--
ARRAY<STRUCT<Value STRING, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[known order:
  {NULL, NULL, NULL, NULL, NULL, NULL, NULL},
  {"Value1", false, false, false, false, false, true},
  {"Value2", true, false, NULL, false, true, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_array_agg_function]
SELECT
  'a' LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['b', NULL]) x)),
  'a' LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['a', NULL]) x)),
  'a' LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['a', 'b']) x)),
  'a' LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['b', 'b']) x)),
  'a' LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['%a%', 'z']) x)),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {false, NULL, false, false, false}
]
==

[required_features=LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_array_agg_function]
SELECT
  'a' NOT LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['b', NULL]) x)),
  'a' NOT LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['a', NULL]) x)),
  'a' NOT LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['a', 'b']) x)),
  'a' NOT LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['b', 'b']) x)),
  'a' NOT LIKE ALL UNNEST((SELECT ARRAY_AGG(x) FROM UNNEST(['%a%', 'z']) x)),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL>>[{NULL, false, false, true, false}]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=like_all_array_with_array_agg_function_with_collation]
SELECT
  'a' LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('b', 'und:ci'), NULL]) x)),
  'a' LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('A', 'und:ci'), NULL]) x)),
  'A' LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST(['a', collate('b', 'und:ci')]) x)),
  'A' LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('b', 'und:ci'), '%A%']) x)),
  collate('A', 'und:ci') LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST(['%a%', 'z']) x)),
  collate('A', 'und:ci') LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST(['%b%', 'z']) x)),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {false, NULL, false, false, false, false}
]
==

[required_features=ANNOTATION_FRAMEWORK,COLLATION_SUPPORT,LIKE_ANY_SOME_ALL,LIKE_ANY_SOME_ALL_ARRAY]
[name=not_like_all_array_with_array_agg_function_with_collation]
SELECT
  'a' NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('b', 'und:ci'), NULL]) x)),
  'a' NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('A', 'und:ci'), NULL]) x)),
  'A' NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST(['a', collate('b', 'und:ci')]) x)),
  'A' NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('b', 'und:ci'), '%A%']) x)),
  'A' NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST([collate('a', 'und:ci'), '%A%']) x)),
  collate('A', 'und:ci') NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST(['%a%', 'z']) x)),
  collate('A', 'und:ci') NOT LIKE ALL UNNEST(
    (SELECT ARRAY_AGG(x) FROM UNNEST(['%a%', 'a']) x)),
--
ARRAY<STRUCT<BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL>>[
  {NULL, false, false, false, false, false, false}
]
