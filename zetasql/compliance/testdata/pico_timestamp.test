[default global_labels=timestamp_type_and_functions]
[default required_features=TIMESTAMP_PICOS]

[name=select_pico]
SELECT TIMESTAMP '2123-01-02 04:05:06.123456789123+00'
--
ARRAY<STRUCT<TIMESTAMP>>[{2123-01-02 04:05:06.123456789123+00}]
==

[name=select_pico_with_timezone]
SELECT TIMESTAMP '2123-01-02 04:05:06.123456789123+07:30'
--
ARRAY<STRUCT<TIMESTAMP>>[{2123-01-01 20:35:06.123456789123+00}]
==

[name=select_nested_pico]
[required_features=BRACED_PROTO_CONSTRUCTORS,TIMESTAMP_PICOS]
SELECT STRUCT{f1: TIMESTAMP '2123-01-02 04:05:06.123456789123+00', f2: [TIMESTAMP '2123-01-02 04:05:06.123456789123+00']}
--
ARRAY<STRUCT<STRUCT<f1 TIMESTAMP, f2 ARRAY<>>>>[
  {{
     2123-01-02 04:05:06.123456789123+00,
     ARRAY<TIMESTAMP>[2123-01-02 04:05:06.123456789123+00]
   }}
]
==

[name=to_json_pico]
[required_features=TIMESTAMP_PICOS,JSON_TYPE]
SELECT TO_JSON(TIMESTAMP '2020-03-22 12:00:29.123456789012-07:00'),
       TO_JSON(TIMESTAMP '2020-03-22 12:00:29.123456789012Z'),
       TO_JSON(TIMESTAMP '2020-03-22 12:00:29.12345678Z'),
--
ARRAY<STRUCT<JSON, JSON, JSON>>[
  {
    "2020-03-22T19:00:29.123456789012Z",
    "2020-03-22T12:00:29.123456789012Z",
    "2020-03-22T12:00:29.123456780Z"
  }
]
==

[name=timestamp_add_sub_picos]
[required_features=TIMESTAMP_PICOS]
SELECT TIMESTAMP_ADD(TIMESTAMP '2020-03-22 12:00:29.123456789012Z', INTERVAL 1 DAY),
       TIMESTAMP_ADD(TIMESTAMP '2020-03-22 12:00:29.123456789012Z', INTERVAL 1 SECOND),
       TIMESTAMP_ADD(TIMESTAMP '2020-03-22 12:00:29.123456789012Z', INTERVAL 1 MICROSECOND),
       TIMESTAMP_SUB(TIMESTAMP '2020-03-22 12:00:29.123456789012Z', INTERVAL 1 DAY),
       TIMESTAMP_SUB(TIMESTAMP '2020-03-22 12:00:29.123456789012Z', INTERVAL 1 SECOND),
       TIMESTAMP_SUB(TIMESTAMP '2020-03-22 12:00:29.123456789012Z', INTERVAL 1 MICROSECOND),

--
ARRAY<STRUCT<TIMESTAMP, TIMESTAMP, TIMESTAMP, TIMESTAMP, TIMESTAMP, TIMESTAMP>>[
  {
    2020-03-23 12:00:29.123456789012+00,
    2020-03-22 12:00:30.123456789012+00,
    2020-03-22 12:00:29.123457789012+00,
    2020-03-21 12:00:29.123456789012+00,
    2020-03-22 12:00:28.123456789012+00,
    2020-03-22 12:00:29.123455789012+00
  }
]
==

[name=timestamp_diff_picos]
[required_features=TIMESTAMP_PICOS]
SELECT TIMESTAMP_DIFF(t1, t2, DAY),
       TIMESTAMP_DIFF(t1, t2, MICROSECOND),
       TIMESTAMP_DIFF(t1, t2, PICOSECOND)
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.123456789012Z' AS t1,
             TIMESTAMP '2020-03-21 12:00:29.123456789012Z' AS t2)
--
ARRAY<STRUCT<INT64, INT64, INT64>>[{1, 86400000000, 86400000000000000}]
==

[name=timestamp_diff_picos_overflow]
[required_features=TIMESTAMP_PICOS]
SELECT TIMESTAMP_DIFF(t1, t2, PICOSECOND),
FROM (SELECT TIMESTAMP '9999-12-31 12:31:59.999999999999Z' AS t1,
             TIMESTAMP '0001-01-01 01:00:00.123456789012Z' AS t2)
--
ERROR: generic::out_of_range: TIMESTAMP_DIFF int64 overflow
==

[name=timestamp_trunc_picos]
[required_features=TIMESTAMP_PICOS,TIMESTAMP_NANOS]
SELECT TIMESTAMP_TRUNC(t1, PICOSECOND),
       TIMESTAMP_TRUNC(t1, NANOSECOND),
       TIMESTAMP_TRUNC(t1, MICROSECOND),
       TIMESTAMP_TRUNC(t1, MILLISECOND),
       TIMESTAMP_TRUNC(t1, SECOND)
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.123456789012Z' AS t1)
--
ARRAY<STRUCT<TIMESTAMP, TIMESTAMP, TIMESTAMP, TIMESTAMP, TIMESTAMP>>[
  {
    2020-03-22 12:00:29.123456789012+00,
    2020-03-22 12:00:29.123456789+00,
    2020-03-22 12:00:29.123456+00,
    2020-03-22 12:00:29.123+00,
    2020-03-22 12:00:29+00
  }
]

==

# Here picos is part of the required features, and there's no engine override
# to the default, so it's set to 12. Any digits beyond that are truncated.
[name=parse_timestamp_truncates_beyond_precision]
[required_features=TIMESTAMP_PICOS]
select parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2017-01-01T13:54:59.123456789012345Z");
--
ARRAY<STRUCT<TIMESTAMP>>[{2017-01-01 13:54:59.123456789012+00}]
==

[name=parse_timestamp_with_explicit_precision]
[required_features=NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2017-01-01T13:54:59.123Z", precision => 3);
--
ARRAY<STRUCT<TIMESTAMP>>[{2017-01-01 13:54:59.123+00}]
==

# Truncates because of E*S
[name=parse_timestamp_with_explicit_precision_too_many_digits]
[required_features=NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2017-01-01T13:54:59.123456Z", precision => 3);
--
ARRAY<STRUCT<TIMESTAMP>>[{2017-01-01 13:54:59.123+00}]
==

# Error because of the specific precision %E3S
[name=parse_timestamp_with_explicit_precision_too_many_digits_strict]
[required_features=NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E3S%Ez", "2017-01-01T13:54:59.123456Z", precision => 6);
--
ERROR: generic::out_of_range: Failed to parse input string "2017-01-01T13:54:59.123456Z"
==

# Error because of the specific precision, but SAFE returns NULL
[name=parse_timestamp_with_explicit_precision_too_many_digits_strict_with_safe]
[required_features=NAMED_ARGUMENTS,SAFE_FUNCTION_CALL,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select safe.parse_timestamp("%Y-%m-%dT%H:%M:%E3S%Ez", "2017-01-01T13:54:59.123456Z", precision => 6);
--
ARRAY<STRUCT<TIMESTAMP>>[{NULL}]
==

[name=parse_timestamp_with_explicit_precision_fewer_digits]
[required_features=NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2017-01-01T13:54:59.1Z", precision => 3);
--
ARRAY<STRUCT<TIMESTAMP>>[{2017-01-01 13:54:59.100+00}]
==

[name=parse_timestamp_with_explicit_precision_format_string_requires_too_many]
[required_features=NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E6S%Ez", "2017-01-01T13:54:59.123Z", precision => 3);
--
ERROR: generic::out_of_range: Failed to parse input string "2017-01-01T13:54:59.123Z"
==

[name=parse_timestamp_with_explicit_precision_format_string_requires_too_many_with_safe]
[required_features=NAMED_ARGUMENTS,SAFE_FUNCTION_CALL,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select safe.parse_timestamp("%Y-%m-%dT%H:%M:%E6S%Ez", "2017-01-01T13:54:59.123Z", precision => 3);
--
ARRAY<STRUCT<TIMESTAMP>>[{NULL}]
==

[name=parse_timestamp_with_invalid_time_zone]
[required_features=TIMESTAMP_PICOS,NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2017-01-01T13:54:59.123456789012Z", precision => 12, timezone => "invalid_time_zone");
--
ERROR: generic::out_of_range: Invalid time zone: invalid_time_zone
==

[name=parse_timestamp_with_invalid_empty_time_zone]
[required_features=TIMESTAMP_PICOS,NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2017-01-01T13:54:59.123456789012Z", precision => 12, timezone => "");
--
ERROR: generic::out_of_range: Invalid empty time zone
==
[name=timestamp_parse_format_picos_roundtrip]
[required_features=TIMESTAMP_PICOS,NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select format_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", "2000-01-01T00:00:00.123456789012Z", precision => 12)),
       format_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2000-01-01T00:00:00.123456789012Z", precision => 12)),
       format_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", "1969-01-01T00:00:00.123456789012Z", precision => 12)),
       format_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "1969-01-01T00:00:00.123456789012Z", precision => 12)),

       # With trailing zeroes, precision => 12
       format_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", "1969-01-01T00:00:00.123456789000Z", precision => 12)),
       format_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "1969-01-01T00:00:00.123456789100Z", precision => 12))
--
ARRAY<STRUCT<STRING, STRING, STRING, STRING, STRING, STRING>>[
  {
    "1999-12-31T16:00:00.123456789012-08:00",
    "1999-12-31T16:00:00.123456789012-08:00",
    "1968-12-31T16:00:00.123456789012-08:00",
    "1968-12-31T16:00:00.123456789012-08:00",
    "1968-12-31T16:00:00.123456789000-08:00",
    "1968-12-31T16:00:00.1234567891-08:00"
  }
]
==

[name=timestamp_parse_format_picos_roundtrip_with_timezone]
[required_features=TIMESTAMP_PICOS,NAMED_ARGUMENTS,PARSE_TIMESTAMP_WITH_PRECISION_AND_TIMEZONE]
select format_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", "2000-01-01T00:00:00.123456789012Z", precision => 12, timezone => "UTC")),
       format_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "2000-01-01T00:00:00.123456789012Z", precision => 12, timezone => "UTC")),
       format_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", "1969-01-01T00:00:00.123456789012Z", precision => 12, timezone => "UTC")),
       format_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "1969-01-01T00:00:00.123456789012Z", precision => 12, timezone => "UTC")),

       # With trailing zeroes, precision => 12
       format_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E12S%Ez", "1969-01-01T00:00:00.123456789000Z", precision => 12, timezone => "UTC")),
       format_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", parse_timestamp("%Y-%m-%dT%H:%M:%E*S%Ez", "1969-01-01T00:00:00.123456789100Z", precision => 12, timezone => "UTC"))
--
ARRAY<STRUCT<STRING, STRING, STRING, STRING, STRING, STRING>>[
  {
    "1999-12-31T16:00:00.123456789012-08:00",
    "1999-12-31T16:00:00.123456789012-08:00",
    "1968-12-31T16:00:00.123456789012-08:00",
    "1968-12-31T16:00:00.123456789012-08:00",
    "1968-12-31T16:00:00.123456789000-08:00",
    "1968-12-31T16:00:00.1234567891-08:00"
  }
]
==

[name=timestamp_extract_boundary_cases_picos]
SELECT
  EXTRACT(YEAR FROM timestamp),
  EXTRACT(WEEK FROM timestamp),
  FORMAT_TIMESTAMP('%Y-W%U', timestamp),
  EXTRACT(YEAR FROM timestamp AT TIME ZONE '-14'),
  EXTRACT(WEEK FROM timestamp AT TIME ZONE '-14'),
  FORMAT_TIMESTAMP('%Y-W%U', timestamp, '-14'),
  EXTRACT(YEAR FROM timestamp AT TIME ZONE '+14'),
  EXTRACT(WEEK FROM timestamp AT TIME ZONE '+14'),
  FORMAT_TIMESTAMP('%Y-W%U', timestamp, '+14'),
  EXTRACT(ISOYEAR FROM timestamp),
  EXTRACT(ISOWEEK FROM timestamp),
  FORMAT_TIMESTAMP('%G-W%V', timestamp),
  EXTRACT(ISOYEAR FROM timestamp AT TIME ZONE '-14'),
  EXTRACT(ISOWEEK FROM timestamp AT TIME ZONE '-14'),
  FORMAT_TIMESTAMP('%G-W%V', timestamp, '-14'),
  EXTRACT(ISOYEAR FROM timestamp AT TIME ZONE '+14'),
  EXTRACT(ISOWEEK FROM timestamp AT TIME ZONE '+14'),
  FORMAT_TIMESTAMP('%G-W%V', timestamp, '+14')
FROM UNNEST([
  TIMESTAMP '0001-01-01 00:00:00.000000000001Z',
  TIMESTAMP '9999-12-31 23:59:59.999999999999Z'
]) AS timestamp WITH OFFSET
ORDER BY OFFSET;
--
ARRAY<STRUCT<INT64,
             INT64,
             STRING,
             INT64,
             INT64,
             STRING,
             INT64,
             INT64,
             STRING,
             INT64,
             INT64,
             STRING,
             INT64,
             INT64,
             STRING,
             INT64,
             INT64,
             STRING>>
[known order:{0,
              53,
              "0-W53",
              0,
              53,
              "0-W53",
              1,
              0,
              "1-W00",
              0,
              52,
              "0-W52",
              0,
              52,
              "0-W52",
              1,
              1,
              "1-W01"},
             {9999,
              52,
              "9999-W52",
              9999,
              52,
              "9999-W52",
              10000,
              0,
              "10000-W00",
              9999,
              52,
              "9999-W52",
              9999,
              52,
              "9999-W52",
              9999,
              52,
              "9999-W52"}]
==

[name=timestamp_extract_picos_part]
[required_features=TIMESTAMP_PICOS]
SELECT
  EXTRACT(PICOSECOND FROM timestamp)
FROM UNNEST([
  TIMESTAMP '0001-01-01 00:00:00.000000000001Z',
  TIMESTAMP '9999-12-31 23:59:59.999999999999Z',
  TIMESTAMP '0001-01-01 00:00:00Z'
]) AS timestamp WITH OFFSET
--
ARRAY<STRUCT<INT64>>[unknown order:{999999999999}, {1}, {0}]
==

# Use a timezone that would advance the day in the result.
[name=extract_date_from_timestamp_with_picos]
[required_features=TIMESTAMP_PICOS]
SELECT EXTRACT(DATE FROM ts_col AT TIME ZONE 'UTC+14')
FROM UNNEST([TIMESTAMP '2020-03-22 12:00:29.123456789012Z']) AS ts_col
--
ARRAY<STRUCT<DATE>>[{2020-03-23}]
==

[name=cast_timestamp_with_picos_to_date]
[required_features=TIMESTAMP_PICOS]
SELECT CAST(ts_col AS DATE)
FROM UNNEST([TIMESTAMP '2020-03-22 12:00:29.123456789012Z']) AS ts_col
--
ARRAY<STRUCT<DATE>>[{2020-03-22}]
==

[name=date_from_timestamp_with_picos]
[required_features=TIMESTAMP_PICOS]
SELECT DATE(ts_col)
FROM UNNEST([TIMESTAMP '2020-03-22 12:00:29.123456789012Z']) AS ts_col
--
ARRAY<STRUCT<DATE>>[{2020-03-22}]
==

[name=generate_timestamp_array]
[required_features=TIMESTAMP_PICOS,TIMESTAMP_NANOS]
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 NANOSECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:29.000000002Z' AS t_end)
UNION ALL
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 MICROSECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:29.000002Z' AS t_end)
UNION ALL
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 MILLISECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:29.002Z' AS t_end)
UNION ALL
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 SECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:31Z' AS t_end)
--
ARRAY<STRUCT<ARRAY<>>>[unknown order:
  {ARRAY<TIMESTAMP>[known order:
     2020-03-22 12:00:29.000000000001+00,
     2020-03-22 12:00:29.000000001001+00
   ]},
  {ARRAY<TIMESTAMP>[known order:
     2020-03-22 12:00:29.000000000001+00,
     2020-03-22 12:00:29.000001000001+00
   ]},
  {ARRAY<TIMESTAMP>[known order:
     2020-03-22 12:00:29.000000000001+00,
     2020-03-22 12:00:29.001000000001+00
   ]},
  {ARRAY<TIMESTAMP>[known order:
     2020-03-22 12:00:29.000000000001+00,
     2020-03-22 12:00:30.000000000001+00
   ]}
]

==

[name=generate_timestamp_array_start_is_after_end]
[required_features=TIMESTAMP_PICOS,TIMESTAMP_NANOS]
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 NANOSECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:30.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_end)
--
ARRAY<STRUCT<ARRAY<>>>[{ARRAY<TIMESTAMP>[]}]

==

[name=generate_timestamp_array_delta_smaller_than_step]
[required_features=TIMESTAMP_PICOS]
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 DAY),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:30.000000000001Z' AS t_end)
--
ARRAY<STRUCT<ARRAY<>>>[
  {ARRAY<TIMESTAMP>[2020-03-22 12:00:29.000000000001+00]}
]

==

[name=generate_timestamp_array_out_of_range]
[required_features=TIMESTAMP_PICOS,TIMESTAMP_NANOS]
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 1 NANOSECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:30.000000000001Z' AS t_end)
--
ERROR: generic::out_of_range: Cannot generate arrays with more than 16000 elements.

==

[name=generate_timestamp_array_zero_step]
[required_features=TIMESTAMP_PICOS,TIMESTAMP_NANOS]
SELECT GENERATE_TIMESTAMP_ARRAY(t_start, t_end, INTERVAL 0 NANOSECOND),
FROM (SELECT TIMESTAMP '2020-03-22 12:00:29.000000000001Z' AS t_start,
             TIMESTAMP '2020-03-22 12:00:30.000000000001Z' AS t_end)
--
ERROR: generic::out_of_range: Sequence step cannot be 0.
==

[name=unix_seconds_and_fractions_with_pico_input]
[required_features=TIMESTAMP_PICOS]
SELECT
  unix_seconds(ts_micros),
  unix_seconds(ts_picos),

  unix_millis(ts_micros),
  unix_millis(ts_picos),

  unix_micros(ts_micros),
  unix_micros(ts_picos)
FROM (SELECT
        TIMESTAMP '2020-03-22 12:00:29.123456Z' AS ts_micros,
        TIMESTAMP '2020-03-22 12:00:29.123456789012Z' AS ts_picos)
--
ARRAY<STRUCT<INT64, INT64, INT64, INT64, INT64, INT64>>[
  {1584878429,
   1584878429,
   1584878429123,
   1584878429123,
   1584878429123456,
   1584878429123456}
]
==

# We do not yet support intervals with picosecond. When we do, we should add a
# test case where the interval step itself also has picos.
[required_features=TIMESTAMP_PICOS,TIME_BUCKET_FUNCTIONS,INTERVAL_TYPE,CIVIL_TIME,EXTENDED_DATE_TIME_SIGNATURES]
[name=timestamp_picos_in_datetime_bucket]
select
  datetime_bucket(ts, INTERVAL 7 DAY),
  datetime_bucket(ts, INTERVAL 7 DAY, timestamp '2150-12-11 07:00:00.123456789012')
from (select timestamp '2020-02-15 14:57:39.123456789012' ts)
--
ARRAY<STRUCT<TIMESTAMP, TIMESTAMP>>[
  {
    2020-02-09 08:00:00+00,
    2020-02-14 15:00:00.123456789012+00
  }
]
