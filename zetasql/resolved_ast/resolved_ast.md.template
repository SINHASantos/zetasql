<!--
  resolved_ast.md generated from template:
    https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/resolved_ast.md.template

  Generated by target:
    //zetasql/resolved_ast:run_gen_resolved_ast_md
-->

# ZetaSQL Resolved AST

The ZetaSQL analyzer produces an abstract syntax tree (AST). The nodes of this
AST (ResolveAST) are generated by
[https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/gen_resolved_ast.py] for both C++
and Java using bazel genrules. This document provides a summary of the nodes and
their hierarchy.

The C++ classes for the AST produced by the ZetaSQL parser are documented in
zetasql/docs/parse_ast.md.

### C++ {{ "{#" }}ResolvedNode}

The base class `ResolvedNode` is defined in
[https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/resolved_node.h](https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/resolved_node.h)

The generated classes are specified in
[https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/gen_resolved_ast.py](https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/gen_resolved_ast.py)
See that file for comments on specific nodes and fields.

Additional non-generated classes that are documented separately:

- <a id="ResolvedColumn"></a>[ResolvedColumn](https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/resolved_column.h)
- <a id="ResolvedCollation"></a>[ResolvedCollation](https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/resolved_collation.h)

### Java

The base class `ResolvedNode` is defined in
[https://github.com/google/zetasql/blob/master/java/com/google/zetasql/resolvedast/ResolvedNode.java](https://github.com/google/zetasql/blob/master/java/com/google/zetasql/resolvedast/ResolvedNode.java)

The generated classes are specified in
[https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/gen_resolved_ast.py](https://github.com/google/zetasql/blob/master/zetasql/resolved_ast/gen_resolved_ast.py)
See that file for comments on specific nodes and fields.

Additional non-generated classes that are documented separately:

- [ResolvedColumn](https://github.com/google/zetasql/blob/master/java/com/google/zetasql/resolvedast/ResolvedColumn.java)

## Resolved AST Node Hierarchy

<p><pre><code>
{{- root_node_name|linkify_node_names}}
{% for node in root_child_nodes|sort_by_name recursive%}
{{"%*s" | format(loop.depth * 2, "")}}{{node.name|linkify_node_names}}
{{loop(node.subclasses|sort_by_name) -}}
{% endfor %}
</code></pre></p>

## Node Details

NOTE: This documentation includes only the public field accessors. It excludes
constructors, setters, and boilerplate implementation of virtual methods from
the base class.

{% for node in nodes %}

### {{node.name}}{ #{{node.name|unplural}} }

<p><pre><code class="lang-c++">
{%- if node.comment %}
<font color="brown">{{node.comment|e|linkify_node_names}}</font>
{% endif %}
class {{node.name}} : public {{node.parent|as_link}} {
{% if not node.is_abstract %}
  static const ResolvedNodeKind TYPE = {{node.enum_name}};

{% endif %}
{% if node.extra_defs %}
{{node.extra_defs|e|linkify_node_names}}

{% endif %}
{% for field in node.fields %}
 {% if field.comment %}
<font color="brown">{{field.comment|e|linkify_node_names}}</font>
 {% endif %}
  {{field.getter_return_type|linkify_node_names}} {{field.name|linkify_node_names}}() const;
 {% if field.is_vector %}
  int {{field.name}}_size() const;
  {{field.element_arg_type|linkify_node_names}} {{field.name|linkify_node_names}}(int i) const;
 {% endif %}
 {% if not loop.last %}
{{blank_line}}
 {% endif %}
{% endfor %}
};
</code></pre></p>

{% endfor %}
