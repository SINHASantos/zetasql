//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// This file contains the constness levels defined by ZetaSQL.
// See (broken link) for more details.

syntax = "proto2";

package zetasql;

option java_package = "com.google.zetasql";
option java_outer_classname = "ConstnessLevelProtos";
option java_multiple_files = true;

message ConstnessLevelProto {
  enum Level {
    // Unspecified constness level.
    CONSTNESS_UNSPECIFIED = 0;

    FOREVER_CONST = 1;
    ANALYSIS_CONST = 2;

    // TODO: b/277365877 - Deprecate the legacy constness level.
    // Currently, this means the argument must be a literal or parameter.
    // This is the serialization for FunctionArgumentType::must_be_constant().
    LEGACY_LITERAL_OR_PARAMETER = 1000;

    // TODO: b/277365877 - Deprecate the legacy constness level.
    // The rules of classifying expression as this level are:
    // - literals and parameters are constant
    // - column references are not constant
    // - correlated column references
    // - scalar functions are constant if FunctionOptions::volatility is
    //   IMMUTABLE or STABLE, and if all arguments are constant
    // - aggregate and analytic functions are not constant
    // - DDL CONSTANTs
    // - expression subqueries are not constant
    // - built-in operators like CAST and CASE and struct field access are
    //   constant if all arguments are constant
    // - UDF argument references
    // This is the serialization for
    // FunctionArgumentType::must_be_constant_expression().
    LEGACY_CONSTANT_EXPRESSION = 1001;
  }
}
