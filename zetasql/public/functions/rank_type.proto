//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql.functions;

import "zetasql/public/type.proto";

option java_package = "com.google.zetasql.functions";
option java_outer_classname = "ZetaSQLRankType";

// Specifies how to calculate the relative rank of a value within
// a KLL sketch. Since a value loaded into a sketch may represent a range
// of ranks, this enum determines which point within that range to return.
// See (broken link).
message RankTypeEnums {
  enum RankType {
    option (opaque_enum_type_options).sql_opaque_enum_name = "RANK_TYPE";

    // Invalid in ZetaSQL.
    RANK_TYPE_UNKNOWN = 0
        [(opaque_enum_value_options).invalid_enum_value = true];

    // Calculates the fraction of items in the input that are smaller than
    // or equal to the queried value.
    // Example: For {A, B}, rank_type=>'FRACTION_LESS_THAN_OR_EQUAL' for B
    // returns 1.0. Mathematically: # of (item <= value) / # of all items.
    FRACTION_LESS_THAN_OR_EQUAL = 1;

    // Calculates the midpoint of the rank interval for the value.
    // Equivalent to (FRACTION_LESS_THAN + FRACTION_LESS_THAN_OR_EQUAL) / 2.
    MIDPOINT = 2;

    // Calculates the fraction of items in the input that are strictly smaller
    // than the queried value.
    // Example: For {A, B}, rank_type=>'FRACTION_LESS_THAN' for B returns 0.5.
    // Mathematically: # of (item < value) / # of all items.
    FRACTION_LESS_THAN = 3;
  }
}
