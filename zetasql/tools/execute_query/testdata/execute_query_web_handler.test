[mode=analyze execute]

# Simple query
select 1;
--
query:# Simple query
select 1;

mode_execute
mode_analyze
sql_mode_query
target_syntax_mode_standard
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>1</td>
      </tr>
  </tbody>
</table>

result_analyzed:<span class="ast-node">QueryStmt</span>
+-output_column_list=
| +-$query.<span class="ast-col dollar_col1_1">$col1#1</span> AS `$col1` [INT64]
+-query=
  +-<span class="ast-node">ProjectScan</span>
    +-column_list=[$query.<span class="ast-col dollar_col1_1">$col1#1</span>]
    +-expr_list=
    | +-<span class="ast-col dollar_col1_1">$col1#1</span> := Literal(type=INT64, value=1)
    +-input_scan=
      +-<span class="ast-node">SingleRowScan</span>
\
==

[mode=unanalyze]
[target_syntax_mode=standard]
WITH mytable AS (
  SELECT 1 as Key, 2 as Value
)
SELECT * from mytable;
--
query:WITH mytable AS (
  SELECT 1 as Key, 2 as Value
)
SELECT * from mytable;

mode_unanalyze
sql_mode_query
target_syntax_mode_standard
result_unanalyzed:WITH
  mytable AS (
    SELECT
      1 AS a_1,
      2 AS a_2
  )
SELECT
  withrefscan_3.a_1 AS Key,
  withrefscan_3.a_2 AS Value
FROM
  mytable AS withrefscan_3;
\
==

[mode=unanalyze]
[target_syntax_mode=pipe]
WITH mytable AS (
  SELECT 1 as Key, 2 as Value
)
SELECT * from mytable
GROUP BY ALL;
--
query:WITH mytable AS (
  SELECT 1 as Key, 2 as Value
)
SELECT * from mytable
GROUP BY ALL;

mode_unanalyze
sql_mode_query
target_syntax_mode_pipe
result_unanalyzed:WITH
  mytable AS (
    SELECT
      1 AS a_1,
      2 AS a_2
  )
FROM
  mytable AS withrefscan_3
|&gt; EXTEND
     withrefscan_3.a_1 AS a_4,
     withrefscan_3.a_2 AS a_5
|&gt; AGGREGATE
   GROUP BY a_4, a_5
|&gt; AS aggregatescan_6
|&gt; SELECT
     aggregatescan_6.a_4 AS Key,
     aggregatescan_6.a_5 AS Value;
\
==

# Parse a simple procedural script
[mode=parse]
[sql_mode=script]
DECLARE x INT64 DEFAULT 100;
--
query:DECLARE x INT64 DEFAULT 100;

mode_parse
sql_mode_script
target_syntax_mode_standard
result_parsed:Script [0-28]
  StatementList [0-28]
    VariableDeclaration [0-27]
      IdentifierList [8-9]
        Identifier(x) [8-9]
      SimpleType [10-15]
        PathExpression [10-15]
          Identifier(INT64) [10-15]
      IntLiteral(100) [24-27]
\
==

# Parse a procedural script loop
[mode=parse]
[sql_mode=script]
DECLARE x INT64 DEFAULT 0;
WHILE x < 3
DO
  SELECT x as num, x * x as num_square;
  SET x = x + 1;
END WHILE;
--
query:DECLARE x INT64 DEFAULT 0;
WHILE x &lt; 3
DO
  SELECT x as num, x * x as num_square;
  SET x = x + 1;
END WHILE;

mode_parse
sql_mode_script
target_syntax_mode_standard
result_parsed:Script [0-109]
  StatementList [0-109]
    VariableDeclaration [0-25]
      IdentifierList [8-9]
        Identifier(x) [8-9]
      SimpleType [10-15]
        PathExpression [10-15]
          Identifier(INT64) [10-15]
      IntLiteral(0) [24-25]
    WhileStatement [27-108]
      BinaryExpression(&lt;) [33-38]
        PathExpression [33-34]
          Identifier(x) [33-34]
        IntLiteral(3) [37-38]
      StatementList [44-98]
        QueryStatement [44-80]
          Query [44-80]
            Select [44-80]
              SelectList [51-80]
                SelectColumn [51-59]
                  PathExpression [51-52]
                    Identifier(x) [51-52]
                  Alias [53-59]
                    Identifier(num) [56-59]
                SelectColumn [61-80]
                  BinaryExpression(*) [61-66]
                    PathExpression [61-62]
                      Identifier(x) [61-62]
                    PathExpression [65-66]
                      Identifier(x) [65-66]
                  Alias [67-80]
                    Identifier(num_square) [70-80]
        SingleAssignment [84-97]
          Identifier(x) [88-89]
          BinaryExpression(+) [92-97]
            PathExpression [92-93]
              Identifier(x) [92-93]
            IntLiteral(1) [96-97]
\
==

# Execute a procedural script loop
[mode=execute analyze]
[sql_mode=script]
DECLARE x INT64 DEFAULT 0;
WHILE x < 3
DO
  SELECT x as num, x * x as num_square;
  SET x = x + 1;
END WHILE;
--
query:DECLARE x INT64 DEFAULT 0;
WHILE x &lt; 3
DO
  SELECT x as num, x * x as num_square;
  SET x = x + 1;
END WHILE;

mode_execute
mode_analyze
sql_mode_script
target_syntax_mode_standard
statement_text:SELECT x as num, x * x as num_square
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>num&zwnj;</th>
        <th>num_square&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>0</td>
          <td>0</td>
      </tr>
  </tbody>
</table>

result_analyzed:<span class="ast-node">QueryStmt</span>
+-output_column_list=
| +-$query.<span class="ast-col num_1">num#1</span> AS num [INT64]
| +-$query.<span class="ast-col num_square_2">num_square#2</span> AS num_square [INT64]
+-query=
  +-<span class="ast-node">ProjectScan</span>
    +-column_list=$query.[<span class="ast-col num_1">num#1</span>, <span class="ast-col num_square_2">num_square#2</span>]
    +-expr_list=
    | +-<span class="ast-col num_1">num#1</span> := Constant(x, type=INT64, value=0)
    | +-<span class="ast-col num_square_2">num_square#2</span> :=
    |   +-<span class="ast-node">FunctionCall</span>(ZetaSQL:$multiply(INT64, INT64) -&gt; INT64)
    |     +-<span class="ast-node">Constant</span>(x, type=INT64, value=0)
    |     +-<span class="ast-node">Constant</span>(x, type=INT64, value=0)
    +-input_scan=
      +-<span class="ast-node">SingleRowScan</span>

statement_text:SELECT x as num, x * x as num_square
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>num&zwnj;</th>
        <th>num_square&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>1</td>
          <td>1</td>
      </tr>
  </tbody>
</table>

result_analyzed:<span class="ast-node">QueryStmt</span>
+-output_column_list=
| +-$query.<span class="ast-col num_1">num#1</span> AS num [INT64]
| +-$query.<span class="ast-col num_square_2">num_square#2</span> AS num_square [INT64]
+-query=
  +-<span class="ast-node">ProjectScan</span>
    +-column_list=$query.[<span class="ast-col num_1">num#1</span>, <span class="ast-col num_square_2">num_square#2</span>]
    +-expr_list=
    | +-<span class="ast-col num_1">num#1</span> := Constant(x, type=INT64, value=1)
    | +-<span class="ast-col num_square_2">num_square#2</span> :=
    |   +-<span class="ast-node">FunctionCall</span>(ZetaSQL:$multiply(INT64, INT64) -&gt; INT64)
    |     +-<span class="ast-node">Constant</span>(x, type=INT64, value=1)
    |     +-<span class="ast-node">Constant</span>(x, type=INT64, value=1)
    +-input_scan=
      +-<span class="ast-node">SingleRowScan</span>

statement_text:SELECT x as num, x * x as num_square
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>num&zwnj;</th>
        <th>num_square&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>2</td>
          <td>4</td>
      </tr>
  </tbody>
</table>

result_analyzed:<span class="ast-node">QueryStmt</span>
+-output_column_list=
| +-$query.<span class="ast-col num_1">num#1</span> AS num [INT64]
| +-$query.<span class="ast-col num_square_2">num_square#2</span> AS num_square [INT64]
+-query=
  +-<span class="ast-node">ProjectScan</span>
    +-column_list=$query.[<span class="ast-col num_1">num#1</span>, <span class="ast-col num_square_2">num_square#2</span>]
    +-expr_list=
    | +-<span class="ast-col num_1">num#1</span> := Constant(x, type=INT64, value=2)
    | +-<span class="ast-col num_square_2">num_square#2</span> :=
    |   +-<span class="ast-node">FunctionCall</span>(ZetaSQL:$multiply(INT64, INT64) -&gt; INT64)
    |     +-<span class="ast-node">Constant</span>(x, type=INT64, value=2)
    |     +-<span class="ast-node">Constant</span>(x, type=INT64, value=2)
    +-input_scan=
      +-<span class="ast-node">SingleRowScan</span>
\
==

# Execute a procedural script loop with error
[mode=execute]
[sql_mode=script]
SET x = x + 1;
--
query:SET x = x + 1;

mode_execute
sql_mode_script
target_syntax_mode_standard
error:Undeclared variable: x [at 1:5]
SET x = x + 1;
    ^
==

# UDF
[mode=execute]
[sql_mode=script]
CREATE FUNCTION sq(x INT64) returns INT64 as (x * x);
select sq(16);
--
query:CREATE FUNCTION sq(x INT64) returns INT64 as (x * x);
select sq(16);

mode_execute
sql_mode_script
target_syntax_mode_standard
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>$col_1&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>256</td>
      </tr>
  </tbody>
</table>
\
==

# TVF
[mode=analyze,execute]
[sql_mode=script]
[enabled_ast_rewrites=ALL]

CREATE TEMP TABLE FUNCTION mytvf() RETURNS TABLE<x INT64> AS (
  select 1 x union all select 2 x
);

select * from mytvf();
--
query:CREATE TEMP TABLE FUNCTION mytvf() RETURNS TABLE&lt;x INT64&gt; AS (
  select 1 x union all select 2 x
);

select * from mytvf();

mode_execute
sql_mode_script
target_syntax_mode_standard
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>x&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>1</td>
      </tr>
      <tr>
          <td>2</td>
          <td>2</td>
      </tr>
  </tbody>
</table>
\
==

# Test executed_multi with a mix of successful and failed results.
[enabled_language_features=DEV]
[enabled_ast_rewrites=ALL]
[mode=execute]
select 1
|> fork (
  |> select *
), (
  |> select error("this is an error")
)
--
query:select 1
|&gt; fork (
  |&gt; select *
), (
  |&gt; select error(&quot;this is an error&quot;)
)

mode_execute
sql_mode_query
target_syntax_mode_standard
table:<table>
  <thead>
    <tr>
        <th>#&zwnj;</th>
        <th>&zwnj;</th>
    </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>1</td>
      </tr>
  </tbody>
</table>

error:this is an error
